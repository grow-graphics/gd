package gdjson

import (
	"reflect"

	"graphics.gd/variant/RID"
)

var Resources = map[string]reflect.Type{
	"Camera3D.get_camera_rid.":                         reflect.TypeFor[RID.Camera](),
	"Camera3D.get_pyramid_shape_rid.":                  reflect.TypeFor[RID.Shape3D](),
	"CanvasItem.get_canvas_item.":                      reflect.TypeFor[RID.CanvasItem](),
	"CanvasItem.get_canvas.":                           reflect.TypeFor[RID.Canvas](),
	"CanvasLayer.get_canvas.":                          reflect.TypeFor[RID.Canvas](),
	"CharFXTransform.get_font.":                        reflect.TypeFor[RID.Font](),
	"CharFXTransform.set_font.font":                    reflect.TypeFor[RID.Font](),
	"CollisionObject2D.get_rid.":                       reflect.TypeFor[RID.Body2D](),
	"CollisionObject3D.get_rid.":                       reflect.TypeFor[RID.Body3D](),
	"DisplayServer.status_indicator_set_menu.menu_rid": reflect.TypeFor[RID.NativeMenu](),
	"Font.find_variation.":                             reflect.TypeFor[RID.Font](),
	"Font.get_rids.":                                   reflect.TypeFor[[]RID.Font](),
	"Font.draw_string.canvas_item":                     reflect.TypeFor[RID.CanvasItem](),
	"Font.draw_multiline_string.canvas_item":           reflect.TypeFor[RID.CanvasItem](),
	"Font.draw_string_outline.canvas_item":             reflect.TypeFor[RID.CanvasItem](),
	"Font.draw_multiline_string_outline.canvas_item":   reflect.TypeFor[RID.CanvasItem](),
	"Font.draw_char.canvas_item":                       reflect.TypeFor[RID.CanvasItem](),
	"Font.draw_char_outline.canvas_item":               reflect.TypeFor[RID.CanvasItem](),
	"FramebufferCacheRD.get_cache_multipass.textures":  reflect.TypeFor[[]RID.Texture](),
	"FramebufferCacheRD.get_cache_multipass.":          reflect.TypeFor[RID.Framebuffer](),
	"GridMap.set_navigation_map.navigation_map":        reflect.TypeFor[RID.NavigationMap3D](),
	"GridMap.get_navigation_map.":                      reflect.TypeFor[RID.NavigationMap3D](),
	"GridMap.get_bake_mesh_instance.":                  reflect.TypeFor[RID.Mesh](),
	"Joint2D.get_rid.":                                 reflect.TypeFor[RID.Joint2D](),
	"Joint3D.get_rid.":                                 reflect.TypeFor[RID.Joint3D](),
	"KinematicCollision2D.get_collider_rid.":           reflect.TypeFor[RID.Body2D](),
	"KinematicCollision3D.get_collider_rid.":           reflect.TypeFor[RID.Body3D](),

	"NativeMenu.get_system_menu.":                         reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.create_menu.":                             reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.has_menu.rid":                             reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.free_menu.rid":                            reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_size.rid":                             reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.popup.rid":                                reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_interface_direction.rid":              reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_popup_open_callback.rid":              reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_popup_open_callback.rid":              reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_popup_close_callback.rid":             reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_popup_close_callback.rid":             reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_minimum_width.rid":                    reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_minimum_width.rid":                    reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.is_opened.rid":                            reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.add_submenu_item.rid":                     reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.add_submenu_item.submenu_rid":             reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.add_item.rid":                             reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.add_check_item.rid":                       reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.add_icon_item.rid":                        reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.add_icon_check_item.rid":                  reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.add_radio_check_item.rid":                 reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.add_icon_radio_check_item.rid":            reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.add_multistate_item.rid":                  reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.add_separator.rid":                        reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.find_item_index_with_text.rid":            reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.find_item_index_with_tag.rid":             reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.find_item_index_with_submenu.rid":         reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.find_item_index_with_submenu.submenu_rid": reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.is_item_checked.rid":                      reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.is_item_checkable.rid":                    reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.is_item_radio_checkable.rid":              reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_item_callback.rid":                    reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_item_key_callback.rid":                reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_item_tag.rid":                         reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_item_text.rid":                        reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_item_submenu.rid":                     reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_item_submenu.":                        reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_item_accelerator.rid":                 reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.is_item_disabled.rid":                     reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.is_item_hidden.rid":                       reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_item_tooltip.rid":                     reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_item_state.rid":                       reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_item_max_states.rid":                  reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_item_icon.rid":                        reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_item_indentation_level.rid":           reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_checked.rid":                     reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_checkable.rid":                   reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_radio_checkable.rid":             reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_callback.rid":                    reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_hover_callbacks.rid":             reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_key_callback.rid":                reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_tag.rid":                         reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_text.rid":                        reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_submenu.rid":                     reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_submenu.submenu_rid":             reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_accelerator.rid":                 reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_disabled.rid":                    reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_hidden.rid":                      reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_tooltip.rid":                     reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_state.rid":                       reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_max_states.rid":                  reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_icon.rid":                        reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.set_item_indentation_level.rid":           reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.get_item_count.rid":                       reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.is_system_menu.rid":                       reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.remove_item.rid":                          reflect.TypeFor[RID.NativeMenu](),
	"NativeMenu.clear.rid":                                reflect.TypeFor[RID.NativeMenu](),

	"NavigationAgent2D.get_rid.":                                    reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationAgent2D.set_navigation_map.navigation_map":           reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationAgent2D.get_navigation_map.":                         reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationAgent3D.get_rid.":                                    reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationAgent3D.set_navigation_map.navigation_map":           reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationAgent3D.get_navigation_map.":                         reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationLink2D.get_rid.":                                     reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationLink3D.get_rid.":                                     reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationObstacle2D.get_rid.":                                 reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationObstacle2D.set_navigation_map.navigation_map":        reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationObstacle2D.get_navigation_map.":                      reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationObstacle3D.get_rid.":                                 reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationPathQueryParameters2D.set_map.map":                   reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationPathQueryParameters2D.get_map.":                      reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationPathQueryParameters3D.set_map.map":                   reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationObstacle3D.set_navigation_map.navigation_map":        reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationObstacle3D.get_navigation_map.":                      reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationPathQueryParameters3D.get_map.":                      reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationPathQueryResult2D.set_path_rids.path_rids":           reflect.TypeFor[[]RID.Either[RID.NavigationLink2D, RID.NavigationRegion2D]](),
	"NavigationPathQueryResult2D.get_path_rids.":                    reflect.TypeFor[[]RID.Either[RID.NavigationLink2D, RID.NavigationRegion2D]](),
	"NavigationPathQueryResult3D.set_path_rids.path_rids":           reflect.TypeFor[[]RID.Either[RID.NavigationLink3D, RID.NavigationRegion3D]](),
	"NavigationPathQueryResult3D.get_path_rids.":                    reflect.TypeFor[[]RID.Either[RID.NavigationLink3D, RID.NavigationRegion3D]](),
	"NavigationRegion2D.get_rid.":                                   reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationRegion2D.set_navigation_map.navigation_map":          reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationRegion2D.get_navigation_map.":                        reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationRegion2D.get_region_rid.":                            reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationRegion3D.get_rid.":                                   reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationRegion3D.set_navigation_map.navigation_map":          reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationRegion3D.get_navigation_map.":                        reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationRegion3D.get_region_rid.":                            reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer2D.get_maps.":                                  reflect.TypeFor[[]RID.NavigationMap2D](),
	"NavigationServer2D.map_create.":                                reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_set_active.map":                         reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_is_active.map":                          reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_set_cell_size.map":                      reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_get_cell_size.map":                      reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_set_use_edge_connections.map":           reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_get_use_edge_connections.map":           reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_set_edge_connection_margin.map":         reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_get_edge_connection_margin.map":         reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_set_link_connection_radius.map":         reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_get_link_connection_radius.map":         reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_get_path.map":                           reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_get_closest_point.map":                  reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_get_closest_point_owner.map":            reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_get_closest_point_owner.":               reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.map_get_links.map":                          reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_get_links.":                             reflect.TypeFor[[]RID.NavigationLink2D](),
	"NavigationServer2D.map_get_regions.map":                        reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_get_regions.":                           reflect.TypeFor[[]RID.NavigationRegion2D](),
	"NavigationServer2D.map_get_agents.map":                         reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_get_agents.":                            reflect.TypeFor[[]RID.NavigationAgent2D](),
	"NavigationServer2D.map_get_obstacles.map":                      reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_get_obstacles.":                         reflect.TypeFor[[]RID.NavigationObstacle2D](),
	"NavigationServer2D.map_force_update.map":                       reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_get_iteration_id.map":                   reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.map_get_random_point.map":                   reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.region_create.":                             reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_set_enabled.region":                  reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_get_enabled.region":                  reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_set_use_edge_connections.region":     reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_get_use_edge_connections.region":     reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_set_enter_cost.region":               reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_get_enter_cost.region":               reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_set_travel_cost.region":              reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_get_travel_cost.region":              reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_set_owner_id.region":                 reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_get_owner_id.region":                 reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_owns_point.region":                   reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_set_map.region":                      reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_set_map.map":                         reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.region_get_map.region":                      reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_get_map.":                            reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.region_set_navigation_layers.region":        reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_get_navigation_layers.region":        reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_set_transform.region":                reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_get_transform.region":                reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_set_navigation_polygon.region":       reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_get_connections_count.region":        reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_get_connection_pathway_start.region": reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_get_connection_pathway_end.region":   reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.region_get_random_point.region":             reflect.TypeFor[RID.NavigationRegion2D](),
	"NavigationServer2D.link_create.":                               reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_set_map.link":                          reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_set_map.map":                           reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.link_get_map.link":                          reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_get_map.":                              reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.link_set_enabled.link":                      reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_get_enabled.link":                      reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_set_bidirectional.link":                reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_is_bidirectional.link":                 reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_set_navigation_layers.link":            reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_get_navigation_layers.link":            reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_set_start_position.link":               reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_get_start_position.link":               reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_set_end_position.link":                 reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_get_end_position.link":                 reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_set_enter_cost.link":                   reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_get_enter_cost.link":                   reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_set_travel_cost.link":                  reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_get_travel_cost.link":                  reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_set_owner_id.link":                     reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.link_get_owner_id.link":                     reflect.TypeFor[RID.NavigationLink2D](),
	"NavigationServer2D.agent_create.":                              reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_avoidance_enabled.agent":          reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_get_avoidance_enabled.agent":          reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_map.agent":                        reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_map.map":                          reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.agent_get_map.agent":                        reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_get_map.":                             reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.agent_set_paused.agent":                     reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_get_paused.agent":                     reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_neighbor_distance.agent":          reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_get_neighbor_distance.agent":          reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_max_neighbors.agent":              reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_get_max_neighbors.agent":              reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_time_horizon_agents.agent":        reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_get_time_horizon_agents.agent":        reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_time_horizon_obstacles.agent":     reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_get_time_horizon_obstacles.agent":     reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_radius.agent":                     reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_get_radius.agent":                     reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_max_speed.agent":                  reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_get_max_speed.agent":                  reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_velocity_forced.agent":            reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_velocity.agent":                   reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_get_velocity.agent":                   reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_position.agent":                   reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_get_position.agent":                   reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_is_map_changed.agent":                 reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_avoidance_callback.agent":         reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_has_avoidance_callback.agent":         reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_avoidance_layers.agent":           reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_get_avoidance_layers.agent":           reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_avoidance_mask.agent":             reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_get_avoidance_mask.agent":             reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_set_avoidance_priority.agent":         reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.agent_get_avoidance_priority.agent":         reflect.TypeFor[RID.NavigationAgent2D](),
	"NavigationServer2D.obstacle_create.":                           reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_set_avoidance_enabled.obstacle":    reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_get_avoidance_enabled.obstacle":    reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_set_map.obstacle":                  reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_set_map.map":                       reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.obstacle_get_map.obstacle":                  reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_get_map.":                          reflect.TypeFor[RID.NavigationMap2D](),
	"NavigationServer2D.obstacle_set_paused.obstacle":               reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_get_paused.obstacle":               reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_set_radius.obstacle":               reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_get_radius.obstacle":               reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_set_velocity.obstacle":             reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_get_velocity.obstacle":             reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_set_position.obstacle":             reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_get_position.obstacle":             reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_set_vertices.obstacle":             reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_get_vertices.obstacle":             reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_set_avoidance_layers.obstacle":     reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.obstacle_get_avoidance_layers.obstacle":     reflect.TypeFor[RID.NavigationObstacle2D](),
	"NavigationServer2D.source_geometry_parser_create.":             reflect.TypeFor[RID.NavigationSourceGeometryParser2D](),
	"NavigationServer2D.source_geometry_parser_set_callback.parser": reflect.TypeFor[RID.NavigationSourceGeometryParser2D](),
	"NavigationServer2D.free_rid.rid":                               reflect.TypeFor[RID.Any](), // FIXME
	"NavigationServer3D.get_maps.":                                  reflect.TypeFor[[]RID.NavigationMap3D](),
	"NavigationServer3D.map_create.":                                reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_set_active.map":                         reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_is_active.map":                          reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_set_up.map":                             reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_up.map":                             reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_set_cell_size.map":                      reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_cell_size.map":                      reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_set_cell_height.map":                    reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_cell_height.map":                    reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_set_merge_rasterizer_cell_scale.map":    reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_merge_rasterizer_cell_scale.map":    reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_set_use_edge_connections.map":           reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_use_edge_connections.map":           reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_set_edge_connection_margin.map":         reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_edge_connection_margin.map":         reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_set_link_connection_radius.map":         reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_link_connection_radius.map":         reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_path.map":                           reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_closest_point_to_segment.map":       reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_closest_point.map":                  reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_closest_point_normal.map":           reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_closest_point_owner.map":            reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_closest_point_owner.":               reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.map_get_links.map":                          reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_links.":                             reflect.TypeFor[[]RID.NavigationLink3D](),
	"NavigationServer3D.map_get_regions.map":                        reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_regions.":                           reflect.TypeFor[[]RID.NavigationRegion3D](),
	"NavigationServer3D.map_get_agents.map":                         reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_agents.":                            reflect.TypeFor[[]RID.NavigationAgent3D](),
	"NavigationServer3D.map_get_obstacles.map":                      reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_obstacles.":                         reflect.TypeFor[[]RID.NavigationObstacle3D](),
	"NavigationServer3D.map_force_update.map":                       reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_iteration_id.map":                   reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.map_get_random_point.map":                   reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.region_create.":                             reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_set_enabled.region":                  reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_get_enabled.region":                  reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_set_use_edge_connections.region":     reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_get_use_edge_connections.region":     reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_set_enter_cost.region":               reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_get_enter_cost.region":               reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_set_travel_cost.region":              reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_get_travel_cost.region":              reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_set_owner_id.region":                 reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_get_owner_id.region":                 reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_owns_point.region":                   reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_set_map.region":                      reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_set_map.map":                         reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.region_get_map.region":                      reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_get_map.":                            reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.region_set_navigation_layers.region":        reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_get_navigation_layers.region":        reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_set_transform.region":                reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_get_transform.region":                reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_set_navigation_mesh.region":          reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_get_connections_count.region":        reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_get_connection_pathway_start.region": reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_get_connection_pathway_end.region":   reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.region_get_random_point.region":             reflect.TypeFor[RID.NavigationRegion3D](),
	"NavigationServer3D.link_create.":                               reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_set_map.link":                          reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_set_map.map":                           reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.link_get_map.link":                          reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_get_map.":                              reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.link_set_enabled.link":                      reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_get_enabled.link":                      reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_set_bidirectional.link":                reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_is_bidirectional.link":                 reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_set_navigation_layers.link":            reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_get_navigation_layers.link":            reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_set_start_position.link":               reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_get_start_position.link":               reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_set_end_position.link":                 reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_get_end_position.link":                 reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_set_enter_cost.link":                   reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_get_enter_cost.link":                   reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_set_travel_cost.link":                  reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_get_travel_cost.link":                  reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_set_owner_id.link":                     reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.link_get_owner_id.link":                     reflect.TypeFor[RID.NavigationLink3D](),
	"NavigationServer3D.agent_create.":                              reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_avoidance_enabled.agent":          reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_avoidance_enabled.agent":          reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_use_3d_avoidance.agent":           reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_use_3d_avoidance.agent":           reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_map.agent":                        reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_map.map":                          reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.agent_get_map.agent":                        reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_map.":                             reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.agent_set_paused.agent":                     reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_paused.agent":                     reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_neighbor_distance.agent":          reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_neighbor_distance.agent":          reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_max_neighbors.agent":              reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_max_neighbors.agent":              reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_time_horizon_agents.agent":        reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_time_horizon_agents.agent":        reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_time_horizon_obstacles.agent":     reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_time_horizon_obstacles.agent":     reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_radius.agent":                     reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_radius.agent":                     reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_height.agent":                     reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_height.agent":                     reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_max_speed.agent":                  reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_max_speed.agent":                  reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_velocity_forced.agent":            reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_velocity.agent":                   reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_velocity.agent":                   reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_position.agent":                   reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_position.agent":                   reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_is_map_changed.agent":                 reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_avoidance_callback.agent":         reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_has_avoidance_callback.agent":         reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_avoidance_layers.agent":           reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_avoidance_layers.agent":           reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_avoidance_mask.agent":             reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_avoidance_mask.agent":             reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_set_avoidance_priority.agent":         reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.agent_get_avoidance_priority.agent":         reflect.TypeFor[RID.NavigationAgent3D](),
	"NavigationServer3D.obstacle_create.":                           reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_set_avoidance_enabled.obstacle":    reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_get_avoidance_enabled.obstacle":    reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_set_use_3d_avoidance.obstacle":     reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_get_use_3d_avoidance.obstacle":     reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_set_map.obstacle":                  reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_set_map.map":                       reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.obstacle_get_map.obstacle":                  reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_get_map.":                          reflect.TypeFor[RID.NavigationMap3D](),
	"NavigationServer3D.obstacle_set_paused.obstacle":               reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_get_paused.obstacle":               reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_set_radius.obstacle":               reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_get_radius.obstacle":               reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_set_height.obstacle":               reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_get_height.obstacle":               reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_set_velocity.obstacle":             reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_get_velocity.obstacle":             reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_set_position.obstacle":             reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_get_position.obstacle":             reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_set_vertices.obstacle":             reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_get_vertices.obstacle":             reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_set_avoidance_layers.obstacle":     reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.obstacle_get_avoidance_layers.obstacle":     reflect.TypeFor[RID.NavigationObstacle3D](),
	"NavigationServer3D.source_geometry_parser_create.":             reflect.TypeFor[RID.NavigationSourceGeometryParser3D](),
	"NavigationServer3D.source_geometry_parser_set_callback.parser": reflect.TypeFor[RID.NavigationSourceGeometryParser3D](),
	"NavigationServer3D.free_rid.rid":                               reflect.TypeFor[RID.Any](), // FIXME

	"PhysicalBoneSimulator3D.physical_bones_add_collision_exception.exception":    reflect.TypeFor[RID.Body3D](),
	"PhysicalBoneSimulator3D.physical_bones_remove_collision_exception.exception": reflect.TypeFor[RID.Body3D](),
	"PhysicsDirectBodyState2D.get_contact_collider.":                              reflect.TypeFor[RID.Body2D](),
	"PhysicsDirectBodyState3D.get_contact_collider.":                              reflect.TypeFor[RID.Body3D](),
	"PhysicsDirectSpaceState2DExtension.is_body_excluded_from_query.body":         reflect.TypeFor[RID.Body2D](),
	"PhysicsDirectSpaceState3DExtension.is_body_excluded_from_query.body":         reflect.TypeFor[RID.Body3D](),
	"PhysicsPointQueryParameters2D.set_exclude.exclude":                           reflect.TypeFor[[]RID.Body2D](),
	"PhysicsPointQueryParameters2D.get_exclude.":                                  reflect.TypeFor[[]RID.Body2D](),
	"PhysicsPointQueryParameters3D.set_exclude.exclude":                           reflect.TypeFor[[]RID.Body3D](),
	"PhysicsPointQueryParameters3D.get_exclude.":                                  reflect.TypeFor[[]RID.Body3D](),
	"PhysicsRayQueryParameters2D.create.exclude":                                  reflect.TypeFor[[]RID.Body2D](),
	"PhysicsRayQueryParameters2D.set_exclude.exclude":                             reflect.TypeFor[[]RID.Body2D](),
	"PhysicsRayQueryParameters2D.get_exclude.":                                    reflect.TypeFor[[]RID.Body2D](),
	"PhysicsRayQueryParameters3D.create.exclude":                                  reflect.TypeFor[[]RID.Body3D](),
	"PhysicsRayQueryParameters3D.set_exclude.exclude":                             reflect.TypeFor[[]RID.Body3D](),
	"PhysicsRayQueryParameters3D.get_exclude.":                                    reflect.TypeFor[[]RID.Body3D](),
	"PhysicsServer2D.world_boundary_shape_create.":                                reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.separation_ray_shape_create.":                                reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.segment_shape_create.":                                       reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.circle_shape_create.":                                        reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.rectangle_shape_create.":                                     reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.capsule_shape_create.":                                       reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.convex_polygon_shape_create.":                                reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.concave_polygon_shape_create.":                               reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.shape_set_data.shape":                                        reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.shape_get_type.shape":                                        reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.shape_get_data.shape":                                        reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.space_create.":                                               reflect.TypeFor[RID.Space2D](),
	"PhysicsServer2D.space_set_active.space":                                      reflect.TypeFor[RID.Space2D](),
	"PhysicsServer2D.space_is_active.space":                                       reflect.TypeFor[RID.Space2D](),
	"PhysicsServer2D.space_set_param.space":                                       reflect.TypeFor[RID.Space2D](),
	"PhysicsServer2D.space_get_param.space":                                       reflect.TypeFor[RID.Space2D](),
	"PhysicsServer2D.space_get_direct_state.space":                                reflect.TypeFor[RID.Space2D](),
	"PhysicsServer2D.area_create.":                                                reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_set_space.area":                                         reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_set_space.space":                                        reflect.TypeFor[RID.Space2D](),
	"PhysicsServer2D.area_get_space.area":                                         reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_get_space.":                                             reflect.TypeFor[RID.Space2D](),
	"PhysicsServer2D.area_add_shape.area":                                         reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_add_shape.shape":                                        reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.area_set_shape.area":                                         reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_set_shape.shape":                                        reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.area_set_shape_transform.area":                               reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_set_shape_disabled.area":                                reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_get_shape_count.area":                                   reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_get_shape.area":                                         reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_get_shape.":                                             reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.area_get_shape_transform.area":                               reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_remove_shape.area":                                      reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_clear_shapes.area":                                      reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_set_collision_layer.area":                               reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_get_collision_layer.area":                               reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_set_collision_mask.area":                                reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_get_collision_mask.area":                                reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_set_param.area":                                         reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_set_transform.area":                                     reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_get_param.area":                                         reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_get_transform.area":                                     reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_attach_object_instance_id.area":                         reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_get_object_instance_id.area":                            reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_attach_canvas_instance_id.area":                         reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_get_canvas_instance_id.area":                            reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_set_monitor_callback.area":                              reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_set_area_monitor_callback.area":                         reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.area_set_monitorable.area":                                   reflect.TypeFor[RID.Area2D](),
	"PhysicsServer2D.body_create.":                                                reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_space.body":                                         reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_space.space":                                        reflect.TypeFor[RID.Space2D](),
	"PhysicsServer2D.body_get_space.body":                                         reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_space.":                                             reflect.TypeFor[RID.Space2D](),
	"PhysicsServer2D.body_set_mode.body":                                          reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_mode.body":                                          reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_add_shape.body":                                         reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_add_shape.shape":                                        reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.body_set_shape.body":                                         reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_shape.shape":                                        reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.body_set_shape_transform.body":                               reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_shape_count.body":                                   reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_shape.body":                                         reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_shape.":                                             reflect.TypeFor[RID.Shape2D](),
	"PhysicsServer2D.body_get_shape_transform.body":                               reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_remove_shape.body":                                      reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_clear_shapes.body":                                      reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_shape_disabled.body":                                reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_shape_as_one_way_collision.body":                    reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_attach_object_instance_id.body":                         reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_object_instance_id.body":                            reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_attach_canvas_instance_id.body":                         reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_canvas_instance_id.body":                            reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_continuous_collision_detection_mode.body":           reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_continuous_collision_detection_mode.body":           reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_collision_layer.body":                               reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_collision_layer.body":                               reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_collision_mask.body":                                reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_collision_mask.body":                                reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_collision_priority.body":                            reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_collision_priority.body":                            reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_param.body":                                         reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_param.body":                                         reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_reset_mass_properties.body":                             reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_state.body":                                         reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_state.body":                                         reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_apply_central_impulse.body":                             reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_apply_torque_impulse.body":                              reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_apply_impulse.body":                                     reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_apply_central_force.body":                               reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_apply_force.body":                                       reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_apply_torque.body":                                      reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_add_constant_central_force.body":                        reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_add_constant_force.body":                                reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_add_constant_torque.body":                               reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_constant_force.body":                                reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_constant_force.body":                                reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_constant_torque.body":                               reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_constant_torque.body":                               reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_axis_velocity.body":                                 reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_add_collision_exception.body":                           reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_add_collision_exception.excepted_body":                  reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_remove_collision_exception.body":                        reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_remove_collision_exception.excepted_body":               reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_max_contacts_reported.body":                         reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_max_contacts_reported.body":                         reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_omit_force_integration.body":                        reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_is_omitting_force_integration.body":                     reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_state_sync_callback.body":                           reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_set_force_integration_callback.body":                    reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_test_motion.body":                                       reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.body_get_direct_state.body":                                  reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.joint_create.":                                               reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.joint_clear.joint":                                           reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.joint_set_param.joint":                                       reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.joint_get_param.joint":                                       reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.joint_disable_collisions_between_bodies.joint":               reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.joint_is_disabled_collisions_between_bodies.joint":           reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.joint_make_pin.joint":                                        reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.joint_make_pin.body_a":                                       reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.joint_make_pin.body_b":                                       reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.joint_make_groove.joint":                                     reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.joint_make_groove.body_a":                                    reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.joint_make_groove.body_b":                                    reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.joint_make_damped_spring.joint":                              reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.joint_make_damped_spring.body_a":                             reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.joint_make_damped_spring.body_b":                             reflect.TypeFor[RID.Body2D](),
	"PhysicsServer2D.pin_joint_set_flag.joint":                                    reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.pin_joint_get_flag.joint":                                    reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.pin_joint_set_param.joint":                                   reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.pin_joint_get_param.joint":                                   reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.damped_spring_joint_set_param.joint":                         reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.damped_spring_joint_get_param.joint":                         reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.joint_get_type.joint":                                        reflect.TypeFor[RID.Joint2D](),
	"PhysicsServer2D.free_rid.rid":                                                reflect.TypeFor[RID.Any](), // FIXME
	"PhysicsServer2DExtension.body_test_motion_is_excluding_body.body":            reflect.TypeFor[RID.Body2D](),
	"PhysicsServer3D.world_boundary_shape_create.":                                reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.separation_ray_shape_create.":                                reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.sphere_shape_create.":                                        reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.box_shape_create.":                                           reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.capsule_shape_create.":                                       reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.cylinder_shape_create.":                                      reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.convex_polygon_shape_create.":                                reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.concave_polygon_shape_create.":                               reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.heightmap_shape_create.":                                     reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.custom_shape_create.":                                        reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.shape_set_data.shape":                                        reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.shape_set_margin.shape":                                      reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.shape_get_type.shape":                                        reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.shape_get_data.shape":                                        reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.shape_get_margin.shape":                                      reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.space_create.":                                               reflect.TypeFor[RID.Space3D](),
	"PhysicsServer3D.space_set_active.space":                                      reflect.TypeFor[RID.Space3D](),
	"PhysicsServer3D.space_is_active.space":                                       reflect.TypeFor[RID.Space3D](),
	"PhysicsServer3D.space_set_param.space":                                       reflect.TypeFor[RID.Space3D](),
	"PhysicsServer3D.space_get_param.space":                                       reflect.TypeFor[RID.Space3D](),
	"PhysicsServer3D.space_get_direct_state.space":                                reflect.TypeFor[RID.Space3D](),
	"PhysicsServer3D.area_create.":                                                reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_set_space.area":                                         reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_set_space.space":                                        reflect.TypeFor[RID.Space3D](),
	"PhysicsServer3D.area_get_space.area":                                         reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_get_space.":                                             reflect.TypeFor[RID.Space3D](),
	"PhysicsServer3D.area_add_shape.area":                                         reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_add_shape.shape":                                        reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.area_set_shape.area":                                         reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_set_shape.shape":                                        reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.area_set_shape_transform.area":                               reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_set_shape_disabled.area":                                reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_get_shape_count.area":                                   reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_get_shape.area":                                         reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_get_shape.":                                             reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.area_get_shape_transform.area":                               reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_remove_shape.area":                                      reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_clear_shapes.area":                                      reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_set_collision_layer.area":                               reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_get_collision_layer.area":                               reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_set_collision_mask.area":                                reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_get_collision_mask.area":                                reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_set_param.area":                                         reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_set_transform.area":                                     reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_get_param.area":                                         reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_get_transform.area":                                     reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_attach_object_instance_id.area":                         reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_get_object_instance_id.area":                            reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_set_monitor_callback.area":                              reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_set_area_monitor_callback.area":                         reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_set_monitorable.area":                                   reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.area_set_ray_pickable.area":                                  reflect.TypeFor[RID.Area3D](),
	"PhysicsServer3D.body_create.":                                                reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_space.body":                                         reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_space.space":                                        reflect.TypeFor[RID.Space3D](),
	"PhysicsServer3D.body_get_space.body":                                         reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_space.":                                             reflect.TypeFor[RID.Space3D](),
	"PhysicsServer3D.body_set_mode.body":                                          reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_mode.body":                                          reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_collision_layer.body":                               reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_collision_layer.body":                               reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_collision_mask.body":                                reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_collision_mask.body":                                reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_collision_priority.body":                            reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_collision_priority.body":                            reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_add_shape.body":                                         reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_add_shape.shape":                                        reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.body_set_shape.body":                                         reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_shape.shape":                                        reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.body_set_shape_transform.body":                               reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_shape_disabled.body":                                reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_shape_count.body":                                   reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_shape.body":                                         reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_shape.":                                             reflect.TypeFor[RID.Shape3D](),
	"PhysicsServer3D.body_get_shape_transform.body":                               reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_remove_shape.body":                                      reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_clear_shapes.body":                                      reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_attach_object_instance_id.body":                         reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_object_instance_id.body":                            reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_enable_continuous_collision_detection.body":         reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_is_continuous_collision_detection_enabled.body":         reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_param.body":                                         reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_param.body":                                         reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_reset_mass_properties.body":                             reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_state.body":                                         reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_state.body":                                         reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_apply_central_impulse.body":                             reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_apply_impulse.body":                                     reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_apply_torque_impulse.body":                              reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_apply_central_force.body":                               reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_apply_force.body":                                       reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_apply_torque.body":                                      reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_add_constant_central_force.body":                        reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_add_constant_force.body":                                reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_add_constant_torque.body":                               reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_constant_force.body":                                reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_constant_force.body":                                reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_constant_torque.body":                               reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_constant_torque.body":                               reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_axis_velocity.body":                                 reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_axis_lock.body":                                     reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_is_axis_locked.body":                                    reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_add_collision_exception.body":                           reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_add_collision_exception.excepted_body":                  reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_remove_collision_exception.body":                        reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_remove_collision_exception.excepted_body":               reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_max_contacts_reported.body":                         reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_max_contacts_reported.body":                         reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_omit_force_integration.body":                        reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_is_omitting_force_integration.body":                     reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_state_sync_callback.body":                           reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_force_integration_callback.body":                    reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_set_ray_pickable.body":                                  reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_test_motion.body":                                       reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.body_get_direct_state.body":                                  reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.soft_body_create.":                                           reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_update_rendering_server.body":                      reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_set_space.body":                                    reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_set_space.space":                                   reflect.TypeFor[RID.Space3D](),
	"PhysicsServer3D.soft_body_get_space.body":                                    reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_get_space.":                                        reflect.TypeFor[RID.Space3D](),
	"PhysicsServer3D.soft_body_set_mesh.body":                                     reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_set_mesh.mesh":                                     reflect.TypeFor[RID.Mesh](),
	"PhysicsServer3D.soft_body_get_bounds.body":                                   reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_set_collision_layer.body":                          reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_get_collision_layer.body":                          reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_set_collision_mask.body":                           reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_get_collision_mask.body":                           reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_add_collision_exception.body":                      reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_add_collision_exception.body_b":                    reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.soft_body_remove_collision_exception.body":                   reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_remove_collision_exception.body_b":                 reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.soft_body_set_state.body":                                    reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_get_state.body":                                    reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_set_transform.body":                                reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_set_ray_pickable.body":                             reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_set_simulation_precision.body":                     reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_get_simulation_precision.body":                     reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_set_total_mass.body":                               reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_get_total_mass.body":                               reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_set_linear_stiffness.body":                         reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_get_linear_stiffness.body":                         reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_set_pressure_coefficient.body":                     reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_get_pressure_coefficient.body":                     reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_set_damping_coefficient.body":                      reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_get_damping_coefficient.body":                      reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_set_drag_coefficient.body":                         reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_get_drag_coefficient.body":                         reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_move_point.body":                                   reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_get_point_global_position.body":                    reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_remove_all_pinned_points.body":                     reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_pin_point.body":                                    reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.soft_body_is_point_pinned.body":                              reflect.TypeFor[RID.SoftBody3D](),
	"PhysicsServer3D.joint_create.":                                               reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_clear.joint":                                           reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_make_pin.joint":                                        reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_make_pin.body_A":                                       reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.joint_make_pin.body_B":                                       reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.pin_joint_set_param.joint":                                   reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.pin_joint_get_param.joint":                                   reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.pin_joint_set_local_a.joint":                                 reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.pin_joint_get_local_a.joint":                                 reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.pin_joint_set_local_b.joint":                                 reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.pin_joint_get_local_b.joint":                                 reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_make_hinge.joint":                                      reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_make_hinge.body_A":                                     reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.joint_make_hinge.body_B":                                     reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.hinge_joint_set_param.joint":                                 reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.hinge_joint_get_param.joint":                                 reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.hinge_joint_set_flag.joint":                                  reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.hinge_joint_get_flag.joint":                                  reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_make_slider.joint":                                     reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_make_slider.body_A":                                    reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.joint_make_slider.body_B":                                    reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.slider_joint_set_param.joint":                                reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.slider_joint_get_param.joint":                                reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_make_cone_twist.joint":                                 reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_make_cone_twist.body_A":                                reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.joint_make_cone_twist.body_B":                                reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.cone_twist_joint_set_param.joint":                            reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.cone_twist_joint_get_param.joint":                            reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_get_type.joint":                                        reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_set_solver_priority.joint":                             reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_get_solver_priority.joint":                             reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_disable_collisions_between_bodies.joint":               reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_is_disabled_collisions_between_bodies.joint":           reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_make_generic_6dof.joint":                               reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.joint_make_generic_6dof.body_A":                              reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.joint_make_generic_6dof.body_B":                              reflect.TypeFor[RID.Body3D](),
	"PhysicsServer3D.generic_6dof_joint_set_param.joint":                          reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.generic_6dof_joint_get_param.joint":                          reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.generic_6dof_joint_set_flag.joint":                           reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.generic_6dof_joint_get_flag.joint":                           reflect.TypeFor[RID.Joint3D](),
	"PhysicsServer3D.free_rid.rid":                                                reflect.TypeFor[RID.Any](), // FIXME
	"PhysicsServer3DExtension.body_test_motion_is_excluding_body.body":            reflect.TypeFor[RID.Body3D](),
	"PhysicsShapeQueryParameters2D.set_shape_rid.shape":                           reflect.TypeFor[RID.Shape2D](),
	"PhysicsShapeQueryParameters2D.get_shape_rid.":                                reflect.TypeFor[RID.Shape2D](),
	"PhysicsShapeQueryParameters2D.set_exclude.exclude":                           reflect.TypeFor[[]RID.Body2D](),
	"PhysicsShapeQueryParameters2D.get_exclude.":                                  reflect.TypeFor[[]RID.Body2D](),
	"PhysicsShapeQueryParameters3D.set_shape_rid.shape":                           reflect.TypeFor[RID.Shape3D](),
	"PhysicsShapeQueryParameters3D.get_shape_rid.":                                reflect.TypeFor[RID.Shape3D](),
	"PhysicsShapeQueryParameters3D.set_exclude.exclude":                           reflect.TypeFor[[]RID.Body3D](),
	"PhysicsShapeQueryParameters3D.get_exclude.":                                  reflect.TypeFor[[]RID.Body3D](),
	"PhysicsTestMotionParameters2D.get_exclude_bodies.":                           reflect.TypeFor[[]RID.Body2D](),
	"PhysicsTestMotionParameters2D.set_exclude_bodies.exclude_list":               reflect.TypeFor[[]RID.Body2D](),
	"PhysicsTestMotionParameters3D.get_exclude_bodies.":                           reflect.TypeFor[[]RID.Body3D](),
	"PhysicsTestMotionParameters3D.set_exclude_bodies.exclude_list":               reflect.TypeFor[[]RID.Body3D](),
	"PhysicsTestMotionResult2D.get_collider_rid.":                                 reflect.TypeFor[RID.Body2D](),
	"PhysicsTestMotionResult3D.get_collider_rid.":                                 reflect.TypeFor[RID.Body3D](),

	"RDUniform.add_id.id":                reflect.TypeFor[RID.Any](),
	"RDUniform.get_ids.":                 reflect.TypeFor[[]RID.Any](),
	"RayCast2D.get_collider_rid.":        reflect.TypeFor[RID.Body2D](),
	"RayCast2D.add_exception_rid.rid":    reflect.TypeFor[RID.Body2D](),
	"RayCast2D.remove_exception_rid.rid": reflect.TypeFor[RID.Body2D](),
	"RayCast3D.get_collider_rid.":        reflect.TypeFor[RID.Body3D](),
	"RayCast3D.add_exception_rid.rid":    reflect.TypeFor[RID.Body3D](),
	"RayCast3D.remove_exception_rid.rid": reflect.TypeFor[RID.Body3D](),

	"RenderData.get_environment.":                                         reflect.TypeFor[RID.Environment](),
	"RenderData.get_camera_attributes.":                                   reflect.TypeFor[RID.CameraAttributes](),
	"RenderSceneBuffersConfiguration.get_render_target.":                  reflect.TypeFor[RID.Framebuffer](),
	"RenderSceneBuffersConfiguration.set_render_target.render_target":     reflect.TypeFor[RID.Framebuffer](),
	"RenderSceneBuffersRD.create_texture.":                                reflect.TypeFor[RID.Texture](),
	"RenderSceneBuffersRD.create_texture_from_format.":                    reflect.TypeFor[RID.Texture](),
	"RenderSceneBuffersRD.create_texture_view.":                           reflect.TypeFor[RID.Texture](),
	"RenderSceneBuffersRD.get_texture.":                                   reflect.TypeFor[RID.Texture](),
	"RenderSceneBuffersRD.get_texture_slice.":                             reflect.TypeFor[RID.Texture](),
	"RenderSceneBuffersRD.get_texture_slice_view.":                        reflect.TypeFor[RID.Texture](),
	"RenderSceneBuffersRD.get_color_texture.":                             reflect.TypeFor[RID.Texture](),
	"RenderSceneBuffersRD.get_color_layer.":                               reflect.TypeFor[RID.Texture](),
	"RenderSceneBuffersRD.get_depth_texture.":                             reflect.TypeFor[RID.Texture](),
	"RenderSceneBuffersRD.get_depth_layer.":                               reflect.TypeFor[RID.Texture](),
	"RenderSceneBuffersRD.get_velocity_texture.":                          reflect.TypeFor[RID.Texture](),
	"RenderSceneBuffersRD.get_velocity_layer.":                            reflect.TypeFor[RID.Texture](),
	"RenderSceneBuffersRD.get_render_target.":                             reflect.TypeFor[RID.Framebuffer](),
	"RenderSceneData.get_uniform_buffer.":                                 reflect.TypeFor[RID.UniformBuffer](),
	"RenderingDevice.texture_create.":                                     reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_create_shared.with_texture":                  reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_create_shared.":                              reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_create_shared_from_slice.with_texture":       reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_create_shared_from_slice.":                   reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_create_from_extension.":                      reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_update.texture":                              reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_get_data.texture":                            reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_is_shared.texture":                           reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_is_valid.texture":                            reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_copy.from_texture":                           reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_copy.to_texture":                             reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_clear.texture":                               reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_resolve_multisample.from_texture":            reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_resolve_multisample.to_texture":              reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_get_format.texture":                          reflect.TypeFor[RID.Texture](),
	"RenderingDevice.texture_get_native_handle.texture":                   reflect.TypeFor[RID.Texture](),
	"RenderingDevice.framebuffer_create.textures":                         reflect.TypeFor[[]RID.Texture](),
	"RenderingDevice.framebuffer_create.":                                 reflect.TypeFor[RID.Framebuffer](),
	"RenderingDevice.framebuffer_create_multipass.textures":               reflect.TypeFor[[]RID.Texture](),
	"RenderingDevice.framebuffer_create_multipass.":                       reflect.TypeFor[RID.Framebuffer](),
	"RenderingDevice.framebuffer_create_empty.":                           reflect.TypeFor[RID.Framebuffer](),
	"RenderingDevice.framebuffer_get_format.framebuffer":                  reflect.TypeFor[RID.Framebuffer](),
	"RenderingDevice.framebuffer_is_valid.framebuffer":                    reflect.TypeFor[RID.Framebuffer](),
	"RenderingDevice.sampler_create.":                                     reflect.TypeFor[RID.Sampler](),
	"RenderingDevice.vertex_buffer_create.":                               reflect.TypeFor[RID.VertexBuffer](),
	"RenderingDevice.vertex_array_create.src_buffers":                     reflect.TypeFor[[]RID.VertexBuffer](),
	"RenderingDevice.vertex_array_create.":                                reflect.TypeFor[RID.VertexArray](),
	"RenderingDevice.index_buffer_create.":                                reflect.TypeFor[RID.IndexBuffer](),
	"RenderingDevice.index_array_create.index_buffer":                     reflect.TypeFor[RID.IndexBuffer](),
	"RenderingDevice.index_array_create.":                                 reflect.TypeFor[RID.IndexArray](),
	"RenderingDevice.shader_create_from_spirv.":                           reflect.TypeFor[RID.Shader](),
	"RenderingDevice.shader_create_from_bytecode.placeholder_rid":         reflect.TypeFor[RID.ShaderPlaceholder](),
	"RenderingDevice.shader_create_from_bytecode.":                        reflect.TypeFor[RID.Shader](),
	"RenderingDevice.shader_create_placeholder.":                          reflect.TypeFor[RID.ShaderPlaceholder](),
	"RenderingDevice.shader_get_vertex_input_attribute_mask.shader":       reflect.TypeFor[RID.Shader](),
	"RenderingDevice.uniform_buffer_create.":                              reflect.TypeFor[RID.UniformBuffer](),
	"RenderingDevice.storage_buffer_create.":                              reflect.TypeFor[RID.StorageBuffer](),
	"RenderingDevice.texture_buffer_create.":                              reflect.TypeFor[RID.TextureBuffer](),
	"RenderingDevice.uniform_set_create.shader":                           reflect.TypeFor[RID.Shader](),
	"RenderingDevice.uniform_set_create.":                                 reflect.TypeFor[RID.UniformSet](),
	"RenderingDevice.uniform_set_is_valid.uniform_set":                    reflect.TypeFor[RID.UniformSet](),
	"RenderingDevice.buffer_copy.src_buffer":                              reflect.TypeFor[RID.Buffer](),
	"RenderingDevice.buffer_copy.dst_buffer":                              reflect.TypeFor[RID.Buffer](),
	"RenderingDevice.buffer_update.buffer":                                reflect.TypeFor[RID.Buffer](),
	"RenderingDevice.buffer_clear.buffer":                                 reflect.TypeFor[RID.Buffer](),
	"RenderingDevice.buffer_get_data.buffer":                              reflect.TypeFor[RID.Buffer](),
	"RenderingDevice.render_pipeline_create.shader":                       reflect.TypeFor[RID.Shader](),
	"RenderingDevice.render_pipeline_create.":                             reflect.TypeFor[RID.RenderPipeline](),
	"RenderingDevice.render_pipeline_is_valid.render_pipeline":            reflect.TypeFor[RID.RenderPipeline](),
	"RenderingDevice.compute_pipeline_create.shader":                      reflect.TypeFor[RID.Shader](),
	"RenderingDevice.compute_pipeline_create.":                            reflect.TypeFor[RID.ComputePipeline](),
	"RenderingDevice.compute_pipeline_is_valid.compute_pipeline":          reflect.TypeFor[RID.ComputePipeline](),
	"RenderingDevice.draw_list_begin.framebuffer":                         reflect.TypeFor[RID.Framebuffer](),
	"RenderingDevice.draw_list_begin_split.framebuffer":                   reflect.TypeFor[RID.Framebuffer](),
	"RenderingDevice.draw_list_begin_split.storage_textures":              reflect.TypeFor[[]RID.Texture](),
	"RenderingDevice.draw_list_bind_render_pipeline.render_pipeline":      reflect.TypeFor[RID.RenderPipeline](),
	"RenderingDevice.draw_list_bind_uniform_set.uniform_set":              reflect.TypeFor[RID.UniformSet](),
	"RenderingDevice.draw_list_bind_vertex_array.vertex_array":            reflect.TypeFor[RID.VertexArray](),
	"RenderingDevice.draw_list_bind_index_array.index_array":              reflect.TypeFor[RID.IndexArray](),
	"RenderingDevice.compute_list_bind_compute_pipeline.compute_pipeline": reflect.TypeFor[RID.ComputePipeline](),
	"RenderingDevice.compute_list_bind_uniform_set.uniform_set":           reflect.TypeFor[RID.UniformSet](),
	"RenderingDevice.compute_list_dispatch_indirect.buffer":               reflect.TypeFor[RID.Buffer](),
	"RenderingDevice.free_rid.rid":                                        reflect.TypeFor[RID.Any](),
	"RenderingDevice.set_resource_name.id":                                reflect.TypeFor[RID.Any](),
	"RenderingDevice.get_driver_resource.rid":                             reflect.TypeFor[RID.Any](),

	"RenderingServer.bake_render_uv2.base":                                  reflect.TypeFor[RID.Mesh](),
	"RenderingServer.bake_render_uv2.material_overrides":                    reflect.TypeFor[[]RID.Material](),
	"RenderingServer.camera_attributes_create.":                             reflect.TypeFor[RID.CameraAttributes](),
	"RenderingServer.camera_attributes_set_auto_exposure.camera_attributes": reflect.TypeFor[RID.CameraAttributes](),
	"RenderingServer.camera_attributes_set_dof_blur.camera_attributes":      reflect.TypeFor[RID.CameraAttributes](),
	"RenderingServer.camera_attributes_set_exposure.camera_attributes":      reflect.TypeFor[RID.CameraAttributes](),
	"RenderingServer.camera_create.":                                        reflect.TypeFor[RID.Camera](),
	"RenderingServer.camera_set_camera_attributes.camera":                   reflect.TypeFor[RID.Camera](),
	"RenderingServer.camera_set_camera_attributes.effects":                  reflect.TypeFor[RID.CameraAttributes](),
	"RenderingServer.camera_set_compositor.camrea":                          reflect.TypeFor[RID.Camera](),
	"RenderingServer.camera_set_compositor.compositor":                      reflect.TypeFor[RID.Compositor](),
	"RenderingServer.camera_set_cull_mask.camera":                           reflect.TypeFor[RID.Camera](),
	"RenderingServer.camera_set_environment.camera":                         reflect.TypeFor[RID.Camera](),
	"RenderingServer.camera_set_environment.environment":                    reflect.TypeFor[RID.Environment](),
	"RenderingServer.camera_set_frustum.camera":                             reflect.TypeFor[RID.Camera](),
	"RenderingServer.camera_set_orthogonal.camera":                          reflect.TypeFor[RID.Camera](),
	"RenderingServer.camera_set_perspective.camera":                         reflect.TypeFor[RID.Camera](),
	"RenderingServer.camera_set_transform.camera":                           reflect.TypeFor[RID.Camera](),
	"RenderingServer.camera_set_use_vertical_aspect.camera":                 reflect.TypeFor[RID.Camera](),
	"RenderingServer.canvas_create.":                                        reflect.TypeFor[RID.Canvas](),
	"RenderingServer.canvas_item_add_animation_slice.item":                  reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_circle.item":                           reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_clip_ignore.item":                      reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_lcd_texture_rect_region.item":          reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_line.item":                             reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_mesh.item":                             reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_mesh.mesh":                             reflect.TypeFor[RID.Mesh](),
	"RenderingServer.canvas_item_add_msdf_texture_rect_region.item":         reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_multiline.item":                        reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_multimesh.item":                        reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_multimesh.mesh":                        reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.canvas_item_add_multimesh.texture":                     reflect.TypeFor[RID.Texture](),
	"RenderingServer.canvas_item_add_nine_patch.item":                       reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_particles.item":                        reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_particles.particles":                   reflect.TypeFor[RID.Particles](),
	"RenderingServer.canvas_item_add_particles.texture":                     reflect.TypeFor[RID.Texture](),
	"RenderingServer.canvas_item_add_polygon.item":                          reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_polyline.item":                         reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_primitive.item":                        reflect.TypeFor[RID.CanvasItem](),

	"RenderingServer.texture_2d_create.":                                                   reflect.TypeFor[RID.Texture2D](),
	"RenderingServer.texture_2d_layered_create.":                                           reflect.TypeFor[RID.Texture2D](),
	"RenderingServer.texture_3d_create.":                                                   reflect.TypeFor[RID.Texture3D](),
	"RenderingServer.texture_proxy_create.base":                                            reflect.TypeFor[RID.TextureProxy](),
	"RenderingServer.texture_proxy_create.":                                                reflect.TypeFor[RID.TextureProxy](),
	"RenderingServer.texture_2d_update.texture":                                            reflect.TypeFor[RID.Texture2D](),
	"RenderingServer.texture_3d_update.texture":                                            reflect.TypeFor[RID.Texture3D](),
	"RenderingServer.texture_proxy_update.texture":                                         reflect.TypeFor[RID.TextureProxy](),
	"RenderingServer.texture_proxy_update.proxy_to":                                        reflect.TypeFor[RID.Texture](),
	"RenderingServer.texture_2d_placeholder_create.":                                       reflect.TypeFor[RID.Texture2D](),
	"RenderingServer.texture_2d_layered_placeholder_create.":                               reflect.TypeFor[RID.Texture2D](),
	"RenderingServer.texture_3d_placeholder_create.":                                       reflect.TypeFor[RID.Texture3D](),
	"RenderingServer.texture_2d_get.texture":                                               reflect.TypeFor[RID.Texture2D](),
	"RenderingServer.texture_2d_layer_get.texture":                                         reflect.TypeFor[RID.Texture2D](),
	"RenderingServer.texture_3d_get.texture":                                               reflect.TypeFor[RID.Texture3D](),
	"RenderingServer.texture_replace.texture":                                              reflect.TypeFor[RID.Texture](),
	"RenderingServer.texture_replace.by_texture":                                           reflect.TypeFor[RID.Texture](),
	"RenderingServer.texture_set_size_override.texture":                                    reflect.TypeFor[RID.Texture](),
	"RenderingServer.texture_set_path.texture":                                             reflect.TypeFor[RID.Texture](),
	"RenderingServer.texture_get_path.texture":                                             reflect.TypeFor[RID.Texture](),
	"RenderingServer.texture_get_format.texture":                                           reflect.TypeFor[RID.Texture](),
	"RenderingServer.texture_set_force_redraw_if_visible.texture":                          reflect.TypeFor[RID.Texture](),
	"RenderingServer.texture_rd_create.rd_texture":                                         reflect.TypeFor[RID.Texture](),
	"RenderingServer.texture_rd_create.":                                                   reflect.TypeFor[RID.Texture](),
	"RenderingServer.texture_get_rd_texture.texture":                                       reflect.TypeFor[RID.Texture](),
	"RenderingServer.texture_get_rd_texture.":                                              reflect.TypeFor[RID.Texture](),
	"RenderingServer.texture_get_native_handle.texture":                                    reflect.TypeFor[RID.Texture](),
	"RenderingServer.shader_create.":                                                       reflect.TypeFor[RID.Shader](),
	"RenderingServer.shader_set_code.shader":                                               reflect.TypeFor[RID.Shader](),
	"RenderingServer.shader_set_path_hint.shader":                                          reflect.TypeFor[RID.Shader](),
	"RenderingServer.shader_get_code.shader":                                               reflect.TypeFor[RID.Shader](),
	"RenderingServer.get_shader_parameter_list.shader":                                     reflect.TypeFor[RID.Shader](),
	"RenderingServer.shader_get_parameter_default.shader":                                  reflect.TypeFor[RID.Shader](),
	"RenderingServer.shader_set_default_texture_parameter.shader":                          reflect.TypeFor[RID.Shader](),
	"RenderingServer.shader_set_default_texture_parameter.texture":                         reflect.TypeFor[RID.Texture](),
	"RenderingServer.shader_get_default_texture_parameter.shader":                          reflect.TypeFor[RID.Shader](),
	"RenderingServer.shader_get_default_texture_parameter.":                                reflect.TypeFor[RID.Texture](),
	"RenderingServer.material_create.":                                                     reflect.TypeFor[RID.Material](),
	"RenderingServer.material_set_shader.shader_material":                                  reflect.TypeFor[RID.Material](),
	"RenderingServer.material_set_shader.shader":                                           reflect.TypeFor[RID.Shader](),
	"RenderingServer.material_set_param.material":                                          reflect.TypeFor[RID.Material](),
	"RenderingServer.material_get_param.material":                                          reflect.TypeFor[RID.Material](),
	"RenderingServer.material_set_render_priority.material":                                reflect.TypeFor[RID.Material](),
	"RenderingServer.material_set_next_pass.material":                                      reflect.TypeFor[RID.Material](),
	"RenderingServer.material_set_next_pass.next_material":                                 reflect.TypeFor[RID.Material](),
	"RenderingServer.mesh_create_from_surfaces.":                                           reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_create.":                                                         reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_add_surface.mesh":                                                reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_add_surface_from_arrays.mesh":                                    reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_get_blend_shape_count.mesh":                                      reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_set_blend_shape_mode.mesh":                                       reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_get_blend_shape_mode.mesh":                                       reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_surface_set_material.mesh":                                       reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_surface_set_material.material":                                   reflect.TypeFor[RID.Material](),
	"RenderingServer.mesh_surface_get_material.mesh":                                       reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_surface_get_material.":                                           reflect.TypeFor[RID.Material](),
	"RenderingServer.mesh_get_surface.mesh":                                                reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_surface_get_arrays.mesh":                                         reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_surface_get_blend_shape_arrays.mesh":                             reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_get_surface_count.mesh":                                          reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_set_custom_aabb.mesh":                                            reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_get_custom_aabb.mesh":                                            reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_clear.mesh":                                                      reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_surface_update_vertex_region.mesh":                               reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_surface_update_attribute_region.mesh":                            reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_surface_update_skin_region.mesh":                                 reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_set_shadow_mesh.mesh":                                            reflect.TypeFor[RID.Mesh](),
	"RenderingServer.mesh_set_shadow_mesh.shadow_mesh":                                     reflect.TypeFor[RID.Mesh](),
	"RenderingServer.multimesh_create.":                                                    reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_allocate_data.multimesh":                                    reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_get_instance_count.multimesh":                               reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_set_mesh.multimesh":                                         reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_set_mesh.mesh":                                              reflect.TypeFor[RID.Mesh](),
	"RenderingServer.multimesh_instance_set_transform.multimesh":                           reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_instance_set_transform_2d.multimesh":                        reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_instance_set_color.multimesh":                               reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_instance_set_custom_data.multimesh":                         reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_get_mesh.multimesh":                                         reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_get_mesh.":                                                  reflect.TypeFor[RID.Mesh](),
	"RenderingServer.multimesh_get_aabb.multimesh":                                         reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_set_custom_aabb.multimesh":                                  reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_get_custom_aabb.multimesh":                                  reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_instance_get_transform.multimesh":                           reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_instance_get_transform_2d.multimesh":                        reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_instance_get_color.multimesh":                               reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_instance_get_custom_data.multimesh":                         reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_set_visible_instances.multimesh":                            reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_get_visible_instances.multimesh":                            reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_set_buffer.multimesh":                                       reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.multimesh_get_buffer.multimesh":                                       reflect.TypeFor[RID.MultiMesh](),
	"RenderingServer.skeleton_create.":                                                     reflect.TypeFor[RID.Skeleton](),
	"RenderingServer.skeleton_allocate_data.skeleton":                                      reflect.TypeFor[RID.Skeleton](),
	"RenderingServer.skeleton_get_bone_count.skeleton":                                     reflect.TypeFor[RID.Skeleton](),
	"RenderingServer.skeleton_bone_set_transform.skeleton":                                 reflect.TypeFor[RID.Skeleton](),
	"RenderingServer.skeleton_bone_get_transform.skeleton":                                 reflect.TypeFor[RID.Skeleton](),
	"RenderingServer.skeleton_bone_set_transform_2d.skeleton":                              reflect.TypeFor[RID.Skeleton](),
	"RenderingServer.skeleton_bone_get_transform_2d.skeleton":                              reflect.TypeFor[RID.Skeleton](),
	"RenderingServer.skeleton_set_base_transform_2d.skeleton":                              reflect.TypeFor[RID.Skeleton](),
	"RenderingServer.directional_light_create.":                                            reflect.TypeFor[RID.Light](),
	"RenderingServer.omni_light_create.":                                                   reflect.TypeFor[RID.Light](),
	"RenderingServer.spot_light_create.":                                                   reflect.TypeFor[RID.Light](),
	"RenderingServer.light_set_color.light":                                                reflect.TypeFor[RID.Light](),
	"RenderingServer.light_set_param.light":                                                reflect.TypeFor[RID.Light](),
	"RenderingServer.light_set_shadow.light":                                               reflect.TypeFor[RID.Light](),
	"RenderingServer.light_set_projector.light":                                            reflect.TypeFor[RID.Light](),
	"RenderingServer.light_set_projector.texture":                                          reflect.TypeFor[RID.Texture](),
	"RenderingServer.light_set_negative.light":                                             reflect.TypeFor[RID.Light](),
	"RenderingServer.light_set_cull_mask.light":                                            reflect.TypeFor[RID.Light](),
	"RenderingServer.light_set_distance_fade.decal":                                        reflect.TypeFor[RID.Light](),
	"RenderingServer.light_set_reverse_cull_face_mode.light":                               reflect.TypeFor[RID.Light](),
	"RenderingServer.light_set_bake_mode.light":                                            reflect.TypeFor[RID.Light](),
	"RenderingServer.light_set_max_sdfgi_cascade.light":                                    reflect.TypeFor[RID.Light](),
	"RenderingServer.light_omni_set_shadow_mode.light":                                     reflect.TypeFor[RID.Light](),
	"RenderingServer.light_directional_set_shadow_mode.light":                              reflect.TypeFor[RID.Light](),
	"RenderingServer.light_directional_set_blend_splits.light":                             reflect.TypeFor[RID.Light](),
	"RenderingServer.light_directional_set_sky_mode.light":                                 reflect.TypeFor[RID.Light](),
	"RenderingServer.reflection_probe_create.":                                             reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_update_mode.probe":                               reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_intensity.probe":                                 reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_ambient_mode.probe":                              reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_ambient_color.probe":                             reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_ambient_energy.probe":                            reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_max_distance.probe":                              reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_size.probe":                                      reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_origin_offset.probe":                             reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_as_interior.probe":                               reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_enable_box_projection.probe":                     reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_enable_shadows.probe":                            reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_cull_mask.probe":                                 reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_reflection_mask.probe":                           reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_resolution.probe":                                reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.reflection_probe_set_mesh_lod_threshold.probe":                        reflect.TypeFor[RID.ReflectionProbe](),
	"RenderingServer.decal_create.":                                                        reflect.TypeFor[RID.Decal](),
	"RenderingServer.decal_set_size.decal":                                                 reflect.TypeFor[RID.Decal](),
	"RenderingServer.decal_set_texture.decal":                                              reflect.TypeFor[RID.Decal](),
	"RenderingServer.decal_set_texture.texture":                                            reflect.TypeFor[RID.Texture](),
	"RenderingServer.decal_set_emission_energy.decal":                                      reflect.TypeFor[RID.Decal](),
	"RenderingServer.decal_set_albedo_mix.decal":                                           reflect.TypeFor[RID.Decal](),
	"RenderingServer.decal_set_modulate.decal":                                             reflect.TypeFor[RID.Decal](),
	"RenderingServer.decal_set_cull_mask.decal":                                            reflect.TypeFor[RID.Decal](),
	"RenderingServer.decal_set_distance_fade.decal":                                        reflect.TypeFor[RID.Decal](),
	"RenderingServer.decal_set_fade.decal":                                                 reflect.TypeFor[RID.Decal](),
	"RenderingServer.decal_set_normal_fade.decal":                                          reflect.TypeFor[RID.Decal](),
	"RenderingServer.voxel_gi_create.":                                                     reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_allocate_data.voxel_gi":                                      reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_get_octree_size.voxel_gi":                                    reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_get_octree_cells.voxel_gi":                                   reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_get_data_cells.voxel_gi":                                     reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_get_distance_field.voxel_gi":                                 reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_get_level_counts.voxel_gi":                                   reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_get_to_cell_xform.voxel_gi":                                  reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_set_dynamic_range.voxel_gi":                                  reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_set_propagation.voxel_gi":                                    reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_set_energy.voxel_gi":                                         reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_set_baked_exposure_normalization.voxel_gi":                   reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_set_bias.voxel_gi":                                           reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_set_normal_bias.voxel_gi":                                    reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_set_interior.voxel_gi":                                       reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.voxel_gi_set_use_two_bounces.voxel_gi":                                reflect.TypeFor[RID.VoxelGI](),
	"RenderingServer.lightmap_create.":                                                     reflect.TypeFor[RID.Lightmap](),
	"RenderingServer.lightmap_set_textures.lightmap":                                       reflect.TypeFor[RID.Lightmap](),
	"RenderingServer.lightmap_set_textures.light":                                          reflect.TypeFor[RID.Light](),
	"RenderingServer.lightmap_set_probe_bounds.lightmap":                                   reflect.TypeFor[RID.Lightmap](),
	"RenderingServer.lightmap_set_probe_interior.lightmap":                                 reflect.TypeFor[RID.Lightmap](),
	"RenderingServer.lightmap_set_probe_capture_data.lightmap":                             reflect.TypeFor[RID.Lightmap](),
	"RenderingServer.lightmap_get_probe_capture_points.lightmap":                           reflect.TypeFor[RID.Lightmap](),
	"RenderingServer.lightmap_get_probe_capture_sh.lightmap":                               reflect.TypeFor[RID.Lightmap](),
	"RenderingServer.lightmap_get_probe_capture_tetrahedra.lightmap":                       reflect.TypeFor[RID.Lightmap](),
	"RenderingServer.lightmap_get_probe_capture_bsp_tree.lightmap":                         reflect.TypeFor[RID.Lightmap](),
	"RenderingServer.lightmap_set_baked_exposure_normalization.lightmap":                   reflect.TypeFor[RID.Lightmap](),
	"RenderingServer.particles_create.":                                                    reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_mode.particles":                                         reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_emitting.particles":                                     reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_get_emitting.particles":                                     reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_amount.particles":                                       reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_amount_ratio.particles":                                 reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_lifetime.particles":                                     reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_one_shot.particles":                                     reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_pre_process_time.particles":                             reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_explosiveness_ratio.particles":                          reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_randomness_ratio.particles":                             reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_interp_to_end.particles":                                reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_emitter_velocity.particles":                             reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_custom_aabb.particles":                                  reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_speed_scale.particles":                                  reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_use_local_coordinates.particles":                        reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_process_material.particles":                             reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_process_material.material":                              reflect.TypeFor[RID.Material](),
	"RenderingServer.particles_set_fixed_fps.particles":                                    reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_interpolate.particles":                                  reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_fractional_delta.particles":                             reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_collision_base_size.particles":                          reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_transform_align.particles":                              reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_trails.particles":                                       reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_trail_bind_poses.particles":                             reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_is_inactive.particles":                                      reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_request_process.particles":                                  reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_restart.particles":                                          reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_subemitter.particles":                                   reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_subemitter.subemitter_particles":                        reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_emit.particles":                                             reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_draw_order.particles":                                   reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_draw_passes.particles":                                  reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_draw_pass_mesh.particles":                               reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_draw_pass_mesh.mesh":                                    reflect.TypeFor[RID.Mesh](),
	"RenderingServer.particles_get_current_aabb.particles":                                 reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_set_emission_transform.particles":                           reflect.TypeFor[RID.Particles](),
	"RenderingServer.particles_collision_create.":                                          reflect.TypeFor[RID.ParticlesCollision](),
	"RenderingServer.particles_collision_set_collision_type.particles_collision":           reflect.TypeFor[RID.ParticlesCollision](),
	"RenderingServer.particles_collision_set_cull_mask.particles_collision":                reflect.TypeFor[RID.ParticlesCollision](),
	"RenderingServer.particles_collision_set_sphere_radius.particles_collision":            reflect.TypeFor[RID.ParticlesCollision](),
	"RenderingServer.particles_collision_set_box_extents.particles_collision":              reflect.TypeFor[RID.ParticlesCollision](),
	"RenderingServer.particles_collision_set_attractor_strength.particles_collision":       reflect.TypeFor[RID.ParticlesCollision](),
	"RenderingServer.particles_collision_set_attractor_directionality.particles_collision": reflect.TypeFor[RID.ParticlesCollision](),
	"RenderingServer.particles_collision_set_attractor_attenuation.particles_collision":    reflect.TypeFor[RID.ParticlesCollision](),
	"RenderingServer.particles_collision_set_field_texture.particles_collision":            reflect.TypeFor[RID.ParticlesCollision](),
	"RenderingServer.particles_collision_set_field_texture.texture":                        reflect.TypeFor[RID.Texture](),
	"RenderingServer.particles_collision_height_field_update.particles_collision":          reflect.TypeFor[RID.ParticlesCollision](),
	"RenderingServer.particles_collision_set_height_field_resolution.particles_collision":  reflect.TypeFor[RID.ParticlesCollision](),
	"RenderingServer.fog_volume_create.":                                                   reflect.TypeFor[RID.FogVolume](),
	"RenderingServer.fog_volume_set_shape.fog_volume":                                      reflect.TypeFor[RID.FogVolume](),
	"RenderingServer.fog_volume_set_size.fog_volume":                                       reflect.TypeFor[RID.FogVolume](),
	"RenderingServer.fog_volume_set_material.fog_volume":                                   reflect.TypeFor[RID.FogVolume](),
	"RenderingServer.fog_volume_set_material.material":                                     reflect.TypeFor[RID.Material](),
	"RenderingServer.visibility_notifier_create.":                                          reflect.TypeFor[RID.VisibilityNotifier](),
	"RenderingServer.visibility_notifier_set_aabb.notifier":                                reflect.TypeFor[RID.VisibilityNotifier](),
	"RenderingServer.visibility_notifier_set_callbacks.notifier":                           reflect.TypeFor[RID.VisibilityNotifier](),
	"RenderingServer.occluder_create.":                                                     reflect.TypeFor[RID.Occluder](),
	"RenderingServer.occluder_set_mesh.occluder":                                           reflect.TypeFor[RID.Occluder](),
	"RenderingServer.camera_set_environment.env":                                           reflect.TypeFor[RID.Environment](),
	"RenderingServer.camera_set_compositor.camera":                                         reflect.TypeFor[RID.Camera](),
	"RenderingServer.viewport_create.":                                                     reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_use_xr.viewport":                                         reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_size.viewport":                                           reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_active.viewport":                                         reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_parent_viewport.viewport":                                reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_parent_viewport.parent_viewport":                         reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_attach_to_screen.viewport":                                   reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_render_direct_to_screen.viewport":                        reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_canvas_cull_mask.viewport":                               reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_scaling_3d_mode.viewport":                                reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_scaling_3d_scale.viewport":                               reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_fsr_sharpness.viewport":                                  reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_texture_mipmap_bias.viewport":                            reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_update_mode.viewport":                                    reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_get_update_mode.viewport":                                    reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_clear_mode.viewport":                                     reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_get_render_target.viewport":                                  reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_get_render_target.":                                          reflect.TypeFor[RID.Framebuffer](),
	"RenderingServer.viewport_get_texture.viewport":                                        reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_get_texture.":                                                reflect.TypeFor[RID.Texture](),
	"RenderingServer.viewport_set_disable_3d.viewport":                                     reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_disable_2d.viewport":                                     reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_environment_mode.viewport":                               reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_attach_camera.viewport":                                      reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_attach_camera.camera":                                        reflect.TypeFor[RID.Camera](),
	"RenderingServer.viewport_set_scenario.viewport":                                       reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_scenario.scenario":                                       reflect.TypeFor[RID.Scenario](),
	"RenderingServer.viewport_attach_canvas.viewport":                                      reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_attach_canvas.canvas":                                        reflect.TypeFor[RID.Canvas](),
	"RenderingServer.viewport_remove_canvas.viewport":                                      reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_remove_canvas.canvas":                                        reflect.TypeFor[RID.Canvas](),
	"RenderingServer.viewport_set_snap_2d_transforms_to_pixel.viewport":                    reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_snap_2d_vertices_to_pixel.viewport":                      reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_default_canvas_item_texture_filter.viewport":             reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_default_canvas_item_texture_repeat.viewport":             reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_canvas_transform.viewport":                               reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_canvas_transform.canvas":                                 reflect.TypeFor[RID.Canvas](),
	"RenderingServer.viewport_set_canvas_stacking.viewport":                                reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_canvas_stacking.canvas":                                  reflect.TypeFor[RID.Canvas](),
	"RenderingServer.viewport_set_transparent_background.viewport":                         reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_global_canvas_transform.viewport":                        reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_sdf_oversize_and_scale.viewport":                         reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_positional_shadow_atlas_size.viewport":                   reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_positional_shadow_atlas_quadrant_subdivision.viewport":   reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_msaa_3d.viewport":                                        reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_msaa_2d.viewport":                                        reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_use_hdr_2d.viewport":                                     reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_screen_space_aa.viewport":                                reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_use_taa.viewport":                                        reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_use_debanding.viewport":                                  reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_use_occlusion_culling.viewport":                          reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_get_render_info.viewport":                                    reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_debug_draw.viewport":                                     reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_measure_render_time.viewport":                            reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_get_measured_render_time_cpu.viewport":                       reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_get_measured_render_time_gpu.viewport":                       reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_vrs_mode.viewport":                                       reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_vrs_update_mode.viewport":                                reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_vrs_texture.viewport":                                    reflect.TypeFor[RID.Viewport](),
	"RenderingServer.viewport_set_vrs_texture.texture":                                     reflect.TypeFor[RID.Texture](),
	"RenderingServer.sky_create.":                                                          reflect.TypeFor[RID.Sky](),
	"RenderingServer.sky_set_radiance_size.sky":                                            reflect.TypeFor[RID.Sky](),
	"RenderingServer.sky_set_mode.sky":                                                     reflect.TypeFor[RID.Sky](),
	"RenderingServer.sky_set_material.sky":                                                 reflect.TypeFor[RID.Sky](),
	"RenderingServer.sky_set_material.material":                                            reflect.TypeFor[RID.Material](),
	"RenderingServer.sky_bake_panorama.sky":                                                reflect.TypeFor[RID.Sky](),
	"RenderingServer.compositor_effect_create.":                                            reflect.TypeFor[RID.CompositorEffect](),
	"RenderingServer.compositor_effect_set_enabled.effect":                                 reflect.TypeFor[RID.CompositorEffect](),
	"RenderingServer.compositor_effect_set_callback.effect":                                reflect.TypeFor[RID.CompositorEffect](),
	"RenderingServer.compositor_effect_set_flag.effect":                                    reflect.TypeFor[RID.CompositorEffect](),
	"RenderingServer.compositor_create.":                                                   reflect.TypeFor[RID.Compositor](),
	"RenderingServer.compositor_set_compositor_effects.compositor":                         reflect.TypeFor[RID.Compositor](),
	"RenderingServer.compositor_set_compositor_effects.effects":                            reflect.TypeFor[[]RID.CompositorEffect](),
	"RenderingServer.environment_create.":                                                  reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_background.env":                                       reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_sky.env":                                              reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_sky.sky":                                              reflect.TypeFor[RID.Sky](),
	"RenderingServer.environment_set_sky_custom_fov.env":                                   reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_sky_orientation.env":                                  reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_bg_color.env":                                         reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_bg_energy.env":                                        reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_canvas_max_layer.env":                                 reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_ambient_light.env":                                    reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_glow.env":                                             reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_glow.glow_map":                                        reflect.TypeFor[RID.Texture](),
	"RenderingServer.environment_set_tonemap.env":                                          reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_adjustment.env":                                       reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_adjustment.color_correction":                          reflect.TypeFor[RID.ColorCorrection](),
	"RenderingServer.environment_set_ssr.env":                                              reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_ssao.env":                                             reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_fog.env":                                              reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_sdfgi.env":                                            reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_set_volumetric_fog.env":                                   reflect.TypeFor[RID.Environment](),
	"RenderingServer.environment_bake_panorama.environment":                                reflect.TypeFor[RID.Environment](),
	"RenderingServer.scenario_create.":                                                     reflect.TypeFor[RID.Scenario](),
	"RenderingServer.scenario_set_environment.scenario":                                    reflect.TypeFor[RID.Scenario](),
	"RenderingServer.scenario_set_environment.environment":                                 reflect.TypeFor[RID.Environment](),
	"RenderingServer.scenario_set_fallback_environment.scenario":                           reflect.TypeFor[RID.Scenario](),
	"RenderingServer.scenario_set_fallback_environment.environment":                        reflect.TypeFor[RID.Environment](),
	"RenderingServer.scenario_set_camera_attributes.scenario":                              reflect.TypeFor[RID.Scenario](),
	"RenderingServer.scenario_set_camera_attributes.effects":                               reflect.TypeFor[RID.CameraAttributes](),
	"RenderingServer.scenario_set_compositor.scenario":                                     reflect.TypeFor[RID.Scenario](),
	"RenderingServer.scenario_set_compositor.compositor":                                   reflect.TypeFor[RID.Compositor](),
	"RenderingServer.instance_create2.base":                                                reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_create2.scenario":                                            reflect.TypeFor[RID.Scenario](),
	"RenderingServer.instance_create2.":                                                    reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_create.":                                                     reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_set_base.instance":                                           reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_set_base.base":                                               reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_set_scenario.instance":                                       reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_set_scenario.scenario":                                       reflect.TypeFor[RID.Scenario](),
	"RenderingServer.instance_set_layer_mask.instance":                                     reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_set_pivot_data.instance":                                     reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_set_transform.instance":                                      reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_attach_object_instance_id.instance":                          reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_set_blend_shape_weight.instance":                             reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_set_surface_override_material.instance":                      reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_set_surface_override_material.material":                      reflect.TypeFor[RID.Material](),
	"RenderingServer.instance_set_visible.instance":                                        reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_geometry_set_transparency.instance":                          reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_set_custom_aabb.instance":                                    reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_attach_skeleton.instance":                                    reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_attach_skeleton.skeleton":                                    reflect.TypeFor[RID.Skeleton](),
	"RenderingServer.instance_set_extra_visibility_margin.instance":                        reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_set_visibility_parent.instance":                              reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_set_visibility_parent.parent":                                reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_set_ignore_culling.instance":                                 reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_geometry_set_flag.instance":                                  reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_geometry_set_cast_shadows_setting.instance":                  reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_geometry_set_material_override.instance":                     reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_geometry_set_material_override.material":                     reflect.TypeFor[RID.Material](),
	"RenderingServer.instance_geometry_set_material_overlay.instance":                      reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_geometry_set_material_overlay.material":                      reflect.TypeFor[RID.Material](),
	"RenderingServer.instance_geometry_set_visibility_range.instance":                      reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_geometry_set_lightmap.instance":                              reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_geometry_set_lightmap.lightmap":                              reflect.TypeFor[RID.Lightmap](),
	"RenderingServer.instance_geometry_set_lod_bias.instance":                              reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_geometry_set_shader_parameter.instance":                      reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_geometry_get_shader_parameter.instance":                      reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_geometry_get_shader_parameter_default_value.instance":        reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instance_geometry_get_shader_parameter_list.instance":                 reflect.TypeFor[RID.VisualInstance](),
	"RenderingServer.instances_cull_aabb.scenario":                                         reflect.TypeFor[RID.Scenario](),
	"RenderingServer.instances_cull_ray.scenario":                                          reflect.TypeFor[RID.Scenario](),
	"RenderingServer.instances_cull_convex.scenario":                                       reflect.TypeFor[RID.Scenario](),
	"RenderingServer.canvas_set_item_mirroring.canvas":                                     reflect.TypeFor[RID.Canvas](),
	"RenderingServer.canvas_set_item_mirroring.item":                                       reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_set_item_repeat.item":                                          reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_set_modulate.canvas":                                           reflect.TypeFor[RID.Canvas](),
	"RenderingServer.canvas_texture_create.":                                               reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_texture_set_channel.canvas_texture":                            reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_texture_set_channel.texture":                                   reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_texture_set_shading_parameters.canvas_texture":                 reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_texture_set_texture_filter.canvas_texture":                     reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_texture_set_texture_repeat.canvas_texture":                     reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_item_create.":                                                  reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_parent.item":                                          reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_parent.parent":                                        reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_default_texture_filter.item":                          reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_default_texture_repeat.item":                          reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_visible.item":                                         reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_light_mask.item":                                      reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_visibility_layer.item":                                reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_transform.item":                                       reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_clip.item":                                            reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_distance_field_mode.item":                             reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_custom_rect.item":                                     reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_modulate.item":                                        reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_self_modulate.item":                                   reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_draw_behind_parent.item":                              reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_interpolated.item":                                    reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_reset_physics_interpolation.item":                         reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_transform_physics_interpolation.item":                     reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_rect.item":                                            reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_texture_rect.item":                                    reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_texture_rect.texture":                                 reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_item_add_msdf_texture_rect_region.texture":                     reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_item_add_lcd_texture_rect_region.texture":                      reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_item_add_texture_rect_region.item":                             reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_texture_rect_region.texture":                          reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_item_add_nine_patch.texture":                                   reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_item_add_primitive.texture":                                    reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_item_add_polygon.texture":                                      reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_item_add_triangle_array.item":                                  reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_add_triangle_array.texture":                               reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_item_add_mesh.texture":                                         reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_item_add_set_transform.item":                                   reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_sort_children_by_y.item":                              reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_z_index.item":                                         reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_z_as_relative_to_parent.item":                         reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_copy_to_backbuffer.item":                              reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_clear.item":                                               reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_draw_index.item":                                      reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_material.item":                                        reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_material.material":                                    reflect.TypeFor[RID.Material](),
	"RenderingServer.canvas_item_set_use_parent_material.item":                             reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_visibility_notifier.item":                             reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_item_set_canvas_group_mode.item":                               reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.debug_canvas_item_get_rect.item":                                      reflect.TypeFor[RID.CanvasItem](),
	"RenderingServer.canvas_light_create.":                                                 reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_attach_to_canvas.light":                                  reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_attach_to_canvas.canvas":                                 reflect.TypeFor[RID.Canvas](),
	"RenderingServer.canvas_light_set_enabled.light":                                       reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_texture_scale.light":                                 reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_transform.light":                                     reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_texture.light":                                       reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_texture.texture":                                     reflect.TypeFor[RID.CanvasTexture](),
	"RenderingServer.canvas_light_set_texture_offset.light":                                reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_color.light":                                         reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_height.light":                                        reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_energy.light":                                        reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_z_range.light":                                       reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_layer_range.light":                                   reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_item_cull_mask.light":                                reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_item_shadow_cull_mask.light":                         reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_mode.light":                                          reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_shadow_enabled.light":                                reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_shadow_filter.light":                                 reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_shadow_color.light":                                  reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_shadow_smooth.light":                                 reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_blend_mode.light":                                    reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_set_interpolated.light":                                  reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_reset_physics_interpolation.light":                       reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_transform_physics_interpolation.light":                   reflect.TypeFor[RID.CanvasLight](),
	"RenderingServer.canvas_light_occluder_create.":                                        reflect.TypeFor[RID.CanvasLightOccluder](),
	"RenderingServer.canvas_light_occluder_attach_to_canvas.occluder":                      reflect.TypeFor[RID.CanvasLightOccluder](),
	"RenderingServer.canvas_light_occluder_attach_to_canvas.canvas":                        reflect.TypeFor[RID.Canvas](),
	"RenderingServer.canvas_light_occluder_set_enabled.occluder":                           reflect.TypeFor[RID.CanvasLightOccluder](),
	"RenderingServer.canvas_light_occluder_set_polygon.occluder":                           reflect.TypeFor[RID.CanvasLightOccluder](),
	"RenderingServer.canvas_light_occluder_set_polygon.polygon":                            reflect.TypeFor[RID.CanvasLightOccluderPolygon](),
	"RenderingServer.canvas_light_occluder_set_as_sdf_collision.occluder":                  reflect.TypeFor[RID.CanvasLightOccluder](),
	"RenderingServer.canvas_light_occluder_set_transform.occluder":                         reflect.TypeFor[RID.CanvasLightOccluder](),
	"RenderingServer.canvas_light_occluder_set_light_mask.occluder":                        reflect.TypeFor[RID.CanvasLightOccluder](),
	"RenderingServer.canvas_light_occluder_set_interpolated.occluder":                      reflect.TypeFor[RID.CanvasLightOccluder](),
	"RenderingServer.canvas_light_occluder_reset_physics_interpolation.occluder":           reflect.TypeFor[RID.CanvasLightOccluder](),
	"RenderingServer.canvas_light_occluder_transform_physics_interpolation.occluder":       reflect.TypeFor[RID.CanvasLightOccluder](),
	"RenderingServer.canvas_occluder_polygon_create.":                                      reflect.TypeFor[RID.CanvasLightOccluderPolygon](),
	"RenderingServer.canvas_occluder_polygon_set_shape.occluder_polygon":                   reflect.TypeFor[RID.CanvasLightOccluderPolygon](),
	"RenderingServer.canvas_occluder_polygon_set_cull_mode.occluder_polygon":               reflect.TypeFor[RID.CanvasLightOccluderPolygon](),
	"RenderingServer.free_rid.rid":                                                         reflect.TypeFor[RID.Any](), // FIXME
	"RenderingServer.make_sphere_mesh.":                                                    reflect.TypeFor[RID.Mesh](),
	"RenderingServer.get_test_cube.":                                                       reflect.TypeFor[RID.Mesh](),
	"RenderingServer.get_test_texture.":                                                    reflect.TypeFor[RID.Texture](),
	"RenderingServer.get_white_texture.":                                                   reflect.TypeFor[RID.Texture](),

	"Resource.get_rid.":                                              reflect.TypeFor[RID.Any](),
	"Shape2D.draw.canvas_item":                                       reflect.TypeFor[RID.CanvasItem](),
	"ShapeCast2D.get_collider_rid.":                                  reflect.TypeFor[RID.Body2D](),
	"ShapeCast2D.add_exception_rid.rid":                              reflect.TypeFor[RID.Body2D](),
	"ShapeCast2D.remove_exception_rid.rid":                           reflect.TypeFor[RID.Body2D](),
	"ShapeCast3D.get_collider_rid.":                                  reflect.TypeFor[RID.Body3D](),
	"ShapeCast3D.add_exception_rid.rid":                              reflect.TypeFor[RID.Body3D](),
	"ShapeCast3D.remove_exception_rid.rid":                           reflect.TypeFor[RID.Body3D](),
	"Skeleton2D.get_skeleton.":                                       reflect.TypeFor[RID.Skeleton](),
	"Skeleton3D.physical_bones_add_collision_exception.exception":    reflect.TypeFor[RID.Body3D](),
	"Skeleton3D.physical_bones_remove_collision_exception.exception": reflect.TypeFor[RID.Body3D](),
	"SkinReference.get_skeleton.":                                    reflect.TypeFor[RID.Skeleton](),
	"SoftBody3D.get_physics_rid.":                                    reflect.TypeFor[RID.SoftBody3D](),
	"SpringArm3D.add_excluded_object.RID":                            reflect.TypeFor[RID.Body3D](),
	"SpringArm3D.remove_excluded_object.RID":                         reflect.TypeFor[RID.Body3D](),
	"StyleBox.draw.canvas_item":                                      reflect.TypeFor[RID.CanvasItem](),

	"TextLine.get_rid.":                         reflect.TypeFor[RID.TextBuffer](),
	"TextLine.draw.canvas":                      reflect.TypeFor[RID.Canvas](),
	"TextLine.draw_outline.canvas":              reflect.TypeFor[RID.Canvas](),
	"TextParagraph.get_rid.":                    reflect.TypeFor[RID.TextBuffer](),
	"TextParagraph.get_line_rid.":               reflect.TypeFor[RID.TextBuffer](),
	"TextParagraph.get_dropcap_rid.":            reflect.TypeFor[RID.TextBuffer](),
	"TextParagraph.draw.canvas":                 reflect.TypeFor[RID.Canvas](),
	"TextParagraph.draw_outline.canvas":         reflect.TypeFor[RID.Canvas](),
	"TextParagraph.draw_line.canvas":            reflect.TypeFor[RID.Canvas](),
	"TextParagraph.draw_line_outline.canvas":    reflect.TypeFor[RID.Canvas](),
	"TextParagraph.draw_dropcap.canvas":         reflect.TypeFor[RID.Canvas](),
	"TextParagraph.draw_dropcap_outline.canvas": reflect.TypeFor[RID.Canvas](),

	"TextServer.has.rid":                                              reflect.TypeFor[RID.Any](),
	"TextServer.free_rid.rid":                                         reflect.TypeFor[RID.Any](),
	"TextServer.create_font.":                                         reflect.TypeFor[RID.Font](),
	"TextServer.create_font_linked_variation.font_rid":                reflect.TypeFor[RID.Font](),
	"TextServer.create_font_linked_variation.":                        reflect.TypeFor[RID.Font](),
	"TextServer.font_set_data.font_rid":                               reflect.TypeFor[RID.Font](),
	"TextServer.font_set_face_index.font_rid":                         reflect.TypeFor[RID.Font](),
	"TextServer.font_get_face_index.font_rid":                         reflect.TypeFor[RID.Font](),
	"TextServer.font_get_face_count.font_rid":                         reflect.TypeFor[RID.Font](),
	"TextServer.font_set_style.font_rid":                              reflect.TypeFor[RID.Font](),
	"TextServer.font_get_style.font_rid":                              reflect.TypeFor[RID.Font](),
	"TextServer.font_set_name.font_rid":                               reflect.TypeFor[RID.Font](),
	"TextServer.font_get_name.font_rid":                               reflect.TypeFor[RID.Font](),
	"TextServer.font_get_ot_name_strings.font_rid":                    reflect.TypeFor[RID.Font](),
	"TextServer.font_set_style_name.font_rid":                         reflect.TypeFor[RID.Font](),
	"TextServer.font_get_style_name.font_rid":                         reflect.TypeFor[RID.Font](),
	"TextServer.font_set_weight.font_rid":                             reflect.TypeFor[RID.Font](),
	"TextServer.font_get_weight.font_rid":                             reflect.TypeFor[RID.Font](),
	"TextServer.font_set_stretch.font_rid":                            reflect.TypeFor[RID.Font](),
	"TextServer.font_get_stretch.font_rid":                            reflect.TypeFor[RID.Font](),
	"TextServer.font_set_antialiasing.font_rid":                       reflect.TypeFor[RID.Font](),
	"TextServer.font_get_antialiasing.font_rid":                       reflect.TypeFor[RID.Font](),
	"TextServer.font_set_disable_embedded_bitmaps.font_rid":           reflect.TypeFor[RID.Font](),
	"TextServer.font_get_disable_embedded_bitmaps.font_rid":           reflect.TypeFor[RID.Font](),
	"TextServer.font_set_generate_mipmaps.font_rid":                   reflect.TypeFor[RID.Font](),
	"TextServer.font_get_generate_mipmaps.font_rid":                   reflect.TypeFor[RID.Font](),
	"TextServer.font_set_multichannel_signed_distance_field.font_rid": reflect.TypeFor[RID.Font](),
	"TextServer.font_is_multichannel_signed_distance_field.font_rid":  reflect.TypeFor[RID.Font](),
	"TextServer.font_set_msdf_pixel_range.font_rid":                   reflect.TypeFor[RID.Font](),
	"TextServer.font_get_msdf_pixel_range.font_rid":                   reflect.TypeFor[RID.Font](),
	"TextServer.font_set_msdf_size.font_rid":                          reflect.TypeFor[RID.Font](),
	"TextServer.font_get_msdf_size.font_rid":                          reflect.TypeFor[RID.Font](),
	"TextServer.font_set_fixed_size.font_rid":                         reflect.TypeFor[RID.Font](),
	"TextServer.font_get_fixed_size.font_rid":                         reflect.TypeFor[RID.Font](),
	"TextServer.font_set_fixed_size_scale_mode.font_rid":              reflect.TypeFor[RID.Font](),
	"TextServer.font_get_fixed_size_scale_mode.font_rid":              reflect.TypeFor[RID.Font](),
	"TextServer.font_set_allow_system_fallback.font_rid":              reflect.TypeFor[RID.Font](),
	"TextServer.font_is_allow_system_fallback.font_rid":               reflect.TypeFor[RID.Font](),
	"TextServer.font_set_force_autohinter.font_rid":                   reflect.TypeFor[RID.Font](),
	"TextServer.font_is_force_autohinter.font_rid":                    reflect.TypeFor[RID.Font](),
	"TextServer.font_set_hinting.font_rid":                            reflect.TypeFor[RID.Font](),
	"TextServer.font_get_hinting.font_rid":                            reflect.TypeFor[RID.Font](),
	"TextServer.font_set_subpixel_positioning.font_rid":               reflect.TypeFor[RID.Font](),
	"TextServer.font_get_subpixel_positioning.font_rid":               reflect.TypeFor[RID.Font](),
	"TextServer.font_set_embolden.font_rid":                           reflect.TypeFor[RID.Font](),
	"TextServer.font_get_embolden.font_rid":                           reflect.TypeFor[RID.Font](),
	"TextServer.font_set_spacing.font_rid":                            reflect.TypeFor[RID.Font](),
	"TextServer.font_get_spacing.font_rid":                            reflect.TypeFor[RID.Font](),
	"TextServer.font_set_baseline_offset.font_rid":                    reflect.TypeFor[RID.Font](),
	"TextServer.font_get_baseline_offset.font_rid":                    reflect.TypeFor[RID.Font](),
	"TextServer.font_set_transform.font_rid":                          reflect.TypeFor[RID.Font](),
	"TextServer.font_get_transform.font_rid":                          reflect.TypeFor[RID.Font](),
	"TextServer.font_set_variation_coordinates.font_rid":              reflect.TypeFor[RID.Font](),
	"TextServer.font_get_variation_coordinates.font_rid":              reflect.TypeFor[RID.Font](),
	"TextServer.font_set_oversampling.font_rid":                       reflect.TypeFor[RID.Font](),
	"TextServer.font_get_oversampling.font_rid":                       reflect.TypeFor[RID.Font](),
	"TextServer.font_get_size_cache_list.font_rid":                    reflect.TypeFor[RID.Font](),
	"TextServer.font_clear_size_cache.font_rid":                       reflect.TypeFor[RID.Font](),
	"TextServer.font_remove_size_cache.font_rid":                      reflect.TypeFor[RID.Font](),
	"TextServer.font_set_ascent.font_rid":                             reflect.TypeFor[RID.Font](),
	"TextServer.font_get_ascent.font_rid":                             reflect.TypeFor[RID.Font](),
	"TextServer.font_set_descent.font_rid":                            reflect.TypeFor[RID.Font](),
	"TextServer.font_get_descent.font_rid":                            reflect.TypeFor[RID.Font](),
	"TextServer.font_set_underline_position.font_rid":                 reflect.TypeFor[RID.Font](),
	"TextServer.font_get_underline_position.font_rid":                 reflect.TypeFor[RID.Font](),
	"TextServer.font_set_underline_thickness.font_rid":                reflect.TypeFor[RID.Font](),
	"TextServer.font_get_underline_thickness.font_rid":                reflect.TypeFor[RID.Font](),
	"TextServer.font_set_scale.font_rid":                              reflect.TypeFor[RID.Font](),
	"TextServer.font_get_scale.font_rid":                              reflect.TypeFor[RID.Font](),
	"TextServer.font_get_texture_count.font_rid":                      reflect.TypeFor[RID.Font](),
	"TextServer.font_clear_textures.font_rid":                         reflect.TypeFor[RID.Font](),
	"TextServer.font_remove_texture.font_rid":                         reflect.TypeFor[RID.Font](),
	"TextServer.font_set_texture_image.font_rid":                      reflect.TypeFor[RID.Font](),
	"TextServer.font_get_texture_image.font_rid":                      reflect.TypeFor[RID.Font](),
	"TextServer.font_set_texture_offsets.font_rid":                    reflect.TypeFor[RID.Font](),
	"TextServer.font_get_texture_offsets.font_rid":                    reflect.TypeFor[RID.Font](),
	"TextServer.font_get_glyph_list.font_rid":                         reflect.TypeFor[RID.Font](),
	"TextServer.font_clear_glyphs.font_rid":                           reflect.TypeFor[RID.Font](),
	"TextServer.font_remove_glyph.font_rid":                           reflect.TypeFor[RID.Font](),
	"TextServer.font_get_glyph_advance.font_rid":                      reflect.TypeFor[RID.Font](),
	"TextServer.font_set_glyph_advance.font_rid":                      reflect.TypeFor[RID.Font](),
	"TextServer.font_get_glyph_offset.font_rid":                       reflect.TypeFor[RID.Font](),
	"TextServer.font_set_glyph_offset.font_rid":                       reflect.TypeFor[RID.Font](),
	"TextServer.font_get_glyph_size.font_rid":                         reflect.TypeFor[RID.Font](),
	"TextServer.font_set_glyph_size.font_rid":                         reflect.TypeFor[RID.Font](),
	"TextServer.font_get_glyph_uv_rect.font_rid":                      reflect.TypeFor[RID.Font](),
	"TextServer.font_set_glyph_uv_rect.font_rid":                      reflect.TypeFor[RID.Font](),
	"TextServer.font_get_glyph_texture_idx.font_rid":                  reflect.TypeFor[RID.Font](),
	"TextServer.font_set_glyph_texture_idx.font_rid":                  reflect.TypeFor[RID.Font](),
	"TextServer.font_get_glyph_texture_rid.font_rid":                  reflect.TypeFor[RID.Font](),
	"TextServer.font_get_glyph_texture_rid.":                          reflect.TypeFor[RID.Texture](),
	"TextServer.font_get_glyph_texture_size.font_rid":                 reflect.TypeFor[RID.Font](),
	"TextServer.font_get_glyph_contours.font":                         reflect.TypeFor[RID.Font](),
	"TextServer.font_get_kerning_list.font_rid":                       reflect.TypeFor[RID.Font](),
	"TextServer.font_clear_kerning_map.font_rid":                      reflect.TypeFor[RID.Font](),
	"TextServer.font_remove_kerning.font_rid":                         reflect.TypeFor[RID.Font](),
	"TextServer.font_set_kerning.font_rid":                            reflect.TypeFor[RID.Font](),
	"TextServer.font_get_kerning.font_rid":                            reflect.TypeFor[RID.Font](),
	"TextServer.font_get_glyph_index.font_rid":                        reflect.TypeFor[RID.Font](),
	"TextServer.font_get_char_from_glyph_index.font_rid":              reflect.TypeFor[RID.Font](),
	"TextServer.font_has_char.font_rid":                               reflect.TypeFor[RID.Font](),
	"TextServer.font_get_supported_chars.font_rid":                    reflect.TypeFor[RID.Font](),
	"TextServer.font_render_range.font_rid":                           reflect.TypeFor[RID.Font](),
	"TextServer.font_render_glyph.font_rid":                           reflect.TypeFor[RID.Font](),
	"TextServer.font_draw_glyph.font_rid":                             reflect.TypeFor[RID.Font](),
	"TextServer.font_draw_glyph.canvas":                               reflect.TypeFor[RID.Canvas](),
	"TextServer.font_draw_glyph_outline.font_rid":                     reflect.TypeFor[RID.Font](),
	"TextServer.font_draw_glyph_outline.canvas":                       reflect.TypeFor[RID.Canvas](),
	"TextServer.font_is_language_supported.font_rid":                  reflect.TypeFor[RID.Font](),
	"TextServer.font_set_language_support_override.font_rid":          reflect.TypeFor[RID.Font](),
	"TextServer.font_get_language_support_override.font_rid":          reflect.TypeFor[RID.Font](),
	"TextServer.font_remove_language_support_override.font_rid":       reflect.TypeFor[RID.Font](),
	"TextServer.font_get_language_support_overrides.font_rid":         reflect.TypeFor[RID.Font](),
	"TextServer.font_is_script_supported.font_rid":                    reflect.TypeFor[RID.Font](),
	"TextServer.font_set_script_support_override.font_rid":            reflect.TypeFor[RID.Font](),
	"TextServer.font_get_script_support_override.font_rid":            reflect.TypeFor[RID.Font](),
	"TextServer.font_remove_script_support_override.font_rid":         reflect.TypeFor[RID.Font](),
	"TextServer.font_get_script_support_overrides.font_rid":           reflect.TypeFor[RID.Font](),
	"TextServer.font_set_opentype_feature_overrides.font_rid":         reflect.TypeFor[RID.Font](),
	"TextServer.font_get_opentype_feature_overrides.font_rid":         reflect.TypeFor[RID.Font](),
	"TextServer.font_supported_feature_list.font_rid":                 reflect.TypeFor[RID.Font](),
	"TextServer.font_supported_variation_list.font_rid":               reflect.TypeFor[RID.Font](),
	"TextServer.draw_hex_code_box.canvas":                             reflect.TypeFor[RID.Canvas](),
	"TextServer.create_shaped_text.":                                  reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_clear.rid":                                reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_set_direction.shaped":                     reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_direction.shaped":                     reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_inferred_direction.shaped":            reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_set_bidi_override.shaped":                 reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_set_custom_punctuation.shaped":            reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_custom_punctuation.shaped":            reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_set_custom_ellipsis.shaped":               reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_custom_ellipsis.shaped":               reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_set_orientation.shaped":                   reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_orientation.shaped":                   reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_set_preserve_invalid.shaped":              reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_preserve_invalid.shaped":              reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_set_preserve_control.shaped":              reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_preserve_control.shaped":              reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_set_spacing.shaped":                       reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_spacing.shaped":                       reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_add_string.shaped":                        reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_add_string.fonts":                         reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_add_object.shaped":                        reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_resize_object.shaped":                     reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_get_span_count.shaped":                         reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_get_span_meta.shaped":                          reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_set_span_update_font.shaped":                   reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_set_span_update_font.fonts":                    reflect.TypeFor[[]RID.Font](),
	"TextServer.shaped_text_substr.shaped":                            reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_substr.":                                  reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_parent.shaped":                        reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_parent.":                              reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_fit_to_width.shaped":                      reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_tab_align.shaped":                         reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_shape.shaped":                             reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_is_ready.shaped":                          reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_has_visible_chars.shaped":                 reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_glyphs.shaped":                        reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_sort_logical.shaped":                      reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_glyph_count.shaped":                   reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_range.shaped":                         reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_line_breaks_adv.shaped":               reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_line_breaks.shaped":                   reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_word_breaks.shaped":                   reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_trim_pos.shaped":                      reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_ellipsis_pos.shaped":                  reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_ellipsis_glyphs.shaped":               reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_ellipsis_glyph_count.shaped":          reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_overrun_trim_to_width.shaped":             reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_objects.shaped":                       reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_object_rect.shaped":                   reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_object_range.shaped":                  reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_object_glyph.shaped":                  reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_size.shaped":                          reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_ascent.shaped":                        reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_descent.shaped":                       reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_width.shaped":                         reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_underline_position.shaped":            reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_underline_thickness.shaped":           reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_carets.shaped":                        reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_selection.shaped":                     reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_hit_test_grapheme.shaped":                 reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_hit_test_position.shaped":                 reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_grapheme_bounds.shaped":               reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_next_grapheme_pos.shaped":                 reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_prev_grapheme_pos.shaped":                 reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_get_character_breaks.shaped":              reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_next_character_pos.shaped":                reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_prev_character_pos.shaped":                reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_closest_character_pos.shaped":             reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_draw.shaped":                              reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_draw.canvas":                              reflect.TypeFor[RID.Canvas](),
	"TextServer.shaped_text_draw_outline.shaped":                      reflect.TypeFor[RID.TextBuffer](),
	"TextServer.shaped_text_draw_outline.canvas":                      reflect.TypeFor[RID.Canvas](),
	"TextServer.shaped_text_get_dominant_direction_in_range.shaped":   reflect.TypeFor[RID.TextBuffer](),

	"Texture2D.draw.canvas_item":                         reflect.TypeFor[RID.CanvasItem](),
	"Texture2D.draw_rect.canvas_item":                    reflect.TypeFor[RID.CanvasItem](),
	"Texture2D.draw_rect_region.canvas_item":             reflect.TypeFor[RID.CanvasItem](),
	"Texture2DRD.set_texture_rd_rid.texture_rd_rid":      reflect.TypeFor[RID.Texture](),
	"Texture2DRD.get_texture_rd_rid.":                    reflect.TypeFor[RID.Texture](),
	"Texture3DRD.set_texture_rd_rid.texture_rd_rid":      reflect.TypeFor[RID.Texture](),
	"Texture3DRD.get_texture_rd_rid.":                    reflect.TypeFor[RID.Texture](),
	"TextureLayeredRD.set_texture_rd_rid.texture_rd_rid": reflect.TypeFor[RID.Texture](),
	"TextureLayeredRD.get_texture_rd_rid.":               reflect.TypeFor[RID.Texture](),

	"TileMap.set_navigation_map.map":            reflect.TypeFor[RID.NavigationMap2D](),
	"TileMap.get_navigation_map.":               reflect.TypeFor[RID.NavigationMap2D](),
	"TileMap.set_layer_navigation_map.map":      reflect.TypeFor[RID.NavigationMap2D](),
	"TileMap.get_layer_navigation_map.":         reflect.TypeFor[RID.NavigationMap2D](),
	"TileMap.get_coords_for_body_rid.body":      reflect.TypeFor[RID.Body2D](),
	"TileMap.get_layer_for_body_rid.body":       reflect.TypeFor[RID.Body2D](),
	"TileMapLayer.has_body_rid.body":            reflect.TypeFor[RID.Body2D](),
	"TileMapLayer.get_coords_for_body_rid.body": reflect.TypeFor[RID.Body2D](),
	"TileMapLayer.set_navigation_map.map":       reflect.TypeFor[RID.NavigationMap2D](),
	"TileMapLayer.get_navigation_map.":          reflect.TypeFor[RID.NavigationMap2D](),

	"UniformSetCacheRD.get_cache.shader": reflect.TypeFor[RID.Shader](),
	"UniformSetCacheRD.get_cache.":       reflect.TypeFor[RID.UniformSet](),
	"Viewport.get_viewport_rid.":         reflect.TypeFor[RID.Viewport](),
	"VisualInstance3D.set_base.base":     reflect.TypeFor[RID.VisualInstance](),
	"VisualInstance3D.get_base.":         reflect.TypeFor[RID.VisualInstance](),
	"VisualInstance3D.get_instance.":     reflect.TypeFor[RID.VisualInstance](),
	"World2D.get_canvas.":                reflect.TypeFor[RID.Canvas](),
	"World2D.get_space.":                 reflect.TypeFor[RID.Space2D](),
	"World2D.get_navigation_map.":        reflect.TypeFor[RID.NavigationMap2D](),
	"World3D.get_space.":                 reflect.TypeFor[RID.Space3D](),
	"World3D.get_navigation_map.":        reflect.TypeFor[RID.NavigationMap3D](),
	"World3D.get_scenario.":              reflect.TypeFor[RID.Scenario](),

	"XRInterfaceExtension.get_color_texture.":                      reflect.TypeFor[RID.Texture](),
	"XRInterfaceExtension.get_depth_texture.":                      reflect.TypeFor[RID.Texture](),
	"XRInterfaceExtension.get_velocity_texture.":                   reflect.TypeFor[RID.Texture](),
	"XRInterfaceExtension.add_blit.render_target":                  reflect.TypeFor[RID.Framebuffer](),
	"XRInterfaceExtension.get_render_target_texture.render_target": reflect.TypeFor[RID.Framebuffer](),
	"XRInterfaceExtension.get_render_target_texture.":              reflect.TypeFor[RID.Texture](),
	"XRVRS.make_vrs_texture.":                                      reflect.TypeFor[RID.Texture](),
}
