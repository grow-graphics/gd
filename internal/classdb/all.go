//go:build !generate

// Code generated by the generate package DO NOT EDIT
package gd

import "unsafe"
import "reflect"
import "grow.graphics/gd/internal/mmm"
import gd "grow.graphics/gd/internal"


type AESContextMode int64
type AESContext struct {_ [0]*AESContext; ptr gd.Pointer}

//go:nosplit
func (self AESContext) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AESContext) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AESContext) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AESContext) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AESContext) AsAESContext() [1]AESContext { return [1]AESContext{self} }


//go:nosplit
func (self AESContext) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AESContext) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AStar2D struct {_ [0]*AStar2D; ptr gd.Pointer}

//go:nosplit
func (self AStar2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AStar2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AStar2D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AStar2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AStar2D) AsAStar2D() [1]AStar2D { return [1]AStar2D{self} }


//go:nosplit
func (self AStar2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Called when estimating the cost between a point and the path's ending point.
Note that this function is hidden in the default [AStar2D] class.
*/
func (AStar2D) _estimate_cost(impl func(ptr unsafe.Pointer, from_id gd.Int, to_id gd.Int) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var from_id = gd.UnsafeGet[gd.Int](p_args,0)
		var to_id = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, from_id, to_id)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when computing the cost between two connected points.
Note that this function is hidden in the default [AStar2D] class.
*/
func (AStar2D) _compute_cost(impl func(ptr unsafe.Pointer, from_id gd.Int, to_id gd.Int) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var from_id = gd.UnsafeGet[gd.Int](p_args,0)
		var to_id = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, from_id, to_id)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self AStar2D) Virtual(name string) reflect.Value {
	switch name {
	case "_estimate_cost": return reflect.ValueOf(self._estimate_cost);
	case "_compute_cost": return reflect.ValueOf(self._compute_cost);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AStar3D struct {_ [0]*AStar3D; ptr gd.Pointer}

//go:nosplit
func (self AStar3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AStar3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AStar3D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AStar3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AStar3D) AsAStar3D() [1]AStar3D { return [1]AStar3D{self} }


//go:nosplit
func (self AStar3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Called when estimating the cost between a point and the path's ending point.
Note that this function is hidden in the default [AStar3D] class.
*/
func (AStar3D) _estimate_cost(impl func(ptr unsafe.Pointer, from_id gd.Int, to_id gd.Int) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var from_id = gd.UnsafeGet[gd.Int](p_args,0)
		var to_id = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, from_id, to_id)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when computing the cost between two connected points.
Note that this function is hidden in the default [AStar3D] class.
*/
func (AStar3D) _compute_cost(impl func(ptr unsafe.Pointer, from_id gd.Int, to_id gd.Int) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var from_id = gd.UnsafeGet[gd.Int](p_args,0)
		var to_id = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, from_id, to_id)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self AStar3D) Virtual(name string) reflect.Value {
	switch name {
	case "_estimate_cost": return reflect.ValueOf(self._estimate_cost);
	case "_compute_cost": return reflect.ValueOf(self._compute_cost);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AStarGrid2DHeuristic int64

type AStarGrid2DDiagonalMode int64

type AStarGrid2DCellShape int64
type AStarGrid2D struct {_ [0]*AStarGrid2D; ptr gd.Pointer}

//go:nosplit
func (self AStarGrid2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AStarGrid2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AStarGrid2D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AStarGrid2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AStarGrid2D) AsAStarGrid2D() [1]AStarGrid2D { return [1]AStarGrid2D{self} }


//go:nosplit
func (self AStarGrid2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Called when estimating the cost between a point and the path's ending point.
Note that this function is hidden in the default [AStarGrid2D] class.
*/
func (AStarGrid2D) _estimate_cost(impl func(ptr unsafe.Pointer, from_id gd.Vector2i, to_id gd.Vector2i) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var from_id = gd.UnsafeGet[gd.Vector2i](p_args,0)
		var to_id = gd.UnsafeGet[gd.Vector2i](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, from_id, to_id)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when computing the cost between two connected points.
Note that this function is hidden in the default [AStarGrid2D] class.
*/
func (AStarGrid2D) _compute_cost(impl func(ptr unsafe.Pointer, from_id gd.Vector2i, to_id gd.Vector2i) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var from_id = gd.UnsafeGet[gd.Vector2i](p_args,0)
		var to_id = gd.UnsafeGet[gd.Vector2i](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, from_id, to_id)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self AStarGrid2D) Virtual(name string) reflect.Value {
	switch name {
	case "_estimate_cost": return reflect.ValueOf(self._estimate_cost);
	case "_compute_cost": return reflect.ValueOf(self._compute_cost);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AcceptDialog struct {_ [0]*AcceptDialog; ptr gd.Pointer}

//go:nosplit
func (self AcceptDialog) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AcceptDialog) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AcceptDialog) Super() [1]Window { return *(*[1]Window)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AcceptDialog) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AcceptDialog) AsAcceptDialog() [1]AcceptDialog { return [1]AcceptDialog{self} }


//go:nosplit
func (self AcceptDialog) AsWindow() [1]Window { return *(*[1]Window)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AcceptDialog) AsViewport() [1]Viewport { return *(*[1]Viewport)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AcceptDialog) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self AcceptDialog) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimatableBody2D struct {_ [0]*AnimatableBody2D; ptr gd.Pointer}

//go:nosplit
func (self AnimatableBody2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimatableBody2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimatableBody2D) Super() [1]StaticBody2D { return *(*[1]StaticBody2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatableBody2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatableBody2D) AsAnimatableBody2D() [1]AnimatableBody2D { return [1]AnimatableBody2D{self} }


//go:nosplit
func (self AnimatableBody2D) AsStaticBody2D() [1]StaticBody2D { return *(*[1]StaticBody2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatableBody2D) AsPhysicsBody2D() [1]PhysicsBody2D { return *(*[1]PhysicsBody2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatableBody2D) AsCollisionObject2D() [1]CollisionObject2D { return *(*[1]CollisionObject2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatableBody2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatableBody2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatableBody2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self AnimatableBody2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimatableBody3D struct {_ [0]*AnimatableBody3D; ptr gd.Pointer}

//go:nosplit
func (self AnimatableBody3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimatableBody3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimatableBody3D) Super() [1]StaticBody3D { return *(*[1]StaticBody3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatableBody3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatableBody3D) AsAnimatableBody3D() [1]AnimatableBody3D { return [1]AnimatableBody3D{self} }


//go:nosplit
func (self AnimatableBody3D) AsStaticBody3D() [1]StaticBody3D { return *(*[1]StaticBody3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatableBody3D) AsPhysicsBody3D() [1]PhysicsBody3D { return *(*[1]PhysicsBody3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatableBody3D) AsCollisionObject3D() [1]CollisionObject3D { return *(*[1]CollisionObject3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatableBody3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatableBody3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self AnimatableBody3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimatedSprite2D struct {_ [0]*AnimatedSprite2D; ptr gd.Pointer}

//go:nosplit
func (self AnimatedSprite2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimatedSprite2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimatedSprite2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedSprite2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedSprite2D) AsAnimatedSprite2D() [1]AnimatedSprite2D { return [1]AnimatedSprite2D{self} }


//go:nosplit
func (self AnimatedSprite2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedSprite2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedSprite2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self AnimatedSprite2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimatedSprite3D struct {_ [0]*AnimatedSprite3D; ptr gd.Pointer}

//go:nosplit
func (self AnimatedSprite3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimatedSprite3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimatedSprite3D) Super() [1]SpriteBase3D { return *(*[1]SpriteBase3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedSprite3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedSprite3D) AsAnimatedSprite3D() [1]AnimatedSprite3D { return [1]AnimatedSprite3D{self} }


//go:nosplit
func (self AnimatedSprite3D) AsSpriteBase3D() [1]SpriteBase3D { return *(*[1]SpriteBase3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedSprite3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedSprite3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedSprite3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedSprite3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self AnimatedSprite3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimatedTexture struct {_ [0]*AnimatedTexture; ptr gd.Pointer}

//go:nosplit
func (self AnimatedTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimatedTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimatedTexture) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedTexture) AsAnimatedTexture() [1]AnimatedTexture { return [1]AnimatedTexture{self} }


//go:nosplit
func (self AnimatedTexture) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedTexture) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedTexture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimatedTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimatedTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AnimationTrackType int64

type AnimationInterpolationType int64

type AnimationUpdateMode int64

type AnimationLoopMode int64

type AnimationLoopedFlag int64

type AnimationFindMode int64
type Animation struct {_ [0]*Animation; ptr gd.Pointer}

//go:nosplit
func (self Animation) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Animation) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Animation) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Animation) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Animation) AsAnimation() [1]Animation { return [1]Animation{self} }


//go:nosplit
func (self Animation) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Animation) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Animation) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimationLibrary struct {_ [0]*AnimationLibrary; ptr gd.Pointer}

//go:nosplit
func (self AnimationLibrary) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationLibrary) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationLibrary) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationLibrary) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationLibrary) AsAnimationLibrary() [1]AnimationLibrary { return [1]AnimationLibrary{self} }


//go:nosplit
func (self AnimationLibrary) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationLibrary) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationLibrary) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AnimationMixerAnimationCallbackModeProcess int64

type AnimationMixerAnimationCallbackModeMethod int64

type AnimationMixerAnimationCallbackModeDiscrete int64
type AnimationMixer struct {_ [0]*AnimationMixer; ptr gd.Pointer}

//go:nosplit
func (self AnimationMixer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationMixer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationMixer) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationMixer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationMixer) AsAnimationMixer() [1]AnimationMixer { return [1]AnimationMixer{self} }


//go:nosplit
func (self AnimationMixer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
A virtual function for processing after getting a key during playback.
*/
func (AnimationMixer) _post_process_key_value(impl func(ptr unsafe.Pointer, animation Animation, track gd.Int, value gd.Variant, object_id gd.Int, object_sub_idx gd.Int) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var animation Animation
		animation.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var track = gd.UnsafeGet[gd.Int](p_args,1)
		var value = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,2))
		var object_id = gd.UnsafeGet[gd.Int](p_args,3)
		var object_sub_idx = gd.UnsafeGet[gd.Int](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, animation, track, value, object_id, object_sub_idx)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (self AnimationMixer) Virtual(name string) reflect.Value {
	switch name {
	case "_post_process_key_value": return reflect.ValueOf(self._post_process_key_value);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AnimationNodeFilterAction int64
type AnimationNode struct {_ [0]*AnimationNode; ptr gd.Pointer}

//go:nosplit
func (self AnimationNode) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNode) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNode) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNode) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNode) AsAnimationNode() [1]AnimationNode { return [1]AnimationNode{self} }


//go:nosplit
func (self AnimationNode) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNode) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
When inheriting from [AnimationRootNode], implement this virtual method to return all child animation nodes in order as a [code]name: node[/code] dictionary.
*/
func (AnimationNode) _get_child_nodes(impl func(ptr unsafe.Pointer) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
When inheriting from [AnimationRootNode], implement this virtual method to return a list of the properties on this animation node. Parameters are custom local memory used for your animation nodes, given a resource can be reused in multiple trees. Format is similar to [method Object.get_property_list].
*/
func (AnimationNode) _get_parameter_list(impl func(ptr unsafe.Pointer) gd.Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
When inheriting from [AnimationRootNode], implement this virtual method to return a child animation node by its [param name].
*/
func (AnimationNode) _get_child_by_name(impl func(ptr unsafe.Pointer, name gd.StringName) AnimationNode, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var name = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, name)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
When inheriting from [AnimationRootNode], implement this virtual method to return the default value of a [param parameter]. Parameters are custom local memory used for your animation nodes, given a resource can be reused in multiple trees.
*/
func (AnimationNode) _get_parameter_default_value(impl func(ptr unsafe.Pointer, parameter gd.StringName) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var parameter = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, parameter)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
When inheriting from [AnimationRootNode], implement this virtual method to return whether the [param parameter] is read-only. Parameters are custom local memory used for your animation nodes, given a resource can be reused in multiple trees.
*/
func (AnimationNode) _is_parameter_read_only(impl func(ptr unsafe.Pointer, parameter gd.StringName) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var parameter = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, parameter)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
When inheriting from [AnimationRootNode], implement this virtual method to run some code when this animation node is processed. The [param time] parameter is a relative delta, unless [param seek] is [code]true[/code], in which case it is absolute.
Here, call the [method blend_input], [method blend_node] or [method blend_animation] functions. You can also use [method get_parameter] and [method set_parameter] to modify local memory.
This function should return the delta.
*/
func (AnimationNode) _process(impl func(ptr unsafe.Pointer, time gd.Float, seek bool, is_external_seeking bool, test_only bool) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var time = gd.UnsafeGet[gd.Float](p_args,0)
		var seek = gd.UnsafeGet[bool](p_args,1)
		var is_external_seeking = gd.UnsafeGet[bool](p_args,2)
		var test_only = gd.UnsafeGet[bool](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, time, seek, is_external_seeking, test_only)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
When inheriting from [AnimationRootNode], implement this virtual method to override the text caption for this animation node.
*/
func (AnimationNode) _get_caption(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
When inheriting from [AnimationRootNode], implement this virtual method to return whether the blend tree editor should display filter editing on this animation node.
*/
func (AnimationNode) _has_filter(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self AnimationNode) Virtual(name string) reflect.Value {
	switch name {
	case "_get_child_nodes": return reflect.ValueOf(self._get_child_nodes);
	case "_get_parameter_list": return reflect.ValueOf(self._get_parameter_list);
	case "_get_child_by_name": return reflect.ValueOf(self._get_child_by_name);
	case "_get_parameter_default_value": return reflect.ValueOf(self._get_parameter_default_value);
	case "_is_parameter_read_only": return reflect.ValueOf(self._is_parameter_read_only);
	case "_process": return reflect.ValueOf(self._process);
	case "_get_caption": return reflect.ValueOf(self._get_caption);
	case "_has_filter": return reflect.ValueOf(self._has_filter);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimationNodeAdd2 struct {_ [0]*AnimationNodeAdd2; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeAdd2) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeAdd2) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeAdd2) Super() [1]AnimationNodeSync { return *(*[1]AnimationNodeSync)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAdd2) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAdd2) AsAnimationNodeAdd2() [1]AnimationNodeAdd2 { return [1]AnimationNodeAdd2{self} }


//go:nosplit
func (self AnimationNodeAdd2) AsAnimationNodeSync() [1]AnimationNodeSync { return *(*[1]AnimationNodeSync)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAdd2) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAdd2) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAdd2) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeAdd2) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimationNodeAdd3 struct {_ [0]*AnimationNodeAdd3; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeAdd3) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeAdd3) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeAdd3) Super() [1]AnimationNodeSync { return *(*[1]AnimationNodeSync)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAdd3) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAdd3) AsAnimationNodeAdd3() [1]AnimationNodeAdd3 { return [1]AnimationNodeAdd3{self} }


//go:nosplit
func (self AnimationNodeAdd3) AsAnimationNodeSync() [1]AnimationNodeSync { return *(*[1]AnimationNodeSync)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAdd3) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAdd3) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAdd3) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeAdd3) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AnimationNodeAnimationPlayMode int64
type AnimationNodeAnimation struct {_ [0]*AnimationNodeAnimation; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeAnimation) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeAnimation) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeAnimation) Super() [1]AnimationRootNode { return *(*[1]AnimationRootNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAnimation) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAnimation) AsAnimationNodeAnimation() [1]AnimationNodeAnimation { return [1]AnimationNodeAnimation{self} }


//go:nosplit
func (self AnimationNodeAnimation) AsAnimationRootNode() [1]AnimationRootNode { return *(*[1]AnimationRootNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAnimation) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAnimation) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeAnimation) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeAnimation) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimationNodeBlend2 struct {_ [0]*AnimationNodeBlend2; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeBlend2) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeBlend2) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeBlend2) Super() [1]AnimationNodeSync { return *(*[1]AnimationNodeSync)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlend2) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlend2) AsAnimationNodeBlend2() [1]AnimationNodeBlend2 { return [1]AnimationNodeBlend2{self} }


//go:nosplit
func (self AnimationNodeBlend2) AsAnimationNodeSync() [1]AnimationNodeSync { return *(*[1]AnimationNodeSync)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlend2) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlend2) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlend2) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeBlend2) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimationNodeBlend3 struct {_ [0]*AnimationNodeBlend3; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeBlend3) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeBlend3) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeBlend3) Super() [1]AnimationNodeSync { return *(*[1]AnimationNodeSync)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlend3) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlend3) AsAnimationNodeBlend3() [1]AnimationNodeBlend3 { return [1]AnimationNodeBlend3{self} }


//go:nosplit
func (self AnimationNodeBlend3) AsAnimationNodeSync() [1]AnimationNodeSync { return *(*[1]AnimationNodeSync)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlend3) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlend3) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlend3) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeBlend3) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AnimationNodeBlendSpace1DBlendMode int64
type AnimationNodeBlendSpace1D struct {_ [0]*AnimationNodeBlendSpace1D; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeBlendSpace1D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeBlendSpace1D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeBlendSpace1D) Super() [1]AnimationRootNode { return *(*[1]AnimationRootNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendSpace1D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendSpace1D) AsAnimationNodeBlendSpace1D() [1]AnimationNodeBlendSpace1D { return [1]AnimationNodeBlendSpace1D{self} }


//go:nosplit
func (self AnimationNodeBlendSpace1D) AsAnimationRootNode() [1]AnimationRootNode { return *(*[1]AnimationRootNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendSpace1D) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendSpace1D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendSpace1D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeBlendSpace1D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AnimationNodeBlendSpace2DBlendMode int64
type AnimationNodeBlendSpace2D struct {_ [0]*AnimationNodeBlendSpace2D; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeBlendSpace2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeBlendSpace2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeBlendSpace2D) Super() [1]AnimationRootNode { return *(*[1]AnimationRootNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendSpace2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendSpace2D) AsAnimationNodeBlendSpace2D() [1]AnimationNodeBlendSpace2D { return [1]AnimationNodeBlendSpace2D{self} }


//go:nosplit
func (self AnimationNodeBlendSpace2D) AsAnimationRootNode() [1]AnimationRootNode { return *(*[1]AnimationRootNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendSpace2D) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendSpace2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendSpace2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeBlendSpace2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimationNodeBlendTree struct {_ [0]*AnimationNodeBlendTree; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeBlendTree) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeBlendTree) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeBlendTree) Super() [1]AnimationRootNode { return *(*[1]AnimationRootNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendTree) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendTree) AsAnimationNodeBlendTree() [1]AnimationNodeBlendTree { return [1]AnimationNodeBlendTree{self} }


//go:nosplit
func (self AnimationNodeBlendTree) AsAnimationRootNode() [1]AnimationRootNode { return *(*[1]AnimationRootNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendTree) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendTree) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeBlendTree) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeBlendTree) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AnimationNodeOneShotOneShotRequest int64

type AnimationNodeOneShotMixMode int64
type AnimationNodeOneShot struct {_ [0]*AnimationNodeOneShot; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeOneShot) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeOneShot) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeOneShot) Super() [1]AnimationNodeSync { return *(*[1]AnimationNodeSync)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeOneShot) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeOneShot) AsAnimationNodeOneShot() [1]AnimationNodeOneShot { return [1]AnimationNodeOneShot{self} }


//go:nosplit
func (self AnimationNodeOneShot) AsAnimationNodeSync() [1]AnimationNodeSync { return *(*[1]AnimationNodeSync)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeOneShot) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeOneShot) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeOneShot) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeOneShot) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimationNodeOutput struct {_ [0]*AnimationNodeOutput; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeOutput) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeOutput) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeOutput) Super() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeOutput) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeOutput) AsAnimationNodeOutput() [1]AnimationNodeOutput { return [1]AnimationNodeOutput{self} }


//go:nosplit
func (self AnimationNodeOutput) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeOutput) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeOutput) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeOutput) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AnimationNodeStateMachineStateMachineType int64
type AnimationNodeStateMachine struct {_ [0]*AnimationNodeStateMachine; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeStateMachine) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeStateMachine) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeStateMachine) Super() [1]AnimationRootNode { return *(*[1]AnimationRootNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeStateMachine) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeStateMachine) AsAnimationNodeStateMachine() [1]AnimationNodeStateMachine { return [1]AnimationNodeStateMachine{self} }


//go:nosplit
func (self AnimationNodeStateMachine) AsAnimationRootNode() [1]AnimationRootNode { return *(*[1]AnimationRootNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeStateMachine) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeStateMachine) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeStateMachine) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeStateMachine) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimationNodeStateMachinePlayback struct {_ [0]*AnimationNodeStateMachinePlayback; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeStateMachinePlayback) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeStateMachinePlayback) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeStateMachinePlayback) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeStateMachinePlayback) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeStateMachinePlayback) AsAnimationNodeStateMachinePlayback() [1]AnimationNodeStateMachinePlayback { return [1]AnimationNodeStateMachinePlayback{self} }


//go:nosplit
func (self AnimationNodeStateMachinePlayback) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeStateMachinePlayback) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeStateMachinePlayback) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AnimationNodeStateMachineTransitionSwitchMode int64

type AnimationNodeStateMachineTransitionAdvanceMode int64
type AnimationNodeStateMachineTransition struct {_ [0]*AnimationNodeStateMachineTransition; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeStateMachineTransition) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeStateMachineTransition) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeStateMachineTransition) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeStateMachineTransition) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeStateMachineTransition) AsAnimationNodeStateMachineTransition() [1]AnimationNodeStateMachineTransition { return [1]AnimationNodeStateMachineTransition{self} }


//go:nosplit
func (self AnimationNodeStateMachineTransition) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeStateMachineTransition) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeStateMachineTransition) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimationNodeSub2 struct {_ [0]*AnimationNodeSub2; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeSub2) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeSub2) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeSub2) Super() [1]AnimationNodeSync { return *(*[1]AnimationNodeSync)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeSub2) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeSub2) AsAnimationNodeSub2() [1]AnimationNodeSub2 { return [1]AnimationNodeSub2{self} }


//go:nosplit
func (self AnimationNodeSub2) AsAnimationNodeSync() [1]AnimationNodeSync { return *(*[1]AnimationNodeSync)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeSub2) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeSub2) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeSub2) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeSub2) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimationNodeSync struct {_ [0]*AnimationNodeSync; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeSync) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeSync) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeSync) Super() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeSync) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeSync) AsAnimationNodeSync() [1]AnimationNodeSync { return [1]AnimationNodeSync{self} }


//go:nosplit
func (self AnimationNodeSync) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeSync) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeSync) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeSync) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimationNodeTimeScale struct {_ [0]*AnimationNodeTimeScale; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeTimeScale) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeTimeScale) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeTimeScale) Super() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeTimeScale) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeTimeScale) AsAnimationNodeTimeScale() [1]AnimationNodeTimeScale { return [1]AnimationNodeTimeScale{self} }


//go:nosplit
func (self AnimationNodeTimeScale) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeTimeScale) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeTimeScale) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeTimeScale) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimationNodeTimeSeek struct {_ [0]*AnimationNodeTimeSeek; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeTimeSeek) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeTimeSeek) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeTimeSeek) Super() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeTimeSeek) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeTimeSeek) AsAnimationNodeTimeSeek() [1]AnimationNodeTimeSeek { return [1]AnimationNodeTimeSeek{self} }


//go:nosplit
func (self AnimationNodeTimeSeek) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeTimeSeek) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeTimeSeek) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeTimeSeek) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimationNodeTransition struct {_ [0]*AnimationNodeTransition; ptr gd.Pointer}

//go:nosplit
func (self AnimationNodeTransition) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationNodeTransition) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationNodeTransition) Super() [1]AnimationNodeSync { return *(*[1]AnimationNodeSync)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeTransition) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeTransition) AsAnimationNodeTransition() [1]AnimationNodeTransition { return [1]AnimationNodeTransition{self} }


//go:nosplit
func (self AnimationNodeTransition) AsAnimationNodeSync() [1]AnimationNodeSync { return *(*[1]AnimationNodeSync)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeTransition) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeTransition) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationNodeTransition) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationNodeTransition) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AnimationPlayerAnimationProcessCallback int64

type AnimationPlayerAnimationMethodCallMode int64
type AnimationPlayer struct {_ [0]*AnimationPlayer; ptr gd.Pointer}

//go:nosplit
func (self AnimationPlayer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationPlayer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationPlayer) Super() [1]AnimationMixer { return *(*[1]AnimationMixer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationPlayer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationPlayer) AsAnimationPlayer() [1]AnimationPlayer { return [1]AnimationPlayer{self} }


//go:nosplit
func (self AnimationPlayer) AsAnimationMixer() [1]AnimationMixer { return *(*[1]AnimationMixer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationPlayer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self AnimationPlayer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AnimationRootNode struct {_ [0]*AnimationRootNode; ptr gd.Pointer}

//go:nosplit
func (self AnimationRootNode) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationRootNode) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationRootNode) Super() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationRootNode) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationRootNode) AsAnimationRootNode() [1]AnimationRootNode { return [1]AnimationRootNode{self} }


//go:nosplit
func (self AnimationRootNode) AsAnimationNode() [1]AnimationNode { return *(*[1]AnimationNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationRootNode) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationRootNode) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AnimationRootNode) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AnimationTreeAnimationProcessCallback int64
type AnimationTree struct {_ [0]*AnimationTree; ptr gd.Pointer}

//go:nosplit
func (self AnimationTree) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AnimationTree) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AnimationTree) Super() [1]AnimationMixer { return *(*[1]AnimationMixer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationTree) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationTree) AsAnimationTree() [1]AnimationTree { return [1]AnimationTree{self} }


//go:nosplit
func (self AnimationTree) AsAnimationMixer() [1]AnimationMixer { return *(*[1]AnimationMixer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AnimationTree) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self AnimationTree) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type Area2DSpaceOverride int64
type Area2D struct {_ [0]*Area2D; ptr gd.Pointer}

//go:nosplit
func (self Area2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Area2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Area2D) Super() [1]CollisionObject2D { return *(*[1]CollisionObject2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Area2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Area2D) AsArea2D() [1]Area2D { return [1]Area2D{self} }


//go:nosplit
func (self Area2D) AsCollisionObject2D() [1]CollisionObject2D { return *(*[1]CollisionObject2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Area2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Area2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Area2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Area2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type Area3DSpaceOverride int64
type Area3D struct {_ [0]*Area3D; ptr gd.Pointer}

//go:nosplit
func (self Area3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Area3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Area3D) Super() [1]CollisionObject3D { return *(*[1]CollisionObject3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Area3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Area3D) AsArea3D() [1]Area3D { return [1]Area3D{self} }


//go:nosplit
func (self Area3D) AsCollisionObject3D() [1]CollisionObject3D { return *(*[1]CollisionObject3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Area3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Area3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Area3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ArrayMesh struct {_ [0]*ArrayMesh; ptr gd.Pointer}

//go:nosplit
func (self ArrayMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ArrayMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ArrayMesh) Super() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ArrayMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ArrayMesh) AsArrayMesh() [1]ArrayMesh { return [1]ArrayMesh{self} }


//go:nosplit
func (self ArrayMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ArrayMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ArrayMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ArrayMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ArrayOccluder3D struct {_ [0]*ArrayOccluder3D; ptr gd.Pointer}

//go:nosplit
func (self ArrayOccluder3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ArrayOccluder3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ArrayOccluder3D) Super() [1]Occluder3D { return *(*[1]Occluder3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ArrayOccluder3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ArrayOccluder3D) AsArrayOccluder3D() [1]ArrayOccluder3D { return [1]ArrayOccluder3D{self} }


//go:nosplit
func (self ArrayOccluder3D) AsOccluder3D() [1]Occluder3D { return *(*[1]Occluder3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ArrayOccluder3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ArrayOccluder3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ArrayOccluder3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AspectRatioContainerStretchMode int64

type AspectRatioContainerAlignmentMode int64
type AspectRatioContainer struct {_ [0]*AspectRatioContainer; ptr gd.Pointer}

//go:nosplit
func (self AspectRatioContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AspectRatioContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AspectRatioContainer) Super() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AspectRatioContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AspectRatioContainer) AsAspectRatioContainer() [1]AspectRatioContainer { return [1]AspectRatioContainer{self} }


//go:nosplit
func (self AspectRatioContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AspectRatioContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AspectRatioContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AspectRatioContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self AspectRatioContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AtlasTexture struct {_ [0]*AtlasTexture; ptr gd.Pointer}

//go:nosplit
func (self AtlasTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AtlasTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AtlasTexture) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AtlasTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AtlasTexture) AsAtlasTexture() [1]AtlasTexture { return [1]AtlasTexture{self} }


//go:nosplit
func (self AtlasTexture) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AtlasTexture) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AtlasTexture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AtlasTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AtlasTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioBusLayout struct {_ [0]*AudioBusLayout; ptr gd.Pointer}

//go:nosplit
func (self AudioBusLayout) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioBusLayout) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioBusLayout) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioBusLayout) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioBusLayout) AsAudioBusLayout() [1]AudioBusLayout { return [1]AudioBusLayout{self} }


//go:nosplit
func (self AudioBusLayout) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioBusLayout) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioBusLayout) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffect struct {_ [0]*AudioEffect; ptr gd.Pointer}

//go:nosplit
func (self AudioEffect) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffect) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffect) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffect) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffect) AsAudioEffect() [1]AudioEffect { return [1]AudioEffect{self} }


//go:nosplit
func (self AudioEffect) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffect) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Override this method to customize the [AudioEffectInstance] created when this effect is applied on a bus in the editor's Audio panel, or through [method AudioServer.add_bus_effect].
[codeblock]
extends AudioEffect

@export var strength = 4.0

func _instantiate():
    var effect = CustomAudioEffectInstance.new()
    effect.base = self

    return effect
[/codeblock]
[b]Note:[/b] It is recommended to keep a reference to the original [AudioEffect] in the new instance. Depending on the implementation this allows the effect instance to listen for changes at run-time and be modified accordingly.
*/
func (AudioEffect) _instantiate(impl func(ptr unsafe.Pointer) AudioEffectInstance, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (self AudioEffect) Virtual(name string) reflect.Value {
	switch name {
	case "_instantiate": return reflect.ValueOf(self._instantiate);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectAmplify struct {_ [0]*AudioEffectAmplify; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectAmplify) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectAmplify) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectAmplify) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectAmplify) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectAmplify) AsAudioEffectAmplify() [1]AudioEffectAmplify { return [1]AudioEffectAmplify{self} }


//go:nosplit
func (self AudioEffectAmplify) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectAmplify) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectAmplify) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectAmplify) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectBandLimitFilter struct {_ [0]*AudioEffectBandLimitFilter; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectBandLimitFilter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectBandLimitFilter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectBandLimitFilter) Super() [1]AudioEffectFilter { return *(*[1]AudioEffectFilter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectBandLimitFilter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectBandLimitFilter) AsAudioEffectBandLimitFilter() [1]AudioEffectBandLimitFilter { return [1]AudioEffectBandLimitFilter{self} }


//go:nosplit
func (self AudioEffectBandLimitFilter) AsAudioEffectFilter() [1]AudioEffectFilter { return *(*[1]AudioEffectFilter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectBandLimitFilter) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectBandLimitFilter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectBandLimitFilter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectBandLimitFilter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectBandPassFilter struct {_ [0]*AudioEffectBandPassFilter; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectBandPassFilter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectBandPassFilter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectBandPassFilter) Super() [1]AudioEffectFilter { return *(*[1]AudioEffectFilter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectBandPassFilter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectBandPassFilter) AsAudioEffectBandPassFilter() [1]AudioEffectBandPassFilter { return [1]AudioEffectBandPassFilter{self} }


//go:nosplit
func (self AudioEffectBandPassFilter) AsAudioEffectFilter() [1]AudioEffectFilter { return *(*[1]AudioEffectFilter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectBandPassFilter) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectBandPassFilter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectBandPassFilter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectBandPassFilter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectCapture struct {_ [0]*AudioEffectCapture; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectCapture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectCapture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectCapture) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectCapture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectCapture) AsAudioEffectCapture() [1]AudioEffectCapture { return [1]AudioEffectCapture{self} }


//go:nosplit
func (self AudioEffectCapture) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectCapture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectCapture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectCapture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectChorus struct {_ [0]*AudioEffectChorus; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectChorus) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectChorus) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectChorus) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectChorus) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectChorus) AsAudioEffectChorus() [1]AudioEffectChorus { return [1]AudioEffectChorus{self} }


//go:nosplit
func (self AudioEffectChorus) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectChorus) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectChorus) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectChorus) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectCompressor struct {_ [0]*AudioEffectCompressor; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectCompressor) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectCompressor) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectCompressor) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectCompressor) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectCompressor) AsAudioEffectCompressor() [1]AudioEffectCompressor { return [1]AudioEffectCompressor{self} }


//go:nosplit
func (self AudioEffectCompressor) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectCompressor) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectCompressor) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectCompressor) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectDelay struct {_ [0]*AudioEffectDelay; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectDelay) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectDelay) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectDelay) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectDelay) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectDelay) AsAudioEffectDelay() [1]AudioEffectDelay { return [1]AudioEffectDelay{self} }


//go:nosplit
func (self AudioEffectDelay) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectDelay) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectDelay) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectDelay) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AudioEffectDistortionMode int64
type AudioEffectDistortion struct {_ [0]*AudioEffectDistortion; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectDistortion) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectDistortion) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectDistortion) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectDistortion) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectDistortion) AsAudioEffectDistortion() [1]AudioEffectDistortion { return [1]AudioEffectDistortion{self} }


//go:nosplit
func (self AudioEffectDistortion) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectDistortion) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectDistortion) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectDistortion) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectEQ struct {_ [0]*AudioEffectEQ; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectEQ) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectEQ) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectEQ) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ) AsAudioEffectEQ() [1]AudioEffectEQ { return [1]AudioEffectEQ{self} }


//go:nosplit
func (self AudioEffectEQ) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectEQ) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectEQ10 struct {_ [0]*AudioEffectEQ10; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectEQ10) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectEQ10) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectEQ10) Super() [1]AudioEffectEQ { return *(*[1]AudioEffectEQ)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ10) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ10) AsAudioEffectEQ10() [1]AudioEffectEQ10 { return [1]AudioEffectEQ10{self} }


//go:nosplit
func (self AudioEffectEQ10) AsAudioEffectEQ() [1]AudioEffectEQ { return *(*[1]AudioEffectEQ)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ10) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ10) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ10) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectEQ10) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectEQ21 struct {_ [0]*AudioEffectEQ21; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectEQ21) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectEQ21) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectEQ21) Super() [1]AudioEffectEQ { return *(*[1]AudioEffectEQ)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ21) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ21) AsAudioEffectEQ21() [1]AudioEffectEQ21 { return [1]AudioEffectEQ21{self} }


//go:nosplit
func (self AudioEffectEQ21) AsAudioEffectEQ() [1]AudioEffectEQ { return *(*[1]AudioEffectEQ)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ21) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ21) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ21) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectEQ21) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectEQ6 struct {_ [0]*AudioEffectEQ6; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectEQ6) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectEQ6) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectEQ6) Super() [1]AudioEffectEQ { return *(*[1]AudioEffectEQ)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ6) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ6) AsAudioEffectEQ6() [1]AudioEffectEQ6 { return [1]AudioEffectEQ6{self} }


//go:nosplit
func (self AudioEffectEQ6) AsAudioEffectEQ() [1]AudioEffectEQ { return *(*[1]AudioEffectEQ)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ6) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ6) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectEQ6) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectEQ6) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AudioEffectFilterFilterDB int64
type AudioEffectFilter struct {_ [0]*AudioEffectFilter; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectFilter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectFilter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectFilter) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectFilter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectFilter) AsAudioEffectFilter() [1]AudioEffectFilter { return [1]AudioEffectFilter{self} }


//go:nosplit
func (self AudioEffectFilter) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectFilter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectFilter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectFilter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectHardLimiter struct {_ [0]*AudioEffectHardLimiter; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectHardLimiter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectHardLimiter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectHardLimiter) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectHardLimiter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectHardLimiter) AsAudioEffectHardLimiter() [1]AudioEffectHardLimiter { return [1]AudioEffectHardLimiter{self} }


//go:nosplit
func (self AudioEffectHardLimiter) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectHardLimiter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectHardLimiter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectHardLimiter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectHighPassFilter struct {_ [0]*AudioEffectHighPassFilter; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectHighPassFilter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectHighPassFilter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectHighPassFilter) Super() [1]AudioEffectFilter { return *(*[1]AudioEffectFilter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectHighPassFilter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectHighPassFilter) AsAudioEffectHighPassFilter() [1]AudioEffectHighPassFilter { return [1]AudioEffectHighPassFilter{self} }


//go:nosplit
func (self AudioEffectHighPassFilter) AsAudioEffectFilter() [1]AudioEffectFilter { return *(*[1]AudioEffectFilter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectHighPassFilter) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectHighPassFilter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectHighPassFilter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectHighPassFilter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectHighShelfFilter struct {_ [0]*AudioEffectHighShelfFilter; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectHighShelfFilter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectHighShelfFilter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectHighShelfFilter) Super() [1]AudioEffectFilter { return *(*[1]AudioEffectFilter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectHighShelfFilter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectHighShelfFilter) AsAudioEffectHighShelfFilter() [1]AudioEffectHighShelfFilter { return [1]AudioEffectHighShelfFilter{self} }


//go:nosplit
func (self AudioEffectHighShelfFilter) AsAudioEffectFilter() [1]AudioEffectFilter { return *(*[1]AudioEffectFilter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectHighShelfFilter) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectHighShelfFilter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectHighShelfFilter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectHighShelfFilter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectInstance struct {_ [0]*AudioEffectInstance; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectInstance) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectInstance) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectInstance) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectInstance) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectInstance) AsAudioEffectInstance() [1]AudioEffectInstance { return [1]AudioEffectInstance{self} }


//go:nosplit
func (self AudioEffectInstance) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Called by the [AudioServer] to process this effect. When [method _process_silence] is not overridden or it returns [code]false[/code], this method is called only when the bus is active.
[b]Note:[/b] It is not useful to override this method in GDScript or C#. Only GDExtension can take advantage of it.
*/
func (AudioEffectInstance) _process(impl func(ptr unsafe.Pointer, src_buffer unsafe.Pointer, dst_buffer *AudioFrame, frame_count gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var src_buffer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		var dst_buffer = gd.UnsafeGet[*AudioFrame](p_args,1)
		var frame_count = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, src_buffer, dst_buffer, frame_count)
		ctx.End()
	}
}

/*
Override this method to customize the processing behavior of this effect instance.
Should return [code]true[/code] to force the [AudioServer] to always call [method _process], even if the bus has been muted or cannot otherwise be heard.
*/
func (AudioEffectInstance) _process_silence(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self AudioEffectInstance) Virtual(name string) reflect.Value {
	switch name {
	case "_process": return reflect.ValueOf(self._process);
	case "_process_silence": return reflect.ValueOf(self._process_silence);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectLimiter struct {_ [0]*AudioEffectLimiter; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectLimiter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectLimiter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectLimiter) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectLimiter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectLimiter) AsAudioEffectLimiter() [1]AudioEffectLimiter { return [1]AudioEffectLimiter{self} }


//go:nosplit
func (self AudioEffectLimiter) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectLimiter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectLimiter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectLimiter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectLowPassFilter struct {_ [0]*AudioEffectLowPassFilter; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectLowPassFilter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectLowPassFilter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectLowPassFilter) Super() [1]AudioEffectFilter { return *(*[1]AudioEffectFilter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectLowPassFilter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectLowPassFilter) AsAudioEffectLowPassFilter() [1]AudioEffectLowPassFilter { return [1]AudioEffectLowPassFilter{self} }


//go:nosplit
func (self AudioEffectLowPassFilter) AsAudioEffectFilter() [1]AudioEffectFilter { return *(*[1]AudioEffectFilter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectLowPassFilter) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectLowPassFilter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectLowPassFilter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectLowPassFilter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectLowShelfFilter struct {_ [0]*AudioEffectLowShelfFilter; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectLowShelfFilter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectLowShelfFilter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectLowShelfFilter) Super() [1]AudioEffectFilter { return *(*[1]AudioEffectFilter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectLowShelfFilter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectLowShelfFilter) AsAudioEffectLowShelfFilter() [1]AudioEffectLowShelfFilter { return [1]AudioEffectLowShelfFilter{self} }


//go:nosplit
func (self AudioEffectLowShelfFilter) AsAudioEffectFilter() [1]AudioEffectFilter { return *(*[1]AudioEffectFilter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectLowShelfFilter) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectLowShelfFilter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectLowShelfFilter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectLowShelfFilter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectNotchFilter struct {_ [0]*AudioEffectNotchFilter; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectNotchFilter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectNotchFilter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectNotchFilter) Super() [1]AudioEffectFilter { return *(*[1]AudioEffectFilter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectNotchFilter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectNotchFilter) AsAudioEffectNotchFilter() [1]AudioEffectNotchFilter { return [1]AudioEffectNotchFilter{self} }


//go:nosplit
func (self AudioEffectNotchFilter) AsAudioEffectFilter() [1]AudioEffectFilter { return *(*[1]AudioEffectFilter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectNotchFilter) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectNotchFilter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectNotchFilter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectNotchFilter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectPanner struct {_ [0]*AudioEffectPanner; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectPanner) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectPanner) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectPanner) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectPanner) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectPanner) AsAudioEffectPanner() [1]AudioEffectPanner { return [1]AudioEffectPanner{self} }


//go:nosplit
func (self AudioEffectPanner) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectPanner) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectPanner) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectPanner) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectPhaser struct {_ [0]*AudioEffectPhaser; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectPhaser) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectPhaser) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectPhaser) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectPhaser) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectPhaser) AsAudioEffectPhaser() [1]AudioEffectPhaser { return [1]AudioEffectPhaser{self} }


//go:nosplit
func (self AudioEffectPhaser) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectPhaser) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectPhaser) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectPhaser) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AudioEffectPitchShiftFFTSize int64
type AudioEffectPitchShift struct {_ [0]*AudioEffectPitchShift; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectPitchShift) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectPitchShift) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectPitchShift) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectPitchShift) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectPitchShift) AsAudioEffectPitchShift() [1]AudioEffectPitchShift { return [1]AudioEffectPitchShift{self} }


//go:nosplit
func (self AudioEffectPitchShift) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectPitchShift) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectPitchShift) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectPitchShift) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectRecord struct {_ [0]*AudioEffectRecord; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectRecord) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectRecord) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectRecord) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectRecord) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectRecord) AsAudioEffectRecord() [1]AudioEffectRecord { return [1]AudioEffectRecord{self} }


//go:nosplit
func (self AudioEffectRecord) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectRecord) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectRecord) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectRecord) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectReverb struct {_ [0]*AudioEffectReverb; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectReverb) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectReverb) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectReverb) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectReverb) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectReverb) AsAudioEffectReverb() [1]AudioEffectReverb { return [1]AudioEffectReverb{self} }


//go:nosplit
func (self AudioEffectReverb) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectReverb) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectReverb) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectReverb) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AudioEffectSpectrumAnalyzerFFTSize int64
type AudioEffectSpectrumAnalyzer struct {_ [0]*AudioEffectSpectrumAnalyzer; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectSpectrumAnalyzer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectSpectrumAnalyzer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectSpectrumAnalyzer) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectSpectrumAnalyzer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectSpectrumAnalyzer) AsAudioEffectSpectrumAnalyzer() [1]AudioEffectSpectrumAnalyzer { return [1]AudioEffectSpectrumAnalyzer{self} }


//go:nosplit
func (self AudioEffectSpectrumAnalyzer) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectSpectrumAnalyzer) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectSpectrumAnalyzer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectSpectrumAnalyzer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AudioEffectSpectrumAnalyzerInstanceMagnitudeMode int64
type AudioEffectSpectrumAnalyzerInstance struct {_ [0]*AudioEffectSpectrumAnalyzerInstance; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectSpectrumAnalyzerInstance) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectSpectrumAnalyzerInstance) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectSpectrumAnalyzerInstance) Super() [1]AudioEffectInstance { return *(*[1]AudioEffectInstance)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectSpectrumAnalyzerInstance) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectSpectrumAnalyzerInstance) AsAudioEffectSpectrumAnalyzerInstance() [1]AudioEffectSpectrumAnalyzerInstance { return [1]AudioEffectSpectrumAnalyzerInstance{self} }


//go:nosplit
func (self AudioEffectSpectrumAnalyzerInstance) AsAudioEffectInstance() [1]AudioEffectInstance { return *(*[1]AudioEffectInstance)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectSpectrumAnalyzerInstance) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectSpectrumAnalyzerInstance) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioEffectStereoEnhance struct {_ [0]*AudioEffectStereoEnhance; ptr gd.Pointer}

//go:nosplit
func (self AudioEffectStereoEnhance) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioEffectStereoEnhance) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioEffectStereoEnhance) Super() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectStereoEnhance) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectStereoEnhance) AsAudioEffectStereoEnhance() [1]AudioEffectStereoEnhance { return [1]AudioEffectStereoEnhance{self} }


//go:nosplit
func (self AudioEffectStereoEnhance) AsAudioEffect() [1]AudioEffect { return *(*[1]AudioEffect)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectStereoEnhance) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioEffectStereoEnhance) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioEffectStereoEnhance) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioListener2D struct {_ [0]*AudioListener2D; ptr gd.Pointer}

//go:nosplit
func (self AudioListener2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioListener2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioListener2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioListener2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioListener2D) AsAudioListener2D() [1]AudioListener2D { return [1]AudioListener2D{self} }


//go:nosplit
func (self AudioListener2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioListener2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioListener2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self AudioListener2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioListener3D struct {_ [0]*AudioListener3D; ptr gd.Pointer}

//go:nosplit
func (self AudioListener3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioListener3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioListener3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioListener3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioListener3D) AsAudioListener3D() [1]AudioListener3D { return [1]AudioListener3D{self} }


//go:nosplit
func (self AudioListener3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioListener3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self AudioListener3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioSample struct {_ [0]*AudioSample; ptr gd.Pointer}

//go:nosplit
func (self AudioSample) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioSample) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioSample) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioSample) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioSample) AsAudioSample() [1]AudioSample { return [1]AudioSample{self} }


//go:nosplit
func (self AudioSample) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioSample) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioSamplePlayback struct {_ [0]*AudioSamplePlayback; ptr gd.Pointer}

//go:nosplit
func (self AudioSamplePlayback) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioSamplePlayback) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioSamplePlayback) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioSamplePlayback) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioSamplePlayback) AsAudioSamplePlayback() [1]AudioSamplePlayback { return [1]AudioSamplePlayback{self} }


//go:nosplit
func (self AudioSamplePlayback) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioSamplePlayback) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AudioServerSpeakerMode int64

type AudioServerPlaybackType int64
type AudioServer struct {_ [0]*AudioServer; ptr gd.Pointer}

//go:nosplit
func (self AudioServer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioServer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioServer) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioServer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioServer) AsAudioServer() [1]AudioServer { return [1]AudioServer{self} }

//go:nosplit

func (self AudioServer) IsSingleton() {}

func (self AudioServer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStream struct {_ [0]*AudioStream; ptr gd.Pointer}

//go:nosplit
func (self AudioStream) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStream) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStream) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStream) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStream) AsAudioStream() [1]AudioStream { return [1]AudioStream{self} }


//go:nosplit
func (self AudioStream) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStream) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Override this method to customize the returned value of [method instantiate_playback]. Should returned a new [AudioStreamPlayback] created when the stream is played (such as by an [AudioStreamPlayer])..
*/
func (AudioStream) _instantiate_playback(impl func(ptr unsafe.Pointer) AudioStreamPlayback, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Override this method to customize the name assigned to this audio stream. Unused by the engine.
*/
func (AudioStream) _get_stream_name(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to customize the returned value of [method get_length]. Should return the length of this audio stream, in seconds.
*/
func (AudioStream) _get_length(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to customize the returned value of [method is_monophonic]. Should return [code]true[/code] if this audio stream only supports one channel.
*/
func (AudioStream) _is_monophonic(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable method. Should return the tempo of this audio stream, in beats per minute (BPM). Used by the engine to determine the position of every beat.
Ideally, the returned value should be based off the stream's sample rate ([member AudioStreamWAV.mix_rate], for example).
*/
func (AudioStream) _get_bpm(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable method. Should return the total number of beats of this audio stream. Used by the engine to determine the position of every beat.
Ideally, the returned value should be based off the stream's sample rate ([member AudioStreamWAV.mix_rate], for example).
*/
func (AudioStream) _get_beat_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Return the controllable parameters of this stream. This array contains dictionaries with a property info description format (see [method Object.get_property_list]). Additionally, the default value for this parameter must be added tho each dictionary in "default_value" field.
*/
func (AudioStream) _get_parameter_list(impl func(ptr unsafe.Pointer) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (self AudioStream) Virtual(name string) reflect.Value {
	switch name {
	case "_instantiate_playback": return reflect.ValueOf(self._instantiate_playback);
	case "_get_stream_name": return reflect.ValueOf(self._get_stream_name);
	case "_get_length": return reflect.ValueOf(self._get_length);
	case "_is_monophonic": return reflect.ValueOf(self._is_monophonic);
	case "_get_bpm": return reflect.ValueOf(self._get_bpm);
	case "_get_beat_count": return reflect.ValueOf(self._get_beat_count);
	case "_get_parameter_list": return reflect.ValueOf(self._get_parameter_list);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamGenerator struct {_ [0]*AudioStreamGenerator; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamGenerator) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamGenerator) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamGenerator) Super() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamGenerator) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamGenerator) AsAudioStreamGenerator() [1]AudioStreamGenerator { return [1]AudioStreamGenerator{self} }


//go:nosplit
func (self AudioStreamGenerator) AsAudioStream() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamGenerator) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamGenerator) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamGenerator) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamGeneratorPlayback struct {_ [0]*AudioStreamGeneratorPlayback; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamGeneratorPlayback) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamGeneratorPlayback) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamGeneratorPlayback) Super() [1]AudioStreamPlaybackResampled { return *(*[1]AudioStreamPlaybackResampled)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamGeneratorPlayback) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamGeneratorPlayback) AsAudioStreamGeneratorPlayback() [1]AudioStreamGeneratorPlayback { return [1]AudioStreamGeneratorPlayback{self} }


//go:nosplit
func (self AudioStreamGeneratorPlayback) AsAudioStreamPlaybackResampled() [1]AudioStreamPlaybackResampled { return *(*[1]AudioStreamPlaybackResampled)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamGeneratorPlayback) AsAudioStreamPlayback() [1]AudioStreamPlayback { return *(*[1]AudioStreamPlayback)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamGeneratorPlayback) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamGeneratorPlayback) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AudioStreamInteractiveTransitionFromTime int64

type AudioStreamInteractiveTransitionToTime int64

type AudioStreamInteractiveFadeMode int64

type AudioStreamInteractiveAutoAdvanceMode int64
type AudioStreamInteractive struct {_ [0]*AudioStreamInteractive; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamInteractive) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamInteractive) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamInteractive) Super() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamInteractive) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamInteractive) AsAudioStreamInteractive() [1]AudioStreamInteractive { return [1]AudioStreamInteractive{self} }


//go:nosplit
func (self AudioStreamInteractive) AsAudioStream() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamInteractive) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamInteractive) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamInteractive) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamMP3 struct {_ [0]*AudioStreamMP3; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamMP3) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamMP3) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamMP3) Super() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamMP3) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamMP3) AsAudioStreamMP3() [1]AudioStreamMP3 { return [1]AudioStreamMP3{self} }


//go:nosplit
func (self AudioStreamMP3) AsAudioStream() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamMP3) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamMP3) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamMP3) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamMicrophone struct {_ [0]*AudioStreamMicrophone; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamMicrophone) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamMicrophone) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamMicrophone) Super() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamMicrophone) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamMicrophone) AsAudioStreamMicrophone() [1]AudioStreamMicrophone { return [1]AudioStreamMicrophone{self} }


//go:nosplit
func (self AudioStreamMicrophone) AsAudioStream() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamMicrophone) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamMicrophone) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamMicrophone) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamOggVorbis struct {_ [0]*AudioStreamOggVorbis; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamOggVorbis) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamOggVorbis) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamOggVorbis) Super() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamOggVorbis) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamOggVorbis) AsAudioStreamOggVorbis() [1]AudioStreamOggVorbis { return [1]AudioStreamOggVorbis{self} }


//go:nosplit
func (self AudioStreamOggVorbis) AsAudioStream() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamOggVorbis) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamOggVorbis) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamOggVorbis) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamPlayback struct {_ [0]*AudioStreamPlayback; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamPlayback) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamPlayback) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamPlayback) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlayback) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlayback) AsAudioStreamPlayback() [1]AudioStreamPlayback { return [1]AudioStreamPlayback{self} }


//go:nosplit
func (self AudioStreamPlayback) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Override this method to customize what happens when the playback starts at the given position, such as by calling [method AudioStreamPlayer.play].
*/
func (AudioStreamPlayback) _start(impl func(ptr unsafe.Pointer, from_pos gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var from_pos = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, from_pos)
		ctx.End()
	}
}

/*
Override this method to customize what happens when the playback is stopped, such as by calling [method AudioStreamPlayer.stop].
*/
func (AudioStreamPlayback) _stop(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Overridable method. Should return [code]true[/code] if this playback is active and playing its audio stream.
*/
func (AudioStreamPlayback) _is_playing(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable method. Should return how many times this audio stream has looped. Most built-in playbacks always return [code]0[/code].
*/
func (AudioStreamPlayback) _get_loop_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable method. Should return the current progress along the audio stream, in seconds.
*/
func (AudioStreamPlayback) _get_playback_position(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to customize what happens when seeking this audio stream at the given [param position], such as by calling [method AudioStreamPlayer.seek].
*/
func (AudioStreamPlayback) _seek(impl func(ptr unsafe.Pointer, position gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var position = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, position)
		ctx.End()
	}
}

/*
Override this method to customize how the audio stream is mixed. This method is called even if the playback is not active.
[b]Note:[/b] It is not useful to override this method in GDScript or C#. Only GDExtension can take advantage of it.
*/
func (AudioStreamPlayback) _mix(impl func(ptr unsafe.Pointer, buffer *AudioFrame, rate_scale gd.Float, frames gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var buffer = gd.UnsafeGet[*AudioFrame](p_args,0)
		var rate_scale = gd.UnsafeGet[gd.Float](p_args,1)
		var frames = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, buffer, rate_scale, frames)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable method. Called whenever the audio stream is mixed if the playback is active and [method AudioServer.set_enable_tagging_used_audio_streams] has been set to [code]true[/code]. Editor plugins may use this method to "tag" the current position along the audio stream and display it in a preview.
*/
func (AudioStreamPlayback) _tag_used_streams(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Set the current value of a playback parameter by name (see [method AudioStream._get_parameter_list]).
*/
func (AudioStreamPlayback) _set_parameter(impl func(ptr unsafe.Pointer, name gd.StringName, value gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var name = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var value = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, name, value)
		ctx.End()
	}
}

/*
Return the current value of a playback parameter by name (see [method AudioStream._get_parameter_list]).
*/
func (AudioStreamPlayback) _get_parameter(impl func(ptr unsafe.Pointer, name gd.StringName) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var name = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, name)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (self AudioStreamPlayback) Virtual(name string) reflect.Value {
	switch name {
	case "_start": return reflect.ValueOf(self._start);
	case "_stop": return reflect.ValueOf(self._stop);
	case "_is_playing": return reflect.ValueOf(self._is_playing);
	case "_get_loop_count": return reflect.ValueOf(self._get_loop_count);
	case "_get_playback_position": return reflect.ValueOf(self._get_playback_position);
	case "_seek": return reflect.ValueOf(self._seek);
	case "_mix": return reflect.ValueOf(self._mix);
	case "_tag_used_streams": return reflect.ValueOf(self._tag_used_streams);
	case "_set_parameter": return reflect.ValueOf(self._set_parameter);
	case "_get_parameter": return reflect.ValueOf(self._get_parameter);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamPlaybackInteractive struct {_ [0]*AudioStreamPlaybackInteractive; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamPlaybackInteractive) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamPlaybackInteractive) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamPlaybackInteractive) Super() [1]AudioStreamPlayback { return *(*[1]AudioStreamPlayback)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackInteractive) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackInteractive) AsAudioStreamPlaybackInteractive() [1]AudioStreamPlaybackInteractive { return [1]AudioStreamPlaybackInteractive{self} }


//go:nosplit
func (self AudioStreamPlaybackInteractive) AsAudioStreamPlayback() [1]AudioStreamPlayback { return *(*[1]AudioStreamPlayback)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackInteractive) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamPlaybackInteractive) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamPlaybackOggVorbis struct {_ [0]*AudioStreamPlaybackOggVorbis; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamPlaybackOggVorbis) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamPlaybackOggVorbis) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamPlaybackOggVorbis) Super() [1]AudioStreamPlaybackResampled { return *(*[1]AudioStreamPlaybackResampled)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackOggVorbis) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackOggVorbis) AsAudioStreamPlaybackOggVorbis() [1]AudioStreamPlaybackOggVorbis { return [1]AudioStreamPlaybackOggVorbis{self} }


//go:nosplit
func (self AudioStreamPlaybackOggVorbis) AsAudioStreamPlaybackResampled() [1]AudioStreamPlaybackResampled { return *(*[1]AudioStreamPlaybackResampled)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackOggVorbis) AsAudioStreamPlayback() [1]AudioStreamPlayback { return *(*[1]AudioStreamPlayback)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackOggVorbis) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamPlaybackOggVorbis) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamPlaybackPlaylist struct {_ [0]*AudioStreamPlaybackPlaylist; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamPlaybackPlaylist) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamPlaybackPlaylist) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamPlaybackPlaylist) Super() [1]AudioStreamPlayback { return *(*[1]AudioStreamPlayback)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackPlaylist) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackPlaylist) AsAudioStreamPlaybackPlaylist() [1]AudioStreamPlaybackPlaylist { return [1]AudioStreamPlaybackPlaylist{self} }


//go:nosplit
func (self AudioStreamPlaybackPlaylist) AsAudioStreamPlayback() [1]AudioStreamPlayback { return *(*[1]AudioStreamPlayback)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackPlaylist) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamPlaybackPlaylist) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamPlaybackPolyphonic struct {_ [0]*AudioStreamPlaybackPolyphonic; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamPlaybackPolyphonic) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamPlaybackPolyphonic) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamPlaybackPolyphonic) Super() [1]AudioStreamPlayback { return *(*[1]AudioStreamPlayback)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackPolyphonic) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackPolyphonic) AsAudioStreamPlaybackPolyphonic() [1]AudioStreamPlaybackPolyphonic { return [1]AudioStreamPlaybackPolyphonic{self} }


//go:nosplit
func (self AudioStreamPlaybackPolyphonic) AsAudioStreamPlayback() [1]AudioStreamPlayback { return *(*[1]AudioStreamPlayback)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackPolyphonic) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamPlaybackPolyphonic) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamPlaybackResampled struct {_ [0]*AudioStreamPlaybackResampled; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamPlaybackResampled) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamPlaybackResampled) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamPlaybackResampled) Super() [1]AudioStreamPlayback { return *(*[1]AudioStreamPlayback)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackResampled) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackResampled) AsAudioStreamPlaybackResampled() [1]AudioStreamPlaybackResampled { return [1]AudioStreamPlaybackResampled{self} }


//go:nosplit
func (self AudioStreamPlaybackResampled) AsAudioStreamPlayback() [1]AudioStreamPlayback { return *(*[1]AudioStreamPlayback)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackResampled) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (AudioStreamPlaybackResampled) _mix_resampled(impl func(ptr unsafe.Pointer, dst_buffer *AudioFrame, frame_count gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var dst_buffer = gd.UnsafeGet[*AudioFrame](p_args,0)
		var frame_count = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, dst_buffer, frame_count)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (AudioStreamPlaybackResampled) _get_stream_sampling_rate(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self AudioStreamPlaybackResampled) Virtual(name string) reflect.Value {
	switch name {
	case "_mix_resampled": return reflect.ValueOf(self._mix_resampled);
	case "_get_stream_sampling_rate": return reflect.ValueOf(self._get_stream_sampling_rate);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamPlaybackSynchronized struct {_ [0]*AudioStreamPlaybackSynchronized; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamPlaybackSynchronized) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamPlaybackSynchronized) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamPlaybackSynchronized) Super() [1]AudioStreamPlayback { return *(*[1]AudioStreamPlayback)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackSynchronized) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackSynchronized) AsAudioStreamPlaybackSynchronized() [1]AudioStreamPlaybackSynchronized { return [1]AudioStreamPlaybackSynchronized{self} }


//go:nosplit
func (self AudioStreamPlaybackSynchronized) AsAudioStreamPlayback() [1]AudioStreamPlayback { return *(*[1]AudioStreamPlayback)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaybackSynchronized) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamPlaybackSynchronized) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AudioStreamPlayerMixTarget int64
type AudioStreamPlayer struct {_ [0]*AudioStreamPlayer; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamPlayer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamPlayer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamPlayer) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlayer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlayer) AsAudioStreamPlayer() [1]AudioStreamPlayer { return [1]AudioStreamPlayer{self} }


//go:nosplit
func (self AudioStreamPlayer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self AudioStreamPlayer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamPlayer2D struct {_ [0]*AudioStreamPlayer2D; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamPlayer2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamPlayer2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamPlayer2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlayer2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlayer2D) AsAudioStreamPlayer2D() [1]AudioStreamPlayer2D { return [1]AudioStreamPlayer2D{self} }


//go:nosplit
func (self AudioStreamPlayer2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlayer2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlayer2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self AudioStreamPlayer2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AudioStreamPlayer3DAttenuationModel int64

type AudioStreamPlayer3DDopplerTracking int64
type AudioStreamPlayer3D struct {_ [0]*AudioStreamPlayer3D; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamPlayer3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamPlayer3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamPlayer3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlayer3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlayer3D) AsAudioStreamPlayer3D() [1]AudioStreamPlayer3D { return [1]AudioStreamPlayer3D{self} }


//go:nosplit
func (self AudioStreamPlayer3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlayer3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self AudioStreamPlayer3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamPlaylist struct {_ [0]*AudioStreamPlaylist; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamPlaylist) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamPlaylist) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamPlaylist) Super() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaylist) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaylist) AsAudioStreamPlaylist() [1]AudioStreamPlaylist { return [1]AudioStreamPlaylist{self} }


//go:nosplit
func (self AudioStreamPlaylist) AsAudioStream() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaylist) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPlaylist) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamPlaylist) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamPolyphonic struct {_ [0]*AudioStreamPolyphonic; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamPolyphonic) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamPolyphonic) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamPolyphonic) Super() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPolyphonic) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPolyphonic) AsAudioStreamPolyphonic() [1]AudioStreamPolyphonic { return [1]AudioStreamPolyphonic{self} }


//go:nosplit
func (self AudioStreamPolyphonic) AsAudioStream() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPolyphonic) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamPolyphonic) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamPolyphonic) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AudioStreamRandomizerPlaybackMode int64
type AudioStreamRandomizer struct {_ [0]*AudioStreamRandomizer; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamRandomizer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamRandomizer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamRandomizer) Super() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamRandomizer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamRandomizer) AsAudioStreamRandomizer() [1]AudioStreamRandomizer { return [1]AudioStreamRandomizer{self} }


//go:nosplit
func (self AudioStreamRandomizer) AsAudioStream() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamRandomizer) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamRandomizer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamRandomizer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type AudioStreamSynchronized struct {_ [0]*AudioStreamSynchronized; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamSynchronized) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamSynchronized) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamSynchronized) Super() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamSynchronized) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamSynchronized) AsAudioStreamSynchronized() [1]AudioStreamSynchronized { return [1]AudioStreamSynchronized{self} }


//go:nosplit
func (self AudioStreamSynchronized) AsAudioStream() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamSynchronized) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamSynchronized) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamSynchronized) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type AudioStreamWAVFormat int64

type AudioStreamWAVLoopMode int64
type AudioStreamWAV struct {_ [0]*AudioStreamWAV; ptr gd.Pointer}

//go:nosplit
func (self AudioStreamWAV) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *AudioStreamWAV) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self AudioStreamWAV) Super() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamWAV) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamWAV) AsAudioStreamWAV() [1]AudioStreamWAV { return [1]AudioStreamWAV{self} }


//go:nosplit
func (self AudioStreamWAV) AsAudioStream() [1]AudioStream { return *(*[1]AudioStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamWAV) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self AudioStreamWAV) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self AudioStreamWAV) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type BackBufferCopyCopyMode int64
type BackBufferCopy struct {_ [0]*BackBufferCopy; ptr gd.Pointer}

//go:nosplit
func (self BackBufferCopy) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *BackBufferCopy) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self BackBufferCopy) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BackBufferCopy) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BackBufferCopy) AsBackBufferCopy() [1]BackBufferCopy { return [1]BackBufferCopy{self} }


//go:nosplit
func (self BackBufferCopy) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BackBufferCopy) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BackBufferCopy) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self BackBufferCopy) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type BaseButtonDrawMode int64

type BaseButtonActionMode int64
type BaseButton struct {_ [0]*BaseButton; ptr gd.Pointer}

//go:nosplit
func (self BaseButton) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *BaseButton) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self BaseButton) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BaseButton) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BaseButton) AsBaseButton() [1]BaseButton { return [1]BaseButton{self} }


//go:nosplit
func (self BaseButton) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BaseButton) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BaseButton) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Called when the button is pressed. If you need to know the button's pressed state (and [member toggle_mode] is active), use [method _toggled] instead.
*/
func (BaseButton) _pressed(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the button is toggled (only if [member toggle_mode] is active).
*/
func (BaseButton) _toggled(impl func(ptr unsafe.Pointer, toggled_on bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var toggled_on = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, toggled_on)
		ctx.End()
	}
}

func (self BaseButton) Virtual(name string) reflect.Value {
	switch name {
	case "_pressed": return reflect.ValueOf(self._pressed);
	case "_toggled": return reflect.ValueOf(self._toggled);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type BaseMaterial3DTextureParam int64

type BaseMaterial3DTextureFilter int64

type BaseMaterial3DDetailUV int64

type BaseMaterial3DTransparency int64

type BaseMaterial3DShadingMode int64

type BaseMaterial3DFeature int64

type BaseMaterial3DBlendMode int64

type BaseMaterial3DAlphaAntiAliasing int64

type BaseMaterial3DDepthDrawMode int64

type BaseMaterial3DCullMode int64

type BaseMaterial3DFlags int64

type BaseMaterial3DDiffuseMode int64

type BaseMaterial3DSpecularMode int64

type BaseMaterial3DBillboardMode int64

type BaseMaterial3DTextureChannel int64

type BaseMaterial3DEmissionOperator int64

type BaseMaterial3DDistanceFadeMode int64
type BaseMaterial3D struct {_ [0]*BaseMaterial3D; ptr gd.Pointer}

//go:nosplit
func (self BaseMaterial3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *BaseMaterial3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self BaseMaterial3D) Super() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BaseMaterial3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BaseMaterial3D) AsBaseMaterial3D() [1]BaseMaterial3D { return [1]BaseMaterial3D{self} }


//go:nosplit
func (self BaseMaterial3D) AsMaterial() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BaseMaterial3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BaseMaterial3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self BaseMaterial3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type BitMap struct {_ [0]*BitMap; ptr gd.Pointer}

//go:nosplit
func (self BitMap) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *BitMap) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self BitMap) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BitMap) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BitMap) AsBitMap() [1]BitMap { return [1]BitMap{self} }


//go:nosplit
func (self BitMap) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BitMap) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self BitMap) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Bone2D struct {_ [0]*Bone2D; ptr gd.Pointer}

//go:nosplit
func (self Bone2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Bone2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Bone2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Bone2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Bone2D) AsBone2D() [1]Bone2D { return [1]Bone2D{self} }


//go:nosplit
func (self Bone2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Bone2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Bone2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Bone2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type BoneAttachment3D struct {_ [0]*BoneAttachment3D; ptr gd.Pointer}

//go:nosplit
func (self BoneAttachment3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *BoneAttachment3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self BoneAttachment3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoneAttachment3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoneAttachment3D) AsBoneAttachment3D() [1]BoneAttachment3D { return [1]BoneAttachment3D{self} }


//go:nosplit
func (self BoneAttachment3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoneAttachment3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self BoneAttachment3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type BoneMap struct {_ [0]*BoneMap; ptr gd.Pointer}

//go:nosplit
func (self BoneMap) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *BoneMap) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self BoneMap) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoneMap) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoneMap) AsBoneMap() [1]BoneMap { return [1]BoneMap{self} }


//go:nosplit
func (self BoneMap) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoneMap) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self BoneMap) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type BoxContainerAlignmentMode int64
type BoxContainer struct {_ [0]*BoxContainer; ptr gd.Pointer}

//go:nosplit
func (self BoxContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *BoxContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self BoxContainer) Super() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxContainer) AsBoxContainer() [1]BoxContainer { return [1]BoxContainer{self} }


//go:nosplit
func (self BoxContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self BoxContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type BoxMesh struct {_ [0]*BoxMesh; ptr gd.Pointer}

//go:nosplit
func (self BoxMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *BoxMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self BoxMesh) Super() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxMesh) AsBoxMesh() [1]BoxMesh { return [1]BoxMesh{self} }


//go:nosplit
func (self BoxMesh) AsPrimitiveMesh() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self BoxMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type BoxOccluder3D struct {_ [0]*BoxOccluder3D; ptr gd.Pointer}

//go:nosplit
func (self BoxOccluder3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *BoxOccluder3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self BoxOccluder3D) Super() [1]Occluder3D { return *(*[1]Occluder3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxOccluder3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxOccluder3D) AsBoxOccluder3D() [1]BoxOccluder3D { return [1]BoxOccluder3D{self} }


//go:nosplit
func (self BoxOccluder3D) AsOccluder3D() [1]Occluder3D { return *(*[1]Occluder3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxOccluder3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxOccluder3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self BoxOccluder3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type BoxShape3D struct {_ [0]*BoxShape3D; ptr gd.Pointer}

//go:nosplit
func (self BoxShape3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *BoxShape3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self BoxShape3D) Super() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxShape3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxShape3D) AsBoxShape3D() [1]BoxShape3D { return [1]BoxShape3D{self} }


//go:nosplit
func (self BoxShape3D) AsShape3D() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxShape3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self BoxShape3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self BoxShape3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Button struct {_ [0]*Button; ptr gd.Pointer}

//go:nosplit
func (self Button) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Button) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Button) Super() [1]BaseButton { return *(*[1]BaseButton)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Button) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Button) AsButton() [1]Button { return [1]Button{self} }


//go:nosplit
func (self Button) AsBaseButton() [1]BaseButton { return *(*[1]BaseButton)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Button) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Button) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Button) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Button) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ButtonGroup struct {_ [0]*ButtonGroup; ptr gd.Pointer}

//go:nosplit
func (self ButtonGroup) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ButtonGroup) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ButtonGroup) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ButtonGroup) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ButtonGroup) AsButtonGroup() [1]ButtonGroup { return [1]ButtonGroup{self} }


//go:nosplit
func (self ButtonGroup) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ButtonGroup) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ButtonGroup) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CPUParticles2DDrawOrder int64

type CPUParticles2DParameter int64

type CPUParticles2DParticleFlags int64

type CPUParticles2DEmissionShape int64
type CPUParticles2D struct {_ [0]*CPUParticles2D; ptr gd.Pointer}

//go:nosplit
func (self CPUParticles2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CPUParticles2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CPUParticles2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CPUParticles2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CPUParticles2D) AsCPUParticles2D() [1]CPUParticles2D { return [1]CPUParticles2D{self} }


//go:nosplit
func (self CPUParticles2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CPUParticles2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CPUParticles2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CPUParticles2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CPUParticles3DDrawOrder int64

type CPUParticles3DParameter int64

type CPUParticles3DParticleFlags int64

type CPUParticles3DEmissionShape int64
type CPUParticles3D struct {_ [0]*CPUParticles3D; ptr gd.Pointer}

//go:nosplit
func (self CPUParticles3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CPUParticles3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CPUParticles3D) Super() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CPUParticles3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CPUParticles3D) AsCPUParticles3D() [1]CPUParticles3D { return [1]CPUParticles3D{self} }


//go:nosplit
func (self CPUParticles3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CPUParticles3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CPUParticles3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CPUParticles3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CPUParticles3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CSGBox3D struct {_ [0]*CSGBox3D; ptr gd.Pointer}

//go:nosplit
func (self CSGBox3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CSGBox3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CSGBox3D) Super() [1]CSGPrimitive3D { return *(*[1]CSGPrimitive3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGBox3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGBox3D) AsCSGBox3D() [1]CSGBox3D { return [1]CSGBox3D{self} }


//go:nosplit
func (self CSGBox3D) AsCSGPrimitive3D() [1]CSGPrimitive3D { return *(*[1]CSGPrimitive3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGBox3D) AsCSGShape3D() [1]CSGShape3D { return *(*[1]CSGShape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGBox3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGBox3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGBox3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGBox3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CSGBox3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CSGCombiner3D struct {_ [0]*CSGCombiner3D; ptr gd.Pointer}

//go:nosplit
func (self CSGCombiner3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CSGCombiner3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CSGCombiner3D) Super() [1]CSGShape3D { return *(*[1]CSGShape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGCombiner3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGCombiner3D) AsCSGCombiner3D() [1]CSGCombiner3D { return [1]CSGCombiner3D{self} }


//go:nosplit
func (self CSGCombiner3D) AsCSGShape3D() [1]CSGShape3D { return *(*[1]CSGShape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGCombiner3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGCombiner3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGCombiner3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGCombiner3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CSGCombiner3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CSGCylinder3D struct {_ [0]*CSGCylinder3D; ptr gd.Pointer}

//go:nosplit
func (self CSGCylinder3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CSGCylinder3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CSGCylinder3D) Super() [1]CSGPrimitive3D { return *(*[1]CSGPrimitive3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGCylinder3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGCylinder3D) AsCSGCylinder3D() [1]CSGCylinder3D { return [1]CSGCylinder3D{self} }


//go:nosplit
func (self CSGCylinder3D) AsCSGPrimitive3D() [1]CSGPrimitive3D { return *(*[1]CSGPrimitive3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGCylinder3D) AsCSGShape3D() [1]CSGShape3D { return *(*[1]CSGShape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGCylinder3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGCylinder3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGCylinder3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGCylinder3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CSGCylinder3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CSGMesh3D struct {_ [0]*CSGMesh3D; ptr gd.Pointer}

//go:nosplit
func (self CSGMesh3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CSGMesh3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CSGMesh3D) Super() [1]CSGPrimitive3D { return *(*[1]CSGPrimitive3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGMesh3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGMesh3D) AsCSGMesh3D() [1]CSGMesh3D { return [1]CSGMesh3D{self} }


//go:nosplit
func (self CSGMesh3D) AsCSGPrimitive3D() [1]CSGPrimitive3D { return *(*[1]CSGPrimitive3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGMesh3D) AsCSGShape3D() [1]CSGShape3D { return *(*[1]CSGShape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGMesh3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGMesh3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGMesh3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGMesh3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CSGMesh3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CSGPolygon3DMode int64

type CSGPolygon3DPathRotation int64

type CSGPolygon3DPathIntervalType int64
type CSGPolygon3D struct {_ [0]*CSGPolygon3D; ptr gd.Pointer}

//go:nosplit
func (self CSGPolygon3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CSGPolygon3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CSGPolygon3D) Super() [1]CSGPrimitive3D { return *(*[1]CSGPrimitive3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGPolygon3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGPolygon3D) AsCSGPolygon3D() [1]CSGPolygon3D { return [1]CSGPolygon3D{self} }


//go:nosplit
func (self CSGPolygon3D) AsCSGPrimitive3D() [1]CSGPrimitive3D { return *(*[1]CSGPrimitive3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGPolygon3D) AsCSGShape3D() [1]CSGShape3D { return *(*[1]CSGShape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGPolygon3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGPolygon3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGPolygon3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGPolygon3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CSGPolygon3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CSGPrimitive3D struct {_ [0]*CSGPrimitive3D; ptr gd.Pointer}

//go:nosplit
func (self CSGPrimitive3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CSGPrimitive3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CSGPrimitive3D) Super() [1]CSGShape3D { return *(*[1]CSGShape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGPrimitive3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGPrimitive3D) AsCSGPrimitive3D() [1]CSGPrimitive3D { return [1]CSGPrimitive3D{self} }


//go:nosplit
func (self CSGPrimitive3D) AsCSGShape3D() [1]CSGShape3D { return *(*[1]CSGShape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGPrimitive3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGPrimitive3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGPrimitive3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGPrimitive3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CSGPrimitive3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CSGShape3DOperation int64
type CSGShape3D struct {_ [0]*CSGShape3D; ptr gd.Pointer}

//go:nosplit
func (self CSGShape3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CSGShape3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CSGShape3D) Super() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGShape3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGShape3D) AsCSGShape3D() [1]CSGShape3D { return [1]CSGShape3D{self} }


//go:nosplit
func (self CSGShape3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGShape3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGShape3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGShape3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CSGShape3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CSGSphere3D struct {_ [0]*CSGSphere3D; ptr gd.Pointer}

//go:nosplit
func (self CSGSphere3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CSGSphere3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CSGSphere3D) Super() [1]CSGPrimitive3D { return *(*[1]CSGPrimitive3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGSphere3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGSphere3D) AsCSGSphere3D() [1]CSGSphere3D { return [1]CSGSphere3D{self} }


//go:nosplit
func (self CSGSphere3D) AsCSGPrimitive3D() [1]CSGPrimitive3D { return *(*[1]CSGPrimitive3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGSphere3D) AsCSGShape3D() [1]CSGShape3D { return *(*[1]CSGShape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGSphere3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGSphere3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGSphere3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGSphere3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CSGSphere3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CSGTorus3D struct {_ [0]*CSGTorus3D; ptr gd.Pointer}

//go:nosplit
func (self CSGTorus3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CSGTorus3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CSGTorus3D) Super() [1]CSGPrimitive3D { return *(*[1]CSGPrimitive3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGTorus3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGTorus3D) AsCSGTorus3D() [1]CSGTorus3D { return [1]CSGTorus3D{self} }


//go:nosplit
func (self CSGTorus3D) AsCSGPrimitive3D() [1]CSGPrimitive3D { return *(*[1]CSGPrimitive3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGTorus3D) AsCSGShape3D() [1]CSGShape3D { return *(*[1]CSGShape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGTorus3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGTorus3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGTorus3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CSGTorus3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CSGTorus3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CallbackTweener struct {_ [0]*CallbackTweener; ptr gd.Pointer}

//go:nosplit
func (self CallbackTweener) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CallbackTweener) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CallbackTweener) Super() [1]Tweener { return *(*[1]Tweener)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CallbackTweener) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CallbackTweener) AsCallbackTweener() [1]CallbackTweener { return [1]CallbackTweener{self} }


//go:nosplit
func (self CallbackTweener) AsTweener() [1]Tweener { return *(*[1]Tweener)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CallbackTweener) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CallbackTweener) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type Camera2DAnchorMode int64

type Camera2DCamera2DProcessCallback int64
type Camera2D struct {_ [0]*Camera2D; ptr gd.Pointer}

//go:nosplit
func (self Camera2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Camera2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Camera2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Camera2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Camera2D) AsCamera2D() [1]Camera2D { return [1]Camera2D{self} }


//go:nosplit
func (self Camera2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Camera2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Camera2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Camera2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type Camera3DProjectionType int64

type Camera3DKeepAspect int64

type Camera3DDopplerTracking int64
type Camera3D struct {_ [0]*Camera3D; ptr gd.Pointer}

//go:nosplit
func (self Camera3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Camera3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Camera3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Camera3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Camera3D) AsCamera3D() [1]Camera3D { return [1]Camera3D{self} }


//go:nosplit
func (self Camera3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Camera3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Camera3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CameraAttributes struct {_ [0]*CameraAttributes; ptr gd.Pointer}

//go:nosplit
func (self CameraAttributes) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CameraAttributes) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CameraAttributes) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraAttributes) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraAttributes) AsCameraAttributes() [1]CameraAttributes { return [1]CameraAttributes{self} }


//go:nosplit
func (self CameraAttributes) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraAttributes) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CameraAttributes) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CameraAttributesPhysical struct {_ [0]*CameraAttributesPhysical; ptr gd.Pointer}

//go:nosplit
func (self CameraAttributesPhysical) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CameraAttributesPhysical) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CameraAttributesPhysical) Super() [1]CameraAttributes { return *(*[1]CameraAttributes)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraAttributesPhysical) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraAttributesPhysical) AsCameraAttributesPhysical() [1]CameraAttributesPhysical { return [1]CameraAttributesPhysical{self} }


//go:nosplit
func (self CameraAttributesPhysical) AsCameraAttributes() [1]CameraAttributes { return *(*[1]CameraAttributes)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraAttributesPhysical) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraAttributesPhysical) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CameraAttributesPhysical) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CameraAttributesPractical struct {_ [0]*CameraAttributesPractical; ptr gd.Pointer}

//go:nosplit
func (self CameraAttributesPractical) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CameraAttributesPractical) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CameraAttributesPractical) Super() [1]CameraAttributes { return *(*[1]CameraAttributes)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraAttributesPractical) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraAttributesPractical) AsCameraAttributesPractical() [1]CameraAttributesPractical { return [1]CameraAttributesPractical{self} }


//go:nosplit
func (self CameraAttributesPractical) AsCameraAttributes() [1]CameraAttributes { return *(*[1]CameraAttributes)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraAttributesPractical) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraAttributesPractical) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CameraAttributesPractical) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CameraFeedFeedDataType int64

type CameraFeedFeedPosition int64
type CameraFeed struct {_ [0]*CameraFeed; ptr gd.Pointer}

//go:nosplit
func (self CameraFeed) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CameraFeed) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CameraFeed) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraFeed) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraFeed) AsCameraFeed() [1]CameraFeed { return [1]CameraFeed{self} }


//go:nosplit
func (self CameraFeed) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CameraFeed) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CameraServerFeedImage int64
type CameraServer struct {_ [0]*CameraServer; ptr gd.Pointer}

//go:nosplit
func (self CameraServer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CameraServer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CameraServer) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraServer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraServer) AsCameraServer() [1]CameraServer { return [1]CameraServer{self} }

//go:nosplit

func (self CameraServer) IsSingleton() {}

func (self CameraServer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CameraTexture struct {_ [0]*CameraTexture; ptr gd.Pointer}

//go:nosplit
func (self CameraTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CameraTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CameraTexture) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraTexture) AsCameraTexture() [1]CameraTexture { return [1]CameraTexture{self} }


//go:nosplit
func (self CameraTexture) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraTexture) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraTexture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CameraTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CameraTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CanvasGroup struct {_ [0]*CanvasGroup; ptr gd.Pointer}

//go:nosplit
func (self CanvasGroup) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CanvasGroup) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CanvasGroup) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasGroup) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasGroup) AsCanvasGroup() [1]CanvasGroup { return [1]CanvasGroup{self} }


//go:nosplit
func (self CanvasGroup) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasGroup) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasGroup) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CanvasGroup) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CanvasItemTextureFilter int64

type CanvasItemTextureRepeat int64

type CanvasItemClipChildrenMode int64
type CanvasItem struct {_ [0]*CanvasItem; ptr gd.Pointer}

//go:nosplit
func (self CanvasItem) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CanvasItem) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CanvasItem) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasItem) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasItem) AsCanvasItem() [1]CanvasItem { return [1]CanvasItem{self} }


//go:nosplit
func (self CanvasItem) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Called when [CanvasItem] has been requested to redraw (after [method queue_redraw] is called, either manually or by the engine).
Corresponds to the [constant NOTIFICATION_DRAW] notification in [method Object._notification].
*/
func (CanvasItem) _draw(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (self CanvasItem) Virtual(name string) reflect.Value {
	switch name {
	case "_draw": return reflect.ValueOf(self._draw);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CanvasItemMaterialBlendMode int64

type CanvasItemMaterialLightMode int64
type CanvasItemMaterial struct {_ [0]*CanvasItemMaterial; ptr gd.Pointer}

//go:nosplit
func (self CanvasItemMaterial) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CanvasItemMaterial) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CanvasItemMaterial) Super() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasItemMaterial) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasItemMaterial) AsCanvasItemMaterial() [1]CanvasItemMaterial { return [1]CanvasItemMaterial{self} }


//go:nosplit
func (self CanvasItemMaterial) AsMaterial() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasItemMaterial) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasItemMaterial) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CanvasItemMaterial) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CanvasLayer struct {_ [0]*CanvasLayer; ptr gd.Pointer}

//go:nosplit
func (self CanvasLayer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CanvasLayer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CanvasLayer) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasLayer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasLayer) AsCanvasLayer() [1]CanvasLayer { return [1]CanvasLayer{self} }


//go:nosplit
func (self CanvasLayer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CanvasLayer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CanvasModulate struct {_ [0]*CanvasModulate; ptr gd.Pointer}

//go:nosplit
func (self CanvasModulate) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CanvasModulate) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CanvasModulate) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasModulate) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasModulate) AsCanvasModulate() [1]CanvasModulate { return [1]CanvasModulate{self} }


//go:nosplit
func (self CanvasModulate) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasModulate) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasModulate) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CanvasModulate) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CanvasTexture struct {_ [0]*CanvasTexture; ptr gd.Pointer}

//go:nosplit
func (self CanvasTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CanvasTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CanvasTexture) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasTexture) AsCanvasTexture() [1]CanvasTexture { return [1]CanvasTexture{self} }


//go:nosplit
func (self CanvasTexture) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasTexture) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasTexture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CanvasTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CanvasTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CapsuleMesh struct {_ [0]*CapsuleMesh; ptr gd.Pointer}

//go:nosplit
func (self CapsuleMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CapsuleMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CapsuleMesh) Super() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CapsuleMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CapsuleMesh) AsCapsuleMesh() [1]CapsuleMesh { return [1]CapsuleMesh{self} }


//go:nosplit
func (self CapsuleMesh) AsPrimitiveMesh() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CapsuleMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CapsuleMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CapsuleMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CapsuleMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CapsuleShape2D struct {_ [0]*CapsuleShape2D; ptr gd.Pointer}

//go:nosplit
func (self CapsuleShape2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CapsuleShape2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CapsuleShape2D) Super() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CapsuleShape2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CapsuleShape2D) AsCapsuleShape2D() [1]CapsuleShape2D { return [1]CapsuleShape2D{self} }


//go:nosplit
func (self CapsuleShape2D) AsShape2D() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CapsuleShape2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CapsuleShape2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CapsuleShape2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CapsuleShape3D struct {_ [0]*CapsuleShape3D; ptr gd.Pointer}

//go:nosplit
func (self CapsuleShape3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CapsuleShape3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CapsuleShape3D) Super() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CapsuleShape3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CapsuleShape3D) AsCapsuleShape3D() [1]CapsuleShape3D { return [1]CapsuleShape3D{self} }


//go:nosplit
func (self CapsuleShape3D) AsShape3D() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CapsuleShape3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CapsuleShape3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CapsuleShape3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CenterContainer struct {_ [0]*CenterContainer; ptr gd.Pointer}

//go:nosplit
func (self CenterContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CenterContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CenterContainer) Super() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CenterContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CenterContainer) AsCenterContainer() [1]CenterContainer { return [1]CenterContainer{self} }


//go:nosplit
func (self CenterContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CenterContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CenterContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CenterContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CenterContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CharFXTransform struct {_ [0]*CharFXTransform; ptr gd.Pointer}

//go:nosplit
func (self CharFXTransform) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CharFXTransform) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CharFXTransform) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CharFXTransform) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CharFXTransform) AsCharFXTransform() [1]CharFXTransform { return [1]CharFXTransform{self} }


//go:nosplit
func (self CharFXTransform) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CharFXTransform) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CharacterBody2DMotionMode int64

type CharacterBody2DPlatformOnLeave int64
type CharacterBody2D struct {_ [0]*CharacterBody2D; ptr gd.Pointer}

//go:nosplit
func (self CharacterBody2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CharacterBody2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CharacterBody2D) Super() [1]PhysicsBody2D { return *(*[1]PhysicsBody2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CharacterBody2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CharacterBody2D) AsCharacterBody2D() [1]CharacterBody2D { return [1]CharacterBody2D{self} }


//go:nosplit
func (self CharacterBody2D) AsPhysicsBody2D() [1]PhysicsBody2D { return *(*[1]PhysicsBody2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CharacterBody2D) AsCollisionObject2D() [1]CollisionObject2D { return *(*[1]CollisionObject2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CharacterBody2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CharacterBody2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CharacterBody2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CharacterBody2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CharacterBody3DMotionMode int64

type CharacterBody3DPlatformOnLeave int64
type CharacterBody3D struct {_ [0]*CharacterBody3D; ptr gd.Pointer}

//go:nosplit
func (self CharacterBody3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CharacterBody3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CharacterBody3D) Super() [1]PhysicsBody3D { return *(*[1]PhysicsBody3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CharacterBody3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CharacterBody3D) AsCharacterBody3D() [1]CharacterBody3D { return [1]CharacterBody3D{self} }


//go:nosplit
func (self CharacterBody3D) AsPhysicsBody3D() [1]PhysicsBody3D { return *(*[1]PhysicsBody3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CharacterBody3D) AsCollisionObject3D() [1]CollisionObject3D { return *(*[1]CollisionObject3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CharacterBody3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CharacterBody3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CharacterBody3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CheckBox struct {_ [0]*CheckBox; ptr gd.Pointer}

//go:nosplit
func (self CheckBox) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CheckBox) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CheckBox) Super() [1]Button { return *(*[1]Button)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CheckBox) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CheckBox) AsCheckBox() [1]CheckBox { return [1]CheckBox{self} }


//go:nosplit
func (self CheckBox) AsButton() [1]Button { return *(*[1]Button)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CheckBox) AsBaseButton() [1]BaseButton { return *(*[1]BaseButton)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CheckBox) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CheckBox) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CheckBox) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CheckBox) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CheckButton struct {_ [0]*CheckButton; ptr gd.Pointer}

//go:nosplit
func (self CheckButton) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CheckButton) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CheckButton) Super() [1]Button { return *(*[1]Button)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CheckButton) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CheckButton) AsCheckButton() [1]CheckButton { return [1]CheckButton{self} }


//go:nosplit
func (self CheckButton) AsButton() [1]Button { return *(*[1]Button)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CheckButton) AsBaseButton() [1]BaseButton { return *(*[1]BaseButton)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CheckButton) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CheckButton) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CheckButton) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CheckButton) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CircleShape2D struct {_ [0]*CircleShape2D; ptr gd.Pointer}

//go:nosplit
func (self CircleShape2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CircleShape2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CircleShape2D) Super() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CircleShape2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CircleShape2D) AsCircleShape2D() [1]CircleShape2D { return [1]CircleShape2D{self} }


//go:nosplit
func (self CircleShape2D) AsShape2D() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CircleShape2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CircleShape2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CircleShape2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ClassDB struct {_ [0]*ClassDB; ptr gd.Pointer}

//go:nosplit
func (self ClassDB) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ClassDB) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ClassDB) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ClassDB) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ClassDB) AsClassDB() [1]ClassDB { return [1]ClassDB{self} }

//go:nosplit

func (self ClassDB) IsSingleton() {}

func (self ClassDB) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CodeEditCodeCompletionKind int64

type CodeEditCodeCompletionLocation int64
type CodeEdit struct {_ [0]*CodeEdit; ptr gd.Pointer}

//go:nosplit
func (self CodeEdit) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CodeEdit) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CodeEdit) Super() [1]TextEdit { return *(*[1]TextEdit)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CodeEdit) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CodeEdit) AsCodeEdit() [1]CodeEdit { return [1]CodeEdit{self} }


//go:nosplit
func (self CodeEdit) AsTextEdit() [1]TextEdit { return *(*[1]TextEdit)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CodeEdit) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CodeEdit) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CodeEdit) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Override this method to define how the selected entry should be inserted. If [param replace] is [code]true[/code], any existing text should be replaced.
*/
func (CodeEdit) _confirm_code_completion(impl func(ptr unsafe.Pointer, replace bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var replace = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, replace)
		ctx.End()
	}
}

/*
Override this method to define what happens when the user requests code completion. If [param force] is [code]true[/code], any checks should be bypassed.
*/
func (CodeEdit) _request_code_completion(impl func(ptr unsafe.Pointer, force bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var force = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, force)
		ctx.End()
	}
}

/*
Override this method to define what items in [param candidates] should be displayed.
Both [param candidates] and the return is a [Array] of [Dictionary], see [method get_code_completion_option] for [Dictionary] content.
*/
func (CodeEdit) _filter_code_completion_candidates(impl func(ptr unsafe.Pointer, candidates gd.ArrayOf[gd.Dictionary]) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var candidates = gd.TypedArray[gd.Dictionary](mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0)))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, candidates)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (self CodeEdit) Virtual(name string) reflect.Value {
	switch name {
	case "_confirm_code_completion": return reflect.ValueOf(self._confirm_code_completion);
	case "_request_code_completion": return reflect.ValueOf(self._request_code_completion);
	case "_filter_code_completion_candidates": return reflect.ValueOf(self._filter_code_completion_candidates);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CodeHighlighter struct {_ [0]*CodeHighlighter; ptr gd.Pointer}

//go:nosplit
func (self CodeHighlighter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CodeHighlighter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CodeHighlighter) Super() [1]SyntaxHighlighter { return *(*[1]SyntaxHighlighter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CodeHighlighter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CodeHighlighter) AsCodeHighlighter() [1]CodeHighlighter { return [1]CodeHighlighter{self} }


//go:nosplit
func (self CodeHighlighter) AsSyntaxHighlighter() [1]SyntaxHighlighter { return *(*[1]SyntaxHighlighter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CodeHighlighter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CodeHighlighter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CodeHighlighter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CollisionObject2DDisableMode int64
type CollisionObject2D struct {_ [0]*CollisionObject2D; ptr gd.Pointer}

//go:nosplit
func (self CollisionObject2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CollisionObject2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CollisionObject2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionObject2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionObject2D) AsCollisionObject2D() [1]CollisionObject2D { return [1]CollisionObject2D{self} }


//go:nosplit
func (self CollisionObject2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionObject2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionObject2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Accepts unhandled [InputEvent]s. [param shape_idx] is the child index of the clicked [Shape2D]. Connect to [signal input_event] to easily pick up these events.
[b]Note:[/b] [method _input_event] requires [member input_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set.
*/
func (CollisionObject2D) _input_event(impl func(ptr unsafe.Pointer, viewport Viewport, event InputEvent, shape_idx gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var viewport Viewport
		viewport.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var event InputEvent
		event.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, viewport, event, shape_idx)
		ctx.End()
	}
}

/*
Called when the mouse pointer enters any of this object's shapes. Requires [member input_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set. Note that moving between different shapes within a single [CollisionObject2D] won't cause this function to be called.
*/
func (CollisionObject2D) _mouse_enter(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the mouse pointer exits all this object's shapes. Requires [member input_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set. Note that moving between different shapes within a single [CollisionObject2D] won't cause this function to be called.
*/
func (CollisionObject2D) _mouse_exit(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the mouse pointer enters any of this object's shapes or moves from one shape to another. [param shape_idx] is the child index of the newly entered [Shape2D]. Requires [member input_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be called.
*/
func (CollisionObject2D) _mouse_shape_enter(impl func(ptr unsafe.Pointer, shape_idx gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shape_idx)
		ctx.End()
	}
}

/*
Called when the mouse pointer exits any of this object's shapes. [param shape_idx] is the child index of the exited [Shape2D]. Requires [member input_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be called.
*/
func (CollisionObject2D) _mouse_shape_exit(impl func(ptr unsafe.Pointer, shape_idx gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shape_idx)
		ctx.End()
	}
}

func (self CollisionObject2D) Virtual(name string) reflect.Value {
	switch name {
	case "_input_event": return reflect.ValueOf(self._input_event);
	case "_mouse_enter": return reflect.ValueOf(self._mouse_enter);
	case "_mouse_exit": return reflect.ValueOf(self._mouse_exit);
	case "_mouse_shape_enter": return reflect.ValueOf(self._mouse_shape_enter);
	case "_mouse_shape_exit": return reflect.ValueOf(self._mouse_shape_exit);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CollisionObject3DDisableMode int64
type CollisionObject3D struct {_ [0]*CollisionObject3D; ptr gd.Pointer}

//go:nosplit
func (self CollisionObject3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CollisionObject3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CollisionObject3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionObject3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionObject3D) AsCollisionObject3D() [1]CollisionObject3D { return [1]CollisionObject3D{self} }


//go:nosplit
func (self CollisionObject3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionObject3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Receives unhandled [InputEvent]s. [param event_position] is the location in world space of the mouse pointer on the surface of the shape with index [param shape_idx] and [param normal] is the normal vector of the surface at that point. Connect to the [signal input_event] signal to easily pick up these events.
[b]Note:[/b] [method _input_event] requires [member input_ray_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set.
*/
func (CollisionObject3D) _input_event(impl func(ptr unsafe.Pointer, camera Camera3D, event InputEvent, event_position gd.Vector3, normal gd.Vector3, shape_idx gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var camera Camera3D
		camera.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var event InputEvent
		event.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		var event_position = gd.UnsafeGet[gd.Vector3](p_args,2)
		var normal = gd.UnsafeGet[gd.Vector3](p_args,3)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, camera, event, event_position, normal, shape_idx)
		ctx.End()
	}
}

/*
Called when the mouse pointer enters any of this object's shapes. Requires [member input_ray_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set. Note that moving between different shapes within a single [CollisionObject3D] won't cause this function to be called.
*/
func (CollisionObject3D) _mouse_enter(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the mouse pointer exits all this object's shapes. Requires [member input_ray_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set. Note that moving between different shapes within a single [CollisionObject3D] won't cause this function to be called.
*/
func (CollisionObject3D) _mouse_exit(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (self CollisionObject3D) Virtual(name string) reflect.Value {
	switch name {
	case "_input_event": return reflect.ValueOf(self._input_event);
	case "_mouse_enter": return reflect.ValueOf(self._mouse_enter);
	case "_mouse_exit": return reflect.ValueOf(self._mouse_exit);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CollisionPolygon2DBuildMode int64
type CollisionPolygon2D struct {_ [0]*CollisionPolygon2D; ptr gd.Pointer}

//go:nosplit
func (self CollisionPolygon2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CollisionPolygon2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CollisionPolygon2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionPolygon2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionPolygon2D) AsCollisionPolygon2D() [1]CollisionPolygon2D { return [1]CollisionPolygon2D{self} }


//go:nosplit
func (self CollisionPolygon2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionPolygon2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionPolygon2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CollisionPolygon2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CollisionPolygon3D struct {_ [0]*CollisionPolygon3D; ptr gd.Pointer}

//go:nosplit
func (self CollisionPolygon3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CollisionPolygon3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CollisionPolygon3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionPolygon3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionPolygon3D) AsCollisionPolygon3D() [1]CollisionPolygon3D { return [1]CollisionPolygon3D{self} }


//go:nosplit
func (self CollisionPolygon3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionPolygon3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CollisionPolygon3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CollisionShape2D struct {_ [0]*CollisionShape2D; ptr gd.Pointer}

//go:nosplit
func (self CollisionShape2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CollisionShape2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CollisionShape2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionShape2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionShape2D) AsCollisionShape2D() [1]CollisionShape2D { return [1]CollisionShape2D{self} }


//go:nosplit
func (self CollisionShape2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionShape2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionShape2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CollisionShape2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CollisionShape3D struct {_ [0]*CollisionShape3D; ptr gd.Pointer}

//go:nosplit
func (self CollisionShape3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CollisionShape3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CollisionShape3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionShape3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionShape3D) AsCollisionShape3D() [1]CollisionShape3D { return [1]CollisionShape3D{self} }


//go:nosplit
func (self CollisionShape3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CollisionShape3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self CollisionShape3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ColorPickerColorModeType int64

type ColorPickerPickerShapeType int64
type ColorPicker struct {_ [0]*ColorPicker; ptr gd.Pointer}

//go:nosplit
func (self ColorPicker) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ColorPicker) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ColorPicker) Super() [1]VBoxContainer { return *(*[1]VBoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorPicker) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorPicker) AsColorPicker() [1]ColorPicker { return [1]ColorPicker{self} }


//go:nosplit
func (self ColorPicker) AsVBoxContainer() [1]VBoxContainer { return *(*[1]VBoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorPicker) AsBoxContainer() [1]BoxContainer { return *(*[1]BoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorPicker) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorPicker) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorPicker) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorPicker) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ColorPicker) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ColorPickerButton struct {_ [0]*ColorPickerButton; ptr gd.Pointer}

//go:nosplit
func (self ColorPickerButton) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ColorPickerButton) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ColorPickerButton) Super() [1]Button { return *(*[1]Button)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorPickerButton) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorPickerButton) AsColorPickerButton() [1]ColorPickerButton { return [1]ColorPickerButton{self} }


//go:nosplit
func (self ColorPickerButton) AsButton() [1]Button { return *(*[1]Button)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorPickerButton) AsBaseButton() [1]BaseButton { return *(*[1]BaseButton)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorPickerButton) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorPickerButton) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorPickerButton) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ColorPickerButton) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ColorRect struct {_ [0]*ColorRect; ptr gd.Pointer}

//go:nosplit
func (self ColorRect) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ColorRect) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ColorRect) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorRect) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorRect) AsColorRect() [1]ColorRect { return [1]ColorRect{self} }


//go:nosplit
func (self ColorRect) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorRect) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ColorRect) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ColorRect) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Compositor struct {_ [0]*Compositor; ptr gd.Pointer}

//go:nosplit
func (self Compositor) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Compositor) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Compositor) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Compositor) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Compositor) AsCompositor() [1]Compositor { return [1]Compositor{self} }


//go:nosplit
func (self Compositor) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Compositor) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Compositor) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CompositorEffectEffectCallbackType int64
type CompositorEffect struct {_ [0]*CompositorEffect; ptr gd.Pointer}

//go:nosplit
func (self CompositorEffect) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CompositorEffect) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CompositorEffect) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompositorEffect) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompositorEffect) AsCompositorEffect() [1]CompositorEffect { return [1]CompositorEffect{self} }


//go:nosplit
func (self CompositorEffect) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompositorEffect) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Implement this function with your custom rendering code. [param effect_callback_type] should always match the effect callback type you've specified in [member effect_callback_type]. [param render_data] provides access to the rendering state, it is only valid during rendering and should not be stored.
*/
func (CompositorEffect) _render_callback(impl func(ptr unsafe.Pointer, effect_callback_type gd.Int, render_data RenderData) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var effect_callback_type = gd.UnsafeGet[gd.Int](p_args,0)
		var render_data RenderData
		render_data.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, effect_callback_type, render_data)
		ctx.End()
	}
}

func (self CompositorEffect) Virtual(name string) reflect.Value {
	switch name {
	case "_render_callback": return reflect.ValueOf(self._render_callback);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CompressedCubemap struct {_ [0]*CompressedCubemap; ptr gd.Pointer}

//go:nosplit
func (self CompressedCubemap) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CompressedCubemap) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CompressedCubemap) Super() [1]CompressedTextureLayered { return *(*[1]CompressedTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedCubemap) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedCubemap) AsCompressedCubemap() [1]CompressedCubemap { return [1]CompressedCubemap{self} }


//go:nosplit
func (self CompressedCubemap) AsCompressedTextureLayered() [1]CompressedTextureLayered { return *(*[1]CompressedTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedCubemap) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedCubemap) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedCubemap) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedCubemap) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CompressedCubemap) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CompressedCubemapArray struct {_ [0]*CompressedCubemapArray; ptr gd.Pointer}

//go:nosplit
func (self CompressedCubemapArray) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CompressedCubemapArray) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CompressedCubemapArray) Super() [1]CompressedTextureLayered { return *(*[1]CompressedTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedCubemapArray) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedCubemapArray) AsCompressedCubemapArray() [1]CompressedCubemapArray { return [1]CompressedCubemapArray{self} }


//go:nosplit
func (self CompressedCubemapArray) AsCompressedTextureLayered() [1]CompressedTextureLayered { return *(*[1]CompressedTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedCubemapArray) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedCubemapArray) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedCubemapArray) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedCubemapArray) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CompressedCubemapArray) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CompressedTexture2D struct {_ [0]*CompressedTexture2D; ptr gd.Pointer}

//go:nosplit
func (self CompressedTexture2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CompressedTexture2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CompressedTexture2D) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture2D) AsCompressedTexture2D() [1]CompressedTexture2D { return [1]CompressedTexture2D{self} }


//go:nosplit
func (self CompressedTexture2D) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture2D) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CompressedTexture2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CompressedTexture2DArray struct {_ [0]*CompressedTexture2DArray; ptr gd.Pointer}

//go:nosplit
func (self CompressedTexture2DArray) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CompressedTexture2DArray) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CompressedTexture2DArray) Super() [1]CompressedTextureLayered { return *(*[1]CompressedTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture2DArray) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture2DArray) AsCompressedTexture2DArray() [1]CompressedTexture2DArray { return [1]CompressedTexture2DArray{self} }


//go:nosplit
func (self CompressedTexture2DArray) AsCompressedTextureLayered() [1]CompressedTextureLayered { return *(*[1]CompressedTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture2DArray) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture2DArray) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture2DArray) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture2DArray) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CompressedTexture2DArray) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CompressedTexture3D struct {_ [0]*CompressedTexture3D; ptr gd.Pointer}

//go:nosplit
func (self CompressedTexture3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CompressedTexture3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CompressedTexture3D) Super() [1]Texture3D { return *(*[1]Texture3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture3D) AsCompressedTexture3D() [1]CompressedTexture3D { return [1]CompressedTexture3D{self} }


//go:nosplit
func (self CompressedTexture3D) AsTexture3D() [1]Texture3D { return *(*[1]Texture3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture3D) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTexture3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CompressedTexture3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CompressedTextureLayered struct {_ [0]*CompressedTextureLayered; ptr gd.Pointer}

//go:nosplit
func (self CompressedTextureLayered) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CompressedTextureLayered) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CompressedTextureLayered) Super() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTextureLayered) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTextureLayered) AsCompressedTextureLayered() [1]CompressedTextureLayered { return [1]CompressedTextureLayered{self} }


//go:nosplit
func (self CompressedTextureLayered) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTextureLayered) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTextureLayered) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CompressedTextureLayered) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CompressedTextureLayered) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ConcavePolygonShape2D struct {_ [0]*ConcavePolygonShape2D; ptr gd.Pointer}

//go:nosplit
func (self ConcavePolygonShape2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ConcavePolygonShape2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ConcavePolygonShape2D) Super() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConcavePolygonShape2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConcavePolygonShape2D) AsConcavePolygonShape2D() [1]ConcavePolygonShape2D { return [1]ConcavePolygonShape2D{self} }


//go:nosplit
func (self ConcavePolygonShape2D) AsShape2D() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConcavePolygonShape2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConcavePolygonShape2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ConcavePolygonShape2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ConcavePolygonShape3D struct {_ [0]*ConcavePolygonShape3D; ptr gd.Pointer}

//go:nosplit
func (self ConcavePolygonShape3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ConcavePolygonShape3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ConcavePolygonShape3D) Super() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConcavePolygonShape3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConcavePolygonShape3D) AsConcavePolygonShape3D() [1]ConcavePolygonShape3D { return [1]ConcavePolygonShape3D{self} }


//go:nosplit
func (self ConcavePolygonShape3D) AsShape3D() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConcavePolygonShape3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConcavePolygonShape3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ConcavePolygonShape3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ConeTwistJoint3DParam int64
type ConeTwistJoint3D struct {_ [0]*ConeTwistJoint3D; ptr gd.Pointer}

//go:nosplit
func (self ConeTwistJoint3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ConeTwistJoint3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ConeTwistJoint3D) Super() [1]Joint3D { return *(*[1]Joint3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConeTwistJoint3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConeTwistJoint3D) AsConeTwistJoint3D() [1]ConeTwistJoint3D { return [1]ConeTwistJoint3D{self} }


//go:nosplit
func (self ConeTwistJoint3D) AsJoint3D() [1]Joint3D { return *(*[1]Joint3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConeTwistJoint3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConeTwistJoint3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ConeTwistJoint3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ConfigFile struct {_ [0]*ConfigFile; ptr gd.Pointer}

//go:nosplit
func (self ConfigFile) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ConfigFile) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ConfigFile) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConfigFile) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConfigFile) AsConfigFile() [1]ConfigFile { return [1]ConfigFile{self} }


//go:nosplit
func (self ConfigFile) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ConfigFile) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ConfirmationDialog struct {_ [0]*ConfirmationDialog; ptr gd.Pointer}

//go:nosplit
func (self ConfirmationDialog) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ConfirmationDialog) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ConfirmationDialog) Super() [1]AcceptDialog { return *(*[1]AcceptDialog)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConfirmationDialog) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConfirmationDialog) AsConfirmationDialog() [1]ConfirmationDialog { return [1]ConfirmationDialog{self} }


//go:nosplit
func (self ConfirmationDialog) AsAcceptDialog() [1]AcceptDialog { return *(*[1]AcceptDialog)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConfirmationDialog) AsWindow() [1]Window { return *(*[1]Window)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConfirmationDialog) AsViewport() [1]Viewport { return *(*[1]Viewport)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConfirmationDialog) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ConfirmationDialog) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Container struct {_ [0]*Container; ptr gd.Pointer}

//go:nosplit
func (self Container) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Container) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Container) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Container) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Container) AsContainer() [1]Container { return [1]Container{self} }


//go:nosplit
func (self Container) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Container) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Container) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Implement to return a list of allowed horizontal [enum Control.SizeFlags] for child nodes. This doesn't technically prevent the usages of any other size flags, if your implementation requires that. This only limits the options available to the user in the Inspector dock.
[b]Note:[/b] Having no size flags is equal to having [constant Control.SIZE_SHRINK_BEGIN]. As such, this value is always implicitly allowed.
*/
func (Container) _get_allowed_size_flags_horizontal(impl func(ptr unsafe.Pointer) gd.PackedInt32Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Implement to return a list of allowed vertical [enum Control.SizeFlags] for child nodes. This doesn't technically prevent the usages of any other size flags, if your implementation requires that. This only limits the options available to the user in the Inspector dock.
[b]Note:[/b] Having no size flags is equal to having [constant Control.SIZE_SHRINK_BEGIN]. As such, this value is always implicitly allowed.
*/
func (Container) _get_allowed_size_flags_vertical(impl func(ptr unsafe.Pointer) gd.PackedInt32Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (self Container) Virtual(name string) reflect.Value {
	switch name {
	case "_get_allowed_size_flags_horizontal": return reflect.ValueOf(self._get_allowed_size_flags_horizontal);
	case "_get_allowed_size_flags_vertical": return reflect.ValueOf(self._get_allowed_size_flags_vertical);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ControlFocusMode int64

type ControlCursorShape int64

type ControlLayoutPreset int64

type ControlLayoutPresetMode int64

type ControlSizeFlags int64

type ControlMouseFilter int64

type ControlGrowDirection int64

type ControlAnchor int64

type ControlLayoutDirection int64

type ControlTextDirection int64
type Control struct {_ [0]*Control; ptr gd.Pointer}

//go:nosplit
func (self Control) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Control) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Control) Super() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Control) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Control) AsControl() [1]Control { return [1]Control{self} }


//go:nosplit
func (self Control) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Control) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Virtual method to be implemented by the user. Returns whether the given [param point] is inside this control.
If not overridden, default behavior is checking if the point is within control's Rect.
[b]Note:[/b] If you want to check if a point is inside the control, you can use [code]Rect2(Vector2.ZERO, size).has_point(point)[/code].
*/
func (Control) _has_point(impl func(ptr unsafe.Pointer, point gd.Vector2) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var point = gd.UnsafeGet[gd.Vector2](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, point)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
User defined BiDi algorithm override function.
Returns an [Array] of [Vector3i] text ranges and text base directions, in the left-to-right order. Ranges should cover full source [param text] without overlaps. BiDi algorithm will be used on each range separately.
*/
func (Control) _structured_text_parser(impl func(ptr unsafe.Pointer, args gd.Array, text gd.String) gd.ArrayOf[gd.Vector3i], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var args = mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var text = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, args, text)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

/*
Virtual method to be implemented by the user. Returns the minimum size for this control. Alternative to [member custom_minimum_size] for controlling minimum size via code. The actual minimum size will be the max value of these two (in each axis separately).
If not overridden, defaults to [constant Vector2.ZERO].
[b]Note:[/b] This method will not be called when the script is attached to a [Control] node that already overrides its minimum size (e.g. [Label], [Button], [PanelContainer] etc.). It can only be used with most basic GUI nodes, like [Control], [Container], [Panel] etc.
*/
func (Control) _get_minimum_size(impl func(ptr unsafe.Pointer) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Virtual method to be implemented by the user. Returns the tooltip text for the position [param at_position] in control's local coordinates, which will typically appear when the cursor is resting over this control. See [method get_tooltip].
[b]Note:[/b] If this method returns an empty [String], no tooltip is displayed.
*/
func (Control) _get_tooltip(impl func(ptr unsafe.Pointer, at_position gd.Vector2) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var at_position = gd.UnsafeGet[gd.Vector2](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, at_position)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Godot calls this method to get data that can be dragged and dropped onto controls that expect drop data. Returns [code]null[/code] if there is no data to drag. Controls that want to receive drop data should implement [method _can_drop_data] and [method _drop_data]. [param at_position] is local to this control. Drag may be forced with [method force_drag].
A preview that will follow the mouse that should represent the data can be set with [method set_drag_preview]. A good time to set the preview is in this method.
[codeblocks]
[gdscript]
func _get_drag_data(position):
    var mydata = make_data() # This is your custom method generating the drag data.
    set_drag_preview(make_preview(mydata)) # This is your custom method generating the preview of the drag data.
    return mydata
[/gdscript]
[csharp]
public override Variant _GetDragData(Vector2 atPosition)
{
    var myData = MakeData(); // This is your custom method generating the drag data.
    SetDragPreview(MakePreview(myData)); // This is your custom method generating the preview of the drag data.
    return myData;
}
[/csharp]
[/codeblocks]
*/
func (Control) _get_drag_data(impl func(ptr unsafe.Pointer, at_position gd.Vector2) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var at_position = gd.UnsafeGet[gd.Vector2](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, at_position)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Godot calls this method to test if [param data] from a control's [method _get_drag_data] can be dropped at [param at_position]. [param at_position] is local to this control.
This method should only be used to test the data. Process the data in [method _drop_data].
[codeblocks]
[gdscript]
func _can_drop_data(position, data):
    # Check position if it is relevant to you
    # Otherwise, just check data
    return typeof(data) == TYPE_DICTIONARY and data.has("expected")
[/gdscript]
[csharp]
public override bool _CanDropData(Vector2 atPosition, Variant data)
{
    // Check position if it is relevant to you
    // Otherwise, just check data
    return data.VariantType == Variant.Type.Dictionary && data.AsGodotDictionary().ContainsKey("expected");
}
[/csharp]
[/codeblocks]
*/
func (Control) _can_drop_data(impl func(ptr unsafe.Pointer, at_position gd.Vector2, data gd.Variant) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var at_position = gd.UnsafeGet[gd.Vector2](p_args,0)
		var data = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, at_position, data)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Godot calls this method to pass you the [param data] from a control's [method _get_drag_data] result. Godot first calls [method _can_drop_data] to test if [param data] is allowed to drop at [param at_position] where [param at_position] is local to this control.
[codeblocks]
[gdscript]
func _can_drop_data(position, data):
    return typeof(data) == TYPE_DICTIONARY and data.has("color")

func _drop_data(position, data):
    var color = data["color"]
[/gdscript]
[csharp]
public override bool _CanDropData(Vector2 atPosition, Variant data)
{
    return data.VariantType == Variant.Type.Dictionary && dict.AsGodotDictionary().ContainsKey("color");
}

public override void _DropData(Vector2 atPosition, Variant data)
{
    Color color = data.AsGodotDictionary()["color"].AsColor();
}
[/csharp]
[/codeblocks]
*/
func (Control) _drop_data(impl func(ptr unsafe.Pointer, at_position gd.Vector2, data gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var at_position = gd.UnsafeGet[gd.Vector2](p_args,0)
		var data = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, at_position, data)
		ctx.End()
	}
}

/*
Virtual method to be implemented by the user. Returns a [Control] node that should be used as a tooltip instead of the default one. The [param for_text] includes the contents of the [member tooltip_text] property.
The returned node must be of type [Control] or Control-derived. It can have child nodes of any type. It is freed when the tooltip disappears, so make sure you always provide a new instance (if you want to use a pre-existing node from your scene tree, you can duplicate it and pass the duplicated instance). When [code]null[/code] or a non-Control node is returned, the default tooltip will be used instead.
The returned node will be added as child to a [PopupPanel], so you should only provide the contents of that panel. That [PopupPanel] can be themed using [method Theme.set_stylebox] for the type [code]"TooltipPanel"[/code] (see [member tooltip_text] for an example).
[b]Note:[/b] The tooltip is shrunk to minimal size. If you want to ensure it's fully visible, you might want to set its [member custom_minimum_size] to some non-zero value.
[b]Note:[/b] The node (and any relevant children) should be [member CanvasItem.visible] when returned, otherwise, the viewport that instantiates it will not be able to calculate its minimum size reliably.
[b]Example of usage with a custom-constructed node:[/b]
[codeblocks]
[gdscript]
func _make_custom_tooltip(for_text):
    var label = Label.new()
    label.text = for_text
    return label
[/gdscript]
[csharp]
public override Control _MakeCustomTooltip(string forText)
{
    var label = new Label();
    label.Text = forText;
    return label;
}
[/csharp]
[/codeblocks]
[b]Example of usage with a custom scene instance:[/b]
[codeblocks]
[gdscript]
func _make_custom_tooltip(for_text):
    var tooltip = preload("res://some_tooltip_scene.tscn").instantiate()
    tooltip.get_node("Label").text = for_text
    return tooltip
[/gdscript]
[csharp]
public override Control _MakeCustomTooltip(string forText)
{
    Node tooltip = ResourceLoader.Load<PackedScene>("res://some_tooltip_scene.tscn").Instantiate();
    tooltip.GetNode<Label>("Label").Text = forText;
    return tooltip;
}
[/csharp]
[/codeblocks]
*/
func (Control) _make_custom_tooltip(impl func(ptr unsafe.Pointer, for_text gd.String) gd.Object, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var for_text = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, for_text)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Virtual method to be implemented by the user. Use this method to process and accept inputs on UI elements. See [method accept_event].
[b]Example usage for clicking a control:[/b]
[codeblocks]
[gdscript]
func _gui_input(event):
    if event is InputEventMouseButton:
        if event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
            print("I've been clicked D:")
[/gdscript]
[csharp]
public override void _GuiInput(InputEvent @event)
{
    if (@event is InputEventMouseButton mb)
    {
        if (mb.ButtonIndex == MouseButton.Left && mb.Pressed)
        {
            GD.Print("I've been clicked D:");
        }
    }
}
[/csharp]
[/codeblocks]
The event won't trigger if:
* clicking outside the control (see [method _has_point]);
* control has [member mouse_filter] set to [constant MOUSE_FILTER_IGNORE];
* control is obstructed by another [Control] on top of it, which doesn't have [member mouse_filter] set to [constant MOUSE_FILTER_IGNORE];
* control's parent has [member mouse_filter] set to [constant MOUSE_FILTER_STOP] or has accepted the event;
* it happens outside the parent's rectangle and the parent has either [member clip_contents] enabled.
[b]Note:[/b] Event position is relative to the control origin.
*/
func (Control) _gui_input(impl func(ptr unsafe.Pointer, event InputEvent) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var event InputEvent
		event.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, event)
		ctx.End()
	}
}

func (self Control) Virtual(name string) reflect.Value {
	switch name {
	case "_has_point": return reflect.ValueOf(self._has_point);
	case "_structured_text_parser": return reflect.ValueOf(self._structured_text_parser);
	case "_get_minimum_size": return reflect.ValueOf(self._get_minimum_size);
	case "_get_tooltip": return reflect.ValueOf(self._get_tooltip);
	case "_get_drag_data": return reflect.ValueOf(self._get_drag_data);
	case "_can_drop_data": return reflect.ValueOf(self._can_drop_data);
	case "_drop_data": return reflect.ValueOf(self._drop_data);
	case "_make_custom_tooltip": return reflect.ValueOf(self._make_custom_tooltip);
	case "_gui_input": return reflect.ValueOf(self._gui_input);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ConvexPolygonShape2D struct {_ [0]*ConvexPolygonShape2D; ptr gd.Pointer}

//go:nosplit
func (self ConvexPolygonShape2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ConvexPolygonShape2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ConvexPolygonShape2D) Super() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConvexPolygonShape2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConvexPolygonShape2D) AsConvexPolygonShape2D() [1]ConvexPolygonShape2D { return [1]ConvexPolygonShape2D{self} }


//go:nosplit
func (self ConvexPolygonShape2D) AsShape2D() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConvexPolygonShape2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConvexPolygonShape2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ConvexPolygonShape2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ConvexPolygonShape3D struct {_ [0]*ConvexPolygonShape3D; ptr gd.Pointer}

//go:nosplit
func (self ConvexPolygonShape3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ConvexPolygonShape3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ConvexPolygonShape3D) Super() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConvexPolygonShape3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConvexPolygonShape3D) AsConvexPolygonShape3D() [1]ConvexPolygonShape3D { return [1]ConvexPolygonShape3D{self} }


//go:nosplit
func (self ConvexPolygonShape3D) AsShape3D() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConvexPolygonShape3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ConvexPolygonShape3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ConvexPolygonShape3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Crypto struct {_ [0]*Crypto; ptr gd.Pointer}

//go:nosplit
func (self Crypto) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Crypto) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Crypto) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Crypto) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Crypto) AsCrypto() [1]Crypto { return [1]Crypto{self} }


//go:nosplit
func (self Crypto) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Crypto) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CryptoKey struct {_ [0]*CryptoKey; ptr gd.Pointer}

//go:nosplit
func (self CryptoKey) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CryptoKey) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CryptoKey) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CryptoKey) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CryptoKey) AsCryptoKey() [1]CryptoKey { return [1]CryptoKey{self} }


//go:nosplit
func (self CryptoKey) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CryptoKey) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CryptoKey) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Cubemap struct {_ [0]*Cubemap; ptr gd.Pointer}

//go:nosplit
func (self Cubemap) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Cubemap) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Cubemap) Super() [1]ImageTextureLayered { return *(*[1]ImageTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Cubemap) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Cubemap) AsCubemap() [1]Cubemap { return [1]Cubemap{self} }


//go:nosplit
func (self Cubemap) AsImageTextureLayered() [1]ImageTextureLayered { return *(*[1]ImageTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Cubemap) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Cubemap) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Cubemap) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Cubemap) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Cubemap) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CubemapArray struct {_ [0]*CubemapArray; ptr gd.Pointer}

//go:nosplit
func (self CubemapArray) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CubemapArray) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CubemapArray) Super() [1]ImageTextureLayered { return *(*[1]ImageTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CubemapArray) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CubemapArray) AsCubemapArray() [1]CubemapArray { return [1]CubemapArray{self} }


//go:nosplit
func (self CubemapArray) AsImageTextureLayered() [1]ImageTextureLayered { return *(*[1]ImageTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CubemapArray) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CubemapArray) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CubemapArray) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CubemapArray) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CubemapArray) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CurveTangentMode int64
type Curve struct {_ [0]*Curve; ptr gd.Pointer}

//go:nosplit
func (self Curve) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Curve) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Curve) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Curve) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Curve) AsCurve() [1]Curve { return [1]Curve{self} }


//go:nosplit
func (self Curve) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Curve) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Curve) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Curve2D struct {_ [0]*Curve2D; ptr gd.Pointer}

//go:nosplit
func (self Curve2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Curve2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Curve2D) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Curve2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Curve2D) AsCurve2D() [1]Curve2D { return [1]Curve2D{self} }


//go:nosplit
func (self Curve2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Curve2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Curve2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Curve3D struct {_ [0]*Curve3D; ptr gd.Pointer}

//go:nosplit
func (self Curve3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Curve3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Curve3D) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Curve3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Curve3D) AsCurve3D() [1]Curve3D { return [1]Curve3D{self} }


//go:nosplit
func (self Curve3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Curve3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Curve3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type CurveTextureTextureMode int64
type CurveTexture struct {_ [0]*CurveTexture; ptr gd.Pointer}

//go:nosplit
func (self CurveTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CurveTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CurveTexture) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CurveTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CurveTexture) AsCurveTexture() [1]CurveTexture { return [1]CurveTexture{self} }


//go:nosplit
func (self CurveTexture) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CurveTexture) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CurveTexture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CurveTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CurveTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CurveXYZTexture struct {_ [0]*CurveXYZTexture; ptr gd.Pointer}

//go:nosplit
func (self CurveXYZTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CurveXYZTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CurveXYZTexture) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CurveXYZTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CurveXYZTexture) AsCurveXYZTexture() [1]CurveXYZTexture { return [1]CurveXYZTexture{self} }


//go:nosplit
func (self CurveXYZTexture) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CurveXYZTexture) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CurveXYZTexture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CurveXYZTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CurveXYZTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CylinderMesh struct {_ [0]*CylinderMesh; ptr gd.Pointer}

//go:nosplit
func (self CylinderMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CylinderMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CylinderMesh) Super() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CylinderMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CylinderMesh) AsCylinderMesh() [1]CylinderMesh { return [1]CylinderMesh{self} }


//go:nosplit
func (self CylinderMesh) AsPrimitiveMesh() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CylinderMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CylinderMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CylinderMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CylinderMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type CylinderShape3D struct {_ [0]*CylinderShape3D; ptr gd.Pointer}

//go:nosplit
func (self CylinderShape3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *CylinderShape3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self CylinderShape3D) Super() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CylinderShape3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CylinderShape3D) AsCylinderShape3D() [1]CylinderShape3D { return [1]CylinderShape3D{self} }


//go:nosplit
func (self CylinderShape3D) AsShape3D() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CylinderShape3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self CylinderShape3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self CylinderShape3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type DTLSServer struct {_ [0]*DTLSServer; ptr gd.Pointer}

//go:nosplit
func (self DTLSServer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *DTLSServer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self DTLSServer) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DTLSServer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DTLSServer) AsDTLSServer() [1]DTLSServer { return [1]DTLSServer{self} }


//go:nosplit
func (self DTLSServer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self DTLSServer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type DampedSpringJoint2D struct {_ [0]*DampedSpringJoint2D; ptr gd.Pointer}

//go:nosplit
func (self DampedSpringJoint2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *DampedSpringJoint2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self DampedSpringJoint2D) Super() [1]Joint2D { return *(*[1]Joint2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DampedSpringJoint2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DampedSpringJoint2D) AsDampedSpringJoint2D() [1]DampedSpringJoint2D { return [1]DampedSpringJoint2D{self} }


//go:nosplit
func (self DampedSpringJoint2D) AsJoint2D() [1]Joint2D { return *(*[1]Joint2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DampedSpringJoint2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DampedSpringJoint2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DampedSpringJoint2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self DampedSpringJoint2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type DecalDecalTexture int64
type Decal struct {_ [0]*Decal; ptr gd.Pointer}

//go:nosplit
func (self Decal) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Decal) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Decal) Super() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Decal) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Decal) AsDecal() [1]Decal { return [1]Decal{self} }


//go:nosplit
func (self Decal) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Decal) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Decal) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Decal) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type DirAccess struct {_ [0]*DirAccess; ptr gd.Pointer}

//go:nosplit
func (self DirAccess) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *DirAccess) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self DirAccess) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DirAccess) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DirAccess) AsDirAccess() [1]DirAccess { return [1]DirAccess{self} }


//go:nosplit
func (self DirAccess) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self DirAccess) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type DirectionalLight2D struct {_ [0]*DirectionalLight2D; ptr gd.Pointer}

//go:nosplit
func (self DirectionalLight2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *DirectionalLight2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self DirectionalLight2D) Super() [1]Light2D { return *(*[1]Light2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DirectionalLight2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DirectionalLight2D) AsDirectionalLight2D() [1]DirectionalLight2D { return [1]DirectionalLight2D{self} }


//go:nosplit
func (self DirectionalLight2D) AsLight2D() [1]Light2D { return *(*[1]Light2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DirectionalLight2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DirectionalLight2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DirectionalLight2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self DirectionalLight2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type DirectionalLight3DShadowMode int64

type DirectionalLight3DSkyMode int64
type DirectionalLight3D struct {_ [0]*DirectionalLight3D; ptr gd.Pointer}

//go:nosplit
func (self DirectionalLight3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *DirectionalLight3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self DirectionalLight3D) Super() [1]Light3D { return *(*[1]Light3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DirectionalLight3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DirectionalLight3D) AsDirectionalLight3D() [1]DirectionalLight3D { return [1]DirectionalLight3D{self} }


//go:nosplit
func (self DirectionalLight3D) AsLight3D() [1]Light3D { return *(*[1]Light3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DirectionalLight3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DirectionalLight3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DirectionalLight3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self DirectionalLight3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type DisplayServerFeature int64

type DisplayServerMouseMode int64

type DisplayServerScreenOrientation int64

type DisplayServerVirtualKeyboardType int64

type DisplayServerCursorShape int64

type DisplayServerFileDialogMode int64

type DisplayServerWindowMode int64

type DisplayServerWindowFlags int64

type DisplayServerWindowEvent int64

type DisplayServerVSyncMode int64

type DisplayServerHandleType int64

type DisplayServerTTSUtteranceEvent int64
type DisplayServer struct {_ [0]*DisplayServer; ptr gd.Pointer}

//go:nosplit
func (self DisplayServer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *DisplayServer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self DisplayServer) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DisplayServer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self DisplayServer) AsDisplayServer() [1]DisplayServer { return [1]DisplayServer{self} }

//go:nosplit

func (self DisplayServer) IsSingleton() {}

func (self DisplayServer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ENetConnectionCompressionMode int64

type ENetConnectionEventType int64

type ENetConnectionHostStatistic int64
type ENetConnection struct {_ [0]*ENetConnection; ptr gd.Pointer}

//go:nosplit
func (self ENetConnection) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ENetConnection) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ENetConnection) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ENetConnection) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ENetConnection) AsENetConnection() [1]ENetConnection { return [1]ENetConnection{self} }


//go:nosplit
func (self ENetConnection) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ENetConnection) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ENetMultiplayerPeer struct {_ [0]*ENetMultiplayerPeer; ptr gd.Pointer}

//go:nosplit
func (self ENetMultiplayerPeer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ENetMultiplayerPeer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ENetMultiplayerPeer) Super() [1]MultiplayerPeer { return *(*[1]MultiplayerPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ENetMultiplayerPeer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ENetMultiplayerPeer) AsENetMultiplayerPeer() [1]ENetMultiplayerPeer { return [1]ENetMultiplayerPeer{self} }


//go:nosplit
func (self ENetMultiplayerPeer) AsMultiplayerPeer() [1]MultiplayerPeer { return *(*[1]MultiplayerPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ENetMultiplayerPeer) AsPacketPeer() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ENetMultiplayerPeer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ENetMultiplayerPeer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ENetPacketPeerPeerState int64

type ENetPacketPeerPeerStatistic int64
type ENetPacketPeer struct {_ [0]*ENetPacketPeer; ptr gd.Pointer}

//go:nosplit
func (self ENetPacketPeer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ENetPacketPeer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ENetPacketPeer) Super() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ENetPacketPeer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ENetPacketPeer) AsENetPacketPeer() [1]ENetPacketPeer { return [1]ENetPacketPeer{self} }


//go:nosplit
func (self ENetPacketPeer) AsPacketPeer() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ENetPacketPeer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ENetPacketPeer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorCommandPalette struct {_ [0]*EditorCommandPalette; ptr gd.Pointer}

//go:nosplit
func (self EditorCommandPalette) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorCommandPalette) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorCommandPalette) Super() [1]ConfirmationDialog { return *(*[1]ConfirmationDialog)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorCommandPalette) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorCommandPalette) AsEditorCommandPalette() [1]EditorCommandPalette { return [1]EditorCommandPalette{self} }


//go:nosplit
func (self EditorCommandPalette) AsConfirmationDialog() [1]ConfirmationDialog { return *(*[1]ConfirmationDialog)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorCommandPalette) AsAcceptDialog() [1]AcceptDialog { return *(*[1]AcceptDialog)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorCommandPalette) AsWindow() [1]Window { return *(*[1]Window)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorCommandPalette) AsViewport() [1]Viewport { return *(*[1]Viewport)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorCommandPalette) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self EditorCommandPalette) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorDebuggerPlugin struct {_ [0]*EditorDebuggerPlugin; ptr gd.Pointer}

//go:nosplit
func (self EditorDebuggerPlugin) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorDebuggerPlugin) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorDebuggerPlugin) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorDebuggerPlugin) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorDebuggerPlugin) AsEditorDebuggerPlugin() [1]EditorDebuggerPlugin { return [1]EditorDebuggerPlugin{self} }


//go:nosplit
func (self EditorDebuggerPlugin) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Override this method to be notified whenever a new [EditorDebuggerSession] is created (the session may be inactive during this stage).
*/
func (EditorDebuggerPlugin) _setup_session(impl func(ptr unsafe.Pointer, session_id gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var session_id = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, session_id)
		ctx.End()
	}
}

/*
Override this method to enable receiving messages from the debugger. If [param capture] is "my_message" then messages starting with "my_message:" will be passes to the [method _capture] method.
*/
func (EditorDebuggerPlugin) _has_capture(impl func(ptr unsafe.Pointer, capture gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var capture = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, capture)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to process incoming messages. The [param session_id] is the ID of the [EditorDebuggerSession] that received the message (which you can retrieve via [method get_session]).
*/
func (EditorDebuggerPlugin) _capture(impl func(ptr unsafe.Pointer, message gd.String, data gd.Array, session_id gd.Int) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var message = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var data = mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var session_id = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, message, data, session_id)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to be notified when a breakpoint line has been clicked in the debugger breakpoint panel.
*/
func (EditorDebuggerPlugin) _goto_script_line(impl func(ptr unsafe.Pointer, script Script, line gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var script Script
		script.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var line = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, script, line)
		ctx.End()
	}
}

/*
Override this method to be notified when all breakpoints are cleared in the editor.
*/
func (EditorDebuggerPlugin) _breakpoints_cleared_in_tree(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Override this method to be notified when a breakpoint is set in the editor.
*/
func (EditorDebuggerPlugin) _breakpoint_set_in_tree(impl func(ptr unsafe.Pointer, script Script, line gd.Int, enabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var script Script
		script.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var line = gd.UnsafeGet[gd.Int](p_args,1)
		var enabled = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, script, line, enabled)
		ctx.End()
	}
}

func (self EditorDebuggerPlugin) Virtual(name string) reflect.Value {
	switch name {
	case "_setup_session": return reflect.ValueOf(self._setup_session);
	case "_has_capture": return reflect.ValueOf(self._has_capture);
	case "_capture": return reflect.ValueOf(self._capture);
	case "_goto_script_line": return reflect.ValueOf(self._goto_script_line);
	case "_breakpoints_cleared_in_tree": return reflect.ValueOf(self._breakpoints_cleared_in_tree);
	case "_breakpoint_set_in_tree": return reflect.ValueOf(self._breakpoint_set_in_tree);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorDebuggerSession struct {_ [0]*EditorDebuggerSession; ptr gd.Pointer}

//go:nosplit
func (self EditorDebuggerSession) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorDebuggerSession) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorDebuggerSession) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorDebuggerSession) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorDebuggerSession) AsEditorDebuggerSession() [1]EditorDebuggerSession { return [1]EditorDebuggerSession{self} }


//go:nosplit
func (self EditorDebuggerSession) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorDebuggerSession) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorExportPlatform struct {_ [0]*EditorExportPlatform; ptr gd.Pointer}

//go:nosplit
func (self EditorExportPlatform) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorExportPlatform) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorExportPlatform) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatform) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatform) AsEditorExportPlatform() [1]EditorExportPlatform { return [1]EditorExportPlatform{self} }


//go:nosplit
func (self EditorExportPlatform) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorExportPlatform) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorExportPlatformAndroid struct {_ [0]*EditorExportPlatformAndroid; ptr gd.Pointer}

//go:nosplit
func (self EditorExportPlatformAndroid) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorExportPlatformAndroid) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorExportPlatformAndroid) Super() [1]EditorExportPlatform { return *(*[1]EditorExportPlatform)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformAndroid) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformAndroid) AsEditorExportPlatformAndroid() [1]EditorExportPlatformAndroid { return [1]EditorExportPlatformAndroid{self} }


//go:nosplit
func (self EditorExportPlatformAndroid) AsEditorExportPlatform() [1]EditorExportPlatform { return *(*[1]EditorExportPlatform)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformAndroid) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorExportPlatformAndroid) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorExportPlatformIOS struct {_ [0]*EditorExportPlatformIOS; ptr gd.Pointer}

//go:nosplit
func (self EditorExportPlatformIOS) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorExportPlatformIOS) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorExportPlatformIOS) Super() [1]EditorExportPlatform { return *(*[1]EditorExportPlatform)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformIOS) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformIOS) AsEditorExportPlatformIOS() [1]EditorExportPlatformIOS { return [1]EditorExportPlatformIOS{self} }


//go:nosplit
func (self EditorExportPlatformIOS) AsEditorExportPlatform() [1]EditorExportPlatform { return *(*[1]EditorExportPlatform)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformIOS) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorExportPlatformIOS) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorExportPlatformLinuxBSD struct {_ [0]*EditorExportPlatformLinuxBSD; ptr gd.Pointer}

//go:nosplit
func (self EditorExportPlatformLinuxBSD) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorExportPlatformLinuxBSD) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorExportPlatformLinuxBSD) Super() [1]EditorExportPlatformPC { return *(*[1]EditorExportPlatformPC)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformLinuxBSD) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformLinuxBSD) AsEditorExportPlatformLinuxBSD() [1]EditorExportPlatformLinuxBSD { return [1]EditorExportPlatformLinuxBSD{self} }


//go:nosplit
func (self EditorExportPlatformLinuxBSD) AsEditorExportPlatformPC() [1]EditorExportPlatformPC { return *(*[1]EditorExportPlatformPC)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformLinuxBSD) AsEditorExportPlatform() [1]EditorExportPlatform { return *(*[1]EditorExportPlatform)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformLinuxBSD) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorExportPlatformLinuxBSD) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorExportPlatformMacOS struct {_ [0]*EditorExportPlatformMacOS; ptr gd.Pointer}

//go:nosplit
func (self EditorExportPlatformMacOS) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorExportPlatformMacOS) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorExportPlatformMacOS) Super() [1]EditorExportPlatform { return *(*[1]EditorExportPlatform)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformMacOS) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformMacOS) AsEditorExportPlatformMacOS() [1]EditorExportPlatformMacOS { return [1]EditorExportPlatformMacOS{self} }


//go:nosplit
func (self EditorExportPlatformMacOS) AsEditorExportPlatform() [1]EditorExportPlatform { return *(*[1]EditorExportPlatform)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformMacOS) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorExportPlatformMacOS) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorExportPlatformPC struct {_ [0]*EditorExportPlatformPC; ptr gd.Pointer}

//go:nosplit
func (self EditorExportPlatformPC) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorExportPlatformPC) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorExportPlatformPC) Super() [1]EditorExportPlatform { return *(*[1]EditorExportPlatform)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformPC) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformPC) AsEditorExportPlatformPC() [1]EditorExportPlatformPC { return [1]EditorExportPlatformPC{self} }


//go:nosplit
func (self EditorExportPlatformPC) AsEditorExportPlatform() [1]EditorExportPlatform { return *(*[1]EditorExportPlatform)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformPC) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorExportPlatformPC) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorExportPlatformWeb struct {_ [0]*EditorExportPlatformWeb; ptr gd.Pointer}

//go:nosplit
func (self EditorExportPlatformWeb) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorExportPlatformWeb) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorExportPlatformWeb) Super() [1]EditorExportPlatform { return *(*[1]EditorExportPlatform)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformWeb) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformWeb) AsEditorExportPlatformWeb() [1]EditorExportPlatformWeb { return [1]EditorExportPlatformWeb{self} }


//go:nosplit
func (self EditorExportPlatformWeb) AsEditorExportPlatform() [1]EditorExportPlatform { return *(*[1]EditorExportPlatform)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformWeb) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorExportPlatformWeb) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorExportPlatformWindows struct {_ [0]*EditorExportPlatformWindows; ptr gd.Pointer}

//go:nosplit
func (self EditorExportPlatformWindows) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorExportPlatformWindows) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorExportPlatformWindows) Super() [1]EditorExportPlatformPC { return *(*[1]EditorExportPlatformPC)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformWindows) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformWindows) AsEditorExportPlatformWindows() [1]EditorExportPlatformWindows { return [1]EditorExportPlatformWindows{self} }


//go:nosplit
func (self EditorExportPlatformWindows) AsEditorExportPlatformPC() [1]EditorExportPlatformPC { return *(*[1]EditorExportPlatformPC)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformWindows) AsEditorExportPlatform() [1]EditorExportPlatform { return *(*[1]EditorExportPlatform)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlatformWindows) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorExportPlatformWindows) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorExportPlugin struct {_ [0]*EditorExportPlugin; ptr gd.Pointer}

//go:nosplit
func (self EditorExportPlugin) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorExportPlugin) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorExportPlugin) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlugin) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorExportPlugin) AsEditorExportPlugin() [1]EditorExportPlugin { return [1]EditorExportPlugin{self} }


//go:nosplit
func (self EditorExportPlugin) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Virtual method to be overridden by the user. Called for each exported file before [method _customize_resource] and [method _customize_scene]. The arguments can be used to identify the file. [param path] is the path of the file, [param type] is the [Resource] represented by the file (e.g. [PackedScene]), and [param features] is the list of features for the export.
Calling [method skip] inside this callback will make the file not included in the export.
*/
func (EditorExportPlugin) _export_file(impl func(ptr unsafe.Pointer, path gd.String, atype gd.String, features gd.PackedStringArray) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var atype = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var features = mmm.Let[gd.PackedStringArray](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, path, atype, features)
		ctx.End()
	}
}

/*
Virtual method to be overridden by the user. It is called when the export starts and provides all information about the export. [param features] is the list of features for the export, [param is_debug] is [code]true[/code] for debug builds, [param path] is the target path for the exported project. [param flags] is only used when running a runnable profile, e.g. when using native run on Android.
*/
func (EditorExportPlugin) _export_begin(impl func(ptr unsafe.Pointer, features gd.PackedStringArray, is_debug bool, path gd.String, flags gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var features = mmm.Let[gd.PackedStringArray](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,0))
		var is_debug = gd.UnsafeGet[bool](p_args,1)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		var flags = gd.UnsafeGet[gd.Int](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, features, is_debug, path, flags)
		ctx.End()
	}
}

/*
Virtual method to be overridden by the user. Called when the export is finished.
*/
func (EditorExportPlugin) _export_end(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Return [code]true[/code] if this plugin will customize resources based on the platform and features used.
When enabled, [method _get_customization_configuration_hash] and [method _customize_resource] will be called and must be implemented.
*/
func (EditorExportPlugin) _begin_customize_resources(impl func(ptr unsafe.Pointer, platform EditorExportPlatform, features gd.PackedStringArray) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var platform EditorExportPlatform
		platform.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var features = mmm.Let[gd.PackedStringArray](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, platform, features)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Customize a resource. If changes are made to it, return the same or a new resource. Otherwise, return [code]null[/code].
The [i]path[/i] argument is only used when customizing an actual file, otherwise this means that this resource is part of another one and it will be empty.
Implementing this method is required if [method _begin_customize_resources] returns [code]true[/code].
*/
func (EditorExportPlugin) _customize_resource(impl func(ptr unsafe.Pointer, resource Resource, path gd.String) Resource, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var resource Resource
		resource.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, resource, path)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Return [code]true[/code] if this plugin will customize scenes based on the platform and features used.
When enabled, [method _get_customization_configuration_hash] and [method _customize_scene] will be called and must be implemented.
*/
func (EditorExportPlugin) _begin_customize_scenes(impl func(ptr unsafe.Pointer, platform EditorExportPlatform, features gd.PackedStringArray) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var platform EditorExportPlatform
		platform.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var features = mmm.Let[gd.PackedStringArray](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, platform, features)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Customize a scene. If changes are made to it, return the same or a new scene. Otherwise, return [code]null[/code]. If a new scene is returned, it is up to you to dispose of the old one.
Implementing this method is required if [method _begin_customize_scenes] returns [code]true[/code].
*/
func (EditorExportPlugin) _customize_scene(impl func(ptr unsafe.Pointer, scene Node, path gd.String) Node, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var scene Node
		scene.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, scene, path)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Return a hash based on the configuration passed (for both scenes and resources). This helps keep separate caches for separate export configurations.
Implementing this method is required if [method _begin_customize_resources] returns [code]true[/code].
*/
func (EditorExportPlugin) _get_customization_configuration_hash(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
This is called when the customization process for scenes ends.
*/
func (EditorExportPlugin) _end_customize_scenes(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
This is called when the customization process for resources ends.
*/
func (EditorExportPlugin) _end_customize_resources(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Return a list of export options that can be configured for this export plugin.
Each element in the return value is a [Dictionary] with the following keys:
- [code]option[/code]: A dictionary with the structure documented by [method Object.get_property_list], but all keys are optional.
- [code]default_value[/code]: The default value for this option.
- [code]update_visibility[/code]: An optional boolean value. If set to [code]true[/code], the preset will emit [signal Object.property_list_changed] when the option is changed.
*/
func (EditorExportPlugin) _get_export_options(impl func(ptr unsafe.Pointer, platform EditorExportPlatform) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var platform EditorExportPlatform
		platform.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, platform)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

/*
Return a [Dictionary] of override values for export options, that will be used instead of user-provided values. Overridden options will be hidden from the user interface.
[codeblock]
class MyExportPlugin extends EditorExportPlugin:
    func _get_name() -> String:
        return "MyExportPlugin"

    func _supports_platform(platform) -> bool:
        if platform is EditorExportPlatformPC:
            # Run on all desktop platforms including Windows, MacOS and Linux.
            return true
        return false

    func _get_export_options_overrides(platform) -> Dictionary:
        # Override "Embed PCK" to always be enabled.
        return {
            "binary_format/embed_pck": true,
        }
[/codeblock]
*/
func (EditorExportPlugin) _get_export_options_overrides(impl func(ptr unsafe.Pointer, platform EditorExportPlatform) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var platform EditorExportPlatform
		platform.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, platform)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Return [code]true[/code], if the result of [method _get_export_options] has changed and the export options of preset corresponding to [param platform] should be updated.
*/
func (EditorExportPlugin) _should_update_export_options(impl func(ptr unsafe.Pointer, platform EditorExportPlatform) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var platform EditorExportPlatform
		platform.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, platform)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Check the requirements for the given [param option] and return a non-empty warning string if they are not met.
[b]Note:[/b] Use [method get_option] to check the value of the export options.
*/
func (EditorExportPlugin) _get_export_option_warning(impl func(ptr unsafe.Pointer, platform EditorExportPlatform, option gd.String) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var platform EditorExportPlatform
		platform.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var option = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, platform, option)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Return a [PackedStringArray] of additional features this preset, for the given [param platform], should have.
*/
func (EditorExportPlugin) _get_export_features(impl func(ptr unsafe.Pointer, platform EditorExportPlatform, debug bool) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var platform EditorExportPlatform
		platform.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var debug = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, platform, debug)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Return the name identifier of this plugin (for future identification by the exporter). The plugins are sorted by name before exporting.
Implementing this method is required.
*/
func (EditorExportPlugin) _get_name(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Return [code]true[/code] if the plugin supports the given [param platform].
*/
func (EditorExportPlugin) _supports_platform(impl func(ptr unsafe.Pointer, platform EditorExportPlatform) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var platform EditorExportPlatform
		platform.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, platform)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Virtual method to be overridden by the user. This is called to retrieve the set of Android dependencies provided by this plugin. Each returned Android dependency should have the format of an Android remote binary dependency: [code]org.godot.example:my-plugin:0.0.0[/code]
For more information see [url=https://developer.android.com/build/dependencies?agpversion=4.1#dependency-types]Android documentation on dependencies[/url].
[b]Note:[/b] Only supported on Android and requires [member EditorExportPlatformAndroid.gradle_build/use_gradle_build] to be enabled.
*/
func (EditorExportPlugin) _get_android_dependencies(impl func(ptr unsafe.Pointer, platform EditorExportPlatform, debug bool) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var platform EditorExportPlatform
		platform.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var debug = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, platform, debug)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Virtual method to be overridden by the user. This is called to retrieve the URLs of Maven repositories for the set of Android dependencies provided by this plugin.
For more information see [url=https://docs.gradle.org/current/userguide/dependency_management.html#sec:maven_repo]Gradle documentation on dependency management[/url].
[b]Note:[/b] Google's Maven repo and the Maven Central repo are already included by default.
[b]Note:[/b] Only supported on Android and requires [member EditorExportPlatformAndroid.gradle_build/use_gradle_build] to be enabled.
*/
func (EditorExportPlugin) _get_android_dependencies_maven_repos(impl func(ptr unsafe.Pointer, platform EditorExportPlatform, debug bool) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var platform EditorExportPlatform
		platform.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var debug = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, platform, debug)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Virtual method to be overridden by the user. This is called to retrieve the local paths of the Android libraries archive (AAR) files provided by this plugin.
[b]Note:[/b] Relative paths [b]must[/b] be relative to Godot's [code]res://addons/[/code] directory. For example, an AAR file located under [code]res://addons/hello_world_plugin/HelloWorld.release.aar[/code] can be returned as an absolute path using [code]res://addons/hello_world_plugin/HelloWorld.release.aar[/code] or a relative path using [code]hello_world_plugin/HelloWorld.release.aar[/code].
[b]Note:[/b] Only supported on Android and requires [member EditorExportPlatformAndroid.gradle_build/use_gradle_build] to be enabled.
*/
func (EditorExportPlugin) _get_android_libraries(impl func(ptr unsafe.Pointer, platform EditorExportPlatform, debug bool) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var platform EditorExportPlatform
		platform.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var debug = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, platform, debug)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Virtual method to be overridden by the user. This is used at export time to update the contents of the [code]activity[/code] element in the generated Android manifest.
[b]Note:[/b] Only supported on Android and requires [member EditorExportPlatformAndroid.gradle_build/use_gradle_build] to be enabled.
*/
func (EditorExportPlugin) _get_android_manifest_activity_element_contents(impl func(ptr unsafe.Pointer, platform EditorExportPlatform, debug bool) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var platform EditorExportPlatform
		platform.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var debug = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, platform, debug)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Virtual method to be overridden by the user. This is used at export time to update the contents of the [code]application[/code] element in the generated Android manifest.
[b]Note:[/b] Only supported on Android and requires [member EditorExportPlatformAndroid.gradle_build/use_gradle_build] to be enabled.
*/
func (EditorExportPlugin) _get_android_manifest_application_element_contents(impl func(ptr unsafe.Pointer, platform EditorExportPlatform, debug bool) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var platform EditorExportPlatform
		platform.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var debug = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, platform, debug)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Virtual method to be overridden by the user. This is used at export time to update the contents of the [code]manifest[/code] element in the generated Android manifest.
[b]Note:[/b] Only supported on Android and requires [member EditorExportPlatformAndroid.gradle_build/use_gradle_build] to be enabled.
*/
func (EditorExportPlugin) _get_android_manifest_element_contents(impl func(ptr unsafe.Pointer, platform EditorExportPlatform, debug bool) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var platform EditorExportPlatform
		platform.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var debug = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, platform, debug)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (self EditorExportPlugin) Virtual(name string) reflect.Value {
	switch name {
	case "_export_file": return reflect.ValueOf(self._export_file);
	case "_export_begin": return reflect.ValueOf(self._export_begin);
	case "_export_end": return reflect.ValueOf(self._export_end);
	case "_begin_customize_resources": return reflect.ValueOf(self._begin_customize_resources);
	case "_customize_resource": return reflect.ValueOf(self._customize_resource);
	case "_begin_customize_scenes": return reflect.ValueOf(self._begin_customize_scenes);
	case "_customize_scene": return reflect.ValueOf(self._customize_scene);
	case "_get_customization_configuration_hash": return reflect.ValueOf(self._get_customization_configuration_hash);
	case "_end_customize_scenes": return reflect.ValueOf(self._end_customize_scenes);
	case "_end_customize_resources": return reflect.ValueOf(self._end_customize_resources);
	case "_get_export_options": return reflect.ValueOf(self._get_export_options);
	case "_get_export_options_overrides": return reflect.ValueOf(self._get_export_options_overrides);
	case "_should_update_export_options": return reflect.ValueOf(self._should_update_export_options);
	case "_get_export_option_warning": return reflect.ValueOf(self._get_export_option_warning);
	case "_get_export_features": return reflect.ValueOf(self._get_export_features);
	case "_get_name": return reflect.ValueOf(self._get_name);
	case "_supports_platform": return reflect.ValueOf(self._supports_platform);
	case "_get_android_dependencies": return reflect.ValueOf(self._get_android_dependencies);
	case "_get_android_dependencies_maven_repos": return reflect.ValueOf(self._get_android_dependencies_maven_repos);
	case "_get_android_libraries": return reflect.ValueOf(self._get_android_libraries);
	case "_get_android_manifest_activity_element_contents": return reflect.ValueOf(self._get_android_manifest_activity_element_contents);
	case "_get_android_manifest_application_element_contents": return reflect.ValueOf(self._get_android_manifest_application_element_contents);
	case "_get_android_manifest_element_contents": return reflect.ValueOf(self._get_android_manifest_element_contents);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type EditorFeatureProfileFeature int64
type EditorFeatureProfile struct {_ [0]*EditorFeatureProfile; ptr gd.Pointer}

//go:nosplit
func (self EditorFeatureProfile) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorFeatureProfile) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorFeatureProfile) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorFeatureProfile) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorFeatureProfile) AsEditorFeatureProfile() [1]EditorFeatureProfile { return [1]EditorFeatureProfile{self} }


//go:nosplit
func (self EditorFeatureProfile) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorFeatureProfile) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type EditorFileDialogFileMode int64

type EditorFileDialogAccess int64

type EditorFileDialogDisplayMode int64
type EditorFileDialog struct {_ [0]*EditorFileDialog; ptr gd.Pointer}

//go:nosplit
func (self EditorFileDialog) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorFileDialog) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorFileDialog) Super() [1]ConfirmationDialog { return *(*[1]ConfirmationDialog)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorFileDialog) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorFileDialog) AsEditorFileDialog() [1]EditorFileDialog { return [1]EditorFileDialog{self} }


//go:nosplit
func (self EditorFileDialog) AsConfirmationDialog() [1]ConfirmationDialog { return *(*[1]ConfirmationDialog)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorFileDialog) AsAcceptDialog() [1]AcceptDialog { return *(*[1]AcceptDialog)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorFileDialog) AsWindow() [1]Window { return *(*[1]Window)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorFileDialog) AsViewport() [1]Viewport { return *(*[1]Viewport)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorFileDialog) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self EditorFileDialog) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorFileSystem struct {_ [0]*EditorFileSystem; ptr gd.Pointer}

//go:nosplit
func (self EditorFileSystem) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorFileSystem) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorFileSystem) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorFileSystem) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorFileSystem) AsEditorFileSystem() [1]EditorFileSystem { return [1]EditorFileSystem{self} }


//go:nosplit
func (self EditorFileSystem) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self EditorFileSystem) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorFileSystemDirectory struct {_ [0]*EditorFileSystemDirectory; ptr gd.Pointer}

//go:nosplit
func (self EditorFileSystemDirectory) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorFileSystemDirectory) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorFileSystemDirectory) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorFileSystemDirectory) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorFileSystemDirectory) AsEditorFileSystemDirectory() [1]EditorFileSystemDirectory { return [1]EditorFileSystemDirectory{self} }

func (self EditorFileSystemDirectory) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorFileSystemImportFormatSupportQuery struct {_ [0]*EditorFileSystemImportFormatSupportQuery; ptr gd.Pointer}

//go:nosplit
func (self EditorFileSystemImportFormatSupportQuery) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorFileSystemImportFormatSupportQuery) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorFileSystemImportFormatSupportQuery) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorFileSystemImportFormatSupportQuery) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorFileSystemImportFormatSupportQuery) AsEditorFileSystemImportFormatSupportQuery() [1]EditorFileSystemImportFormatSupportQuery { return [1]EditorFileSystemImportFormatSupportQuery{self} }


//go:nosplit
func (self EditorFileSystemImportFormatSupportQuery) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Return whether this importer is active.
*/
func (EditorFileSystemImportFormatSupportQuery) _is_active(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Return the file extensions supported.
*/
func (EditorFileSystemImportFormatSupportQuery) _get_file_extensions(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Query support. Return false if import must not continue.
*/
func (EditorFileSystemImportFormatSupportQuery) _query(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self EditorFileSystemImportFormatSupportQuery) Virtual(name string) reflect.Value {
	switch name {
	case "_is_active": return reflect.ValueOf(self._is_active);
	case "_get_file_extensions": return reflect.ValueOf(self._get_file_extensions);
	case "_query": return reflect.ValueOf(self._query);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorImportPlugin struct {_ [0]*EditorImportPlugin; ptr gd.Pointer}

//go:nosplit
func (self EditorImportPlugin) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorImportPlugin) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorImportPlugin) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorImportPlugin) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorImportPlugin) AsEditorImportPlugin() [1]EditorImportPlugin { return [1]EditorImportPlugin{self} }


//go:nosplit
func (self EditorImportPlugin) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorImportPlugin) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Gets the unique name of the importer.
*/
func (EditorImportPlugin) _get_importer_name(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Gets the name to display in the import window. You should choose this name as a continuation to "Import as", e.g. "Import as Special Mesh".
*/
func (EditorImportPlugin) _get_visible_name(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Gets the number of initial presets defined by the plugin. Use [method _get_import_options] to get the default options for the preset and [method _get_preset_name] to get the name of the preset.
*/
func (EditorImportPlugin) _get_preset_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Gets the name of the options preset at this index.
*/
func (EditorImportPlugin) _get_preset_name(impl func(ptr unsafe.Pointer, preset_index gd.Int) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var preset_index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, preset_index)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Gets the list of file extensions to associate with this loader (case-insensitive). e.g. [code]["obj"][/code].
*/
func (EditorImportPlugin) _get_recognized_extensions(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Gets the options and default values for the preset at this index. Returns an Array of Dictionaries with the following keys: [code]name[/code], [code]default_value[/code], [code]property_hint[/code] (optional), [code]hint_string[/code] (optional), [code]usage[/code] (optional).
*/
func (EditorImportPlugin) _get_import_options(impl func(ptr unsafe.Pointer, path gd.String, preset_index gd.Int) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var preset_index = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path, preset_index)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

/*
Gets the extension used to save this resource in the [code].godot/imported[/code] directory (see [member ProjectSettings.application/config/use_hidden_project_data_directory]).
*/
func (EditorImportPlugin) _get_save_extension(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Gets the Godot resource type associated with this loader. e.g. [code]"Mesh"[/code] or [code]"Animation"[/code].
*/
func (EditorImportPlugin) _get_resource_type(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Gets the priority of this plugin for the recognized extension. Higher priority plugins will be preferred. The default priority is [code]1.0[/code].
*/
func (EditorImportPlugin) _get_priority(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Gets the order of this importer to be run when importing resources. Importers with [i]lower[/i] import orders will be called first, and higher values will be called later. Use this to ensure the importer runs after the dependencies are already imported. The default import order is [code]0[/code] unless overridden by a specific importer. See [enum ResourceImporter.ImportOrder] for some predefined values.
*/
func (EditorImportPlugin) _get_import_order(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
This method can be overridden to hide specific import options if conditions are met. This is mainly useful for hiding options that depend on others if one of them is disabled. For example:
[codeblocks]
[gdscript]
func _get_option_visibility(option, options):
    # Only show the lossy quality setting if the compression mode is set to "Lossy".
    if option == "compress/lossy_quality" and options.has("compress/mode"):
        return int(options["compress/mode"]) == COMPRESS_LOSSY # This is a constant that you set

    return true
[/gdscript]
[csharp]
public void _GetOptionVisibility(string option, Godot.Collections.Dictionary options)
{
    // Only show the lossy quality setting if the compression mode is set to "Lossy".
    if (option == "compress/lossy_quality" && options.ContainsKey("compress/mode"))
    {
        return (int)options["compress/mode"] == CompressLossy; // This is a constant you set
    }

    return true;
}
[/csharp]
[/codeblocks]
Returns [code]true[/code] to make all options always visible.
*/
func (EditorImportPlugin) _get_option_visibility(impl func(ptr unsafe.Pointer, path gd.String, option_name gd.StringName, options gd.Dictionary) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var option_name = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var options = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path, option_name, options)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Imports [param source_file] into [param save_path] with the import [param options] specified. The [param platform_variants] and [param gen_files] arrays will be modified by this function.
This method must be overridden to do the actual importing work. See this class' description for an example of overriding this method.
*/
func (EditorImportPlugin) _import(impl func(ptr unsafe.Pointer, source_file gd.String, save_path gd.String, options gd.Dictionary, platform_variants gd.ArrayOf[gd.String], gen_files gd.ArrayOf[gd.String]) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var source_file = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var save_path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var options = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		var platform_variants = gd.TypedArray[gd.String](mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,3)))
		var gen_files = gd.TypedArray[gd.String](mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,4)))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, source_file, save_path, options, platform_variants, gen_files)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Tells whether this importer can be run in parallel on threads, or, on the contrary, it's only safe for the editor to call it from the main thread, for one file at a time.
If this method is not overridden, it will return [code]true[/code] by default (i.e., safe for parallel importing).
*/
func (EditorImportPlugin) _can_import_threaded(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self EditorImportPlugin) Virtual(name string) reflect.Value {
	switch name {
	case "_get_importer_name": return reflect.ValueOf(self._get_importer_name);
	case "_get_visible_name": return reflect.ValueOf(self._get_visible_name);
	case "_get_preset_count": return reflect.ValueOf(self._get_preset_count);
	case "_get_preset_name": return reflect.ValueOf(self._get_preset_name);
	case "_get_recognized_extensions": return reflect.ValueOf(self._get_recognized_extensions);
	case "_get_import_options": return reflect.ValueOf(self._get_import_options);
	case "_get_save_extension": return reflect.ValueOf(self._get_save_extension);
	case "_get_resource_type": return reflect.ValueOf(self._get_resource_type);
	case "_get_priority": return reflect.ValueOf(self._get_priority);
	case "_get_import_order": return reflect.ValueOf(self._get_import_order);
	case "_get_option_visibility": return reflect.ValueOf(self._get_option_visibility);
	case "_import": return reflect.ValueOf(self._import);
	case "_can_import_threaded": return reflect.ValueOf(self._can_import_threaded);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorInspector struct {_ [0]*EditorInspector; ptr gd.Pointer}

//go:nosplit
func (self EditorInspector) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorInspector) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorInspector) Super() [1]ScrollContainer { return *(*[1]ScrollContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorInspector) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorInspector) AsEditorInspector() [1]EditorInspector { return [1]EditorInspector{self} }


//go:nosplit
func (self EditorInspector) AsScrollContainer() [1]ScrollContainer { return *(*[1]ScrollContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorInspector) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorInspector) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorInspector) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorInspector) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self EditorInspector) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorInspectorPlugin struct {_ [0]*EditorInspectorPlugin; ptr gd.Pointer}

//go:nosplit
func (self EditorInspectorPlugin) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorInspectorPlugin) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorInspectorPlugin) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorInspectorPlugin) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorInspectorPlugin) AsEditorInspectorPlugin() [1]EditorInspectorPlugin { return [1]EditorInspectorPlugin{self} }


//go:nosplit
func (self EditorInspectorPlugin) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Returns [code]true[/code] if this object can be handled by this plugin.
*/
func (EditorInspectorPlugin) _can_handle(impl func(ptr unsafe.Pointer, object gd.Object) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var object gd.Object
		object.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, object)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called to allow adding controls at the beginning of the property list for [param object].
*/
func (EditorInspectorPlugin) _parse_begin(impl func(ptr unsafe.Pointer, object gd.Object) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var object gd.Object
		object.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, object)
		ctx.End()
	}
}

/*
Called to allow adding controls at the beginning of a category in the property list for [param object].
*/
func (EditorInspectorPlugin) _parse_category(impl func(ptr unsafe.Pointer, object gd.Object, category gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var object gd.Object
		object.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var category = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, object, category)
		ctx.End()
	}
}

/*
Called to allow adding controls at the beginning of a group or a sub-group in the property list for [param object].
*/
func (EditorInspectorPlugin) _parse_group(impl func(ptr unsafe.Pointer, object gd.Object, group gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var object gd.Object
		object.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var group = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, object, group)
		ctx.End()
	}
}

/*
Called to allow adding property-specific editors to the property list for [param object]. The added editor control must extend [EditorProperty]. Returning [code]true[/code] removes the built-in editor for this property, otherwise allows to insert a custom editor before the built-in one.
*/
func (EditorInspectorPlugin) _parse_property(impl func(ptr unsafe.Pointer, object gd.Object, atype gd.VariantType, name gd.String, hint_type gd.PropertyHint, hint_string gd.String, usage_flags gd.PropertyUsageFlags, wide bool) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var object gd.Object
		object.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var atype = gd.UnsafeGet[gd.VariantType](p_args,1)
		var name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		var hint_type = gd.UnsafeGet[gd.PropertyHint](p_args,3)
		var hint_string = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,4))
		var usage_flags = gd.UnsafeGet[gd.PropertyUsageFlags](p_args,5)
		var wide = gd.UnsafeGet[bool](p_args,6)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, object, atype, name, hint_type, hint_string, usage_flags, wide)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called to allow adding controls at the end of the property list for [param object].
*/
func (EditorInspectorPlugin) _parse_end(impl func(ptr unsafe.Pointer, object gd.Object) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var object gd.Object
		object.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, object)
		ctx.End()
	}
}

func (self EditorInspectorPlugin) Virtual(name string) reflect.Value {
	switch name {
	case "_can_handle": return reflect.ValueOf(self._can_handle);
	case "_parse_begin": return reflect.ValueOf(self._parse_begin);
	case "_parse_category": return reflect.ValueOf(self._parse_category);
	case "_parse_group": return reflect.ValueOf(self._parse_group);
	case "_parse_property": return reflect.ValueOf(self._parse_property);
	case "_parse_end": return reflect.ValueOf(self._parse_end);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorInterface struct {_ [0]*EditorInterface; ptr gd.Pointer}

//go:nosplit
func (self EditorInterface) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorInterface) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorInterface) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorInterface) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorInterface) AsEditorInterface() [1]EditorInterface { return [1]EditorInterface{self} }

//go:nosplit

func (self EditorInterface) IsSingleton() {}

func (self EditorInterface) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorNode3DGizmo struct {_ [0]*EditorNode3DGizmo; ptr gd.Pointer}

//go:nosplit
func (self EditorNode3DGizmo) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorNode3DGizmo) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorNode3DGizmo) Super() [1]Node3DGizmo { return *(*[1]Node3DGizmo)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorNode3DGizmo) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorNode3DGizmo) AsEditorNode3DGizmo() [1]EditorNode3DGizmo { return [1]EditorNode3DGizmo{self} }


//go:nosplit
func (self EditorNode3DGizmo) AsNode3DGizmo() [1]Node3DGizmo { return *(*[1]Node3DGizmo)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorNode3DGizmo) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Override this method to add all the gizmo elements whenever a gizmo update is requested. It's common to call [method clear] at the beginning of this method and then add visual elements depending on the node's properties.
*/
func (EditorNode3DGizmo) _redraw(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Override this method to return the name of an edited handle (handles must have been previously added by [method add_handles]). Handles can be named for reference to the user when editing.
The [param secondary] argument is [code]true[/code] when the requested handle is secondary (see [method add_handles] for more information).
*/
func (EditorNode3DGizmo) _get_handle_name(impl func(ptr unsafe.Pointer, id gd.Int, secondary bool) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var id = gd.UnsafeGet[gd.Int](p_args,0)
		var secondary = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, id, secondary)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to return [code]true[/code] whenever the given handle should be highlighted in the editor.
The [param secondary] argument is [code]true[/code] when the requested handle is secondary (see [method add_handles] for more information).
*/
func (EditorNode3DGizmo) _is_handle_highlighted(impl func(ptr unsafe.Pointer, id gd.Int, secondary bool) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var id = gd.UnsafeGet[gd.Int](p_args,0)
		var secondary = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, id, secondary)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to return the current value of a handle. This value will be requested at the start of an edit and used as the [code]restore[/code] argument in [method _commit_handle].
The [param secondary] argument is [code]true[/code] when the requested handle is secondary (see [method add_handles] for more information).
*/
func (EditorNode3DGizmo) _get_handle_value(impl func(ptr unsafe.Pointer, id gd.Int, secondary bool) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var id = gd.UnsafeGet[gd.Int](p_args,0)
		var secondary = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, id, secondary)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (EditorNode3DGizmo) _begin_handle_action(impl func(ptr unsafe.Pointer, id gd.Int, secondary bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var id = gd.UnsafeGet[gd.Int](p_args,0)
		var secondary = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, id, secondary)
		ctx.End()
	}
}

/*
Override this method to update the node properties when the user drags a gizmo handle (previously added with [method add_handles]). The provided [param point] is the mouse position in screen coordinates and the [param camera] can be used to convert it to raycasts.
The [param secondary] argument is [code]true[/code] when the edited handle is secondary (see [method add_handles] for more information).
*/
func (EditorNode3DGizmo) _set_handle(impl func(ptr unsafe.Pointer, id gd.Int, secondary bool, camera Camera3D, point gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var id = gd.UnsafeGet[gd.Int](p_args,0)
		var secondary = gd.UnsafeGet[bool](p_args,1)
		var camera Camera3D
		camera.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,2)}))
		var point = gd.UnsafeGet[gd.Vector2](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, id, secondary, camera, point)
		ctx.End()
	}
}

/*
Override this method to commit a handle being edited (handles must have been previously added by [method add_handles]). This usually means creating an [UndoRedo] action for the change, using the current handle value as "do" and the [param restore] argument as "undo".
If the [param cancel] argument is [code]true[/code], the [param restore] value should be directly set, without any [UndoRedo] action.
The [param secondary] argument is [code]true[/code] when the committed handle is secondary (see [method add_handles] for more information).
*/
func (EditorNode3DGizmo) _commit_handle(impl func(ptr unsafe.Pointer, id gd.Int, secondary bool, restore gd.Variant, cancel bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var id = gd.UnsafeGet[gd.Int](p_args,0)
		var secondary = gd.UnsafeGet[bool](p_args,1)
		var restore = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,2))
		var cancel = gd.UnsafeGet[bool](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, id, secondary, restore, cancel)
		ctx.End()
	}
}

/*
Override this method to allow selecting subgizmos using mouse clicks. Given a [param camera] and a [param point] in screen coordinates, this method should return which subgizmo should be selected. The returned value should be a unique subgizmo identifier, which can have any non-negative value and will be used in other virtual methods like [method _get_subgizmo_transform] or [method _commit_subgizmos].
*/
func (EditorNode3DGizmo) _subgizmos_intersect_ray(impl func(ptr unsafe.Pointer, camera Camera3D, point gd.Vector2) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var camera Camera3D
		camera.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var point = gd.UnsafeGet[gd.Vector2](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, camera, point)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to allow selecting subgizmos using mouse drag box selection. Given a [param camera] and a [param frustum], this method should return which subgizmos are contained within the frustum. The [param frustum] argument consists of an array with all the [Plane]s that make up the selection frustum. The returned value should contain a list of unique subgizmo identifiers, which can have any non-negative value and will be used in other virtual methods like [method _get_subgizmo_transform] or [method _commit_subgizmos].
*/
func (EditorNode3DGizmo) _subgizmos_intersect_frustum(impl func(ptr unsafe.Pointer, camera Camera3D, frustum gd.ArrayOf[gd.Plane]) gd.PackedInt32Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var camera Camera3D
		camera.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var frustum = gd.TypedArray[gd.Plane](mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1)))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, camera, frustum)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to update the node properties during subgizmo editing (see [method _subgizmos_intersect_ray] and [method _subgizmos_intersect_frustum]). The [param transform] is given in the [Node3D]'s local coordinate system.
*/
func (EditorNode3DGizmo) _set_subgizmo_transform(impl func(ptr unsafe.Pointer, id gd.Int, transform gd.Transform3D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var id = gd.UnsafeGet[gd.Int](p_args,0)
		var transform = gd.UnsafeGet[gd.Transform3D](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, id, transform)
		ctx.End()
	}
}

/*
Override this method to return the current transform of a subgizmo. This transform will be requested at the start of an edit and used as the [code]restore[/code] argument in [method _commit_subgizmos].
*/
func (EditorNode3DGizmo) _get_subgizmo_transform(impl func(ptr unsafe.Pointer, id gd.Int) gd.Transform3D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var id = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, id)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to commit a group of subgizmos being edited (see [method _subgizmos_intersect_ray] and [method _subgizmos_intersect_frustum]). This usually means creating an [UndoRedo] action for the change, using the current transforms as "do" and the [param restores] transforms as "undo".
If the [param cancel] argument is [code]true[/code], the [param restores] transforms should be directly set, without any [UndoRedo] action.
*/
func (EditorNode3DGizmo) _commit_subgizmos(impl func(ptr unsafe.Pointer, ids gd.PackedInt32Array, restores gd.ArrayOf[gd.Transform3D], cancel bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var ids = mmm.Let[gd.PackedInt32Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,0))
		var restores = gd.TypedArray[gd.Transform3D](mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1)))
		var cancel = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, ids, restores, cancel)
		ctx.End()
	}
}

func (self EditorNode3DGizmo) Virtual(name string) reflect.Value {
	switch name {
	case "_redraw": return reflect.ValueOf(self._redraw);
	case "_get_handle_name": return reflect.ValueOf(self._get_handle_name);
	case "_is_handle_highlighted": return reflect.ValueOf(self._is_handle_highlighted);
	case "_get_handle_value": return reflect.ValueOf(self._get_handle_value);
	case "_begin_handle_action": return reflect.ValueOf(self._begin_handle_action);
	case "_set_handle": return reflect.ValueOf(self._set_handle);
	case "_commit_handle": return reflect.ValueOf(self._commit_handle);
	case "_subgizmos_intersect_ray": return reflect.ValueOf(self._subgizmos_intersect_ray);
	case "_subgizmos_intersect_frustum": return reflect.ValueOf(self._subgizmos_intersect_frustum);
	case "_set_subgizmo_transform": return reflect.ValueOf(self._set_subgizmo_transform);
	case "_get_subgizmo_transform": return reflect.ValueOf(self._get_subgizmo_transform);
	case "_commit_subgizmos": return reflect.ValueOf(self._commit_subgizmos);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorNode3DGizmoPlugin struct {_ [0]*EditorNode3DGizmoPlugin; ptr gd.Pointer}

//go:nosplit
func (self EditorNode3DGizmoPlugin) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorNode3DGizmoPlugin) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorNode3DGizmoPlugin) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorNode3DGizmoPlugin) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorNode3DGizmoPlugin) AsEditorNode3DGizmoPlugin() [1]EditorNode3DGizmoPlugin { return [1]EditorNode3DGizmoPlugin{self} }


//go:nosplit
func (self EditorNode3DGizmoPlugin) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorNode3DGizmoPlugin) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Override this method to define which Node3D nodes have a gizmo from this plugin. Whenever a [Node3D] node is added to a scene this method is called, if it returns [code]true[/code] the node gets a generic [EditorNode3DGizmo] assigned and is added to this plugin's list of active gizmos.
*/
func (EditorNode3DGizmoPlugin) _has_gizmo(impl func(ptr unsafe.Pointer, for_node_3d Node3D) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var for_node_3d Node3D
		for_node_3d.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, for_node_3d)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to return a custom [EditorNode3DGizmo] for the spatial nodes of your choice, return [code]null[/code] for the rest of nodes. See also [method _has_gizmo].
*/
func (EditorNode3DGizmoPlugin) _create_gizmo(impl func(ptr unsafe.Pointer, for_node_3d Node3D) EditorNode3DGizmo, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var for_node_3d Node3D
		for_node_3d.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, for_node_3d)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Override this method to provide the name that will appear in the gizmo visibility menu.
*/
func (EditorNode3DGizmoPlugin) _get_gizmo_name(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to set the gizmo's priority. Gizmos with higher priority will have precedence when processing inputs like handles or subgizmos selection.
All built-in editor gizmos return a priority of [code]-1[/code]. If not overridden, this method will return [code]0[/code], which means custom gizmos will automatically get higher priority than built-in gizmos.
*/
func (EditorNode3DGizmoPlugin) _get_priority(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to define whether the gizmos handled by this plugin can be hidden or not. Returns [code]true[/code] if not overridden.
*/
func (EditorNode3DGizmoPlugin) _can_be_hidden(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to define whether Node3D with this gizmo should be selectable even when the gizmo is hidden.
*/
func (EditorNode3DGizmoPlugin) _is_selectable_when_hidden(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to add all the gizmo elements whenever a gizmo update is requested. It's common to call [method EditorNode3DGizmo.clear] at the beginning of this method and then add visual elements depending on the node's properties.
*/
func (EditorNode3DGizmoPlugin) _redraw(impl func(ptr unsafe.Pointer, gizmo EditorNode3DGizmo) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var gizmo EditorNode3DGizmo
		gizmo.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, gizmo)
		ctx.End()
	}
}

/*
Override this method to provide gizmo's handle names. The [param secondary] argument is [code]true[/code] when the requested handle is secondary (see [method EditorNode3DGizmo.add_handles] for more information). Called for this plugin's active gizmos.
*/
func (EditorNode3DGizmoPlugin) _get_handle_name(impl func(ptr unsafe.Pointer, gizmo EditorNode3DGizmo, handle_id gd.Int, secondary bool) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var gizmo EditorNode3DGizmo
		gizmo.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var handle_id = gd.UnsafeGet[gd.Int](p_args,1)
		var secondary = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, gizmo, handle_id, secondary)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to return [code]true[/code] whenever to given handle should be highlighted in the editor. The [param secondary] argument is [code]true[/code] when the requested handle is secondary (see [method EditorNode3DGizmo.add_handles] for more information). Called for this plugin's active gizmos.
*/
func (EditorNode3DGizmoPlugin) _is_handle_highlighted(impl func(ptr unsafe.Pointer, gizmo EditorNode3DGizmo, handle_id gd.Int, secondary bool) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var gizmo EditorNode3DGizmo
		gizmo.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var handle_id = gd.UnsafeGet[gd.Int](p_args,1)
		var secondary = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, gizmo, handle_id, secondary)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to return the current value of a handle. This value will be requested at the start of an edit and used as the [code]restore[/code] argument in [method _commit_handle].
The [param secondary] argument is [code]true[/code] when the requested handle is secondary (see [method EditorNode3DGizmo.add_handles] for more information).
Called for this plugin's active gizmos.
*/
func (EditorNode3DGizmoPlugin) _get_handle_value(impl func(ptr unsafe.Pointer, gizmo EditorNode3DGizmo, handle_id gd.Int, secondary bool) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var gizmo EditorNode3DGizmo
		gizmo.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var handle_id = gd.UnsafeGet[gd.Int](p_args,1)
		var secondary = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, gizmo, handle_id, secondary)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (EditorNode3DGizmoPlugin) _begin_handle_action(impl func(ptr unsafe.Pointer, gizmo EditorNode3DGizmo, handle_id gd.Int, secondary bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var gizmo EditorNode3DGizmo
		gizmo.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var handle_id = gd.UnsafeGet[gd.Int](p_args,1)
		var secondary = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, gizmo, handle_id, secondary)
		ctx.End()
	}
}

/*
Override this method to update the node's properties when the user drags a gizmo handle (previously added with [method EditorNode3DGizmo.add_handles]). The provided [param screen_pos] is the mouse position in screen coordinates and the [param camera] can be used to convert it to raycasts.
The [param secondary] argument is [code]true[/code] when the edited handle is secondary (see [method EditorNode3DGizmo.add_handles] for more information).
Called for this plugin's active gizmos.
*/
func (EditorNode3DGizmoPlugin) _set_handle(impl func(ptr unsafe.Pointer, gizmo EditorNode3DGizmo, handle_id gd.Int, secondary bool, camera Camera3D, screen_pos gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var gizmo EditorNode3DGizmo
		gizmo.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var handle_id = gd.UnsafeGet[gd.Int](p_args,1)
		var secondary = gd.UnsafeGet[bool](p_args,2)
		var camera Camera3D
		camera.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,3)}))
		var screen_pos = gd.UnsafeGet[gd.Vector2](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, gizmo, handle_id, secondary, camera, screen_pos)
		ctx.End()
	}
}

/*
Override this method to commit a handle being edited (handles must have been previously added by [method EditorNode3DGizmo.add_handles] during [method _redraw]). This usually means creating an [UndoRedo] action for the change, using the current handle value as "do" and the [param restore] argument as "undo".
If the [param cancel] argument is [code]true[/code], the [param restore] value should be directly set, without any [UndoRedo] action.
The [param secondary] argument is [code]true[/code] when the committed handle is secondary (see [method EditorNode3DGizmo.add_handles] for more information).
Called for this plugin's active gizmos.
*/
func (EditorNode3DGizmoPlugin) _commit_handle(impl func(ptr unsafe.Pointer, gizmo EditorNode3DGizmo, handle_id gd.Int, secondary bool, restore gd.Variant, cancel bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var gizmo EditorNode3DGizmo
		gizmo.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var handle_id = gd.UnsafeGet[gd.Int](p_args,1)
		var secondary = gd.UnsafeGet[bool](p_args,2)
		var restore = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,3))
		var cancel = gd.UnsafeGet[bool](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, gizmo, handle_id, secondary, restore, cancel)
		ctx.End()
	}
}

/*
Override this method to allow selecting subgizmos using mouse clicks. Given a [param camera] and a [param screen_pos] in screen coordinates, this method should return which subgizmo should be selected. The returned value should be a unique subgizmo identifier, which can have any non-negative value and will be used in other virtual methods like [method _get_subgizmo_transform] or [method _commit_subgizmos]. Called for this plugin's active gizmos.
*/
func (EditorNode3DGizmoPlugin) _subgizmos_intersect_ray(impl func(ptr unsafe.Pointer, gizmo EditorNode3DGizmo, camera Camera3D, screen_pos gd.Vector2) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var gizmo EditorNode3DGizmo
		gizmo.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var camera Camera3D
		camera.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		var screen_pos = gd.UnsafeGet[gd.Vector2](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, gizmo, camera, screen_pos)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to allow selecting subgizmos using mouse drag box selection. Given a [param camera] and [param frustum_planes], this method should return which subgizmos are contained within the frustums. The [param frustum_planes] argument consists of an array with all the [Plane]s that make up the selection frustum. The returned value should contain a list of unique subgizmo identifiers, these identifiers can have any non-negative value and will be used in other virtual methods like [method _get_subgizmo_transform] or [method _commit_subgizmos]. Called for this plugin's active gizmos.
*/
func (EditorNode3DGizmoPlugin) _subgizmos_intersect_frustum(impl func(ptr unsafe.Pointer, gizmo EditorNode3DGizmo, camera Camera3D, frustum_planes gd.ArrayOf[gd.Plane]) gd.PackedInt32Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var gizmo EditorNode3DGizmo
		gizmo.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var camera Camera3D
		camera.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		var frustum_planes = gd.TypedArray[gd.Plane](mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2)))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, gizmo, camera, frustum_planes)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to return the current transform of a subgizmo. As with all subgizmo methods, the transform should be in local space respect to the gizmo's Node3D. This transform will be requested at the start of an edit and used in the [code]restore[/code] argument in [method _commit_subgizmos]. Called for this plugin's active gizmos.
*/
func (EditorNode3DGizmoPlugin) _get_subgizmo_transform(impl func(ptr unsafe.Pointer, gizmo EditorNode3DGizmo, subgizmo_id gd.Int) gd.Transform3D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var gizmo EditorNode3DGizmo
		gizmo.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var subgizmo_id = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, gizmo, subgizmo_id)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to update the node properties during subgizmo editing (see [method _subgizmos_intersect_ray] and [method _subgizmos_intersect_frustum]). The [param transform] is given in the Node3D's local coordinate system. Called for this plugin's active gizmos.
*/
func (EditorNode3DGizmoPlugin) _set_subgizmo_transform(impl func(ptr unsafe.Pointer, gizmo EditorNode3DGizmo, subgizmo_id gd.Int, transform gd.Transform3D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var gizmo EditorNode3DGizmo
		gizmo.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var subgizmo_id = gd.UnsafeGet[gd.Int](p_args,1)
		var transform = gd.UnsafeGet[gd.Transform3D](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, gizmo, subgizmo_id, transform)
		ctx.End()
	}
}

/*
Override this method to commit a group of subgizmos being edited (see [method _subgizmos_intersect_ray] and [method _subgizmos_intersect_frustum]). This usually means creating an [UndoRedo] action for the change, using the current transforms as "do" and the [param restores] transforms as "undo".
If the [param cancel] argument is [code]true[/code], the [param restores] transforms should be directly set, without any [UndoRedo] action. As with all subgizmo methods, transforms are given in local space respect to the gizmo's Node3D. Called for this plugin's active gizmos.
*/
func (EditorNode3DGizmoPlugin) _commit_subgizmos(impl func(ptr unsafe.Pointer, gizmo EditorNode3DGizmo, ids gd.PackedInt32Array, restores gd.ArrayOf[gd.Transform3D], cancel bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var gizmo EditorNode3DGizmo
		gizmo.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var ids = mmm.Let[gd.PackedInt32Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		var restores = gd.TypedArray[gd.Transform3D](mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2)))
		var cancel = gd.UnsafeGet[bool](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, gizmo, ids, restores, cancel)
		ctx.End()
	}
}

func (self EditorNode3DGizmoPlugin) Virtual(name string) reflect.Value {
	switch name {
	case "_has_gizmo": return reflect.ValueOf(self._has_gizmo);
	case "_create_gizmo": return reflect.ValueOf(self._create_gizmo);
	case "_get_gizmo_name": return reflect.ValueOf(self._get_gizmo_name);
	case "_get_priority": return reflect.ValueOf(self._get_priority);
	case "_can_be_hidden": return reflect.ValueOf(self._can_be_hidden);
	case "_is_selectable_when_hidden": return reflect.ValueOf(self._is_selectable_when_hidden);
	case "_redraw": return reflect.ValueOf(self._redraw);
	case "_get_handle_name": return reflect.ValueOf(self._get_handle_name);
	case "_is_handle_highlighted": return reflect.ValueOf(self._is_handle_highlighted);
	case "_get_handle_value": return reflect.ValueOf(self._get_handle_value);
	case "_begin_handle_action": return reflect.ValueOf(self._begin_handle_action);
	case "_set_handle": return reflect.ValueOf(self._set_handle);
	case "_commit_handle": return reflect.ValueOf(self._commit_handle);
	case "_subgizmos_intersect_ray": return reflect.ValueOf(self._subgizmos_intersect_ray);
	case "_subgizmos_intersect_frustum": return reflect.ValueOf(self._subgizmos_intersect_frustum);
	case "_get_subgizmo_transform": return reflect.ValueOf(self._get_subgizmo_transform);
	case "_set_subgizmo_transform": return reflect.ValueOf(self._set_subgizmo_transform);
	case "_commit_subgizmos": return reflect.ValueOf(self._commit_subgizmos);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorPaths struct {_ [0]*EditorPaths; ptr gd.Pointer}

//go:nosplit
func (self EditorPaths) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorPaths) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorPaths) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorPaths) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorPaths) AsEditorPaths() [1]EditorPaths { return [1]EditorPaths{self} }

func (self EditorPaths) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type EditorPluginCustomControlContainer int64

type EditorPluginDockSlot int64

type EditorPluginAfterGUIInput int64
type EditorPlugin struct {_ [0]*EditorPlugin; ptr gd.Pointer}

//go:nosplit
func (self EditorPlugin) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorPlugin) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorPlugin) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorPlugin) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorPlugin) AsEditorPlugin() [1]EditorPlugin { return [1]EditorPlugin{self} }


//go:nosplit
func (self EditorPlugin) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Called when there is a root node in the current edited scene, [method _handles] is implemented and an [InputEvent] happens in the 2D viewport. Intercepts the [InputEvent], if [code]return true[/code] [EditorPlugin] consumes the [param event], otherwise forwards [param event] to other Editor classes.
[b]Example:[/b]
[codeblocks]
[gdscript]
# Prevents the InputEvent from reaching other Editor classes.
func _forward_canvas_gui_input(event):
    return true
[/gdscript]
[csharp]
// Prevents the InputEvent from reaching other Editor classes.
public override bool ForwardCanvasGuiInput(InputEvent @event)
{
    return true;
}
[/csharp]
[/codeblocks]
Must [code]return false[/code] in order to forward the [InputEvent] to other Editor classes.
[b]Example:[/b]
[codeblocks]
[gdscript]
# Consumes InputEventMouseMotion and forwards other InputEvent types.
func _forward_canvas_gui_input(event):
    if (event is InputEventMouseMotion):
        return true
    return false
[/gdscript]
[csharp]
// Consumes InputEventMouseMotion and forwards other InputEvent types.
public override bool _ForwardCanvasGuiInput(InputEvent @event)
{
    if (@event is InputEventMouseMotion)
    {
        return true;
    }
    return false;
}
[/csharp]
[/codeblocks]
*/
func (EditorPlugin) _forward_canvas_gui_input(impl func(ptr unsafe.Pointer, event InputEvent) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var event InputEvent
		event.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, event)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called by the engine when the 2D editor's viewport is updated. Use the [code]overlay[/code] [Control] for drawing. You can update the viewport manually by calling [method update_overlays].
[codeblocks]
[gdscript]
func _forward_canvas_draw_over_viewport(overlay):
    # Draw a circle at cursor position.
    overlay.draw_circle(overlay.get_local_mouse_position(), 64, Color.WHITE)

func _forward_canvas_gui_input(event):
    if event is InputEventMouseMotion:
        # Redraw viewport when cursor is moved.
        update_overlays()
        return true
    return false
[/gdscript]
[csharp]
public override void _ForwardCanvasDrawOverViewport(Control viewportControl)
{
    // Draw a circle at cursor position.
    viewportControl.DrawCircle(viewportControl.GetLocalMousePosition(), 64, Colors.White);
}

public override bool _ForwardCanvasGuiInput(InputEvent @event)
{
    if (@event is InputEventMouseMotion)
    {
        // Redraw viewport when cursor is moved.
        UpdateOverlays();
        return true;
    }
    return false;
}
[/csharp]
[/codeblocks]
*/
func (EditorPlugin) _forward_canvas_draw_over_viewport(impl func(ptr unsafe.Pointer, viewport_control Control) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var viewport_control Control
		viewport_control.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, viewport_control)
		ctx.End()
	}
}

/*
This method is the same as [method _forward_canvas_draw_over_viewport], except it draws on top of everything. Useful when you need an extra layer that shows over anything else.
You need to enable calling of this method by using [method set_force_draw_over_forwarding_enabled].
*/
func (EditorPlugin) _forward_canvas_force_draw_over_viewport(impl func(ptr unsafe.Pointer, viewport_control Control) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var viewport_control Control
		viewport_control.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, viewport_control)
		ctx.End()
	}
}

/*
Called when there is a root node in the current edited scene, [method _handles] is implemented, and an [InputEvent] happens in the 3D viewport. The return value decides whether the [InputEvent] is consumed or forwarded to other [EditorPlugin]s. See [enum AfterGUIInput] for options.
[b]Example:[/b]
[codeblocks]
[gdscript]
# Prevents the InputEvent from reaching other Editor classes.
func _forward_3d_gui_input(camera, event):
    return EditorPlugin.AFTER_GUI_INPUT_STOP
[/gdscript]
[csharp]
// Prevents the InputEvent from reaching other Editor classes.
public override EditorPlugin.AfterGuiInput _Forward3DGuiInput(Camera3D camera, InputEvent @event)
{
    return EditorPlugin.AfterGuiInput.Stop;
}
[/csharp]
[/codeblocks]
Must [code]return EditorPlugin.AFTER_GUI_INPUT_PASS[/code] in order to forward the [InputEvent] to other Editor classes.
[b]Example:[/b]
[codeblocks]
[gdscript]
# Consumes InputEventMouseMotion and forwards other InputEvent types.
func _forward_3d_gui_input(camera, event):
    return EditorPlugin.AFTER_GUI_INPUT_STOP if event is InputEventMouseMotion else EditorPlugin.AFTER_GUI_INPUT_PASS
[/gdscript]
[csharp]
// Consumes InputEventMouseMotion and forwards other InputEvent types.
public override EditorPlugin.AfterGuiInput _Forward3DGuiInput(Camera3D camera, InputEvent @event)
{
    return @event is InputEventMouseMotion ? EditorPlugin.AfterGuiInput.Stop : EditorPlugin.AfterGuiInput.Pass;
}
[/csharp]
[/codeblocks]
*/
func (EditorPlugin) _forward_3d_gui_input(impl func(ptr unsafe.Pointer, viewport_camera Camera3D, event InputEvent) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var viewport_camera Camera3D
		viewport_camera.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var event InputEvent
		event.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, viewport_camera, event)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called by the engine when the 3D editor's viewport is updated. Use the [code]overlay[/code] [Control] for drawing. You can update the viewport manually by calling [method update_overlays].
[codeblocks]
[gdscript]
func _forward_3d_draw_over_viewport(overlay):
    # Draw a circle at cursor position.
    overlay.draw_circle(overlay.get_local_mouse_position(), 64, Color.WHITE)

func _forward_3d_gui_input(camera, event):
    if event is InputEventMouseMotion:
        # Redraw viewport when cursor is moved.
        update_overlays()
        return EditorPlugin.AFTER_GUI_INPUT_STOP
    return EditorPlugin.AFTER_GUI_INPUT_PASS
[/gdscript]
[csharp]
public override void _Forward3DDrawOverViewport(Control viewportControl)
{
    // Draw a circle at cursor position.
    viewportControl.DrawCircle(viewportControl.GetLocalMousePosition(), 64, Colors.White);
}

public override EditorPlugin.AfterGuiInput _Forward3DGuiInput(Camera3D viewportCamera, InputEvent @event)
{
    if (@event is InputEventMouseMotion)
    {
        // Redraw viewport when cursor is moved.
        UpdateOverlays();
        return EditorPlugin.AfterGuiInput.Stop;
    }
    return EditorPlugin.AfterGuiInput.Pass;
}
[/csharp]
[/codeblocks]
*/
func (EditorPlugin) _forward_3d_draw_over_viewport(impl func(ptr unsafe.Pointer, viewport_control Control) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var viewport_control Control
		viewport_control.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, viewport_control)
		ctx.End()
	}
}

/*
This method is the same as [method _forward_3d_draw_over_viewport], except it draws on top of everything. Useful when you need an extra layer that shows over anything else.
You need to enable calling of this method by using [method set_force_draw_over_forwarding_enabled].
*/
func (EditorPlugin) _forward_3d_force_draw_over_viewport(impl func(ptr unsafe.Pointer, viewport_control Control) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var viewport_control Control
		viewport_control.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, viewport_control)
		ctx.End()
	}
}

/*
Override this method in your plugin to provide the name of the plugin when displayed in the Godot editor.
For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", and "AssetLib" buttons.
*/
func (EditorPlugin) _get_plugin_name(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method in your plugin to return a [Texture2D] in order to give it an icon.
For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", and "AssetLib" buttons.
Ideally, the plugin icon should be white with a transparent background and 16×16 pixels in size.
[codeblocks]
[gdscript]
func _get_plugin_icon():
    # You can use a custom icon:
    return preload("res://addons/my_plugin/my_plugin_icon.svg")
    # Or use a built-in icon:
    return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")
[/gdscript]
[csharp]
public override Texture2D _GetPluginIcon()
{
    // You can use a custom icon:
    return ResourceLoader.Load<Texture2D>("res://addons/my_plugin/my_plugin_icon.svg");
    // Or use a built-in icon:
    return EditorInterface.Singleton.GetEditorTheme().GetIcon("Node", "EditorIcons");
}
[/csharp]
[/codeblocks]
*/
func (EditorPlugin) _get_plugin_icon(impl func(ptr unsafe.Pointer) Texture2D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Returns [code]true[/code] if this is a main screen editor plugin (it goes in the workspace selector together with [b]2D[/b], [b]3D[/b], [b]Script[/b] and [b]AssetLib[/b]).
When the plugin's workspace is selected, other main screen plugins will be hidden, but your plugin will not appear automatically. It needs to be added as a child of [method EditorInterface.get_editor_main_screen] and made visible inside [method _make_visible].
Use [method _get_plugin_name] and [method _get_plugin_icon] to customize the plugin button's appearance.
[codeblock]
var plugin_control

func _enter_tree():
    plugin_control = preload("my_plugin_control.tscn").instantiate()
    EditorInterface.get_editor_main_screen().add_child(plugin_control)
    plugin_control.hide()

func _has_main_screen():
    return true

func _make_visible(visible):
    plugin_control.visible = visible

func _get_plugin_name():
    return "My Super Cool Plugin 3000"

func _get_plugin_icon():
    return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")
[/codeblock]
*/
func (EditorPlugin) _has_main_screen(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type.
Remember that you have to manage the visibility of all your editor controls manually.
*/
func (EditorPlugin) _make_visible(impl func(ptr unsafe.Pointer, visible bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var visible = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, visible)
		ctx.End()
	}
}

/*
This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object.
[param object] can be [code]null[/code] if the plugin was editing an object, but there is no longer any selected object handled by this plugin. It can be used to cleanup editing state.
*/
func (EditorPlugin) _edit(impl func(ptr unsafe.Pointer, object gd.Object) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var object gd.Object
		object.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, object)
		ctx.End()
	}
}

/*
Implement this function if your plugin edits a specific type of object (Resource or Node). If you return [code]true[/code], then you will get the functions [method _edit] and [method _make_visible] called when the editor requests them. If you have declared the methods [method _forward_canvas_gui_input] and [method _forward_3d_gui_input] these will be called too.
[b]Note:[/b] Each plugin should handle only one type of objects at a time. If a plugin handles more types of objects and they are edited at the same time, it will result in errors.
*/
func (EditorPlugin) _handles(impl func(ptr unsafe.Pointer, object gd.Object) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var object gd.Object
		object.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, object)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to provide a state data you want to be saved, like view position, grid settings, folding, etc. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns). This data is automatically saved for each scene in an [code]editstate[/code] file in the editor metadata folder. If you want to store global (scene-independent) editor data for your plugin, you can use [method _get_window_layout] instead.
Use [method _set_state] to restore your saved state.
[b]Note:[/b] This method should not be used to save important settings that should persist with the project.
[b]Note:[/b] You must implement [method _get_plugin_name] for the state to be stored and restored correctly.
[codeblock]
func _get_state():
    var state = {"zoom": zoom, "preferred_color": my_color}
    return state
[/codeblock]
*/
func (EditorPlugin) _get_state(impl func(ptr unsafe.Pointer) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Restore the state saved by [method _get_state]. This method is called when the current scene tab is changed in the editor.
[b]Note:[/b] Your plugin must implement [method _get_plugin_name], otherwise it will not be recognized and this method will not be called.
[codeblock]
func _set_state(data):
    zoom = data.get("zoom", 1.0)
    preferred_color = data.get("my_color", Color.WHITE)
[/codeblock]
*/
func (EditorPlugin) _set_state(impl func(ptr unsafe.Pointer, state gd.Dictionary) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, state)
		ctx.End()
	}
}

/*
Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene.
*/
func (EditorPlugin) _clear(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Override this method to provide a custom message that lists unsaved changes. The editor will call this method when exiting or when closing a scene, and display the returned string in a confirmation dialog. Return empty string if the plugin has no unsaved changes.
When closing a scene, [param for_scene] is the path to the scene being closed. You can use it to handle built-in resources in that scene.
If the user confirms saving, [method _save_external_data] will be called, before closing the editor.
[codeblock]
func _get_unsaved_status(for_scene):
    if not unsaved:
        return ""

    if for_scene.is_empty():
        return "Save changes in MyCustomPlugin before closing?"
    else:
        return "Scene %s has changes from MyCustomPlugin. Save before closing?" % for_scene.get_file()

func _save_external_data():
    unsaved = false
[/codeblock]
If the plugin has no scene-specific changes, you can ignore the calls when closing scenes:
[codeblock]
func _get_unsaved_status(for_scene):
    if not for_scene.is_empty():
        return ""
[/codeblock]
*/
func (EditorPlugin) _get_unsaved_status(impl func(ptr unsafe.Pointer, for_scene gd.String) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var for_scene = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, for_scene)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources.
*/
func (EditorPlugin) _save_external_data(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency.
This is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object.
*/
func (EditorPlugin) _apply_changes(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
This is for editors that edit script-based objects. You can return a list of breakpoints in the format ([code]script:line[/code]), for example: [code]res://path_to_script.gd:25[/code].
*/
func (EditorPlugin) _get_breakpoints(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Restore the plugin GUI layout and data saved by [method _get_window_layout]. This method is called for every plugin on editor startup. Use the provided [param configuration] file to read your saved data.
[codeblock]
func _set_window_layout(configuration):
    $Window.position = configuration.get_value("MyPlugin", "window_position", Vector2())
    $Icon.modulate = configuration.get_value("MyPlugin", "icon_color", Color.WHITE)
[/codeblock]
*/
func (EditorPlugin) _set_window_layout(impl func(ptr unsafe.Pointer, configuration ConfigFile) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var configuration ConfigFile
		configuration.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, configuration)
		ctx.End()
	}
}

/*
Override this method to provide the GUI layout of the plugin or any other data you want to be stored. This is used to save the project's editor layout when [method queue_save_layout] is called or the editor layout was changed (for example changing the position of a dock). The data is stored in the [code]editor_layout.cfg[/code] file in the editor metadata directory.
Use [method _set_window_layout] to restore your saved layout.
[codeblock]
func _get_window_layout(configuration):
    configuration.set_value("MyPlugin", "window_position", $Window.position)
    configuration.set_value("MyPlugin", "icon_color", $Icon.modulate)
[/codeblock]
*/
func (EditorPlugin) _get_window_layout(impl func(ptr unsafe.Pointer, configuration ConfigFile) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var configuration ConfigFile
		configuration.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, configuration)
		ctx.End()
	}
}

/*
This method is called when the editor is about to run the project. The plugin can then perform required operations before the project runs.
This method must return a boolean. If this method returns [code]false[/code], the project will not run. The run is aborted immediately, so this also prevents all other plugins' [method _build] methods from running.
*/
func (EditorPlugin) _build(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called by the engine when the user enables the [EditorPlugin] in the Plugin tab of the project settings window.
*/
func (EditorPlugin) _enable_plugin(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called by the engine when the user disables the [EditorPlugin] in the Plugin tab of the project settings window.
*/
func (EditorPlugin) _disable_plugin(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (self EditorPlugin) Virtual(name string) reflect.Value {
	switch name {
	case "_forward_canvas_gui_input": return reflect.ValueOf(self._forward_canvas_gui_input);
	case "_forward_canvas_draw_over_viewport": return reflect.ValueOf(self._forward_canvas_draw_over_viewport);
	case "_forward_canvas_force_draw_over_viewport": return reflect.ValueOf(self._forward_canvas_force_draw_over_viewport);
	case "_forward_3d_gui_input": return reflect.ValueOf(self._forward_3d_gui_input);
	case "_forward_3d_draw_over_viewport": return reflect.ValueOf(self._forward_3d_draw_over_viewport);
	case "_forward_3d_force_draw_over_viewport": return reflect.ValueOf(self._forward_3d_force_draw_over_viewport);
	case "_get_plugin_name": return reflect.ValueOf(self._get_plugin_name);
	case "_get_plugin_icon": return reflect.ValueOf(self._get_plugin_icon);
	case "_has_main_screen": return reflect.ValueOf(self._has_main_screen);
	case "_make_visible": return reflect.ValueOf(self._make_visible);
	case "_edit": return reflect.ValueOf(self._edit);
	case "_handles": return reflect.ValueOf(self._handles);
	case "_get_state": return reflect.ValueOf(self._get_state);
	case "_set_state": return reflect.ValueOf(self._set_state);
	case "_clear": return reflect.ValueOf(self._clear);
	case "_get_unsaved_status": return reflect.ValueOf(self._get_unsaved_status);
	case "_save_external_data": return reflect.ValueOf(self._save_external_data);
	case "_apply_changes": return reflect.ValueOf(self._apply_changes);
	case "_get_breakpoints": return reflect.ValueOf(self._get_breakpoints);
	case "_set_window_layout": return reflect.ValueOf(self._set_window_layout);
	case "_get_window_layout": return reflect.ValueOf(self._get_window_layout);
	case "_build": return reflect.ValueOf(self._build);
	case "_enable_plugin": return reflect.ValueOf(self._enable_plugin);
	case "_disable_plugin": return reflect.ValueOf(self._disable_plugin);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorProperty struct {_ [0]*EditorProperty; ptr gd.Pointer}

//go:nosplit
func (self EditorProperty) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorProperty) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorProperty) Super() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorProperty) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorProperty) AsEditorProperty() [1]EditorProperty { return [1]EditorProperty{self} }


//go:nosplit
func (self EditorProperty) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorProperty) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorProperty) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorProperty) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
When this virtual function is called, you must update your editor.
*/
func (EditorProperty) _update_property(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the read-only status of the property is changed. It may be used to change custom controls into a read-only or modifiable state.
*/
func (EditorProperty) _set_read_only(impl func(ptr unsafe.Pointer, read_only bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var read_only = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, read_only)
		ctx.End()
	}
}

func (self EditorProperty) Virtual(name string) reflect.Value {
	switch name {
	case "_update_property": return reflect.ValueOf(self._update_property);
	case "_set_read_only": return reflect.ValueOf(self._set_read_only);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorResourceConversionPlugin struct {_ [0]*EditorResourceConversionPlugin; ptr gd.Pointer}

//go:nosplit
func (self EditorResourceConversionPlugin) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorResourceConversionPlugin) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorResourceConversionPlugin) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourceConversionPlugin) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourceConversionPlugin) AsEditorResourceConversionPlugin() [1]EditorResourceConversionPlugin { return [1]EditorResourceConversionPlugin{self} }


//go:nosplit
func (self EditorResourceConversionPlugin) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Returns the class name of the target type of [Resource] that this plugin converts source resources to.
*/
func (EditorResourceConversionPlugin) _converts_to(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Called to determine whether a particular [Resource] can be converted to the target resource type by this plugin.
*/
func (EditorResourceConversionPlugin) _handles(impl func(ptr unsafe.Pointer, resource Resource) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var resource Resource
		resource.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, resource)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Takes an input [Resource] and converts it to the type given in [method _converts_to]. The returned [Resource] is the result of the conversion, and the input [Resource] remains unchanged.
*/
func (EditorResourceConversionPlugin) _convert(impl func(ptr unsafe.Pointer, resource Resource) Resource, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var resource Resource
		resource.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, resource)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (self EditorResourceConversionPlugin) Virtual(name string) reflect.Value {
	switch name {
	case "_converts_to": return reflect.ValueOf(self._converts_to);
	case "_handles": return reflect.ValueOf(self._handles);
	case "_convert": return reflect.ValueOf(self._convert);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorResourcePicker struct {_ [0]*EditorResourcePicker; ptr gd.Pointer}

//go:nosplit
func (self EditorResourcePicker) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorResourcePicker) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorResourcePicker) Super() [1]HBoxContainer { return *(*[1]HBoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourcePicker) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourcePicker) AsEditorResourcePicker() [1]EditorResourcePicker { return [1]EditorResourcePicker{self} }


//go:nosplit
func (self EditorResourcePicker) AsHBoxContainer() [1]HBoxContainer { return *(*[1]HBoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourcePicker) AsBoxContainer() [1]BoxContainer { return *(*[1]BoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourcePicker) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourcePicker) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourcePicker) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourcePicker) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
This virtual method is called when updating the context menu of [EditorResourcePicker]. Implement this method to override the "New ..." items with your own options. [param menu_node] is a reference to the [PopupMenu] node.
[b]Note:[/b] Implement [method _handle_menu_selected] to handle these custom items.
*/
func (EditorResourcePicker) _set_create_options(impl func(ptr unsafe.Pointer, menu_node gd.Object) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var menu_node gd.Object
		menu_node.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, menu_node)
		ctx.End()
	}
}

/*
This virtual method can be implemented to handle context menu items not handled by default. See [method _set_create_options].
*/
func (EditorResourcePicker) _handle_menu_selected(impl func(ptr unsafe.Pointer, id gd.Int) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var id = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, id)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self EditorResourcePicker) Virtual(name string) reflect.Value {
	switch name {
	case "_set_create_options": return reflect.ValueOf(self._set_create_options);
	case "_handle_menu_selected": return reflect.ValueOf(self._handle_menu_selected);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorResourcePreview struct {_ [0]*EditorResourcePreview; ptr gd.Pointer}

//go:nosplit
func (self EditorResourcePreview) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorResourcePreview) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorResourcePreview) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourcePreview) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourcePreview) AsEditorResourcePreview() [1]EditorResourcePreview { return [1]EditorResourcePreview{self} }


//go:nosplit
func (self EditorResourcePreview) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self EditorResourcePreview) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorResourcePreviewGenerator struct {_ [0]*EditorResourcePreviewGenerator; ptr gd.Pointer}

//go:nosplit
func (self EditorResourcePreviewGenerator) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorResourcePreviewGenerator) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorResourcePreviewGenerator) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourcePreviewGenerator) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourcePreviewGenerator) AsEditorResourcePreviewGenerator() [1]EditorResourcePreviewGenerator { return [1]EditorResourcePreviewGenerator{self} }


//go:nosplit
func (self EditorResourcePreviewGenerator) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Returns [code]true[/code] if your generator supports the resource of type [param type].
*/
func (EditorResourcePreviewGenerator) _handles(impl func(ptr unsafe.Pointer, atype gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var atype = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, atype)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Generate a preview from a given resource with the specified size. This must always be implemented.
Returning an empty texture is an OK way to fail and let another generator take care.
Care must be taken because this function is always called from a thread (not the main thread).
[param metadata] dictionary can be modified to store file-specific metadata that can be used in [method EditorResourceTooltipPlugin._make_tooltip_for_path] (like image size, sample length etc.).
*/
func (EditorResourcePreviewGenerator) _generate(impl func(ptr unsafe.Pointer, resource Resource, size gd.Vector2i, metadata gd.Dictionary) Texture2D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var resource Resource
		resource.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var metadata = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, resource, size, metadata)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Generate a preview directly from a path with the specified size. Implementing this is optional, as default code will load and call [method _generate].
Returning an empty texture is an OK way to fail and let another generator take care.
Care must be taken because this function is always called from a thread (not the main thread).
[param metadata] dictionary can be modified to store file-specific metadata that can be used in [method EditorResourceTooltipPlugin._make_tooltip_for_path] (like image size, sample length etc.).
*/
func (EditorResourcePreviewGenerator) _generate_from_path(impl func(ptr unsafe.Pointer, path gd.String, size gd.Vector2i, metadata gd.Dictionary) Texture2D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var metadata = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path, size, metadata)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
If this function returns [code]true[/code], the generator will automatically generate the small previews from the normal preview texture generated by the methods [method _generate] or [method _generate_from_path].
By default, it returns [code]false[/code].
*/
func (EditorResourcePreviewGenerator) _generate_small_preview_automatically(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
If this function returns [code]true[/code], the generator will call [method _generate] or [method _generate_from_path] for small previews as well.
By default, it returns [code]false[/code].
*/
func (EditorResourcePreviewGenerator) _can_generate_small_preview(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self EditorResourcePreviewGenerator) Virtual(name string) reflect.Value {
	switch name {
	case "_handles": return reflect.ValueOf(self._handles);
	case "_generate": return reflect.ValueOf(self._generate);
	case "_generate_from_path": return reflect.ValueOf(self._generate_from_path);
	case "_generate_small_preview_automatically": return reflect.ValueOf(self._generate_small_preview_automatically);
	case "_can_generate_small_preview": return reflect.ValueOf(self._can_generate_small_preview);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorResourceTooltipPlugin struct {_ [0]*EditorResourceTooltipPlugin; ptr gd.Pointer}

//go:nosplit
func (self EditorResourceTooltipPlugin) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorResourceTooltipPlugin) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorResourceTooltipPlugin) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourceTooltipPlugin) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorResourceTooltipPlugin) AsEditorResourceTooltipPlugin() [1]EditorResourceTooltipPlugin { return [1]EditorResourceTooltipPlugin{self} }


//go:nosplit
func (self EditorResourceTooltipPlugin) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Return [code]true[/code] if the plugin is going to handle the given [Resource] [param type].
*/
func (EditorResourceTooltipPlugin) _handles(impl func(ptr unsafe.Pointer, atype gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var atype = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, atype)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Create and return a tooltip that will be displayed when the user hovers a resource under the given [param path] in filesystem dock.
The [param metadata] dictionary is provided by preview generator (see [method EditorResourcePreviewGenerator._generate]).
[param base] is the base default tooltip, which is a [VBoxContainer] with a file name, type and size labels. If another plugin handled the same file type, [param base] will be output from the previous plugin. For best result, make sure the base tooltip is part of the returned [Control].
[b]Note:[/b] It's unadvised to use [method ResourceLoader.load], especially with heavy resources like models or textures, because it will make the editor unresponsive when creating the tooltip. You can use [method request_thumbnail] if you want to display a preview in your tooltip.
[b]Note:[/b] If you decide to discard the [param base], make sure to call [method Node.queue_free], because it's not freed automatically.
[codeblock]
func _make_tooltip_for_path(path, metadata, base):
    var t_rect = TextureRect.new()
    request_thumbnail(path, t_rect)
    base.add_child(t_rect) # The TextureRect will appear at the bottom of the tooltip.
    return base
[/codeblock]
*/
func (EditorResourceTooltipPlugin) _make_tooltip_for_path(impl func(ptr unsafe.Pointer, path gd.String, metadata gd.Dictionary, base Control) Control, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var metadata = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var base Control
		base.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,2)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path, metadata, base)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (self EditorResourceTooltipPlugin) Virtual(name string) reflect.Value {
	switch name {
	case "_handles": return reflect.ValueOf(self._handles);
	case "_make_tooltip_for_path": return reflect.ValueOf(self._make_tooltip_for_path);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorSceneFormatImporter struct {_ [0]*EditorSceneFormatImporter; ptr gd.Pointer}

//go:nosplit
func (self EditorSceneFormatImporter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorSceneFormatImporter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorSceneFormatImporter) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSceneFormatImporter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSceneFormatImporter) AsEditorSceneFormatImporter() [1]EditorSceneFormatImporter { return [1]EditorSceneFormatImporter{self} }


//go:nosplit
func (self EditorSceneFormatImporter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (EditorSceneFormatImporter) _get_import_flags(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (EditorSceneFormatImporter) _get_extensions(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (EditorSceneFormatImporter) _import_scene(impl func(ptr unsafe.Pointer, path gd.String, flags gd.Int, options gd.Dictionary) gd.Object, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var flags = gd.UnsafeGet[gd.Int](p_args,1)
		var options = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path, flags, options)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (EditorSceneFormatImporter) _get_import_options(impl func(ptr unsafe.Pointer, path gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, path)
		ctx.End()
	}
}

func (EditorSceneFormatImporter) _get_option_visibility(impl func(ptr unsafe.Pointer, path gd.String, for_animation bool, option gd.String) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var for_animation = gd.UnsafeGet[bool](p_args,1)
		var option = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path, for_animation, option)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (self EditorSceneFormatImporter) Virtual(name string) reflect.Value {
	switch name {
	case "_get_import_flags": return reflect.ValueOf(self._get_import_flags);
	case "_get_extensions": return reflect.ValueOf(self._get_extensions);
	case "_import_scene": return reflect.ValueOf(self._import_scene);
	case "_get_import_options": return reflect.ValueOf(self._get_import_options);
	case "_get_option_visibility": return reflect.ValueOf(self._get_option_visibility);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorSceneFormatImporterBlend struct {_ [0]*EditorSceneFormatImporterBlend; ptr gd.Pointer}

//go:nosplit
func (self EditorSceneFormatImporterBlend) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorSceneFormatImporterBlend) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorSceneFormatImporterBlend) Super() [1]EditorSceneFormatImporter { return *(*[1]EditorSceneFormatImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSceneFormatImporterBlend) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSceneFormatImporterBlend) AsEditorSceneFormatImporterBlend() [1]EditorSceneFormatImporterBlend { return [1]EditorSceneFormatImporterBlend{self} }


//go:nosplit
func (self EditorSceneFormatImporterBlend) AsEditorSceneFormatImporter() [1]EditorSceneFormatImporter { return *(*[1]EditorSceneFormatImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSceneFormatImporterBlend) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorSceneFormatImporterBlend) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorSceneFormatImporterFBX2GLTF struct {_ [0]*EditorSceneFormatImporterFBX2GLTF; ptr gd.Pointer}

//go:nosplit
func (self EditorSceneFormatImporterFBX2GLTF) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorSceneFormatImporterFBX2GLTF) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorSceneFormatImporterFBX2GLTF) Super() [1]EditorSceneFormatImporter { return *(*[1]EditorSceneFormatImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSceneFormatImporterFBX2GLTF) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSceneFormatImporterFBX2GLTF) AsEditorSceneFormatImporterFBX2GLTF() [1]EditorSceneFormatImporterFBX2GLTF { return [1]EditorSceneFormatImporterFBX2GLTF{self} }


//go:nosplit
func (self EditorSceneFormatImporterFBX2GLTF) AsEditorSceneFormatImporter() [1]EditorSceneFormatImporter { return *(*[1]EditorSceneFormatImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSceneFormatImporterFBX2GLTF) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorSceneFormatImporterFBX2GLTF) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorSceneFormatImporterGLTF struct {_ [0]*EditorSceneFormatImporterGLTF; ptr gd.Pointer}

//go:nosplit
func (self EditorSceneFormatImporterGLTF) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorSceneFormatImporterGLTF) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorSceneFormatImporterGLTF) Super() [1]EditorSceneFormatImporter { return *(*[1]EditorSceneFormatImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSceneFormatImporterGLTF) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSceneFormatImporterGLTF) AsEditorSceneFormatImporterGLTF() [1]EditorSceneFormatImporterGLTF { return [1]EditorSceneFormatImporterGLTF{self} }


//go:nosplit
func (self EditorSceneFormatImporterGLTF) AsEditorSceneFormatImporter() [1]EditorSceneFormatImporter { return *(*[1]EditorSceneFormatImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSceneFormatImporterGLTF) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorSceneFormatImporterGLTF) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorSceneFormatImporterUFBX struct {_ [0]*EditorSceneFormatImporterUFBX; ptr gd.Pointer}

//go:nosplit
func (self EditorSceneFormatImporterUFBX) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorSceneFormatImporterUFBX) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorSceneFormatImporterUFBX) Super() [1]EditorSceneFormatImporter { return *(*[1]EditorSceneFormatImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSceneFormatImporterUFBX) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSceneFormatImporterUFBX) AsEditorSceneFormatImporterUFBX() [1]EditorSceneFormatImporterUFBX { return [1]EditorSceneFormatImporterUFBX{self} }


//go:nosplit
func (self EditorSceneFormatImporterUFBX) AsEditorSceneFormatImporter() [1]EditorSceneFormatImporter { return *(*[1]EditorSceneFormatImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSceneFormatImporterUFBX) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorSceneFormatImporterUFBX) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorScenePostImport struct {_ [0]*EditorScenePostImport; ptr gd.Pointer}

//go:nosplit
func (self EditorScenePostImport) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorScenePostImport) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorScenePostImport) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorScenePostImport) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorScenePostImport) AsEditorScenePostImport() [1]EditorScenePostImport { return [1]EditorScenePostImport{self} }


//go:nosplit
func (self EditorScenePostImport) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Called after the scene was imported. This method must return the modified version of the scene.
*/
func (EditorScenePostImport) _post_import(impl func(ptr unsafe.Pointer, scene Node) gd.Object, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var scene Node
		scene.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, scene)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (self EditorScenePostImport) Virtual(name string) reflect.Value {
	switch name {
	case "_post_import": return reflect.ValueOf(self._post_import);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type EditorScenePostImportPluginInternalImportCategory int64
type EditorScenePostImportPlugin struct {_ [0]*EditorScenePostImportPlugin; ptr gd.Pointer}

//go:nosplit
func (self EditorScenePostImportPlugin) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorScenePostImportPlugin) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorScenePostImportPlugin) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorScenePostImportPlugin) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorScenePostImportPlugin) AsEditorScenePostImportPlugin() [1]EditorScenePostImportPlugin { return [1]EditorScenePostImportPlugin{self} }


//go:nosplit
func (self EditorScenePostImportPlugin) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Override to add internal import options. These will appear in the 3D scene import dialog. Add options via [method add_import_option] and [method add_import_option_advanced].
*/
func (EditorScenePostImportPlugin) _get_internal_import_options(impl func(ptr unsafe.Pointer, category gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var category = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, category)
		ctx.End()
	}
}

/*
Return true or false whether a given option should be visible. Return null to ignore.
*/
func (EditorScenePostImportPlugin) _get_internal_option_visibility(impl func(ptr unsafe.Pointer, category gd.Int, for_animation bool, option gd.String) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var category = gd.UnsafeGet[gd.Int](p_args,0)
		var for_animation = gd.UnsafeGet[bool](p_args,1)
		var option = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, category, for_animation, option)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Return true whether updating the 3D view of the import dialog needs to be updated if an option has changed.
*/
func (EditorScenePostImportPlugin) _get_internal_option_update_view_required(impl func(ptr unsafe.Pointer, category gd.Int, option gd.String) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var category = gd.UnsafeGet[gd.Int](p_args,0)
		var option = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, category, option)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Process a specific node or resource for a given category.
*/
func (EditorScenePostImportPlugin) _internal_process(impl func(ptr unsafe.Pointer, category gd.Int, base_node Node, node Node, resource Resource) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var category = gd.UnsafeGet[gd.Int](p_args,0)
		var base_node Node
		base_node.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		var node Node
		node.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,2)}))
		var resource Resource
		resource.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,3)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, category, base_node, node, resource)
		ctx.End()
	}
}

/*
Override to add general import options. These will appear in the main import dock on the editor. Add options via [method add_import_option] and [method add_import_option_advanced].
*/
func (EditorScenePostImportPlugin) _get_import_options(impl func(ptr unsafe.Pointer, path gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, path)
		ctx.End()
	}
}

/*
Return true or false whether a given option should be visible. Return null to ignore.
*/
func (EditorScenePostImportPlugin) _get_option_visibility(impl func(ptr unsafe.Pointer, path gd.String, for_animation bool, option gd.String) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var for_animation = gd.UnsafeGet[bool](p_args,1)
		var option = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path, for_animation, option)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Pre Process the scene. This function is called right after the scene format loader loaded the scene and no changes have been made.
*/
func (EditorScenePostImportPlugin) _pre_process(impl func(ptr unsafe.Pointer, scene Node) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var scene Node
		scene.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, scene)
		ctx.End()
	}
}

/*
Post process the scene. This function is called after the final scene has been configured.
*/
func (EditorScenePostImportPlugin) _post_process(impl func(ptr unsafe.Pointer, scene Node) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var scene Node
		scene.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, scene)
		ctx.End()
	}
}

func (self EditorScenePostImportPlugin) Virtual(name string) reflect.Value {
	switch name {
	case "_get_internal_import_options": return reflect.ValueOf(self._get_internal_import_options);
	case "_get_internal_option_visibility": return reflect.ValueOf(self._get_internal_option_visibility);
	case "_get_internal_option_update_view_required": return reflect.ValueOf(self._get_internal_option_update_view_required);
	case "_internal_process": return reflect.ValueOf(self._internal_process);
	case "_get_import_options": return reflect.ValueOf(self._get_import_options);
	case "_get_option_visibility": return reflect.ValueOf(self._get_option_visibility);
	case "_pre_process": return reflect.ValueOf(self._pre_process);
	case "_post_process": return reflect.ValueOf(self._post_process);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorScript struct {_ [0]*EditorScript; ptr gd.Pointer}

//go:nosplit
func (self EditorScript) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorScript) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorScript) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorScript) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorScript) AsEditorScript() [1]EditorScript { return [1]EditorScript{self} }


//go:nosplit
func (self EditorScript) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
This method is executed by the Editor when [b]File > Run[/b] is used.
*/
func (EditorScript) _run(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (self EditorScript) Virtual(name string) reflect.Value {
	switch name {
	case "_run": return reflect.ValueOf(self._run);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorScriptPicker struct {_ [0]*EditorScriptPicker; ptr gd.Pointer}

//go:nosplit
func (self EditorScriptPicker) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorScriptPicker) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorScriptPicker) Super() [1]EditorResourcePicker { return *(*[1]EditorResourcePicker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorScriptPicker) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorScriptPicker) AsEditorScriptPicker() [1]EditorScriptPicker { return [1]EditorScriptPicker{self} }


//go:nosplit
func (self EditorScriptPicker) AsEditorResourcePicker() [1]EditorResourcePicker { return *(*[1]EditorResourcePicker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorScriptPicker) AsHBoxContainer() [1]HBoxContainer { return *(*[1]HBoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorScriptPicker) AsBoxContainer() [1]BoxContainer { return *(*[1]BoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorScriptPicker) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorScriptPicker) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorScriptPicker) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorScriptPicker) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self EditorScriptPicker) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorSelection struct {_ [0]*EditorSelection; ptr gd.Pointer}

//go:nosplit
func (self EditorSelection) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorSelection) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorSelection) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSelection) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSelection) AsEditorSelection() [1]EditorSelection { return [1]EditorSelection{self} }

func (self EditorSelection) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorSettings struct {_ [0]*EditorSettings; ptr gd.Pointer}

//go:nosplit
func (self EditorSettings) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorSettings) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorSettings) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSettings) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSettings) AsEditorSettings() [1]EditorSettings { return [1]EditorSettings{self} }


//go:nosplit
func (self EditorSettings) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSettings) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EditorSettings) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorSpinSlider struct {_ [0]*EditorSpinSlider; ptr gd.Pointer}

//go:nosplit
func (self EditorSpinSlider) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorSpinSlider) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorSpinSlider) Super() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSpinSlider) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSpinSlider) AsEditorSpinSlider() [1]EditorSpinSlider { return [1]EditorSpinSlider{self} }


//go:nosplit
func (self EditorSpinSlider) AsRange() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSpinSlider) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSpinSlider) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSpinSlider) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self EditorSpinSlider) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorSyntaxHighlighter struct {_ [0]*EditorSyntaxHighlighter; ptr gd.Pointer}

//go:nosplit
func (self EditorSyntaxHighlighter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorSyntaxHighlighter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorSyntaxHighlighter) Super() [1]SyntaxHighlighter { return *(*[1]SyntaxHighlighter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSyntaxHighlighter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSyntaxHighlighter) AsEditorSyntaxHighlighter() [1]EditorSyntaxHighlighter { return [1]EditorSyntaxHighlighter{self} }


//go:nosplit
func (self EditorSyntaxHighlighter) AsSyntaxHighlighter() [1]SyntaxHighlighter { return *(*[1]SyntaxHighlighter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSyntaxHighlighter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorSyntaxHighlighter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Virtual method which can be overridden to return the syntax highlighter name.
*/
func (EditorSyntaxHighlighter) _get_name(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Virtual method which can be overridden to return the supported language names.
*/
func (EditorSyntaxHighlighter) _get_supported_languages(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (self EditorSyntaxHighlighter) Virtual(name string) reflect.Value {
	switch name {
	case "_get_name": return reflect.ValueOf(self._get_name);
	case "_get_supported_languages": return reflect.ValueOf(self._get_supported_languages);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EditorTranslationParserPlugin struct {_ [0]*EditorTranslationParserPlugin; ptr gd.Pointer}

//go:nosplit
func (self EditorTranslationParserPlugin) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorTranslationParserPlugin) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorTranslationParserPlugin) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorTranslationParserPlugin) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorTranslationParserPlugin) AsEditorTranslationParserPlugin() [1]EditorTranslationParserPlugin { return [1]EditorTranslationParserPlugin{self} }


//go:nosplit
func (self EditorTranslationParserPlugin) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Override this method to define a custom parsing logic to extract the translatable strings.
*/
func (EditorTranslationParserPlugin) _parse_file(impl func(ptr unsafe.Pointer, path gd.String, msgids gd.ArrayOf[gd.String], msgids_context_plural gd.ArrayOf[gd.Array]) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var msgids = gd.TypedArray[gd.String](mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1)))
		var msgids_context_plural = gd.TypedArray[gd.Array](mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2)))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, path, msgids, msgids_context_plural)
		ctx.End()
	}
}

/*
Gets the list of file extensions to associate with this parser, e.g. [code]["csv"][/code].
*/
func (EditorTranslationParserPlugin) _get_recognized_extensions(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (self EditorTranslationParserPlugin) Virtual(name string) reflect.Value {
	switch name {
	case "_parse_file": return reflect.ValueOf(self._parse_file);
	case "_get_recognized_extensions": return reflect.ValueOf(self._get_recognized_extensions);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type EditorUndoRedoManagerSpecialHistory int64
type EditorUndoRedoManager struct {_ [0]*EditorUndoRedoManager; ptr gd.Pointer}

//go:nosplit
func (self EditorUndoRedoManager) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorUndoRedoManager) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorUndoRedoManager) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorUndoRedoManager) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorUndoRedoManager) AsEditorUndoRedoManager() [1]EditorUndoRedoManager { return [1]EditorUndoRedoManager{self} }

func (self EditorUndoRedoManager) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type EditorVCSInterfaceChangeType int64

type EditorVCSInterfaceTreeArea int64
type EditorVCSInterface struct {_ [0]*EditorVCSInterface; ptr gd.Pointer}

//go:nosplit
func (self EditorVCSInterface) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EditorVCSInterface) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EditorVCSInterface) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorVCSInterface) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EditorVCSInterface) AsEditorVCSInterface() [1]EditorVCSInterface { return [1]EditorVCSInterface{self} }

/*
Initializes the VCS plugin when called from the editor. Returns whether or not the plugin was successfully initialized. A VCS project is initialized at [param project_path].
*/
func (EditorVCSInterface) _initialize(impl func(ptr unsafe.Pointer, project_path gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var project_path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, project_path)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Set user credentials in the underlying VCS. [param username] and [param password] are used only during HTTPS authentication unless not already mentioned in the remote URL. [param ssh_public_key_path], [param ssh_private_key_path], and [param ssh_passphrase] are only used during SSH authentication.
*/
func (EditorVCSInterface) _set_credentials(impl func(ptr unsafe.Pointer, username gd.String, password gd.String, ssh_public_key_path gd.String, ssh_private_key_path gd.String, ssh_passphrase gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var username = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var password = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var ssh_public_key_path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		var ssh_private_key_path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,3))
		var ssh_passphrase = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,4))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, username, password, ssh_public_key_path, ssh_private_key_path, ssh_passphrase)
		ctx.End()
	}
}

/*
Returns an [Array] of [Dictionary] items (see [method create_status_file]), each containing the status data of every modified file in the project folder.
*/
func (EditorVCSInterface) _get_modified_files_data(impl func(ptr unsafe.Pointer) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

/*
Stages the file present at [param file_path] to the staged area.
*/
func (EditorVCSInterface) _stage_file(impl func(ptr unsafe.Pointer, file_path gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var file_path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, file_path)
		ctx.End()
	}
}

/*
Unstages the file present at [param file_path] from the staged area to the unstaged area.
*/
func (EditorVCSInterface) _unstage_file(impl func(ptr unsafe.Pointer, file_path gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var file_path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, file_path)
		ctx.End()
	}
}

/*
Discards the changes made in a file present at [param file_path].
*/
func (EditorVCSInterface) _discard_file(impl func(ptr unsafe.Pointer, file_path gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var file_path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, file_path)
		ctx.End()
	}
}

/*
Commits the currently staged changes and applies the commit [param msg] to the resulting commit.
*/
func (EditorVCSInterface) _commit(impl func(ptr unsafe.Pointer, msg gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var msg = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, msg)
		ctx.End()
	}
}

/*
Returns an array of [Dictionary] items (see [method create_diff_file], [method create_diff_hunk], [method create_diff_line], [method add_line_diffs_into_diff_hunk] and [method add_diff_hunks_into_diff_file]), each containing information about a diff. If [param identifier] is a file path, returns a file diff, and if it is a commit identifier, then returns a commit diff.
*/
func (EditorVCSInterface) _get_diff(impl func(ptr unsafe.Pointer, identifier gd.String, area gd.Int) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var identifier = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var area = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, identifier, area)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

/*
Shuts down VCS plugin instance. Called when the user either closes the editor or shuts down the VCS plugin through the editor UI.
*/
func (EditorVCSInterface) _shut_down(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns the name of the underlying VCS provider.
*/
func (EditorVCSInterface) _get_vcs_name(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Returns an [Array] of [Dictionary] items (see [method create_commit]), each containing the data for a past commit.
*/
func (EditorVCSInterface) _get_previous_commits(impl func(ptr unsafe.Pointer, max_commits gd.Int) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var max_commits = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, max_commits)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

/*
Gets an instance of an [Array] of [String]s containing available branch names in the VCS.
*/
func (EditorVCSInterface) _get_branch_list(impl func(ptr unsafe.Pointer) gd.ArrayOf[gd.String], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

/*
Returns an [Array] of [String]s, each containing the name of a remote configured in the VCS.
*/
func (EditorVCSInterface) _get_remotes(impl func(ptr unsafe.Pointer) gd.ArrayOf[gd.String], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

/*
Creates a new branch named [param branch_name] in the VCS.
*/
func (EditorVCSInterface) _create_branch(impl func(ptr unsafe.Pointer, branch_name gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var branch_name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, branch_name)
		ctx.End()
	}
}

/*
Remove a branch from the local VCS.
*/
func (EditorVCSInterface) _remove_branch(impl func(ptr unsafe.Pointer, branch_name gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var branch_name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, branch_name)
		ctx.End()
	}
}

/*
Creates a new remote destination with name [param remote_name] and points it to [param remote_url]. This can be an HTTPS remote or an SSH remote.
*/
func (EditorVCSInterface) _create_remote(impl func(ptr unsafe.Pointer, remote_name gd.String, remote_url gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var remote_name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var remote_url = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, remote_name, remote_url)
		ctx.End()
	}
}

/*
Remove a remote from the local VCS.
*/
func (EditorVCSInterface) _remove_remote(impl func(ptr unsafe.Pointer, remote_name gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var remote_name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, remote_name)
		ctx.End()
	}
}

/*
Gets the current branch name defined in the VCS.
*/
func (EditorVCSInterface) _get_current_branch_name(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Checks out a [param branch_name] in the VCS.
*/
func (EditorVCSInterface) _checkout_branch(impl func(ptr unsafe.Pointer, branch_name gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var branch_name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, branch_name)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Pulls changes from the remote. This can give rise to merge conflicts.
*/
func (EditorVCSInterface) _pull(impl func(ptr unsafe.Pointer, remote gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var remote = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, remote)
		ctx.End()
	}
}

/*
Pushes changes to the [param remote]. If [param force] is [code]true[/code], a force push will override the change history already present on the remote.
*/
func (EditorVCSInterface) _push(impl func(ptr unsafe.Pointer, remote gd.String, force bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var remote = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var force = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, remote, force)
		ctx.End()
	}
}

/*
Fetches new changes from the [param remote], but doesn't write changes to the current working directory. Equivalent to [code]git fetch[/code].
*/
func (EditorVCSInterface) _fetch(impl func(ptr unsafe.Pointer, remote gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var remote = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, remote)
		ctx.End()
	}
}

/*
Returns an [Array] of [Dictionary] items (see [method create_diff_hunk]), each containing a line diff between a file at [param file_path] and the [param text] which is passed in.
*/
func (EditorVCSInterface) _get_line_diff(impl func(ptr unsafe.Pointer, file_path gd.String, text gd.String) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var file_path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var text = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, file_path, text)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (self EditorVCSInterface) Virtual(name string) reflect.Value {
	switch name {
	case "_initialize": return reflect.ValueOf(self._initialize);
	case "_set_credentials": return reflect.ValueOf(self._set_credentials);
	case "_get_modified_files_data": return reflect.ValueOf(self._get_modified_files_data);
	case "_stage_file": return reflect.ValueOf(self._stage_file);
	case "_unstage_file": return reflect.ValueOf(self._unstage_file);
	case "_discard_file": return reflect.ValueOf(self._discard_file);
	case "_commit": return reflect.ValueOf(self._commit);
	case "_get_diff": return reflect.ValueOf(self._get_diff);
	case "_shut_down": return reflect.ValueOf(self._shut_down);
	case "_get_vcs_name": return reflect.ValueOf(self._get_vcs_name);
	case "_get_previous_commits": return reflect.ValueOf(self._get_previous_commits);
	case "_get_branch_list": return reflect.ValueOf(self._get_branch_list);
	case "_get_remotes": return reflect.ValueOf(self._get_remotes);
	case "_create_branch": return reflect.ValueOf(self._create_branch);
	case "_remove_branch": return reflect.ValueOf(self._remove_branch);
	case "_create_remote": return reflect.ValueOf(self._create_remote);
	case "_remove_remote": return reflect.ValueOf(self._remove_remote);
	case "_get_current_branch_name": return reflect.ValueOf(self._get_current_branch_name);
	case "_checkout_branch": return reflect.ValueOf(self._checkout_branch);
	case "_pull": return reflect.ValueOf(self._pull);
	case "_push": return reflect.ValueOf(self._push);
	case "_fetch": return reflect.ValueOf(self._fetch);
	case "_get_line_diff": return reflect.ValueOf(self._get_line_diff);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EncodedObjectAsID struct {_ [0]*EncodedObjectAsID; ptr gd.Pointer}

//go:nosplit
func (self EncodedObjectAsID) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EncodedObjectAsID) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EncodedObjectAsID) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EncodedObjectAsID) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EncodedObjectAsID) AsEncodedObjectAsID() [1]EncodedObjectAsID { return [1]EncodedObjectAsID{self} }


//go:nosplit
func (self EncodedObjectAsID) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self EncodedObjectAsID) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Engine struct {_ [0]*Engine; ptr gd.Pointer}

//go:nosplit
func (self Engine) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Engine) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Engine) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Engine) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Engine) AsEngine() [1]Engine { return [1]Engine{self} }

//go:nosplit

func (self Engine) IsSingleton() {}

func (self Engine) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EngineDebugger struct {_ [0]*EngineDebugger; ptr gd.Pointer}

//go:nosplit
func (self EngineDebugger) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EngineDebugger) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EngineDebugger) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EngineDebugger) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EngineDebugger) AsEngineDebugger() [1]EngineDebugger { return [1]EngineDebugger{self} }

//go:nosplit

func (self EngineDebugger) IsSingleton() {}

func (self EngineDebugger) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type EngineProfiler struct {_ [0]*EngineProfiler; ptr gd.Pointer}

//go:nosplit
func (self EngineProfiler) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *EngineProfiler) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self EngineProfiler) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EngineProfiler) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self EngineProfiler) AsEngineProfiler() [1]EngineProfiler { return [1]EngineProfiler{self} }


//go:nosplit
func (self EngineProfiler) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Called when the profiler is enabled/disabled, along with a set of [param options].
*/
func (EngineProfiler) _toggle(impl func(ptr unsafe.Pointer, enable bool, options gd.Array) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var enable = gd.UnsafeGet[bool](p_args,0)
		var options = mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, enable, options)
		ctx.End()
	}
}

/*
Called when data is added to profiler using [method EngineDebugger.profiler_add_frame_data].
*/
func (EngineProfiler) _add_frame(impl func(ptr unsafe.Pointer, data gd.Array) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var data = mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, data)
		ctx.End()
	}
}

/*
Called once every engine iteration when the profiler is active with information about the current frame. All time values are in seconds. Lower values represent faster processing times and are therefore considered better.
*/
func (EngineProfiler) _tick(impl func(ptr unsafe.Pointer, frame_time gd.Float, process_time gd.Float, physics_time gd.Float, physics_frame_time gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var frame_time = gd.UnsafeGet[gd.Float](p_args,0)
		var process_time = gd.UnsafeGet[gd.Float](p_args,1)
		var physics_time = gd.UnsafeGet[gd.Float](p_args,2)
		var physics_frame_time = gd.UnsafeGet[gd.Float](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, frame_time, process_time, physics_time, physics_frame_time)
		ctx.End()
	}
}

func (self EngineProfiler) Virtual(name string) reflect.Value {
	switch name {
	case "_toggle": return reflect.ValueOf(self._toggle);
	case "_add_frame": return reflect.ValueOf(self._add_frame);
	case "_tick": return reflect.ValueOf(self._tick);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type EnvironmentBGMode int64

type EnvironmentAmbientSource int64

type EnvironmentReflectionSource int64

type EnvironmentToneMapper int64

type EnvironmentGlowBlendMode int64

type EnvironmentFogMode int64

type EnvironmentSDFGIYScale int64
type Environment struct {_ [0]*Environment; ptr gd.Pointer}

//go:nosplit
func (self Environment) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Environment) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Environment) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Environment) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Environment) AsEnvironment() [1]Environment { return [1]Environment{self} }


//go:nosplit
func (self Environment) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Environment) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Environment) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Expression struct {_ [0]*Expression; ptr gd.Pointer}

//go:nosplit
func (self Expression) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Expression) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Expression) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Expression) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Expression) AsExpression() [1]Expression { return [1]Expression{self} }


//go:nosplit
func (self Expression) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Expression) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type FBXDocument struct {_ [0]*FBXDocument; ptr gd.Pointer}

//go:nosplit
func (self FBXDocument) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *FBXDocument) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self FBXDocument) Super() [1]GLTFDocument { return *(*[1]GLTFDocument)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FBXDocument) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FBXDocument) AsFBXDocument() [1]FBXDocument { return [1]FBXDocument{self} }


//go:nosplit
func (self FBXDocument) AsGLTFDocument() [1]GLTFDocument { return *(*[1]GLTFDocument)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FBXDocument) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FBXDocument) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self FBXDocument) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type FBXState struct {_ [0]*FBXState; ptr gd.Pointer}

//go:nosplit
func (self FBXState) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *FBXState) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self FBXState) Super() [1]GLTFState { return *(*[1]GLTFState)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FBXState) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FBXState) AsFBXState() [1]FBXState { return [1]FBXState{self} }


//go:nosplit
func (self FBXState) AsGLTFState() [1]GLTFState { return *(*[1]GLTFState)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FBXState) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FBXState) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self FBXState) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type FastNoiseLiteNoiseType int64

type FastNoiseLiteFractalType int64

type FastNoiseLiteCellularDistanceFunction int64

type FastNoiseLiteCellularReturnType int64

type FastNoiseLiteDomainWarpType int64

type FastNoiseLiteDomainWarpFractalType int64
type FastNoiseLite struct {_ [0]*FastNoiseLite; ptr gd.Pointer}

//go:nosplit
func (self FastNoiseLite) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *FastNoiseLite) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self FastNoiseLite) Super() [1]Noise { return *(*[1]Noise)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FastNoiseLite) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FastNoiseLite) AsFastNoiseLite() [1]FastNoiseLite { return [1]FastNoiseLite{self} }


//go:nosplit
func (self FastNoiseLite) AsNoise() [1]Noise { return *(*[1]Noise)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FastNoiseLite) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FastNoiseLite) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self FastNoiseLite) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type FileAccessModeFlags int64

type FileAccessCompressionMode int64

type FileAccessUnixPermissionFlags int64
type FileAccess struct {_ [0]*FileAccess; ptr gd.Pointer}

//go:nosplit
func (self FileAccess) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *FileAccess) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self FileAccess) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileAccess) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileAccess) AsFileAccess() [1]FileAccess { return [1]FileAccess{self} }


//go:nosplit
func (self FileAccess) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self FileAccess) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type FileDialogFileMode int64

type FileDialogAccess int64
type FileDialog struct {_ [0]*FileDialog; ptr gd.Pointer}

//go:nosplit
func (self FileDialog) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *FileDialog) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self FileDialog) Super() [1]ConfirmationDialog { return *(*[1]ConfirmationDialog)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileDialog) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileDialog) AsFileDialog() [1]FileDialog { return [1]FileDialog{self} }


//go:nosplit
func (self FileDialog) AsConfirmationDialog() [1]ConfirmationDialog { return *(*[1]ConfirmationDialog)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileDialog) AsAcceptDialog() [1]AcceptDialog { return *(*[1]AcceptDialog)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileDialog) AsWindow() [1]Window { return *(*[1]Window)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileDialog) AsViewport() [1]Viewport { return *(*[1]Viewport)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileDialog) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self FileDialog) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type FileSystemDock struct {_ [0]*FileSystemDock; ptr gd.Pointer}

//go:nosplit
func (self FileSystemDock) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *FileSystemDock) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self FileSystemDock) Super() [1]VBoxContainer { return *(*[1]VBoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileSystemDock) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileSystemDock) AsFileSystemDock() [1]FileSystemDock { return [1]FileSystemDock{self} }


//go:nosplit
func (self FileSystemDock) AsVBoxContainer() [1]VBoxContainer { return *(*[1]VBoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileSystemDock) AsBoxContainer() [1]BoxContainer { return *(*[1]BoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileSystemDock) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileSystemDock) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileSystemDock) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FileSystemDock) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self FileSystemDock) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type FlowContainerAlignmentMode int64

type FlowContainerLastWrapAlignmentMode int64
type FlowContainer struct {_ [0]*FlowContainer; ptr gd.Pointer}

//go:nosplit
func (self FlowContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *FlowContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self FlowContainer) Super() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FlowContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FlowContainer) AsFlowContainer() [1]FlowContainer { return [1]FlowContainer{self} }


//go:nosplit
func (self FlowContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FlowContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FlowContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FlowContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self FlowContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type FogMaterial struct {_ [0]*FogMaterial; ptr gd.Pointer}

//go:nosplit
func (self FogMaterial) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *FogMaterial) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self FogMaterial) Super() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FogMaterial) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FogMaterial) AsFogMaterial() [1]FogMaterial { return [1]FogMaterial{self} }


//go:nosplit
func (self FogMaterial) AsMaterial() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FogMaterial) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FogMaterial) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self FogMaterial) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type FogVolume struct {_ [0]*FogVolume; ptr gd.Pointer}

//go:nosplit
func (self FogVolume) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *FogVolume) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self FogVolume) Super() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FogVolume) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FogVolume) AsFogVolume() [1]FogVolume { return [1]FogVolume{self} }


//go:nosplit
func (self FogVolume) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FogVolume) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FogVolume) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self FogVolume) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Font struct {_ [0]*Font; ptr gd.Pointer}

//go:nosplit
func (self Font) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Font) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Font) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Font) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Font) AsFont() [1]Font { return [1]Font{self} }


//go:nosplit
func (self Font) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Font) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Font) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type FontFile struct {_ [0]*FontFile; ptr gd.Pointer}

//go:nosplit
func (self FontFile) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *FontFile) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self FontFile) Super() [1]Font { return *(*[1]Font)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FontFile) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FontFile) AsFontFile() [1]FontFile { return [1]FontFile{self} }


//go:nosplit
func (self FontFile) AsFont() [1]Font { return *(*[1]Font)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FontFile) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FontFile) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self FontFile) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type FontVariation struct {_ [0]*FontVariation; ptr gd.Pointer}

//go:nosplit
func (self FontVariation) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *FontVariation) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self FontVariation) Super() [1]Font { return *(*[1]Font)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FontVariation) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FontVariation) AsFontVariation() [1]FontVariation { return [1]FontVariation{self} }


//go:nosplit
func (self FontVariation) AsFont() [1]Font { return *(*[1]Font)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FontVariation) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FontVariation) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self FontVariation) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type FramebufferCacheRD struct {_ [0]*FramebufferCacheRD; ptr gd.Pointer}

//go:nosplit
func (self FramebufferCacheRD) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *FramebufferCacheRD) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self FramebufferCacheRD) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FramebufferCacheRD) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self FramebufferCacheRD) AsFramebufferCacheRD() [1]FramebufferCacheRD { return [1]FramebufferCacheRD{self} }

func (self FramebufferCacheRD) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type GDExtensionInitializationLevel int64

const (
/*The library is initialized at the same time as the core features of the engine.*/
	GDExtensionInitializationLevelCore GDExtensionInitializationLevel = 0
/*The library is initialized at the same time as the engine's servers (such as [RenderingServer] or [PhysicsServer3D]).*/
	GDExtensionInitializationLevelServers GDExtensionInitializationLevel = 1
/*The library is initialized at the same time as the engine's scene-related classes.*/
	GDExtensionInitializationLevelScene GDExtensionInitializationLevel = 2
/*The library is initialized at the same time as the engine's editor classes. Only happens when loading the GDExtension in the editor.*/
	GDExtensionInitializationLevelEditor GDExtensionInitializationLevel = 3
)
type GDExtension struct {_ [0]*GDExtension; ptr gd.Pointer}

//go:nosplit
func (self GDExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GDExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GDExtension) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GDExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GDExtension) AsGDExtension() [1]GDExtension { return [1]GDExtension{self} }


//go:nosplit
func (self GDExtension) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GDExtension) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GDExtension) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type GDExtensionManagerLoadStatus int64
type GDExtensionManager struct {_ [0]*GDExtensionManager; ptr gd.Pointer}

//go:nosplit
func (self GDExtensionManager) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GDExtensionManager) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GDExtensionManager) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GDExtensionManager) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GDExtensionManager) AsGDExtensionManager() [1]GDExtensionManager { return [1]GDExtensionManager{self} }

//go:nosplit

func (self GDExtensionManager) IsSingleton() {}

func (self GDExtensionManager) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GDScript struct {_ [0]*GDScript; ptr gd.Pointer}

//go:nosplit
func (self GDScript) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GDScript) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GDScript) Super() [1]Script { return *(*[1]Script)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GDScript) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GDScript) AsGDScript() [1]GDScript { return [1]GDScript{self} }


//go:nosplit
func (self GDScript) AsScript() [1]Script { return *(*[1]Script)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GDScript) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GDScript) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GDScript) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type GLTFAccessorGLTFAccessorType int64
type GLTFAccessor struct {_ [0]*GLTFAccessor; ptr gd.Pointer}

//go:nosplit
func (self GLTFAccessor) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFAccessor) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFAccessor) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFAccessor) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFAccessor) AsGLTFAccessor() [1]GLTFAccessor { return [1]GLTFAccessor{self} }


//go:nosplit
func (self GLTFAccessor) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFAccessor) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFAccessor) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFAnimation struct {_ [0]*GLTFAnimation; ptr gd.Pointer}

//go:nosplit
func (self GLTFAnimation) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFAnimation) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFAnimation) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFAnimation) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFAnimation) AsGLTFAnimation() [1]GLTFAnimation { return [1]GLTFAnimation{self} }


//go:nosplit
func (self GLTFAnimation) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFAnimation) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFAnimation) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFBufferView struct {_ [0]*GLTFBufferView; ptr gd.Pointer}

//go:nosplit
func (self GLTFBufferView) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFBufferView) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFBufferView) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFBufferView) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFBufferView) AsGLTFBufferView() [1]GLTFBufferView { return [1]GLTFBufferView{self} }


//go:nosplit
func (self GLTFBufferView) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFBufferView) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFBufferView) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFCamera struct {_ [0]*GLTFCamera; ptr gd.Pointer}

//go:nosplit
func (self GLTFCamera) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFCamera) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFCamera) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFCamera) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFCamera) AsGLTFCamera() [1]GLTFCamera { return [1]GLTFCamera{self} }


//go:nosplit
func (self GLTFCamera) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFCamera) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFCamera) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type GLTFDocumentRootNodeMode int64
type GLTFDocument struct {_ [0]*GLTFDocument; ptr gd.Pointer}

//go:nosplit
func (self GLTFDocument) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFDocument) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFDocument) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFDocument) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFDocument) AsGLTFDocument() [1]GLTFDocument { return [1]GLTFDocument{self} }


//go:nosplit
func (self GLTFDocument) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFDocument) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFDocument) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFDocumentExtension struct {_ [0]*GLTFDocumentExtension; ptr gd.Pointer}

//go:nosplit
func (self GLTFDocumentExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFDocumentExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFDocumentExtension) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFDocumentExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFDocumentExtension) AsGLTFDocumentExtension() [1]GLTFDocumentExtension { return [1]GLTFDocumentExtension{self} }


//go:nosplit
func (self GLTFDocumentExtension) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFDocumentExtension) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Part of the import process. This method is run first, before all other parts of the import process.
The return value is used to determine if this [GLTFDocumentExtension] instance should be used for importing a given GLTF file. If [constant OK], the import will use this [GLTFDocumentExtension] instance. If not overridden, [constant OK] is returned.
*/
func (GLTFDocumentExtension) _import_preflight(impl func(ptr unsafe.Pointer, state GLTFState, extensions gd.PackedStringArray) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var extensions = mmm.Let[gd.PackedStringArray](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state, extensions)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Part of the import process. This method is run after [method _import_preflight] and before [method _parse_node_extensions].
Returns an array of the GLTF extensions supported by this GLTFDocumentExtension class. This is used to validate if a GLTF file with required extensions can be loaded.
*/
func (GLTFDocumentExtension) _get_supported_extensions(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Part of the import process. This method is run after [method _get_supported_extensions] and before [method _import_post_parse].
Runs when parsing the node extensions of a GLTFNode. This method can be used to process the extension JSON data into a format that can be used by [method _generate_scene_node]. The return value should be a member of the [enum Error] enum.
*/
func (GLTFDocumentExtension) _parse_node_extensions(impl func(ptr unsafe.Pointer, state GLTFState, gltf_node GLTFNode, extensions gd.Dictionary) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var gltf_node GLTFNode
		gltf_node.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		var extensions = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state, gltf_node, extensions)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Part of the import process. This method is run after [method _parse_node_extensions] and before [method _parse_texture_json].
Runs when parsing image data from a GLTF file. The data could be sourced from a separate file, a URI, or a buffer, and then is passed as a byte array.
*/
func (GLTFDocumentExtension) _parse_image_data(impl func(ptr unsafe.Pointer, state GLTFState, image_data gd.PackedByteArray, mime_type gd.String, ret_image Image) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var image_data = mmm.Let[gd.PackedByteArray](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		var mime_type = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		var ret_image Image
		ret_image.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,3)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state, image_data, mime_type, ret_image)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns the file extension to use for saving image data into, for example, [code]".png"[/code]. If defined, when this extension is used to handle images, and the images are saved to a separate file, the image bytes will be copied to a file with this extension. If this is set, there should be a [ResourceImporter] class able to import the file. If not defined or empty, Godot will save the image into a PNG file.
*/
func (GLTFDocumentExtension) _get_image_file_extension(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Part of the import process. This method is run after [method _parse_image_data] and before [method _generate_scene_node].
Runs when parsing the texture JSON from the GLTF textures array. This can be used to set the source image index to use as the texture.
*/
func (GLTFDocumentExtension) _parse_texture_json(impl func(ptr unsafe.Pointer, state GLTFState, texture_json gd.Dictionary, ret_gltf_texture GLTFTexture) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var texture_json = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var ret_gltf_texture GLTFTexture
		ret_gltf_texture.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,2)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state, texture_json, ret_gltf_texture)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Part of the import process. This method is run after [method _import_post_parse] and before [method _import_node].
Runs when generating a Godot scene node from a GLTFNode. The returned node will be added to the scene tree. Multiple nodes can be generated in this step if they are added as a child of the returned node.
[b]Note:[/b] The [param scene_parent] parameter may be null if this is the single root node.
*/
func (GLTFDocumentExtension) _generate_scene_node(impl func(ptr unsafe.Pointer, state GLTFState, gltf_node GLTFNode, scene_parent Node) Node3D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var gltf_node GLTFNode
		gltf_node.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		var scene_parent Node
		scene_parent.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,2)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state, gltf_node, scene_parent)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Part of the import process. This method is run after [method _parse_node_extensions] and before [method _generate_scene_node].
This method can be used to modify any of the data imported so far after parsing, before generating the nodes and then running the final per-node import step.
*/
func (GLTFDocumentExtension) _import_post_parse(impl func(ptr unsafe.Pointer, state GLTFState) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Part of the import process. This method is run after [method _generate_scene_node] and before [method _import_post].
This method can be used to make modifications to each of the generated Godot scene nodes.
*/
func (GLTFDocumentExtension) _import_node(impl func(ptr unsafe.Pointer, state GLTFState, gltf_node GLTFNode, json gd.Dictionary, node Node) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var gltf_node GLTFNode
		gltf_node.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		var json = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		var node Node
		node.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,3)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state, gltf_node, json, node)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Part of the import process. This method is run last, after all other parts of the import process.
This method can be used to modify the final Godot scene generated by the import process.
*/
func (GLTFDocumentExtension) _import_post(impl func(ptr unsafe.Pointer, state GLTFState, root Node) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var root Node
		root.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state, root)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Part of the export process. This method is run first, before all other parts of the export process.
The return value is used to determine if this [GLTFDocumentExtension] instance should be used for exporting a given GLTF file. If [constant OK], the export will use this [GLTFDocumentExtension] instance. If not overridden, [constant OK] is returned.
*/
func (GLTFDocumentExtension) _export_preflight(impl func(ptr unsafe.Pointer, state GLTFState, root Node) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var root Node
		root.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state, root)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Part of the export process. This method is run after [method _export_preflight] and before [method _export_preserialize].
Runs when converting the data from a Godot scene node. This method can be used to process the Godot scene node data into a format that can be used by [method _export_node].
*/
func (GLTFDocumentExtension) _convert_scene_node(impl func(ptr unsafe.Pointer, state GLTFState, gltf_node GLTFNode, scene_node Node) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var gltf_node GLTFNode
		gltf_node.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		var scene_node Node
		scene_node.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,2)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, state, gltf_node, scene_node)
		ctx.End()
	}
}

/*
Part of the export process. This method is run after [method _convert_scene_node] and before [method _get_saveable_image_formats].
This method can be used to alter the state before performing serialization. It runs every time when generating a buffer with [method GLTFDocument.generate_buffer] or writing to the file system with [method GLTFDocument.write_to_filesystem].
*/
func (GLTFDocumentExtension) _export_preserialize(impl func(ptr unsafe.Pointer, state GLTFState) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Part of the export process. This method is run after [method _convert_scene_node] and before [method _export_node].
Returns an array of the image formats that can be saved/exported by this extension. This extension will only be selected as the image exporter if the [GLTFDocument]'s [member GLTFDocument.image_format] is in this array. If this [GLTFDocumentExtension] is selected as the image exporter, one of the [method _save_image_at_path] or [method _serialize_image_to_bytes] methods will run next, otherwise [method _export_node] will run next. If the format name contains [code]"Lossy"[/code], the lossy quality slider will be displayed.
*/
func (GLTFDocumentExtension) _get_saveable_image_formats(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Part of the export process. This method is run after [method _get_saveable_image_formats] and before [method _serialize_texture_json].
This method is run when embedding images in the GLTF file. When images are saved separately, [method _save_image_at_path] runs instead. Note that these methods only run when this [GLTFDocumentExtension] is selected as the image exporter.
This method must set the image MIME type in the [param image_dict] with the [code]"mimeType"[/code] key. For example, for a PNG image, it would be set to [code]"image/png"[/code]. The return value must be a [PackedByteArray] containing the image data.
*/
func (GLTFDocumentExtension) _serialize_image_to_bytes(impl func(ptr unsafe.Pointer, state GLTFState, image Image, image_dict gd.Dictionary, image_format gd.String, lossy_quality gd.Float) gd.PackedByteArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var image Image
		image.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		var image_dict = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		var image_format = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,3))
		var lossy_quality = gd.UnsafeGet[gd.Float](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state, image, image_dict, image_format, lossy_quality)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Part of the export process. This method is run after [method _get_saveable_image_formats] and before [method _serialize_texture_json].
This method is run when saving images separately from the GLTF file. When images are embedded, [method _serialize_image_to_bytes] runs instead. Note that these methods only run when this [GLTFDocumentExtension] is selected as the image exporter.
*/
func (GLTFDocumentExtension) _save_image_at_path(impl func(ptr unsafe.Pointer, state GLTFState, image Image, file_path gd.String, image_format gd.String, lossy_quality gd.Float) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var image Image
		image.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		var file_path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		var image_format = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,3))
		var lossy_quality = gd.UnsafeGet[gd.Float](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state, image, file_path, image_format, lossy_quality)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Part of the export process. This method is run after [method _save_image_at_path] or [method _serialize_image_to_bytes], and before [method _export_node]. Note that this method only runs when this [GLTFDocumentExtension] is selected as the image exporter.
This method can be used to set up the extensions for the texture JSON by editing [param texture_json]. The extension must also be added as used extension with [method GLTFState.add_used_extension], be sure to set [code]required[/code] to [code]true[/code] if you are not providing a fallback.
*/
func (GLTFDocumentExtension) _serialize_texture_json(impl func(ptr unsafe.Pointer, state GLTFState, texture_json gd.Dictionary, gltf_texture GLTFTexture, image_format gd.String) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var texture_json = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var gltf_texture GLTFTexture
		gltf_texture.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,2)}))
		var image_format = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,3))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state, texture_json, gltf_texture, image_format)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Part of the export process. This method is run after [method _get_saveable_image_formats] and before [method _export_post]. If this [GLTFDocumentExtension] is used for exporting images, this runs after [method _serialize_texture_json].
This method can be used to modify the final JSON of each node. Data should be primarily stored in [param gltf_node] prior to serializing the JSON, but the original Godot [param node] is also provided if available. The node may be null if not available, such as when exporting GLTF data not generated from a Godot scene.
*/
func (GLTFDocumentExtension) _export_node(impl func(ptr unsafe.Pointer, state GLTFState, gltf_node GLTFNode, json gd.Dictionary, node Node) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var gltf_node GLTFNode
		gltf_node.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		var json = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		var node Node
		node.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,3)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state, gltf_node, json, node)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Part of the export process. This method is run last, after all other parts of the export process.
This method can be used to modify the final JSON of the generated GLTF file.
*/
func (GLTFDocumentExtension) _export_post(impl func(ptr unsafe.Pointer, state GLTFState) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state GLTFState
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, state)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self GLTFDocumentExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_import_preflight": return reflect.ValueOf(self._import_preflight);
	case "_get_supported_extensions": return reflect.ValueOf(self._get_supported_extensions);
	case "_parse_node_extensions": return reflect.ValueOf(self._parse_node_extensions);
	case "_parse_image_data": return reflect.ValueOf(self._parse_image_data);
	case "_get_image_file_extension": return reflect.ValueOf(self._get_image_file_extension);
	case "_parse_texture_json": return reflect.ValueOf(self._parse_texture_json);
	case "_generate_scene_node": return reflect.ValueOf(self._generate_scene_node);
	case "_import_post_parse": return reflect.ValueOf(self._import_post_parse);
	case "_import_node": return reflect.ValueOf(self._import_node);
	case "_import_post": return reflect.ValueOf(self._import_post);
	case "_export_preflight": return reflect.ValueOf(self._export_preflight);
	case "_convert_scene_node": return reflect.ValueOf(self._convert_scene_node);
	case "_export_preserialize": return reflect.ValueOf(self._export_preserialize);
	case "_get_saveable_image_formats": return reflect.ValueOf(self._get_saveable_image_formats);
	case "_serialize_image_to_bytes": return reflect.ValueOf(self._serialize_image_to_bytes);
	case "_save_image_at_path": return reflect.ValueOf(self._save_image_at_path);
	case "_serialize_texture_json": return reflect.ValueOf(self._serialize_texture_json);
	case "_export_node": return reflect.ValueOf(self._export_node);
	case "_export_post": return reflect.ValueOf(self._export_post);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFDocumentExtensionConvertImporterMesh struct {_ [0]*GLTFDocumentExtensionConvertImporterMesh; ptr gd.Pointer}

//go:nosplit
func (self GLTFDocumentExtensionConvertImporterMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFDocumentExtensionConvertImporterMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFDocumentExtensionConvertImporterMesh) Super() [1]GLTFDocumentExtension { return *(*[1]GLTFDocumentExtension)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFDocumentExtensionConvertImporterMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFDocumentExtensionConvertImporterMesh) AsGLTFDocumentExtensionConvertImporterMesh() [1]GLTFDocumentExtensionConvertImporterMesh { return [1]GLTFDocumentExtensionConvertImporterMesh{self} }


//go:nosplit
func (self GLTFDocumentExtensionConvertImporterMesh) AsGLTFDocumentExtension() [1]GLTFDocumentExtension { return *(*[1]GLTFDocumentExtension)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFDocumentExtensionConvertImporterMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFDocumentExtensionConvertImporterMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFDocumentExtensionConvertImporterMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFLight struct {_ [0]*GLTFLight; ptr gd.Pointer}

//go:nosplit
func (self GLTFLight) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFLight) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFLight) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFLight) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFLight) AsGLTFLight() [1]GLTFLight { return [1]GLTFLight{self} }


//go:nosplit
func (self GLTFLight) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFLight) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFLight) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFMesh struct {_ [0]*GLTFMesh; ptr gd.Pointer}

//go:nosplit
func (self GLTFMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFMesh) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFMesh) AsGLTFMesh() [1]GLTFMesh { return [1]GLTFMesh{self} }


//go:nosplit
func (self GLTFMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFNode struct {_ [0]*GLTFNode; ptr gd.Pointer}

//go:nosplit
func (self GLTFNode) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFNode) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFNode) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFNode) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFNode) AsGLTFNode() [1]GLTFNode { return [1]GLTFNode{self} }


//go:nosplit
func (self GLTFNode) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFNode) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFNode) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFPhysicsBody struct {_ [0]*GLTFPhysicsBody; ptr gd.Pointer}

//go:nosplit
func (self GLTFPhysicsBody) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFPhysicsBody) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFPhysicsBody) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFPhysicsBody) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFPhysicsBody) AsGLTFPhysicsBody() [1]GLTFPhysicsBody { return [1]GLTFPhysicsBody{self} }


//go:nosplit
func (self GLTFPhysicsBody) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFPhysicsBody) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFPhysicsBody) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFPhysicsShape struct {_ [0]*GLTFPhysicsShape; ptr gd.Pointer}

//go:nosplit
func (self GLTFPhysicsShape) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFPhysicsShape) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFPhysicsShape) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFPhysicsShape) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFPhysicsShape) AsGLTFPhysicsShape() [1]GLTFPhysicsShape { return [1]GLTFPhysicsShape{self} }


//go:nosplit
func (self GLTFPhysicsShape) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFPhysicsShape) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFPhysicsShape) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFSkeleton struct {_ [0]*GLTFSkeleton; ptr gd.Pointer}

//go:nosplit
func (self GLTFSkeleton) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFSkeleton) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFSkeleton) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFSkeleton) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFSkeleton) AsGLTFSkeleton() [1]GLTFSkeleton { return [1]GLTFSkeleton{self} }


//go:nosplit
func (self GLTFSkeleton) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFSkeleton) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFSkeleton) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFSkin struct {_ [0]*GLTFSkin; ptr gd.Pointer}

//go:nosplit
func (self GLTFSkin) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFSkin) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFSkin) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFSkin) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFSkin) AsGLTFSkin() [1]GLTFSkin { return [1]GLTFSkin{self} }


//go:nosplit
func (self GLTFSkin) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFSkin) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFSkin) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFSpecGloss struct {_ [0]*GLTFSpecGloss; ptr gd.Pointer}

//go:nosplit
func (self GLTFSpecGloss) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFSpecGloss) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFSpecGloss) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFSpecGloss) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFSpecGloss) AsGLTFSpecGloss() [1]GLTFSpecGloss { return [1]GLTFSpecGloss{self} }


//go:nosplit
func (self GLTFSpecGloss) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFSpecGloss) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFSpecGloss) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFState struct {_ [0]*GLTFState; ptr gd.Pointer}

//go:nosplit
func (self GLTFState) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFState) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFState) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFState) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFState) AsGLTFState() [1]GLTFState { return [1]GLTFState{self} }


//go:nosplit
func (self GLTFState) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFState) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFState) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFTexture struct {_ [0]*GLTFTexture; ptr gd.Pointer}

//go:nosplit
func (self GLTFTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFTexture) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFTexture) AsGLTFTexture() [1]GLTFTexture { return [1]GLTFTexture{self} }


//go:nosplit
func (self GLTFTexture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GLTFTextureSampler struct {_ [0]*GLTFTextureSampler; ptr gd.Pointer}

//go:nosplit
func (self GLTFTextureSampler) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GLTFTextureSampler) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GLTFTextureSampler) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFTextureSampler) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFTextureSampler) AsGLTFTextureSampler() [1]GLTFTextureSampler { return [1]GLTFTextureSampler{self} }


//go:nosplit
func (self GLTFTextureSampler) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GLTFTextureSampler) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GLTFTextureSampler) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type GPUParticles2DDrawOrder int64

type GPUParticles2DEmitFlags int64
type GPUParticles2D struct {_ [0]*GPUParticles2D; ptr gd.Pointer}

//go:nosplit
func (self GPUParticles2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GPUParticles2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GPUParticles2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticles2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticles2D) AsGPUParticles2D() [1]GPUParticles2D { return [1]GPUParticles2D{self} }


//go:nosplit
func (self GPUParticles2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticles2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticles2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GPUParticles2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type GPUParticles3DDrawOrder int64

type GPUParticles3DEmitFlags int64

type GPUParticles3DTransformAlign int64
type GPUParticles3D struct {_ [0]*GPUParticles3D; ptr gd.Pointer}

//go:nosplit
func (self GPUParticles3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GPUParticles3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GPUParticles3D) Super() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticles3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticles3D) AsGPUParticles3D() [1]GPUParticles3D { return [1]GPUParticles3D{self} }


//go:nosplit
func (self GPUParticles3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticles3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticles3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticles3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GPUParticles3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GPUParticlesAttractor3D struct {_ [0]*GPUParticlesAttractor3D; ptr gd.Pointer}

//go:nosplit
func (self GPUParticlesAttractor3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GPUParticlesAttractor3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GPUParticlesAttractor3D) Super() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractor3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractor3D) AsGPUParticlesAttractor3D() [1]GPUParticlesAttractor3D { return [1]GPUParticlesAttractor3D{self} }


//go:nosplit
func (self GPUParticlesAttractor3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractor3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractor3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GPUParticlesAttractor3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GPUParticlesAttractorBox3D struct {_ [0]*GPUParticlesAttractorBox3D; ptr gd.Pointer}

//go:nosplit
func (self GPUParticlesAttractorBox3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GPUParticlesAttractorBox3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GPUParticlesAttractorBox3D) Super() [1]GPUParticlesAttractor3D { return *(*[1]GPUParticlesAttractor3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorBox3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorBox3D) AsGPUParticlesAttractorBox3D() [1]GPUParticlesAttractorBox3D { return [1]GPUParticlesAttractorBox3D{self} }


//go:nosplit
func (self GPUParticlesAttractorBox3D) AsGPUParticlesAttractor3D() [1]GPUParticlesAttractor3D { return *(*[1]GPUParticlesAttractor3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorBox3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorBox3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorBox3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GPUParticlesAttractorBox3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GPUParticlesAttractorSphere3D struct {_ [0]*GPUParticlesAttractorSphere3D; ptr gd.Pointer}

//go:nosplit
func (self GPUParticlesAttractorSphere3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GPUParticlesAttractorSphere3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GPUParticlesAttractorSphere3D) Super() [1]GPUParticlesAttractor3D { return *(*[1]GPUParticlesAttractor3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorSphere3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorSphere3D) AsGPUParticlesAttractorSphere3D() [1]GPUParticlesAttractorSphere3D { return [1]GPUParticlesAttractorSphere3D{self} }


//go:nosplit
func (self GPUParticlesAttractorSphere3D) AsGPUParticlesAttractor3D() [1]GPUParticlesAttractor3D { return *(*[1]GPUParticlesAttractor3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorSphere3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorSphere3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorSphere3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GPUParticlesAttractorSphere3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GPUParticlesAttractorVectorField3D struct {_ [0]*GPUParticlesAttractorVectorField3D; ptr gd.Pointer}

//go:nosplit
func (self GPUParticlesAttractorVectorField3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GPUParticlesAttractorVectorField3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GPUParticlesAttractorVectorField3D) Super() [1]GPUParticlesAttractor3D { return *(*[1]GPUParticlesAttractor3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorVectorField3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorVectorField3D) AsGPUParticlesAttractorVectorField3D() [1]GPUParticlesAttractorVectorField3D { return [1]GPUParticlesAttractorVectorField3D{self} }


//go:nosplit
func (self GPUParticlesAttractorVectorField3D) AsGPUParticlesAttractor3D() [1]GPUParticlesAttractor3D { return *(*[1]GPUParticlesAttractor3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorVectorField3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorVectorField3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesAttractorVectorField3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GPUParticlesAttractorVectorField3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GPUParticlesCollision3D struct {_ [0]*GPUParticlesCollision3D; ptr gd.Pointer}

//go:nosplit
func (self GPUParticlesCollision3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GPUParticlesCollision3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GPUParticlesCollision3D) Super() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollision3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollision3D) AsGPUParticlesCollision3D() [1]GPUParticlesCollision3D { return [1]GPUParticlesCollision3D{self} }


//go:nosplit
func (self GPUParticlesCollision3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollision3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollision3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GPUParticlesCollision3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GPUParticlesCollisionBox3D struct {_ [0]*GPUParticlesCollisionBox3D; ptr gd.Pointer}

//go:nosplit
func (self GPUParticlesCollisionBox3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GPUParticlesCollisionBox3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GPUParticlesCollisionBox3D) Super() [1]GPUParticlesCollision3D { return *(*[1]GPUParticlesCollision3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionBox3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionBox3D) AsGPUParticlesCollisionBox3D() [1]GPUParticlesCollisionBox3D { return [1]GPUParticlesCollisionBox3D{self} }


//go:nosplit
func (self GPUParticlesCollisionBox3D) AsGPUParticlesCollision3D() [1]GPUParticlesCollision3D { return *(*[1]GPUParticlesCollision3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionBox3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionBox3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionBox3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GPUParticlesCollisionBox3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type GPUParticlesCollisionHeightField3DResolution int64

type GPUParticlesCollisionHeightField3DUpdateMode int64
type GPUParticlesCollisionHeightField3D struct {_ [0]*GPUParticlesCollisionHeightField3D; ptr gd.Pointer}

//go:nosplit
func (self GPUParticlesCollisionHeightField3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GPUParticlesCollisionHeightField3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GPUParticlesCollisionHeightField3D) Super() [1]GPUParticlesCollision3D { return *(*[1]GPUParticlesCollision3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionHeightField3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionHeightField3D) AsGPUParticlesCollisionHeightField3D() [1]GPUParticlesCollisionHeightField3D { return [1]GPUParticlesCollisionHeightField3D{self} }


//go:nosplit
func (self GPUParticlesCollisionHeightField3D) AsGPUParticlesCollision3D() [1]GPUParticlesCollision3D { return *(*[1]GPUParticlesCollision3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionHeightField3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionHeightField3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionHeightField3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GPUParticlesCollisionHeightField3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type GPUParticlesCollisionSDF3DResolution int64
type GPUParticlesCollisionSDF3D struct {_ [0]*GPUParticlesCollisionSDF3D; ptr gd.Pointer}

//go:nosplit
func (self GPUParticlesCollisionSDF3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GPUParticlesCollisionSDF3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GPUParticlesCollisionSDF3D) Super() [1]GPUParticlesCollision3D { return *(*[1]GPUParticlesCollision3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionSDF3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionSDF3D) AsGPUParticlesCollisionSDF3D() [1]GPUParticlesCollisionSDF3D { return [1]GPUParticlesCollisionSDF3D{self} }


//go:nosplit
func (self GPUParticlesCollisionSDF3D) AsGPUParticlesCollision3D() [1]GPUParticlesCollision3D { return *(*[1]GPUParticlesCollision3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionSDF3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionSDF3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionSDF3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GPUParticlesCollisionSDF3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GPUParticlesCollisionSphere3D struct {_ [0]*GPUParticlesCollisionSphere3D; ptr gd.Pointer}

//go:nosplit
func (self GPUParticlesCollisionSphere3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GPUParticlesCollisionSphere3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GPUParticlesCollisionSphere3D) Super() [1]GPUParticlesCollision3D { return *(*[1]GPUParticlesCollision3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionSphere3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionSphere3D) AsGPUParticlesCollisionSphere3D() [1]GPUParticlesCollisionSphere3D { return [1]GPUParticlesCollisionSphere3D{self} }


//go:nosplit
func (self GPUParticlesCollisionSphere3D) AsGPUParticlesCollision3D() [1]GPUParticlesCollision3D { return *(*[1]GPUParticlesCollision3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionSphere3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionSphere3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GPUParticlesCollisionSphere3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GPUParticlesCollisionSphere3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type Generic6DOFJoint3DParam int64

type Generic6DOFJoint3DFlag int64
type Generic6DOFJoint3D struct {_ [0]*Generic6DOFJoint3D; ptr gd.Pointer}

//go:nosplit
func (self Generic6DOFJoint3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Generic6DOFJoint3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Generic6DOFJoint3D) Super() [1]Joint3D { return *(*[1]Joint3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Generic6DOFJoint3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Generic6DOFJoint3D) AsGeneric6DOFJoint3D() [1]Generic6DOFJoint3D { return [1]Generic6DOFJoint3D{self} }


//go:nosplit
func (self Generic6DOFJoint3D) AsJoint3D() [1]Joint3D { return *(*[1]Joint3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Generic6DOFJoint3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Generic6DOFJoint3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Generic6DOFJoint3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type Geometry2DPolyBooleanOperation int64

type Geometry2DPolyJoinType int64

type Geometry2DPolyEndType int64
type Geometry2D struct {_ [0]*Geometry2D; ptr gd.Pointer}

//go:nosplit
func (self Geometry2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Geometry2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Geometry2D) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Geometry2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Geometry2D) AsGeometry2D() [1]Geometry2D { return [1]Geometry2D{self} }

//go:nosplit

func (self Geometry2D) IsSingleton() {}

func (self Geometry2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Geometry3D struct {_ [0]*Geometry3D; ptr gd.Pointer}

//go:nosplit
func (self Geometry3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Geometry3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Geometry3D) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Geometry3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Geometry3D) AsGeometry3D() [1]Geometry3D { return [1]Geometry3D{self} }

//go:nosplit

func (self Geometry3D) IsSingleton() {}

func (self Geometry3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type GeometryInstance3DShadowCastingSetting int64

type GeometryInstance3DGIMode int64

type GeometryInstance3DLightmapScale int64

type GeometryInstance3DVisibilityRangeFadeMode int64
type GeometryInstance3D struct {_ [0]*GeometryInstance3D; ptr gd.Pointer}

//go:nosplit
func (self GeometryInstance3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GeometryInstance3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GeometryInstance3D) Super() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GeometryInstance3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GeometryInstance3D) AsGeometryInstance3D() [1]GeometryInstance3D { return [1]GeometryInstance3D{self} }


//go:nosplit
func (self GeometryInstance3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GeometryInstance3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GeometryInstance3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GeometryInstance3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type GradientInterpolationMode int64

type GradientColorSpace int64
type Gradient struct {_ [0]*Gradient; ptr gd.Pointer}

//go:nosplit
func (self Gradient) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Gradient) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Gradient) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Gradient) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Gradient) AsGradient() [1]Gradient { return [1]Gradient{self} }


//go:nosplit
func (self Gradient) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Gradient) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Gradient) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GradientTexture1D struct {_ [0]*GradientTexture1D; ptr gd.Pointer}

//go:nosplit
func (self GradientTexture1D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GradientTexture1D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GradientTexture1D) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GradientTexture1D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GradientTexture1D) AsGradientTexture1D() [1]GradientTexture1D { return [1]GradientTexture1D{self} }


//go:nosplit
func (self GradientTexture1D) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GradientTexture1D) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GradientTexture1D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GradientTexture1D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GradientTexture1D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type GradientTexture2DFill int64

type GradientTexture2DRepeat int64
type GradientTexture2D struct {_ [0]*GradientTexture2D; ptr gd.Pointer}

//go:nosplit
func (self GradientTexture2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GradientTexture2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GradientTexture2D) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GradientTexture2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GradientTexture2D) AsGradientTexture2D() [1]GradientTexture2D { return [1]GradientTexture2D{self} }


//go:nosplit
func (self GradientTexture2D) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GradientTexture2D) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GradientTexture2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GradientTexture2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self GradientTexture2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type GraphEditPanningScheme int64

type GraphEditGridPattern int64
type GraphEdit struct {_ [0]*GraphEdit; ptr gd.Pointer}

//go:nosplit
func (self GraphEdit) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GraphEdit) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GraphEdit) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphEdit) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphEdit) AsGraphEdit() [1]GraphEdit { return [1]GraphEdit{self} }


//go:nosplit
func (self GraphEdit) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphEdit) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphEdit) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Returns whether the [param mouse_position] is in the input hot zone.
By default, a hot zone is a [Rect2] positioned such that its center is at [param in_node].[method GraphNode.get_input_port_position]([param in_port]) (For output's case, call [method GraphNode.get_output_port_position] instead). The hot zone's width is twice the Theme Property [code]port_grab_distance_horizontal[/code], and its height is twice the [code]port_grab_distance_vertical[/code].
Below is a sample code to help get started:
[codeblock]
func _is_in_input_hotzone(in_node, in_port, mouse_position):
    var port_size: Vector2 = Vector2(get_theme_constant("port_grab_distance_horizontal"), get_theme_constant("port_grab_distance_vertical"))
    var port_pos: Vector2 = in_node.get_position() + in_node.get_input_port_position(in_port) - port_size / 2
    var rect = Rect2(port_pos, port_size)

    return rect.has_point(mouse_position)
[/codeblock]
*/
func (GraphEdit) _is_in_input_hotzone(impl func(ptr unsafe.Pointer, in_node gd.Object, in_port gd.Int, mouse_position gd.Vector2) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var in_node gd.Object
		in_node.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var in_port = gd.UnsafeGet[gd.Int](p_args,1)
		var mouse_position = gd.UnsafeGet[gd.Vector2](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, in_node, in_port, mouse_position)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns whether the [param mouse_position] is in the output hot zone. For more information on hot zones, see [method _is_in_input_hotzone].
Below is a sample code to help get started:
[codeblock]
func _is_in_output_hotzone(in_node, in_port, mouse_position):
    var port_size: Vector2 = Vector2(get_theme_constant("port_grab_distance_horizontal"), get_theme_constant("port_grab_distance_vertical"))
    var port_pos: Vector2 = in_node.get_position() + in_node.get_output_port_position(in_port) - port_size / 2
    var rect = Rect2(port_pos, port_size)

    return rect.has_point(mouse_position)
[/codeblock]
*/
func (GraphEdit) _is_in_output_hotzone(impl func(ptr unsafe.Pointer, in_node gd.Object, in_port gd.Int, mouse_position gd.Vector2) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var in_node gd.Object
		in_node.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var in_port = gd.UnsafeGet[gd.Int](p_args,1)
		var mouse_position = gd.UnsafeGet[gd.Vector2](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, in_node, in_port, mouse_position)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Virtual method which can be overridden to customize how connections are drawn.
*/
func (GraphEdit) _get_connection_line(impl func(ptr unsafe.Pointer, from_position gd.Vector2, to_position gd.Vector2) gd.PackedVector2Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var from_position = gd.UnsafeGet[gd.Vector2](p_args,0)
		var to_position = gd.UnsafeGet[gd.Vector2](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, from_position, to_position)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
This virtual method can be used to insert additional error detection while the user is dragging a connection over a valid port.
Return [code]true[/code] if the connection is indeed valid or return [code]false[/code] if the connection is impossible. If the connection is impossible, no snapping to the port and thus no connection request to that port will happen.
In this example a connection to same node is suppressed:
[codeblocks]
[gdscript]
func _is_node_hover_valid(from, from_port, to, to_port):
    return from != to
[/gdscript]
[csharp]
public override bool _IsNodeHoverValid(StringName fromNode, int fromPort, StringName toNode, int toPort)
{
    return fromNode != toNode;
}
[/csharp]
[/codeblocks]
*/
func (GraphEdit) _is_node_hover_valid(impl func(ptr unsafe.Pointer, from_node gd.StringName, from_port gd.Int, to_node gd.StringName, to_port gd.Int) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var from_node = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var from_port = gd.UnsafeGet[gd.Int](p_args,1)
		var to_node = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		var to_port = gd.UnsafeGet[gd.Int](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, from_node, from_port, to_node, to_port)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self GraphEdit) Virtual(name string) reflect.Value {
	switch name {
	case "_is_in_input_hotzone": return reflect.ValueOf(self._is_in_input_hotzone);
	case "_is_in_output_hotzone": return reflect.ValueOf(self._is_in_output_hotzone);
	case "_get_connection_line": return reflect.ValueOf(self._get_connection_line);
	case "_is_node_hover_valid": return reflect.ValueOf(self._is_node_hover_valid);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GraphElement struct {_ [0]*GraphElement; ptr gd.Pointer}

//go:nosplit
func (self GraphElement) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GraphElement) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GraphElement) Super() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphElement) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphElement) AsGraphElement() [1]GraphElement { return [1]GraphElement{self} }


//go:nosplit
func (self GraphElement) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphElement) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphElement) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphElement) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GraphElement) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GraphFrame struct {_ [0]*GraphFrame; ptr gd.Pointer}

//go:nosplit
func (self GraphFrame) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GraphFrame) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GraphFrame) Super() [1]GraphElement { return *(*[1]GraphElement)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphFrame) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphFrame) AsGraphFrame() [1]GraphFrame { return [1]GraphFrame{self} }


//go:nosplit
func (self GraphFrame) AsGraphElement() [1]GraphElement { return *(*[1]GraphElement)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphFrame) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphFrame) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphFrame) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphFrame) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GraphFrame) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GraphNode struct {_ [0]*GraphNode; ptr gd.Pointer}

//go:nosplit
func (self GraphNode) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GraphNode) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GraphNode) Super() [1]GraphElement { return *(*[1]GraphElement)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphNode) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphNode) AsGraphNode() [1]GraphNode { return [1]GraphNode{self} }


//go:nosplit
func (self GraphNode) AsGraphElement() [1]GraphElement { return *(*[1]GraphElement)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphNode) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphNode) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphNode) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GraphNode) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (GraphNode) _draw_port(impl func(ptr unsafe.Pointer, slot_index gd.Int, position gd.Vector2i, left bool, color gd.Color) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var slot_index = gd.UnsafeGet[gd.Int](p_args,0)
		var position = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var left = gd.UnsafeGet[bool](p_args,2)
		var color = gd.UnsafeGet[gd.Color](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, slot_index, position, left, color)
		ctx.End()
	}
}

func (self GraphNode) Virtual(name string) reflect.Value {
	switch name {
	case "_draw_port": return reflect.ValueOf(self._draw_port);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GridContainer struct {_ [0]*GridContainer; ptr gd.Pointer}

//go:nosplit
func (self GridContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GridContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GridContainer) Super() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GridContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GridContainer) AsGridContainer() [1]GridContainer { return [1]GridContainer{self} }


//go:nosplit
func (self GridContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GridContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GridContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GridContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GridContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GridMap struct {_ [0]*GridMap; ptr gd.Pointer}

//go:nosplit
func (self GridMap) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GridMap) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GridMap) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GridMap) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GridMap) AsGridMap() [1]GridMap { return [1]GridMap{self} }


//go:nosplit
func (self GridMap) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GridMap) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GridMap) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type GrooveJoint2D struct {_ [0]*GrooveJoint2D; ptr gd.Pointer}

//go:nosplit
func (self GrooveJoint2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *GrooveJoint2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self GrooveJoint2D) Super() [1]Joint2D { return *(*[1]Joint2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GrooveJoint2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GrooveJoint2D) AsGrooveJoint2D() [1]GrooveJoint2D { return [1]GrooveJoint2D{self} }


//go:nosplit
func (self GrooveJoint2D) AsJoint2D() [1]Joint2D { return *(*[1]Joint2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GrooveJoint2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GrooveJoint2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self GrooveJoint2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self GrooveJoint2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type HBoxContainer struct {_ [0]*HBoxContainer; ptr gd.Pointer}

//go:nosplit
func (self HBoxContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *HBoxContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self HBoxContainer) Super() [1]BoxContainer { return *(*[1]BoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HBoxContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HBoxContainer) AsHBoxContainer() [1]HBoxContainer { return [1]HBoxContainer{self} }


//go:nosplit
func (self HBoxContainer) AsBoxContainer() [1]BoxContainer { return *(*[1]BoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HBoxContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HBoxContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HBoxContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HBoxContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self HBoxContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type HFlowContainer struct {_ [0]*HFlowContainer; ptr gd.Pointer}

//go:nosplit
func (self HFlowContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *HFlowContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self HFlowContainer) Super() [1]FlowContainer { return *(*[1]FlowContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HFlowContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HFlowContainer) AsHFlowContainer() [1]HFlowContainer { return [1]HFlowContainer{self} }


//go:nosplit
func (self HFlowContainer) AsFlowContainer() [1]FlowContainer { return *(*[1]FlowContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HFlowContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HFlowContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HFlowContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HFlowContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self HFlowContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type HMACContext struct {_ [0]*HMACContext; ptr gd.Pointer}

//go:nosplit
func (self HMACContext) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *HMACContext) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self HMACContext) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HMACContext) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HMACContext) AsHMACContext() [1]HMACContext { return [1]HMACContext{self} }


//go:nosplit
func (self HMACContext) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self HMACContext) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type HScrollBar struct {_ [0]*HScrollBar; ptr gd.Pointer}

//go:nosplit
func (self HScrollBar) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *HScrollBar) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self HScrollBar) Super() [1]ScrollBar { return *(*[1]ScrollBar)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HScrollBar) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HScrollBar) AsHScrollBar() [1]HScrollBar { return [1]HScrollBar{self} }


//go:nosplit
func (self HScrollBar) AsScrollBar() [1]ScrollBar { return *(*[1]ScrollBar)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HScrollBar) AsRange() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HScrollBar) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HScrollBar) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HScrollBar) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self HScrollBar) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type HSeparator struct {_ [0]*HSeparator; ptr gd.Pointer}

//go:nosplit
func (self HSeparator) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *HSeparator) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self HSeparator) Super() [1]Separator { return *(*[1]Separator)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSeparator) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSeparator) AsHSeparator() [1]HSeparator { return [1]HSeparator{self} }


//go:nosplit
func (self HSeparator) AsSeparator() [1]Separator { return *(*[1]Separator)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSeparator) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSeparator) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSeparator) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self HSeparator) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type HSlider struct {_ [0]*HSlider; ptr gd.Pointer}

//go:nosplit
func (self HSlider) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *HSlider) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self HSlider) Super() [1]Slider { return *(*[1]Slider)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSlider) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSlider) AsHSlider() [1]HSlider { return [1]HSlider{self} }


//go:nosplit
func (self HSlider) AsSlider() [1]Slider { return *(*[1]Slider)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSlider) AsRange() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSlider) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSlider) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSlider) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self HSlider) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type HSplitContainer struct {_ [0]*HSplitContainer; ptr gd.Pointer}

//go:nosplit
func (self HSplitContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *HSplitContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self HSplitContainer) Super() [1]SplitContainer { return *(*[1]SplitContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSplitContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSplitContainer) AsHSplitContainer() [1]HSplitContainer { return [1]HSplitContainer{self} }


//go:nosplit
func (self HSplitContainer) AsSplitContainer() [1]SplitContainer { return *(*[1]SplitContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSplitContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSplitContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSplitContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HSplitContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self HSplitContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type HTTPClientMethod int64

type HTTPClientStatus int64

type HTTPClientResponseCode int64
type HTTPClient struct {_ [0]*HTTPClient; ptr gd.Pointer}

//go:nosplit
func (self HTTPClient) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *HTTPClient) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self HTTPClient) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HTTPClient) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HTTPClient) AsHTTPClient() [1]HTTPClient { return [1]HTTPClient{self} }


//go:nosplit
func (self HTTPClient) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self HTTPClient) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type HTTPRequestResult int64
type HTTPRequest struct {_ [0]*HTTPRequest; ptr gd.Pointer}

//go:nosplit
func (self HTTPRequest) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *HTTPRequest) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self HTTPRequest) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HTTPRequest) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HTTPRequest) AsHTTPRequest() [1]HTTPRequest { return [1]HTTPRequest{self} }


//go:nosplit
func (self HTTPRequest) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self HTTPRequest) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type HashingContextHashType int64
type HashingContext struct {_ [0]*HashingContext; ptr gd.Pointer}

//go:nosplit
func (self HashingContext) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *HashingContext) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self HashingContext) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HashingContext) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HashingContext) AsHashingContext() [1]HashingContext { return [1]HashingContext{self} }


//go:nosplit
func (self HashingContext) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self HashingContext) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type HeightMapShape3D struct {_ [0]*HeightMapShape3D; ptr gd.Pointer}

//go:nosplit
func (self HeightMapShape3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *HeightMapShape3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self HeightMapShape3D) Super() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HeightMapShape3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HeightMapShape3D) AsHeightMapShape3D() [1]HeightMapShape3D { return [1]HeightMapShape3D{self} }


//go:nosplit
func (self HeightMapShape3D) AsShape3D() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HeightMapShape3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HeightMapShape3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self HeightMapShape3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type HingeJoint3DParam int64

type HingeJoint3DFlag int64
type HingeJoint3D struct {_ [0]*HingeJoint3D; ptr gd.Pointer}

//go:nosplit
func (self HingeJoint3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *HingeJoint3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self HingeJoint3D) Super() [1]Joint3D { return *(*[1]Joint3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HingeJoint3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HingeJoint3D) AsHingeJoint3D() [1]HingeJoint3D { return [1]HingeJoint3D{self} }


//go:nosplit
func (self HingeJoint3D) AsJoint3D() [1]Joint3D { return *(*[1]Joint3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HingeJoint3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self HingeJoint3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self HingeJoint3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type IPResolverStatus int64

type IPType int64
type IP struct {_ [0]*IP; ptr gd.Pointer}

//go:nosplit
func (self IP) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *IP) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self IP) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self IP) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self IP) AsIP() [1]IP { return [1]IP{self} }

//go:nosplit

func (self IP) IsSingleton() {}

func (self IP) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ImageFormat int64

type ImageInterpolation int64

type ImageAlphaMode int64

type ImageCompressMode int64

type ImageUsedChannels int64

type ImageCompressSource int64

type ImageASTCFormat int64
type Image struct {_ [0]*Image; ptr gd.Pointer}

//go:nosplit
func (self Image) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Image) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Image) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Image) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Image) AsImage() [1]Image { return [1]Image{self} }


//go:nosplit
func (self Image) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Image) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Image) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ImageFormatLoaderLoaderFlags int64
type ImageFormatLoader struct {_ [0]*ImageFormatLoader; ptr gd.Pointer}

//go:nosplit
func (self ImageFormatLoader) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ImageFormatLoader) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ImageFormatLoader) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageFormatLoader) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageFormatLoader) AsImageFormatLoader() [1]ImageFormatLoader { return [1]ImageFormatLoader{self} }


//go:nosplit
func (self ImageFormatLoader) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ImageFormatLoader) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ImageFormatLoaderExtension struct {_ [0]*ImageFormatLoaderExtension; ptr gd.Pointer}

//go:nosplit
func (self ImageFormatLoaderExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ImageFormatLoaderExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ImageFormatLoaderExtension) Super() [1]ImageFormatLoader { return *(*[1]ImageFormatLoader)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageFormatLoaderExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageFormatLoaderExtension) AsImageFormatLoaderExtension() [1]ImageFormatLoaderExtension { return [1]ImageFormatLoaderExtension{self} }


//go:nosplit
func (self ImageFormatLoaderExtension) AsImageFormatLoader() [1]ImageFormatLoader { return *(*[1]ImageFormatLoader)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageFormatLoaderExtension) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Returns the list of file extensions for this image format. Files with the given extensions will be treated as image file and loaded using this class.
*/
func (ImageFormatLoaderExtension) _get_recognized_extensions(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Loads the content of [param fileaccess] into the provided [param image].
*/
func (ImageFormatLoaderExtension) _load_image(impl func(ptr unsafe.Pointer, image Image, fileaccess FileAccess, flags ImageFormatLoaderLoaderFlags, scale gd.Float) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var image Image
		image.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var fileaccess FileAccess
		fileaccess.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		var flags = gd.UnsafeGet[ImageFormatLoaderLoaderFlags](p_args,2)
		var scale = gd.UnsafeGet[gd.Float](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, image, fileaccess, flags, scale)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self ImageFormatLoaderExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_get_recognized_extensions": return reflect.ValueOf(self._get_recognized_extensions);
	case "_load_image": return reflect.ValueOf(self._load_image);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ImageTexture struct {_ [0]*ImageTexture; ptr gd.Pointer}

//go:nosplit
func (self ImageTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ImageTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ImageTexture) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTexture) AsImageTexture() [1]ImageTexture { return [1]ImageTexture{self} }


//go:nosplit
func (self ImageTexture) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTexture) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTexture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ImageTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ImageTexture3D struct {_ [0]*ImageTexture3D; ptr gd.Pointer}

//go:nosplit
func (self ImageTexture3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ImageTexture3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ImageTexture3D) Super() [1]Texture3D { return *(*[1]Texture3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTexture3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTexture3D) AsImageTexture3D() [1]ImageTexture3D { return [1]ImageTexture3D{self} }


//go:nosplit
func (self ImageTexture3D) AsTexture3D() [1]Texture3D { return *(*[1]Texture3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTexture3D) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTexture3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTexture3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ImageTexture3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ImageTextureLayered struct {_ [0]*ImageTextureLayered; ptr gd.Pointer}

//go:nosplit
func (self ImageTextureLayered) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ImageTextureLayered) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ImageTextureLayered) Super() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTextureLayered) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTextureLayered) AsImageTextureLayered() [1]ImageTextureLayered { return [1]ImageTextureLayered{self} }


//go:nosplit
func (self ImageTextureLayered) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTextureLayered) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTextureLayered) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImageTextureLayered) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ImageTextureLayered) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ImmediateMesh struct {_ [0]*ImmediateMesh; ptr gd.Pointer}

//go:nosplit
func (self ImmediateMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ImmediateMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ImmediateMesh) Super() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImmediateMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImmediateMesh) AsImmediateMesh() [1]ImmediateMesh { return [1]ImmediateMesh{self} }


//go:nosplit
func (self ImmediateMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImmediateMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImmediateMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ImmediateMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ImporterMesh struct {_ [0]*ImporterMesh; ptr gd.Pointer}

//go:nosplit
func (self ImporterMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ImporterMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ImporterMesh) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImporterMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImporterMesh) AsImporterMesh() [1]ImporterMesh { return [1]ImporterMesh{self} }


//go:nosplit
func (self ImporterMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImporterMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ImporterMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ImporterMeshInstance3D struct {_ [0]*ImporterMeshInstance3D; ptr gd.Pointer}

//go:nosplit
func (self ImporterMeshInstance3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ImporterMeshInstance3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ImporterMeshInstance3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImporterMeshInstance3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImporterMeshInstance3D) AsImporterMeshInstance3D() [1]ImporterMeshInstance3D { return [1]ImporterMeshInstance3D{self} }


//go:nosplit
func (self ImporterMeshInstance3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ImporterMeshInstance3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ImporterMeshInstance3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type InputMouseMode int64

type InputCursorShape int64
type Input struct {_ [0]*Input; ptr gd.Pointer}

//go:nosplit
func (self Input) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Input) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Input) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Input) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Input) AsInput() [1]Input { return [1]Input{self} }

//go:nosplit

func (self Input) IsSingleton() {}

func (self Input) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEvent struct {_ [0]*InputEvent; ptr gd.Pointer}

//go:nosplit
func (self InputEvent) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEvent) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEvent) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEvent) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEvent) AsInputEvent() [1]InputEvent { return [1]InputEvent{self} }


//go:nosplit
func (self InputEvent) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEvent) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEvent) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventAction struct {_ [0]*InputEventAction; ptr gd.Pointer}

//go:nosplit
func (self InputEventAction) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventAction) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventAction) Super() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventAction) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventAction) AsInputEventAction() [1]InputEventAction { return [1]InputEventAction{self} }


//go:nosplit
func (self InputEventAction) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventAction) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventAction) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventAction) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventFromWindow struct {_ [0]*InputEventFromWindow; ptr gd.Pointer}

//go:nosplit
func (self InputEventFromWindow) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventFromWindow) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventFromWindow) Super() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventFromWindow) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventFromWindow) AsInputEventFromWindow() [1]InputEventFromWindow { return [1]InputEventFromWindow{self} }


//go:nosplit
func (self InputEventFromWindow) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventFromWindow) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventFromWindow) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventFromWindow) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventGesture struct {_ [0]*InputEventGesture; ptr gd.Pointer}

//go:nosplit
func (self InputEventGesture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventGesture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventGesture) Super() [1]InputEventWithModifiers { return *(*[1]InputEventWithModifiers)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventGesture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventGesture) AsInputEventGesture() [1]InputEventGesture { return [1]InputEventGesture{self} }


//go:nosplit
func (self InputEventGesture) AsInputEventWithModifiers() [1]InputEventWithModifiers { return *(*[1]InputEventWithModifiers)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventGesture) AsInputEventFromWindow() [1]InputEventFromWindow { return *(*[1]InputEventFromWindow)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventGesture) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventGesture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventGesture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventGesture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventJoypadButton struct {_ [0]*InputEventJoypadButton; ptr gd.Pointer}

//go:nosplit
func (self InputEventJoypadButton) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventJoypadButton) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventJoypadButton) Super() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventJoypadButton) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventJoypadButton) AsInputEventJoypadButton() [1]InputEventJoypadButton { return [1]InputEventJoypadButton{self} }


//go:nosplit
func (self InputEventJoypadButton) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventJoypadButton) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventJoypadButton) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventJoypadButton) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventJoypadMotion struct {_ [0]*InputEventJoypadMotion; ptr gd.Pointer}

//go:nosplit
func (self InputEventJoypadMotion) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventJoypadMotion) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventJoypadMotion) Super() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventJoypadMotion) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventJoypadMotion) AsInputEventJoypadMotion() [1]InputEventJoypadMotion { return [1]InputEventJoypadMotion{self} }


//go:nosplit
func (self InputEventJoypadMotion) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventJoypadMotion) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventJoypadMotion) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventJoypadMotion) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventKey struct {_ [0]*InputEventKey; ptr gd.Pointer}

//go:nosplit
func (self InputEventKey) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventKey) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventKey) Super() [1]InputEventWithModifiers { return *(*[1]InputEventWithModifiers)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventKey) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventKey) AsInputEventKey() [1]InputEventKey { return [1]InputEventKey{self} }


//go:nosplit
func (self InputEventKey) AsInputEventWithModifiers() [1]InputEventWithModifiers { return *(*[1]InputEventWithModifiers)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventKey) AsInputEventFromWindow() [1]InputEventFromWindow { return *(*[1]InputEventFromWindow)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventKey) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventKey) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventKey) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventKey) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventMIDI struct {_ [0]*InputEventMIDI; ptr gd.Pointer}

//go:nosplit
func (self InputEventMIDI) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventMIDI) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventMIDI) Super() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMIDI) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMIDI) AsInputEventMIDI() [1]InputEventMIDI { return [1]InputEventMIDI{self} }


//go:nosplit
func (self InputEventMIDI) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMIDI) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMIDI) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventMIDI) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventMagnifyGesture struct {_ [0]*InputEventMagnifyGesture; ptr gd.Pointer}

//go:nosplit
func (self InputEventMagnifyGesture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventMagnifyGesture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventMagnifyGesture) Super() [1]InputEventGesture { return *(*[1]InputEventGesture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMagnifyGesture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMagnifyGesture) AsInputEventMagnifyGesture() [1]InputEventMagnifyGesture { return [1]InputEventMagnifyGesture{self} }


//go:nosplit
func (self InputEventMagnifyGesture) AsInputEventGesture() [1]InputEventGesture { return *(*[1]InputEventGesture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMagnifyGesture) AsInputEventWithModifiers() [1]InputEventWithModifiers { return *(*[1]InputEventWithModifiers)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMagnifyGesture) AsInputEventFromWindow() [1]InputEventFromWindow { return *(*[1]InputEventFromWindow)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMagnifyGesture) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMagnifyGesture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMagnifyGesture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventMagnifyGesture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventMouse struct {_ [0]*InputEventMouse; ptr gd.Pointer}

//go:nosplit
func (self InputEventMouse) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventMouse) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventMouse) Super() [1]InputEventWithModifiers { return *(*[1]InputEventWithModifiers)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouse) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouse) AsInputEventMouse() [1]InputEventMouse { return [1]InputEventMouse{self} }


//go:nosplit
func (self InputEventMouse) AsInputEventWithModifiers() [1]InputEventWithModifiers { return *(*[1]InputEventWithModifiers)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouse) AsInputEventFromWindow() [1]InputEventFromWindow { return *(*[1]InputEventFromWindow)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouse) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouse) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouse) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventMouse) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventMouseButton struct {_ [0]*InputEventMouseButton; ptr gd.Pointer}

//go:nosplit
func (self InputEventMouseButton) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventMouseButton) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventMouseButton) Super() [1]InputEventMouse { return *(*[1]InputEventMouse)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouseButton) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouseButton) AsInputEventMouseButton() [1]InputEventMouseButton { return [1]InputEventMouseButton{self} }


//go:nosplit
func (self InputEventMouseButton) AsInputEventMouse() [1]InputEventMouse { return *(*[1]InputEventMouse)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouseButton) AsInputEventWithModifiers() [1]InputEventWithModifiers { return *(*[1]InputEventWithModifiers)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouseButton) AsInputEventFromWindow() [1]InputEventFromWindow { return *(*[1]InputEventFromWindow)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouseButton) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouseButton) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouseButton) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventMouseButton) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventMouseMotion struct {_ [0]*InputEventMouseMotion; ptr gd.Pointer}

//go:nosplit
func (self InputEventMouseMotion) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventMouseMotion) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventMouseMotion) Super() [1]InputEventMouse { return *(*[1]InputEventMouse)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouseMotion) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouseMotion) AsInputEventMouseMotion() [1]InputEventMouseMotion { return [1]InputEventMouseMotion{self} }


//go:nosplit
func (self InputEventMouseMotion) AsInputEventMouse() [1]InputEventMouse { return *(*[1]InputEventMouse)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouseMotion) AsInputEventWithModifiers() [1]InputEventWithModifiers { return *(*[1]InputEventWithModifiers)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouseMotion) AsInputEventFromWindow() [1]InputEventFromWindow { return *(*[1]InputEventFromWindow)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouseMotion) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouseMotion) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventMouseMotion) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventMouseMotion) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventPanGesture struct {_ [0]*InputEventPanGesture; ptr gd.Pointer}

//go:nosplit
func (self InputEventPanGesture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventPanGesture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventPanGesture) Super() [1]InputEventGesture { return *(*[1]InputEventGesture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventPanGesture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventPanGesture) AsInputEventPanGesture() [1]InputEventPanGesture { return [1]InputEventPanGesture{self} }


//go:nosplit
func (self InputEventPanGesture) AsInputEventGesture() [1]InputEventGesture { return *(*[1]InputEventGesture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventPanGesture) AsInputEventWithModifiers() [1]InputEventWithModifiers { return *(*[1]InputEventWithModifiers)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventPanGesture) AsInputEventFromWindow() [1]InputEventFromWindow { return *(*[1]InputEventFromWindow)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventPanGesture) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventPanGesture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventPanGesture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventPanGesture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventScreenDrag struct {_ [0]*InputEventScreenDrag; ptr gd.Pointer}

//go:nosplit
func (self InputEventScreenDrag) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventScreenDrag) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventScreenDrag) Super() [1]InputEventFromWindow { return *(*[1]InputEventFromWindow)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventScreenDrag) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventScreenDrag) AsInputEventScreenDrag() [1]InputEventScreenDrag { return [1]InputEventScreenDrag{self} }


//go:nosplit
func (self InputEventScreenDrag) AsInputEventFromWindow() [1]InputEventFromWindow { return *(*[1]InputEventFromWindow)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventScreenDrag) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventScreenDrag) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventScreenDrag) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventScreenDrag) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventScreenTouch struct {_ [0]*InputEventScreenTouch; ptr gd.Pointer}

//go:nosplit
func (self InputEventScreenTouch) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventScreenTouch) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventScreenTouch) Super() [1]InputEventFromWindow { return *(*[1]InputEventFromWindow)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventScreenTouch) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventScreenTouch) AsInputEventScreenTouch() [1]InputEventScreenTouch { return [1]InputEventScreenTouch{self} }


//go:nosplit
func (self InputEventScreenTouch) AsInputEventFromWindow() [1]InputEventFromWindow { return *(*[1]InputEventFromWindow)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventScreenTouch) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventScreenTouch) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventScreenTouch) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventScreenTouch) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventShortcut struct {_ [0]*InputEventShortcut; ptr gd.Pointer}

//go:nosplit
func (self InputEventShortcut) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventShortcut) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventShortcut) Super() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventShortcut) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventShortcut) AsInputEventShortcut() [1]InputEventShortcut { return [1]InputEventShortcut{self} }


//go:nosplit
func (self InputEventShortcut) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventShortcut) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventShortcut) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventShortcut) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputEventWithModifiers struct {_ [0]*InputEventWithModifiers; ptr gd.Pointer}

//go:nosplit
func (self InputEventWithModifiers) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputEventWithModifiers) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputEventWithModifiers) Super() [1]InputEventFromWindow { return *(*[1]InputEventFromWindow)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventWithModifiers) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventWithModifiers) AsInputEventWithModifiers() [1]InputEventWithModifiers { return [1]InputEventWithModifiers{self} }


//go:nosplit
func (self InputEventWithModifiers) AsInputEventFromWindow() [1]InputEventFromWindow { return *(*[1]InputEventFromWindow)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventWithModifiers) AsInputEvent() [1]InputEvent { return *(*[1]InputEvent)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventWithModifiers) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputEventWithModifiers) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self InputEventWithModifiers) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InputMap struct {_ [0]*InputMap; ptr gd.Pointer}

//go:nosplit
func (self InputMap) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InputMap) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InputMap) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputMap) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InputMap) AsInputMap() [1]InputMap { return [1]InputMap{self} }

//go:nosplit

func (self InputMap) IsSingleton() {}

func (self InputMap) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type InstancePlaceholder struct {_ [0]*InstancePlaceholder; ptr gd.Pointer}

//go:nosplit
func (self InstancePlaceholder) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *InstancePlaceholder) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self InstancePlaceholder) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InstancePlaceholder) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self InstancePlaceholder) AsInstancePlaceholder() [1]InstancePlaceholder { return [1]InstancePlaceholder{self} }


//go:nosplit
func (self InstancePlaceholder) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self InstancePlaceholder) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type IntervalTweener struct {_ [0]*IntervalTweener; ptr gd.Pointer}

//go:nosplit
func (self IntervalTweener) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *IntervalTweener) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self IntervalTweener) Super() [1]Tweener { return *(*[1]Tweener)(unsafe.Pointer(&self)) }


//go:nosplit
func (self IntervalTweener) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self IntervalTweener) AsIntervalTweener() [1]IntervalTweener { return [1]IntervalTweener{self} }


//go:nosplit
func (self IntervalTweener) AsTweener() [1]Tweener { return *(*[1]Tweener)(unsafe.Pointer(&self)) }


//go:nosplit
func (self IntervalTweener) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self IntervalTweener) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ItemListIconMode int64

type ItemListSelectMode int64
type ItemList struct {_ [0]*ItemList; ptr gd.Pointer}

//go:nosplit
func (self ItemList) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ItemList) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ItemList) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ItemList) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ItemList) AsItemList() [1]ItemList { return [1]ItemList{self} }


//go:nosplit
func (self ItemList) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ItemList) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ItemList) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ItemList) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type JNISingleton struct {_ [0]*JNISingleton; ptr gd.Pointer}

//go:nosplit
func (self JNISingleton) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *JNISingleton) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self JNISingleton) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JNISingleton) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JNISingleton) AsJNISingleton() [1]JNISingleton { return [1]JNISingleton{self} }

func (self JNISingleton) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type JSON struct {_ [0]*JSON; ptr gd.Pointer}

//go:nosplit
func (self JSON) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *JSON) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self JSON) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JSON) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JSON) AsJSON() [1]JSON { return [1]JSON{self} }


//go:nosplit
func (self JSON) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JSON) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self JSON) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type JSONRPCErrorCode int64
type JSONRPC struct {_ [0]*JSONRPC; ptr gd.Pointer}

//go:nosplit
func (self JSONRPC) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *JSONRPC) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self JSONRPC) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JSONRPC) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JSONRPC) AsJSONRPC() [1]JSONRPC { return [1]JSONRPC{self} }

func (self JSONRPC) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type JavaClass struct {_ [0]*JavaClass; ptr gd.Pointer}

//go:nosplit
func (self JavaClass) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *JavaClass) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self JavaClass) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JavaClass) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JavaClass) AsJavaClass() [1]JavaClass { return [1]JavaClass{self} }


//go:nosplit
func (self JavaClass) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self JavaClass) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type JavaClassWrapper struct {_ [0]*JavaClassWrapper; ptr gd.Pointer}

//go:nosplit
func (self JavaClassWrapper) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *JavaClassWrapper) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self JavaClassWrapper) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JavaClassWrapper) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JavaClassWrapper) AsJavaClassWrapper() [1]JavaClassWrapper { return [1]JavaClassWrapper{self} }

//go:nosplit

func (self JavaClassWrapper) IsSingleton() {}

func (self JavaClassWrapper) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type JavaScriptBridge struct {_ [0]*JavaScriptBridge; ptr gd.Pointer}

//go:nosplit
func (self JavaScriptBridge) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *JavaScriptBridge) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self JavaScriptBridge) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JavaScriptBridge) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JavaScriptBridge) AsJavaScriptBridge() [1]JavaScriptBridge { return [1]JavaScriptBridge{self} }

//go:nosplit

func (self JavaScriptBridge) IsSingleton() {}

func (self JavaScriptBridge) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type JavaScriptObject struct {_ [0]*JavaScriptObject; ptr gd.Pointer}

//go:nosplit
func (self JavaScriptObject) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *JavaScriptObject) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self JavaScriptObject) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JavaScriptObject) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self JavaScriptObject) AsJavaScriptObject() [1]JavaScriptObject { return [1]JavaScriptObject{self} }


//go:nosplit
func (self JavaScriptObject) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self JavaScriptObject) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Joint2D struct {_ [0]*Joint2D; ptr gd.Pointer}

//go:nosplit
func (self Joint2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Joint2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Joint2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Joint2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Joint2D) AsJoint2D() [1]Joint2D { return [1]Joint2D{self} }


//go:nosplit
func (self Joint2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Joint2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Joint2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Joint2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Joint3D struct {_ [0]*Joint3D; ptr gd.Pointer}

//go:nosplit
func (self Joint3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Joint3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Joint3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Joint3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Joint3D) AsJoint3D() [1]Joint3D { return [1]Joint3D{self} }


//go:nosplit
func (self Joint3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Joint3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Joint3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type KinematicCollision2D struct {_ [0]*KinematicCollision2D; ptr gd.Pointer}

//go:nosplit
func (self KinematicCollision2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *KinematicCollision2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self KinematicCollision2D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self KinematicCollision2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self KinematicCollision2D) AsKinematicCollision2D() [1]KinematicCollision2D { return [1]KinematicCollision2D{self} }


//go:nosplit
func (self KinematicCollision2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self KinematicCollision2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type KinematicCollision3D struct {_ [0]*KinematicCollision3D; ptr gd.Pointer}

//go:nosplit
func (self KinematicCollision3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *KinematicCollision3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self KinematicCollision3D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self KinematicCollision3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self KinematicCollision3D) AsKinematicCollision3D() [1]KinematicCollision3D { return [1]KinematicCollision3D{self} }


//go:nosplit
func (self KinematicCollision3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self KinematicCollision3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Label struct {_ [0]*Label; ptr gd.Pointer}

//go:nosplit
func (self Label) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Label) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Label) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Label) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Label) AsLabel() [1]Label { return [1]Label{self} }


//go:nosplit
func (self Label) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Label) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Label) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Label) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type Label3DDrawFlags int64

type Label3DAlphaCutMode int64
type Label3D struct {_ [0]*Label3D; ptr gd.Pointer}

//go:nosplit
func (self Label3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Label3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Label3D) Super() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Label3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Label3D) AsLabel3D() [1]Label3D { return [1]Label3D{self} }


//go:nosplit
func (self Label3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Label3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Label3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Label3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Label3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type LabelSettings struct {_ [0]*LabelSettings; ptr gd.Pointer}

//go:nosplit
func (self LabelSettings) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *LabelSettings) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self LabelSettings) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LabelSettings) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LabelSettings) AsLabelSettings() [1]LabelSettings { return [1]LabelSettings{self} }


//go:nosplit
func (self LabelSettings) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LabelSettings) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self LabelSettings) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type Light2DShadowFilter int64

type Light2DBlendMode int64
type Light2D struct {_ [0]*Light2D; ptr gd.Pointer}

//go:nosplit
func (self Light2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Light2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Light2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Light2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Light2D) AsLight2D() [1]Light2D { return [1]Light2D{self} }


//go:nosplit
func (self Light2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Light2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Light2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Light2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type Light3DParam int64

type Light3DBakeMode int64
type Light3D struct {_ [0]*Light3D; ptr gd.Pointer}

//go:nosplit
func (self Light3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Light3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Light3D) Super() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Light3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Light3D) AsLight3D() [1]Light3D { return [1]Light3D{self} }


//go:nosplit
func (self Light3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Light3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Light3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Light3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type LightOccluder2D struct {_ [0]*LightOccluder2D; ptr gd.Pointer}

//go:nosplit
func (self LightOccluder2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *LightOccluder2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self LightOccluder2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightOccluder2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightOccluder2D) AsLightOccluder2D() [1]LightOccluder2D { return [1]LightOccluder2D{self} }


//go:nosplit
func (self LightOccluder2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightOccluder2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightOccluder2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self LightOccluder2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type LightmapGIBakeQuality int64

type LightmapGIGenerateProbes int64

type LightmapGIBakeError int64

type LightmapGIEnvironmentMode int64
type LightmapGI struct {_ [0]*LightmapGI; ptr gd.Pointer}

//go:nosplit
func (self LightmapGI) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *LightmapGI) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self LightmapGI) Super() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightmapGI) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightmapGI) AsLightmapGI() [1]LightmapGI { return [1]LightmapGI{self} }


//go:nosplit
func (self LightmapGI) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightmapGI) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightmapGI) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self LightmapGI) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type LightmapGIData struct {_ [0]*LightmapGIData; ptr gd.Pointer}

//go:nosplit
func (self LightmapGIData) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *LightmapGIData) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self LightmapGIData) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightmapGIData) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightmapGIData) AsLightmapGIData() [1]LightmapGIData { return [1]LightmapGIData{self} }


//go:nosplit
func (self LightmapGIData) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightmapGIData) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self LightmapGIData) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type LightmapProbe struct {_ [0]*LightmapProbe; ptr gd.Pointer}

//go:nosplit
func (self LightmapProbe) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *LightmapProbe) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self LightmapProbe) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightmapProbe) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightmapProbe) AsLightmapProbe() [1]LightmapProbe { return [1]LightmapProbe{self} }


//go:nosplit
func (self LightmapProbe) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightmapProbe) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self LightmapProbe) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Lightmapper struct {_ [0]*Lightmapper; ptr gd.Pointer}

//go:nosplit
func (self Lightmapper) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Lightmapper) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Lightmapper) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Lightmapper) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Lightmapper) AsLightmapper() [1]Lightmapper { return [1]Lightmapper{self} }


//go:nosplit
func (self Lightmapper) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Lightmapper) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type LightmapperRD struct {_ [0]*LightmapperRD; ptr gd.Pointer}

//go:nosplit
func (self LightmapperRD) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *LightmapperRD) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self LightmapperRD) Super() [1]Lightmapper { return *(*[1]Lightmapper)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightmapperRD) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightmapperRD) AsLightmapperRD() [1]LightmapperRD { return [1]LightmapperRD{self} }


//go:nosplit
func (self LightmapperRD) AsLightmapper() [1]Lightmapper { return *(*[1]Lightmapper)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LightmapperRD) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self LightmapperRD) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type Line2DLineJointMode int64

type Line2DLineCapMode int64

type Line2DLineTextureMode int64
type Line2D struct {_ [0]*Line2D; ptr gd.Pointer}

//go:nosplit
func (self Line2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Line2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Line2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Line2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Line2D) AsLine2D() [1]Line2D { return [1]Line2D{self} }


//go:nosplit
func (self Line2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Line2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Line2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Line2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type LineEditMenuItems int64

type LineEditVirtualKeyboardType int64
type LineEdit struct {_ [0]*LineEdit; ptr gd.Pointer}

//go:nosplit
func (self LineEdit) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *LineEdit) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self LineEdit) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LineEdit) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LineEdit) AsLineEdit() [1]LineEdit { return [1]LineEdit{self} }


//go:nosplit
func (self LineEdit) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LineEdit) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LineEdit) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self LineEdit) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type LinkButtonUnderlineMode int64
type LinkButton struct {_ [0]*LinkButton; ptr gd.Pointer}

//go:nosplit
func (self LinkButton) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *LinkButton) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self LinkButton) Super() [1]BaseButton { return *(*[1]BaseButton)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LinkButton) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LinkButton) AsLinkButton() [1]LinkButton { return [1]LinkButton{self} }


//go:nosplit
func (self LinkButton) AsBaseButton() [1]BaseButton { return *(*[1]BaseButton)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LinkButton) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LinkButton) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self LinkButton) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self LinkButton) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MainLoop struct {_ [0]*MainLoop; ptr gd.Pointer}

//go:nosplit
func (self MainLoop) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MainLoop) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MainLoop) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MainLoop) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MainLoop) AsMainLoop() [1]MainLoop { return [1]MainLoop{self} }

/*
Called once during initialization.
*/
func (MainLoop) _initialize(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called each physics frame with the time since the last physics frame as argument ([param delta], in seconds). Equivalent to [method Node._physics_process].
If implemented, the method must return a boolean value. [code]true[/code] ends the main loop, while [code]false[/code] lets it proceed to the next frame.
*/
func (MainLoop) _physics_process(impl func(ptr unsafe.Pointer, delta gd.Float) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var delta = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, delta)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called each process (idle) frame with the time since the last process frame as argument (in seconds). Equivalent to [method Node._process].
If implemented, the method must return a boolean value. [code]true[/code] ends the main loop, while [code]false[/code] lets it proceed to the next frame.
*/
func (MainLoop) _process(impl func(ptr unsafe.Pointer, delta gd.Float) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var delta = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, delta)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called before the program exits.
*/
func (MainLoop) _finalize(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (self MainLoop) Virtual(name string) reflect.Value {
	switch name {
	case "_initialize": return reflect.ValueOf(self._initialize);
	case "_physics_process": return reflect.ValueOf(self._physics_process);
	case "_process": return reflect.ValueOf(self._process);
	case "_finalize": return reflect.ValueOf(self._finalize);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MarginContainer struct {_ [0]*MarginContainer; ptr gd.Pointer}

//go:nosplit
func (self MarginContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MarginContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MarginContainer) Super() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MarginContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MarginContainer) AsMarginContainer() [1]MarginContainer { return [1]MarginContainer{self} }


//go:nosplit
func (self MarginContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MarginContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MarginContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MarginContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self MarginContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Marker2D struct {_ [0]*Marker2D; ptr gd.Pointer}

//go:nosplit
func (self Marker2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Marker2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Marker2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Marker2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Marker2D) AsMarker2D() [1]Marker2D { return [1]Marker2D{self} }


//go:nosplit
func (self Marker2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Marker2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Marker2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Marker2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Marker3D struct {_ [0]*Marker3D; ptr gd.Pointer}

//go:nosplit
func (self Marker3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Marker3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Marker3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Marker3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Marker3D) AsMarker3D() [1]Marker3D { return [1]Marker3D{self} }


//go:nosplit
func (self Marker3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Marker3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Marker3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Marshalls struct {_ [0]*Marshalls; ptr gd.Pointer}

//go:nosplit
func (self Marshalls) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Marshalls) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Marshalls) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Marshalls) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Marshalls) AsMarshalls() [1]Marshalls { return [1]Marshalls{self} }

//go:nosplit

func (self Marshalls) IsSingleton() {}

func (self Marshalls) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Material struct {_ [0]*Material; ptr gd.Pointer}

//go:nosplit
func (self Material) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Material) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Material) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Material) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Material) AsMaterial() [1]Material { return [1]Material{self} }


//go:nosplit
func (self Material) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Material) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Only exposed for the purpose of overriding. You cannot call this function directly. Used internally by various editor tools. Used to access the RID of the [Material]'s [Shader].
*/
func (Material) _get_shader_rid(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Only exposed for the purpose of overriding. You cannot call this function directly. Used internally by various editor tools.
*/
func (Material) _get_shader_mode(impl func(ptr unsafe.Pointer) ShaderMode, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Only exposed for the purpose of overriding. You cannot call this function directly. Used internally to determine if [member next_pass] should be shown in the editor or not.
*/
func (Material) _can_do_next_pass(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Only exposed for the purpose of overriding. You cannot call this function directly. Used internally to determine if [member render_priority] should be shown in the editor or not.
*/
func (Material) _can_use_render_priority(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self Material) Virtual(name string) reflect.Value {
	switch name {
	case "_get_shader_rid": return reflect.ValueOf(self._get_shader_rid);
	case "_get_shader_mode": return reflect.ValueOf(self._get_shader_mode);
	case "_can_do_next_pass": return reflect.ValueOf(self._can_do_next_pass);
	case "_can_use_render_priority": return reflect.ValueOf(self._can_use_render_priority);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MenuBar struct {_ [0]*MenuBar; ptr gd.Pointer}

//go:nosplit
func (self MenuBar) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MenuBar) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MenuBar) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MenuBar) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MenuBar) AsMenuBar() [1]MenuBar { return [1]MenuBar{self} }


//go:nosplit
func (self MenuBar) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MenuBar) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MenuBar) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self MenuBar) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MenuButton struct {_ [0]*MenuButton; ptr gd.Pointer}

//go:nosplit
func (self MenuButton) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MenuButton) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MenuButton) Super() [1]Button { return *(*[1]Button)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MenuButton) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MenuButton) AsMenuButton() [1]MenuButton { return [1]MenuButton{self} }


//go:nosplit
func (self MenuButton) AsButton() [1]Button { return *(*[1]Button)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MenuButton) AsBaseButton() [1]BaseButton { return *(*[1]BaseButton)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MenuButton) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MenuButton) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MenuButton) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self MenuButton) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type MeshPrimitiveType int64

type MeshArrayType int64

type MeshArrayCustomFormat int64

type MeshArrayFormat int64

type MeshBlendShapeMode int64
type Mesh struct {_ [0]*Mesh; ptr gd.Pointer}

//go:nosplit
func (self Mesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Mesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Mesh) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Mesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Mesh) AsMesh() [1]Mesh { return [1]Mesh{self} }


//go:nosplit
func (self Mesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Mesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Virtual method to override the surface count for a custom class extending [Mesh].
*/
func (Mesh) _get_surface_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Virtual method to override the surface array length for a custom class extending [Mesh].
*/
func (Mesh) _surface_get_array_len(impl func(ptr unsafe.Pointer, index gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, index)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Virtual method to override the surface array index length for a custom class extending [Mesh].
*/
func (Mesh) _surface_get_array_index_len(impl func(ptr unsafe.Pointer, index gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, index)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Virtual method to override the surface arrays for a custom class extending [Mesh].
*/
func (Mesh) _surface_get_arrays(impl func(ptr unsafe.Pointer, index gd.Int) gd.Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, index)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Virtual method to override the blend shape arrays for a custom class extending [Mesh].
*/
func (Mesh) _surface_get_blend_shape_arrays(impl func(ptr unsafe.Pointer, index gd.Int) gd.ArrayOf[gd.Array], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, index)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

/*
Virtual method to override the surface LODs for a custom class extending [Mesh].
*/
func (Mesh) _surface_get_lods(impl func(ptr unsafe.Pointer, index gd.Int) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, index)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Virtual method to override the surface format for a custom class extending [Mesh].
*/
func (Mesh) _surface_get_format(impl func(ptr unsafe.Pointer, index gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, index)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Virtual method to override the surface primitive type for a custom class extending [Mesh].
*/
func (Mesh) _surface_get_primitive_type(impl func(ptr unsafe.Pointer, index gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, index)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Virtual method to override the setting of a [param material] at the given [param index] for a custom class extending [Mesh].
*/
func (Mesh) _surface_set_material(impl func(ptr unsafe.Pointer, index gd.Int, material Material) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		var material Material
		material.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, index, material)
		ctx.End()
	}
}

/*
Virtual method to override the surface material for a custom class extending [Mesh].
*/
func (Mesh) _surface_get_material(impl func(ptr unsafe.Pointer, index gd.Int) Material, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, index)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Virtual method to override the number of blend shapes for a custom class extending [Mesh].
*/
func (Mesh) _get_blend_shape_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Virtual method to override the retrieval of blend shape names for a custom class extending [Mesh].
*/
func (Mesh) _get_blend_shape_name(impl func(ptr unsafe.Pointer, index gd.Int) gd.StringName, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, index)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Virtual method to override the names of blend shapes for a custom class extending [Mesh].
*/
func (Mesh) _set_blend_shape_name(impl func(ptr unsafe.Pointer, index gd.Int, name gd.StringName) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		var name = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, index, name)
		ctx.End()
	}
}

/*
Virtual method to override the [AABB] for a custom class extending [Mesh].
*/
func (Mesh) _get_aabb(impl func(ptr unsafe.Pointer) gd.AABB, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self Mesh) Virtual(name string) reflect.Value {
	switch name {
	case "_get_surface_count": return reflect.ValueOf(self._get_surface_count);
	case "_surface_get_array_len": return reflect.ValueOf(self._surface_get_array_len);
	case "_surface_get_array_index_len": return reflect.ValueOf(self._surface_get_array_index_len);
	case "_surface_get_arrays": return reflect.ValueOf(self._surface_get_arrays);
	case "_surface_get_blend_shape_arrays": return reflect.ValueOf(self._surface_get_blend_shape_arrays);
	case "_surface_get_lods": return reflect.ValueOf(self._surface_get_lods);
	case "_surface_get_format": return reflect.ValueOf(self._surface_get_format);
	case "_surface_get_primitive_type": return reflect.ValueOf(self._surface_get_primitive_type);
	case "_surface_set_material": return reflect.ValueOf(self._surface_set_material);
	case "_surface_get_material": return reflect.ValueOf(self._surface_get_material);
	case "_get_blend_shape_count": return reflect.ValueOf(self._get_blend_shape_count);
	case "_get_blend_shape_name": return reflect.ValueOf(self._get_blend_shape_name);
	case "_set_blend_shape_name": return reflect.ValueOf(self._set_blend_shape_name);
	case "_get_aabb": return reflect.ValueOf(self._get_aabb);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type MeshConvexDecompositionSettingsMode int64
type MeshConvexDecompositionSettings struct {_ [0]*MeshConvexDecompositionSettings; ptr gd.Pointer}

//go:nosplit
func (self MeshConvexDecompositionSettings) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MeshConvexDecompositionSettings) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MeshConvexDecompositionSettings) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshConvexDecompositionSettings) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshConvexDecompositionSettings) AsMeshConvexDecompositionSettings() [1]MeshConvexDecompositionSettings { return [1]MeshConvexDecompositionSettings{self} }


//go:nosplit
func (self MeshConvexDecompositionSettings) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self MeshConvexDecompositionSettings) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MeshDataTool struct {_ [0]*MeshDataTool; ptr gd.Pointer}

//go:nosplit
func (self MeshDataTool) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MeshDataTool) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MeshDataTool) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshDataTool) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshDataTool) AsMeshDataTool() [1]MeshDataTool { return [1]MeshDataTool{self} }


//go:nosplit
func (self MeshDataTool) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self MeshDataTool) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MeshInstance2D struct {_ [0]*MeshInstance2D; ptr gd.Pointer}

//go:nosplit
func (self MeshInstance2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MeshInstance2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MeshInstance2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshInstance2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshInstance2D) AsMeshInstance2D() [1]MeshInstance2D { return [1]MeshInstance2D{self} }


//go:nosplit
func (self MeshInstance2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshInstance2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshInstance2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self MeshInstance2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MeshInstance3D struct {_ [0]*MeshInstance3D; ptr gd.Pointer}

//go:nosplit
func (self MeshInstance3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MeshInstance3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MeshInstance3D) Super() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshInstance3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshInstance3D) AsMeshInstance3D() [1]MeshInstance3D { return [1]MeshInstance3D{self} }


//go:nosplit
func (self MeshInstance3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshInstance3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshInstance3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshInstance3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self MeshInstance3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MeshLibrary struct {_ [0]*MeshLibrary; ptr gd.Pointer}

//go:nosplit
func (self MeshLibrary) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MeshLibrary) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MeshLibrary) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshLibrary) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshLibrary) AsMeshLibrary() [1]MeshLibrary { return [1]MeshLibrary{self} }


//go:nosplit
func (self MeshLibrary) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshLibrary) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self MeshLibrary) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MeshTexture struct {_ [0]*MeshTexture; ptr gd.Pointer}

//go:nosplit
func (self MeshTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MeshTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MeshTexture) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshTexture) AsMeshTexture() [1]MeshTexture { return [1]MeshTexture{self} }


//go:nosplit
func (self MeshTexture) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshTexture) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshTexture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MeshTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self MeshTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MethodTweener struct {_ [0]*MethodTweener; ptr gd.Pointer}

//go:nosplit
func (self MethodTweener) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MethodTweener) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MethodTweener) Super() [1]Tweener { return *(*[1]Tweener)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MethodTweener) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MethodTweener) AsMethodTweener() [1]MethodTweener { return [1]MethodTweener{self} }


//go:nosplit
func (self MethodTweener) AsTweener() [1]Tweener { return *(*[1]Tweener)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MethodTweener) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self MethodTweener) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MissingNode struct {_ [0]*MissingNode; ptr gd.Pointer}

//go:nosplit
func (self MissingNode) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MissingNode) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MissingNode) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MissingNode) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MissingNode) AsMissingNode() [1]MissingNode { return [1]MissingNode{self} }


//go:nosplit
func (self MissingNode) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self MissingNode) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MissingResource struct {_ [0]*MissingResource; ptr gd.Pointer}

//go:nosplit
func (self MissingResource) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MissingResource) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MissingResource) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MissingResource) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MissingResource) AsMissingResource() [1]MissingResource { return [1]MissingResource{self} }


//go:nosplit
func (self MissingResource) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MissingResource) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self MissingResource) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MobileVRInterface struct {_ [0]*MobileVRInterface; ptr gd.Pointer}

//go:nosplit
func (self MobileVRInterface) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MobileVRInterface) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MobileVRInterface) Super() [1]XRInterface { return *(*[1]XRInterface)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MobileVRInterface) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MobileVRInterface) AsMobileVRInterface() [1]MobileVRInterface { return [1]MobileVRInterface{self} }


//go:nosplit
func (self MobileVRInterface) AsXRInterface() [1]XRInterface { return *(*[1]XRInterface)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MobileVRInterface) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self MobileVRInterface) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MovieWriter struct {_ [0]*MovieWriter; ptr gd.Pointer}

//go:nosplit
func (self MovieWriter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MovieWriter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MovieWriter) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MovieWriter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MovieWriter) AsMovieWriter() [1]MovieWriter { return [1]MovieWriter{self} }

/*
Called when the audio sample rate used for recording the audio is requested by the engine. The value returned must be specified in Hz. Defaults to 48000 Hz if [method _get_audio_mix_rate] is not overridden.
*/
func (MovieWriter) _get_audio_mix_rate(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the audio speaker mode used for recording the audio is requested by the engine. This can affect the number of output channels in the resulting audio file/stream. Defaults to [constant AudioServer.SPEAKER_MODE_STEREO] if [method _get_audio_speaker_mode] is not overridden.
*/
func (MovieWriter) _get_audio_speaker_mode(impl func(ptr unsafe.Pointer) AudioServerSpeakerMode, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the engine determines whether this [MovieWriter] is able to handle the file at [param path]. Must return [code]true[/code] if this [MovieWriter] is able to handle the given file path, [code]false[/code] otherwise. Typically, [method _handles_file] is overridden as follows to allow the user to record a file at any path with a given file extension:
[codeblock]
func _handles_file(path):
    # Allows specifying an output file with a `.mkv` file extension (case-insensitive),
    # either in the Project Settings or with the `--write-movie <path>` command line argument.
    return path.get_extension().to_lower() == "mkv"
[/codeblock]
*/
func (MovieWriter) _handles_file(impl func(ptr unsafe.Pointer, path gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called once before the engine starts writing video and audio data. [param movie_size] is the width and height of the video to save. [param fps] is the number of frames per second specified in the project settings or using the [code]--fixed-fps <fps>[/code] [url=$DOCS_URL/tutorials/editor/command_line_tutorial.html]command line argument[/url].
*/
func (MovieWriter) _write_begin(impl func(ptr unsafe.Pointer, movie_size gd.Vector2i, fps gd.Int, base_path gd.String) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var movie_size = gd.UnsafeGet[gd.Vector2i](p_args,0)
		var fps = gd.UnsafeGet[gd.Int](p_args,1)
		var base_path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, movie_size, fps, base_path)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called at the end of every rendered frame. The [param frame_image] and [param audio_frame_block] function arguments should be written to.
*/
func (MovieWriter) _write_frame(impl func(ptr unsafe.Pointer, frame_image Image, audio_frame_block unsafe.Pointer) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var frame_image Image
		frame_image.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var audio_frame_block = gd.UnsafeGet[unsafe.Pointer](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, frame_image, audio_frame_block)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the engine finishes writing. This occurs when the engine quits by pressing the window manager's close button, or when [method SceneTree.quit] is called.
[b]Note:[/b] Pressing [kbd]Ctrl + C[/kbd] on the terminal running the editor/project does [i]not[/i] result in [method _write_end] being called.
*/
func (MovieWriter) _write_end(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (self MovieWriter) Virtual(name string) reflect.Value {
	switch name {
	case "_get_audio_mix_rate": return reflect.ValueOf(self._get_audio_mix_rate);
	case "_get_audio_speaker_mode": return reflect.ValueOf(self._get_audio_speaker_mode);
	case "_handles_file": return reflect.ValueOf(self._handles_file);
	case "_write_begin": return reflect.ValueOf(self._write_begin);
	case "_write_frame": return reflect.ValueOf(self._write_frame);
	case "_write_end": return reflect.ValueOf(self._write_end);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type MultiMeshTransformFormat int64
type MultiMesh struct {_ [0]*MultiMesh; ptr gd.Pointer}

//go:nosplit
func (self MultiMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MultiMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MultiMesh) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiMesh) AsMultiMesh() [1]MultiMesh { return [1]MultiMesh{self} }


//go:nosplit
func (self MultiMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self MultiMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MultiMeshInstance2D struct {_ [0]*MultiMeshInstance2D; ptr gd.Pointer}

//go:nosplit
func (self MultiMeshInstance2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MultiMeshInstance2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MultiMeshInstance2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiMeshInstance2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiMeshInstance2D) AsMultiMeshInstance2D() [1]MultiMeshInstance2D { return [1]MultiMeshInstance2D{self} }


//go:nosplit
func (self MultiMeshInstance2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiMeshInstance2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiMeshInstance2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self MultiMeshInstance2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MultiMeshInstance3D struct {_ [0]*MultiMeshInstance3D; ptr gd.Pointer}

//go:nosplit
func (self MultiMeshInstance3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MultiMeshInstance3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MultiMeshInstance3D) Super() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiMeshInstance3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiMeshInstance3D) AsMultiMeshInstance3D() [1]MultiMeshInstance3D { return [1]MultiMeshInstance3D{self} }


//go:nosplit
func (self MultiMeshInstance3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiMeshInstance3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiMeshInstance3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiMeshInstance3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self MultiMeshInstance3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type MultiplayerAPIRPCMode int64
type MultiplayerAPI struct {_ [0]*MultiplayerAPI; ptr gd.Pointer}

//go:nosplit
func (self MultiplayerAPI) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MultiplayerAPI) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MultiplayerAPI) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerAPI) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerAPI) AsMultiplayerAPI() [1]MultiplayerAPI { return [1]MultiplayerAPI{self} }


//go:nosplit
func (self MultiplayerAPI) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self MultiplayerAPI) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MultiplayerAPIExtension struct {_ [0]*MultiplayerAPIExtension; ptr gd.Pointer}

//go:nosplit
func (self MultiplayerAPIExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MultiplayerAPIExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MultiplayerAPIExtension) Super() [1]MultiplayerAPI { return *(*[1]MultiplayerAPI)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerAPIExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerAPIExtension) AsMultiplayerAPIExtension() [1]MultiplayerAPIExtension { return [1]MultiplayerAPIExtension{self} }


//go:nosplit
func (self MultiplayerAPIExtension) AsMultiplayerAPI() [1]MultiplayerAPI { return *(*[1]MultiplayerAPI)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerAPIExtension) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Callback for [method MultiplayerAPI.poll].
*/
func (MultiplayerAPIExtension) _poll(impl func(ptr unsafe.Pointer) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the [member MultiplayerAPI.multiplayer_peer] is set.
*/
func (MultiplayerAPIExtension) _set_multiplayer_peer(impl func(ptr unsafe.Pointer, multiplayer_peer MultiplayerPeer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var multiplayer_peer MultiplayerPeer
		multiplayer_peer.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, multiplayer_peer)
		ctx.End()
	}
}

/*
Called when the [member MultiplayerAPI.multiplayer_peer] is retrieved.
*/
func (MultiplayerAPIExtension) _get_multiplayer_peer(impl func(ptr unsafe.Pointer) MultiplayerPeer, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Callback for [method MultiplayerAPI.get_unique_id].
*/
func (MultiplayerAPIExtension) _get_unique_id(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Callback for [method MultiplayerAPI.get_peers].
*/
func (MultiplayerAPIExtension) _get_peer_ids(impl func(ptr unsafe.Pointer) gd.PackedInt32Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Callback for [method MultiplayerAPI.rpc].
*/
func (MultiplayerAPIExtension) _rpc(impl func(ptr unsafe.Pointer, peer gd.Int, object gd.Object, method gd.StringName, args gd.Array) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var peer = gd.UnsafeGet[gd.Int](p_args,0)
		var object gd.Object
		object.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		var method = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		var args = mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,3))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, peer, object, method, args)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Callback for [method MultiplayerAPI.get_remote_sender_id].
*/
func (MultiplayerAPIExtension) _get_remote_sender_id(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Callback for [method MultiplayerAPI.object_configuration_add].
*/
func (MultiplayerAPIExtension) _object_configuration_add(impl func(ptr unsafe.Pointer, object gd.Object, configuration gd.Variant) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var object gd.Object
		object.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var configuration = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, object, configuration)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Callback for [method MultiplayerAPI.object_configuration_remove].
*/
func (MultiplayerAPIExtension) _object_configuration_remove(impl func(ptr unsafe.Pointer, object gd.Object, configuration gd.Variant) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var object gd.Object
		object.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var configuration = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, object, configuration)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self MultiplayerAPIExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_poll": return reflect.ValueOf(self._poll);
	case "_set_multiplayer_peer": return reflect.ValueOf(self._set_multiplayer_peer);
	case "_get_multiplayer_peer": return reflect.ValueOf(self._get_multiplayer_peer);
	case "_get_unique_id": return reflect.ValueOf(self._get_unique_id);
	case "_get_peer_ids": return reflect.ValueOf(self._get_peer_ids);
	case "_rpc": return reflect.ValueOf(self._rpc);
	case "_get_remote_sender_id": return reflect.ValueOf(self._get_remote_sender_id);
	case "_object_configuration_add": return reflect.ValueOf(self._object_configuration_add);
	case "_object_configuration_remove": return reflect.ValueOf(self._object_configuration_remove);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type MultiplayerPeerConnectionStatus int64

type MultiplayerPeerTransferMode int64
type MultiplayerPeer struct {_ [0]*MultiplayerPeer; ptr gd.Pointer}

//go:nosplit
func (self MultiplayerPeer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MultiplayerPeer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MultiplayerPeer) Super() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerPeer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerPeer) AsMultiplayerPeer() [1]MultiplayerPeer { return [1]MultiplayerPeer{self} }


//go:nosplit
func (self MultiplayerPeer) AsPacketPeer() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerPeer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self MultiplayerPeer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MultiplayerPeerExtension struct {_ [0]*MultiplayerPeerExtension; ptr gd.Pointer}

//go:nosplit
func (self MultiplayerPeerExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MultiplayerPeerExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MultiplayerPeerExtension) Super() [1]MultiplayerPeer { return *(*[1]MultiplayerPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerPeerExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerPeerExtension) AsMultiplayerPeerExtension() [1]MultiplayerPeerExtension { return [1]MultiplayerPeerExtension{self} }


//go:nosplit
func (self MultiplayerPeerExtension) AsMultiplayerPeer() [1]MultiplayerPeer { return *(*[1]MultiplayerPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerPeerExtension) AsPacketPeer() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerPeerExtension) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Called when a packet needs to be received by the [MultiplayerAPI], with [param r_buffer_size] being the size of the binary [param r_buffer] in bytes.
*/
func (MultiplayerPeerExtension) _get_packet(impl func(ptr unsafe.Pointer, r_buffer unsafe.Pointer, r_buffer_size *int32) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var r_buffer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		var r_buffer_size = gd.UnsafeGet[*int32](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, r_buffer, r_buffer_size)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when a packet needs to be sent by the [MultiplayerAPI], with [param p_buffer_size] being the size of the binary [param p_buffer] in bytes.
*/
func (MultiplayerPeerExtension) _put_packet(impl func(ptr unsafe.Pointer, p_buffer unsafe.Pointer, p_buffer_size gd.Int) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_buffer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		var p_buffer_size = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, p_buffer, p_buffer_size)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the available packet count is internally requested by the [MultiplayerAPI].
*/
func (MultiplayerPeerExtension) _get_available_packet_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the maximum allowed packet size (in bytes) is requested by the [MultiplayerAPI].
*/
func (MultiplayerPeerExtension) _get_max_packet_size(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when a packet needs to be received by the [MultiplayerAPI], if [method _get_packet] isn't implemented. Use this when extending this class via GDScript.
*/
func (MultiplayerPeerExtension) _get_packet_script(impl func(ptr unsafe.Pointer) gd.PackedByteArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Called when a packet needs to be sent by the [MultiplayerAPI], if [method _put_packet] isn't implemented. Use this when extending this class via GDScript.
*/
func (MultiplayerPeerExtension) _put_packet_script(impl func(ptr unsafe.Pointer, p_buffer gd.PackedByteArray) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_buffer = mmm.Let[gd.PackedByteArray](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, p_buffer)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called to get the channel over which the next available packet was received. See [method MultiplayerPeer.get_packet_channel].
*/
func (MultiplayerPeerExtension) _get_packet_channel(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called to get the transfer mode the remote peer used to send the next available packet. See [method MultiplayerPeer.get_packet_mode].
*/
func (MultiplayerPeerExtension) _get_packet_mode(impl func(ptr unsafe.Pointer) MultiplayerPeerTransferMode, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the channel to use is set for this [MultiplayerPeer] (see [member MultiplayerPeer.transfer_channel]).
*/
func (MultiplayerPeerExtension) _set_transfer_channel(impl func(ptr unsafe.Pointer, p_channel gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_channel = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, p_channel)
		ctx.End()
	}
}

/*
Called when the transfer channel to use is read on this [MultiplayerPeer] (see [member MultiplayerPeer.transfer_channel]).
*/
func (MultiplayerPeerExtension) _get_transfer_channel(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the transfer mode is set on this [MultiplayerPeer] (see [member MultiplayerPeer.transfer_mode]).
*/
func (MultiplayerPeerExtension) _set_transfer_mode(impl func(ptr unsafe.Pointer, p_mode MultiplayerPeerTransferMode) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_mode = gd.UnsafeGet[MultiplayerPeerTransferMode](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, p_mode)
		ctx.End()
	}
}

/*
Called when the transfer mode to use is read on this [MultiplayerPeer] (see [member MultiplayerPeer.transfer_mode]).
*/
func (MultiplayerPeerExtension) _get_transfer_mode(impl func(ptr unsafe.Pointer) MultiplayerPeerTransferMode, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the target peer to use is set for this [MultiplayerPeer] (see [method MultiplayerPeer.set_target_peer]).
*/
func (MultiplayerPeerExtension) _set_target_peer(impl func(ptr unsafe.Pointer, p_peer gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_peer = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, p_peer)
		ctx.End()
	}
}

/*
Called when the ID of the [MultiplayerPeer] who sent the most recent packet is requested (see [method MultiplayerPeer.get_packet_peer]).
*/
func (MultiplayerPeerExtension) _get_packet_peer(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the "is server" status is requested on the [MultiplayerAPI]. See [method MultiplayerAPI.is_server].
*/
func (MultiplayerPeerExtension) _is_server(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the [MultiplayerAPI] is polled. See [method MultiplayerAPI.poll].
*/
func (MultiplayerPeerExtension) _poll(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the multiplayer peer should be immediately closed (see [method MultiplayerPeer.close]).
*/
func (MultiplayerPeerExtension) _close(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the connected [param p_peer] should be forcibly disconnected (see [method MultiplayerPeer.disconnect_peer]).
*/
func (MultiplayerPeerExtension) _disconnect_peer(impl func(ptr unsafe.Pointer, p_peer gd.Int, p_force bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_peer = gd.UnsafeGet[gd.Int](p_args,0)
		var p_force = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, p_peer, p_force)
		ctx.End()
	}
}

/*
Called when the unique ID of this [MultiplayerPeer] is requested (see [method MultiplayerPeer.get_unique_id]). The value must be between [code]1[/code] and [code]2147483647[/code].
*/
func (MultiplayerPeerExtension) _get_unique_id(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the "refuse new connections" status is set on this [MultiplayerPeer] (see [member MultiplayerPeer.refuse_new_connections]).
*/
func (MultiplayerPeerExtension) _set_refuse_new_connections(impl func(ptr unsafe.Pointer, p_enable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_enable = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, p_enable)
		ctx.End()
	}
}

/*
Called when the "refuse new connections" status is requested on this [MultiplayerPeer] (see [member MultiplayerPeer.refuse_new_connections]).
*/
func (MultiplayerPeerExtension) _is_refusing_new_connections(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called to check if the server can act as a relay in the current configuration. See [method MultiplayerPeer.is_server_relay_supported].
*/
func (MultiplayerPeerExtension) _is_server_relay_supported(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the connection status is requested on the [MultiplayerPeer] (see [method MultiplayerPeer.get_connection_status]).
*/
func (MultiplayerPeerExtension) _get_connection_status(impl func(ptr unsafe.Pointer) MultiplayerPeerConnectionStatus, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self MultiplayerPeerExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_get_packet": return reflect.ValueOf(self._get_packet);
	case "_put_packet": return reflect.ValueOf(self._put_packet);
	case "_get_available_packet_count": return reflect.ValueOf(self._get_available_packet_count);
	case "_get_max_packet_size": return reflect.ValueOf(self._get_max_packet_size);
	case "_get_packet_script": return reflect.ValueOf(self._get_packet_script);
	case "_put_packet_script": return reflect.ValueOf(self._put_packet_script);
	case "_get_packet_channel": return reflect.ValueOf(self._get_packet_channel);
	case "_get_packet_mode": return reflect.ValueOf(self._get_packet_mode);
	case "_set_transfer_channel": return reflect.ValueOf(self._set_transfer_channel);
	case "_get_transfer_channel": return reflect.ValueOf(self._get_transfer_channel);
	case "_set_transfer_mode": return reflect.ValueOf(self._set_transfer_mode);
	case "_get_transfer_mode": return reflect.ValueOf(self._get_transfer_mode);
	case "_set_target_peer": return reflect.ValueOf(self._set_target_peer);
	case "_get_packet_peer": return reflect.ValueOf(self._get_packet_peer);
	case "_is_server": return reflect.ValueOf(self._is_server);
	case "_poll": return reflect.ValueOf(self._poll);
	case "_close": return reflect.ValueOf(self._close);
	case "_disconnect_peer": return reflect.ValueOf(self._disconnect_peer);
	case "_get_unique_id": return reflect.ValueOf(self._get_unique_id);
	case "_set_refuse_new_connections": return reflect.ValueOf(self._set_refuse_new_connections);
	case "_is_refusing_new_connections": return reflect.ValueOf(self._is_refusing_new_connections);
	case "_is_server_relay_supported": return reflect.ValueOf(self._is_server_relay_supported);
	case "_get_connection_status": return reflect.ValueOf(self._get_connection_status);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type MultiplayerSpawner struct {_ [0]*MultiplayerSpawner; ptr gd.Pointer}

//go:nosplit
func (self MultiplayerSpawner) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MultiplayerSpawner) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MultiplayerSpawner) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerSpawner) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerSpawner) AsMultiplayerSpawner() [1]MultiplayerSpawner { return [1]MultiplayerSpawner{self} }


//go:nosplit
func (self MultiplayerSpawner) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self MultiplayerSpawner) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type MultiplayerSynchronizerVisibilityUpdateMode int64
type MultiplayerSynchronizer struct {_ [0]*MultiplayerSynchronizer; ptr gd.Pointer}

//go:nosplit
func (self MultiplayerSynchronizer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *MultiplayerSynchronizer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self MultiplayerSynchronizer) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerSynchronizer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self MultiplayerSynchronizer) AsMultiplayerSynchronizer() [1]MultiplayerSynchronizer { return [1]MultiplayerSynchronizer{self} }


//go:nosplit
func (self MultiplayerSynchronizer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self MultiplayerSynchronizer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Mutex struct {_ [0]*Mutex; ptr gd.Pointer}

//go:nosplit
func (self Mutex) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Mutex) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Mutex) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Mutex) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Mutex) AsMutex() [1]Mutex { return [1]Mutex{self} }


//go:nosplit
func (self Mutex) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Mutex) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type NativeMenuFeature int64

type NativeMenuSystemMenus int64
type NativeMenu struct {_ [0]*NativeMenu; ptr gd.Pointer}

//go:nosplit
func (self NativeMenu) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NativeMenu) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NativeMenu) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NativeMenu) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NativeMenu) AsNativeMenu() [1]NativeMenu { return [1]NativeMenu{self} }

//go:nosplit

func (self NativeMenu) IsSingleton() {}

func (self NativeMenu) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type NavigationAgent2D struct {_ [0]*NavigationAgent2D; ptr gd.Pointer}

//go:nosplit
func (self NavigationAgent2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationAgent2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationAgent2D) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationAgent2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationAgent2D) AsNavigationAgent2D() [1]NavigationAgent2D { return [1]NavigationAgent2D{self} }


//go:nosplit
func (self NavigationAgent2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self NavigationAgent2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type NavigationAgent3D struct {_ [0]*NavigationAgent3D; ptr gd.Pointer}

//go:nosplit
func (self NavigationAgent3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationAgent3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationAgent3D) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationAgent3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationAgent3D) AsNavigationAgent3D() [1]NavigationAgent3D { return [1]NavigationAgent3D{self} }


//go:nosplit
func (self NavigationAgent3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self NavigationAgent3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type NavigationLink2D struct {_ [0]*NavigationLink2D; ptr gd.Pointer}

//go:nosplit
func (self NavigationLink2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationLink2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationLink2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationLink2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationLink2D) AsNavigationLink2D() [1]NavigationLink2D { return [1]NavigationLink2D{self} }


//go:nosplit
func (self NavigationLink2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationLink2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationLink2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self NavigationLink2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type NavigationLink3D struct {_ [0]*NavigationLink3D; ptr gd.Pointer}

//go:nosplit
func (self NavigationLink3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationLink3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationLink3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationLink3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationLink3D) AsNavigationLink3D() [1]NavigationLink3D { return [1]NavigationLink3D{self} }


//go:nosplit
func (self NavigationLink3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationLink3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self NavigationLink3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type NavigationMeshSamplePartitionType int64

type NavigationMeshParsedGeometryType int64

type NavigationMeshSourceGeometryMode int64
type NavigationMesh struct {_ [0]*NavigationMesh; ptr gd.Pointer}

//go:nosplit
func (self NavigationMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationMesh) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationMesh) AsNavigationMesh() [1]NavigationMesh { return [1]NavigationMesh{self} }


//go:nosplit
func (self NavigationMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self NavigationMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type NavigationMeshGenerator struct {_ [0]*NavigationMeshGenerator; ptr gd.Pointer}

//go:nosplit
func (self NavigationMeshGenerator) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationMeshGenerator) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationMeshGenerator) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationMeshGenerator) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationMeshGenerator) AsNavigationMeshGenerator() [1]NavigationMeshGenerator { return [1]NavigationMeshGenerator{self} }

//go:nosplit

func (self NavigationMeshGenerator) IsSingleton() {}

func (self NavigationMeshGenerator) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type NavigationMeshSourceGeometryData2D struct {_ [0]*NavigationMeshSourceGeometryData2D; ptr gd.Pointer}

//go:nosplit
func (self NavigationMeshSourceGeometryData2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationMeshSourceGeometryData2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationMeshSourceGeometryData2D) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationMeshSourceGeometryData2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationMeshSourceGeometryData2D) AsNavigationMeshSourceGeometryData2D() [1]NavigationMeshSourceGeometryData2D { return [1]NavigationMeshSourceGeometryData2D{self} }


//go:nosplit
func (self NavigationMeshSourceGeometryData2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationMeshSourceGeometryData2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self NavigationMeshSourceGeometryData2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type NavigationMeshSourceGeometryData3D struct {_ [0]*NavigationMeshSourceGeometryData3D; ptr gd.Pointer}

//go:nosplit
func (self NavigationMeshSourceGeometryData3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationMeshSourceGeometryData3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationMeshSourceGeometryData3D) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationMeshSourceGeometryData3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationMeshSourceGeometryData3D) AsNavigationMeshSourceGeometryData3D() [1]NavigationMeshSourceGeometryData3D { return [1]NavigationMeshSourceGeometryData3D{self} }


//go:nosplit
func (self NavigationMeshSourceGeometryData3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationMeshSourceGeometryData3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self NavigationMeshSourceGeometryData3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type NavigationObstacle2D struct {_ [0]*NavigationObstacle2D; ptr gd.Pointer}

//go:nosplit
func (self NavigationObstacle2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationObstacle2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationObstacle2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationObstacle2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationObstacle2D) AsNavigationObstacle2D() [1]NavigationObstacle2D { return [1]NavigationObstacle2D{self} }


//go:nosplit
func (self NavigationObstacle2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationObstacle2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationObstacle2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self NavigationObstacle2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type NavigationObstacle3D struct {_ [0]*NavigationObstacle3D; ptr gd.Pointer}

//go:nosplit
func (self NavigationObstacle3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationObstacle3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationObstacle3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationObstacle3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationObstacle3D) AsNavigationObstacle3D() [1]NavigationObstacle3D { return [1]NavigationObstacle3D{self} }


//go:nosplit
func (self NavigationObstacle3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationObstacle3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self NavigationObstacle3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type NavigationPathQueryParameters2DPathfindingAlgorithm int64

type NavigationPathQueryParameters2DPathPostProcessing int64

type NavigationPathQueryParameters2DPathMetadataFlags int64
type NavigationPathQueryParameters2D struct {_ [0]*NavigationPathQueryParameters2D; ptr gd.Pointer}

//go:nosplit
func (self NavigationPathQueryParameters2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationPathQueryParameters2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationPathQueryParameters2D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationPathQueryParameters2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationPathQueryParameters2D) AsNavigationPathQueryParameters2D() [1]NavigationPathQueryParameters2D { return [1]NavigationPathQueryParameters2D{self} }


//go:nosplit
func (self NavigationPathQueryParameters2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self NavigationPathQueryParameters2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type NavigationPathQueryParameters3DPathfindingAlgorithm int64

type NavigationPathQueryParameters3DPathPostProcessing int64

type NavigationPathQueryParameters3DPathMetadataFlags int64
type NavigationPathQueryParameters3D struct {_ [0]*NavigationPathQueryParameters3D; ptr gd.Pointer}

//go:nosplit
func (self NavigationPathQueryParameters3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationPathQueryParameters3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationPathQueryParameters3D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationPathQueryParameters3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationPathQueryParameters3D) AsNavigationPathQueryParameters3D() [1]NavigationPathQueryParameters3D { return [1]NavigationPathQueryParameters3D{self} }


//go:nosplit
func (self NavigationPathQueryParameters3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self NavigationPathQueryParameters3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type NavigationPathQueryResult2DPathSegmentType int64
type NavigationPathQueryResult2D struct {_ [0]*NavigationPathQueryResult2D; ptr gd.Pointer}

//go:nosplit
func (self NavigationPathQueryResult2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationPathQueryResult2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationPathQueryResult2D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationPathQueryResult2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationPathQueryResult2D) AsNavigationPathQueryResult2D() [1]NavigationPathQueryResult2D { return [1]NavigationPathQueryResult2D{self} }


//go:nosplit
func (self NavigationPathQueryResult2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self NavigationPathQueryResult2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type NavigationPathQueryResult3DPathSegmentType int64
type NavigationPathQueryResult3D struct {_ [0]*NavigationPathQueryResult3D; ptr gd.Pointer}

//go:nosplit
func (self NavigationPathQueryResult3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationPathQueryResult3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationPathQueryResult3D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationPathQueryResult3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationPathQueryResult3D) AsNavigationPathQueryResult3D() [1]NavigationPathQueryResult3D { return [1]NavigationPathQueryResult3D{self} }


//go:nosplit
func (self NavigationPathQueryResult3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self NavigationPathQueryResult3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type NavigationPolygonParsedGeometryType int64

type NavigationPolygonSourceGeometryMode int64
type NavigationPolygon struct {_ [0]*NavigationPolygon; ptr gd.Pointer}

//go:nosplit
func (self NavigationPolygon) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationPolygon) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationPolygon) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationPolygon) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationPolygon) AsNavigationPolygon() [1]NavigationPolygon { return [1]NavigationPolygon{self} }


//go:nosplit
func (self NavigationPolygon) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationPolygon) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self NavigationPolygon) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type NavigationRegion2D struct {_ [0]*NavigationRegion2D; ptr gd.Pointer}

//go:nosplit
func (self NavigationRegion2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationRegion2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationRegion2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationRegion2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationRegion2D) AsNavigationRegion2D() [1]NavigationRegion2D { return [1]NavigationRegion2D{self} }


//go:nosplit
func (self NavigationRegion2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationRegion2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationRegion2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self NavigationRegion2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type NavigationRegion3D struct {_ [0]*NavigationRegion3D; ptr gd.Pointer}

//go:nosplit
func (self NavigationRegion3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationRegion3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationRegion3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationRegion3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationRegion3D) AsNavigationRegion3D() [1]NavigationRegion3D { return [1]NavigationRegion3D{self} }


//go:nosplit
func (self NavigationRegion3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationRegion3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self NavigationRegion3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type NavigationServer2D struct {_ [0]*NavigationServer2D; ptr gd.Pointer}

//go:nosplit
func (self NavigationServer2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationServer2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationServer2D) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationServer2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationServer2D) AsNavigationServer2D() [1]NavigationServer2D { return [1]NavigationServer2D{self} }

//go:nosplit

func (self NavigationServer2D) IsSingleton() {}

func (self NavigationServer2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type NavigationServer3DProcessInfo int64
type NavigationServer3D struct {_ [0]*NavigationServer3D; ptr gd.Pointer}

//go:nosplit
func (self NavigationServer3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NavigationServer3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NavigationServer3D) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationServer3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NavigationServer3D) AsNavigationServer3D() [1]NavigationServer3D { return [1]NavigationServer3D{self} }

//go:nosplit

func (self NavigationServer3D) IsSingleton() {}

func (self NavigationServer3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type NinePatchRectAxisStretchMode int64
type NinePatchRect struct {_ [0]*NinePatchRect; ptr gd.Pointer}

//go:nosplit
func (self NinePatchRect) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NinePatchRect) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NinePatchRect) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NinePatchRect) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NinePatchRect) AsNinePatchRect() [1]NinePatchRect { return [1]NinePatchRect{self} }


//go:nosplit
func (self NinePatchRect) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NinePatchRect) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NinePatchRect) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self NinePatchRect) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type NodeProcessMode int64

type NodeProcessThreadGroup int64

type NodeProcessThreadMessages int64

type NodePhysicsInterpolationMode int64

type NodeDuplicateFlags int64

type NodeInternalMode int64

type NodeAutoTranslateMode int64
type Node struct {_ [0]*Node; ptr gd.Pointer}

//go:nosplit
func (self Node) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Node) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Node) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Node) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Node) AsNode() [1]Node { return [1]Node{self} }

/*
Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the [param delta] time since the previous frame is not constant. [param delta] is in seconds.
It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process].
Corresponds to the [constant NOTIFICATION_PROCESS] notification in [method Object._notification].
[b]Note:[/b] This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
*/
func (Node) _process(impl func(ptr unsafe.Pointer, delta gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var delta = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, delta)
		ctx.End()
	}
}

/*
Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the [param delta] variable should be constant. [param delta] is in seconds.
It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_physics_process].
Corresponds to the [constant NOTIFICATION_PHYSICS_PROCESS] notification in [method Object._notification].
[b]Note:[/b] This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
*/
func (Node) _physics_process(impl func(ptr unsafe.Pointer, delta gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var delta = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, delta)
		ctx.End()
	}
}

/*
Called when the node enters the [SceneTree] (e.g. upon instantiating, scene changing, or after calling [method add_child] in a script). If the node has children, its [method _enter_tree] callback will be called first, and then that of the children.
Corresponds to the [constant NOTIFICATION_ENTER_TREE] notification in [method Object._notification].
*/
func (Node) _enter_tree(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the node is about to leave the [SceneTree] (e.g. upon freeing, scene changing, or after calling [method remove_child] in a script). If the node has children, its [method _exit_tree] callback will be called last, after all its children have left the tree.
Corresponds to the [constant NOTIFICATION_EXIT_TREE] notification in [method Object._notification] and signal [signal tree_exiting]. To get notified when the node has already left the active tree, connect to the [signal tree_exited].
*/
func (Node) _exit_tree(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the node is "ready", i.e. when both the node and its children have entered the scene tree. If the node has children, their [method _ready] callbacks get triggered first, and the parent node will receive the ready notification afterwards.
Corresponds to the [constant NOTIFICATION_READY] notification in [method Object._notification]. See also the [code]@onready[/code] annotation for variables.
Usually used for initialization. For even earlier initialization, [method Object._init] may be used. See also [method _enter_tree].
[b]Note:[/b] This method may be called only once for each node. After removing a node from the scene tree and adding it again, [method _ready] will [b]not[/b] be called a second time. This can be bypassed by requesting another call with [method request_ready], which may be called anywhere before adding the node again.
*/
func (Node) _ready(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
The elements in the array returned from this method are displayed as warnings in the Scene dock if the script that overrides it is a [code]tool[/code] script.
Returning an empty array produces no warnings.
Call [method update_configuration_warnings] when the warnings need to be updated for this node.
[codeblock]
@export var energy = 0:
    set(value):
        energy = value
        update_configuration_warnings()

func _get_configuration_warnings():
    if energy < 0:
        return ["Energy must be 0 or greater."]
    else:
        return []
[/codeblock]
*/
func (Node) _get_configuration_warnings(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Called when there is an input event. The input event propagates up through the node tree until a node consumes it.
It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_input].
To consume the input event and stop it propagating further to other nodes, [method Viewport.set_input_as_handled] can be called.
For gameplay input, [method _unhandled_input] and [method _unhandled_key_input] are usually a better fit as they allow the GUI to intercept the events first.
[b]Note:[/b] This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
*/
func (Node) _input(impl func(ptr unsafe.Pointer, event InputEvent) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var event InputEvent
		event.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, event)
		ctx.End()
	}
}

/*
Called when an [InputEventKey], [InputEventShortcut], or [InputEventJoypadButton] hasn't been consumed by [method _input] or any GUI [Control] item. It is called before [method _unhandled_key_input] and [method _unhandled_input]. The input event propagates up through the node tree until a node consumes it.
It is only called if shortcut processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_shortcut_input].
To consume the input event and stop it propagating further to other nodes, [method Viewport.set_input_as_handled] can be called.
This method can be used to handle shortcuts. For generic GUI events, use [method _input] instead. Gameplay events should usually be handled with either [method _unhandled_input] or [method _unhandled_key_input].
[b]Note:[/b] This method is only called if the node is present in the scene tree (i.e. if it's not orphan).
*/
func (Node) _shortcut_input(impl func(ptr unsafe.Pointer, event InputEvent) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var event InputEvent
		event.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, event)
		ctx.End()
	}
}

/*
Called when an [InputEvent] hasn't been consumed by [method _input] or any GUI [Control] item. It is called after [method _shortcut_input] and after [method _unhandled_key_input]. The input event propagates up through the node tree until a node consumes it.
It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_unhandled_input].
To consume the input event and stop it propagating further to other nodes, [method Viewport.set_input_as_handled] can be called.
For gameplay input, this method is usually a better fit than [method _input], as GUI events need a higher priority. For keyboard shortcuts, consider using [method _shortcut_input] instead, as it is called before this method. Finally, to handle keyboard events, consider using [method _unhandled_key_input] for performance reasons.
[b]Note:[/b] This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
*/
func (Node) _unhandled_input(impl func(ptr unsafe.Pointer, event InputEvent) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var event InputEvent
		event.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, event)
		ctx.End()
	}
}

/*
Called when an [InputEventKey] hasn't been consumed by [method _input] or any GUI [Control] item. It is called after [method _shortcut_input] but before [method _unhandled_input]. The input event propagates up through the node tree until a node consumes it.
It is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_unhandled_key_input].
To consume the input event and stop it propagating further to other nodes, [method Viewport.set_input_as_handled] can be called.
This method can be used to handle Unicode character input with [kbd]Alt[/kbd], [kbd]Alt + Ctrl[/kbd], and [kbd]Alt + Shift[/kbd] modifiers, after shortcuts were handled.
For gameplay input, this and [method _unhandled_input] are usually a better fit than [method _input], as GUI events should be handled first. This method also performs better than [method _unhandled_input], since unrelated events such as [InputEventMouseMotion] are automatically filtered. For shortcuts, consider using [method _shortcut_input] instead.
[b]Note:[/b] This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
*/
func (Node) _unhandled_key_input(impl func(ptr unsafe.Pointer, event InputEvent) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var event InputEvent
		event.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, event)
		ctx.End()
	}
}

func (self Node) Virtual(name string) reflect.Value {
	switch name {
	case "_process": return reflect.ValueOf(self._process);
	case "_physics_process": return reflect.ValueOf(self._physics_process);
	case "_enter_tree": return reflect.ValueOf(self._enter_tree);
	case "_exit_tree": return reflect.ValueOf(self._exit_tree);
	case "_ready": return reflect.ValueOf(self._ready);
	case "_get_configuration_warnings": return reflect.ValueOf(self._get_configuration_warnings);
	case "_input": return reflect.ValueOf(self._input);
	case "_shortcut_input": return reflect.ValueOf(self._shortcut_input);
	case "_unhandled_input": return reflect.ValueOf(self._unhandled_input);
	case "_unhandled_key_input": return reflect.ValueOf(self._unhandled_key_input);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Node2D struct {_ [0]*Node2D; ptr gd.Pointer}

//go:nosplit
func (self Node2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Node2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Node2D) Super() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Node2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Node2D) AsNode2D() [1]Node2D { return [1]Node2D{self} }


//go:nosplit
func (self Node2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Node2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Node2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type Node3DRotationEditMode int64
type Node3D struct {_ [0]*Node3D; ptr gd.Pointer}

//go:nosplit
func (self Node3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Node3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Node3D) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Node3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Node3D) AsNode3D() [1]Node3D { return [1]Node3D{self} }


//go:nosplit
func (self Node3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Node3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Node3DGizmo struct {_ [0]*Node3DGizmo; ptr gd.Pointer}

//go:nosplit
func (self Node3DGizmo) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Node3DGizmo) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Node3DGizmo) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Node3DGizmo) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Node3DGizmo) AsNode3DGizmo() [1]Node3DGizmo { return [1]Node3DGizmo{self} }


//go:nosplit
func (self Node3DGizmo) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Node3DGizmo) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Noise struct {_ [0]*Noise; ptr gd.Pointer}

//go:nosplit
func (self Noise) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Noise) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Noise) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Noise) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Noise) AsNoise() [1]Noise { return [1]Noise{self} }


//go:nosplit
func (self Noise) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Noise) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Noise) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type NoiseTexture2D struct {_ [0]*NoiseTexture2D; ptr gd.Pointer}

//go:nosplit
func (self NoiseTexture2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NoiseTexture2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NoiseTexture2D) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NoiseTexture2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NoiseTexture2D) AsNoiseTexture2D() [1]NoiseTexture2D { return [1]NoiseTexture2D{self} }


//go:nosplit
func (self NoiseTexture2D) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NoiseTexture2D) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NoiseTexture2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NoiseTexture2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self NoiseTexture2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type NoiseTexture3D struct {_ [0]*NoiseTexture3D; ptr gd.Pointer}

//go:nosplit
func (self NoiseTexture3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *NoiseTexture3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self NoiseTexture3D) Super() [1]Texture3D { return *(*[1]Texture3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NoiseTexture3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NoiseTexture3D) AsNoiseTexture3D() [1]NoiseTexture3D { return [1]NoiseTexture3D{self} }


//go:nosplit
func (self NoiseTexture3D) AsTexture3D() [1]Texture3D { return *(*[1]Texture3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NoiseTexture3D) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NoiseTexture3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self NoiseTexture3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self NoiseTexture3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ORMMaterial3D struct {_ [0]*ORMMaterial3D; ptr gd.Pointer}

//go:nosplit
func (self ORMMaterial3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ORMMaterial3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ORMMaterial3D) Super() [1]BaseMaterial3D { return *(*[1]BaseMaterial3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ORMMaterial3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ORMMaterial3D) AsORMMaterial3D() [1]ORMMaterial3D { return [1]ORMMaterial3D{self} }


//go:nosplit
func (self ORMMaterial3D) AsBaseMaterial3D() [1]BaseMaterial3D { return *(*[1]BaseMaterial3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ORMMaterial3D) AsMaterial() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ORMMaterial3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ORMMaterial3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ORMMaterial3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type OSRenderingDriver int64

type OSSystemDir int64
type OS struct {_ [0]*OS; ptr gd.Pointer}

//go:nosplit
func (self OS) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OS) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OS) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OS) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OS) AsOS() [1]OS { return [1]OS{self} }

//go:nosplit

func (self OS) IsSingleton() {}

func (self OS) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Occluder3D struct {_ [0]*Occluder3D; ptr gd.Pointer}

//go:nosplit
func (self Occluder3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Occluder3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Occluder3D) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Occluder3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Occluder3D) AsOccluder3D() [1]Occluder3D { return [1]Occluder3D{self} }


//go:nosplit
func (self Occluder3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Occluder3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Occluder3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OccluderInstance3D struct {_ [0]*OccluderInstance3D; ptr gd.Pointer}

//go:nosplit
func (self OccluderInstance3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OccluderInstance3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OccluderInstance3D) Super() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OccluderInstance3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OccluderInstance3D) AsOccluderInstance3D() [1]OccluderInstance3D { return [1]OccluderInstance3D{self} }


//go:nosplit
func (self OccluderInstance3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OccluderInstance3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OccluderInstance3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self OccluderInstance3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type OccluderPolygon2DCullMode int64
type OccluderPolygon2D struct {_ [0]*OccluderPolygon2D; ptr gd.Pointer}

//go:nosplit
func (self OccluderPolygon2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OccluderPolygon2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OccluderPolygon2D) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OccluderPolygon2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OccluderPolygon2D) AsOccluderPolygon2D() [1]OccluderPolygon2D { return [1]OccluderPolygon2D{self} }


//go:nosplit
func (self OccluderPolygon2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OccluderPolygon2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self OccluderPolygon2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OfflineMultiplayerPeer struct {_ [0]*OfflineMultiplayerPeer; ptr gd.Pointer}

//go:nosplit
func (self OfflineMultiplayerPeer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OfflineMultiplayerPeer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OfflineMultiplayerPeer) Super() [1]MultiplayerPeer { return *(*[1]MultiplayerPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OfflineMultiplayerPeer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OfflineMultiplayerPeer) AsOfflineMultiplayerPeer() [1]OfflineMultiplayerPeer { return [1]OfflineMultiplayerPeer{self} }


//go:nosplit
func (self OfflineMultiplayerPeer) AsMultiplayerPeer() [1]MultiplayerPeer { return *(*[1]MultiplayerPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OfflineMultiplayerPeer) AsPacketPeer() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OfflineMultiplayerPeer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self OfflineMultiplayerPeer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OggPacketSequence struct {_ [0]*OggPacketSequence; ptr gd.Pointer}

//go:nosplit
func (self OggPacketSequence) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OggPacketSequence) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OggPacketSequence) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OggPacketSequence) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OggPacketSequence) AsOggPacketSequence() [1]OggPacketSequence { return [1]OggPacketSequence{self} }


//go:nosplit
func (self OggPacketSequence) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OggPacketSequence) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self OggPacketSequence) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OggPacketSequencePlayback struct {_ [0]*OggPacketSequencePlayback; ptr gd.Pointer}

//go:nosplit
func (self OggPacketSequencePlayback) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OggPacketSequencePlayback) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OggPacketSequencePlayback) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OggPacketSequencePlayback) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OggPacketSequencePlayback) AsOggPacketSequencePlayback() [1]OggPacketSequencePlayback { return [1]OggPacketSequencePlayback{self} }


//go:nosplit
func (self OggPacketSequencePlayback) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self OggPacketSequencePlayback) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type OmniLight3DShadowMode int64
type OmniLight3D struct {_ [0]*OmniLight3D; ptr gd.Pointer}

//go:nosplit
func (self OmniLight3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OmniLight3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OmniLight3D) Super() [1]Light3D { return *(*[1]Light3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OmniLight3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OmniLight3D) AsOmniLight3D() [1]OmniLight3D { return [1]OmniLight3D{self} }


//go:nosplit
func (self OmniLight3D) AsLight3D() [1]Light3D { return *(*[1]Light3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OmniLight3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OmniLight3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OmniLight3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self OmniLight3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type OpenXRAPIExtensionOpenXRAlphaBlendModeSupport int64
type OpenXRAPIExtension struct {_ [0]*OpenXRAPIExtension; ptr gd.Pointer}

//go:nosplit
func (self OpenXRAPIExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OpenXRAPIExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OpenXRAPIExtension) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRAPIExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRAPIExtension) AsOpenXRAPIExtension() [1]OpenXRAPIExtension { return [1]OpenXRAPIExtension{self} }


//go:nosplit
func (self OpenXRAPIExtension) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self OpenXRAPIExtension) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type OpenXRActionActionType int64
type OpenXRAction struct {_ [0]*OpenXRAction; ptr gd.Pointer}

//go:nosplit
func (self OpenXRAction) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OpenXRAction) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OpenXRAction) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRAction) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRAction) AsOpenXRAction() [1]OpenXRAction { return [1]OpenXRAction{self} }


//go:nosplit
func (self OpenXRAction) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRAction) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self OpenXRAction) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OpenXRActionMap struct {_ [0]*OpenXRActionMap; ptr gd.Pointer}

//go:nosplit
func (self OpenXRActionMap) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OpenXRActionMap) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OpenXRActionMap) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRActionMap) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRActionMap) AsOpenXRActionMap() [1]OpenXRActionMap { return [1]OpenXRActionMap{self} }


//go:nosplit
func (self OpenXRActionMap) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRActionMap) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self OpenXRActionMap) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OpenXRActionSet struct {_ [0]*OpenXRActionSet; ptr gd.Pointer}

//go:nosplit
func (self OpenXRActionSet) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OpenXRActionSet) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OpenXRActionSet) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRActionSet) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRActionSet) AsOpenXRActionSet() [1]OpenXRActionSet { return [1]OpenXRActionSet{self} }


//go:nosplit
func (self OpenXRActionSet) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRActionSet) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self OpenXRActionSet) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OpenXRCompositionLayer struct {_ [0]*OpenXRCompositionLayer; ptr gd.Pointer}

//go:nosplit
func (self OpenXRCompositionLayer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OpenXRCompositionLayer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OpenXRCompositionLayer) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayer) AsOpenXRCompositionLayer() [1]OpenXRCompositionLayer { return [1]OpenXRCompositionLayer{self} }


//go:nosplit
func (self OpenXRCompositionLayer) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self OpenXRCompositionLayer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OpenXRCompositionLayerCylinder struct {_ [0]*OpenXRCompositionLayerCylinder; ptr gd.Pointer}

//go:nosplit
func (self OpenXRCompositionLayerCylinder) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OpenXRCompositionLayerCylinder) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OpenXRCompositionLayerCylinder) Super() [1]OpenXRCompositionLayer { return *(*[1]OpenXRCompositionLayer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayerCylinder) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayerCylinder) AsOpenXRCompositionLayerCylinder() [1]OpenXRCompositionLayerCylinder { return [1]OpenXRCompositionLayerCylinder{self} }


//go:nosplit
func (self OpenXRCompositionLayerCylinder) AsOpenXRCompositionLayer() [1]OpenXRCompositionLayer { return *(*[1]OpenXRCompositionLayer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayerCylinder) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayerCylinder) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self OpenXRCompositionLayerCylinder) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OpenXRCompositionLayerEquirect struct {_ [0]*OpenXRCompositionLayerEquirect; ptr gd.Pointer}

//go:nosplit
func (self OpenXRCompositionLayerEquirect) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OpenXRCompositionLayerEquirect) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OpenXRCompositionLayerEquirect) Super() [1]OpenXRCompositionLayer { return *(*[1]OpenXRCompositionLayer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayerEquirect) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayerEquirect) AsOpenXRCompositionLayerEquirect() [1]OpenXRCompositionLayerEquirect { return [1]OpenXRCompositionLayerEquirect{self} }


//go:nosplit
func (self OpenXRCompositionLayerEquirect) AsOpenXRCompositionLayer() [1]OpenXRCompositionLayer { return *(*[1]OpenXRCompositionLayer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayerEquirect) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayerEquirect) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self OpenXRCompositionLayerEquirect) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OpenXRCompositionLayerQuad struct {_ [0]*OpenXRCompositionLayerQuad; ptr gd.Pointer}

//go:nosplit
func (self OpenXRCompositionLayerQuad) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OpenXRCompositionLayerQuad) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OpenXRCompositionLayerQuad) Super() [1]OpenXRCompositionLayer { return *(*[1]OpenXRCompositionLayer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayerQuad) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayerQuad) AsOpenXRCompositionLayerQuad() [1]OpenXRCompositionLayerQuad { return [1]OpenXRCompositionLayerQuad{self} }


//go:nosplit
func (self OpenXRCompositionLayerQuad) AsOpenXRCompositionLayer() [1]OpenXRCompositionLayer { return *(*[1]OpenXRCompositionLayer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayerQuad) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRCompositionLayerQuad) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self OpenXRCompositionLayerQuad) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OpenXRExtensionWrapperExtension struct {_ [0]*OpenXRExtensionWrapperExtension; ptr gd.Pointer}

//go:nosplit
func (self OpenXRExtensionWrapperExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OpenXRExtensionWrapperExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OpenXRExtensionWrapperExtension) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRExtensionWrapperExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRExtensionWrapperExtension) AsOpenXRExtensionWrapperExtension() [1]OpenXRExtensionWrapperExtension { return [1]OpenXRExtensionWrapperExtension{self} }

/*
Returns a [Dictionary] of OpenXR extensions related to this extension. The [Dictionary] should contain the name of the extension, mapped to a [code]bool *[/code] cast to an integer:
- If the [code]bool *[/code] is a [code]nullptr[/code] this extension is mandatory.
- If the [code]bool *[/code] points to a boolean, the boolean will be updated to [code]true[/code] if the extension is enabled.
*/
func (OpenXRExtensionWrapperExtension) _get_requested_extensions(impl func(ptr unsafe.Pointer) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Adds additional data structures when interogating OpenXR system abilities.
*/
func (OpenXRExtensionWrapperExtension) _set_system_properties_and_get_next_pointer(impl func(ptr unsafe.Pointer, next_pointer unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var next_pointer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, next_pointer)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Adds additional data structures when the OpenXR instance is created.
*/
func (OpenXRExtensionWrapperExtension) _set_instance_create_info_and_get_next_pointer(impl func(ptr unsafe.Pointer, next_pointer unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var next_pointer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, next_pointer)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Adds additional data structures when the OpenXR session is created.
*/
func (OpenXRExtensionWrapperExtension) _set_session_create_and_get_next_pointer(impl func(ptr unsafe.Pointer, next_pointer unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var next_pointer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, next_pointer)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Adds additional data structures when creating OpenXR swapchains.
*/
func (OpenXRExtensionWrapperExtension) _set_swapchain_create_info_and_get_next_pointer(impl func(ptr unsafe.Pointer, next_pointer unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var next_pointer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, next_pointer)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Adds additional data structures when each hand tracker is created.
*/
func (OpenXRExtensionWrapperExtension) _set_hand_joint_locations_and_get_next_pointer(impl func(ptr unsafe.Pointer, hand_index gd.Int, next_pointer unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var hand_index = gd.UnsafeGet[gd.Int](p_args,0)
		var next_pointer = gd.UnsafeGet[unsafe.Pointer](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, hand_index, next_pointer)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns the number of composition layers this extension wrapper provides via [method _get_composition_layer].
This will only be called if the extension previously registered itself with [method OpenXRAPIExtension.register_composition_layer_provider].
*/
func (OpenXRExtensionWrapperExtension) _get_composition_layer_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns a pointer to an [code]XrCompositionLayerBaseHeader[/code] struct to provide the given composition layer.
This will only be called if the extension previously registered itself with [method OpenXRAPIExtension.register_composition_layer_provider].
*/
func (OpenXRExtensionWrapperExtension) _get_composition_layer(impl func(ptr unsafe.Pointer, index gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, index)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns an integer that will be used to sort the given composition layer provided via [method _get_composition_layer]. Lower numbers will move the layer to the front of the list, and higher numbers to the end. The default projection layer has an order of [code]0[/code], so layers provided by this method should probably be above or below (but not exactly) [code]0[/code].
This will only be called if the extension previously registered itself with [method OpenXRAPIExtension.register_composition_layer_provider].
*/
func (OpenXRExtensionWrapperExtension) _get_composition_layer_order(impl func(ptr unsafe.Pointer, index gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, index)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns a [PackedStringArray] of positional tracker names that are used within the extension wrapper.
*/
func (OpenXRExtensionWrapperExtension) _get_suggested_tracker_names(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Allows extensions to register additional controller metadata. This function is called even when the OpenXR API is not constructed as the metadata needs to be available to the editor.
Extensions should also provide metadata regardless of whether they are supported on the host system. The controller data is used to setup action maps for users who may have access to the relevant hardware.
*/
func (OpenXRExtensionWrapperExtension) _on_register_metadata(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called before the OpenXR instance is created.
*/
func (OpenXRExtensionWrapperExtension) _on_before_instance_created(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called right after the OpenXR instance is created.
*/
func (OpenXRExtensionWrapperExtension) _on_instance_created(impl func(ptr unsafe.Pointer, instance gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var instance = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, instance)
		ctx.End()
	}
}

/*
Called right before the OpenXR instance is destroyed.
*/
func (OpenXRExtensionWrapperExtension) _on_instance_destroyed(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called right after the OpenXR session is created.
*/
func (OpenXRExtensionWrapperExtension) _on_session_created(impl func(ptr unsafe.Pointer, session gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var session = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, session)
		ctx.End()
	}
}

/*
Called as part of the OpenXR process handling. This happens right before general and physics processing steps of the main loop. During this step controller data is queried and made available to game logic.
*/
func (OpenXRExtensionWrapperExtension) _on_process(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called right before the XR viewports begin their rendering step.
*/
func (OpenXRExtensionWrapperExtension) _on_pre_render(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called right after the main swapchains are (re)created.
*/
func (OpenXRExtensionWrapperExtension) _on_main_swapchains_created(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called right before the OpenXR session is destroyed.
*/
func (OpenXRExtensionWrapperExtension) _on_session_destroyed(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the OpenXR session state is changed to idle.
*/
func (OpenXRExtensionWrapperExtension) _on_state_idle(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the OpenXR session state is changed to ready. This means OpenXR is ready to set up the session.
*/
func (OpenXRExtensionWrapperExtension) _on_state_ready(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the OpenXR session state is changed to synchronized. OpenXR also returns to this state when the application loses focus.
*/
func (OpenXRExtensionWrapperExtension) _on_state_synchronized(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the OpenXR session state is changed to visible. This means OpenXR is now ready to receive frames.
*/
func (OpenXRExtensionWrapperExtension) _on_state_visible(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the OpenXR session state is changed to focused. This state is the active state when the game runs.
*/
func (OpenXRExtensionWrapperExtension) _on_state_focused(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the OpenXR session state is changed to stopping.
*/
func (OpenXRExtensionWrapperExtension) _on_state_stopping(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the OpenXR session state is changed to loss pending.
*/
func (OpenXRExtensionWrapperExtension) _on_state_loss_pending(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the OpenXR session state is changed to exiting.
*/
func (OpenXRExtensionWrapperExtension) _on_state_exiting(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when there is an OpenXR event to process. When implementing, return [code]true[/code] if the event was handled, return [code]false[/code] otherwise.
*/
func (OpenXRExtensionWrapperExtension) _on_event_polled(impl func(ptr unsafe.Pointer, event unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var event = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, event)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Adds additional data structures to composition layers created by [OpenXRCompositionLayer].
[param property_values] contains the values of the properties returned by [method _get_viewport_composition_layer_extension_properties].
[param layer] is a pointer to an [code]XrCompositionLayerBaseHeader[/code] struct.
*/
func (OpenXRExtensionWrapperExtension) _set_viewport_composition_layer_and_get_next_pointer(impl func(ptr unsafe.Pointer, layer unsafe.Pointer, property_values gd.Dictionary, next_pointer unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var layer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		var property_values = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var next_pointer = gd.UnsafeGet[unsafe.Pointer](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, layer, property_values, next_pointer)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Gets an array of [Dictionary]s that represent properties, just like [method Object._get_property_list], that will be added to [OpenXRCompositionLayer] nodes.
*/
func (OpenXRExtensionWrapperExtension) _get_viewport_composition_layer_extension_properties(impl func(ptr unsafe.Pointer) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

/*
Gets a [Dictionary] containing the default values for the properties returned by [method _get_viewport_composition_layer_extension_properties].
*/
func (OpenXRExtensionWrapperExtension) _get_viewport_composition_layer_extension_property_defaults(impl func(ptr unsafe.Pointer) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Called when a composition layer created via [OpenXRCompositionLayer] is destroyed.
[param layer] is a pointer to an [code]XrCompositionLayerBaseHeader[/code] struct.
*/
func (OpenXRExtensionWrapperExtension) _on_viewport_composition_layer_destroyed(impl func(ptr unsafe.Pointer, layer unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var layer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, layer)
		ctx.End()
	}
}

func (self OpenXRExtensionWrapperExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_get_requested_extensions": return reflect.ValueOf(self._get_requested_extensions);
	case "_set_system_properties_and_get_next_pointer": return reflect.ValueOf(self._set_system_properties_and_get_next_pointer);
	case "_set_instance_create_info_and_get_next_pointer": return reflect.ValueOf(self._set_instance_create_info_and_get_next_pointer);
	case "_set_session_create_and_get_next_pointer": return reflect.ValueOf(self._set_session_create_and_get_next_pointer);
	case "_set_swapchain_create_info_and_get_next_pointer": return reflect.ValueOf(self._set_swapchain_create_info_and_get_next_pointer);
	case "_set_hand_joint_locations_and_get_next_pointer": return reflect.ValueOf(self._set_hand_joint_locations_and_get_next_pointer);
	case "_get_composition_layer_count": return reflect.ValueOf(self._get_composition_layer_count);
	case "_get_composition_layer": return reflect.ValueOf(self._get_composition_layer);
	case "_get_composition_layer_order": return reflect.ValueOf(self._get_composition_layer_order);
	case "_get_suggested_tracker_names": return reflect.ValueOf(self._get_suggested_tracker_names);
	case "_on_register_metadata": return reflect.ValueOf(self._on_register_metadata);
	case "_on_before_instance_created": return reflect.ValueOf(self._on_before_instance_created);
	case "_on_instance_created": return reflect.ValueOf(self._on_instance_created);
	case "_on_instance_destroyed": return reflect.ValueOf(self._on_instance_destroyed);
	case "_on_session_created": return reflect.ValueOf(self._on_session_created);
	case "_on_process": return reflect.ValueOf(self._on_process);
	case "_on_pre_render": return reflect.ValueOf(self._on_pre_render);
	case "_on_main_swapchains_created": return reflect.ValueOf(self._on_main_swapchains_created);
	case "_on_session_destroyed": return reflect.ValueOf(self._on_session_destroyed);
	case "_on_state_idle": return reflect.ValueOf(self._on_state_idle);
	case "_on_state_ready": return reflect.ValueOf(self._on_state_ready);
	case "_on_state_synchronized": return reflect.ValueOf(self._on_state_synchronized);
	case "_on_state_visible": return reflect.ValueOf(self._on_state_visible);
	case "_on_state_focused": return reflect.ValueOf(self._on_state_focused);
	case "_on_state_stopping": return reflect.ValueOf(self._on_state_stopping);
	case "_on_state_loss_pending": return reflect.ValueOf(self._on_state_loss_pending);
	case "_on_state_exiting": return reflect.ValueOf(self._on_state_exiting);
	case "_on_event_polled": return reflect.ValueOf(self._on_event_polled);
	case "_set_viewport_composition_layer_and_get_next_pointer": return reflect.ValueOf(self._set_viewport_composition_layer_and_get_next_pointer);
	case "_get_viewport_composition_layer_extension_properties": return reflect.ValueOf(self._get_viewport_composition_layer_extension_properties);
	case "_get_viewport_composition_layer_extension_property_defaults": return reflect.ValueOf(self._get_viewport_composition_layer_extension_property_defaults);
	case "_on_viewport_composition_layer_destroyed": return reflect.ValueOf(self._on_viewport_composition_layer_destroyed);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type OpenXRHandHands int64

type OpenXRHandMotionRange int64

type OpenXRHandSkeletonRig int64

type OpenXRHandBoneUpdate int64
type OpenXRHand struct {_ [0]*OpenXRHand; ptr gd.Pointer}

//go:nosplit
func (self OpenXRHand) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OpenXRHand) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OpenXRHand) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRHand) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRHand) AsOpenXRHand() [1]OpenXRHand { return [1]OpenXRHand{self} }


//go:nosplit
func (self OpenXRHand) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRHand) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self OpenXRHand) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OpenXRIPBinding struct {_ [0]*OpenXRIPBinding; ptr gd.Pointer}

//go:nosplit
func (self OpenXRIPBinding) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OpenXRIPBinding) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OpenXRIPBinding) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRIPBinding) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRIPBinding) AsOpenXRIPBinding() [1]OpenXRIPBinding { return [1]OpenXRIPBinding{self} }


//go:nosplit
func (self OpenXRIPBinding) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRIPBinding) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self OpenXRIPBinding) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OpenXRInteractionProfile struct {_ [0]*OpenXRInteractionProfile; ptr gd.Pointer}

//go:nosplit
func (self OpenXRInteractionProfile) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OpenXRInteractionProfile) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OpenXRInteractionProfile) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRInteractionProfile) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRInteractionProfile) AsOpenXRInteractionProfile() [1]OpenXRInteractionProfile { return [1]OpenXRInteractionProfile{self} }


//go:nosplit
func (self OpenXRInteractionProfile) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRInteractionProfile) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self OpenXRInteractionProfile) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OpenXRInteractionProfileMetadata struct {_ [0]*OpenXRInteractionProfileMetadata; ptr gd.Pointer}

//go:nosplit
func (self OpenXRInteractionProfileMetadata) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OpenXRInteractionProfileMetadata) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OpenXRInteractionProfileMetadata) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRInteractionProfileMetadata) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRInteractionProfileMetadata) AsOpenXRInteractionProfileMetadata() [1]OpenXRInteractionProfileMetadata { return [1]OpenXRInteractionProfileMetadata{self} }

func (self OpenXRInteractionProfileMetadata) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type OpenXRInterfaceHand int64

type OpenXRInterfaceHandMotionRange int64

type OpenXRInterfaceHandTrackedSource int64

type OpenXRInterfaceHandJoints int64

type OpenXRInterfaceHandJointFlags int64
type OpenXRInterface struct {_ [0]*OpenXRInterface; ptr gd.Pointer}

//go:nosplit
func (self OpenXRInterface) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OpenXRInterface) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OpenXRInterface) Super() [1]XRInterface { return *(*[1]XRInterface)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRInterface) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRInterface) AsOpenXRInterface() [1]OpenXRInterface { return [1]OpenXRInterface{self} }


//go:nosplit
func (self OpenXRInterface) AsXRInterface() [1]XRInterface { return *(*[1]XRInterface)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OpenXRInterface) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self OpenXRInterface) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OptimizedTranslation struct {_ [0]*OptimizedTranslation; ptr gd.Pointer}

//go:nosplit
func (self OptimizedTranslation) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OptimizedTranslation) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OptimizedTranslation) Super() [1]Translation { return *(*[1]Translation)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OptimizedTranslation) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OptimizedTranslation) AsOptimizedTranslation() [1]OptimizedTranslation { return [1]OptimizedTranslation{self} }


//go:nosplit
func (self OptimizedTranslation) AsTranslation() [1]Translation { return *(*[1]Translation)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OptimizedTranslation) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OptimizedTranslation) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self OptimizedTranslation) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type OptionButton struct {_ [0]*OptionButton; ptr gd.Pointer}

//go:nosplit
func (self OptionButton) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *OptionButton) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self OptionButton) Super() [1]Button { return *(*[1]Button)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OptionButton) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OptionButton) AsOptionButton() [1]OptionButton { return [1]OptionButton{self} }


//go:nosplit
func (self OptionButton) AsButton() [1]Button { return *(*[1]Button)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OptionButton) AsBaseButton() [1]BaseButton { return *(*[1]BaseButton)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OptionButton) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OptionButton) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self OptionButton) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self OptionButton) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PCKPacker struct {_ [0]*PCKPacker; ptr gd.Pointer}

//go:nosplit
func (self PCKPacker) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PCKPacker) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PCKPacker) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PCKPacker) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PCKPacker) AsPCKPacker() [1]PCKPacker { return [1]PCKPacker{self} }


//go:nosplit
func (self PCKPacker) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PCKPacker) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PackedDataContainer struct {_ [0]*PackedDataContainer; ptr gd.Pointer}

//go:nosplit
func (self PackedDataContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PackedDataContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PackedDataContainer) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PackedDataContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PackedDataContainer) AsPackedDataContainer() [1]PackedDataContainer { return [1]PackedDataContainer{self} }


//go:nosplit
func (self PackedDataContainer) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PackedDataContainer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PackedDataContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PackedDataContainerRef struct {_ [0]*PackedDataContainerRef; ptr gd.Pointer}

//go:nosplit
func (self PackedDataContainerRef) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PackedDataContainerRef) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PackedDataContainerRef) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PackedDataContainerRef) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PackedDataContainerRef) AsPackedDataContainerRef() [1]PackedDataContainerRef { return [1]PackedDataContainerRef{self} }


//go:nosplit
func (self PackedDataContainerRef) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PackedDataContainerRef) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type PackedSceneGenEditState int64
type PackedScene struct {_ [0]*PackedScene; ptr gd.Pointer}

//go:nosplit
func (self PackedScene) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PackedScene) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PackedScene) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PackedScene) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PackedScene) AsPackedScene() [1]PackedScene { return [1]PackedScene{self} }


//go:nosplit
func (self PackedScene) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PackedScene) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PackedScene) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PacketPeer struct {_ [0]*PacketPeer; ptr gd.Pointer}

//go:nosplit
func (self PacketPeer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PacketPeer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PacketPeer) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PacketPeer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PacketPeer) AsPacketPeer() [1]PacketPeer { return [1]PacketPeer{self} }


//go:nosplit
func (self PacketPeer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PacketPeer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type PacketPeerDTLSStatus int64
type PacketPeerDTLS struct {_ [0]*PacketPeerDTLS; ptr gd.Pointer}

//go:nosplit
func (self PacketPeerDTLS) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PacketPeerDTLS) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PacketPeerDTLS) Super() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PacketPeerDTLS) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PacketPeerDTLS) AsPacketPeerDTLS() [1]PacketPeerDTLS { return [1]PacketPeerDTLS{self} }


//go:nosplit
func (self PacketPeerDTLS) AsPacketPeer() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PacketPeerDTLS) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PacketPeerDTLS) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PacketPeerExtension struct {_ [0]*PacketPeerExtension; ptr gd.Pointer}

//go:nosplit
func (self PacketPeerExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PacketPeerExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PacketPeerExtension) Super() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PacketPeerExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PacketPeerExtension) AsPacketPeerExtension() [1]PacketPeerExtension { return [1]PacketPeerExtension{self} }


//go:nosplit
func (self PacketPeerExtension) AsPacketPeer() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PacketPeerExtension) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (PacketPeerExtension) _get_packet(impl func(ptr unsafe.Pointer, r_buffer unsafe.Pointer, r_buffer_size *int32) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var r_buffer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		var r_buffer_size = gd.UnsafeGet[*int32](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, r_buffer, r_buffer_size)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PacketPeerExtension) _put_packet(impl func(ptr unsafe.Pointer, p_buffer unsafe.Pointer, p_buffer_size gd.Int) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_buffer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		var p_buffer_size = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, p_buffer, p_buffer_size)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PacketPeerExtension) _get_available_packet_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PacketPeerExtension) _get_max_packet_size(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self PacketPeerExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_get_packet": return reflect.ValueOf(self._get_packet);
	case "_put_packet": return reflect.ValueOf(self._put_packet);
	case "_get_available_packet_count": return reflect.ValueOf(self._get_available_packet_count);
	case "_get_max_packet_size": return reflect.ValueOf(self._get_max_packet_size);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PacketPeerStream struct {_ [0]*PacketPeerStream; ptr gd.Pointer}

//go:nosplit
func (self PacketPeerStream) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PacketPeerStream) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PacketPeerStream) Super() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PacketPeerStream) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PacketPeerStream) AsPacketPeerStream() [1]PacketPeerStream { return [1]PacketPeerStream{self} }


//go:nosplit
func (self PacketPeerStream) AsPacketPeer() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PacketPeerStream) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PacketPeerStream) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PacketPeerUDP struct {_ [0]*PacketPeerUDP; ptr gd.Pointer}

//go:nosplit
func (self PacketPeerUDP) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PacketPeerUDP) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PacketPeerUDP) Super() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PacketPeerUDP) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PacketPeerUDP) AsPacketPeerUDP() [1]PacketPeerUDP { return [1]PacketPeerUDP{self} }


//go:nosplit
func (self PacketPeerUDP) AsPacketPeer() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PacketPeerUDP) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PacketPeerUDP) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Panel struct {_ [0]*Panel; ptr gd.Pointer}

//go:nosplit
func (self Panel) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Panel) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Panel) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Panel) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Panel) AsPanel() [1]Panel { return [1]Panel{self} }


//go:nosplit
func (self Panel) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Panel) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Panel) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Panel) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PanelContainer struct {_ [0]*PanelContainer; ptr gd.Pointer}

//go:nosplit
func (self PanelContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PanelContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PanelContainer) Super() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PanelContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PanelContainer) AsPanelContainer() [1]PanelContainer { return [1]PanelContainer{self} }


//go:nosplit
func (self PanelContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PanelContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PanelContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PanelContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self PanelContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PanoramaSkyMaterial struct {_ [0]*PanoramaSkyMaterial; ptr gd.Pointer}

//go:nosplit
func (self PanoramaSkyMaterial) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PanoramaSkyMaterial) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PanoramaSkyMaterial) Super() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PanoramaSkyMaterial) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PanoramaSkyMaterial) AsPanoramaSkyMaterial() [1]PanoramaSkyMaterial { return [1]PanoramaSkyMaterial{self} }


//go:nosplit
func (self PanoramaSkyMaterial) AsMaterial() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PanoramaSkyMaterial) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PanoramaSkyMaterial) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PanoramaSkyMaterial) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Parallax2D struct {_ [0]*Parallax2D; ptr gd.Pointer}

//go:nosplit
func (self Parallax2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Parallax2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Parallax2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Parallax2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Parallax2D) AsParallax2D() [1]Parallax2D { return [1]Parallax2D{self} }


//go:nosplit
func (self Parallax2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Parallax2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Parallax2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Parallax2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ParallaxBackground struct {_ [0]*ParallaxBackground; ptr gd.Pointer}

//go:nosplit
func (self ParallaxBackground) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ParallaxBackground) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ParallaxBackground) Super() [1]CanvasLayer { return *(*[1]CanvasLayer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ParallaxBackground) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ParallaxBackground) AsParallaxBackground() [1]ParallaxBackground { return [1]ParallaxBackground{self} }


//go:nosplit
func (self ParallaxBackground) AsCanvasLayer() [1]CanvasLayer { return *(*[1]CanvasLayer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ParallaxBackground) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ParallaxBackground) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ParallaxLayer struct {_ [0]*ParallaxLayer; ptr gd.Pointer}

//go:nosplit
func (self ParallaxLayer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ParallaxLayer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ParallaxLayer) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ParallaxLayer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ParallaxLayer) AsParallaxLayer() [1]ParallaxLayer { return [1]ParallaxLayer{self} }


//go:nosplit
func (self ParallaxLayer) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ParallaxLayer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ParallaxLayer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ParallaxLayer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ParticleProcessMaterialParameter int64

type ParticleProcessMaterialParticleFlags int64

type ParticleProcessMaterialEmissionShape int64

type ParticleProcessMaterialSubEmitterMode int64

type ParticleProcessMaterialCollisionMode int64
type ParticleProcessMaterial struct {_ [0]*ParticleProcessMaterial; ptr gd.Pointer}

//go:nosplit
func (self ParticleProcessMaterial) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ParticleProcessMaterial) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ParticleProcessMaterial) Super() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ParticleProcessMaterial) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ParticleProcessMaterial) AsParticleProcessMaterial() [1]ParticleProcessMaterial { return [1]ParticleProcessMaterial{self} }


//go:nosplit
func (self ParticleProcessMaterial) AsMaterial() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ParticleProcessMaterial) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ParticleProcessMaterial) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ParticleProcessMaterial) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Path2D struct {_ [0]*Path2D; ptr gd.Pointer}

//go:nosplit
func (self Path2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Path2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Path2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Path2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Path2D) AsPath2D() [1]Path2D { return [1]Path2D{self} }


//go:nosplit
func (self Path2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Path2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Path2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Path2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Path3D struct {_ [0]*Path3D; ptr gd.Pointer}

//go:nosplit
func (self Path3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Path3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Path3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Path3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Path3D) AsPath3D() [1]Path3D { return [1]Path3D{self} }


//go:nosplit
func (self Path3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Path3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Path3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PathFollow2D struct {_ [0]*PathFollow2D; ptr gd.Pointer}

//go:nosplit
func (self PathFollow2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PathFollow2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PathFollow2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PathFollow2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PathFollow2D) AsPathFollow2D() [1]PathFollow2D { return [1]PathFollow2D{self} }


//go:nosplit
func (self PathFollow2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PathFollow2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PathFollow2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self PathFollow2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type PathFollow3DRotationMode int64
type PathFollow3D struct {_ [0]*PathFollow3D; ptr gd.Pointer}

//go:nosplit
func (self PathFollow3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PathFollow3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PathFollow3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PathFollow3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PathFollow3D) AsPathFollow3D() [1]PathFollow3D { return [1]PathFollow3D{self} }


//go:nosplit
func (self PathFollow3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PathFollow3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self PathFollow3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type PerformanceMonitor int64
type Performance struct {_ [0]*Performance; ptr gd.Pointer}

//go:nosplit
func (self Performance) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Performance) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Performance) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Performance) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Performance) AsPerformance() [1]Performance { return [1]Performance{self} }

//go:nosplit

func (self Performance) IsSingleton() {}

func (self Performance) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicalBone2D struct {_ [0]*PhysicalBone2D; ptr gd.Pointer}

//go:nosplit
func (self PhysicalBone2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicalBone2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicalBone2D) Super() [1]RigidBody2D { return *(*[1]RigidBody2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBone2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBone2D) AsPhysicalBone2D() [1]PhysicalBone2D { return [1]PhysicalBone2D{self} }


//go:nosplit
func (self PhysicalBone2D) AsRigidBody2D() [1]RigidBody2D { return *(*[1]RigidBody2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBone2D) AsPhysicsBody2D() [1]PhysicsBody2D { return *(*[1]PhysicsBody2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBone2D) AsCollisionObject2D() [1]CollisionObject2D { return *(*[1]CollisionObject2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBone2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBone2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBone2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self PhysicalBone2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type PhysicalBone3DDampMode int64

type PhysicalBone3DJointType int64
type PhysicalBone3D struct {_ [0]*PhysicalBone3D; ptr gd.Pointer}

//go:nosplit
func (self PhysicalBone3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicalBone3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicalBone3D) Super() [1]PhysicsBody3D { return *(*[1]PhysicsBody3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBone3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBone3D) AsPhysicalBone3D() [1]PhysicalBone3D { return [1]PhysicalBone3D{self} }


//go:nosplit
func (self PhysicalBone3D) AsPhysicsBody3D() [1]PhysicsBody3D { return *(*[1]PhysicsBody3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBone3D) AsCollisionObject3D() [1]CollisionObject3D { return *(*[1]CollisionObject3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBone3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBone3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default, it is called before the standard force integration, but the [member custom_integrator] property allows you to disable the standard force integration and do fully custom force integration for a body.
*/
func (PhysicalBone3D) _integrate_forces(impl func(ptr unsafe.Pointer, state PhysicsDirectBodyState3D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state PhysicsDirectBodyState3D
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, state)
		ctx.End()
	}
}

func (self PhysicalBone3D) Virtual(name string) reflect.Value {
	switch name {
	case "_integrate_forces": return reflect.ValueOf(self._integrate_forces);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicalBoneSimulator3D struct {_ [0]*PhysicalBoneSimulator3D; ptr gd.Pointer}

//go:nosplit
func (self PhysicalBoneSimulator3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicalBoneSimulator3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicalBoneSimulator3D) Super() [1]SkeletonModifier3D { return *(*[1]SkeletonModifier3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBoneSimulator3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBoneSimulator3D) AsPhysicalBoneSimulator3D() [1]PhysicalBoneSimulator3D { return [1]PhysicalBoneSimulator3D{self} }


//go:nosplit
func (self PhysicalBoneSimulator3D) AsSkeletonModifier3D() [1]SkeletonModifier3D { return *(*[1]SkeletonModifier3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBoneSimulator3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalBoneSimulator3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self PhysicalBoneSimulator3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicalSkyMaterial struct {_ [0]*PhysicalSkyMaterial; ptr gd.Pointer}

//go:nosplit
func (self PhysicalSkyMaterial) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicalSkyMaterial) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicalSkyMaterial) Super() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalSkyMaterial) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalSkyMaterial) AsPhysicalSkyMaterial() [1]PhysicalSkyMaterial { return [1]PhysicalSkyMaterial{self} }


//go:nosplit
func (self PhysicalSkyMaterial) AsMaterial() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalSkyMaterial) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicalSkyMaterial) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PhysicalSkyMaterial) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsBody2D struct {_ [0]*PhysicsBody2D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsBody2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsBody2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsBody2D) Super() [1]CollisionObject2D { return *(*[1]CollisionObject2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsBody2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsBody2D) AsPhysicsBody2D() [1]PhysicsBody2D { return [1]PhysicsBody2D{self} }


//go:nosplit
func (self PhysicsBody2D) AsCollisionObject2D() [1]CollisionObject2D { return *(*[1]CollisionObject2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsBody2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsBody2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsBody2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self PhysicsBody2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsBody3D struct {_ [0]*PhysicsBody3D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsBody3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsBody3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsBody3D) Super() [1]CollisionObject3D { return *(*[1]CollisionObject3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsBody3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsBody3D) AsPhysicsBody3D() [1]PhysicsBody3D { return [1]PhysicsBody3D{self} }


//go:nosplit
func (self PhysicsBody3D) AsCollisionObject3D() [1]CollisionObject3D { return *(*[1]CollisionObject3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsBody3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsBody3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self PhysicsBody3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsDirectBodyState2D struct {_ [0]*PhysicsDirectBodyState2D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsDirectBodyState2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsDirectBodyState2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsDirectBodyState2D) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectBodyState2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectBodyState2D) AsPhysicsDirectBodyState2D() [1]PhysicsDirectBodyState2D { return [1]PhysicsDirectBodyState2D{self} }

func (self PhysicsDirectBodyState2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsDirectBodyState2DExtension struct {_ [0]*PhysicsDirectBodyState2DExtension; ptr gd.Pointer}

//go:nosplit
func (self PhysicsDirectBodyState2DExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsDirectBodyState2DExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsDirectBodyState2DExtension) Super() [1]PhysicsDirectBodyState2D { return *(*[1]PhysicsDirectBodyState2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectBodyState2DExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectBodyState2DExtension) AsPhysicsDirectBodyState2DExtension() [1]PhysicsDirectBodyState2DExtension { return [1]PhysicsDirectBodyState2DExtension{self} }


//go:nosplit
func (self PhysicsDirectBodyState2DExtension) AsPhysicsDirectBodyState2D() [1]PhysicsDirectBodyState2D { return *(*[1]PhysicsDirectBodyState2D)(unsafe.Pointer(&self)) }

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.total_gravity] and its respective getter.
*/
func (PhysicsDirectBodyState2DExtension) _get_total_gravity(impl func(ptr unsafe.Pointer) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.total_linear_damp] and its respective getter.
*/
func (PhysicsDirectBodyState2DExtension) _get_total_linear_damp(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.total_angular_damp] and its respective getter.
*/
func (PhysicsDirectBodyState2DExtension) _get_total_angular_damp(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.center_of_mass] and its respective getter.
*/
func (PhysicsDirectBodyState2DExtension) _get_center_of_mass(impl func(ptr unsafe.Pointer) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.center_of_mass_local] and its respective getter.
*/
func (PhysicsDirectBodyState2DExtension) _get_center_of_mass_local(impl func(ptr unsafe.Pointer) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.inverse_mass] and its respective getter.
*/
func (PhysicsDirectBodyState2DExtension) _get_inverse_mass(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.inverse_inertia] and its respective getter.
*/
func (PhysicsDirectBodyState2DExtension) _get_inverse_inertia(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.linear_velocity] and its respective setter.
*/
func (PhysicsDirectBodyState2DExtension) _set_linear_velocity(impl func(ptr unsafe.Pointer, velocity gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var velocity = gd.UnsafeGet[gd.Vector2](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, velocity)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.linear_velocity] and its respective getter.
*/
func (PhysicsDirectBodyState2DExtension) _get_linear_velocity(impl func(ptr unsafe.Pointer) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.angular_velocity] and its respective setter.
*/
func (PhysicsDirectBodyState2DExtension) _set_angular_velocity(impl func(ptr unsafe.Pointer, velocity gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var velocity = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, velocity)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.angular_velocity] and its respective getter.
*/
func (PhysicsDirectBodyState2DExtension) _get_angular_velocity(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.transform] and its respective setter.
*/
func (PhysicsDirectBodyState2DExtension) _set_transform(impl func(ptr unsafe.Pointer, transform gd.Transform2D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var transform = gd.UnsafeGet[gd.Transform2D](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, transform)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.transform] and its respective getter.
*/
func (PhysicsDirectBodyState2DExtension) _get_transform(impl func(ptr unsafe.Pointer) gd.Transform2D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_velocity_at_local_position].
*/
func (PhysicsDirectBodyState2DExtension) _get_velocity_at_local_position(impl func(ptr unsafe.Pointer, local_position gd.Vector2) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var local_position = gd.UnsafeGet[gd.Vector2](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, local_position)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.apply_central_impulse].
*/
func (PhysicsDirectBodyState2DExtension) _apply_central_impulse(impl func(ptr unsafe.Pointer, impulse gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var impulse = gd.UnsafeGet[gd.Vector2](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, impulse)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.apply_impulse].
*/
func (PhysicsDirectBodyState2DExtension) _apply_impulse(impl func(ptr unsafe.Pointer, impulse gd.Vector2, position gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var impulse = gd.UnsafeGet[gd.Vector2](p_args,0)
		var position = gd.UnsafeGet[gd.Vector2](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, impulse, position)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.apply_torque_impulse].
*/
func (PhysicsDirectBodyState2DExtension) _apply_torque_impulse(impl func(ptr unsafe.Pointer, impulse gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var impulse = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, impulse)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.apply_central_force].
*/
func (PhysicsDirectBodyState2DExtension) _apply_central_force(impl func(ptr unsafe.Pointer, force gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var force = gd.UnsafeGet[gd.Vector2](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, force)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.apply_force].
*/
func (PhysicsDirectBodyState2DExtension) _apply_force(impl func(ptr unsafe.Pointer, force gd.Vector2, position gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var force = gd.UnsafeGet[gd.Vector2](p_args,0)
		var position = gd.UnsafeGet[gd.Vector2](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, force, position)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.apply_torque].
*/
func (PhysicsDirectBodyState2DExtension) _apply_torque(impl func(ptr unsafe.Pointer, torque gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var torque = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, torque)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.add_constant_central_force].
*/
func (PhysicsDirectBodyState2DExtension) _add_constant_central_force(impl func(ptr unsafe.Pointer, force gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var force = gd.UnsafeGet[gd.Vector2](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, force)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.add_constant_force].
*/
func (PhysicsDirectBodyState2DExtension) _add_constant_force(impl func(ptr unsafe.Pointer, force gd.Vector2, position gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var force = gd.UnsafeGet[gd.Vector2](p_args,0)
		var position = gd.UnsafeGet[gd.Vector2](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, force, position)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.add_constant_torque].
*/
func (PhysicsDirectBodyState2DExtension) _add_constant_torque(impl func(ptr unsafe.Pointer, torque gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var torque = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, torque)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.set_constant_force].
*/
func (PhysicsDirectBodyState2DExtension) _set_constant_force(impl func(ptr unsafe.Pointer, force gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var force = gd.UnsafeGet[gd.Vector2](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, force)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_constant_force].
*/
func (PhysicsDirectBodyState2DExtension) _get_constant_force(impl func(ptr unsafe.Pointer) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.set_constant_torque].
*/
func (PhysicsDirectBodyState2DExtension) _set_constant_torque(impl func(ptr unsafe.Pointer, torque gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var torque = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, torque)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_constant_torque].
*/
func (PhysicsDirectBodyState2DExtension) _get_constant_torque(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.sleeping] and its respective setter.
*/
func (PhysicsDirectBodyState2DExtension) _set_sleep_state(impl func(ptr unsafe.Pointer, enabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var enabled = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, enabled)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.sleeping] and its respective getter.
*/
func (PhysicsDirectBodyState2DExtension) _is_sleeping(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_contact_count].
*/
func (PhysicsDirectBodyState2DExtension) _get_contact_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_contact_local_position].
*/
func (PhysicsDirectBodyState2DExtension) _get_contact_local_position(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_contact_local_normal].
*/
func (PhysicsDirectBodyState2DExtension) _get_contact_local_normal(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_contact_local_shape].
*/
func (PhysicsDirectBodyState2DExtension) _get_contact_local_shape(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_contact_local_velocity_at_position].
*/
func (PhysicsDirectBodyState2DExtension) _get_contact_local_velocity_at_position(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_contact_collider].
*/
func (PhysicsDirectBodyState2DExtension) _get_contact_collider(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_contact_collider_position].
*/
func (PhysicsDirectBodyState2DExtension) _get_contact_collider_position(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_contact_collider_id].
*/
func (PhysicsDirectBodyState2DExtension) _get_contact_collider_id(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_contact_collider_object].
*/
func (PhysicsDirectBodyState2DExtension) _get_contact_collider_object(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Object, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_contact_collider_shape].
*/
func (PhysicsDirectBodyState2DExtension) _get_contact_collider_shape(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_contact_collider_velocity_at_position].
*/
func (PhysicsDirectBodyState2DExtension) _get_contact_collider_velocity_at_position(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_contact_impulse].
*/
func (PhysicsDirectBodyState2DExtension) _get_contact_impulse(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement to override the behavior of [member PhysicsDirectBodyState2D.step] and its respective getter.
*/
func (PhysicsDirectBodyState2DExtension) _get_step(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.integrate_forces].
*/
func (PhysicsDirectBodyState2DExtension) _integrate_forces(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsDirectBodyState2D.get_space_state].
*/
func (PhysicsDirectBodyState2DExtension) _get_space_state(impl func(ptr unsafe.Pointer) PhysicsDirectSpaceState2D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (self PhysicsDirectBodyState2DExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_get_total_gravity": return reflect.ValueOf(self._get_total_gravity);
	case "_get_total_linear_damp": return reflect.ValueOf(self._get_total_linear_damp);
	case "_get_total_angular_damp": return reflect.ValueOf(self._get_total_angular_damp);
	case "_get_center_of_mass": return reflect.ValueOf(self._get_center_of_mass);
	case "_get_center_of_mass_local": return reflect.ValueOf(self._get_center_of_mass_local);
	case "_get_inverse_mass": return reflect.ValueOf(self._get_inverse_mass);
	case "_get_inverse_inertia": return reflect.ValueOf(self._get_inverse_inertia);
	case "_set_linear_velocity": return reflect.ValueOf(self._set_linear_velocity);
	case "_get_linear_velocity": return reflect.ValueOf(self._get_linear_velocity);
	case "_set_angular_velocity": return reflect.ValueOf(self._set_angular_velocity);
	case "_get_angular_velocity": return reflect.ValueOf(self._get_angular_velocity);
	case "_set_transform": return reflect.ValueOf(self._set_transform);
	case "_get_transform": return reflect.ValueOf(self._get_transform);
	case "_get_velocity_at_local_position": return reflect.ValueOf(self._get_velocity_at_local_position);
	case "_apply_central_impulse": return reflect.ValueOf(self._apply_central_impulse);
	case "_apply_impulse": return reflect.ValueOf(self._apply_impulse);
	case "_apply_torque_impulse": return reflect.ValueOf(self._apply_torque_impulse);
	case "_apply_central_force": return reflect.ValueOf(self._apply_central_force);
	case "_apply_force": return reflect.ValueOf(self._apply_force);
	case "_apply_torque": return reflect.ValueOf(self._apply_torque);
	case "_add_constant_central_force": return reflect.ValueOf(self._add_constant_central_force);
	case "_add_constant_force": return reflect.ValueOf(self._add_constant_force);
	case "_add_constant_torque": return reflect.ValueOf(self._add_constant_torque);
	case "_set_constant_force": return reflect.ValueOf(self._set_constant_force);
	case "_get_constant_force": return reflect.ValueOf(self._get_constant_force);
	case "_set_constant_torque": return reflect.ValueOf(self._set_constant_torque);
	case "_get_constant_torque": return reflect.ValueOf(self._get_constant_torque);
	case "_set_sleep_state": return reflect.ValueOf(self._set_sleep_state);
	case "_is_sleeping": return reflect.ValueOf(self._is_sleeping);
	case "_get_contact_count": return reflect.ValueOf(self._get_contact_count);
	case "_get_contact_local_position": return reflect.ValueOf(self._get_contact_local_position);
	case "_get_contact_local_normal": return reflect.ValueOf(self._get_contact_local_normal);
	case "_get_contact_local_shape": return reflect.ValueOf(self._get_contact_local_shape);
	case "_get_contact_local_velocity_at_position": return reflect.ValueOf(self._get_contact_local_velocity_at_position);
	case "_get_contact_collider": return reflect.ValueOf(self._get_contact_collider);
	case "_get_contact_collider_position": return reflect.ValueOf(self._get_contact_collider_position);
	case "_get_contact_collider_id": return reflect.ValueOf(self._get_contact_collider_id);
	case "_get_contact_collider_object": return reflect.ValueOf(self._get_contact_collider_object);
	case "_get_contact_collider_shape": return reflect.ValueOf(self._get_contact_collider_shape);
	case "_get_contact_collider_velocity_at_position": return reflect.ValueOf(self._get_contact_collider_velocity_at_position);
	case "_get_contact_impulse": return reflect.ValueOf(self._get_contact_impulse);
	case "_get_step": return reflect.ValueOf(self._get_step);
	case "_integrate_forces": return reflect.ValueOf(self._integrate_forces);
	case "_get_space_state": return reflect.ValueOf(self._get_space_state);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsDirectBodyState3D struct {_ [0]*PhysicsDirectBodyState3D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsDirectBodyState3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsDirectBodyState3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsDirectBodyState3D) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectBodyState3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectBodyState3D) AsPhysicsDirectBodyState3D() [1]PhysicsDirectBodyState3D { return [1]PhysicsDirectBodyState3D{self} }

func (self PhysicsDirectBodyState3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsDirectBodyState3DExtension struct {_ [0]*PhysicsDirectBodyState3DExtension; ptr gd.Pointer}

//go:nosplit
func (self PhysicsDirectBodyState3DExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsDirectBodyState3DExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsDirectBodyState3DExtension) Super() [1]PhysicsDirectBodyState3D { return *(*[1]PhysicsDirectBodyState3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectBodyState3DExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectBodyState3DExtension) AsPhysicsDirectBodyState3DExtension() [1]PhysicsDirectBodyState3DExtension { return [1]PhysicsDirectBodyState3DExtension{self} }


//go:nosplit
func (self PhysicsDirectBodyState3DExtension) AsPhysicsDirectBodyState3D() [1]PhysicsDirectBodyState3D { return *(*[1]PhysicsDirectBodyState3D)(unsafe.Pointer(&self)) }

func (PhysicsDirectBodyState3DExtension) _get_total_gravity(impl func(ptr unsafe.Pointer) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_total_linear_damp(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_total_angular_damp(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_center_of_mass(impl func(ptr unsafe.Pointer) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_center_of_mass_local(impl func(ptr unsafe.Pointer) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_principal_inertia_axes(impl func(ptr unsafe.Pointer) gd.Basis, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_inverse_mass(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_inverse_inertia(impl func(ptr unsafe.Pointer) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_inverse_inertia_tensor(impl func(ptr unsafe.Pointer) gd.Basis, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _set_linear_velocity(impl func(ptr unsafe.Pointer, velocity gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var velocity = gd.UnsafeGet[gd.Vector3](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, velocity)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_linear_velocity(impl func(ptr unsafe.Pointer) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _set_angular_velocity(impl func(ptr unsafe.Pointer, velocity gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var velocity = gd.UnsafeGet[gd.Vector3](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, velocity)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_angular_velocity(impl func(ptr unsafe.Pointer) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _set_transform(impl func(ptr unsafe.Pointer, transform gd.Transform3D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var transform = gd.UnsafeGet[gd.Transform3D](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, transform)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_transform(impl func(ptr unsafe.Pointer) gd.Transform3D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_velocity_at_local_position(impl func(ptr unsafe.Pointer, local_position gd.Vector3) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var local_position = gd.UnsafeGet[gd.Vector3](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, local_position)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _apply_central_impulse(impl func(ptr unsafe.Pointer, impulse gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var impulse = gd.UnsafeGet[gd.Vector3](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, impulse)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _apply_impulse(impl func(ptr unsafe.Pointer, impulse gd.Vector3, position gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var impulse = gd.UnsafeGet[gd.Vector3](p_args,0)
		var position = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, impulse, position)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _apply_torque_impulse(impl func(ptr unsafe.Pointer, impulse gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var impulse = gd.UnsafeGet[gd.Vector3](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, impulse)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _apply_central_force(impl func(ptr unsafe.Pointer, force gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var force = gd.UnsafeGet[gd.Vector3](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, force)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _apply_force(impl func(ptr unsafe.Pointer, force gd.Vector3, position gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var force = gd.UnsafeGet[gd.Vector3](p_args,0)
		var position = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, force, position)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _apply_torque(impl func(ptr unsafe.Pointer, torque gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var torque = gd.UnsafeGet[gd.Vector3](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, torque)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _add_constant_central_force(impl func(ptr unsafe.Pointer, force gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var force = gd.UnsafeGet[gd.Vector3](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, force)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _add_constant_force(impl func(ptr unsafe.Pointer, force gd.Vector3, position gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var force = gd.UnsafeGet[gd.Vector3](p_args,0)
		var position = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, force, position)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _add_constant_torque(impl func(ptr unsafe.Pointer, torque gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var torque = gd.UnsafeGet[gd.Vector3](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, torque)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _set_constant_force(impl func(ptr unsafe.Pointer, force gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var force = gd.UnsafeGet[gd.Vector3](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, force)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_constant_force(impl func(ptr unsafe.Pointer) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _set_constant_torque(impl func(ptr unsafe.Pointer, torque gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var torque = gd.UnsafeGet[gd.Vector3](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, torque)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_constant_torque(impl func(ptr unsafe.Pointer) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _set_sleep_state(impl func(ptr unsafe.Pointer, enabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var enabled = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, enabled)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _is_sleeping(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_contact_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_contact_local_position(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_contact_local_normal(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_contact_impulse(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_contact_local_shape(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_contact_local_velocity_at_position(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_contact_collider(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_contact_collider_position(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_contact_collider_id(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_contact_collider_object(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Object, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_contact_collider_shape(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_contact_collider_velocity_at_position(impl func(ptr unsafe.Pointer, contact_idx gd.Int) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var contact_idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, contact_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_step(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _integrate_forces(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (PhysicsDirectBodyState3DExtension) _get_space_state(impl func(ptr unsafe.Pointer) PhysicsDirectSpaceState3D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (self PhysicsDirectBodyState3DExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_get_total_gravity": return reflect.ValueOf(self._get_total_gravity);
	case "_get_total_linear_damp": return reflect.ValueOf(self._get_total_linear_damp);
	case "_get_total_angular_damp": return reflect.ValueOf(self._get_total_angular_damp);
	case "_get_center_of_mass": return reflect.ValueOf(self._get_center_of_mass);
	case "_get_center_of_mass_local": return reflect.ValueOf(self._get_center_of_mass_local);
	case "_get_principal_inertia_axes": return reflect.ValueOf(self._get_principal_inertia_axes);
	case "_get_inverse_mass": return reflect.ValueOf(self._get_inverse_mass);
	case "_get_inverse_inertia": return reflect.ValueOf(self._get_inverse_inertia);
	case "_get_inverse_inertia_tensor": return reflect.ValueOf(self._get_inverse_inertia_tensor);
	case "_set_linear_velocity": return reflect.ValueOf(self._set_linear_velocity);
	case "_get_linear_velocity": return reflect.ValueOf(self._get_linear_velocity);
	case "_set_angular_velocity": return reflect.ValueOf(self._set_angular_velocity);
	case "_get_angular_velocity": return reflect.ValueOf(self._get_angular_velocity);
	case "_set_transform": return reflect.ValueOf(self._set_transform);
	case "_get_transform": return reflect.ValueOf(self._get_transform);
	case "_get_velocity_at_local_position": return reflect.ValueOf(self._get_velocity_at_local_position);
	case "_apply_central_impulse": return reflect.ValueOf(self._apply_central_impulse);
	case "_apply_impulse": return reflect.ValueOf(self._apply_impulse);
	case "_apply_torque_impulse": return reflect.ValueOf(self._apply_torque_impulse);
	case "_apply_central_force": return reflect.ValueOf(self._apply_central_force);
	case "_apply_force": return reflect.ValueOf(self._apply_force);
	case "_apply_torque": return reflect.ValueOf(self._apply_torque);
	case "_add_constant_central_force": return reflect.ValueOf(self._add_constant_central_force);
	case "_add_constant_force": return reflect.ValueOf(self._add_constant_force);
	case "_add_constant_torque": return reflect.ValueOf(self._add_constant_torque);
	case "_set_constant_force": return reflect.ValueOf(self._set_constant_force);
	case "_get_constant_force": return reflect.ValueOf(self._get_constant_force);
	case "_set_constant_torque": return reflect.ValueOf(self._set_constant_torque);
	case "_get_constant_torque": return reflect.ValueOf(self._get_constant_torque);
	case "_set_sleep_state": return reflect.ValueOf(self._set_sleep_state);
	case "_is_sleeping": return reflect.ValueOf(self._is_sleeping);
	case "_get_contact_count": return reflect.ValueOf(self._get_contact_count);
	case "_get_contact_local_position": return reflect.ValueOf(self._get_contact_local_position);
	case "_get_contact_local_normal": return reflect.ValueOf(self._get_contact_local_normal);
	case "_get_contact_impulse": return reflect.ValueOf(self._get_contact_impulse);
	case "_get_contact_local_shape": return reflect.ValueOf(self._get_contact_local_shape);
	case "_get_contact_local_velocity_at_position": return reflect.ValueOf(self._get_contact_local_velocity_at_position);
	case "_get_contact_collider": return reflect.ValueOf(self._get_contact_collider);
	case "_get_contact_collider_position": return reflect.ValueOf(self._get_contact_collider_position);
	case "_get_contact_collider_id": return reflect.ValueOf(self._get_contact_collider_id);
	case "_get_contact_collider_object": return reflect.ValueOf(self._get_contact_collider_object);
	case "_get_contact_collider_shape": return reflect.ValueOf(self._get_contact_collider_shape);
	case "_get_contact_collider_velocity_at_position": return reflect.ValueOf(self._get_contact_collider_velocity_at_position);
	case "_get_step": return reflect.ValueOf(self._get_step);
	case "_integrate_forces": return reflect.ValueOf(self._integrate_forces);
	case "_get_space_state": return reflect.ValueOf(self._get_space_state);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsDirectSpaceState2D struct {_ [0]*PhysicsDirectSpaceState2D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsDirectSpaceState2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsDirectSpaceState2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsDirectSpaceState2D) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectSpaceState2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectSpaceState2D) AsPhysicsDirectSpaceState2D() [1]PhysicsDirectSpaceState2D { return [1]PhysicsDirectSpaceState2D{self} }

func (self PhysicsDirectSpaceState2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsDirectSpaceState2DExtension struct {_ [0]*PhysicsDirectSpaceState2DExtension; ptr gd.Pointer}

//go:nosplit
func (self PhysicsDirectSpaceState2DExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsDirectSpaceState2DExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsDirectSpaceState2DExtension) Super() [1]PhysicsDirectSpaceState2D { return *(*[1]PhysicsDirectSpaceState2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectSpaceState2DExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectSpaceState2DExtension) AsPhysicsDirectSpaceState2DExtension() [1]PhysicsDirectSpaceState2DExtension { return [1]PhysicsDirectSpaceState2DExtension{self} }


//go:nosplit
func (self PhysicsDirectSpaceState2DExtension) AsPhysicsDirectSpaceState2D() [1]PhysicsDirectSpaceState2D { return *(*[1]PhysicsDirectSpaceState2D)(unsafe.Pointer(&self)) }

func (PhysicsDirectSpaceState2DExtension) _intersect_ray(impl func(ptr unsafe.Pointer, from gd.Vector2, to gd.Vector2, collision_mask gd.Int, collide_with_bodies bool, collide_with_areas bool, hit_from_inside bool, result *PhysicsServer2DExtensionRayResult) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var from = gd.UnsafeGet[gd.Vector2](p_args,0)
		var to = gd.UnsafeGet[gd.Vector2](p_args,1)
		var collision_mask = gd.UnsafeGet[gd.Int](p_args,2)
		var collide_with_bodies = gd.UnsafeGet[bool](p_args,3)
		var collide_with_areas = gd.UnsafeGet[bool](p_args,4)
		var hit_from_inside = gd.UnsafeGet[bool](p_args,5)
		var result = gd.UnsafeGet[*PhysicsServer2DExtensionRayResult](p_args,6)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, from, to, collision_mask, collide_with_bodies, collide_with_areas, hit_from_inside, result)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectSpaceState2DExtension) _intersect_point(impl func(ptr unsafe.Pointer, position gd.Vector2, canvas_instance_id gd.Int, collision_mask gd.Int, collide_with_bodies bool, collide_with_areas bool, results *PhysicsServer2DExtensionShapeResult, max_results gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var position = gd.UnsafeGet[gd.Vector2](p_args,0)
		var canvas_instance_id = gd.UnsafeGet[gd.Int](p_args,1)
		var collision_mask = gd.UnsafeGet[gd.Int](p_args,2)
		var collide_with_bodies = gd.UnsafeGet[bool](p_args,3)
		var collide_with_areas = gd.UnsafeGet[bool](p_args,4)
		var results = gd.UnsafeGet[*PhysicsServer2DExtensionShapeResult](p_args,5)
		var max_results = gd.UnsafeGet[gd.Int](p_args,6)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, position, canvas_instance_id, collision_mask, collide_with_bodies, collide_with_areas, results, max_results)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectSpaceState2DExtension) _intersect_shape(impl func(ptr unsafe.Pointer, shape_rid gd.RID, transform gd.Transform2D, motion gd.Vector2, margin gd.Float, collision_mask gd.Int, collide_with_bodies bool, collide_with_areas bool, result *PhysicsServer2DExtensionShapeResult, max_results gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var transform = gd.UnsafeGet[gd.Transform2D](p_args,1)
		var motion = gd.UnsafeGet[gd.Vector2](p_args,2)
		var margin = gd.UnsafeGet[gd.Float](p_args,3)
		var collision_mask = gd.UnsafeGet[gd.Int](p_args,4)
		var collide_with_bodies = gd.UnsafeGet[bool](p_args,5)
		var collide_with_areas = gd.UnsafeGet[bool](p_args,6)
		var result = gd.UnsafeGet[*PhysicsServer2DExtensionShapeResult](p_args,7)
		var max_results = gd.UnsafeGet[gd.Int](p_args,8)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape_rid, transform, motion, margin, collision_mask, collide_with_bodies, collide_with_areas, result, max_results)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectSpaceState2DExtension) _cast_motion(impl func(ptr unsafe.Pointer, shape_rid gd.RID, transform gd.Transform2D, motion gd.Vector2, margin gd.Float, collision_mask gd.Int, collide_with_bodies bool, collide_with_areas bool, closest_safe *float64, closest_unsafe *float64) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var transform = gd.UnsafeGet[gd.Transform2D](p_args,1)
		var motion = gd.UnsafeGet[gd.Vector2](p_args,2)
		var margin = gd.UnsafeGet[gd.Float](p_args,3)
		var collision_mask = gd.UnsafeGet[gd.Int](p_args,4)
		var collide_with_bodies = gd.UnsafeGet[bool](p_args,5)
		var collide_with_areas = gd.UnsafeGet[bool](p_args,6)
		var closest_safe = gd.UnsafeGet[*float64](p_args,7)
		var closest_unsafe = gd.UnsafeGet[*float64](p_args,8)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape_rid, transform, motion, margin, collision_mask, collide_with_bodies, collide_with_areas, closest_safe, closest_unsafe)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectSpaceState2DExtension) _collide_shape(impl func(ptr unsafe.Pointer, shape_rid gd.RID, transform gd.Transform2D, motion gd.Vector2, margin gd.Float, collision_mask gd.Int, collide_with_bodies bool, collide_with_areas bool, results unsafe.Pointer, max_results gd.Int, result_count *int32) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var transform = gd.UnsafeGet[gd.Transform2D](p_args,1)
		var motion = gd.UnsafeGet[gd.Vector2](p_args,2)
		var margin = gd.UnsafeGet[gd.Float](p_args,3)
		var collision_mask = gd.UnsafeGet[gd.Int](p_args,4)
		var collide_with_bodies = gd.UnsafeGet[bool](p_args,5)
		var collide_with_areas = gd.UnsafeGet[bool](p_args,6)
		var results = gd.UnsafeGet[unsafe.Pointer](p_args,7)
		var max_results = gd.UnsafeGet[gd.Int](p_args,8)
		var result_count = gd.UnsafeGet[*int32](p_args,9)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape_rid, transform, motion, margin, collision_mask, collide_with_bodies, collide_with_areas, results, max_results, result_count)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectSpaceState2DExtension) _rest_info(impl func(ptr unsafe.Pointer, shape_rid gd.RID, transform gd.Transform2D, motion gd.Vector2, margin gd.Float, collision_mask gd.Int, collide_with_bodies bool, collide_with_areas bool, rest_info *PhysicsServer2DExtensionShapeRestInfo) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var transform = gd.UnsafeGet[gd.Transform2D](p_args,1)
		var motion = gd.UnsafeGet[gd.Vector2](p_args,2)
		var margin = gd.UnsafeGet[gd.Float](p_args,3)
		var collision_mask = gd.UnsafeGet[gd.Int](p_args,4)
		var collide_with_bodies = gd.UnsafeGet[bool](p_args,5)
		var collide_with_areas = gd.UnsafeGet[bool](p_args,6)
		var rest_info = gd.UnsafeGet[*PhysicsServer2DExtensionShapeRestInfo](p_args,7)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape_rid, transform, motion, margin, collision_mask, collide_with_bodies, collide_with_areas, rest_info)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self PhysicsDirectSpaceState2DExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_intersect_ray": return reflect.ValueOf(self._intersect_ray);
	case "_intersect_point": return reflect.ValueOf(self._intersect_point);
	case "_intersect_shape": return reflect.ValueOf(self._intersect_shape);
	case "_cast_motion": return reflect.ValueOf(self._cast_motion);
	case "_collide_shape": return reflect.ValueOf(self._collide_shape);
	case "_rest_info": return reflect.ValueOf(self._rest_info);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsDirectSpaceState3D struct {_ [0]*PhysicsDirectSpaceState3D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsDirectSpaceState3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsDirectSpaceState3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsDirectSpaceState3D) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectSpaceState3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectSpaceState3D) AsPhysicsDirectSpaceState3D() [1]PhysicsDirectSpaceState3D { return [1]PhysicsDirectSpaceState3D{self} }

func (self PhysicsDirectSpaceState3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsDirectSpaceState3DExtension struct {_ [0]*PhysicsDirectSpaceState3DExtension; ptr gd.Pointer}

//go:nosplit
func (self PhysicsDirectSpaceState3DExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsDirectSpaceState3DExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsDirectSpaceState3DExtension) Super() [1]PhysicsDirectSpaceState3D { return *(*[1]PhysicsDirectSpaceState3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectSpaceState3DExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsDirectSpaceState3DExtension) AsPhysicsDirectSpaceState3DExtension() [1]PhysicsDirectSpaceState3DExtension { return [1]PhysicsDirectSpaceState3DExtension{self} }


//go:nosplit
func (self PhysicsDirectSpaceState3DExtension) AsPhysicsDirectSpaceState3D() [1]PhysicsDirectSpaceState3D { return *(*[1]PhysicsDirectSpaceState3D)(unsafe.Pointer(&self)) }

func (PhysicsDirectSpaceState3DExtension) _intersect_ray(impl func(ptr unsafe.Pointer, from gd.Vector3, to gd.Vector3, collision_mask gd.Int, collide_with_bodies bool, collide_with_areas bool, hit_from_inside bool, hit_back_faces bool, pick_ray bool, result *PhysicsServer3DExtensionRayResult) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var from = gd.UnsafeGet[gd.Vector3](p_args,0)
		var to = gd.UnsafeGet[gd.Vector3](p_args,1)
		var collision_mask = gd.UnsafeGet[gd.Int](p_args,2)
		var collide_with_bodies = gd.UnsafeGet[bool](p_args,3)
		var collide_with_areas = gd.UnsafeGet[bool](p_args,4)
		var hit_from_inside = gd.UnsafeGet[bool](p_args,5)
		var hit_back_faces = gd.UnsafeGet[bool](p_args,6)
		var pick_ray = gd.UnsafeGet[bool](p_args,7)
		var result = gd.UnsafeGet[*PhysicsServer3DExtensionRayResult](p_args,8)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, from, to, collision_mask, collide_with_bodies, collide_with_areas, hit_from_inside, hit_back_faces, pick_ray, result)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectSpaceState3DExtension) _intersect_point(impl func(ptr unsafe.Pointer, position gd.Vector3, collision_mask gd.Int, collide_with_bodies bool, collide_with_areas bool, results *PhysicsServer3DExtensionShapeResult, max_results gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var position = gd.UnsafeGet[gd.Vector3](p_args,0)
		var collision_mask = gd.UnsafeGet[gd.Int](p_args,1)
		var collide_with_bodies = gd.UnsafeGet[bool](p_args,2)
		var collide_with_areas = gd.UnsafeGet[bool](p_args,3)
		var results = gd.UnsafeGet[*PhysicsServer3DExtensionShapeResult](p_args,4)
		var max_results = gd.UnsafeGet[gd.Int](p_args,5)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, position, collision_mask, collide_with_bodies, collide_with_areas, results, max_results)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectSpaceState3DExtension) _intersect_shape(impl func(ptr unsafe.Pointer, shape_rid gd.RID, transform gd.Transform3D, motion gd.Vector3, margin gd.Float, collision_mask gd.Int, collide_with_bodies bool, collide_with_areas bool, result_count *PhysicsServer3DExtensionShapeResult, max_results gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var transform = gd.UnsafeGet[gd.Transform3D](p_args,1)
		var motion = gd.UnsafeGet[gd.Vector3](p_args,2)
		var margin = gd.UnsafeGet[gd.Float](p_args,3)
		var collision_mask = gd.UnsafeGet[gd.Int](p_args,4)
		var collide_with_bodies = gd.UnsafeGet[bool](p_args,5)
		var collide_with_areas = gd.UnsafeGet[bool](p_args,6)
		var result_count = gd.UnsafeGet[*PhysicsServer3DExtensionShapeResult](p_args,7)
		var max_results = gd.UnsafeGet[gd.Int](p_args,8)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape_rid, transform, motion, margin, collision_mask, collide_with_bodies, collide_with_areas, result_count, max_results)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectSpaceState3DExtension) _cast_motion(impl func(ptr unsafe.Pointer, shape_rid gd.RID, transform gd.Transform3D, motion gd.Vector3, margin gd.Float, collision_mask gd.Int, collide_with_bodies bool, collide_with_areas bool, closest_safe *float64, closest_unsafe *float64, info *PhysicsServer3DExtensionShapeRestInfo) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var transform = gd.UnsafeGet[gd.Transform3D](p_args,1)
		var motion = gd.UnsafeGet[gd.Vector3](p_args,2)
		var margin = gd.UnsafeGet[gd.Float](p_args,3)
		var collision_mask = gd.UnsafeGet[gd.Int](p_args,4)
		var collide_with_bodies = gd.UnsafeGet[bool](p_args,5)
		var collide_with_areas = gd.UnsafeGet[bool](p_args,6)
		var closest_safe = gd.UnsafeGet[*float64](p_args,7)
		var closest_unsafe = gd.UnsafeGet[*float64](p_args,8)
		var info = gd.UnsafeGet[*PhysicsServer3DExtensionShapeRestInfo](p_args,9)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape_rid, transform, motion, margin, collision_mask, collide_with_bodies, collide_with_areas, closest_safe, closest_unsafe, info)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectSpaceState3DExtension) _collide_shape(impl func(ptr unsafe.Pointer, shape_rid gd.RID, transform gd.Transform3D, motion gd.Vector3, margin gd.Float, collision_mask gd.Int, collide_with_bodies bool, collide_with_areas bool, results unsafe.Pointer, max_results gd.Int, result_count *int32) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var transform = gd.UnsafeGet[gd.Transform3D](p_args,1)
		var motion = gd.UnsafeGet[gd.Vector3](p_args,2)
		var margin = gd.UnsafeGet[gd.Float](p_args,3)
		var collision_mask = gd.UnsafeGet[gd.Int](p_args,4)
		var collide_with_bodies = gd.UnsafeGet[bool](p_args,5)
		var collide_with_areas = gd.UnsafeGet[bool](p_args,6)
		var results = gd.UnsafeGet[unsafe.Pointer](p_args,7)
		var max_results = gd.UnsafeGet[gd.Int](p_args,8)
		var result_count = gd.UnsafeGet[*int32](p_args,9)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape_rid, transform, motion, margin, collision_mask, collide_with_bodies, collide_with_areas, results, max_results, result_count)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectSpaceState3DExtension) _rest_info(impl func(ptr unsafe.Pointer, shape_rid gd.RID, transform gd.Transform3D, motion gd.Vector3, margin gd.Float, collision_mask gd.Int, collide_with_bodies bool, collide_with_areas bool, rest_info *PhysicsServer3DExtensionShapeRestInfo) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var transform = gd.UnsafeGet[gd.Transform3D](p_args,1)
		var motion = gd.UnsafeGet[gd.Vector3](p_args,2)
		var margin = gd.UnsafeGet[gd.Float](p_args,3)
		var collision_mask = gd.UnsafeGet[gd.Int](p_args,4)
		var collide_with_bodies = gd.UnsafeGet[bool](p_args,5)
		var collide_with_areas = gd.UnsafeGet[bool](p_args,6)
		var rest_info = gd.UnsafeGet[*PhysicsServer3DExtensionShapeRestInfo](p_args,7)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape_rid, transform, motion, margin, collision_mask, collide_with_bodies, collide_with_areas, rest_info)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsDirectSpaceState3DExtension) _get_closest_point_to_object_volume(impl func(ptr unsafe.Pointer, object gd.RID, point gd.Vector3) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var object = gd.UnsafeGet[gd.RID](p_args,0)
		var point = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, object, point)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self PhysicsDirectSpaceState3DExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_intersect_ray": return reflect.ValueOf(self._intersect_ray);
	case "_intersect_point": return reflect.ValueOf(self._intersect_point);
	case "_intersect_shape": return reflect.ValueOf(self._intersect_shape);
	case "_cast_motion": return reflect.ValueOf(self._cast_motion);
	case "_collide_shape": return reflect.ValueOf(self._collide_shape);
	case "_rest_info": return reflect.ValueOf(self._rest_info);
	case "_get_closest_point_to_object_volume": return reflect.ValueOf(self._get_closest_point_to_object_volume);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsMaterial struct {_ [0]*PhysicsMaterial; ptr gd.Pointer}

//go:nosplit
func (self PhysicsMaterial) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsMaterial) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsMaterial) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsMaterial) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsMaterial) AsPhysicsMaterial() [1]PhysicsMaterial { return [1]PhysicsMaterial{self} }


//go:nosplit
func (self PhysicsMaterial) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsMaterial) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PhysicsMaterial) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsPointQueryParameters2D struct {_ [0]*PhysicsPointQueryParameters2D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsPointQueryParameters2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsPointQueryParameters2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsPointQueryParameters2D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsPointQueryParameters2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsPointQueryParameters2D) AsPhysicsPointQueryParameters2D() [1]PhysicsPointQueryParameters2D { return [1]PhysicsPointQueryParameters2D{self} }


//go:nosplit
func (self PhysicsPointQueryParameters2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PhysicsPointQueryParameters2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsPointQueryParameters3D struct {_ [0]*PhysicsPointQueryParameters3D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsPointQueryParameters3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsPointQueryParameters3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsPointQueryParameters3D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsPointQueryParameters3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsPointQueryParameters3D) AsPhysicsPointQueryParameters3D() [1]PhysicsPointQueryParameters3D { return [1]PhysicsPointQueryParameters3D{self} }


//go:nosplit
func (self PhysicsPointQueryParameters3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PhysicsPointQueryParameters3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsRayQueryParameters2D struct {_ [0]*PhysicsRayQueryParameters2D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsRayQueryParameters2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsRayQueryParameters2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsRayQueryParameters2D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsRayQueryParameters2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsRayQueryParameters2D) AsPhysicsRayQueryParameters2D() [1]PhysicsRayQueryParameters2D { return [1]PhysicsRayQueryParameters2D{self} }


//go:nosplit
func (self PhysicsRayQueryParameters2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PhysicsRayQueryParameters2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsRayQueryParameters3D struct {_ [0]*PhysicsRayQueryParameters3D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsRayQueryParameters3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsRayQueryParameters3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsRayQueryParameters3D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsRayQueryParameters3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsRayQueryParameters3D) AsPhysicsRayQueryParameters3D() [1]PhysicsRayQueryParameters3D { return [1]PhysicsRayQueryParameters3D{self} }


//go:nosplit
func (self PhysicsRayQueryParameters3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PhysicsRayQueryParameters3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type PhysicsServer2DSpaceParameter int64

type PhysicsServer2DShapeType int64

type PhysicsServer2DAreaParameter int64

type PhysicsServer2DAreaSpaceOverrideMode int64

type PhysicsServer2DBodyMode int64

type PhysicsServer2DBodyParameter int64

type PhysicsServer2DBodyDampMode int64

type PhysicsServer2DBodyState int64

type PhysicsServer2DJointType int64

type PhysicsServer2DJointParam int64

type PhysicsServer2DPinJointParam int64

type PhysicsServer2DPinJointFlag int64

type PhysicsServer2DDampedSpringParam int64

type PhysicsServer2DCCDMode int64

type PhysicsServer2DAreaBodyStatus int64

type PhysicsServer2DProcessInfo int64
type PhysicsServer2D struct {_ [0]*PhysicsServer2D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsServer2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsServer2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsServer2D) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsServer2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsServer2D) AsPhysicsServer2D() [1]PhysicsServer2D { return [1]PhysicsServer2D{self} }

//go:nosplit

func (self PhysicsServer2D) IsSingleton() {}

func (self PhysicsServer2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsServer2DExtension struct {_ [0]*PhysicsServer2DExtension; ptr gd.Pointer}

//go:nosplit
func (self PhysicsServer2DExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsServer2DExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsServer2DExtension) Super() [1]PhysicsServer2D { return *(*[1]PhysicsServer2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsServer2DExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsServer2DExtension) AsPhysicsServer2DExtension() [1]PhysicsServer2DExtension { return [1]PhysicsServer2DExtension{self} }


//go:nosplit
func (self PhysicsServer2DExtension) AsPhysicsServer2D() [1]PhysicsServer2D { return *(*[1]PhysicsServer2D)(unsafe.Pointer(&self)) }

/*
Overridable version of [method PhysicsServer2D.world_boundary_shape_create].
*/
func (PhysicsServer2DExtension) _world_boundary_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.separation_ray_shape_create].
*/
func (PhysicsServer2DExtension) _separation_ray_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.segment_shape_create].
*/
func (PhysicsServer2DExtension) _segment_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.circle_shape_create].
*/
func (PhysicsServer2DExtension) _circle_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.rectangle_shape_create].
*/
func (PhysicsServer2DExtension) _rectangle_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.capsule_shape_create].
*/
func (PhysicsServer2DExtension) _capsule_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.convex_polygon_shape_create].
*/
func (PhysicsServer2DExtension) _convex_polygon_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.concave_polygon_shape_create].
*/
func (PhysicsServer2DExtension) _concave_polygon_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.shape_set_data].
*/
func (PhysicsServer2DExtension) _shape_set_data(impl func(ptr unsafe.Pointer, shape gd.RID, data gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape = gd.UnsafeGet[gd.RID](p_args,0)
		var data = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shape, data)
		ctx.End()
	}
}

/*
Should set the custom solver bias for the given [param shape]. It defines how much bodies are forced to separate on contact.
Overridable version of [PhysicsServer2D]'s internal [code]shape_get_custom_solver_bias[/code] method. Corresponds to [member Shape2D.custom_solver_bias].
*/
func (PhysicsServer2DExtension) _shape_set_custom_solver_bias(impl func(ptr unsafe.Pointer, shape gd.RID, bias gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape = gd.UnsafeGet[gd.RID](p_args,0)
		var bias = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shape, bias)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.shape_get_type].
*/
func (PhysicsServer2DExtension) _shape_get_type(impl func(ptr unsafe.Pointer, shape gd.RID) PhysicsServer2DShapeType, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.shape_get_data].
*/
func (PhysicsServer2DExtension) _shape_get_data(impl func(ptr unsafe.Pointer, shape gd.RID) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Should return the custom solver bias of the given [param shape], which defines how much bodies are forced to separate on contact when this shape is involved.
Overridable version of [PhysicsServer2D]'s internal [code]shape_get_custom_solver_bias[/code] method. Corresponds to [member Shape2D.custom_solver_bias].
*/
func (PhysicsServer2DExtension) _shape_get_custom_solver_bias(impl func(ptr unsafe.Pointer, shape gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Given two shapes and their parameters, should return [code]true[/code] if a collision between the two would occur, with additional details passed in [param results].
Overridable version of [PhysicsServer2D]'s internal [code]shape_collide[/code] method. Corresponds to [method PhysicsDirectSpaceState2D.collide_shape].
*/
func (PhysicsServer2DExtension) _shape_collide(impl func(ptr unsafe.Pointer, shape_A gd.RID, xform_A gd.Transform2D, motion_A gd.Vector2, shape_B gd.RID, xform_B gd.Transform2D, motion_B gd.Vector2, results unsafe.Pointer, result_max gd.Int, result_count *int32) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape_A = gd.UnsafeGet[gd.RID](p_args,0)
		var xform_A = gd.UnsafeGet[gd.Transform2D](p_args,1)
		var motion_A = gd.UnsafeGet[gd.Vector2](p_args,2)
		var shape_B = gd.UnsafeGet[gd.RID](p_args,3)
		var xform_B = gd.UnsafeGet[gd.Transform2D](p_args,4)
		var motion_B = gd.UnsafeGet[gd.Vector2](p_args,5)
		var results = gd.UnsafeGet[unsafe.Pointer](p_args,6)
		var result_max = gd.UnsafeGet[gd.Int](p_args,7)
		var result_count = gd.UnsafeGet[*int32](p_args,8)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape_A, xform_A, motion_A, shape_B, xform_B, motion_B, results, result_max, result_count)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.space_create].
*/
func (PhysicsServer2DExtension) _space_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.space_set_active].
*/
func (PhysicsServer2DExtension) _space_set_active(impl func(ptr unsafe.Pointer, space gd.RID, active bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		var active = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, space, active)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.space_is_active].
*/
func (PhysicsServer2DExtension) _space_is_active(impl func(ptr unsafe.Pointer, space gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, space)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.space_set_param].
*/
func (PhysicsServer2DExtension) _space_set_param(impl func(ptr unsafe.Pointer, space gd.RID, param PhysicsServer2DSpaceParameter, value gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer2DSpaceParameter](p_args,1)
		var value = gd.UnsafeGet[gd.Float](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, space, param, value)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.space_get_param].
*/
func (PhysicsServer2DExtension) _space_get_param(impl func(ptr unsafe.Pointer, space gd.RID, param PhysicsServer2DSpaceParameter) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer2DSpaceParameter](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, space, param)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.space_get_direct_state].
*/
func (PhysicsServer2DExtension) _space_get_direct_state(impl func(ptr unsafe.Pointer, space gd.RID) PhysicsDirectSpaceState2D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, space)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Used internally to allow the given [param space] to store contact points, up to [param max_contacts]. This is automatically set for the main [World2D]'s space when [member SceneTree.debug_collisions_hint] is [code]true[/code], or by checking "Visible Collision Shapes" in the editor. Only works in debug builds.
Overridable version of [PhysicsServer2D]'s internal [code]space_set_debug_contacts[/code] method.
*/
func (PhysicsServer2DExtension) _space_set_debug_contacts(impl func(ptr unsafe.Pointer, space gd.RID, max_contacts gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		var max_contacts = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, space, max_contacts)
		ctx.End()
	}
}

/*
Should return the positions of all contacts that have occurred during the last physics step in the given [param space]. See also [method _space_get_contact_count] and [method _space_set_debug_contacts].
Overridable version of [PhysicsServer2D]'s internal [code]space_get_contacts[/code] method.
*/
func (PhysicsServer2DExtension) _space_get_contacts(impl func(ptr unsafe.Pointer, space gd.RID) gd.PackedVector2Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, space)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Should return how many contacts have occurred during the last physics step in the given [param space]. See also [method _space_get_contacts] and [method _space_set_debug_contacts].
Overridable version of [PhysicsServer2D]'s internal [code]space_get_contact_count[/code] method.
*/
func (PhysicsServer2DExtension) _space_get_contact_count(impl func(ptr unsafe.Pointer, space gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, space)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_create].
*/
func (PhysicsServer2DExtension) _area_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_set_space].
*/
func (PhysicsServer2DExtension) _area_set_space(impl func(ptr unsafe.Pointer, area gd.RID, space gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var space = gd.UnsafeGet[gd.RID](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, space)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_get_space].
*/
func (PhysicsServer2DExtension) _area_get_space(impl func(ptr unsafe.Pointer, area gd.RID) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_add_shape].
*/
func (PhysicsServer2DExtension) _area_add_shape(impl func(ptr unsafe.Pointer, area gd.RID, shape gd.RID, transform gd.Transform2D, disabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var shape = gd.UnsafeGet[gd.RID](p_args,1)
		var transform = gd.UnsafeGet[gd.Transform2D](p_args,2)
		var disabled = gd.UnsafeGet[bool](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, shape, transform, disabled)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_set_shape].
*/
func (PhysicsServer2DExtension) _area_set_shape(impl func(ptr unsafe.Pointer, area gd.RID, shape_idx gd.Int, shape gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		var shape = gd.UnsafeGet[gd.RID](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, shape_idx, shape)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_set_shape_transform].
*/
func (PhysicsServer2DExtension) _area_set_shape_transform(impl func(ptr unsafe.Pointer, area gd.RID, shape_idx gd.Int, transform gd.Transform2D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		var transform = gd.UnsafeGet[gd.Transform2D](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, shape_idx, transform)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_set_shape_disabled].
*/
func (PhysicsServer2DExtension) _area_set_shape_disabled(impl func(ptr unsafe.Pointer, area gd.RID, shape_idx gd.Int, disabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		var disabled = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, shape_idx, disabled)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_get_shape_count].
*/
func (PhysicsServer2DExtension) _area_get_shape_count(impl func(ptr unsafe.Pointer, area gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_get_shape].
*/
func (PhysicsServer2DExtension) _area_get_shape(impl func(ptr unsafe.Pointer, area gd.RID, shape_idx gd.Int) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area, shape_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_get_shape_transform].
*/
func (PhysicsServer2DExtension) _area_get_shape_transform(impl func(ptr unsafe.Pointer, area gd.RID, shape_idx gd.Int) gd.Transform2D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area, shape_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_remove_shape].
*/
func (PhysicsServer2DExtension) _area_remove_shape(impl func(ptr unsafe.Pointer, area gd.RID, shape_idx gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, shape_idx)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_clear_shapes].
*/
func (PhysicsServer2DExtension) _area_clear_shapes(impl func(ptr unsafe.Pointer, area gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_attach_object_instance_id].
*/
func (PhysicsServer2DExtension) _area_attach_object_instance_id(impl func(ptr unsafe.Pointer, area gd.RID, id gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var id = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, id)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_get_object_instance_id].
*/
func (PhysicsServer2DExtension) _area_get_object_instance_id(impl func(ptr unsafe.Pointer, area gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_attach_canvas_instance_id].
*/
func (PhysicsServer2DExtension) _area_attach_canvas_instance_id(impl func(ptr unsafe.Pointer, area gd.RID, id gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var id = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, id)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_get_canvas_instance_id].
*/
func (PhysicsServer2DExtension) _area_get_canvas_instance_id(impl func(ptr unsafe.Pointer, area gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_set_param].
*/
func (PhysicsServer2DExtension) _area_set_param(impl func(ptr unsafe.Pointer, area gd.RID, param PhysicsServer2DAreaParameter, value gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer2DAreaParameter](p_args,1)
		var value = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, param, value)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_set_transform].
*/
func (PhysicsServer2DExtension) _area_set_transform(impl func(ptr unsafe.Pointer, area gd.RID, transform gd.Transform2D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var transform = gd.UnsafeGet[gd.Transform2D](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, transform)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_get_param].
*/
func (PhysicsServer2DExtension) _area_get_param(impl func(ptr unsafe.Pointer, area gd.RID, param PhysicsServer2DAreaParameter) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer2DAreaParameter](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area, param)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_get_transform].
*/
func (PhysicsServer2DExtension) _area_get_transform(impl func(ptr unsafe.Pointer, area gd.RID) gd.Transform2D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_set_collision_layer].
*/
func (PhysicsServer2DExtension) _area_set_collision_layer(impl func(ptr unsafe.Pointer, area gd.RID, layer gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var layer = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, layer)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_get_collision_layer].
*/
func (PhysicsServer2DExtension) _area_get_collision_layer(impl func(ptr unsafe.Pointer, area gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_set_collision_mask].
*/
func (PhysicsServer2DExtension) _area_set_collision_mask(impl func(ptr unsafe.Pointer, area gd.RID, mask gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var mask = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, mask)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_get_collision_mask].
*/
func (PhysicsServer2DExtension) _area_get_collision_mask(impl func(ptr unsafe.Pointer, area gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_set_monitorable].
*/
func (PhysicsServer2DExtension) _area_set_monitorable(impl func(ptr unsafe.Pointer, area gd.RID, monitorable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var monitorable = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, monitorable)
		ctx.End()
	}
}

/*
If set to [code]true[/code], allows the area with the given [RID] to detect mouse inputs when the mouse cursor is hovering on it.
Overridable version of [PhysicsServer2D]'s internal [code]area_set_pickable[/code] method. Corresponds to [member CollisionObject2D.input_pickable].
*/
func (PhysicsServer2DExtension) _area_set_pickable(impl func(ptr unsafe.Pointer, area gd.RID, pickable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var pickable = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, pickable)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_set_monitor_callback].
*/
func (PhysicsServer2DExtension) _area_set_monitor_callback(impl func(ptr unsafe.Pointer, area gd.RID, callback gd.Callable) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var callback = mmm.Let[gd.Callable](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, callback)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.area_set_area_monitor_callback].
*/
func (PhysicsServer2DExtension) _area_set_area_monitor_callback(impl func(ptr unsafe.Pointer, area gd.RID, callback gd.Callable) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var callback = mmm.Let[gd.Callable](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, callback)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_create].
*/
func (PhysicsServer2DExtension) _body_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_space].
*/
func (PhysicsServer2DExtension) _body_set_space(impl func(ptr unsafe.Pointer, body gd.RID, space gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var space = gd.UnsafeGet[gd.RID](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, space)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_space].
*/
func (PhysicsServer2DExtension) _body_get_space(impl func(ptr unsafe.Pointer, body gd.RID) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_mode].
*/
func (PhysicsServer2DExtension) _body_set_mode(impl func(ptr unsafe.Pointer, body gd.RID, mode PhysicsServer2DBodyMode) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var mode = gd.UnsafeGet[PhysicsServer2DBodyMode](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, mode)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_mode].
*/
func (PhysicsServer2DExtension) _body_get_mode(impl func(ptr unsafe.Pointer, body gd.RID) PhysicsServer2DBodyMode, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_add_shape].
*/
func (PhysicsServer2DExtension) _body_add_shape(impl func(ptr unsafe.Pointer, body gd.RID, shape gd.RID, transform gd.Transform2D, disabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape = gd.UnsafeGet[gd.RID](p_args,1)
		var transform = gd.UnsafeGet[gd.Transform2D](p_args,2)
		var disabled = gd.UnsafeGet[bool](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, shape, transform, disabled)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_shape].
*/
func (PhysicsServer2DExtension) _body_set_shape(impl func(ptr unsafe.Pointer, body gd.RID, shape_idx gd.Int, shape gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		var shape = gd.UnsafeGet[gd.RID](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, shape_idx, shape)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_shape_transform].
*/
func (PhysicsServer2DExtension) _body_set_shape_transform(impl func(ptr unsafe.Pointer, body gd.RID, shape_idx gd.Int, transform gd.Transform2D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		var transform = gd.UnsafeGet[gd.Transform2D](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, shape_idx, transform)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_shape_count].
*/
func (PhysicsServer2DExtension) _body_get_shape_count(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_shape].
*/
func (PhysicsServer2DExtension) _body_get_shape(impl func(ptr unsafe.Pointer, body gd.RID, shape_idx gd.Int) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, shape_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_shape_transform].
*/
func (PhysicsServer2DExtension) _body_get_shape_transform(impl func(ptr unsafe.Pointer, body gd.RID, shape_idx gd.Int) gd.Transform2D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, shape_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_shape_disabled].
*/
func (PhysicsServer2DExtension) _body_set_shape_disabled(impl func(ptr unsafe.Pointer, body gd.RID, shape_idx gd.Int, disabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		var disabled = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, shape_idx, disabled)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_shape_as_one_way_collision].
*/
func (PhysicsServer2DExtension) _body_set_shape_as_one_way_collision(impl func(ptr unsafe.Pointer, body gd.RID, shape_idx gd.Int, enable bool, margin gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		var enable = gd.UnsafeGet[bool](p_args,2)
		var margin = gd.UnsafeGet[gd.Float](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, shape_idx, enable, margin)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_remove_shape].
*/
func (PhysicsServer2DExtension) _body_remove_shape(impl func(ptr unsafe.Pointer, body gd.RID, shape_idx gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, shape_idx)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_clear_shapes].
*/
func (PhysicsServer2DExtension) _body_clear_shapes(impl func(ptr unsafe.Pointer, body gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_attach_object_instance_id].
*/
func (PhysicsServer2DExtension) _body_attach_object_instance_id(impl func(ptr unsafe.Pointer, body gd.RID, id gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var id = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, id)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_object_instance_id].
*/
func (PhysicsServer2DExtension) _body_get_object_instance_id(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_attach_canvas_instance_id].
*/
func (PhysicsServer2DExtension) _body_attach_canvas_instance_id(impl func(ptr unsafe.Pointer, body gd.RID, id gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var id = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, id)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_canvas_instance_id].
*/
func (PhysicsServer2DExtension) _body_get_canvas_instance_id(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_continuous_collision_detection_mode].
*/
func (PhysicsServer2DExtension) _body_set_continuous_collision_detection_mode(impl func(ptr unsafe.Pointer, body gd.RID, mode PhysicsServer2DCCDMode) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var mode = gd.UnsafeGet[PhysicsServer2DCCDMode](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, mode)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_continuous_collision_detection_mode].
*/
func (PhysicsServer2DExtension) _body_get_continuous_collision_detection_mode(impl func(ptr unsafe.Pointer, body gd.RID) PhysicsServer2DCCDMode, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_collision_layer].
*/
func (PhysicsServer2DExtension) _body_set_collision_layer(impl func(ptr unsafe.Pointer, body gd.RID, layer gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var layer = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, layer)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_collision_layer].
*/
func (PhysicsServer2DExtension) _body_get_collision_layer(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_collision_mask].
*/
func (PhysicsServer2DExtension) _body_set_collision_mask(impl func(ptr unsafe.Pointer, body gd.RID, mask gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var mask = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, mask)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_collision_mask].
*/
func (PhysicsServer2DExtension) _body_get_collision_mask(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_collision_priority].
*/
func (PhysicsServer2DExtension) _body_set_collision_priority(impl func(ptr unsafe.Pointer, body gd.RID, priority gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var priority = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, priority)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_collision_priority].
*/
func (PhysicsServer2DExtension) _body_get_collision_priority(impl func(ptr unsafe.Pointer, body gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_param].
*/
func (PhysicsServer2DExtension) _body_set_param(impl func(ptr unsafe.Pointer, body gd.RID, param PhysicsServer2DBodyParameter, value gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer2DBodyParameter](p_args,1)
		var value = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, param, value)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_param].
*/
func (PhysicsServer2DExtension) _body_get_param(impl func(ptr unsafe.Pointer, body gd.RID, param PhysicsServer2DBodyParameter) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer2DBodyParameter](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, param)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_reset_mass_properties].
*/
func (PhysicsServer2DExtension) _body_reset_mass_properties(impl func(ptr unsafe.Pointer, body gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_state].
*/
func (PhysicsServer2DExtension) _body_set_state(impl func(ptr unsafe.Pointer, body gd.RID, state PhysicsServer2DBodyState, value gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var state = gd.UnsafeGet[PhysicsServer2DBodyState](p_args,1)
		var value = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, state, value)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_state].
*/
func (PhysicsServer2DExtension) _body_get_state(impl func(ptr unsafe.Pointer, body gd.RID, state PhysicsServer2DBodyState) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var state = gd.UnsafeGet[PhysicsServer2DBodyState](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, state)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_apply_central_impulse].
*/
func (PhysicsServer2DExtension) _body_apply_central_impulse(impl func(ptr unsafe.Pointer, body gd.RID, impulse gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var impulse = gd.UnsafeGet[gd.Vector2](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, impulse)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_apply_torque_impulse].
*/
func (PhysicsServer2DExtension) _body_apply_torque_impulse(impl func(ptr unsafe.Pointer, body gd.RID, impulse gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var impulse = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, impulse)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_apply_impulse].
*/
func (PhysicsServer2DExtension) _body_apply_impulse(impl func(ptr unsafe.Pointer, body gd.RID, impulse gd.Vector2, position gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var impulse = gd.UnsafeGet[gd.Vector2](p_args,1)
		var position = gd.UnsafeGet[gd.Vector2](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, impulse, position)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_apply_central_force].
*/
func (PhysicsServer2DExtension) _body_apply_central_force(impl func(ptr unsafe.Pointer, body gd.RID, force gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var force = gd.UnsafeGet[gd.Vector2](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, force)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_apply_force].
*/
func (PhysicsServer2DExtension) _body_apply_force(impl func(ptr unsafe.Pointer, body gd.RID, force gd.Vector2, position gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var force = gd.UnsafeGet[gd.Vector2](p_args,1)
		var position = gd.UnsafeGet[gd.Vector2](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, force, position)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_apply_torque].
*/
func (PhysicsServer2DExtension) _body_apply_torque(impl func(ptr unsafe.Pointer, body gd.RID, torque gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var torque = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, torque)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_add_constant_central_force].
*/
func (PhysicsServer2DExtension) _body_add_constant_central_force(impl func(ptr unsafe.Pointer, body gd.RID, force gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var force = gd.UnsafeGet[gd.Vector2](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, force)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_add_constant_force].
*/
func (PhysicsServer2DExtension) _body_add_constant_force(impl func(ptr unsafe.Pointer, body gd.RID, force gd.Vector2, position gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var force = gd.UnsafeGet[gd.Vector2](p_args,1)
		var position = gd.UnsafeGet[gd.Vector2](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, force, position)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_add_constant_torque].
*/
func (PhysicsServer2DExtension) _body_add_constant_torque(impl func(ptr unsafe.Pointer, body gd.RID, torque gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var torque = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, torque)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_constant_force].
*/
func (PhysicsServer2DExtension) _body_set_constant_force(impl func(ptr unsafe.Pointer, body gd.RID, force gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var force = gd.UnsafeGet[gd.Vector2](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, force)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_constant_force].
*/
func (PhysicsServer2DExtension) _body_get_constant_force(impl func(ptr unsafe.Pointer, body gd.RID) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_constant_torque].
*/
func (PhysicsServer2DExtension) _body_set_constant_torque(impl func(ptr unsafe.Pointer, body gd.RID, torque gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var torque = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, torque)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_constant_torque].
*/
func (PhysicsServer2DExtension) _body_get_constant_torque(impl func(ptr unsafe.Pointer, body gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_axis_velocity].
*/
func (PhysicsServer2DExtension) _body_set_axis_velocity(impl func(ptr unsafe.Pointer, body gd.RID, axis_velocity gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var axis_velocity = gd.UnsafeGet[gd.Vector2](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, axis_velocity)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_add_collision_exception].
*/
func (PhysicsServer2DExtension) _body_add_collision_exception(impl func(ptr unsafe.Pointer, body gd.RID, excepted_body gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var excepted_body = gd.UnsafeGet[gd.RID](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, excepted_body)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_remove_collision_exception].
*/
func (PhysicsServer2DExtension) _body_remove_collision_exception(impl func(ptr unsafe.Pointer, body gd.RID, excepted_body gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var excepted_body = gd.UnsafeGet[gd.RID](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, excepted_body)
		ctx.End()
	}
}

/*
Returns the [RID]s of all bodies added as collision exceptions for the given [param body]. See also [method _body_add_collision_exception] and [method _body_remove_collision_exception].
Overridable version of [PhysicsServer2D]'s internal [code]body_get_collision_exceptions[/code] method. Corresponds to [method PhysicsBody2D.get_collision_exceptions].
*/
func (PhysicsServer2DExtension) _body_get_collision_exceptions(impl func(ptr unsafe.Pointer, body gd.RID) gd.ArrayOf[gd.RID], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_max_contacts_reported].
*/
func (PhysicsServer2DExtension) _body_set_max_contacts_reported(impl func(ptr unsafe.Pointer, body gd.RID, amount gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var amount = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, amount)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_max_contacts_reported].
*/
func (PhysicsServer2DExtension) _body_get_max_contacts_reported(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [PhysicsServer2D]'s internal [code]body_set_contacts_reported_depth_threshold[/code] method.
[b]Note:[/b] This method is currently unused by Godot's default physics implementation.
*/
func (PhysicsServer2DExtension) _body_set_contacts_reported_depth_threshold(impl func(ptr unsafe.Pointer, body gd.RID, threshold gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var threshold = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, threshold)
		ctx.End()
	}
}

/*
Overridable version of [PhysicsServer2D]'s internal [code]body_get_contacts_reported_depth_threshold[/code] method.
[b]Note:[/b] This method is currently unused by Godot's default physics implementation.
*/
func (PhysicsServer2DExtension) _body_get_contacts_reported_depth_threshold(impl func(ptr unsafe.Pointer, body gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_omit_force_integration].
*/
func (PhysicsServer2DExtension) _body_set_omit_force_integration(impl func(ptr unsafe.Pointer, body gd.RID, enable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var enable = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, enable)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_is_omitting_force_integration].
*/
func (PhysicsServer2DExtension) _body_is_omitting_force_integration(impl func(ptr unsafe.Pointer, body gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Assigns the [param body] to call the given [param callable] during the synchronization phase of the loop, before [method _step] is called. See also [method _sync].
Overridable version of [method PhysicsServer2D.body_set_state_sync_callback].
*/
func (PhysicsServer2DExtension) _body_set_state_sync_callback(impl func(ptr unsafe.Pointer, body gd.RID, callable gd.Callable) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var callable = mmm.Let[gd.Callable](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, callable)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_set_force_integration_callback].
*/
func (PhysicsServer2DExtension) _body_set_force_integration_callback(impl func(ptr unsafe.Pointer, body gd.RID, callable gd.Callable, userdata gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var callable = mmm.Let[gd.Callable](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		var userdata = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, callable, userdata)
		ctx.End()
	}
}

/*
Given a [param body], a [param shape], and their respective parameters, this method should return [code]true[/code] if a collision between the two would occur, with additional details passed in [param results].
Overridable version of [PhysicsServer2D]'s internal [code]shape_collide[/code] method. Corresponds to [method PhysicsDirectSpaceState2D.collide_shape].
*/
func (PhysicsServer2DExtension) _body_collide_shape(impl func(ptr unsafe.Pointer, body gd.RID, body_shape gd.Int, shape gd.RID, shape_xform gd.Transform2D, motion gd.Vector2, results unsafe.Pointer, result_max gd.Int, result_count *int32) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var body_shape = gd.UnsafeGet[gd.Int](p_args,1)
		var shape = gd.UnsafeGet[gd.RID](p_args,2)
		var shape_xform = gd.UnsafeGet[gd.Transform2D](p_args,3)
		var motion = gd.UnsafeGet[gd.Vector2](p_args,4)
		var results = gd.UnsafeGet[unsafe.Pointer](p_args,5)
		var result_max = gd.UnsafeGet[gd.Int](p_args,6)
		var result_count = gd.UnsafeGet[*int32](p_args,7)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, body_shape, shape, shape_xform, motion, results, result_max, result_count)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
If set to [code]true[/code], allows the body with the given [RID] to detect mouse inputs when the mouse cursor is hovering on it.
Overridable version of [PhysicsServer2D]'s internal [code]body_set_pickable[/code] method. Corresponds to [member CollisionObject2D.input_pickable].
*/
func (PhysicsServer2DExtension) _body_set_pickable(impl func(ptr unsafe.Pointer, body gd.RID, pickable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var pickable = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, pickable)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_get_direct_state].
*/
func (PhysicsServer2DExtension) _body_get_direct_state(impl func(ptr unsafe.Pointer, body gd.RID) PhysicsDirectBodyState2D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.body_test_motion]. Unlike the exposed implementation, this method does not receive all of the arguments inside a [PhysicsTestMotionParameters2D].
*/
func (PhysicsServer2DExtension) _body_test_motion(impl func(ptr unsafe.Pointer, body gd.RID, from gd.Transform2D, motion gd.Vector2, margin gd.Float, collide_separation_ray bool, recovery_as_collision bool, result *PhysicsServer2DExtensionMotionResult) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var from = gd.UnsafeGet[gd.Transform2D](p_args,1)
		var motion = gd.UnsafeGet[gd.Vector2](p_args,2)
		var margin = gd.UnsafeGet[gd.Float](p_args,3)
		var collide_separation_ray = gd.UnsafeGet[bool](p_args,4)
		var recovery_as_collision = gd.UnsafeGet[bool](p_args,5)
		var result = gd.UnsafeGet[*PhysicsServer2DExtensionMotionResult](p_args,6)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, from, motion, margin, collide_separation_ray, recovery_as_collision, result)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.joint_create].
*/
func (PhysicsServer2DExtension) _joint_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.joint_clear].
*/
func (PhysicsServer2DExtension) _joint_clear(impl func(ptr unsafe.Pointer, joint gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.joint_set_param].
*/
func (PhysicsServer2DExtension) _joint_set_param(impl func(ptr unsafe.Pointer, joint gd.RID, param PhysicsServer2DJointParam, value gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer2DJointParam](p_args,1)
		var value = gd.UnsafeGet[gd.Float](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, param, value)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.joint_get_param].
*/
func (PhysicsServer2DExtension) _joint_get_param(impl func(ptr unsafe.Pointer, joint gd.RID, param PhysicsServer2DJointParam) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer2DJointParam](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint, param)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.joint_disable_collisions_between_bodies].
*/
func (PhysicsServer2DExtension) _joint_disable_collisions_between_bodies(impl func(ptr unsafe.Pointer, joint gd.RID, disable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var disable = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, disable)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.joint_is_disabled_collisions_between_bodies].
*/
func (PhysicsServer2DExtension) _joint_is_disabled_collisions_between_bodies(impl func(ptr unsafe.Pointer, joint gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.joint_make_pin].
*/
func (PhysicsServer2DExtension) _joint_make_pin(impl func(ptr unsafe.Pointer, joint gd.RID, anchor gd.Vector2, body_a gd.RID, body_b gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var anchor = gd.UnsafeGet[gd.Vector2](p_args,1)
		var body_a = gd.UnsafeGet[gd.RID](p_args,2)
		var body_b = gd.UnsafeGet[gd.RID](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, anchor, body_a, body_b)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.joint_make_groove].
*/
func (PhysicsServer2DExtension) _joint_make_groove(impl func(ptr unsafe.Pointer, joint gd.RID, a_groove1 gd.Vector2, a_groove2 gd.Vector2, b_anchor gd.Vector2, body_a gd.RID, body_b gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var a_groove1 = gd.UnsafeGet[gd.Vector2](p_args,1)
		var a_groove2 = gd.UnsafeGet[gd.Vector2](p_args,2)
		var b_anchor = gd.UnsafeGet[gd.Vector2](p_args,3)
		var body_a = gd.UnsafeGet[gd.RID](p_args,4)
		var body_b = gd.UnsafeGet[gd.RID](p_args,5)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, a_groove1, a_groove2, b_anchor, body_a, body_b)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.joint_make_damped_spring].
*/
func (PhysicsServer2DExtension) _joint_make_damped_spring(impl func(ptr unsafe.Pointer, joint gd.RID, anchor_a gd.Vector2, anchor_b gd.Vector2, body_a gd.RID, body_b gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var anchor_a = gd.UnsafeGet[gd.Vector2](p_args,1)
		var anchor_b = gd.UnsafeGet[gd.Vector2](p_args,2)
		var body_a = gd.UnsafeGet[gd.RID](p_args,3)
		var body_b = gd.UnsafeGet[gd.RID](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, anchor_a, anchor_b, body_a, body_b)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.pin_joint_set_flag].
*/
func (PhysicsServer2DExtension) _pin_joint_set_flag(impl func(ptr unsafe.Pointer, joint gd.RID, flag PhysicsServer2DPinJointFlag, enabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var flag = gd.UnsafeGet[PhysicsServer2DPinJointFlag](p_args,1)
		var enabled = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, flag, enabled)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.pin_joint_get_flag].
*/
func (PhysicsServer2DExtension) _pin_joint_get_flag(impl func(ptr unsafe.Pointer, joint gd.RID, flag PhysicsServer2DPinJointFlag) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var flag = gd.UnsafeGet[PhysicsServer2DPinJointFlag](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint, flag)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.pin_joint_set_param].
*/
func (PhysicsServer2DExtension) _pin_joint_set_param(impl func(ptr unsafe.Pointer, joint gd.RID, param PhysicsServer2DPinJointParam, value gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer2DPinJointParam](p_args,1)
		var value = gd.UnsafeGet[gd.Float](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, param, value)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.pin_joint_get_param].
*/
func (PhysicsServer2DExtension) _pin_joint_get_param(impl func(ptr unsafe.Pointer, joint gd.RID, param PhysicsServer2DPinJointParam) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer2DPinJointParam](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint, param)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.damped_spring_joint_set_param].
*/
func (PhysicsServer2DExtension) _damped_spring_joint_set_param(impl func(ptr unsafe.Pointer, joint gd.RID, param PhysicsServer2DDampedSpringParam, value gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer2DDampedSpringParam](p_args,1)
		var value = gd.UnsafeGet[gd.Float](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, param, value)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.damped_spring_joint_get_param].
*/
func (PhysicsServer2DExtension) _damped_spring_joint_get_param(impl func(ptr unsafe.Pointer, joint gd.RID, param PhysicsServer2DDampedSpringParam) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer2DDampedSpringParam](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint, param)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.joint_get_type].
*/
func (PhysicsServer2DExtension) _joint_get_type(impl func(ptr unsafe.Pointer, joint gd.RID) PhysicsServer2DJointType, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.free_rid].
*/
func (PhysicsServer2DExtension) _free_rid(impl func(ptr unsafe.Pointer, rid gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, rid)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.set_active].
*/
func (PhysicsServer2DExtension) _set_active(impl func(ptr unsafe.Pointer, active bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var active = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, active)
		ctx.End()
	}
}

/*
Called when the main loop is initialized and creates a new instance of this physics server. See also [method MainLoop._initialize] and [method _finish].
Overridable version of [PhysicsServer2D]'s internal [code]init[/code] method.
*/
func (PhysicsServer2DExtension) _init(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called every physics step to process the physics simulation. [param step] is the time elapsed since the last physics step, in seconds. It is usually the same as [method Node.get_physics_process_delta_time].
Overridable version of [PhysicsServer2D]'s internal [code skip-lint]step[/code] method.
*/
func (PhysicsServer2DExtension) _step(impl func(ptr unsafe.Pointer, step gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var step = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, step)
		ctx.End()
	}
}

/*
Called to indicate that the physics server is synchronizing and cannot access physics states if running on a separate thread. See also [method _end_sync].
Overridable version of [PhysicsServer2D]'s internal [code]sync[/code] method.
*/
func (PhysicsServer2DExtension) _sync(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called every physics step before [method _step] to process all remaining queries.
Overridable version of [PhysicsServer2D]'s internal [code]flush_queries[/code] method.
*/
func (PhysicsServer2DExtension) _flush_queries(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called to indicate that the physics server has stopped synchronizing. It is in the loop's iteration/physics phase, and can access physics objects even if running on a separate thread. See also [method _sync].
Overridable version of [PhysicsServer2D]'s internal [code]end_sync[/code] method.
*/
func (PhysicsServer2DExtension) _end_sync(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called when the main loop finalizes to shut down the physics server. See also [method MainLoop._finalize] and [method _init].
Overridable version of [PhysicsServer2D]'s internal [code]finish[/code] method.
*/
func (PhysicsServer2DExtension) _finish(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Overridable method that should return [code]true[/code] when the physics server is processing queries. See also [method _flush_queries].
Overridable version of [PhysicsServer2D]'s internal [code]is_flushing_queries[/code] method.
*/
func (PhysicsServer2DExtension) _is_flushing_queries(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Overridable version of [method PhysicsServer2D.get_process_info].
*/
func (PhysicsServer2DExtension) _get_process_info(impl func(ptr unsafe.Pointer, process_info PhysicsServer2DProcessInfo) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var process_info = gd.UnsafeGet[PhysicsServer2DProcessInfo](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, process_info)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self PhysicsServer2DExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_world_boundary_shape_create": return reflect.ValueOf(self._world_boundary_shape_create);
	case "_separation_ray_shape_create": return reflect.ValueOf(self._separation_ray_shape_create);
	case "_segment_shape_create": return reflect.ValueOf(self._segment_shape_create);
	case "_circle_shape_create": return reflect.ValueOf(self._circle_shape_create);
	case "_rectangle_shape_create": return reflect.ValueOf(self._rectangle_shape_create);
	case "_capsule_shape_create": return reflect.ValueOf(self._capsule_shape_create);
	case "_convex_polygon_shape_create": return reflect.ValueOf(self._convex_polygon_shape_create);
	case "_concave_polygon_shape_create": return reflect.ValueOf(self._concave_polygon_shape_create);
	case "_shape_set_data": return reflect.ValueOf(self._shape_set_data);
	case "_shape_set_custom_solver_bias": return reflect.ValueOf(self._shape_set_custom_solver_bias);
	case "_shape_get_type": return reflect.ValueOf(self._shape_get_type);
	case "_shape_get_data": return reflect.ValueOf(self._shape_get_data);
	case "_shape_get_custom_solver_bias": return reflect.ValueOf(self._shape_get_custom_solver_bias);
	case "_shape_collide": return reflect.ValueOf(self._shape_collide);
	case "_space_create": return reflect.ValueOf(self._space_create);
	case "_space_set_active": return reflect.ValueOf(self._space_set_active);
	case "_space_is_active": return reflect.ValueOf(self._space_is_active);
	case "_space_set_param": return reflect.ValueOf(self._space_set_param);
	case "_space_get_param": return reflect.ValueOf(self._space_get_param);
	case "_space_get_direct_state": return reflect.ValueOf(self._space_get_direct_state);
	case "_space_set_debug_contacts": return reflect.ValueOf(self._space_set_debug_contacts);
	case "_space_get_contacts": return reflect.ValueOf(self._space_get_contacts);
	case "_space_get_contact_count": return reflect.ValueOf(self._space_get_contact_count);
	case "_area_create": return reflect.ValueOf(self._area_create);
	case "_area_set_space": return reflect.ValueOf(self._area_set_space);
	case "_area_get_space": return reflect.ValueOf(self._area_get_space);
	case "_area_add_shape": return reflect.ValueOf(self._area_add_shape);
	case "_area_set_shape": return reflect.ValueOf(self._area_set_shape);
	case "_area_set_shape_transform": return reflect.ValueOf(self._area_set_shape_transform);
	case "_area_set_shape_disabled": return reflect.ValueOf(self._area_set_shape_disabled);
	case "_area_get_shape_count": return reflect.ValueOf(self._area_get_shape_count);
	case "_area_get_shape": return reflect.ValueOf(self._area_get_shape);
	case "_area_get_shape_transform": return reflect.ValueOf(self._area_get_shape_transform);
	case "_area_remove_shape": return reflect.ValueOf(self._area_remove_shape);
	case "_area_clear_shapes": return reflect.ValueOf(self._area_clear_shapes);
	case "_area_attach_object_instance_id": return reflect.ValueOf(self._area_attach_object_instance_id);
	case "_area_get_object_instance_id": return reflect.ValueOf(self._area_get_object_instance_id);
	case "_area_attach_canvas_instance_id": return reflect.ValueOf(self._area_attach_canvas_instance_id);
	case "_area_get_canvas_instance_id": return reflect.ValueOf(self._area_get_canvas_instance_id);
	case "_area_set_param": return reflect.ValueOf(self._area_set_param);
	case "_area_set_transform": return reflect.ValueOf(self._area_set_transform);
	case "_area_get_param": return reflect.ValueOf(self._area_get_param);
	case "_area_get_transform": return reflect.ValueOf(self._area_get_transform);
	case "_area_set_collision_layer": return reflect.ValueOf(self._area_set_collision_layer);
	case "_area_get_collision_layer": return reflect.ValueOf(self._area_get_collision_layer);
	case "_area_set_collision_mask": return reflect.ValueOf(self._area_set_collision_mask);
	case "_area_get_collision_mask": return reflect.ValueOf(self._area_get_collision_mask);
	case "_area_set_monitorable": return reflect.ValueOf(self._area_set_monitorable);
	case "_area_set_pickable": return reflect.ValueOf(self._area_set_pickable);
	case "_area_set_monitor_callback": return reflect.ValueOf(self._area_set_monitor_callback);
	case "_area_set_area_monitor_callback": return reflect.ValueOf(self._area_set_area_monitor_callback);
	case "_body_create": return reflect.ValueOf(self._body_create);
	case "_body_set_space": return reflect.ValueOf(self._body_set_space);
	case "_body_get_space": return reflect.ValueOf(self._body_get_space);
	case "_body_set_mode": return reflect.ValueOf(self._body_set_mode);
	case "_body_get_mode": return reflect.ValueOf(self._body_get_mode);
	case "_body_add_shape": return reflect.ValueOf(self._body_add_shape);
	case "_body_set_shape": return reflect.ValueOf(self._body_set_shape);
	case "_body_set_shape_transform": return reflect.ValueOf(self._body_set_shape_transform);
	case "_body_get_shape_count": return reflect.ValueOf(self._body_get_shape_count);
	case "_body_get_shape": return reflect.ValueOf(self._body_get_shape);
	case "_body_get_shape_transform": return reflect.ValueOf(self._body_get_shape_transform);
	case "_body_set_shape_disabled": return reflect.ValueOf(self._body_set_shape_disabled);
	case "_body_set_shape_as_one_way_collision": return reflect.ValueOf(self._body_set_shape_as_one_way_collision);
	case "_body_remove_shape": return reflect.ValueOf(self._body_remove_shape);
	case "_body_clear_shapes": return reflect.ValueOf(self._body_clear_shapes);
	case "_body_attach_object_instance_id": return reflect.ValueOf(self._body_attach_object_instance_id);
	case "_body_get_object_instance_id": return reflect.ValueOf(self._body_get_object_instance_id);
	case "_body_attach_canvas_instance_id": return reflect.ValueOf(self._body_attach_canvas_instance_id);
	case "_body_get_canvas_instance_id": return reflect.ValueOf(self._body_get_canvas_instance_id);
	case "_body_set_continuous_collision_detection_mode": return reflect.ValueOf(self._body_set_continuous_collision_detection_mode);
	case "_body_get_continuous_collision_detection_mode": return reflect.ValueOf(self._body_get_continuous_collision_detection_mode);
	case "_body_set_collision_layer": return reflect.ValueOf(self._body_set_collision_layer);
	case "_body_get_collision_layer": return reflect.ValueOf(self._body_get_collision_layer);
	case "_body_set_collision_mask": return reflect.ValueOf(self._body_set_collision_mask);
	case "_body_get_collision_mask": return reflect.ValueOf(self._body_get_collision_mask);
	case "_body_set_collision_priority": return reflect.ValueOf(self._body_set_collision_priority);
	case "_body_get_collision_priority": return reflect.ValueOf(self._body_get_collision_priority);
	case "_body_set_param": return reflect.ValueOf(self._body_set_param);
	case "_body_get_param": return reflect.ValueOf(self._body_get_param);
	case "_body_reset_mass_properties": return reflect.ValueOf(self._body_reset_mass_properties);
	case "_body_set_state": return reflect.ValueOf(self._body_set_state);
	case "_body_get_state": return reflect.ValueOf(self._body_get_state);
	case "_body_apply_central_impulse": return reflect.ValueOf(self._body_apply_central_impulse);
	case "_body_apply_torque_impulse": return reflect.ValueOf(self._body_apply_torque_impulse);
	case "_body_apply_impulse": return reflect.ValueOf(self._body_apply_impulse);
	case "_body_apply_central_force": return reflect.ValueOf(self._body_apply_central_force);
	case "_body_apply_force": return reflect.ValueOf(self._body_apply_force);
	case "_body_apply_torque": return reflect.ValueOf(self._body_apply_torque);
	case "_body_add_constant_central_force": return reflect.ValueOf(self._body_add_constant_central_force);
	case "_body_add_constant_force": return reflect.ValueOf(self._body_add_constant_force);
	case "_body_add_constant_torque": return reflect.ValueOf(self._body_add_constant_torque);
	case "_body_set_constant_force": return reflect.ValueOf(self._body_set_constant_force);
	case "_body_get_constant_force": return reflect.ValueOf(self._body_get_constant_force);
	case "_body_set_constant_torque": return reflect.ValueOf(self._body_set_constant_torque);
	case "_body_get_constant_torque": return reflect.ValueOf(self._body_get_constant_torque);
	case "_body_set_axis_velocity": return reflect.ValueOf(self._body_set_axis_velocity);
	case "_body_add_collision_exception": return reflect.ValueOf(self._body_add_collision_exception);
	case "_body_remove_collision_exception": return reflect.ValueOf(self._body_remove_collision_exception);
	case "_body_get_collision_exceptions": return reflect.ValueOf(self._body_get_collision_exceptions);
	case "_body_set_max_contacts_reported": return reflect.ValueOf(self._body_set_max_contacts_reported);
	case "_body_get_max_contacts_reported": return reflect.ValueOf(self._body_get_max_contacts_reported);
	case "_body_set_contacts_reported_depth_threshold": return reflect.ValueOf(self._body_set_contacts_reported_depth_threshold);
	case "_body_get_contacts_reported_depth_threshold": return reflect.ValueOf(self._body_get_contacts_reported_depth_threshold);
	case "_body_set_omit_force_integration": return reflect.ValueOf(self._body_set_omit_force_integration);
	case "_body_is_omitting_force_integration": return reflect.ValueOf(self._body_is_omitting_force_integration);
	case "_body_set_state_sync_callback": return reflect.ValueOf(self._body_set_state_sync_callback);
	case "_body_set_force_integration_callback": return reflect.ValueOf(self._body_set_force_integration_callback);
	case "_body_collide_shape": return reflect.ValueOf(self._body_collide_shape);
	case "_body_set_pickable": return reflect.ValueOf(self._body_set_pickable);
	case "_body_get_direct_state": return reflect.ValueOf(self._body_get_direct_state);
	case "_body_test_motion": return reflect.ValueOf(self._body_test_motion);
	case "_joint_create": return reflect.ValueOf(self._joint_create);
	case "_joint_clear": return reflect.ValueOf(self._joint_clear);
	case "_joint_set_param": return reflect.ValueOf(self._joint_set_param);
	case "_joint_get_param": return reflect.ValueOf(self._joint_get_param);
	case "_joint_disable_collisions_between_bodies": return reflect.ValueOf(self._joint_disable_collisions_between_bodies);
	case "_joint_is_disabled_collisions_between_bodies": return reflect.ValueOf(self._joint_is_disabled_collisions_between_bodies);
	case "_joint_make_pin": return reflect.ValueOf(self._joint_make_pin);
	case "_joint_make_groove": return reflect.ValueOf(self._joint_make_groove);
	case "_joint_make_damped_spring": return reflect.ValueOf(self._joint_make_damped_spring);
	case "_pin_joint_set_flag": return reflect.ValueOf(self._pin_joint_set_flag);
	case "_pin_joint_get_flag": return reflect.ValueOf(self._pin_joint_get_flag);
	case "_pin_joint_set_param": return reflect.ValueOf(self._pin_joint_set_param);
	case "_pin_joint_get_param": return reflect.ValueOf(self._pin_joint_get_param);
	case "_damped_spring_joint_set_param": return reflect.ValueOf(self._damped_spring_joint_set_param);
	case "_damped_spring_joint_get_param": return reflect.ValueOf(self._damped_spring_joint_get_param);
	case "_joint_get_type": return reflect.ValueOf(self._joint_get_type);
	case "_free_rid": return reflect.ValueOf(self._free_rid);
	case "_set_active": return reflect.ValueOf(self._set_active);
	case "_init": return reflect.ValueOf(self._init);
	case "_step": return reflect.ValueOf(self._step);
	case "_sync": return reflect.ValueOf(self._sync);
	case "_flush_queries": return reflect.ValueOf(self._flush_queries);
	case "_end_sync": return reflect.ValueOf(self._end_sync);
	case "_finish": return reflect.ValueOf(self._finish);
	case "_is_flushing_queries": return reflect.ValueOf(self._is_flushing_queries);
	case "_get_process_info": return reflect.ValueOf(self._get_process_info);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsServer2DManager struct {_ [0]*PhysicsServer2DManager; ptr gd.Pointer}

//go:nosplit
func (self PhysicsServer2DManager) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsServer2DManager) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsServer2DManager) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsServer2DManager) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsServer2DManager) AsPhysicsServer2DManager() [1]PhysicsServer2DManager { return [1]PhysicsServer2DManager{self} }

//go:nosplit

func (self PhysicsServer2DManager) IsSingleton() {}

func (self PhysicsServer2DManager) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type PhysicsServer3DJointType int64

type PhysicsServer3DPinJointParam int64

type PhysicsServer3DHingeJointParam int64

type PhysicsServer3DHingeJointFlag int64

type PhysicsServer3DSliderJointParam int64

type PhysicsServer3DConeTwistJointParam int64

type PhysicsServer3DG6DOFJointAxisParam int64

type PhysicsServer3DG6DOFJointAxisFlag int64

type PhysicsServer3DShapeType int64

type PhysicsServer3DAreaParameter int64

type PhysicsServer3DAreaSpaceOverrideMode int64

type PhysicsServer3DBodyMode int64

type PhysicsServer3DBodyParameter int64

type PhysicsServer3DBodyDampMode int64

type PhysicsServer3DBodyState int64

type PhysicsServer3DAreaBodyStatus int64

type PhysicsServer3DProcessInfo int64

type PhysicsServer3DSpaceParameter int64

type PhysicsServer3DBodyAxis int64
type PhysicsServer3D struct {_ [0]*PhysicsServer3D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsServer3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsServer3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsServer3D) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsServer3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsServer3D) AsPhysicsServer3D() [1]PhysicsServer3D { return [1]PhysicsServer3D{self} }

//go:nosplit

func (self PhysicsServer3D) IsSingleton() {}

func (self PhysicsServer3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsServer3DExtension struct {_ [0]*PhysicsServer3DExtension; ptr gd.Pointer}

//go:nosplit
func (self PhysicsServer3DExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsServer3DExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsServer3DExtension) Super() [1]PhysicsServer3D { return *(*[1]PhysicsServer3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsServer3DExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsServer3DExtension) AsPhysicsServer3DExtension() [1]PhysicsServer3DExtension { return [1]PhysicsServer3DExtension{self} }


//go:nosplit
func (self PhysicsServer3DExtension) AsPhysicsServer3D() [1]PhysicsServer3D { return *(*[1]PhysicsServer3D)(unsafe.Pointer(&self)) }

func (PhysicsServer3DExtension) _world_boundary_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _separation_ray_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _sphere_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _box_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _capsule_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _cylinder_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _convex_polygon_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _concave_polygon_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _heightmap_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _custom_shape_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _shape_set_data(impl func(ptr unsafe.Pointer, shape gd.RID, data gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape = gd.UnsafeGet[gd.RID](p_args,0)
		var data = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shape, data)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _shape_set_custom_solver_bias(impl func(ptr unsafe.Pointer, shape gd.RID, bias gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape = gd.UnsafeGet[gd.RID](p_args,0)
		var bias = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shape, bias)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _shape_set_margin(impl func(ptr unsafe.Pointer, shape gd.RID, margin gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape = gd.UnsafeGet[gd.RID](p_args,0)
		var margin = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shape, margin)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _shape_get_margin(impl func(ptr unsafe.Pointer, shape gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _shape_get_type(impl func(ptr unsafe.Pointer, shape gd.RID) PhysicsServer3DShapeType, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _shape_get_data(impl func(ptr unsafe.Pointer, shape gd.RID) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _shape_get_custom_solver_bias(impl func(ptr unsafe.Pointer, shape gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shape = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shape)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _space_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _space_set_active(impl func(ptr unsafe.Pointer, space gd.RID, active bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		var active = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, space, active)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _space_is_active(impl func(ptr unsafe.Pointer, space gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, space)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _space_set_param(impl func(ptr unsafe.Pointer, space gd.RID, param PhysicsServer3DSpaceParameter, value gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer3DSpaceParameter](p_args,1)
		var value = gd.UnsafeGet[gd.Float](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, space, param, value)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _space_get_param(impl func(ptr unsafe.Pointer, space gd.RID, param PhysicsServer3DSpaceParameter) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer3DSpaceParameter](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, space, param)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _space_get_direct_state(impl func(ptr unsafe.Pointer, space gd.RID) PhysicsDirectSpaceState3D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, space)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _space_set_debug_contacts(impl func(ptr unsafe.Pointer, space gd.RID, max_contacts gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		var max_contacts = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, space, max_contacts)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _space_get_contacts(impl func(ptr unsafe.Pointer, space gd.RID) gd.PackedVector3Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, space)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _space_get_contact_count(impl func(ptr unsafe.Pointer, space gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var space = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, space)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_set_space(impl func(ptr unsafe.Pointer, area gd.RID, space gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var space = gd.UnsafeGet[gd.RID](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, space)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_get_space(impl func(ptr unsafe.Pointer, area gd.RID) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_add_shape(impl func(ptr unsafe.Pointer, area gd.RID, shape gd.RID, transform gd.Transform3D, disabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var shape = gd.UnsafeGet[gd.RID](p_args,1)
		var transform = gd.UnsafeGet[gd.Transform3D](p_args,2)
		var disabled = gd.UnsafeGet[bool](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, shape, transform, disabled)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_set_shape(impl func(ptr unsafe.Pointer, area gd.RID, shape_idx gd.Int, shape gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		var shape = gd.UnsafeGet[gd.RID](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, shape_idx, shape)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_set_shape_transform(impl func(ptr unsafe.Pointer, area gd.RID, shape_idx gd.Int, transform gd.Transform3D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		var transform = gd.UnsafeGet[gd.Transform3D](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, shape_idx, transform)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_set_shape_disabled(impl func(ptr unsafe.Pointer, area gd.RID, shape_idx gd.Int, disabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		var disabled = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, shape_idx, disabled)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_get_shape_count(impl func(ptr unsafe.Pointer, area gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_get_shape(impl func(ptr unsafe.Pointer, area gd.RID, shape_idx gd.Int) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area, shape_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_get_shape_transform(impl func(ptr unsafe.Pointer, area gd.RID, shape_idx gd.Int) gd.Transform3D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area, shape_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_remove_shape(impl func(ptr unsafe.Pointer, area gd.RID, shape_idx gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, shape_idx)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_clear_shapes(impl func(ptr unsafe.Pointer, area gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_attach_object_instance_id(impl func(ptr unsafe.Pointer, area gd.RID, id gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var id = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, id)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_get_object_instance_id(impl func(ptr unsafe.Pointer, area gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_set_param(impl func(ptr unsafe.Pointer, area gd.RID, param PhysicsServer3DAreaParameter, value gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer3DAreaParameter](p_args,1)
		var value = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, param, value)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_set_transform(impl func(ptr unsafe.Pointer, area gd.RID, transform gd.Transform3D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var transform = gd.UnsafeGet[gd.Transform3D](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, transform)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_get_param(impl func(ptr unsafe.Pointer, area gd.RID, param PhysicsServer3DAreaParameter) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer3DAreaParameter](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area, param)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_get_transform(impl func(ptr unsafe.Pointer, area gd.RID) gd.Transform3D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_set_collision_layer(impl func(ptr unsafe.Pointer, area gd.RID, layer gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var layer = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, layer)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_get_collision_layer(impl func(ptr unsafe.Pointer, area gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_set_collision_mask(impl func(ptr unsafe.Pointer, area gd.RID, mask gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var mask = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, mask)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_get_collision_mask(impl func(ptr unsafe.Pointer, area gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, area)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_set_monitorable(impl func(ptr unsafe.Pointer, area gd.RID, monitorable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var monitorable = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, monitorable)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_set_ray_pickable(impl func(ptr unsafe.Pointer, area gd.RID, enable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var enable = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, enable)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_set_monitor_callback(impl func(ptr unsafe.Pointer, area gd.RID, callback gd.Callable) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var callback = mmm.Let[gd.Callable](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, callback)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _area_set_area_monitor_callback(impl func(ptr unsafe.Pointer, area gd.RID, callback gd.Callable) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var area = gd.UnsafeGet[gd.RID](p_args,0)
		var callback = mmm.Let[gd.Callable](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, area, callback)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_space(impl func(ptr unsafe.Pointer, body gd.RID, space gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var space = gd.UnsafeGet[gd.RID](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, space)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_space(impl func(ptr unsafe.Pointer, body gd.RID) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_mode(impl func(ptr unsafe.Pointer, body gd.RID, mode PhysicsServer3DBodyMode) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var mode = gd.UnsafeGet[PhysicsServer3DBodyMode](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, mode)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_mode(impl func(ptr unsafe.Pointer, body gd.RID) PhysicsServer3DBodyMode, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_add_shape(impl func(ptr unsafe.Pointer, body gd.RID, shape gd.RID, transform gd.Transform3D, disabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape = gd.UnsafeGet[gd.RID](p_args,1)
		var transform = gd.UnsafeGet[gd.Transform3D](p_args,2)
		var disabled = gd.UnsafeGet[bool](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, shape, transform, disabled)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_shape(impl func(ptr unsafe.Pointer, body gd.RID, shape_idx gd.Int, shape gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		var shape = gd.UnsafeGet[gd.RID](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, shape_idx, shape)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_shape_transform(impl func(ptr unsafe.Pointer, body gd.RID, shape_idx gd.Int, transform gd.Transform3D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		var transform = gd.UnsafeGet[gd.Transform3D](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, shape_idx, transform)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_shape_disabled(impl func(ptr unsafe.Pointer, body gd.RID, shape_idx gd.Int, disabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		var disabled = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, shape_idx, disabled)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_shape_count(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_shape(impl func(ptr unsafe.Pointer, body gd.RID, shape_idx gd.Int) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, shape_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_shape_transform(impl func(ptr unsafe.Pointer, body gd.RID, shape_idx gd.Int) gd.Transform3D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, shape_idx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_remove_shape(impl func(ptr unsafe.Pointer, body gd.RID, shape_idx gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var shape_idx = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, shape_idx)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_clear_shapes(impl func(ptr unsafe.Pointer, body gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_attach_object_instance_id(impl func(ptr unsafe.Pointer, body gd.RID, id gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var id = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, id)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_object_instance_id(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_enable_continuous_collision_detection(impl func(ptr unsafe.Pointer, body gd.RID, enable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var enable = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, enable)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_is_continuous_collision_detection_enabled(impl func(ptr unsafe.Pointer, body gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_collision_layer(impl func(ptr unsafe.Pointer, body gd.RID, layer gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var layer = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, layer)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_collision_layer(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_collision_mask(impl func(ptr unsafe.Pointer, body gd.RID, mask gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var mask = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, mask)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_collision_mask(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_collision_priority(impl func(ptr unsafe.Pointer, body gd.RID, priority gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var priority = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, priority)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_collision_priority(impl func(ptr unsafe.Pointer, body gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_user_flags(impl func(ptr unsafe.Pointer, body gd.RID, flags gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var flags = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, flags)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_user_flags(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_param(impl func(ptr unsafe.Pointer, body gd.RID, param PhysicsServer3DBodyParameter, value gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer3DBodyParameter](p_args,1)
		var value = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, param, value)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_param(impl func(ptr unsafe.Pointer, body gd.RID, param PhysicsServer3DBodyParameter) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer3DBodyParameter](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, param)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_reset_mass_properties(impl func(ptr unsafe.Pointer, body gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_state(impl func(ptr unsafe.Pointer, body gd.RID, state PhysicsServer3DBodyState, value gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var state = gd.UnsafeGet[PhysicsServer3DBodyState](p_args,1)
		var value = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, state, value)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_state(impl func(ptr unsafe.Pointer, body gd.RID, state PhysicsServer3DBodyState) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var state = gd.UnsafeGet[PhysicsServer3DBodyState](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, state)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_apply_central_impulse(impl func(ptr unsafe.Pointer, body gd.RID, impulse gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var impulse = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, impulse)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_apply_impulse(impl func(ptr unsafe.Pointer, body gd.RID, impulse gd.Vector3, position gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var impulse = gd.UnsafeGet[gd.Vector3](p_args,1)
		var position = gd.UnsafeGet[gd.Vector3](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, impulse, position)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_apply_torque_impulse(impl func(ptr unsafe.Pointer, body gd.RID, impulse gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var impulse = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, impulse)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_apply_central_force(impl func(ptr unsafe.Pointer, body gd.RID, force gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var force = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, force)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_apply_force(impl func(ptr unsafe.Pointer, body gd.RID, force gd.Vector3, position gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var force = gd.UnsafeGet[gd.Vector3](p_args,1)
		var position = gd.UnsafeGet[gd.Vector3](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, force, position)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_apply_torque(impl func(ptr unsafe.Pointer, body gd.RID, torque gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var torque = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, torque)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_add_constant_central_force(impl func(ptr unsafe.Pointer, body gd.RID, force gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var force = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, force)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_add_constant_force(impl func(ptr unsafe.Pointer, body gd.RID, force gd.Vector3, position gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var force = gd.UnsafeGet[gd.Vector3](p_args,1)
		var position = gd.UnsafeGet[gd.Vector3](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, force, position)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_add_constant_torque(impl func(ptr unsafe.Pointer, body gd.RID, torque gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var torque = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, torque)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_constant_force(impl func(ptr unsafe.Pointer, body gd.RID, force gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var force = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, force)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_constant_force(impl func(ptr unsafe.Pointer, body gd.RID) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_constant_torque(impl func(ptr unsafe.Pointer, body gd.RID, torque gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var torque = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, torque)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_constant_torque(impl func(ptr unsafe.Pointer, body gd.RID) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_axis_velocity(impl func(ptr unsafe.Pointer, body gd.RID, axis_velocity gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var axis_velocity = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, axis_velocity)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_axis_lock(impl func(ptr unsafe.Pointer, body gd.RID, axis PhysicsServer3DBodyAxis, lock bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var axis = gd.UnsafeGet[PhysicsServer3DBodyAxis](p_args,1)
		var lock = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, axis, lock)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_is_axis_locked(impl func(ptr unsafe.Pointer, body gd.RID, axis PhysicsServer3DBodyAxis) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var axis = gd.UnsafeGet[PhysicsServer3DBodyAxis](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, axis)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_add_collision_exception(impl func(ptr unsafe.Pointer, body gd.RID, excepted_body gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var excepted_body = gd.UnsafeGet[gd.RID](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, excepted_body)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_remove_collision_exception(impl func(ptr unsafe.Pointer, body gd.RID, excepted_body gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var excepted_body = gd.UnsafeGet[gd.RID](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, excepted_body)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_collision_exceptions(impl func(ptr unsafe.Pointer, body gd.RID) gd.ArrayOf[gd.RID], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_max_contacts_reported(impl func(ptr unsafe.Pointer, body gd.RID, amount gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var amount = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, amount)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_max_contacts_reported(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_contacts_reported_depth_threshold(impl func(ptr unsafe.Pointer, body gd.RID, threshold gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var threshold = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, threshold)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_contacts_reported_depth_threshold(impl func(ptr unsafe.Pointer, body gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_omit_force_integration(impl func(ptr unsafe.Pointer, body gd.RID, enable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var enable = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, enable)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_is_omitting_force_integration(impl func(ptr unsafe.Pointer, body gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_state_sync_callback(impl func(ptr unsafe.Pointer, body gd.RID, callable gd.Callable) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var callable = mmm.Let[gd.Callable](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, callable)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_force_integration_callback(impl func(ptr unsafe.Pointer, body gd.RID, callable gd.Callable, userdata gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var callable = mmm.Let[gd.Callable](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		var userdata = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, callable, userdata)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_set_ray_pickable(impl func(ptr unsafe.Pointer, body gd.RID, enable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var enable = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, enable)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_test_motion(impl func(ptr unsafe.Pointer, body gd.RID, from gd.Transform3D, motion gd.Vector3, margin gd.Float, max_collisions gd.Int, collide_separation_ray bool, recovery_as_collision bool, result *PhysicsServer3DExtensionMotionResult) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var from = gd.UnsafeGet[gd.Transform3D](p_args,1)
		var motion = gd.UnsafeGet[gd.Vector3](p_args,2)
		var margin = gd.UnsafeGet[gd.Float](p_args,3)
		var max_collisions = gd.UnsafeGet[gd.Int](p_args,4)
		var collide_separation_ray = gd.UnsafeGet[bool](p_args,5)
		var recovery_as_collision = gd.UnsafeGet[bool](p_args,6)
		var result = gd.UnsafeGet[*PhysicsServer3DExtensionMotionResult](p_args,7)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, from, motion, margin, max_collisions, collide_separation_ray, recovery_as_collision, result)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _body_get_direct_state(impl func(ptr unsafe.Pointer, body gd.RID) PhysicsDirectBodyState3D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_update_rendering_server(impl func(ptr unsafe.Pointer, body gd.RID, rendering_server_handler PhysicsServer3DRenderingServerHandler) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var rendering_server_handler PhysicsServer3DRenderingServerHandler
		rendering_server_handler.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, rendering_server_handler)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_set_space(impl func(ptr unsafe.Pointer, body gd.RID, space gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var space = gd.UnsafeGet[gd.RID](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, space)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_get_space(impl func(ptr unsafe.Pointer, body gd.RID) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_set_ray_pickable(impl func(ptr unsafe.Pointer, body gd.RID, enable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var enable = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, enable)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_set_collision_layer(impl func(ptr unsafe.Pointer, body gd.RID, layer gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var layer = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, layer)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_get_collision_layer(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_set_collision_mask(impl func(ptr unsafe.Pointer, body gd.RID, mask gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var mask = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, mask)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_get_collision_mask(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_add_collision_exception(impl func(ptr unsafe.Pointer, body gd.RID, body_b gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var body_b = gd.UnsafeGet[gd.RID](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, body_b)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_remove_collision_exception(impl func(ptr unsafe.Pointer, body gd.RID, body_b gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var body_b = gd.UnsafeGet[gd.RID](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, body_b)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_get_collision_exceptions(impl func(ptr unsafe.Pointer, body gd.RID) gd.ArrayOf[gd.RID], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_set_state(impl func(ptr unsafe.Pointer, body gd.RID, state PhysicsServer3DBodyState, variant gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var state = gd.UnsafeGet[PhysicsServer3DBodyState](p_args,1)
		var variant = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, state, variant)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_get_state(impl func(ptr unsafe.Pointer, body gd.RID, state PhysicsServer3DBodyState) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var state = gd.UnsafeGet[PhysicsServer3DBodyState](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, state)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_set_transform(impl func(ptr unsafe.Pointer, body gd.RID, transform gd.Transform3D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var transform = gd.UnsafeGet[gd.Transform3D](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, transform)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_set_simulation_precision(impl func(ptr unsafe.Pointer, body gd.RID, simulation_precision gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var simulation_precision = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, simulation_precision)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_get_simulation_precision(impl func(ptr unsafe.Pointer, body gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_set_total_mass(impl func(ptr unsafe.Pointer, body gd.RID, total_mass gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var total_mass = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, total_mass)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_get_total_mass(impl func(ptr unsafe.Pointer, body gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_set_linear_stiffness(impl func(ptr unsafe.Pointer, body gd.RID, linear_stiffness gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var linear_stiffness = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, linear_stiffness)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_get_linear_stiffness(impl func(ptr unsafe.Pointer, body gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_set_pressure_coefficient(impl func(ptr unsafe.Pointer, body gd.RID, pressure_coefficient gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var pressure_coefficient = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, pressure_coefficient)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_get_pressure_coefficient(impl func(ptr unsafe.Pointer, body gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_set_damping_coefficient(impl func(ptr unsafe.Pointer, body gd.RID, damping_coefficient gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var damping_coefficient = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, damping_coefficient)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_get_damping_coefficient(impl func(ptr unsafe.Pointer, body gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_set_drag_coefficient(impl func(ptr unsafe.Pointer, body gd.RID, drag_coefficient gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var drag_coefficient = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, drag_coefficient)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_get_drag_coefficient(impl func(ptr unsafe.Pointer, body gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_set_mesh(impl func(ptr unsafe.Pointer, body gd.RID, mesh gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var mesh = gd.UnsafeGet[gd.RID](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, mesh)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_get_bounds(impl func(ptr unsafe.Pointer, body gd.RID) gd.AABB, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_move_point(impl func(ptr unsafe.Pointer, body gd.RID, point_index gd.Int, global_position gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var point_index = gd.UnsafeGet[gd.Int](p_args,1)
		var global_position = gd.UnsafeGet[gd.Vector3](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, point_index, global_position)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_get_point_global_position(impl func(ptr unsafe.Pointer, body gd.RID, point_index gd.Int) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var point_index = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, point_index)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_remove_all_pinned_points(impl func(ptr unsafe.Pointer, body gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_pin_point(impl func(ptr unsafe.Pointer, body gd.RID, point_index gd.Int, pin bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var point_index = gd.UnsafeGet[gd.Int](p_args,1)
		var pin = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, body, point_index, pin)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _soft_body_is_point_pinned(impl func(ptr unsafe.Pointer, body gd.RID, point_index gd.Int) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var body = gd.UnsafeGet[gd.RID](p_args,0)
		var point_index = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, body, point_index)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _joint_create(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _joint_clear(impl func(ptr unsafe.Pointer, joint gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _joint_make_pin(impl func(ptr unsafe.Pointer, joint gd.RID, body_A gd.RID, local_A gd.Vector3, body_B gd.RID, local_B gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var body_A = gd.UnsafeGet[gd.RID](p_args,1)
		var local_A = gd.UnsafeGet[gd.Vector3](p_args,2)
		var body_B = gd.UnsafeGet[gd.RID](p_args,3)
		var local_B = gd.UnsafeGet[gd.Vector3](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, body_A, local_A, body_B, local_B)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _pin_joint_set_param(impl func(ptr unsafe.Pointer, joint gd.RID, param PhysicsServer3DPinJointParam, value gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer3DPinJointParam](p_args,1)
		var value = gd.UnsafeGet[gd.Float](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, param, value)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _pin_joint_get_param(impl func(ptr unsafe.Pointer, joint gd.RID, param PhysicsServer3DPinJointParam) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer3DPinJointParam](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint, param)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _pin_joint_set_local_a(impl func(ptr unsafe.Pointer, joint gd.RID, local_A gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var local_A = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, local_A)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _pin_joint_get_local_a(impl func(ptr unsafe.Pointer, joint gd.RID) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _pin_joint_set_local_b(impl func(ptr unsafe.Pointer, joint gd.RID, local_B gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var local_B = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, local_B)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _pin_joint_get_local_b(impl func(ptr unsafe.Pointer, joint gd.RID) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _joint_make_hinge(impl func(ptr unsafe.Pointer, joint gd.RID, body_A gd.RID, hinge_A gd.Transform3D, body_B gd.RID, hinge_B gd.Transform3D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var body_A = gd.UnsafeGet[gd.RID](p_args,1)
		var hinge_A = gd.UnsafeGet[gd.Transform3D](p_args,2)
		var body_B = gd.UnsafeGet[gd.RID](p_args,3)
		var hinge_B = gd.UnsafeGet[gd.Transform3D](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, body_A, hinge_A, body_B, hinge_B)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _joint_make_hinge_simple(impl func(ptr unsafe.Pointer, joint gd.RID, body_A gd.RID, pivot_A gd.Vector3, axis_A gd.Vector3, body_B gd.RID, pivot_B gd.Vector3, axis_B gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var body_A = gd.UnsafeGet[gd.RID](p_args,1)
		var pivot_A = gd.UnsafeGet[gd.Vector3](p_args,2)
		var axis_A = gd.UnsafeGet[gd.Vector3](p_args,3)
		var body_B = gd.UnsafeGet[gd.RID](p_args,4)
		var pivot_B = gd.UnsafeGet[gd.Vector3](p_args,5)
		var axis_B = gd.UnsafeGet[gd.Vector3](p_args,6)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, body_A, pivot_A, axis_A, body_B, pivot_B, axis_B)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _hinge_joint_set_param(impl func(ptr unsafe.Pointer, joint gd.RID, param PhysicsServer3DHingeJointParam, value gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer3DHingeJointParam](p_args,1)
		var value = gd.UnsafeGet[gd.Float](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, param, value)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _hinge_joint_get_param(impl func(ptr unsafe.Pointer, joint gd.RID, param PhysicsServer3DHingeJointParam) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer3DHingeJointParam](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint, param)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _hinge_joint_set_flag(impl func(ptr unsafe.Pointer, joint gd.RID, flag PhysicsServer3DHingeJointFlag, enabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var flag = gd.UnsafeGet[PhysicsServer3DHingeJointFlag](p_args,1)
		var enabled = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, flag, enabled)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _hinge_joint_get_flag(impl func(ptr unsafe.Pointer, joint gd.RID, flag PhysicsServer3DHingeJointFlag) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var flag = gd.UnsafeGet[PhysicsServer3DHingeJointFlag](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint, flag)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _joint_make_slider(impl func(ptr unsafe.Pointer, joint gd.RID, body_A gd.RID, local_ref_A gd.Transform3D, body_B gd.RID, local_ref_B gd.Transform3D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var body_A = gd.UnsafeGet[gd.RID](p_args,1)
		var local_ref_A = gd.UnsafeGet[gd.Transform3D](p_args,2)
		var body_B = gd.UnsafeGet[gd.RID](p_args,3)
		var local_ref_B = gd.UnsafeGet[gd.Transform3D](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, body_A, local_ref_A, body_B, local_ref_B)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _slider_joint_set_param(impl func(ptr unsafe.Pointer, joint gd.RID, param PhysicsServer3DSliderJointParam, value gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer3DSliderJointParam](p_args,1)
		var value = gd.UnsafeGet[gd.Float](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, param, value)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _slider_joint_get_param(impl func(ptr unsafe.Pointer, joint gd.RID, param PhysicsServer3DSliderJointParam) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer3DSliderJointParam](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint, param)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _joint_make_cone_twist(impl func(ptr unsafe.Pointer, joint gd.RID, body_A gd.RID, local_ref_A gd.Transform3D, body_B gd.RID, local_ref_B gd.Transform3D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var body_A = gd.UnsafeGet[gd.RID](p_args,1)
		var local_ref_A = gd.UnsafeGet[gd.Transform3D](p_args,2)
		var body_B = gd.UnsafeGet[gd.RID](p_args,3)
		var local_ref_B = gd.UnsafeGet[gd.Transform3D](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, body_A, local_ref_A, body_B, local_ref_B)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _cone_twist_joint_set_param(impl func(ptr unsafe.Pointer, joint gd.RID, param PhysicsServer3DConeTwistJointParam, value gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer3DConeTwistJointParam](p_args,1)
		var value = gd.UnsafeGet[gd.Float](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, param, value)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _cone_twist_joint_get_param(impl func(ptr unsafe.Pointer, joint gd.RID, param PhysicsServer3DConeTwistJointParam) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var param = gd.UnsafeGet[PhysicsServer3DConeTwistJointParam](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint, param)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _joint_make_generic_6dof(impl func(ptr unsafe.Pointer, joint gd.RID, body_A gd.RID, local_ref_A gd.Transform3D, body_B gd.RID, local_ref_B gd.Transform3D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var body_A = gd.UnsafeGet[gd.RID](p_args,1)
		var local_ref_A = gd.UnsafeGet[gd.Transform3D](p_args,2)
		var body_B = gd.UnsafeGet[gd.RID](p_args,3)
		var local_ref_B = gd.UnsafeGet[gd.Transform3D](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, body_A, local_ref_A, body_B, local_ref_B)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _generic_6dof_joint_set_param(impl func(ptr unsafe.Pointer, joint gd.RID, axis gd.Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam, value gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var axis = gd.UnsafeGet[gd.Vector3Axis](p_args,1)
		var param = gd.UnsafeGet[PhysicsServer3DG6DOFJointAxisParam](p_args,2)
		var value = gd.UnsafeGet[gd.Float](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, axis, param, value)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _generic_6dof_joint_get_param(impl func(ptr unsafe.Pointer, joint gd.RID, axis gd.Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var axis = gd.UnsafeGet[gd.Vector3Axis](p_args,1)
		var param = gd.UnsafeGet[PhysicsServer3DG6DOFJointAxisParam](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint, axis, param)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _generic_6dof_joint_set_flag(impl func(ptr unsafe.Pointer, joint gd.RID, axis gd.Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag, enable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var axis = gd.UnsafeGet[gd.Vector3Axis](p_args,1)
		var flag = gd.UnsafeGet[PhysicsServer3DG6DOFJointAxisFlag](p_args,2)
		var enable = gd.UnsafeGet[bool](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, axis, flag, enable)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _generic_6dof_joint_get_flag(impl func(ptr unsafe.Pointer, joint gd.RID, axis gd.Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var axis = gd.UnsafeGet[gd.Vector3Axis](p_args,1)
		var flag = gd.UnsafeGet[PhysicsServer3DG6DOFJointAxisFlag](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint, axis, flag)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _joint_get_type(impl func(ptr unsafe.Pointer, joint gd.RID) PhysicsServer3DJointType, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _joint_set_solver_priority(impl func(ptr unsafe.Pointer, joint gd.RID, priority gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var priority = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, priority)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _joint_get_solver_priority(impl func(ptr unsafe.Pointer, joint gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _joint_disable_collisions_between_bodies(impl func(ptr unsafe.Pointer, joint gd.RID, disable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		var disable = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, joint, disable)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _joint_is_disabled_collisions_between_bodies(impl func(ptr unsafe.Pointer, joint gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var joint = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, joint)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _free_rid(impl func(ptr unsafe.Pointer, rid gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, rid)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _set_active(impl func(ptr unsafe.Pointer, active bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var active = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, active)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _init(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _step(impl func(ptr unsafe.Pointer, step gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var step = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, step)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _sync(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _flush_queries(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _end_sync(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _finish(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _is_flushing_queries(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (PhysicsServer3DExtension) _get_process_info(impl func(ptr unsafe.Pointer, process_info PhysicsServer3DProcessInfo) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var process_info = gd.UnsafeGet[PhysicsServer3DProcessInfo](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, process_info)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self PhysicsServer3DExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_world_boundary_shape_create": return reflect.ValueOf(self._world_boundary_shape_create);
	case "_separation_ray_shape_create": return reflect.ValueOf(self._separation_ray_shape_create);
	case "_sphere_shape_create": return reflect.ValueOf(self._sphere_shape_create);
	case "_box_shape_create": return reflect.ValueOf(self._box_shape_create);
	case "_capsule_shape_create": return reflect.ValueOf(self._capsule_shape_create);
	case "_cylinder_shape_create": return reflect.ValueOf(self._cylinder_shape_create);
	case "_convex_polygon_shape_create": return reflect.ValueOf(self._convex_polygon_shape_create);
	case "_concave_polygon_shape_create": return reflect.ValueOf(self._concave_polygon_shape_create);
	case "_heightmap_shape_create": return reflect.ValueOf(self._heightmap_shape_create);
	case "_custom_shape_create": return reflect.ValueOf(self._custom_shape_create);
	case "_shape_set_data": return reflect.ValueOf(self._shape_set_data);
	case "_shape_set_custom_solver_bias": return reflect.ValueOf(self._shape_set_custom_solver_bias);
	case "_shape_set_margin": return reflect.ValueOf(self._shape_set_margin);
	case "_shape_get_margin": return reflect.ValueOf(self._shape_get_margin);
	case "_shape_get_type": return reflect.ValueOf(self._shape_get_type);
	case "_shape_get_data": return reflect.ValueOf(self._shape_get_data);
	case "_shape_get_custom_solver_bias": return reflect.ValueOf(self._shape_get_custom_solver_bias);
	case "_space_create": return reflect.ValueOf(self._space_create);
	case "_space_set_active": return reflect.ValueOf(self._space_set_active);
	case "_space_is_active": return reflect.ValueOf(self._space_is_active);
	case "_space_set_param": return reflect.ValueOf(self._space_set_param);
	case "_space_get_param": return reflect.ValueOf(self._space_get_param);
	case "_space_get_direct_state": return reflect.ValueOf(self._space_get_direct_state);
	case "_space_set_debug_contacts": return reflect.ValueOf(self._space_set_debug_contacts);
	case "_space_get_contacts": return reflect.ValueOf(self._space_get_contacts);
	case "_space_get_contact_count": return reflect.ValueOf(self._space_get_contact_count);
	case "_area_create": return reflect.ValueOf(self._area_create);
	case "_area_set_space": return reflect.ValueOf(self._area_set_space);
	case "_area_get_space": return reflect.ValueOf(self._area_get_space);
	case "_area_add_shape": return reflect.ValueOf(self._area_add_shape);
	case "_area_set_shape": return reflect.ValueOf(self._area_set_shape);
	case "_area_set_shape_transform": return reflect.ValueOf(self._area_set_shape_transform);
	case "_area_set_shape_disabled": return reflect.ValueOf(self._area_set_shape_disabled);
	case "_area_get_shape_count": return reflect.ValueOf(self._area_get_shape_count);
	case "_area_get_shape": return reflect.ValueOf(self._area_get_shape);
	case "_area_get_shape_transform": return reflect.ValueOf(self._area_get_shape_transform);
	case "_area_remove_shape": return reflect.ValueOf(self._area_remove_shape);
	case "_area_clear_shapes": return reflect.ValueOf(self._area_clear_shapes);
	case "_area_attach_object_instance_id": return reflect.ValueOf(self._area_attach_object_instance_id);
	case "_area_get_object_instance_id": return reflect.ValueOf(self._area_get_object_instance_id);
	case "_area_set_param": return reflect.ValueOf(self._area_set_param);
	case "_area_set_transform": return reflect.ValueOf(self._area_set_transform);
	case "_area_get_param": return reflect.ValueOf(self._area_get_param);
	case "_area_get_transform": return reflect.ValueOf(self._area_get_transform);
	case "_area_set_collision_layer": return reflect.ValueOf(self._area_set_collision_layer);
	case "_area_get_collision_layer": return reflect.ValueOf(self._area_get_collision_layer);
	case "_area_set_collision_mask": return reflect.ValueOf(self._area_set_collision_mask);
	case "_area_get_collision_mask": return reflect.ValueOf(self._area_get_collision_mask);
	case "_area_set_monitorable": return reflect.ValueOf(self._area_set_monitorable);
	case "_area_set_ray_pickable": return reflect.ValueOf(self._area_set_ray_pickable);
	case "_area_set_monitor_callback": return reflect.ValueOf(self._area_set_monitor_callback);
	case "_area_set_area_monitor_callback": return reflect.ValueOf(self._area_set_area_monitor_callback);
	case "_body_create": return reflect.ValueOf(self._body_create);
	case "_body_set_space": return reflect.ValueOf(self._body_set_space);
	case "_body_get_space": return reflect.ValueOf(self._body_get_space);
	case "_body_set_mode": return reflect.ValueOf(self._body_set_mode);
	case "_body_get_mode": return reflect.ValueOf(self._body_get_mode);
	case "_body_add_shape": return reflect.ValueOf(self._body_add_shape);
	case "_body_set_shape": return reflect.ValueOf(self._body_set_shape);
	case "_body_set_shape_transform": return reflect.ValueOf(self._body_set_shape_transform);
	case "_body_set_shape_disabled": return reflect.ValueOf(self._body_set_shape_disabled);
	case "_body_get_shape_count": return reflect.ValueOf(self._body_get_shape_count);
	case "_body_get_shape": return reflect.ValueOf(self._body_get_shape);
	case "_body_get_shape_transform": return reflect.ValueOf(self._body_get_shape_transform);
	case "_body_remove_shape": return reflect.ValueOf(self._body_remove_shape);
	case "_body_clear_shapes": return reflect.ValueOf(self._body_clear_shapes);
	case "_body_attach_object_instance_id": return reflect.ValueOf(self._body_attach_object_instance_id);
	case "_body_get_object_instance_id": return reflect.ValueOf(self._body_get_object_instance_id);
	case "_body_set_enable_continuous_collision_detection": return reflect.ValueOf(self._body_set_enable_continuous_collision_detection);
	case "_body_is_continuous_collision_detection_enabled": return reflect.ValueOf(self._body_is_continuous_collision_detection_enabled);
	case "_body_set_collision_layer": return reflect.ValueOf(self._body_set_collision_layer);
	case "_body_get_collision_layer": return reflect.ValueOf(self._body_get_collision_layer);
	case "_body_set_collision_mask": return reflect.ValueOf(self._body_set_collision_mask);
	case "_body_get_collision_mask": return reflect.ValueOf(self._body_get_collision_mask);
	case "_body_set_collision_priority": return reflect.ValueOf(self._body_set_collision_priority);
	case "_body_get_collision_priority": return reflect.ValueOf(self._body_get_collision_priority);
	case "_body_set_user_flags": return reflect.ValueOf(self._body_set_user_flags);
	case "_body_get_user_flags": return reflect.ValueOf(self._body_get_user_flags);
	case "_body_set_param": return reflect.ValueOf(self._body_set_param);
	case "_body_get_param": return reflect.ValueOf(self._body_get_param);
	case "_body_reset_mass_properties": return reflect.ValueOf(self._body_reset_mass_properties);
	case "_body_set_state": return reflect.ValueOf(self._body_set_state);
	case "_body_get_state": return reflect.ValueOf(self._body_get_state);
	case "_body_apply_central_impulse": return reflect.ValueOf(self._body_apply_central_impulse);
	case "_body_apply_impulse": return reflect.ValueOf(self._body_apply_impulse);
	case "_body_apply_torque_impulse": return reflect.ValueOf(self._body_apply_torque_impulse);
	case "_body_apply_central_force": return reflect.ValueOf(self._body_apply_central_force);
	case "_body_apply_force": return reflect.ValueOf(self._body_apply_force);
	case "_body_apply_torque": return reflect.ValueOf(self._body_apply_torque);
	case "_body_add_constant_central_force": return reflect.ValueOf(self._body_add_constant_central_force);
	case "_body_add_constant_force": return reflect.ValueOf(self._body_add_constant_force);
	case "_body_add_constant_torque": return reflect.ValueOf(self._body_add_constant_torque);
	case "_body_set_constant_force": return reflect.ValueOf(self._body_set_constant_force);
	case "_body_get_constant_force": return reflect.ValueOf(self._body_get_constant_force);
	case "_body_set_constant_torque": return reflect.ValueOf(self._body_set_constant_torque);
	case "_body_get_constant_torque": return reflect.ValueOf(self._body_get_constant_torque);
	case "_body_set_axis_velocity": return reflect.ValueOf(self._body_set_axis_velocity);
	case "_body_set_axis_lock": return reflect.ValueOf(self._body_set_axis_lock);
	case "_body_is_axis_locked": return reflect.ValueOf(self._body_is_axis_locked);
	case "_body_add_collision_exception": return reflect.ValueOf(self._body_add_collision_exception);
	case "_body_remove_collision_exception": return reflect.ValueOf(self._body_remove_collision_exception);
	case "_body_get_collision_exceptions": return reflect.ValueOf(self._body_get_collision_exceptions);
	case "_body_set_max_contacts_reported": return reflect.ValueOf(self._body_set_max_contacts_reported);
	case "_body_get_max_contacts_reported": return reflect.ValueOf(self._body_get_max_contacts_reported);
	case "_body_set_contacts_reported_depth_threshold": return reflect.ValueOf(self._body_set_contacts_reported_depth_threshold);
	case "_body_get_contacts_reported_depth_threshold": return reflect.ValueOf(self._body_get_contacts_reported_depth_threshold);
	case "_body_set_omit_force_integration": return reflect.ValueOf(self._body_set_omit_force_integration);
	case "_body_is_omitting_force_integration": return reflect.ValueOf(self._body_is_omitting_force_integration);
	case "_body_set_state_sync_callback": return reflect.ValueOf(self._body_set_state_sync_callback);
	case "_body_set_force_integration_callback": return reflect.ValueOf(self._body_set_force_integration_callback);
	case "_body_set_ray_pickable": return reflect.ValueOf(self._body_set_ray_pickable);
	case "_body_test_motion": return reflect.ValueOf(self._body_test_motion);
	case "_body_get_direct_state": return reflect.ValueOf(self._body_get_direct_state);
	case "_soft_body_create": return reflect.ValueOf(self._soft_body_create);
	case "_soft_body_update_rendering_server": return reflect.ValueOf(self._soft_body_update_rendering_server);
	case "_soft_body_set_space": return reflect.ValueOf(self._soft_body_set_space);
	case "_soft_body_get_space": return reflect.ValueOf(self._soft_body_get_space);
	case "_soft_body_set_ray_pickable": return reflect.ValueOf(self._soft_body_set_ray_pickable);
	case "_soft_body_set_collision_layer": return reflect.ValueOf(self._soft_body_set_collision_layer);
	case "_soft_body_get_collision_layer": return reflect.ValueOf(self._soft_body_get_collision_layer);
	case "_soft_body_set_collision_mask": return reflect.ValueOf(self._soft_body_set_collision_mask);
	case "_soft_body_get_collision_mask": return reflect.ValueOf(self._soft_body_get_collision_mask);
	case "_soft_body_add_collision_exception": return reflect.ValueOf(self._soft_body_add_collision_exception);
	case "_soft_body_remove_collision_exception": return reflect.ValueOf(self._soft_body_remove_collision_exception);
	case "_soft_body_get_collision_exceptions": return reflect.ValueOf(self._soft_body_get_collision_exceptions);
	case "_soft_body_set_state": return reflect.ValueOf(self._soft_body_set_state);
	case "_soft_body_get_state": return reflect.ValueOf(self._soft_body_get_state);
	case "_soft_body_set_transform": return reflect.ValueOf(self._soft_body_set_transform);
	case "_soft_body_set_simulation_precision": return reflect.ValueOf(self._soft_body_set_simulation_precision);
	case "_soft_body_get_simulation_precision": return reflect.ValueOf(self._soft_body_get_simulation_precision);
	case "_soft_body_set_total_mass": return reflect.ValueOf(self._soft_body_set_total_mass);
	case "_soft_body_get_total_mass": return reflect.ValueOf(self._soft_body_get_total_mass);
	case "_soft_body_set_linear_stiffness": return reflect.ValueOf(self._soft_body_set_linear_stiffness);
	case "_soft_body_get_linear_stiffness": return reflect.ValueOf(self._soft_body_get_linear_stiffness);
	case "_soft_body_set_pressure_coefficient": return reflect.ValueOf(self._soft_body_set_pressure_coefficient);
	case "_soft_body_get_pressure_coefficient": return reflect.ValueOf(self._soft_body_get_pressure_coefficient);
	case "_soft_body_set_damping_coefficient": return reflect.ValueOf(self._soft_body_set_damping_coefficient);
	case "_soft_body_get_damping_coefficient": return reflect.ValueOf(self._soft_body_get_damping_coefficient);
	case "_soft_body_set_drag_coefficient": return reflect.ValueOf(self._soft_body_set_drag_coefficient);
	case "_soft_body_get_drag_coefficient": return reflect.ValueOf(self._soft_body_get_drag_coefficient);
	case "_soft_body_set_mesh": return reflect.ValueOf(self._soft_body_set_mesh);
	case "_soft_body_get_bounds": return reflect.ValueOf(self._soft_body_get_bounds);
	case "_soft_body_move_point": return reflect.ValueOf(self._soft_body_move_point);
	case "_soft_body_get_point_global_position": return reflect.ValueOf(self._soft_body_get_point_global_position);
	case "_soft_body_remove_all_pinned_points": return reflect.ValueOf(self._soft_body_remove_all_pinned_points);
	case "_soft_body_pin_point": return reflect.ValueOf(self._soft_body_pin_point);
	case "_soft_body_is_point_pinned": return reflect.ValueOf(self._soft_body_is_point_pinned);
	case "_joint_create": return reflect.ValueOf(self._joint_create);
	case "_joint_clear": return reflect.ValueOf(self._joint_clear);
	case "_joint_make_pin": return reflect.ValueOf(self._joint_make_pin);
	case "_pin_joint_set_param": return reflect.ValueOf(self._pin_joint_set_param);
	case "_pin_joint_get_param": return reflect.ValueOf(self._pin_joint_get_param);
	case "_pin_joint_set_local_a": return reflect.ValueOf(self._pin_joint_set_local_a);
	case "_pin_joint_get_local_a": return reflect.ValueOf(self._pin_joint_get_local_a);
	case "_pin_joint_set_local_b": return reflect.ValueOf(self._pin_joint_set_local_b);
	case "_pin_joint_get_local_b": return reflect.ValueOf(self._pin_joint_get_local_b);
	case "_joint_make_hinge": return reflect.ValueOf(self._joint_make_hinge);
	case "_joint_make_hinge_simple": return reflect.ValueOf(self._joint_make_hinge_simple);
	case "_hinge_joint_set_param": return reflect.ValueOf(self._hinge_joint_set_param);
	case "_hinge_joint_get_param": return reflect.ValueOf(self._hinge_joint_get_param);
	case "_hinge_joint_set_flag": return reflect.ValueOf(self._hinge_joint_set_flag);
	case "_hinge_joint_get_flag": return reflect.ValueOf(self._hinge_joint_get_flag);
	case "_joint_make_slider": return reflect.ValueOf(self._joint_make_slider);
	case "_slider_joint_set_param": return reflect.ValueOf(self._slider_joint_set_param);
	case "_slider_joint_get_param": return reflect.ValueOf(self._slider_joint_get_param);
	case "_joint_make_cone_twist": return reflect.ValueOf(self._joint_make_cone_twist);
	case "_cone_twist_joint_set_param": return reflect.ValueOf(self._cone_twist_joint_set_param);
	case "_cone_twist_joint_get_param": return reflect.ValueOf(self._cone_twist_joint_get_param);
	case "_joint_make_generic_6dof": return reflect.ValueOf(self._joint_make_generic_6dof);
	case "_generic_6dof_joint_set_param": return reflect.ValueOf(self._generic_6dof_joint_set_param);
	case "_generic_6dof_joint_get_param": return reflect.ValueOf(self._generic_6dof_joint_get_param);
	case "_generic_6dof_joint_set_flag": return reflect.ValueOf(self._generic_6dof_joint_set_flag);
	case "_generic_6dof_joint_get_flag": return reflect.ValueOf(self._generic_6dof_joint_get_flag);
	case "_joint_get_type": return reflect.ValueOf(self._joint_get_type);
	case "_joint_set_solver_priority": return reflect.ValueOf(self._joint_set_solver_priority);
	case "_joint_get_solver_priority": return reflect.ValueOf(self._joint_get_solver_priority);
	case "_joint_disable_collisions_between_bodies": return reflect.ValueOf(self._joint_disable_collisions_between_bodies);
	case "_joint_is_disabled_collisions_between_bodies": return reflect.ValueOf(self._joint_is_disabled_collisions_between_bodies);
	case "_free_rid": return reflect.ValueOf(self._free_rid);
	case "_set_active": return reflect.ValueOf(self._set_active);
	case "_init": return reflect.ValueOf(self._init);
	case "_step": return reflect.ValueOf(self._step);
	case "_sync": return reflect.ValueOf(self._sync);
	case "_flush_queries": return reflect.ValueOf(self._flush_queries);
	case "_end_sync": return reflect.ValueOf(self._end_sync);
	case "_finish": return reflect.ValueOf(self._finish);
	case "_is_flushing_queries": return reflect.ValueOf(self._is_flushing_queries);
	case "_get_process_info": return reflect.ValueOf(self._get_process_info);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsServer3DManager struct {_ [0]*PhysicsServer3DManager; ptr gd.Pointer}

//go:nosplit
func (self PhysicsServer3DManager) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsServer3DManager) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsServer3DManager) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsServer3DManager) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsServer3DManager) AsPhysicsServer3DManager() [1]PhysicsServer3DManager { return [1]PhysicsServer3DManager{self} }

//go:nosplit

func (self PhysicsServer3DManager) IsSingleton() {}

func (self PhysicsServer3DManager) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsServer3DRenderingServerHandler struct {_ [0]*PhysicsServer3DRenderingServerHandler; ptr gd.Pointer}

//go:nosplit
func (self PhysicsServer3DRenderingServerHandler) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsServer3DRenderingServerHandler) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsServer3DRenderingServerHandler) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsServer3DRenderingServerHandler) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsServer3DRenderingServerHandler) AsPhysicsServer3DRenderingServerHandler() [1]PhysicsServer3DRenderingServerHandler { return [1]PhysicsServer3DRenderingServerHandler{self} }

/*
Called by the [PhysicsServer3D] to set the position for the [SoftBody3D] vertex at the index specified by [param vertex_id].
[b]Note:[/b] The [param vertex] parameter used to be of type [code]const void*[/code] prior to Godot 4.2.
*/
func (PhysicsServer3DRenderingServerHandler) _set_vertex(impl func(ptr unsafe.Pointer, vertex_id gd.Int, vertex gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var vertex_id = gd.UnsafeGet[gd.Int](p_args,0)
		var vertex = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, vertex_id, vertex)
		ctx.End()
	}
}

/*
Called by the [PhysicsServer3D] to set the normal for the [SoftBody3D] vertex at the index specified by [param vertex_id].
[b]Note:[/b] The [param normal] parameter used to be of type [code]const void*[/code] prior to Godot 4.2.
*/
func (PhysicsServer3DRenderingServerHandler) _set_normal(impl func(ptr unsafe.Pointer, vertex_id gd.Int, normal gd.Vector3) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var vertex_id = gd.UnsafeGet[gd.Int](p_args,0)
		var normal = gd.UnsafeGet[gd.Vector3](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, vertex_id, normal)
		ctx.End()
	}
}

/*
Called by the [PhysicsServer3D] to set the bounding box for the [SoftBody3D].
*/
func (PhysicsServer3DRenderingServerHandler) _set_aabb(impl func(ptr unsafe.Pointer, aabb gd.AABB) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var aabb = gd.UnsafeGet[gd.AABB](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, aabb)
		ctx.End()
	}
}

func (self PhysicsServer3DRenderingServerHandler) Virtual(name string) reflect.Value {
	switch name {
	case "_set_vertex": return reflect.ValueOf(self._set_vertex);
	case "_set_normal": return reflect.ValueOf(self._set_normal);
	case "_set_aabb": return reflect.ValueOf(self._set_aabb);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsShapeQueryParameters2D struct {_ [0]*PhysicsShapeQueryParameters2D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsShapeQueryParameters2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsShapeQueryParameters2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsShapeQueryParameters2D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsShapeQueryParameters2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsShapeQueryParameters2D) AsPhysicsShapeQueryParameters2D() [1]PhysicsShapeQueryParameters2D { return [1]PhysicsShapeQueryParameters2D{self} }


//go:nosplit
func (self PhysicsShapeQueryParameters2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PhysicsShapeQueryParameters2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsShapeQueryParameters3D struct {_ [0]*PhysicsShapeQueryParameters3D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsShapeQueryParameters3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsShapeQueryParameters3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsShapeQueryParameters3D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsShapeQueryParameters3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsShapeQueryParameters3D) AsPhysicsShapeQueryParameters3D() [1]PhysicsShapeQueryParameters3D { return [1]PhysicsShapeQueryParameters3D{self} }


//go:nosplit
func (self PhysicsShapeQueryParameters3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PhysicsShapeQueryParameters3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsTestMotionParameters2D struct {_ [0]*PhysicsTestMotionParameters2D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsTestMotionParameters2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsTestMotionParameters2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsTestMotionParameters2D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsTestMotionParameters2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsTestMotionParameters2D) AsPhysicsTestMotionParameters2D() [1]PhysicsTestMotionParameters2D { return [1]PhysicsTestMotionParameters2D{self} }


//go:nosplit
func (self PhysicsTestMotionParameters2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PhysicsTestMotionParameters2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsTestMotionParameters3D struct {_ [0]*PhysicsTestMotionParameters3D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsTestMotionParameters3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsTestMotionParameters3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsTestMotionParameters3D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsTestMotionParameters3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsTestMotionParameters3D) AsPhysicsTestMotionParameters3D() [1]PhysicsTestMotionParameters3D { return [1]PhysicsTestMotionParameters3D{self} }


//go:nosplit
func (self PhysicsTestMotionParameters3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PhysicsTestMotionParameters3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsTestMotionResult2D struct {_ [0]*PhysicsTestMotionResult2D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsTestMotionResult2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsTestMotionResult2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsTestMotionResult2D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsTestMotionResult2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsTestMotionResult2D) AsPhysicsTestMotionResult2D() [1]PhysicsTestMotionResult2D { return [1]PhysicsTestMotionResult2D{self} }


//go:nosplit
func (self PhysicsTestMotionResult2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PhysicsTestMotionResult2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PhysicsTestMotionResult3D struct {_ [0]*PhysicsTestMotionResult3D; ptr gd.Pointer}

//go:nosplit
func (self PhysicsTestMotionResult3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PhysicsTestMotionResult3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PhysicsTestMotionResult3D) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsTestMotionResult3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PhysicsTestMotionResult3D) AsPhysicsTestMotionResult3D() [1]PhysicsTestMotionResult3D { return [1]PhysicsTestMotionResult3D{self} }


//go:nosplit
func (self PhysicsTestMotionResult3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PhysicsTestMotionResult3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PinJoint2D struct {_ [0]*PinJoint2D; ptr gd.Pointer}

//go:nosplit
func (self PinJoint2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PinJoint2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PinJoint2D) Super() [1]Joint2D { return *(*[1]Joint2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PinJoint2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PinJoint2D) AsPinJoint2D() [1]PinJoint2D { return [1]PinJoint2D{self} }


//go:nosplit
func (self PinJoint2D) AsJoint2D() [1]Joint2D { return *(*[1]Joint2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PinJoint2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PinJoint2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PinJoint2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self PinJoint2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type PinJoint3DParam int64
type PinJoint3D struct {_ [0]*PinJoint3D; ptr gd.Pointer}

//go:nosplit
func (self PinJoint3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PinJoint3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PinJoint3D) Super() [1]Joint3D { return *(*[1]Joint3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PinJoint3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PinJoint3D) AsPinJoint3D() [1]PinJoint3D { return [1]PinJoint3D{self} }


//go:nosplit
func (self PinJoint3D) AsJoint3D() [1]Joint3D { return *(*[1]Joint3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PinJoint3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PinJoint3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self PinJoint3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PlaceholderCubemap struct {_ [0]*PlaceholderCubemap; ptr gd.Pointer}

//go:nosplit
func (self PlaceholderCubemap) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PlaceholderCubemap) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PlaceholderCubemap) Super() [1]PlaceholderTextureLayered { return *(*[1]PlaceholderTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderCubemap) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderCubemap) AsPlaceholderCubemap() [1]PlaceholderCubemap { return [1]PlaceholderCubemap{self} }


//go:nosplit
func (self PlaceholderCubemap) AsPlaceholderTextureLayered() [1]PlaceholderTextureLayered { return *(*[1]PlaceholderTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderCubemap) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderCubemap) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderCubemap) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderCubemap) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PlaceholderCubemap) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PlaceholderCubemapArray struct {_ [0]*PlaceholderCubemapArray; ptr gd.Pointer}

//go:nosplit
func (self PlaceholderCubemapArray) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PlaceholderCubemapArray) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PlaceholderCubemapArray) Super() [1]PlaceholderTextureLayered { return *(*[1]PlaceholderTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderCubemapArray) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderCubemapArray) AsPlaceholderCubemapArray() [1]PlaceholderCubemapArray { return [1]PlaceholderCubemapArray{self} }


//go:nosplit
func (self PlaceholderCubemapArray) AsPlaceholderTextureLayered() [1]PlaceholderTextureLayered { return *(*[1]PlaceholderTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderCubemapArray) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderCubemapArray) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderCubemapArray) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderCubemapArray) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PlaceholderCubemapArray) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PlaceholderMaterial struct {_ [0]*PlaceholderMaterial; ptr gd.Pointer}

//go:nosplit
func (self PlaceholderMaterial) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PlaceholderMaterial) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PlaceholderMaterial) Super() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderMaterial) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderMaterial) AsPlaceholderMaterial() [1]PlaceholderMaterial { return [1]PlaceholderMaterial{self} }


//go:nosplit
func (self PlaceholderMaterial) AsMaterial() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderMaterial) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderMaterial) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PlaceholderMaterial) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PlaceholderMesh struct {_ [0]*PlaceholderMesh; ptr gd.Pointer}

//go:nosplit
func (self PlaceholderMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PlaceholderMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PlaceholderMesh) Super() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderMesh) AsPlaceholderMesh() [1]PlaceholderMesh { return [1]PlaceholderMesh{self} }


//go:nosplit
func (self PlaceholderMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PlaceholderMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PlaceholderTexture2D struct {_ [0]*PlaceholderTexture2D; ptr gd.Pointer}

//go:nosplit
func (self PlaceholderTexture2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PlaceholderTexture2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PlaceholderTexture2D) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture2D) AsPlaceholderTexture2D() [1]PlaceholderTexture2D { return [1]PlaceholderTexture2D{self} }


//go:nosplit
func (self PlaceholderTexture2D) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture2D) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PlaceholderTexture2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PlaceholderTexture2DArray struct {_ [0]*PlaceholderTexture2DArray; ptr gd.Pointer}

//go:nosplit
func (self PlaceholderTexture2DArray) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PlaceholderTexture2DArray) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PlaceholderTexture2DArray) Super() [1]PlaceholderTextureLayered { return *(*[1]PlaceholderTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture2DArray) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture2DArray) AsPlaceholderTexture2DArray() [1]PlaceholderTexture2DArray { return [1]PlaceholderTexture2DArray{self} }


//go:nosplit
func (self PlaceholderTexture2DArray) AsPlaceholderTextureLayered() [1]PlaceholderTextureLayered { return *(*[1]PlaceholderTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture2DArray) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture2DArray) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture2DArray) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture2DArray) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PlaceholderTexture2DArray) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PlaceholderTexture3D struct {_ [0]*PlaceholderTexture3D; ptr gd.Pointer}

//go:nosplit
func (self PlaceholderTexture3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PlaceholderTexture3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PlaceholderTexture3D) Super() [1]Texture3D { return *(*[1]Texture3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture3D) AsPlaceholderTexture3D() [1]PlaceholderTexture3D { return [1]PlaceholderTexture3D{self} }


//go:nosplit
func (self PlaceholderTexture3D) AsTexture3D() [1]Texture3D { return *(*[1]Texture3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture3D) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTexture3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PlaceholderTexture3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PlaceholderTextureLayered struct {_ [0]*PlaceholderTextureLayered; ptr gd.Pointer}

//go:nosplit
func (self PlaceholderTextureLayered) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PlaceholderTextureLayered) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PlaceholderTextureLayered) Super() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTextureLayered) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTextureLayered) AsPlaceholderTextureLayered() [1]PlaceholderTextureLayered { return [1]PlaceholderTextureLayered{self} }


//go:nosplit
func (self PlaceholderTextureLayered) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTextureLayered) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTextureLayered) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaceholderTextureLayered) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PlaceholderTextureLayered) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type PlaneMeshOrientation int64
type PlaneMesh struct {_ [0]*PlaneMesh; ptr gd.Pointer}

//go:nosplit
func (self PlaneMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PlaneMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PlaneMesh) Super() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaneMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaneMesh) AsPlaneMesh() [1]PlaneMesh { return [1]PlaneMesh{self} }


//go:nosplit
func (self PlaneMesh) AsPrimitiveMesh() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaneMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaneMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PlaneMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PlaneMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PointLight2D struct {_ [0]*PointLight2D; ptr gd.Pointer}

//go:nosplit
func (self PointLight2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PointLight2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PointLight2D) Super() [1]Light2D { return *(*[1]Light2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PointLight2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PointLight2D) AsPointLight2D() [1]PointLight2D { return [1]PointLight2D{self} }


//go:nosplit
func (self PointLight2D) AsLight2D() [1]Light2D { return *(*[1]Light2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PointLight2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PointLight2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PointLight2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self PointLight2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PointMesh struct {_ [0]*PointMesh; ptr gd.Pointer}

//go:nosplit
func (self PointMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PointMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PointMesh) Super() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PointMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PointMesh) AsPointMesh() [1]PointMesh { return [1]PointMesh{self} }


//go:nosplit
func (self PointMesh) AsPrimitiveMesh() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PointMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PointMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PointMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PointMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Polygon2D struct {_ [0]*Polygon2D; ptr gd.Pointer}

//go:nosplit
func (self Polygon2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Polygon2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Polygon2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Polygon2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Polygon2D) AsPolygon2D() [1]Polygon2D { return [1]Polygon2D{self} }


//go:nosplit
func (self Polygon2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Polygon2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Polygon2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Polygon2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PolygonOccluder3D struct {_ [0]*PolygonOccluder3D; ptr gd.Pointer}

//go:nosplit
func (self PolygonOccluder3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PolygonOccluder3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PolygonOccluder3D) Super() [1]Occluder3D { return *(*[1]Occluder3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PolygonOccluder3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PolygonOccluder3D) AsPolygonOccluder3D() [1]PolygonOccluder3D { return [1]PolygonOccluder3D{self} }


//go:nosplit
func (self PolygonOccluder3D) AsOccluder3D() [1]Occluder3D { return *(*[1]Occluder3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PolygonOccluder3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PolygonOccluder3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PolygonOccluder3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PolygonPathFinder struct {_ [0]*PolygonPathFinder; ptr gd.Pointer}

//go:nosplit
func (self PolygonPathFinder) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PolygonPathFinder) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PolygonPathFinder) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PolygonPathFinder) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PolygonPathFinder) AsPolygonPathFinder() [1]PolygonPathFinder { return [1]PolygonPathFinder{self} }


//go:nosplit
func (self PolygonPathFinder) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PolygonPathFinder) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PolygonPathFinder) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Popup struct {_ [0]*Popup; ptr gd.Pointer}

//go:nosplit
func (self Popup) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Popup) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Popup) Super() [1]Window { return *(*[1]Window)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Popup) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Popup) AsPopup() [1]Popup { return [1]Popup{self} }


//go:nosplit
func (self Popup) AsWindow() [1]Window { return *(*[1]Window)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Popup) AsViewport() [1]Viewport { return *(*[1]Viewport)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Popup) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Popup) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PopupMenu struct {_ [0]*PopupMenu; ptr gd.Pointer}

//go:nosplit
func (self PopupMenu) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PopupMenu) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PopupMenu) Super() [1]Popup { return *(*[1]Popup)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PopupMenu) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PopupMenu) AsPopupMenu() [1]PopupMenu { return [1]PopupMenu{self} }


//go:nosplit
func (self PopupMenu) AsPopup() [1]Popup { return *(*[1]Popup)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PopupMenu) AsWindow() [1]Window { return *(*[1]Window)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PopupMenu) AsViewport() [1]Viewport { return *(*[1]Viewport)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PopupMenu) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self PopupMenu) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PopupPanel struct {_ [0]*PopupPanel; ptr gd.Pointer}

//go:nosplit
func (self PopupPanel) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PopupPanel) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PopupPanel) Super() [1]Popup { return *(*[1]Popup)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PopupPanel) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PopupPanel) AsPopupPanel() [1]PopupPanel { return [1]PopupPanel{self} }


//go:nosplit
func (self PopupPanel) AsPopup() [1]Popup { return *(*[1]Popup)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PopupPanel) AsWindow() [1]Window { return *(*[1]Window)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PopupPanel) AsViewport() [1]Viewport { return *(*[1]Viewport)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PopupPanel) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self PopupPanel) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type PortableCompressedTexture2DCompressionMode int64
type PortableCompressedTexture2D struct {_ [0]*PortableCompressedTexture2D; ptr gd.Pointer}

//go:nosplit
func (self PortableCompressedTexture2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PortableCompressedTexture2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PortableCompressedTexture2D) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PortableCompressedTexture2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PortableCompressedTexture2D) AsPortableCompressedTexture2D() [1]PortableCompressedTexture2D { return [1]PortableCompressedTexture2D{self} }


//go:nosplit
func (self PortableCompressedTexture2D) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PortableCompressedTexture2D) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PortableCompressedTexture2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PortableCompressedTexture2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PortableCompressedTexture2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PrimitiveMesh struct {_ [0]*PrimitiveMesh; ptr gd.Pointer}

//go:nosplit
func (self PrimitiveMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PrimitiveMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PrimitiveMesh) Super() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PrimitiveMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PrimitiveMesh) AsPrimitiveMesh() [1]PrimitiveMesh { return [1]PrimitiveMesh{self} }


//go:nosplit
func (self PrimitiveMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PrimitiveMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PrimitiveMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Override this method to customize how this primitive mesh should be generated. Should return an [Array] where each element is another Array of values required for the mesh (see the [enum Mesh.ArrayType] constants).
*/
func (PrimitiveMesh) _create_mesh_array(impl func(ptr unsafe.Pointer) gd.Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (self PrimitiveMesh) Virtual(name string) reflect.Value {
	switch name {
	case "_create_mesh_array": return reflect.ValueOf(self._create_mesh_array);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PrismMesh struct {_ [0]*PrismMesh; ptr gd.Pointer}

//go:nosplit
func (self PrismMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PrismMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PrismMesh) Super() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PrismMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PrismMesh) AsPrismMesh() [1]PrismMesh { return [1]PrismMesh{self} }


//go:nosplit
func (self PrismMesh) AsPrimitiveMesh() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PrismMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PrismMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PrismMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PrismMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ProceduralSkyMaterial struct {_ [0]*ProceduralSkyMaterial; ptr gd.Pointer}

//go:nosplit
func (self ProceduralSkyMaterial) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ProceduralSkyMaterial) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ProceduralSkyMaterial) Super() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ProceduralSkyMaterial) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ProceduralSkyMaterial) AsProceduralSkyMaterial() [1]ProceduralSkyMaterial { return [1]ProceduralSkyMaterial{self} }


//go:nosplit
func (self ProceduralSkyMaterial) AsMaterial() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ProceduralSkyMaterial) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ProceduralSkyMaterial) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ProceduralSkyMaterial) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ProgressBarFillMode int64
type ProgressBar struct {_ [0]*ProgressBar; ptr gd.Pointer}

//go:nosplit
func (self ProgressBar) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ProgressBar) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ProgressBar) Super() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ProgressBar) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ProgressBar) AsProgressBar() [1]ProgressBar { return [1]ProgressBar{self} }


//go:nosplit
func (self ProgressBar) AsRange() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ProgressBar) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ProgressBar) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ProgressBar) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ProgressBar) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ProjectSettings struct {_ [0]*ProjectSettings; ptr gd.Pointer}

//go:nosplit
func (self ProjectSettings) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ProjectSettings) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ProjectSettings) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ProjectSettings) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ProjectSettings) AsProjectSettings() [1]ProjectSettings { return [1]ProjectSettings{self} }

//go:nosplit

func (self ProjectSettings) IsSingleton() {}

func (self ProjectSettings) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type PropertyTweener struct {_ [0]*PropertyTweener; ptr gd.Pointer}

//go:nosplit
func (self PropertyTweener) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *PropertyTweener) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self PropertyTweener) Super() [1]Tweener { return *(*[1]Tweener)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PropertyTweener) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PropertyTweener) AsPropertyTweener() [1]PropertyTweener { return [1]PropertyTweener{self} }


//go:nosplit
func (self PropertyTweener) AsTweener() [1]Tweener { return *(*[1]Tweener)(unsafe.Pointer(&self)) }


//go:nosplit
func (self PropertyTweener) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self PropertyTweener) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type QuadMesh struct {_ [0]*QuadMesh; ptr gd.Pointer}

//go:nosplit
func (self QuadMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *QuadMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self QuadMesh) Super() [1]PlaneMesh { return *(*[1]PlaneMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self QuadMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self QuadMesh) AsQuadMesh() [1]QuadMesh { return [1]QuadMesh{self} }


//go:nosplit
func (self QuadMesh) AsPlaneMesh() [1]PlaneMesh { return *(*[1]PlaneMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self QuadMesh) AsPrimitiveMesh() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self QuadMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self QuadMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self QuadMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self QuadMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type QuadOccluder3D struct {_ [0]*QuadOccluder3D; ptr gd.Pointer}

//go:nosplit
func (self QuadOccluder3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *QuadOccluder3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self QuadOccluder3D) Super() [1]Occluder3D { return *(*[1]Occluder3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self QuadOccluder3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self QuadOccluder3D) AsQuadOccluder3D() [1]QuadOccluder3D { return [1]QuadOccluder3D{self} }


//go:nosplit
func (self QuadOccluder3D) AsOccluder3D() [1]Occluder3D { return *(*[1]Occluder3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self QuadOccluder3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self QuadOccluder3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self QuadOccluder3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDAttachmentFormat struct {_ [0]*RDAttachmentFormat; ptr gd.Pointer}

//go:nosplit
func (self RDAttachmentFormat) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDAttachmentFormat) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDAttachmentFormat) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDAttachmentFormat) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDAttachmentFormat) AsRDAttachmentFormat() [1]RDAttachmentFormat { return [1]RDAttachmentFormat{self} }


//go:nosplit
func (self RDAttachmentFormat) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDAttachmentFormat) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDFramebufferPass struct {_ [0]*RDFramebufferPass; ptr gd.Pointer}

//go:nosplit
func (self RDFramebufferPass) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDFramebufferPass) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDFramebufferPass) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDFramebufferPass) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDFramebufferPass) AsRDFramebufferPass() [1]RDFramebufferPass { return [1]RDFramebufferPass{self} }


//go:nosplit
func (self RDFramebufferPass) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDFramebufferPass) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDPipelineColorBlendState struct {_ [0]*RDPipelineColorBlendState; ptr gd.Pointer}

//go:nosplit
func (self RDPipelineColorBlendState) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDPipelineColorBlendState) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDPipelineColorBlendState) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDPipelineColorBlendState) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDPipelineColorBlendState) AsRDPipelineColorBlendState() [1]RDPipelineColorBlendState { return [1]RDPipelineColorBlendState{self} }


//go:nosplit
func (self RDPipelineColorBlendState) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDPipelineColorBlendState) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDPipelineColorBlendStateAttachment struct {_ [0]*RDPipelineColorBlendStateAttachment; ptr gd.Pointer}

//go:nosplit
func (self RDPipelineColorBlendStateAttachment) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDPipelineColorBlendStateAttachment) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDPipelineColorBlendStateAttachment) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDPipelineColorBlendStateAttachment) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDPipelineColorBlendStateAttachment) AsRDPipelineColorBlendStateAttachment() [1]RDPipelineColorBlendStateAttachment { return [1]RDPipelineColorBlendStateAttachment{self} }


//go:nosplit
func (self RDPipelineColorBlendStateAttachment) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDPipelineColorBlendStateAttachment) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDPipelineDepthStencilState struct {_ [0]*RDPipelineDepthStencilState; ptr gd.Pointer}

//go:nosplit
func (self RDPipelineDepthStencilState) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDPipelineDepthStencilState) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDPipelineDepthStencilState) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDPipelineDepthStencilState) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDPipelineDepthStencilState) AsRDPipelineDepthStencilState() [1]RDPipelineDepthStencilState { return [1]RDPipelineDepthStencilState{self} }


//go:nosplit
func (self RDPipelineDepthStencilState) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDPipelineDepthStencilState) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDPipelineMultisampleState struct {_ [0]*RDPipelineMultisampleState; ptr gd.Pointer}

//go:nosplit
func (self RDPipelineMultisampleState) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDPipelineMultisampleState) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDPipelineMultisampleState) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDPipelineMultisampleState) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDPipelineMultisampleState) AsRDPipelineMultisampleState() [1]RDPipelineMultisampleState { return [1]RDPipelineMultisampleState{self} }


//go:nosplit
func (self RDPipelineMultisampleState) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDPipelineMultisampleState) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDPipelineRasterizationState struct {_ [0]*RDPipelineRasterizationState; ptr gd.Pointer}

//go:nosplit
func (self RDPipelineRasterizationState) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDPipelineRasterizationState) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDPipelineRasterizationState) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDPipelineRasterizationState) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDPipelineRasterizationState) AsRDPipelineRasterizationState() [1]RDPipelineRasterizationState { return [1]RDPipelineRasterizationState{self} }


//go:nosplit
func (self RDPipelineRasterizationState) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDPipelineRasterizationState) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDPipelineSpecializationConstant struct {_ [0]*RDPipelineSpecializationConstant; ptr gd.Pointer}

//go:nosplit
func (self RDPipelineSpecializationConstant) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDPipelineSpecializationConstant) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDPipelineSpecializationConstant) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDPipelineSpecializationConstant) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDPipelineSpecializationConstant) AsRDPipelineSpecializationConstant() [1]RDPipelineSpecializationConstant { return [1]RDPipelineSpecializationConstant{self} }


//go:nosplit
func (self RDPipelineSpecializationConstant) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDPipelineSpecializationConstant) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDSamplerState struct {_ [0]*RDSamplerState; ptr gd.Pointer}

//go:nosplit
func (self RDSamplerState) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDSamplerState) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDSamplerState) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDSamplerState) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDSamplerState) AsRDSamplerState() [1]RDSamplerState { return [1]RDSamplerState{self} }


//go:nosplit
func (self RDSamplerState) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDSamplerState) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDShaderFile struct {_ [0]*RDShaderFile; ptr gd.Pointer}

//go:nosplit
func (self RDShaderFile) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDShaderFile) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDShaderFile) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDShaderFile) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDShaderFile) AsRDShaderFile() [1]RDShaderFile { return [1]RDShaderFile{self} }


//go:nosplit
func (self RDShaderFile) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDShaderFile) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDShaderFile) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDShaderSPIRV struct {_ [0]*RDShaderSPIRV; ptr gd.Pointer}

//go:nosplit
func (self RDShaderSPIRV) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDShaderSPIRV) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDShaderSPIRV) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDShaderSPIRV) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDShaderSPIRV) AsRDShaderSPIRV() [1]RDShaderSPIRV { return [1]RDShaderSPIRV{self} }


//go:nosplit
func (self RDShaderSPIRV) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDShaderSPIRV) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDShaderSPIRV) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDShaderSource struct {_ [0]*RDShaderSource; ptr gd.Pointer}

//go:nosplit
func (self RDShaderSource) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDShaderSource) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDShaderSource) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDShaderSource) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDShaderSource) AsRDShaderSource() [1]RDShaderSource { return [1]RDShaderSource{self} }


//go:nosplit
func (self RDShaderSource) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDShaderSource) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDTextureFormat struct {_ [0]*RDTextureFormat; ptr gd.Pointer}

//go:nosplit
func (self RDTextureFormat) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDTextureFormat) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDTextureFormat) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDTextureFormat) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDTextureFormat) AsRDTextureFormat() [1]RDTextureFormat { return [1]RDTextureFormat{self} }


//go:nosplit
func (self RDTextureFormat) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDTextureFormat) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDTextureView struct {_ [0]*RDTextureView; ptr gd.Pointer}

//go:nosplit
func (self RDTextureView) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDTextureView) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDTextureView) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDTextureView) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDTextureView) AsRDTextureView() [1]RDTextureView { return [1]RDTextureView{self} }


//go:nosplit
func (self RDTextureView) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDTextureView) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDUniform struct {_ [0]*RDUniform; ptr gd.Pointer}

//go:nosplit
func (self RDUniform) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDUniform) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDUniform) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDUniform) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDUniform) AsRDUniform() [1]RDUniform { return [1]RDUniform{self} }


//go:nosplit
func (self RDUniform) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDUniform) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RDVertexAttribute struct {_ [0]*RDVertexAttribute; ptr gd.Pointer}

//go:nosplit
func (self RDVertexAttribute) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RDVertexAttribute) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RDVertexAttribute) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDVertexAttribute) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RDVertexAttribute) AsRDVertexAttribute() [1]RDVertexAttribute { return [1]RDVertexAttribute{self} }


//go:nosplit
func (self RDVertexAttribute) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RDVertexAttribute) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RandomNumberGenerator struct {_ [0]*RandomNumberGenerator; ptr gd.Pointer}

//go:nosplit
func (self RandomNumberGenerator) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RandomNumberGenerator) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RandomNumberGenerator) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RandomNumberGenerator) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RandomNumberGenerator) AsRandomNumberGenerator() [1]RandomNumberGenerator { return [1]RandomNumberGenerator{self} }


//go:nosplit
func (self RandomNumberGenerator) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RandomNumberGenerator) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Range struct {_ [0]*Range; ptr gd.Pointer}

//go:nosplit
func (self Range) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Range) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Range) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Range) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Range) AsRange() [1]Range { return [1]Range{self} }


//go:nosplit
func (self Range) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Range) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Range) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Called when the [Range]'s value is changed (following the same conditions as [signal value_changed]).
*/
func (Range) _value_changed(impl func(ptr unsafe.Pointer, new_value gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var new_value = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, new_value)
		ctx.End()
	}
}

func (self Range) Virtual(name string) reflect.Value {
	switch name {
	case "_value_changed": return reflect.ValueOf(self._value_changed);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RayCast2D struct {_ [0]*RayCast2D; ptr gd.Pointer}

//go:nosplit
func (self RayCast2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RayCast2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RayCast2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RayCast2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RayCast2D) AsRayCast2D() [1]RayCast2D { return [1]RayCast2D{self} }


//go:nosplit
func (self RayCast2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RayCast2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RayCast2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self RayCast2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RayCast3D struct {_ [0]*RayCast3D; ptr gd.Pointer}

//go:nosplit
func (self RayCast3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RayCast3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RayCast3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RayCast3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RayCast3D) AsRayCast3D() [1]RayCast3D { return [1]RayCast3D{self} }


//go:nosplit
func (self RayCast3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RayCast3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self RayCast3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RectangleShape2D struct {_ [0]*RectangleShape2D; ptr gd.Pointer}

//go:nosplit
func (self RectangleShape2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RectangleShape2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RectangleShape2D) Super() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RectangleShape2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RectangleShape2D) AsRectangleShape2D() [1]RectangleShape2D { return [1]RectangleShape2D{self} }


//go:nosplit
func (self RectangleShape2D) AsShape2D() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RectangleShape2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RectangleShape2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RectangleShape2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ReferenceRect struct {_ [0]*ReferenceRect; ptr gd.Pointer}

//go:nosplit
func (self ReferenceRect) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ReferenceRect) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ReferenceRect) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ReferenceRect) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ReferenceRect) AsReferenceRect() [1]ReferenceRect { return [1]ReferenceRect{self} }


//go:nosplit
func (self ReferenceRect) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ReferenceRect) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ReferenceRect) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ReferenceRect) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ReflectionProbeUpdateMode int64

type ReflectionProbeAmbientMode int64
type ReflectionProbe struct {_ [0]*ReflectionProbe; ptr gd.Pointer}

//go:nosplit
func (self ReflectionProbe) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ReflectionProbe) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ReflectionProbe) Super() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ReflectionProbe) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ReflectionProbe) AsReflectionProbe() [1]ReflectionProbe { return [1]ReflectionProbe{self} }


//go:nosplit
func (self ReflectionProbe) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ReflectionProbe) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ReflectionProbe) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ReflectionProbe) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RegEx struct {_ [0]*RegEx; ptr gd.Pointer}

//go:nosplit
func (self RegEx) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RegEx) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RegEx) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RegEx) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RegEx) AsRegEx() [1]RegEx { return [1]RegEx{self} }


//go:nosplit
func (self RegEx) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RegEx) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RegExMatch struct {_ [0]*RegExMatch; ptr gd.Pointer}

//go:nosplit
func (self RegExMatch) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RegExMatch) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RegExMatch) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RegExMatch) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RegExMatch) AsRegExMatch() [1]RegExMatch { return [1]RegExMatch{self} }


//go:nosplit
func (self RegExMatch) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RegExMatch) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RemoteTransform2D struct {_ [0]*RemoteTransform2D; ptr gd.Pointer}

//go:nosplit
func (self RemoteTransform2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RemoteTransform2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RemoteTransform2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RemoteTransform2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RemoteTransform2D) AsRemoteTransform2D() [1]RemoteTransform2D { return [1]RemoteTransform2D{self} }


//go:nosplit
func (self RemoteTransform2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RemoteTransform2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RemoteTransform2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self RemoteTransform2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RemoteTransform3D struct {_ [0]*RemoteTransform3D; ptr gd.Pointer}

//go:nosplit
func (self RemoteTransform3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RemoteTransform3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RemoteTransform3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RemoteTransform3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RemoteTransform3D) AsRemoteTransform3D() [1]RemoteTransform3D { return [1]RemoteTransform3D{self} }


//go:nosplit
func (self RemoteTransform3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RemoteTransform3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self RemoteTransform3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RenderData struct {_ [0]*RenderData; ptr gd.Pointer}

//go:nosplit
func (self RenderData) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RenderData) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RenderData) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderData) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderData) AsRenderData() [1]RenderData { return [1]RenderData{self} }

func (self RenderData) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RenderDataExtension struct {_ [0]*RenderDataExtension; ptr gd.Pointer}

//go:nosplit
func (self RenderDataExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RenderDataExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RenderDataExtension) Super() [1]RenderData { return *(*[1]RenderData)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderDataExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderDataExtension) AsRenderDataExtension() [1]RenderDataExtension { return [1]RenderDataExtension{self} }


//go:nosplit
func (self RenderDataExtension) AsRenderData() [1]RenderData { return *(*[1]RenderData)(unsafe.Pointer(&self)) }

/*
Implement this in GDExtension to return the implementation's [RenderSceneBuffers] object.
*/
func (RenderDataExtension) _get_render_scene_buffers(impl func(ptr unsafe.Pointer) RenderSceneBuffers, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Implement this in GDExtension to return the implementation's [RenderSceneDataExtension] object.
*/
func (RenderDataExtension) _get_render_scene_data(impl func(ptr unsafe.Pointer) RenderSceneData, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Implement this in GDExtension to return the [RID] of the implementation's environment object.
*/
func (RenderDataExtension) _get_environment(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement this in GDExtension to return the [RID] for the implementation's camera attributes object.
*/
func (RenderDataExtension) _get_camera_attributes(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self RenderDataExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_get_render_scene_buffers": return reflect.ValueOf(self._get_render_scene_buffers);
	case "_get_render_scene_data": return reflect.ValueOf(self._get_render_scene_data);
	case "_get_environment": return reflect.ValueOf(self._get_environment);
	case "_get_camera_attributes": return reflect.ValueOf(self._get_camera_attributes);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RenderDataRD struct {_ [0]*RenderDataRD; ptr gd.Pointer}

//go:nosplit
func (self RenderDataRD) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RenderDataRD) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RenderDataRD) Super() [1]RenderData { return *(*[1]RenderData)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderDataRD) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderDataRD) AsRenderDataRD() [1]RenderDataRD { return [1]RenderDataRD{self} }


//go:nosplit
func (self RenderDataRD) AsRenderData() [1]RenderData { return *(*[1]RenderData)(unsafe.Pointer(&self)) }

func (self RenderDataRD) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RenderSceneBuffers struct {_ [0]*RenderSceneBuffers; ptr gd.Pointer}

//go:nosplit
func (self RenderSceneBuffers) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RenderSceneBuffers) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RenderSceneBuffers) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneBuffers) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneBuffers) AsRenderSceneBuffers() [1]RenderSceneBuffers { return [1]RenderSceneBuffers{self} }


//go:nosplit
func (self RenderSceneBuffers) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RenderSceneBuffers) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RenderSceneBuffersConfiguration struct {_ [0]*RenderSceneBuffersConfiguration; ptr gd.Pointer}

//go:nosplit
func (self RenderSceneBuffersConfiguration) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RenderSceneBuffersConfiguration) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RenderSceneBuffersConfiguration) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneBuffersConfiguration) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneBuffersConfiguration) AsRenderSceneBuffersConfiguration() [1]RenderSceneBuffersConfiguration { return [1]RenderSceneBuffersConfiguration{self} }


//go:nosplit
func (self RenderSceneBuffersConfiguration) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RenderSceneBuffersConfiguration) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RenderSceneBuffersExtension struct {_ [0]*RenderSceneBuffersExtension; ptr gd.Pointer}

//go:nosplit
func (self RenderSceneBuffersExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RenderSceneBuffersExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RenderSceneBuffersExtension) Super() [1]RenderSceneBuffers { return *(*[1]RenderSceneBuffers)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneBuffersExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneBuffersExtension) AsRenderSceneBuffersExtension() [1]RenderSceneBuffersExtension { return [1]RenderSceneBuffersExtension{self} }


//go:nosplit
func (self RenderSceneBuffersExtension) AsRenderSceneBuffers() [1]RenderSceneBuffers { return *(*[1]RenderSceneBuffers)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneBuffersExtension) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Implement this in GDExtension to handle the (re)sizing of a viewport.
*/
func (RenderSceneBuffersExtension) _configure(impl func(ptr unsafe.Pointer, config RenderSceneBuffersConfiguration) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var config RenderSceneBuffersConfiguration
		config.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, config)
		ctx.End()
	}
}

/*
Implement this in GDExtension to record a new FSR sharpness value.
*/
func (RenderSceneBuffersExtension) _set_fsr_sharpness(impl func(ptr unsafe.Pointer, fsr_sharpness gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var fsr_sharpness = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, fsr_sharpness)
		ctx.End()
	}
}

/*
Implement this in GDExtension to change the texture mipmap bias.
*/
func (RenderSceneBuffersExtension) _set_texture_mipmap_bias(impl func(ptr unsafe.Pointer, texture_mipmap_bias gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var texture_mipmap_bias = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, texture_mipmap_bias)
		ctx.End()
	}
}

/*
Implement this in GDExtension to react to the debanding flag changing.
*/
func (RenderSceneBuffersExtension) _set_use_debanding(impl func(ptr unsafe.Pointer, use_debanding bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var use_debanding = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, use_debanding)
		ctx.End()
	}
}

func (self RenderSceneBuffersExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_configure": return reflect.ValueOf(self._configure);
	case "_set_fsr_sharpness": return reflect.ValueOf(self._set_fsr_sharpness);
	case "_set_texture_mipmap_bias": return reflect.ValueOf(self._set_texture_mipmap_bias);
	case "_set_use_debanding": return reflect.ValueOf(self._set_use_debanding);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RenderSceneBuffersRD struct {_ [0]*RenderSceneBuffersRD; ptr gd.Pointer}

//go:nosplit
func (self RenderSceneBuffersRD) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RenderSceneBuffersRD) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RenderSceneBuffersRD) Super() [1]RenderSceneBuffers { return *(*[1]RenderSceneBuffers)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneBuffersRD) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneBuffersRD) AsRenderSceneBuffersRD() [1]RenderSceneBuffersRD { return [1]RenderSceneBuffersRD{self} }


//go:nosplit
func (self RenderSceneBuffersRD) AsRenderSceneBuffers() [1]RenderSceneBuffers { return *(*[1]RenderSceneBuffers)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneBuffersRD) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RenderSceneBuffersRD) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RenderSceneData struct {_ [0]*RenderSceneData; ptr gd.Pointer}

//go:nosplit
func (self RenderSceneData) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RenderSceneData) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RenderSceneData) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneData) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneData) AsRenderSceneData() [1]RenderSceneData { return [1]RenderSceneData{self} }

func (self RenderSceneData) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RenderSceneDataExtension struct {_ [0]*RenderSceneDataExtension; ptr gd.Pointer}

//go:nosplit
func (self RenderSceneDataExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RenderSceneDataExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RenderSceneDataExtension) Super() [1]RenderSceneData { return *(*[1]RenderSceneData)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneDataExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneDataExtension) AsRenderSceneDataExtension() [1]RenderSceneDataExtension { return [1]RenderSceneDataExtension{self} }


//go:nosplit
func (self RenderSceneDataExtension) AsRenderSceneData() [1]RenderSceneData { return *(*[1]RenderSceneData)(unsafe.Pointer(&self)) }

/*
Implement this in GDExtension to return the camera [Transform3D].
*/
func (RenderSceneDataExtension) _get_cam_transform(impl func(ptr unsafe.Pointer) gd.Transform3D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement this in GDExtension to return the camera [Projection].
*/
func (RenderSceneDataExtension) _get_cam_projection(impl func(ptr unsafe.Pointer) gd.Projection, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement this in GDExtension to return the view count.
*/
func (RenderSceneDataExtension) _get_view_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement this in GDExtension to return the eye offset for the given [param view].
*/
func (RenderSceneDataExtension) _get_view_eye_offset(impl func(ptr unsafe.Pointer, view gd.Int) gd.Vector3, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var view = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, view)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement this in GDExtension to return the view [Projection] for the given [param view].
*/
func (RenderSceneDataExtension) _get_view_projection(impl func(ptr unsafe.Pointer, view gd.Int) gd.Projection, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var view = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, view)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Implement this in GDExtension to return the [RID] of the uniform buffer containing the scene data as a UBO.
*/
func (RenderSceneDataExtension) _get_uniform_buffer(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self RenderSceneDataExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_get_cam_transform": return reflect.ValueOf(self._get_cam_transform);
	case "_get_cam_projection": return reflect.ValueOf(self._get_cam_projection);
	case "_get_view_count": return reflect.ValueOf(self._get_view_count);
	case "_get_view_eye_offset": return reflect.ValueOf(self._get_view_eye_offset);
	case "_get_view_projection": return reflect.ValueOf(self._get_view_projection);
	case "_get_uniform_buffer": return reflect.ValueOf(self._get_uniform_buffer);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RenderSceneDataRD struct {_ [0]*RenderSceneDataRD; ptr gd.Pointer}

//go:nosplit
func (self RenderSceneDataRD) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RenderSceneDataRD) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RenderSceneDataRD) Super() [1]RenderSceneData { return *(*[1]RenderSceneData)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneDataRD) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderSceneDataRD) AsRenderSceneDataRD() [1]RenderSceneDataRD { return [1]RenderSceneDataRD{self} }


//go:nosplit
func (self RenderSceneDataRD) AsRenderSceneData() [1]RenderSceneData { return *(*[1]RenderSceneData)(unsafe.Pointer(&self)) }

func (self RenderSceneDataRD) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type RenderingDeviceDeviceType int64

type RenderingDeviceDriverResource int64

type RenderingDeviceDataFormat int64

type RenderingDeviceBarrierMask int64

type RenderingDeviceTextureType int64

type RenderingDeviceTextureSamples int64

type RenderingDeviceTextureUsageBits int64

type RenderingDeviceTextureSwizzle int64

type RenderingDeviceTextureSliceType int64

type RenderingDeviceSamplerFilter int64

type RenderingDeviceSamplerRepeatMode int64

type RenderingDeviceSamplerBorderColor int64

type RenderingDeviceVertexFrequency int64

type RenderingDeviceIndexBufferFormat int64

type RenderingDeviceStorageBufferUsage int64

type RenderingDeviceUniformType int64

type RenderingDeviceRenderPrimitive int64

type RenderingDevicePolygonCullMode int64

type RenderingDevicePolygonFrontFace int64

type RenderingDeviceStencilOperation int64

type RenderingDeviceCompareOperator int64

type RenderingDeviceLogicOperation int64

type RenderingDeviceBlendFactor int64

type RenderingDeviceBlendOperation int64

type RenderingDevicePipelineDynamicStateFlags int64

type RenderingDeviceInitialAction int64

type RenderingDeviceFinalAction int64

type RenderingDeviceShaderStage int64

type RenderingDeviceShaderLanguage int64

type RenderingDevicePipelineSpecializationConstantType int64

type RenderingDeviceLimit int64

type RenderingDeviceMemoryType int64
type RenderingDevice struct {_ [0]*RenderingDevice; ptr gd.Pointer}

//go:nosplit
func (self RenderingDevice) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RenderingDevice) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RenderingDevice) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderingDevice) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderingDevice) AsRenderingDevice() [1]RenderingDevice { return [1]RenderingDevice{self} }

func (self RenderingDevice) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type RenderingServerTextureLayeredType int64

type RenderingServerCubeMapLayer int64

type RenderingServerShaderMode int64

type RenderingServerArrayType int64

type RenderingServerArrayCustomFormat int64

type RenderingServerArrayFormat int64

type RenderingServerPrimitiveType int64

type RenderingServerBlendShapeMode int64

type RenderingServerMultimeshTransformFormat int64

type RenderingServerLightProjectorFilter int64

type RenderingServerLightType int64

type RenderingServerLightParam int64

type RenderingServerLightBakeMode int64

type RenderingServerLightOmniShadowMode int64

type RenderingServerLightDirectionalShadowMode int64

type RenderingServerLightDirectionalSkyMode int64

type RenderingServerShadowQuality int64

type RenderingServerReflectionProbeUpdateMode int64

type RenderingServerReflectionProbeAmbientMode int64

type RenderingServerDecalTexture int64

type RenderingServerDecalFilter int64

type RenderingServerVoxelGIQuality int64

type RenderingServerParticlesMode int64

type RenderingServerParticlesTransformAlign int64

type RenderingServerParticlesDrawOrder int64

type RenderingServerParticlesCollisionType int64

type RenderingServerParticlesCollisionHeightfieldResolution int64

type RenderingServerFogVolumeShape int64

type RenderingServerViewportScaling3DMode int64

type RenderingServerViewportUpdateMode int64

type RenderingServerViewportClearMode int64

type RenderingServerViewportEnvironmentMode int64

type RenderingServerViewportSDFOversize int64

type RenderingServerViewportSDFScale int64

type RenderingServerViewportMSAA int64

type RenderingServerViewportScreenSpaceAA int64

type RenderingServerViewportOcclusionCullingBuildQuality int64

type RenderingServerViewportRenderInfo int64

type RenderingServerViewportRenderInfoType int64

type RenderingServerViewportDebugDraw int64

type RenderingServerViewportVRSMode int64

type RenderingServerViewportVRSUpdateMode int64

type RenderingServerSkyMode int64

type RenderingServerCompositorEffectFlags int64

type RenderingServerCompositorEffectCallbackType int64

type RenderingServerEnvironmentBG int64

type RenderingServerEnvironmentAmbientSource int64

type RenderingServerEnvironmentReflectionSource int64

type RenderingServerEnvironmentGlowBlendMode int64

type RenderingServerEnvironmentFogMode int64

type RenderingServerEnvironmentToneMapper int64

type RenderingServerEnvironmentSSRRoughnessQuality int64

type RenderingServerEnvironmentSSAOQuality int64

type RenderingServerEnvironmentSSILQuality int64

type RenderingServerEnvironmentSDFGIYScale int64

type RenderingServerEnvironmentSDFGIRayCount int64

type RenderingServerEnvironmentSDFGIFramesToConverge int64

type RenderingServerEnvironmentSDFGIFramesToUpdateLight int64

type RenderingServerSubSurfaceScatteringQuality int64

type RenderingServerDOFBokehShape int64

type RenderingServerDOFBlurQuality int64

type RenderingServerInstanceType int64

type RenderingServerInstanceFlags int64

type RenderingServerShadowCastingSetting int64

type RenderingServerVisibilityRangeFadeMode int64

type RenderingServerBakeChannels int64

type RenderingServerCanvasTextureChannel int64

type RenderingServerNinePatchAxisMode int64

type RenderingServerCanvasItemTextureFilter int64

type RenderingServerCanvasItemTextureRepeat int64

type RenderingServerCanvasGroupMode int64

type RenderingServerCanvasLightMode int64

type RenderingServerCanvasLightBlendMode int64

type RenderingServerCanvasLightShadowFilter int64

type RenderingServerCanvasOccluderPolygonCullMode int64

type RenderingServerGlobalShaderParameterType int64

type RenderingServerRenderingInfo int64

type RenderingServerFeatures int64
type RenderingServer struct {_ [0]*RenderingServer; ptr gd.Pointer}

//go:nosplit
func (self RenderingServer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RenderingServer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RenderingServer) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderingServer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RenderingServer) AsRenderingServer() [1]RenderingServer { return [1]RenderingServer{self} }

//go:nosplit

func (self RenderingServer) IsSingleton() {}

func (self RenderingServer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Resource struct {_ [0]*Resource; ptr gd.Pointer}

//go:nosplit
func (self Resource) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Resource) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Resource) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Resource) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Resource) AsResource() [1]Resource { return [1]Resource{self} }


//go:nosplit
func (self Resource) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Override this method to customize the newly duplicated resource created from [method PackedScene.instantiate], if the original's [member resource_local_to_scene] is set to [code]true[/code].
[b]Example:[/b] Set a random [code]damage[/code] value to every local resource from an instantiated scene.
[codeblock]
extends Resource

var damage = 0

func _setup_local_to_scene():
    damage = randi_range(10, 40)
[/codeblock]
*/
func (Resource) _setup_local_to_scene(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (self Resource) Virtual(name string) reflect.Value {
	switch name {
	case "_setup_local_to_scene": return reflect.ValueOf(self._setup_local_to_scene);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ResourceFormatLoaderCacheMode int64
type ResourceFormatLoader struct {_ [0]*ResourceFormatLoader; ptr gd.Pointer}

//go:nosplit
func (self ResourceFormatLoader) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceFormatLoader) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceFormatLoader) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceFormatLoader) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceFormatLoader) AsResourceFormatLoader() [1]ResourceFormatLoader { return [1]ResourceFormatLoader{self} }


//go:nosplit
func (self ResourceFormatLoader) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Gets the list of extensions for files this loader is able to read.
*/
func (ResourceFormatLoader) _get_recognized_extensions(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Tells whether or not this loader should load a resource from its resource path for a given type.
If it is not implemented, the default behavior returns whether the path's extension is within the ones provided by [method _get_recognized_extensions], and if the type is within the ones provided by [method _get_resource_type].
*/
func (ResourceFormatLoader) _recognize_path(impl func(ptr unsafe.Pointer, path gd.String, atype gd.StringName) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var atype = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path, atype)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Tells which resource class this loader can load.
[b]Note:[/b] Custom resource types defined by scripts aren't known by the [ClassDB], so you might just handle [code]"Resource"[/code] for them.
*/
func (ResourceFormatLoader) _handles_type(impl func(ptr unsafe.Pointer, atype gd.StringName) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var atype = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, atype)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Gets the class name of the resource associated with the given path. If the loader cannot handle it, it should return [code]""[/code].
[b]Note:[/b] Custom resource types defined by scripts aren't known by the [ClassDB], so you might just return [code]"Resource"[/code] for them.
*/
func (ResourceFormatLoader) _get_resource_type(impl func(ptr unsafe.Pointer, path gd.String) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Returns the script class name associated with the [Resource] under the given [param path]. If the resource has no script or the script isn't a named class, it should return [code]""[/code].
*/
func (ResourceFormatLoader) _get_resource_script_class(impl func(ptr unsafe.Pointer, path gd.String) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ResourceFormatLoader) _get_resource_uid(impl func(ptr unsafe.Pointer, path gd.String) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
If implemented, gets the dependencies of a given resource. If [param add_types] is [code]true[/code], paths should be appended [code]::TypeName[/code], where [code]TypeName[/code] is the class name of the dependency.
[b]Note:[/b] Custom resource types defined by scripts aren't known by the [ClassDB], so you might just return [code]"Resource"[/code] for them.
*/
func (ResourceFormatLoader) _get_dependencies(impl func(ptr unsafe.Pointer, path gd.String, add_types bool) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var add_types = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path, add_types)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
If implemented, renames dependencies within the given resource and saves it. [param renames] is a dictionary [code]{ String => String }[/code] mapping old dependency paths to new paths.
Returns [constant OK] on success, or an [enum Error] constant in case of failure.
*/
func (ResourceFormatLoader) _rename_dependencies(impl func(ptr unsafe.Pointer, path gd.String, renames gd.Dictionary) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var renames = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path, renames)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ResourceFormatLoader) _exists(impl func(ptr unsafe.Pointer, path gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ResourceFormatLoader) _get_classes_used(impl func(ptr unsafe.Pointer, path gd.String) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Loads a resource when the engine finds this loader to be compatible. If the loaded resource is the result of an import, [param original_path] will target the source file. Returns a [Resource] object on success, or an [enum Error] constant in case of failure.
The [param cache_mode] property defines whether and how the cache should be used or updated when loading the resource. See [enum CacheMode] for details.
*/
func (ResourceFormatLoader) _load(impl func(ptr unsafe.Pointer, path gd.String, original_path gd.String, use_sub_threads bool, cache_mode gd.Int) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var original_path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var use_sub_threads = gd.UnsafeGet[bool](p_args,2)
		var cache_mode = gd.UnsafeGet[gd.Int](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path, original_path, use_sub_threads, cache_mode)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (self ResourceFormatLoader) Virtual(name string) reflect.Value {
	switch name {
	case "_get_recognized_extensions": return reflect.ValueOf(self._get_recognized_extensions);
	case "_recognize_path": return reflect.ValueOf(self._recognize_path);
	case "_handles_type": return reflect.ValueOf(self._handles_type);
	case "_get_resource_type": return reflect.ValueOf(self._get_resource_type);
	case "_get_resource_script_class": return reflect.ValueOf(self._get_resource_script_class);
	case "_get_resource_uid": return reflect.ValueOf(self._get_resource_uid);
	case "_get_dependencies": return reflect.ValueOf(self._get_dependencies);
	case "_rename_dependencies": return reflect.ValueOf(self._rename_dependencies);
	case "_exists": return reflect.ValueOf(self._exists);
	case "_get_classes_used": return reflect.ValueOf(self._get_classes_used);
	case "_load": return reflect.ValueOf(self._load);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceFormatSaver struct {_ [0]*ResourceFormatSaver; ptr gd.Pointer}

//go:nosplit
func (self ResourceFormatSaver) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceFormatSaver) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceFormatSaver) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceFormatSaver) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceFormatSaver) AsResourceFormatSaver() [1]ResourceFormatSaver { return [1]ResourceFormatSaver{self} }


//go:nosplit
func (self ResourceFormatSaver) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Saves the given resource object to a file at the target [param path]. [param flags] is a bitmask composed with [enum ResourceSaver.SaverFlags] constants.
Returns [constant OK] on success, or an [enum Error] constant in case of failure.
*/
func (ResourceFormatSaver) _save(impl func(ptr unsafe.Pointer, resource Resource, path gd.String, flags gd.Int) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var resource Resource
		resource.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var flags = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, resource, path, flags)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Sets a new UID for the resource at the given [param path]. Returns [constant OK] on success, or an [enum Error] constant in case of failure.
*/
func (ResourceFormatSaver) _set_uid(impl func(ptr unsafe.Pointer, path gd.String, uid gd.Int) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var uid = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path, uid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns whether the given resource object can be saved by this saver.
*/
func (ResourceFormatSaver) _recognize(impl func(ptr unsafe.Pointer, resource Resource) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var resource Resource
		resource.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, resource)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns the list of extensions available for saving the resource object, provided it is recognized (see [method _recognize]).
*/
func (ResourceFormatSaver) _get_recognized_extensions(impl func(ptr unsafe.Pointer, resource Resource) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var resource Resource
		resource.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, resource)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Returns [code]true[/code] if this saver handles a given save path and [code]false[/code] otherwise.
If this method is not implemented, the default behavior returns whether the path's extension is within the ones provided by [method _get_recognized_extensions].
*/
func (ResourceFormatSaver) _recognize_path(impl func(ptr unsafe.Pointer, resource Resource, path gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var resource Resource
		resource.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, resource, path)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self ResourceFormatSaver) Virtual(name string) reflect.Value {
	switch name {
	case "_save": return reflect.ValueOf(self._save);
	case "_set_uid": return reflect.ValueOf(self._set_uid);
	case "_recognize": return reflect.ValueOf(self._recognize);
	case "_get_recognized_extensions": return reflect.ValueOf(self._get_recognized_extensions);
	case "_recognize_path": return reflect.ValueOf(self._recognize_path);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ResourceImporterImportOrder int64
type ResourceImporter struct {_ [0]*ResourceImporter; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporter) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporter) AsResourceImporter() [1]ResourceImporter { return [1]ResourceImporter{self} }


//go:nosplit
func (self ResourceImporter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterBMFont struct {_ [0]*ResourceImporterBMFont; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterBMFont) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterBMFont) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterBMFont) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterBMFont) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterBMFont) AsResourceImporterBMFont() [1]ResourceImporterBMFont { return [1]ResourceImporterBMFont{self} }


//go:nosplit
func (self ResourceImporterBMFont) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterBMFont) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterBMFont) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterBitMap struct {_ [0]*ResourceImporterBitMap; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterBitMap) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterBitMap) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterBitMap) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterBitMap) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterBitMap) AsResourceImporterBitMap() [1]ResourceImporterBitMap { return [1]ResourceImporterBitMap{self} }


//go:nosplit
func (self ResourceImporterBitMap) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterBitMap) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterBitMap) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterCSVTranslation struct {_ [0]*ResourceImporterCSVTranslation; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterCSVTranslation) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterCSVTranslation) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterCSVTranslation) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterCSVTranslation) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterCSVTranslation) AsResourceImporterCSVTranslation() [1]ResourceImporterCSVTranslation { return [1]ResourceImporterCSVTranslation{self} }


//go:nosplit
func (self ResourceImporterCSVTranslation) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterCSVTranslation) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterCSVTranslation) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterDynamicFont struct {_ [0]*ResourceImporterDynamicFont; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterDynamicFont) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterDynamicFont) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterDynamicFont) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterDynamicFont) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterDynamicFont) AsResourceImporterDynamicFont() [1]ResourceImporterDynamicFont { return [1]ResourceImporterDynamicFont{self} }


//go:nosplit
func (self ResourceImporterDynamicFont) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterDynamicFont) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterDynamicFont) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterImage struct {_ [0]*ResourceImporterImage; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterImage) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterImage) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterImage) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterImage) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterImage) AsResourceImporterImage() [1]ResourceImporterImage { return [1]ResourceImporterImage{self} }


//go:nosplit
func (self ResourceImporterImage) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterImage) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterImage) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterImageFont struct {_ [0]*ResourceImporterImageFont; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterImageFont) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterImageFont) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterImageFont) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterImageFont) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterImageFont) AsResourceImporterImageFont() [1]ResourceImporterImageFont { return [1]ResourceImporterImageFont{self} }


//go:nosplit
func (self ResourceImporterImageFont) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterImageFont) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterImageFont) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterLayeredTexture struct {_ [0]*ResourceImporterLayeredTexture; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterLayeredTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterLayeredTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterLayeredTexture) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterLayeredTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterLayeredTexture) AsResourceImporterLayeredTexture() [1]ResourceImporterLayeredTexture { return [1]ResourceImporterLayeredTexture{self} }


//go:nosplit
func (self ResourceImporterLayeredTexture) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterLayeredTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterLayeredTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterMP3 struct {_ [0]*ResourceImporterMP3; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterMP3) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterMP3) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterMP3) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterMP3) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterMP3) AsResourceImporterMP3() [1]ResourceImporterMP3 { return [1]ResourceImporterMP3{self} }


//go:nosplit
func (self ResourceImporterMP3) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterMP3) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterMP3) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterOBJ struct {_ [0]*ResourceImporterOBJ; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterOBJ) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterOBJ) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterOBJ) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterOBJ) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterOBJ) AsResourceImporterOBJ() [1]ResourceImporterOBJ { return [1]ResourceImporterOBJ{self} }


//go:nosplit
func (self ResourceImporterOBJ) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterOBJ) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterOBJ) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterOggVorbis struct {_ [0]*ResourceImporterOggVorbis; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterOggVorbis) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterOggVorbis) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterOggVorbis) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterOggVorbis) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterOggVorbis) AsResourceImporterOggVorbis() [1]ResourceImporterOggVorbis { return [1]ResourceImporterOggVorbis{self} }


//go:nosplit
func (self ResourceImporterOggVorbis) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterOggVorbis) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterOggVorbis) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterScene struct {_ [0]*ResourceImporterScene; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterScene) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterScene) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterScene) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterScene) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterScene) AsResourceImporterScene() [1]ResourceImporterScene { return [1]ResourceImporterScene{self} }


//go:nosplit
func (self ResourceImporterScene) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterScene) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterScene) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterShaderFile struct {_ [0]*ResourceImporterShaderFile; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterShaderFile) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterShaderFile) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterShaderFile) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterShaderFile) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterShaderFile) AsResourceImporterShaderFile() [1]ResourceImporterShaderFile { return [1]ResourceImporterShaderFile{self} }


//go:nosplit
func (self ResourceImporterShaderFile) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterShaderFile) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterShaderFile) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterTexture struct {_ [0]*ResourceImporterTexture; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterTexture) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterTexture) AsResourceImporterTexture() [1]ResourceImporterTexture { return [1]ResourceImporterTexture{self} }


//go:nosplit
func (self ResourceImporterTexture) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterTextureAtlas struct {_ [0]*ResourceImporterTextureAtlas; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterTextureAtlas) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterTextureAtlas) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterTextureAtlas) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterTextureAtlas) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterTextureAtlas) AsResourceImporterTextureAtlas() [1]ResourceImporterTextureAtlas { return [1]ResourceImporterTextureAtlas{self} }


//go:nosplit
func (self ResourceImporterTextureAtlas) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterTextureAtlas) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterTextureAtlas) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceImporterWAV struct {_ [0]*ResourceImporterWAV; ptr gd.Pointer}

//go:nosplit
func (self ResourceImporterWAV) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceImporterWAV) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceImporterWAV) Super() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterWAV) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterWAV) AsResourceImporterWAV() [1]ResourceImporterWAV { return [1]ResourceImporterWAV{self} }


//go:nosplit
func (self ResourceImporterWAV) AsResourceImporter() [1]ResourceImporter { return *(*[1]ResourceImporter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceImporterWAV) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ResourceImporterWAV) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ResourceLoaderThreadLoadStatus int64

type ResourceLoaderCacheMode int64
type ResourceLoader struct {_ [0]*ResourceLoader; ptr gd.Pointer}

//go:nosplit
func (self ResourceLoader) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceLoader) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceLoader) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceLoader) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceLoader) AsResourceLoader() [1]ResourceLoader { return [1]ResourceLoader{self} }

//go:nosplit

func (self ResourceLoader) IsSingleton() {}

func (self ResourceLoader) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourcePreloader struct {_ [0]*ResourcePreloader; ptr gd.Pointer}

//go:nosplit
func (self ResourcePreloader) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourcePreloader) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourcePreloader) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourcePreloader) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourcePreloader) AsResourcePreloader() [1]ResourcePreloader { return [1]ResourcePreloader{self} }


//go:nosplit
func (self ResourcePreloader) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ResourcePreloader) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ResourceSaverSaverFlags int64
type ResourceSaver struct {_ [0]*ResourceSaver; ptr gd.Pointer}

//go:nosplit
func (self ResourceSaver) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceSaver) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceSaver) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceSaver) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceSaver) AsResourceSaver() [1]ResourceSaver { return [1]ResourceSaver{self} }

//go:nosplit

func (self ResourceSaver) IsSingleton() {}

func (self ResourceSaver) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ResourceUID struct {_ [0]*ResourceUID; ptr gd.Pointer}

//go:nosplit
func (self ResourceUID) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ResourceUID) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ResourceUID) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceUID) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ResourceUID) AsResourceUID() [1]ResourceUID { return [1]ResourceUID{self} }

//go:nosplit

func (self ResourceUID) IsSingleton() {}

func (self ResourceUID) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type RibbonTrailMeshShape int64
type RibbonTrailMesh struct {_ [0]*RibbonTrailMesh; ptr gd.Pointer}

//go:nosplit
func (self RibbonTrailMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RibbonTrailMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RibbonTrailMesh) Super() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RibbonTrailMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RibbonTrailMesh) AsRibbonTrailMesh() [1]RibbonTrailMesh { return [1]RibbonTrailMesh{self} }


//go:nosplit
func (self RibbonTrailMesh) AsPrimitiveMesh() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RibbonTrailMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RibbonTrailMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RibbonTrailMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self RibbonTrailMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RichTextEffect struct {_ [0]*RichTextEffect; ptr gd.Pointer}

//go:nosplit
func (self RichTextEffect) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RichTextEffect) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RichTextEffect) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RichTextEffect) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RichTextEffect) AsRichTextEffect() [1]RichTextEffect { return [1]RichTextEffect{self} }


//go:nosplit
func (self RichTextEffect) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RichTextEffect) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Override this method to modify properties in [param char_fx]. The method must return [code]true[/code] if the character could be transformed successfully. If the method returns [code]false[/code], it will skip transformation to avoid displaying broken text.
*/
func (RichTextEffect) _process_custom_fx(impl func(ptr unsafe.Pointer, char_fx CharFXTransform) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var char_fx CharFXTransform
		char_fx.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, char_fx)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self RichTextEffect) Virtual(name string) reflect.Value {
	switch name {
	case "_process_custom_fx": return reflect.ValueOf(self._process_custom_fx);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type RichTextLabelListType int64

type RichTextLabelMenuItems int64

type RichTextLabelMetaUnderline int64

type RichTextLabelImageUpdateMask int64
type RichTextLabel struct {_ [0]*RichTextLabel; ptr gd.Pointer}

//go:nosplit
func (self RichTextLabel) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RichTextLabel) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RichTextLabel) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RichTextLabel) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RichTextLabel) AsRichTextLabel() [1]RichTextLabel { return [1]RichTextLabel{self} }


//go:nosplit
func (self RichTextLabel) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RichTextLabel) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RichTextLabel) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self RichTextLabel) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type RigidBody2DFreezeMode int64

type RigidBody2DCenterOfMassMode int64

type RigidBody2DDampMode int64

type RigidBody2DCCDMode int64
type RigidBody2D struct {_ [0]*RigidBody2D; ptr gd.Pointer}

//go:nosplit
func (self RigidBody2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RigidBody2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RigidBody2D) Super() [1]PhysicsBody2D { return *(*[1]PhysicsBody2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RigidBody2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RigidBody2D) AsRigidBody2D() [1]RigidBody2D { return [1]RigidBody2D{self} }


//go:nosplit
func (self RigidBody2D) AsPhysicsBody2D() [1]PhysicsBody2D { return *(*[1]PhysicsBody2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RigidBody2D) AsCollisionObject2D() [1]CollisionObject2D { return *(*[1]CollisionObject2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RigidBody2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RigidBody2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RigidBody2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default, it is called before the standard force integration, but the [member custom_integrator] property allows you to disable the standard force integration and do fully custom force integration for a body.
*/
func (RigidBody2D) _integrate_forces(impl func(ptr unsafe.Pointer, state PhysicsDirectBodyState2D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state PhysicsDirectBodyState2D
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, state)
		ctx.End()
	}
}

func (self RigidBody2D) Virtual(name string) reflect.Value {
	switch name {
	case "_integrate_forces": return reflect.ValueOf(self._integrate_forces);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type RigidBody3DFreezeMode int64

type RigidBody3DCenterOfMassMode int64

type RigidBody3DDampMode int64
type RigidBody3D struct {_ [0]*RigidBody3D; ptr gd.Pointer}

//go:nosplit
func (self RigidBody3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RigidBody3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RigidBody3D) Super() [1]PhysicsBody3D { return *(*[1]PhysicsBody3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RigidBody3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RigidBody3D) AsRigidBody3D() [1]RigidBody3D { return [1]RigidBody3D{self} }


//go:nosplit
func (self RigidBody3D) AsPhysicsBody3D() [1]PhysicsBody3D { return *(*[1]PhysicsBody3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RigidBody3D) AsCollisionObject3D() [1]CollisionObject3D { return *(*[1]CollisionObject3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RigidBody3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RigidBody3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default, it is called before the standard force integration, but the [member custom_integrator] property allows you to disable the standard force integration and do fully custom force integration for a body.
*/
func (RigidBody3D) _integrate_forces(impl func(ptr unsafe.Pointer, state PhysicsDirectBodyState3D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var state PhysicsDirectBodyState3D
		state.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, state)
		ctx.End()
	}
}

func (self RigidBody3D) Virtual(name string) reflect.Value {
	switch name {
	case "_integrate_forces": return reflect.ValueOf(self._integrate_forces);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type RootMotionView struct {_ [0]*RootMotionView; ptr gd.Pointer}

//go:nosplit
func (self RootMotionView) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *RootMotionView) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self RootMotionView) Super() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RootMotionView) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RootMotionView) AsRootMotionView() [1]RootMotionView { return [1]RootMotionView{self} }


//go:nosplit
func (self RootMotionView) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RootMotionView) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self RootMotionView) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self RootMotionView) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SceneMultiplayer struct {_ [0]*SceneMultiplayer; ptr gd.Pointer}

//go:nosplit
func (self SceneMultiplayer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SceneMultiplayer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SceneMultiplayer) Super() [1]MultiplayerAPI { return *(*[1]MultiplayerAPI)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SceneMultiplayer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SceneMultiplayer) AsSceneMultiplayer() [1]SceneMultiplayer { return [1]SceneMultiplayer{self} }


//go:nosplit
func (self SceneMultiplayer) AsMultiplayerAPI() [1]MultiplayerAPI { return *(*[1]MultiplayerAPI)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SceneMultiplayer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SceneMultiplayer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type SceneReplicationConfigReplicationMode int64
type SceneReplicationConfig struct {_ [0]*SceneReplicationConfig; ptr gd.Pointer}

//go:nosplit
func (self SceneReplicationConfig) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SceneReplicationConfig) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SceneReplicationConfig) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SceneReplicationConfig) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SceneReplicationConfig) AsSceneReplicationConfig() [1]SceneReplicationConfig { return [1]SceneReplicationConfig{self} }


//go:nosplit
func (self SceneReplicationConfig) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SceneReplicationConfig) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SceneReplicationConfig) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type SceneStateGenEditState int64
type SceneState struct {_ [0]*SceneState; ptr gd.Pointer}

//go:nosplit
func (self SceneState) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SceneState) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SceneState) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SceneState) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SceneState) AsSceneState() [1]SceneState { return [1]SceneState{self} }


//go:nosplit
func (self SceneState) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SceneState) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type SceneTreeGroupCallFlags int64
type SceneTree struct {_ [0]*SceneTree; ptr gd.Pointer}

//go:nosplit
func (self SceneTree) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SceneTree) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SceneTree) Super() [1]MainLoop { return *(*[1]MainLoop)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SceneTree) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SceneTree) AsSceneTree() [1]SceneTree { return [1]SceneTree{self} }


//go:nosplit
func (self SceneTree) AsMainLoop() [1]MainLoop { return *(*[1]MainLoop)(unsafe.Pointer(&self)) }

func (self SceneTree) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SceneTreeTimer struct {_ [0]*SceneTreeTimer; ptr gd.Pointer}

//go:nosplit
func (self SceneTreeTimer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SceneTreeTimer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SceneTreeTimer) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SceneTreeTimer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SceneTreeTimer) AsSceneTreeTimer() [1]SceneTreeTimer { return [1]SceneTreeTimer{self} }


//go:nosplit
func (self SceneTreeTimer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SceneTreeTimer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Script struct {_ [0]*Script; ptr gd.Pointer}

//go:nosplit
func (self Script) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Script) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Script) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Script) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Script) AsScript() [1]Script { return [1]Script{self} }


//go:nosplit
func (self Script) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Script) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Script) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ScriptCreateDialog struct {_ [0]*ScriptCreateDialog; ptr gd.Pointer}

//go:nosplit
func (self ScriptCreateDialog) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ScriptCreateDialog) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ScriptCreateDialog) Super() [1]ConfirmationDialog { return *(*[1]ConfirmationDialog)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptCreateDialog) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptCreateDialog) AsScriptCreateDialog() [1]ScriptCreateDialog { return [1]ScriptCreateDialog{self} }


//go:nosplit
func (self ScriptCreateDialog) AsConfirmationDialog() [1]ConfirmationDialog { return *(*[1]ConfirmationDialog)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptCreateDialog) AsAcceptDialog() [1]AcceptDialog { return *(*[1]AcceptDialog)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptCreateDialog) AsWindow() [1]Window { return *(*[1]Window)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptCreateDialog) AsViewport() [1]Viewport { return *(*[1]Viewport)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptCreateDialog) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ScriptCreateDialog) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ScriptEditor struct {_ [0]*ScriptEditor; ptr gd.Pointer}

//go:nosplit
func (self ScriptEditor) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ScriptEditor) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ScriptEditor) Super() [1]PanelContainer { return *(*[1]PanelContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptEditor) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptEditor) AsScriptEditor() [1]ScriptEditor { return [1]ScriptEditor{self} }


//go:nosplit
func (self ScriptEditor) AsPanelContainer() [1]PanelContainer { return *(*[1]PanelContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptEditor) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptEditor) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptEditor) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptEditor) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ScriptEditor) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ScriptEditorBase struct {_ [0]*ScriptEditorBase; ptr gd.Pointer}

//go:nosplit
func (self ScriptEditorBase) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ScriptEditorBase) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ScriptEditorBase) Super() [1]VBoxContainer { return *(*[1]VBoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptEditorBase) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptEditorBase) AsScriptEditorBase() [1]ScriptEditorBase { return [1]ScriptEditorBase{self} }


//go:nosplit
func (self ScriptEditorBase) AsVBoxContainer() [1]VBoxContainer { return *(*[1]VBoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptEditorBase) AsBoxContainer() [1]BoxContainer { return *(*[1]BoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptEditorBase) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptEditorBase) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptEditorBase) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptEditorBase) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ScriptEditorBase) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ScriptExtension struct {_ [0]*ScriptExtension; ptr gd.Pointer}

//go:nosplit
func (self ScriptExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ScriptExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ScriptExtension) Super() [1]Script { return *(*[1]Script)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptExtension) AsScriptExtension() [1]ScriptExtension { return [1]ScriptExtension{self} }


//go:nosplit
func (self ScriptExtension) AsScript() [1]Script { return *(*[1]Script)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptExtension) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptExtension) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (ScriptExtension) _editor_can_reload_from_file(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _placeholder_erased(impl func(ptr unsafe.Pointer, placeholder unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var placeholder = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, placeholder)
		ctx.End()
	}
}

func (ScriptExtension) _can_instantiate(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _get_base_script(impl func(ptr unsafe.Pointer) Script, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (ScriptExtension) _get_global_name(impl func(ptr unsafe.Pointer) gd.StringName, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptExtension) _inherits_script(impl func(ptr unsafe.Pointer, script Script) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var script Script
		script.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, script)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _get_instance_base_type(impl func(ptr unsafe.Pointer) gd.StringName, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptExtension) _instance_create(impl func(ptr unsafe.Pointer, for_object gd.Object) unsafe.Pointer, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var for_object gd.Object
		for_object.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, for_object)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _placeholder_instance_create(impl func(ptr unsafe.Pointer, for_object gd.Object) unsafe.Pointer, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var for_object gd.Object
		for_object.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, for_object)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _instance_has(impl func(ptr unsafe.Pointer, object gd.Object) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var object gd.Object
		object.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, object)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _has_source_code(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _get_source_code(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptExtension) _set_source_code(impl func(ptr unsafe.Pointer, code gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var code = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, code)
		ctx.End()
	}
}

func (ScriptExtension) _reload(impl func(ptr unsafe.Pointer, keep_state bool) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var keep_state = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, keep_state)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _get_documentation(impl func(ptr unsafe.Pointer) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (ScriptExtension) _get_class_icon_path(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptExtension) _has_method(impl func(ptr unsafe.Pointer, method gd.StringName) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var method = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, method)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _has_static_method(impl func(ptr unsafe.Pointer, method gd.StringName) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var method = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, method)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Return the expected argument count for the given [param method], or [code]null[/code] if it can't be determined (which will then fall back to the default behavior).
*/
func (ScriptExtension) _get_script_method_argument_count(impl func(ptr unsafe.Pointer, method gd.StringName) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var method = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, method)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptExtension) _get_method_info(impl func(ptr unsafe.Pointer, method gd.StringName) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var method = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, method)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptExtension) _is_tool(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _is_valid(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns [code]true[/code] if the script is an abstract script. An abstract script does not have a constructor and cannot be instantiated.
*/
func (ScriptExtension) _is_abstract(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _get_language(impl func(ptr unsafe.Pointer) ScriptLanguage, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (ScriptExtension) _has_script_signal(impl func(ptr unsafe.Pointer, signal gd.StringName) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var signal = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, signal)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _get_script_signal_list(impl func(ptr unsafe.Pointer) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (ScriptExtension) _has_property_default_value(impl func(ptr unsafe.Pointer, property gd.StringName) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var property = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, property)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _get_property_default_value(impl func(ptr unsafe.Pointer, property gd.StringName) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var property = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, property)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptExtension) _update_exports(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (ScriptExtension) _get_script_method_list(impl func(ptr unsafe.Pointer) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (ScriptExtension) _get_script_property_list(impl func(ptr unsafe.Pointer) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (ScriptExtension) _get_member_line(impl func(ptr unsafe.Pointer, member gd.StringName) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var member = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, member)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _get_constants(impl func(ptr unsafe.Pointer) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptExtension) _get_members(impl func(ptr unsafe.Pointer) gd.ArrayOf[gd.StringName], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (ScriptExtension) _is_placeholder_fallback_enabled(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptExtension) _get_rpc_config(impl func(ptr unsafe.Pointer) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (self ScriptExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_editor_can_reload_from_file": return reflect.ValueOf(self._editor_can_reload_from_file);
	case "_placeholder_erased": return reflect.ValueOf(self._placeholder_erased);
	case "_can_instantiate": return reflect.ValueOf(self._can_instantiate);
	case "_get_base_script": return reflect.ValueOf(self._get_base_script);
	case "_get_global_name": return reflect.ValueOf(self._get_global_name);
	case "_inherits_script": return reflect.ValueOf(self._inherits_script);
	case "_get_instance_base_type": return reflect.ValueOf(self._get_instance_base_type);
	case "_instance_create": return reflect.ValueOf(self._instance_create);
	case "_placeholder_instance_create": return reflect.ValueOf(self._placeholder_instance_create);
	case "_instance_has": return reflect.ValueOf(self._instance_has);
	case "_has_source_code": return reflect.ValueOf(self._has_source_code);
	case "_get_source_code": return reflect.ValueOf(self._get_source_code);
	case "_set_source_code": return reflect.ValueOf(self._set_source_code);
	case "_reload": return reflect.ValueOf(self._reload);
	case "_get_documentation": return reflect.ValueOf(self._get_documentation);
	case "_get_class_icon_path": return reflect.ValueOf(self._get_class_icon_path);
	case "_has_method": return reflect.ValueOf(self._has_method);
	case "_has_static_method": return reflect.ValueOf(self._has_static_method);
	case "_get_script_method_argument_count": return reflect.ValueOf(self._get_script_method_argument_count);
	case "_get_method_info": return reflect.ValueOf(self._get_method_info);
	case "_is_tool": return reflect.ValueOf(self._is_tool);
	case "_is_valid": return reflect.ValueOf(self._is_valid);
	case "_is_abstract": return reflect.ValueOf(self._is_abstract);
	case "_get_language": return reflect.ValueOf(self._get_language);
	case "_has_script_signal": return reflect.ValueOf(self._has_script_signal);
	case "_get_script_signal_list": return reflect.ValueOf(self._get_script_signal_list);
	case "_has_property_default_value": return reflect.ValueOf(self._has_property_default_value);
	case "_get_property_default_value": return reflect.ValueOf(self._get_property_default_value);
	case "_update_exports": return reflect.ValueOf(self._update_exports);
	case "_get_script_method_list": return reflect.ValueOf(self._get_script_method_list);
	case "_get_script_property_list": return reflect.ValueOf(self._get_script_property_list);
	case "_get_member_line": return reflect.ValueOf(self._get_member_line);
	case "_get_constants": return reflect.ValueOf(self._get_constants);
	case "_get_members": return reflect.ValueOf(self._get_members);
	case "_is_placeholder_fallback_enabled": return reflect.ValueOf(self._is_placeholder_fallback_enabled);
	case "_get_rpc_config": return reflect.ValueOf(self._get_rpc_config);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ScriptLanguageScriptNameCasing int64
type ScriptLanguage struct {_ [0]*ScriptLanguage; ptr gd.Pointer}

//go:nosplit
func (self ScriptLanguage) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ScriptLanguage) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ScriptLanguage) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptLanguage) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptLanguage) AsScriptLanguage() [1]ScriptLanguage { return [1]ScriptLanguage{self} }

func (self ScriptLanguage) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ScriptLanguageExtensionLookupResultType int64

type ScriptLanguageExtensionCodeCompletionLocation int64

type ScriptLanguageExtensionCodeCompletionKind int64
type ScriptLanguageExtension struct {_ [0]*ScriptLanguageExtension; ptr gd.Pointer}

//go:nosplit
func (self ScriptLanguageExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ScriptLanguageExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ScriptLanguageExtension) Super() [1]ScriptLanguage { return *(*[1]ScriptLanguage)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptLanguageExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScriptLanguageExtension) AsScriptLanguageExtension() [1]ScriptLanguageExtension { return [1]ScriptLanguageExtension{self} }


//go:nosplit
func (self ScriptLanguageExtension) AsScriptLanguage() [1]ScriptLanguage { return *(*[1]ScriptLanguage)(unsafe.Pointer(&self)) }

func (ScriptLanguageExtension) _get_name(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _init(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _get_type(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _get_extension(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _finish(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _get_reserved_words(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _is_control_flow_keyword(impl func(ptr unsafe.Pointer, keyword gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var keyword = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, keyword)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _get_comment_delimiters(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _get_doc_comment_delimiters(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _get_string_delimiters(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _make_template(impl func(ptr unsafe.Pointer, template gd.String, class_name gd.String, base_class_name gd.String) Script, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var template = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var class_name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var base_class_name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, template, class_name, base_class_name)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _get_built_in_templates(impl func(ptr unsafe.Pointer, object gd.StringName) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var object = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, object)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _is_using_templates(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _validate(impl func(ptr unsafe.Pointer, script gd.String, path gd.String, validate_functions bool, validate_errors bool, validate_warnings bool, validate_safe_lines bool) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var script = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var validate_functions = gd.UnsafeGet[bool](p_args,2)
		var validate_errors = gd.UnsafeGet[bool](p_args,3)
		var validate_warnings = gd.UnsafeGet[bool](p_args,4)
		var validate_safe_lines = gd.UnsafeGet[bool](p_args,5)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, script, path, validate_functions, validate_errors, validate_warnings, validate_safe_lines)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _validate_path(impl func(ptr unsafe.Pointer, path gd.String) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _create_script(impl func(ptr unsafe.Pointer) gd.Object, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _has_named_classes(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _supports_builtin_mode(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _supports_documentation(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _can_inherit_from_file(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns the line where the function is defined in the code, or [code]-1[/code] if the function is not present.
*/
func (ScriptLanguageExtension) _find_function(impl func(ptr unsafe.Pointer, function gd.String, code gd.String) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var function = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var code = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, function, code)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _make_function(impl func(ptr unsafe.Pointer, class_name gd.String, function_name gd.String, function_args gd.PackedStringArray) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var class_name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var function_name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var function_args = mmm.Let[gd.PackedStringArray](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, class_name, function_name, function_args)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _can_make_function(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _open_in_external_editor(impl func(ptr unsafe.Pointer, script Script, line gd.Int, column gd.Int) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var script Script
		script.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var line = gd.UnsafeGet[gd.Int](p_args,1)
		var column = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, script, line, column)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _overrides_external_editor(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _preferred_file_name_casing(impl func(ptr unsafe.Pointer) ScriptLanguageScriptNameCasing, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _complete_code(impl func(ptr unsafe.Pointer, code gd.String, path gd.String, owner gd.Object) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var code = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var owner gd.Object
		owner.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,2)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, code, path, owner)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _lookup_code(impl func(ptr unsafe.Pointer, code gd.String, symbol gd.String, path gd.String, owner gd.Object) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var code = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var symbol = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		var owner gd.Object
		owner.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,3)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, code, symbol, path, owner)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _auto_indent_code(impl func(ptr unsafe.Pointer, code gd.String, from_line gd.Int, to_line gd.Int) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var code = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var from_line = gd.UnsafeGet[gd.Int](p_args,1)
		var to_line = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, code, from_line, to_line)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _add_global_constant(impl func(ptr unsafe.Pointer, name gd.StringName, value gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var name = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var value = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, name, value)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _add_named_global_constant(impl func(ptr unsafe.Pointer, name gd.StringName, value gd.Variant) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var name = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var value = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, name, value)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _remove_named_global_constant(impl func(ptr unsafe.Pointer, name gd.StringName) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var name = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, name)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _thread_enter(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _thread_exit(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _debug_get_error(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _debug_get_stack_level_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _debug_get_stack_level_line(impl func(ptr unsafe.Pointer, level gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var level = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, level)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _debug_get_stack_level_function(impl func(ptr unsafe.Pointer, level gd.Int) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var level = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, level)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Returns the source associated with a given debug stack position.
*/
func (ScriptLanguageExtension) _debug_get_stack_level_source(impl func(ptr unsafe.Pointer, level gd.Int) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var level = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, level)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _debug_get_stack_level_locals(impl func(ptr unsafe.Pointer, level gd.Int, max_subitems gd.Int, max_depth gd.Int) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var level = gd.UnsafeGet[gd.Int](p_args,0)
		var max_subitems = gd.UnsafeGet[gd.Int](p_args,1)
		var max_depth = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, level, max_subitems, max_depth)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _debug_get_stack_level_members(impl func(ptr unsafe.Pointer, level gd.Int, max_subitems gd.Int, max_depth gd.Int) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var level = gd.UnsafeGet[gd.Int](p_args,0)
		var max_subitems = gd.UnsafeGet[gd.Int](p_args,1)
		var max_depth = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, level, max_subitems, max_depth)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _debug_get_stack_level_instance(impl func(ptr unsafe.Pointer, level gd.Int) unsafe.Pointer, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var level = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, level)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _debug_get_globals(impl func(ptr unsafe.Pointer, max_subitems gd.Int, max_depth gd.Int) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var max_subitems = gd.UnsafeGet[gd.Int](p_args,0)
		var max_depth = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, max_subitems, max_depth)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _debug_parse_stack_level_expression(impl func(ptr unsafe.Pointer, level gd.Int, expression gd.String, max_subitems gd.Int, max_depth gd.Int) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var level = gd.UnsafeGet[gd.Int](p_args,0)
		var expression = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var max_subitems = gd.UnsafeGet[gd.Int](p_args,2)
		var max_depth = gd.UnsafeGet[gd.Int](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, level, expression, max_subitems, max_depth)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _debug_get_current_stack_info(impl func(ptr unsafe.Pointer) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _reload_all_scripts(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _reload_tool_script(impl func(ptr unsafe.Pointer, script Script, soft_reload bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var script Script
		script.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		var soft_reload = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, script, soft_reload)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _get_recognized_extensions(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _get_public_functions(impl func(ptr unsafe.Pointer) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _get_public_constants(impl func(ptr unsafe.Pointer) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _get_public_annotations(impl func(ptr unsafe.Pointer) gd.ArrayOf[gd.Dictionary], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (ScriptLanguageExtension) _profiling_start(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _profiling_stop(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _profiling_set_save_native_calls(impl func(ptr unsafe.Pointer, enable bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var enable = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, enable)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _profiling_get_accumulated_data(impl func(ptr unsafe.Pointer, info_array *ScriptLanguageExtensionProfilingInfo, info_max gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var info_array = gd.UnsafeGet[*ScriptLanguageExtensionProfilingInfo](p_args,0)
		var info_max = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, info_array, info_max)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _profiling_get_frame_data(impl func(ptr unsafe.Pointer, info_array *ScriptLanguageExtensionProfilingInfo, info_max gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var info_array = gd.UnsafeGet[*ScriptLanguageExtensionProfilingInfo](p_args,0)
		var info_max = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, info_array, info_max)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _frame(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _handles_global_class_type(impl func(ptr unsafe.Pointer, atype gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var atype = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, atype)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (ScriptLanguageExtension) _get_global_class_name(impl func(ptr unsafe.Pointer, path gd.String) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var path = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, path)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (self ScriptLanguageExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_get_name": return reflect.ValueOf(self._get_name);
	case "_init": return reflect.ValueOf(self._init);
	case "_get_type": return reflect.ValueOf(self._get_type);
	case "_get_extension": return reflect.ValueOf(self._get_extension);
	case "_finish": return reflect.ValueOf(self._finish);
	case "_get_reserved_words": return reflect.ValueOf(self._get_reserved_words);
	case "_is_control_flow_keyword": return reflect.ValueOf(self._is_control_flow_keyword);
	case "_get_comment_delimiters": return reflect.ValueOf(self._get_comment_delimiters);
	case "_get_doc_comment_delimiters": return reflect.ValueOf(self._get_doc_comment_delimiters);
	case "_get_string_delimiters": return reflect.ValueOf(self._get_string_delimiters);
	case "_make_template": return reflect.ValueOf(self._make_template);
	case "_get_built_in_templates": return reflect.ValueOf(self._get_built_in_templates);
	case "_is_using_templates": return reflect.ValueOf(self._is_using_templates);
	case "_validate": return reflect.ValueOf(self._validate);
	case "_validate_path": return reflect.ValueOf(self._validate_path);
	case "_create_script": return reflect.ValueOf(self._create_script);
	case "_has_named_classes": return reflect.ValueOf(self._has_named_classes);
	case "_supports_builtin_mode": return reflect.ValueOf(self._supports_builtin_mode);
	case "_supports_documentation": return reflect.ValueOf(self._supports_documentation);
	case "_can_inherit_from_file": return reflect.ValueOf(self._can_inherit_from_file);
	case "_find_function": return reflect.ValueOf(self._find_function);
	case "_make_function": return reflect.ValueOf(self._make_function);
	case "_can_make_function": return reflect.ValueOf(self._can_make_function);
	case "_open_in_external_editor": return reflect.ValueOf(self._open_in_external_editor);
	case "_overrides_external_editor": return reflect.ValueOf(self._overrides_external_editor);
	case "_preferred_file_name_casing": return reflect.ValueOf(self._preferred_file_name_casing);
	case "_complete_code": return reflect.ValueOf(self._complete_code);
	case "_lookup_code": return reflect.ValueOf(self._lookup_code);
	case "_auto_indent_code": return reflect.ValueOf(self._auto_indent_code);
	case "_add_global_constant": return reflect.ValueOf(self._add_global_constant);
	case "_add_named_global_constant": return reflect.ValueOf(self._add_named_global_constant);
	case "_remove_named_global_constant": return reflect.ValueOf(self._remove_named_global_constant);
	case "_thread_enter": return reflect.ValueOf(self._thread_enter);
	case "_thread_exit": return reflect.ValueOf(self._thread_exit);
	case "_debug_get_error": return reflect.ValueOf(self._debug_get_error);
	case "_debug_get_stack_level_count": return reflect.ValueOf(self._debug_get_stack_level_count);
	case "_debug_get_stack_level_line": return reflect.ValueOf(self._debug_get_stack_level_line);
	case "_debug_get_stack_level_function": return reflect.ValueOf(self._debug_get_stack_level_function);
	case "_debug_get_stack_level_source": return reflect.ValueOf(self._debug_get_stack_level_source);
	case "_debug_get_stack_level_locals": return reflect.ValueOf(self._debug_get_stack_level_locals);
	case "_debug_get_stack_level_members": return reflect.ValueOf(self._debug_get_stack_level_members);
	case "_debug_get_stack_level_instance": return reflect.ValueOf(self._debug_get_stack_level_instance);
	case "_debug_get_globals": return reflect.ValueOf(self._debug_get_globals);
	case "_debug_parse_stack_level_expression": return reflect.ValueOf(self._debug_parse_stack_level_expression);
	case "_debug_get_current_stack_info": return reflect.ValueOf(self._debug_get_current_stack_info);
	case "_reload_all_scripts": return reflect.ValueOf(self._reload_all_scripts);
	case "_reload_tool_script": return reflect.ValueOf(self._reload_tool_script);
	case "_get_recognized_extensions": return reflect.ValueOf(self._get_recognized_extensions);
	case "_get_public_functions": return reflect.ValueOf(self._get_public_functions);
	case "_get_public_constants": return reflect.ValueOf(self._get_public_constants);
	case "_get_public_annotations": return reflect.ValueOf(self._get_public_annotations);
	case "_profiling_start": return reflect.ValueOf(self._profiling_start);
	case "_profiling_stop": return reflect.ValueOf(self._profiling_stop);
	case "_profiling_set_save_native_calls": return reflect.ValueOf(self._profiling_set_save_native_calls);
	case "_profiling_get_accumulated_data": return reflect.ValueOf(self._profiling_get_accumulated_data);
	case "_profiling_get_frame_data": return reflect.ValueOf(self._profiling_get_frame_data);
	case "_frame": return reflect.ValueOf(self._frame);
	case "_handles_global_class_type": return reflect.ValueOf(self._handles_global_class_type);
	case "_get_global_class_name": return reflect.ValueOf(self._get_global_class_name);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ScrollBar struct {_ [0]*ScrollBar; ptr gd.Pointer}

//go:nosplit
func (self ScrollBar) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ScrollBar) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ScrollBar) Super() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScrollBar) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScrollBar) AsScrollBar() [1]ScrollBar { return [1]ScrollBar{self} }


//go:nosplit
func (self ScrollBar) AsRange() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScrollBar) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScrollBar) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScrollBar) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ScrollBar) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ScrollContainerScrollMode int64
type ScrollContainer struct {_ [0]*ScrollContainer; ptr gd.Pointer}

//go:nosplit
func (self ScrollContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ScrollContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ScrollContainer) Super() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScrollContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScrollContainer) AsScrollContainer() [1]ScrollContainer { return [1]ScrollContainer{self} }


//go:nosplit
func (self ScrollContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScrollContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScrollContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ScrollContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ScrollContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SegmentShape2D struct {_ [0]*SegmentShape2D; ptr gd.Pointer}

//go:nosplit
func (self SegmentShape2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SegmentShape2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SegmentShape2D) Super() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SegmentShape2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SegmentShape2D) AsSegmentShape2D() [1]SegmentShape2D { return [1]SegmentShape2D{self} }


//go:nosplit
func (self SegmentShape2D) AsShape2D() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SegmentShape2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SegmentShape2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SegmentShape2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Semaphore struct {_ [0]*Semaphore; ptr gd.Pointer}

//go:nosplit
func (self Semaphore) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Semaphore) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Semaphore) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Semaphore) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Semaphore) AsSemaphore() [1]Semaphore { return [1]Semaphore{self} }


//go:nosplit
func (self Semaphore) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Semaphore) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SeparationRayShape2D struct {_ [0]*SeparationRayShape2D; ptr gd.Pointer}

//go:nosplit
func (self SeparationRayShape2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SeparationRayShape2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SeparationRayShape2D) Super() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SeparationRayShape2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SeparationRayShape2D) AsSeparationRayShape2D() [1]SeparationRayShape2D { return [1]SeparationRayShape2D{self} }


//go:nosplit
func (self SeparationRayShape2D) AsShape2D() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SeparationRayShape2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SeparationRayShape2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SeparationRayShape2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SeparationRayShape3D struct {_ [0]*SeparationRayShape3D; ptr gd.Pointer}

//go:nosplit
func (self SeparationRayShape3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SeparationRayShape3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SeparationRayShape3D) Super() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SeparationRayShape3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SeparationRayShape3D) AsSeparationRayShape3D() [1]SeparationRayShape3D { return [1]SeparationRayShape3D{self} }


//go:nosplit
func (self SeparationRayShape3D) AsShape3D() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SeparationRayShape3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SeparationRayShape3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SeparationRayShape3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Separator struct {_ [0]*Separator; ptr gd.Pointer}

//go:nosplit
func (self Separator) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Separator) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Separator) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Separator) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Separator) AsSeparator() [1]Separator { return [1]Separator{self} }


//go:nosplit
func (self Separator) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Separator) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Separator) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Separator) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ShaderMode int64
type Shader struct {_ [0]*Shader; ptr gd.Pointer}

//go:nosplit
func (self Shader) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Shader) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Shader) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Shader) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Shader) AsShader() [1]Shader { return [1]Shader{self} }


//go:nosplit
func (self Shader) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Shader) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Shader) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ShaderGlobalsOverride struct {_ [0]*ShaderGlobalsOverride; ptr gd.Pointer}

//go:nosplit
func (self ShaderGlobalsOverride) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ShaderGlobalsOverride) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ShaderGlobalsOverride) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShaderGlobalsOverride) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShaderGlobalsOverride) AsShaderGlobalsOverride() [1]ShaderGlobalsOverride { return [1]ShaderGlobalsOverride{self} }


//go:nosplit
func (self ShaderGlobalsOverride) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ShaderGlobalsOverride) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ShaderInclude struct {_ [0]*ShaderInclude; ptr gd.Pointer}

//go:nosplit
func (self ShaderInclude) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ShaderInclude) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ShaderInclude) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShaderInclude) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShaderInclude) AsShaderInclude() [1]ShaderInclude { return [1]ShaderInclude{self} }


//go:nosplit
func (self ShaderInclude) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShaderInclude) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ShaderInclude) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ShaderMaterial struct {_ [0]*ShaderMaterial; ptr gd.Pointer}

//go:nosplit
func (self ShaderMaterial) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ShaderMaterial) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ShaderMaterial) Super() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShaderMaterial) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShaderMaterial) AsShaderMaterial() [1]ShaderMaterial { return [1]ShaderMaterial{self} }


//go:nosplit
func (self ShaderMaterial) AsMaterial() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShaderMaterial) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShaderMaterial) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ShaderMaterial) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Shape2D struct {_ [0]*Shape2D; ptr gd.Pointer}

//go:nosplit
func (self Shape2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Shape2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Shape2D) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Shape2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Shape2D) AsShape2D() [1]Shape2D { return [1]Shape2D{self} }


//go:nosplit
func (self Shape2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Shape2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Shape2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Shape3D struct {_ [0]*Shape3D; ptr gd.Pointer}

//go:nosplit
func (self Shape3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Shape3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Shape3D) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Shape3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Shape3D) AsShape3D() [1]Shape3D { return [1]Shape3D{self} }


//go:nosplit
func (self Shape3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Shape3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Shape3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ShapeCast2D struct {_ [0]*ShapeCast2D; ptr gd.Pointer}

//go:nosplit
func (self ShapeCast2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ShapeCast2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ShapeCast2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShapeCast2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShapeCast2D) AsShapeCast2D() [1]ShapeCast2D { return [1]ShapeCast2D{self} }


//go:nosplit
func (self ShapeCast2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShapeCast2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShapeCast2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ShapeCast2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ShapeCast3D struct {_ [0]*ShapeCast3D; ptr gd.Pointer}

//go:nosplit
func (self ShapeCast3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ShapeCast3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ShapeCast3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShapeCast3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShapeCast3D) AsShapeCast3D() [1]ShapeCast3D { return [1]ShapeCast3D{self} }


//go:nosplit
func (self ShapeCast3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ShapeCast3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self ShapeCast3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Shortcut struct {_ [0]*Shortcut; ptr gd.Pointer}

//go:nosplit
func (self Shortcut) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Shortcut) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Shortcut) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Shortcut) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Shortcut) AsShortcut() [1]Shortcut { return [1]Shortcut{self} }


//go:nosplit
func (self Shortcut) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Shortcut) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Shortcut) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Skeleton2D struct {_ [0]*Skeleton2D; ptr gd.Pointer}

//go:nosplit
func (self Skeleton2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Skeleton2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Skeleton2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Skeleton2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Skeleton2D) AsSkeleton2D() [1]Skeleton2D { return [1]Skeleton2D{self} }


//go:nosplit
func (self Skeleton2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Skeleton2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Skeleton2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Skeleton2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type Skeleton3DModifierCallbackModeProcess int64
type Skeleton3D struct {_ [0]*Skeleton3D; ptr gd.Pointer}

//go:nosplit
func (self Skeleton3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Skeleton3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Skeleton3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Skeleton3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Skeleton3D) AsSkeleton3D() [1]Skeleton3D { return [1]Skeleton3D{self} }


//go:nosplit
func (self Skeleton3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Skeleton3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Skeleton3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SkeletonIK3D struct {_ [0]*SkeletonIK3D; ptr gd.Pointer}

//go:nosplit
func (self SkeletonIK3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SkeletonIK3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SkeletonIK3D) Super() [1]SkeletonModifier3D { return *(*[1]SkeletonModifier3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonIK3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonIK3D) AsSkeletonIK3D() [1]SkeletonIK3D { return [1]SkeletonIK3D{self} }


//go:nosplit
func (self SkeletonIK3D) AsSkeletonModifier3D() [1]SkeletonModifier3D { return *(*[1]SkeletonModifier3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonIK3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonIK3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self SkeletonIK3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SkeletonModification2D struct {_ [0]*SkeletonModification2D; ptr gd.Pointer}

//go:nosplit
func (self SkeletonModification2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SkeletonModification2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SkeletonModification2D) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2D) AsSkeletonModification2D() [1]SkeletonModification2D { return [1]SkeletonModification2D{self} }


//go:nosplit
func (self SkeletonModification2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Executes the given modification. This is where the modification performs whatever function it is designed to do.
*/
func (SkeletonModification2D) _execute(impl func(ptr unsafe.Pointer, delta gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var delta = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, delta)
		ctx.End()
	}
}

/*
Called when the modification is setup. This is where the modification performs initialization.
*/
func (SkeletonModification2D) _setup_modification(impl func(ptr unsafe.Pointer, modification_stack SkeletonModificationStack2D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var modification_stack SkeletonModificationStack2D
		modification_stack.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, modification_stack)
		ctx.End()
	}
}

/*
Used for drawing [b]editor-only[/b] modification gizmos. This function will only be called in the Godot editor and can be overridden to draw custom gizmos.
[b]Note:[/b] You will need to use the Skeleton2D from [method SkeletonModificationStack2D.get_skeleton] and it's draw functions, as the [SkeletonModification2D] resource cannot draw on its own.
*/
func (SkeletonModification2D) _draw_editor_gizmo(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (self SkeletonModification2D) Virtual(name string) reflect.Value {
	switch name {
	case "_execute": return reflect.ValueOf(self._execute);
	case "_setup_modification": return reflect.ValueOf(self._setup_modification);
	case "_draw_editor_gizmo": return reflect.ValueOf(self._draw_editor_gizmo);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SkeletonModification2DCCDIK struct {_ [0]*SkeletonModification2DCCDIK; ptr gd.Pointer}

//go:nosplit
func (self SkeletonModification2DCCDIK) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SkeletonModification2DCCDIK) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SkeletonModification2DCCDIK) Super() [1]SkeletonModification2D { return *(*[1]SkeletonModification2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DCCDIK) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DCCDIK) AsSkeletonModification2DCCDIK() [1]SkeletonModification2DCCDIK { return [1]SkeletonModification2DCCDIK{self} }


//go:nosplit
func (self SkeletonModification2DCCDIK) AsSkeletonModification2D() [1]SkeletonModification2D { return *(*[1]SkeletonModification2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DCCDIK) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DCCDIK) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SkeletonModification2DCCDIK) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SkeletonModification2DFABRIK struct {_ [0]*SkeletonModification2DFABRIK; ptr gd.Pointer}

//go:nosplit
func (self SkeletonModification2DFABRIK) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SkeletonModification2DFABRIK) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SkeletonModification2DFABRIK) Super() [1]SkeletonModification2D { return *(*[1]SkeletonModification2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DFABRIK) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DFABRIK) AsSkeletonModification2DFABRIK() [1]SkeletonModification2DFABRIK { return [1]SkeletonModification2DFABRIK{self} }


//go:nosplit
func (self SkeletonModification2DFABRIK) AsSkeletonModification2D() [1]SkeletonModification2D { return *(*[1]SkeletonModification2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DFABRIK) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DFABRIK) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SkeletonModification2DFABRIK) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SkeletonModification2DJiggle struct {_ [0]*SkeletonModification2DJiggle; ptr gd.Pointer}

//go:nosplit
func (self SkeletonModification2DJiggle) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SkeletonModification2DJiggle) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SkeletonModification2DJiggle) Super() [1]SkeletonModification2D { return *(*[1]SkeletonModification2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DJiggle) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DJiggle) AsSkeletonModification2DJiggle() [1]SkeletonModification2DJiggle { return [1]SkeletonModification2DJiggle{self} }


//go:nosplit
func (self SkeletonModification2DJiggle) AsSkeletonModification2D() [1]SkeletonModification2D { return *(*[1]SkeletonModification2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DJiggle) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DJiggle) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SkeletonModification2DJiggle) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SkeletonModification2DLookAt struct {_ [0]*SkeletonModification2DLookAt; ptr gd.Pointer}

//go:nosplit
func (self SkeletonModification2DLookAt) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SkeletonModification2DLookAt) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SkeletonModification2DLookAt) Super() [1]SkeletonModification2D { return *(*[1]SkeletonModification2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DLookAt) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DLookAt) AsSkeletonModification2DLookAt() [1]SkeletonModification2DLookAt { return [1]SkeletonModification2DLookAt{self} }


//go:nosplit
func (self SkeletonModification2DLookAt) AsSkeletonModification2D() [1]SkeletonModification2D { return *(*[1]SkeletonModification2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DLookAt) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DLookAt) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SkeletonModification2DLookAt) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SkeletonModification2DPhysicalBones struct {_ [0]*SkeletonModification2DPhysicalBones; ptr gd.Pointer}

//go:nosplit
func (self SkeletonModification2DPhysicalBones) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SkeletonModification2DPhysicalBones) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SkeletonModification2DPhysicalBones) Super() [1]SkeletonModification2D { return *(*[1]SkeletonModification2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DPhysicalBones) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DPhysicalBones) AsSkeletonModification2DPhysicalBones() [1]SkeletonModification2DPhysicalBones { return [1]SkeletonModification2DPhysicalBones{self} }


//go:nosplit
func (self SkeletonModification2DPhysicalBones) AsSkeletonModification2D() [1]SkeletonModification2D { return *(*[1]SkeletonModification2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DPhysicalBones) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DPhysicalBones) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SkeletonModification2DPhysicalBones) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SkeletonModification2DStackHolder struct {_ [0]*SkeletonModification2DStackHolder; ptr gd.Pointer}

//go:nosplit
func (self SkeletonModification2DStackHolder) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SkeletonModification2DStackHolder) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SkeletonModification2DStackHolder) Super() [1]SkeletonModification2D { return *(*[1]SkeletonModification2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DStackHolder) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DStackHolder) AsSkeletonModification2DStackHolder() [1]SkeletonModification2DStackHolder { return [1]SkeletonModification2DStackHolder{self} }


//go:nosplit
func (self SkeletonModification2DStackHolder) AsSkeletonModification2D() [1]SkeletonModification2D { return *(*[1]SkeletonModification2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DStackHolder) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DStackHolder) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SkeletonModification2DStackHolder) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SkeletonModification2DTwoBoneIK struct {_ [0]*SkeletonModification2DTwoBoneIK; ptr gd.Pointer}

//go:nosplit
func (self SkeletonModification2DTwoBoneIK) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SkeletonModification2DTwoBoneIK) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SkeletonModification2DTwoBoneIK) Super() [1]SkeletonModification2D { return *(*[1]SkeletonModification2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DTwoBoneIK) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DTwoBoneIK) AsSkeletonModification2DTwoBoneIK() [1]SkeletonModification2DTwoBoneIK { return [1]SkeletonModification2DTwoBoneIK{self} }


//go:nosplit
func (self SkeletonModification2DTwoBoneIK) AsSkeletonModification2D() [1]SkeletonModification2D { return *(*[1]SkeletonModification2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DTwoBoneIK) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModification2DTwoBoneIK) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SkeletonModification2DTwoBoneIK) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SkeletonModificationStack2D struct {_ [0]*SkeletonModificationStack2D; ptr gd.Pointer}

//go:nosplit
func (self SkeletonModificationStack2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SkeletonModificationStack2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SkeletonModificationStack2D) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModificationStack2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModificationStack2D) AsSkeletonModificationStack2D() [1]SkeletonModificationStack2D { return [1]SkeletonModificationStack2D{self} }


//go:nosplit
func (self SkeletonModificationStack2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModificationStack2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SkeletonModificationStack2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SkeletonModifier3D struct {_ [0]*SkeletonModifier3D; ptr gd.Pointer}

//go:nosplit
func (self SkeletonModifier3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SkeletonModifier3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SkeletonModifier3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModifier3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModifier3D) AsSkeletonModifier3D() [1]SkeletonModifier3D { return [1]SkeletonModifier3D{self} }


//go:nosplit
func (self SkeletonModifier3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonModifier3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Override this virtual method to implement a custom skeleton modifier. You should do things like get the [Skeleton3D]'s current pose and apply the pose here.
[method _process_modification] must not apply [member influence] to bone poses because the [Skeleton3D] automatically applies influence to all bone poses set by the modifier.
*/
func (SkeletonModifier3D) _process_modification(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (self SkeletonModifier3D) Virtual(name string) reflect.Value {
	switch name {
	case "_process_modification": return reflect.ValueOf(self._process_modification);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type SkeletonProfileTailDirection int64
type SkeletonProfile struct {_ [0]*SkeletonProfile; ptr gd.Pointer}

//go:nosplit
func (self SkeletonProfile) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SkeletonProfile) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SkeletonProfile) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonProfile) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonProfile) AsSkeletonProfile() [1]SkeletonProfile { return [1]SkeletonProfile{self} }


//go:nosplit
func (self SkeletonProfile) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonProfile) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SkeletonProfile) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SkeletonProfileHumanoid struct {_ [0]*SkeletonProfileHumanoid; ptr gd.Pointer}

//go:nosplit
func (self SkeletonProfileHumanoid) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SkeletonProfileHumanoid) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SkeletonProfileHumanoid) Super() [1]SkeletonProfile { return *(*[1]SkeletonProfile)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonProfileHumanoid) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonProfileHumanoid) AsSkeletonProfileHumanoid() [1]SkeletonProfileHumanoid { return [1]SkeletonProfileHumanoid{self} }


//go:nosplit
func (self SkeletonProfileHumanoid) AsSkeletonProfile() [1]SkeletonProfile { return *(*[1]SkeletonProfile)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonProfileHumanoid) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkeletonProfileHumanoid) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SkeletonProfileHumanoid) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Skin struct {_ [0]*Skin; ptr gd.Pointer}

//go:nosplit
func (self Skin) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Skin) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Skin) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Skin) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Skin) AsSkin() [1]Skin { return [1]Skin{self} }


//go:nosplit
func (self Skin) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Skin) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Skin) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SkinReference struct {_ [0]*SkinReference; ptr gd.Pointer}

//go:nosplit
func (self SkinReference) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SkinReference) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SkinReference) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkinReference) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SkinReference) AsSkinReference() [1]SkinReference { return [1]SkinReference{self} }


//go:nosplit
func (self SkinReference) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SkinReference) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type SkyRadianceSize int64

type SkyProcessMode int64
type Sky struct {_ [0]*Sky; ptr gd.Pointer}

//go:nosplit
func (self Sky) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Sky) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Sky) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Sky) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Sky) AsSky() [1]Sky { return [1]Sky{self} }


//go:nosplit
func (self Sky) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Sky) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Sky) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Slider struct {_ [0]*Slider; ptr gd.Pointer}

//go:nosplit
func (self Slider) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Slider) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Slider) Super() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Slider) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Slider) AsSlider() [1]Slider { return [1]Slider{self} }


//go:nosplit
func (self Slider) AsRange() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Slider) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Slider) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Slider) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Slider) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type SliderJoint3DParam int64
type SliderJoint3D struct {_ [0]*SliderJoint3D; ptr gd.Pointer}

//go:nosplit
func (self SliderJoint3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SliderJoint3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SliderJoint3D) Super() [1]Joint3D { return *(*[1]Joint3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SliderJoint3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SliderJoint3D) AsSliderJoint3D() [1]SliderJoint3D { return [1]SliderJoint3D{self} }


//go:nosplit
func (self SliderJoint3D) AsJoint3D() [1]Joint3D { return *(*[1]Joint3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SliderJoint3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SliderJoint3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self SliderJoint3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type SoftBody3DDisableMode int64
type SoftBody3D struct {_ [0]*SoftBody3D; ptr gd.Pointer}

//go:nosplit
func (self SoftBody3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SoftBody3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SoftBody3D) Super() [1]MeshInstance3D { return *(*[1]MeshInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SoftBody3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SoftBody3D) AsSoftBody3D() [1]SoftBody3D { return [1]SoftBody3D{self} }


//go:nosplit
func (self SoftBody3D) AsMeshInstance3D() [1]MeshInstance3D { return *(*[1]MeshInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SoftBody3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SoftBody3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SoftBody3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SoftBody3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self SoftBody3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SphereMesh struct {_ [0]*SphereMesh; ptr gd.Pointer}

//go:nosplit
func (self SphereMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SphereMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SphereMesh) Super() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SphereMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SphereMesh) AsSphereMesh() [1]SphereMesh { return [1]SphereMesh{self} }


//go:nosplit
func (self SphereMesh) AsPrimitiveMesh() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SphereMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SphereMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SphereMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SphereMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SphereOccluder3D struct {_ [0]*SphereOccluder3D; ptr gd.Pointer}

//go:nosplit
func (self SphereOccluder3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SphereOccluder3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SphereOccluder3D) Super() [1]Occluder3D { return *(*[1]Occluder3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SphereOccluder3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SphereOccluder3D) AsSphereOccluder3D() [1]SphereOccluder3D { return [1]SphereOccluder3D{self} }


//go:nosplit
func (self SphereOccluder3D) AsOccluder3D() [1]Occluder3D { return *(*[1]Occluder3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SphereOccluder3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SphereOccluder3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SphereOccluder3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SphereShape3D struct {_ [0]*SphereShape3D; ptr gd.Pointer}

//go:nosplit
func (self SphereShape3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SphereShape3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SphereShape3D) Super() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SphereShape3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SphereShape3D) AsSphereShape3D() [1]SphereShape3D { return [1]SphereShape3D{self} }


//go:nosplit
func (self SphereShape3D) AsShape3D() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SphereShape3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SphereShape3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SphereShape3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SpinBox struct {_ [0]*SpinBox; ptr gd.Pointer}

//go:nosplit
func (self SpinBox) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SpinBox) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SpinBox) Super() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpinBox) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpinBox) AsSpinBox() [1]SpinBox { return [1]SpinBox{self} }


//go:nosplit
func (self SpinBox) AsRange() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpinBox) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpinBox) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpinBox) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self SpinBox) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type SplitContainerDraggerVisibility int64
type SplitContainer struct {_ [0]*SplitContainer; ptr gd.Pointer}

//go:nosplit
func (self SplitContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SplitContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SplitContainer) Super() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SplitContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SplitContainer) AsSplitContainer() [1]SplitContainer { return [1]SplitContainer{self} }


//go:nosplit
func (self SplitContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SplitContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SplitContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SplitContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self SplitContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SpotLight3D struct {_ [0]*SpotLight3D; ptr gd.Pointer}

//go:nosplit
func (self SpotLight3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SpotLight3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SpotLight3D) Super() [1]Light3D { return *(*[1]Light3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpotLight3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpotLight3D) AsSpotLight3D() [1]SpotLight3D { return [1]SpotLight3D{self} }


//go:nosplit
func (self SpotLight3D) AsLight3D() [1]Light3D { return *(*[1]Light3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpotLight3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpotLight3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpotLight3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self SpotLight3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SpringArm3D struct {_ [0]*SpringArm3D; ptr gd.Pointer}

//go:nosplit
func (self SpringArm3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SpringArm3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SpringArm3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpringArm3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpringArm3D) AsSpringArm3D() [1]SpringArm3D { return [1]SpringArm3D{self} }


//go:nosplit
func (self SpringArm3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpringArm3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self SpringArm3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Sprite2D struct {_ [0]*Sprite2D; ptr gd.Pointer}

//go:nosplit
func (self Sprite2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Sprite2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Sprite2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Sprite2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Sprite2D) AsSprite2D() [1]Sprite2D { return [1]Sprite2D{self} }


//go:nosplit
func (self Sprite2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Sprite2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Sprite2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Sprite2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Sprite3D struct {_ [0]*Sprite3D; ptr gd.Pointer}

//go:nosplit
func (self Sprite3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Sprite3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Sprite3D) Super() [1]SpriteBase3D { return *(*[1]SpriteBase3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Sprite3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Sprite3D) AsSprite3D() [1]Sprite3D { return [1]Sprite3D{self} }


//go:nosplit
func (self Sprite3D) AsSpriteBase3D() [1]SpriteBase3D { return *(*[1]SpriteBase3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Sprite3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Sprite3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Sprite3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Sprite3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Sprite3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type SpriteBase3DDrawFlags int64

type SpriteBase3DAlphaCutMode int64
type SpriteBase3D struct {_ [0]*SpriteBase3D; ptr gd.Pointer}

//go:nosplit
func (self SpriteBase3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SpriteBase3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SpriteBase3D) Super() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpriteBase3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpriteBase3D) AsSpriteBase3D() [1]SpriteBase3D { return [1]SpriteBase3D{self} }


//go:nosplit
func (self SpriteBase3D) AsGeometryInstance3D() [1]GeometryInstance3D { return *(*[1]GeometryInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpriteBase3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpriteBase3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpriteBase3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self SpriteBase3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SpriteFrames struct {_ [0]*SpriteFrames; ptr gd.Pointer}

//go:nosplit
func (self SpriteFrames) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SpriteFrames) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SpriteFrames) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpriteFrames) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpriteFrames) AsSpriteFrames() [1]SpriteFrames { return [1]SpriteFrames{self} }


//go:nosplit
func (self SpriteFrames) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SpriteFrames) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SpriteFrames) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type StandardMaterial3D struct {_ [0]*StandardMaterial3D; ptr gd.Pointer}

//go:nosplit
func (self StandardMaterial3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StandardMaterial3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StandardMaterial3D) Super() [1]BaseMaterial3D { return *(*[1]BaseMaterial3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StandardMaterial3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StandardMaterial3D) AsStandardMaterial3D() [1]StandardMaterial3D { return [1]StandardMaterial3D{self} }


//go:nosplit
func (self StandardMaterial3D) AsBaseMaterial3D() [1]BaseMaterial3D { return *(*[1]BaseMaterial3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StandardMaterial3D) AsMaterial() [1]Material { return *(*[1]Material)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StandardMaterial3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StandardMaterial3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self StandardMaterial3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type StaticBody2D struct {_ [0]*StaticBody2D; ptr gd.Pointer}

//go:nosplit
func (self StaticBody2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StaticBody2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StaticBody2D) Super() [1]PhysicsBody2D { return *(*[1]PhysicsBody2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StaticBody2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StaticBody2D) AsStaticBody2D() [1]StaticBody2D { return [1]StaticBody2D{self} }


//go:nosplit
func (self StaticBody2D) AsPhysicsBody2D() [1]PhysicsBody2D { return *(*[1]PhysicsBody2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StaticBody2D) AsCollisionObject2D() [1]CollisionObject2D { return *(*[1]CollisionObject2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StaticBody2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StaticBody2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StaticBody2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self StaticBody2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type StaticBody3D struct {_ [0]*StaticBody3D; ptr gd.Pointer}

//go:nosplit
func (self StaticBody3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StaticBody3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StaticBody3D) Super() [1]PhysicsBody3D { return *(*[1]PhysicsBody3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StaticBody3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StaticBody3D) AsStaticBody3D() [1]StaticBody3D { return [1]StaticBody3D{self} }


//go:nosplit
func (self StaticBody3D) AsPhysicsBody3D() [1]PhysicsBody3D { return *(*[1]PhysicsBody3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StaticBody3D) AsCollisionObject3D() [1]CollisionObject3D { return *(*[1]CollisionObject3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StaticBody3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StaticBody3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self StaticBody3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type StatusIndicator struct {_ [0]*StatusIndicator; ptr gd.Pointer}

//go:nosplit
func (self StatusIndicator) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StatusIndicator) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StatusIndicator) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StatusIndicator) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StatusIndicator) AsStatusIndicator() [1]StatusIndicator { return [1]StatusIndicator{self} }


//go:nosplit
func (self StatusIndicator) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self StatusIndicator) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type StreamPeer struct {_ [0]*StreamPeer; ptr gd.Pointer}

//go:nosplit
func (self StreamPeer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StreamPeer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StreamPeer) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeer) AsStreamPeer() [1]StreamPeer { return [1]StreamPeer{self} }


//go:nosplit
func (self StreamPeer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self StreamPeer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type StreamPeerBuffer struct {_ [0]*StreamPeerBuffer; ptr gd.Pointer}

//go:nosplit
func (self StreamPeerBuffer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StreamPeerBuffer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StreamPeerBuffer) Super() [1]StreamPeer { return *(*[1]StreamPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerBuffer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerBuffer) AsStreamPeerBuffer() [1]StreamPeerBuffer { return [1]StreamPeerBuffer{self} }


//go:nosplit
func (self StreamPeerBuffer) AsStreamPeer() [1]StreamPeer { return *(*[1]StreamPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerBuffer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self StreamPeerBuffer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type StreamPeerExtension struct {_ [0]*StreamPeerExtension; ptr gd.Pointer}

//go:nosplit
func (self StreamPeerExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StreamPeerExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StreamPeerExtension) Super() [1]StreamPeer { return *(*[1]StreamPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerExtension) AsStreamPeerExtension() [1]StreamPeerExtension { return [1]StreamPeerExtension{self} }


//go:nosplit
func (self StreamPeerExtension) AsStreamPeer() [1]StreamPeer { return *(*[1]StreamPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerExtension) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (StreamPeerExtension) _get_data(impl func(ptr unsafe.Pointer, r_buffer unsafe.Pointer, r_bytes gd.Int, r_received *int32) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var r_buffer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		var r_bytes = gd.UnsafeGet[gd.Int](p_args,1)
		var r_received = gd.UnsafeGet[*int32](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, r_buffer, r_bytes, r_received)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (StreamPeerExtension) _get_partial_data(impl func(ptr unsafe.Pointer, r_buffer unsafe.Pointer, r_bytes gd.Int, r_received *int32) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var r_buffer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		var r_bytes = gd.UnsafeGet[gd.Int](p_args,1)
		var r_received = gd.UnsafeGet[*int32](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, r_buffer, r_bytes, r_received)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (StreamPeerExtension) _put_data(impl func(ptr unsafe.Pointer, p_data unsafe.Pointer, p_bytes gd.Int, r_sent *int32) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_data = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		var p_bytes = gd.UnsafeGet[gd.Int](p_args,1)
		var r_sent = gd.UnsafeGet[*int32](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, p_data, p_bytes, r_sent)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (StreamPeerExtension) _put_partial_data(impl func(ptr unsafe.Pointer, p_data unsafe.Pointer, p_bytes gd.Int, r_sent *int32) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_data = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		var p_bytes = gd.UnsafeGet[gd.Int](p_args,1)
		var r_sent = gd.UnsafeGet[*int32](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, p_data, p_bytes, r_sent)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (StreamPeerExtension) _get_available_bytes(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self StreamPeerExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_get_data": return reflect.ValueOf(self._get_data);
	case "_get_partial_data": return reflect.ValueOf(self._get_partial_data);
	case "_put_data": return reflect.ValueOf(self._put_data);
	case "_put_partial_data": return reflect.ValueOf(self._put_partial_data);
	case "_get_available_bytes": return reflect.ValueOf(self._get_available_bytes);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type StreamPeerGZIP struct {_ [0]*StreamPeerGZIP; ptr gd.Pointer}

//go:nosplit
func (self StreamPeerGZIP) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StreamPeerGZIP) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StreamPeerGZIP) Super() [1]StreamPeer { return *(*[1]StreamPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerGZIP) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerGZIP) AsStreamPeerGZIP() [1]StreamPeerGZIP { return [1]StreamPeerGZIP{self} }


//go:nosplit
func (self StreamPeerGZIP) AsStreamPeer() [1]StreamPeer { return *(*[1]StreamPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerGZIP) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self StreamPeerGZIP) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type StreamPeerTCPStatus int64
type StreamPeerTCP struct {_ [0]*StreamPeerTCP; ptr gd.Pointer}

//go:nosplit
func (self StreamPeerTCP) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StreamPeerTCP) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StreamPeerTCP) Super() [1]StreamPeer { return *(*[1]StreamPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerTCP) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerTCP) AsStreamPeerTCP() [1]StreamPeerTCP { return [1]StreamPeerTCP{self} }


//go:nosplit
func (self StreamPeerTCP) AsStreamPeer() [1]StreamPeer { return *(*[1]StreamPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerTCP) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self StreamPeerTCP) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type StreamPeerTLSStatus int64
type StreamPeerTLS struct {_ [0]*StreamPeerTLS; ptr gd.Pointer}

//go:nosplit
func (self StreamPeerTLS) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StreamPeerTLS) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StreamPeerTLS) Super() [1]StreamPeer { return *(*[1]StreamPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerTLS) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerTLS) AsStreamPeerTLS() [1]StreamPeerTLS { return [1]StreamPeerTLS{self} }


//go:nosplit
func (self StreamPeerTLS) AsStreamPeer() [1]StreamPeer { return *(*[1]StreamPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StreamPeerTLS) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self StreamPeerTLS) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type StyleBox struct {_ [0]*StyleBox; ptr gd.Pointer}

//go:nosplit
func (self StyleBox) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StyleBox) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StyleBox) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBox) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBox) AsStyleBox() [1]StyleBox { return [1]StyleBox{self} }


//go:nosplit
func (self StyleBox) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBox) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (StyleBox) _draw(impl func(ptr unsafe.Pointer, to_canvas_item gd.RID, rect gd.Rect2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var to_canvas_item = gd.UnsafeGet[gd.RID](p_args,0)
		var rect = gd.UnsafeGet[gd.Rect2](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, to_canvas_item, rect)
		ctx.End()
	}
}

func (StyleBox) _get_draw_rect(impl func(ptr unsafe.Pointer, rect gd.Rect2) gd.Rect2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var rect = gd.UnsafeGet[gd.Rect2](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, rect)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Virtual method to be implemented by the user. Returns a custom minimum size that the stylebox must respect when drawing. By default [method get_minimum_size] only takes content margins into account. This method can be overridden to add another size restriction. A combination of the default behavior and the output of this method will be used, to account for both sizes.
*/
func (StyleBox) _get_minimum_size(impl func(ptr unsafe.Pointer) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (StyleBox) _test_mask(impl func(ptr unsafe.Pointer, point gd.Vector2, rect gd.Rect2) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var point = gd.UnsafeGet[gd.Vector2](p_args,0)
		var rect = gd.UnsafeGet[gd.Rect2](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, point, rect)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self StyleBox) Virtual(name string) reflect.Value {
	switch name {
	case "_draw": return reflect.ValueOf(self._draw);
	case "_get_draw_rect": return reflect.ValueOf(self._get_draw_rect);
	case "_get_minimum_size": return reflect.ValueOf(self._get_minimum_size);
	case "_test_mask": return reflect.ValueOf(self._test_mask);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type StyleBoxEmpty struct {_ [0]*StyleBoxEmpty; ptr gd.Pointer}

//go:nosplit
func (self StyleBoxEmpty) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StyleBoxEmpty) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StyleBoxEmpty) Super() [1]StyleBox { return *(*[1]StyleBox)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxEmpty) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxEmpty) AsStyleBoxEmpty() [1]StyleBoxEmpty { return [1]StyleBoxEmpty{self} }


//go:nosplit
func (self StyleBoxEmpty) AsStyleBox() [1]StyleBox { return *(*[1]StyleBox)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxEmpty) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxEmpty) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self StyleBoxEmpty) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type StyleBoxFlat struct {_ [0]*StyleBoxFlat; ptr gd.Pointer}

//go:nosplit
func (self StyleBoxFlat) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StyleBoxFlat) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StyleBoxFlat) Super() [1]StyleBox { return *(*[1]StyleBox)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxFlat) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxFlat) AsStyleBoxFlat() [1]StyleBoxFlat { return [1]StyleBoxFlat{self} }


//go:nosplit
func (self StyleBoxFlat) AsStyleBox() [1]StyleBox { return *(*[1]StyleBox)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxFlat) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxFlat) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self StyleBoxFlat) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type StyleBoxLine struct {_ [0]*StyleBoxLine; ptr gd.Pointer}

//go:nosplit
func (self StyleBoxLine) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StyleBoxLine) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StyleBoxLine) Super() [1]StyleBox { return *(*[1]StyleBox)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxLine) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxLine) AsStyleBoxLine() [1]StyleBoxLine { return [1]StyleBoxLine{self} }


//go:nosplit
func (self StyleBoxLine) AsStyleBox() [1]StyleBox { return *(*[1]StyleBox)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxLine) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxLine) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self StyleBoxLine) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type StyleBoxTextureAxisStretchMode int64
type StyleBoxTexture struct {_ [0]*StyleBoxTexture; ptr gd.Pointer}

//go:nosplit
func (self StyleBoxTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *StyleBoxTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self StyleBoxTexture) Super() [1]StyleBox { return *(*[1]StyleBox)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxTexture) AsStyleBoxTexture() [1]StyleBoxTexture { return [1]StyleBoxTexture{self} }


//go:nosplit
func (self StyleBoxTexture) AsStyleBox() [1]StyleBox { return *(*[1]StyleBox)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxTexture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self StyleBoxTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self StyleBoxTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type SubViewportClearMode int64

type SubViewportUpdateMode int64
type SubViewport struct {_ [0]*SubViewport; ptr gd.Pointer}

//go:nosplit
func (self SubViewport) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SubViewport) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SubViewport) Super() [1]Viewport { return *(*[1]Viewport)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SubViewport) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SubViewport) AsSubViewport() [1]SubViewport { return [1]SubViewport{self} }


//go:nosplit
func (self SubViewport) AsViewport() [1]Viewport { return *(*[1]Viewport)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SubViewport) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self SubViewport) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SubViewportContainer struct {_ [0]*SubViewportContainer; ptr gd.Pointer}

//go:nosplit
func (self SubViewportContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SubViewportContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SubViewportContainer) Super() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SubViewportContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SubViewportContainer) AsSubViewportContainer() [1]SubViewportContainer { return [1]SubViewportContainer{self} }


//go:nosplit
func (self SubViewportContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SubViewportContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SubViewportContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SubViewportContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Virtual method to be implemented by the user. If it returns [code]true[/code], the [param event] is propagated to [SubViewport] children. Propagation doesn't happen if it returns [code]false[/code]. If the function is not implemented, all events are propagated to SubViewports.
*/
func (SubViewportContainer) _propagate_input_event(impl func(ptr unsafe.Pointer, event InputEvent) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var event InputEvent
		event.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,0)}))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, event)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self SubViewportContainer) Virtual(name string) reflect.Value {
	switch name {
	case "_propagate_input_event": return reflect.ValueOf(self._propagate_input_event);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type SurfaceToolCustomFormat int64

type SurfaceToolSkinWeightCount int64
type SurfaceTool struct {_ [0]*SurfaceTool; ptr gd.Pointer}

//go:nosplit
func (self SurfaceTool) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SurfaceTool) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SurfaceTool) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SurfaceTool) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SurfaceTool) AsSurfaceTool() [1]SurfaceTool { return [1]SurfaceTool{self} }


//go:nosplit
func (self SurfaceTool) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SurfaceTool) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SyntaxHighlighter struct {_ [0]*SyntaxHighlighter; ptr gd.Pointer}

//go:nosplit
func (self SyntaxHighlighter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SyntaxHighlighter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SyntaxHighlighter) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SyntaxHighlighter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SyntaxHighlighter) AsSyntaxHighlighter() [1]SyntaxHighlighter { return [1]SyntaxHighlighter{self} }


//go:nosplit
func (self SyntaxHighlighter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SyntaxHighlighter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Virtual method which can be overridden to return syntax highlighting data.
See [method get_line_syntax_highlighting] for more details.
*/
func (SyntaxHighlighter) _get_line_syntax_highlighting(impl func(ptr unsafe.Pointer, line gd.Int) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var line = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, line)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Virtual method which can be overridden to clear any local caches.
*/
func (SyntaxHighlighter) _clear_highlighting_cache(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Virtual method which can be overridden to update any local caches.
*/
func (SyntaxHighlighter) _update_cache(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (self SyntaxHighlighter) Virtual(name string) reflect.Value {
	switch name {
	case "_get_line_syntax_highlighting": return reflect.ValueOf(self._get_line_syntax_highlighting);
	case "_clear_highlighting_cache": return reflect.ValueOf(self._clear_highlighting_cache);
	case "_update_cache": return reflect.ValueOf(self._update_cache);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type SystemFont struct {_ [0]*SystemFont; ptr gd.Pointer}

//go:nosplit
func (self SystemFont) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *SystemFont) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self SystemFont) Super() [1]Font { return *(*[1]Font)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SystemFont) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SystemFont) AsSystemFont() [1]SystemFont { return [1]SystemFont{self} }


//go:nosplit
func (self SystemFont) AsFont() [1]Font { return *(*[1]Font)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SystemFont) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self SystemFont) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self SystemFont) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TCPServer struct {_ [0]*TCPServer; ptr gd.Pointer}

//go:nosplit
func (self TCPServer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TCPServer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TCPServer) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TCPServer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TCPServer) AsTCPServer() [1]TCPServer { return [1]TCPServer{self} }


//go:nosplit
func (self TCPServer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TCPServer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TLSOptions struct {_ [0]*TLSOptions; ptr gd.Pointer}

//go:nosplit
func (self TLSOptions) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TLSOptions) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TLSOptions) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TLSOptions) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TLSOptions) AsTLSOptions() [1]TLSOptions { return [1]TLSOptions{self} }


//go:nosplit
func (self TLSOptions) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TLSOptions) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TabBarAlignmentMode int64

type TabBarCloseButtonDisplayPolicy int64
type TabBar struct {_ [0]*TabBar; ptr gd.Pointer}

//go:nosplit
func (self TabBar) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TabBar) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TabBar) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TabBar) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TabBar) AsTabBar() [1]TabBar { return [1]TabBar{self} }


//go:nosplit
func (self TabBar) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TabBar) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TabBar) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self TabBar) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TabContainerTabPosition int64
type TabContainer struct {_ [0]*TabContainer; ptr gd.Pointer}

//go:nosplit
func (self TabContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TabContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TabContainer) Super() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TabContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TabContainer) AsTabContainer() [1]TabContainer { return [1]TabContainer{self} }


//go:nosplit
func (self TabContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TabContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TabContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TabContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self TabContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TextEditMenuItems int64

type TextEditEditAction int64

type TextEditSearchFlags int64

type TextEditCaretType int64

type TextEditSelectionMode int64

type TextEditLineWrappingMode int64

type TextEditGutterType int64
type TextEdit struct {_ [0]*TextEdit; ptr gd.Pointer}

//go:nosplit
func (self TextEdit) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextEdit) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextEdit) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextEdit) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextEdit) AsTextEdit() [1]TextEdit { return [1]TextEdit{self} }


//go:nosplit
func (self TextEdit) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextEdit) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextEdit) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Override this method to define what happens when the user types in the provided key [param unicode_char].
*/
func (TextEdit) _handle_unicode_input(impl func(ptr unsafe.Pointer, unicode_char gd.Int, caret_index gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var unicode_char = gd.UnsafeGet[gd.Int](p_args,0)
		var caret_index = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, unicode_char, caret_index)
		ctx.End()
	}
}

/*
Override this method to define what happens when the user presses the backspace key.
*/
func (TextEdit) _backspace(impl func(ptr unsafe.Pointer, caret_index gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var caret_index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, caret_index)
		ctx.End()
	}
}

/*
Override this method to define what happens when the user performs a cut operation.
*/
func (TextEdit) _cut(impl func(ptr unsafe.Pointer, caret_index gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var caret_index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, caret_index)
		ctx.End()
	}
}

/*
Override this method to define what happens when the user performs a copy operation.
*/
func (TextEdit) _copy(impl func(ptr unsafe.Pointer, caret_index gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var caret_index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, caret_index)
		ctx.End()
	}
}

/*
Override this method to define what happens when the user performs a paste operation.
*/
func (TextEdit) _paste(impl func(ptr unsafe.Pointer, caret_index gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var caret_index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, caret_index)
		ctx.End()
	}
}

/*
Override this method to define what happens when the user performs a paste operation with middle mouse button.
[b]Note:[/b] This method is only implemented on Linux.
*/
func (TextEdit) _paste_primary_clipboard(impl func(ptr unsafe.Pointer, caret_index gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var caret_index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, caret_index)
		ctx.End()
	}
}

func (self TextEdit) Virtual(name string) reflect.Value {
	switch name {
	case "_handle_unicode_input": return reflect.ValueOf(self._handle_unicode_input);
	case "_backspace": return reflect.ValueOf(self._backspace);
	case "_cut": return reflect.ValueOf(self._cut);
	case "_copy": return reflect.ValueOf(self._copy);
	case "_paste": return reflect.ValueOf(self._paste);
	case "_paste_primary_clipboard": return reflect.ValueOf(self._paste_primary_clipboard);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TextLine struct {_ [0]*TextLine; ptr gd.Pointer}

//go:nosplit
func (self TextLine) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextLine) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextLine) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextLine) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextLine) AsTextLine() [1]TextLine { return [1]TextLine{self} }


//go:nosplit
func (self TextLine) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TextLine) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TextMesh struct {_ [0]*TextMesh; ptr gd.Pointer}

//go:nosplit
func (self TextMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextMesh) Super() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextMesh) AsTextMesh() [1]TextMesh { return [1]TextMesh{self} }


//go:nosplit
func (self TextMesh) AsPrimitiveMesh() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TextMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TextParagraph struct {_ [0]*TextParagraph; ptr gd.Pointer}

//go:nosplit
func (self TextParagraph) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextParagraph) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextParagraph) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextParagraph) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextParagraph) AsTextParagraph() [1]TextParagraph { return [1]TextParagraph{self} }


//go:nosplit
func (self TextParagraph) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TextParagraph) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TextServerFontAntialiasing int64

type TextServerFontLCDSubpixelLayout int64

type TextServerDirection int64

type TextServerOrientation int64

type TextServerJustificationFlag int64

type TextServerAutowrapMode int64

type TextServerLineBreakFlag int64

type TextServerVisibleCharactersBehavior int64

type TextServerOverrunBehavior int64

type TextServerTextOverrunFlag int64

type TextServerGraphemeFlag int64

type TextServerHinting int64

type TextServerSubpixelPositioning int64

type TextServerFeature int64

type TextServerContourPointTag int64

type TextServerSpacingType int64

type TextServerFontStyle int64

type TextServerStructuredTextParser int64

type TextServerFixedSizeScaleMode int64
type TextServer struct {_ [0]*TextServer; ptr gd.Pointer}

//go:nosplit
func (self TextServer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextServer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextServer) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServer) AsTextServer() [1]TextServer { return [1]TextServer{self} }


//go:nosplit
func (self TextServer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TextServer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TextServerAdvanced struct {_ [0]*TextServerAdvanced; ptr gd.Pointer}

//go:nosplit
func (self TextServerAdvanced) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextServerAdvanced) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextServerAdvanced) Super() [1]TextServerExtension { return *(*[1]TextServerExtension)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServerAdvanced) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServerAdvanced) AsTextServerAdvanced() [1]TextServerAdvanced { return [1]TextServerAdvanced{self} }


//go:nosplit
func (self TextServerAdvanced) AsTextServerExtension() [1]TextServerExtension { return *(*[1]TextServerExtension)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServerAdvanced) AsTextServer() [1]TextServer { return *(*[1]TextServer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServerAdvanced) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TextServerAdvanced) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TextServerDummy struct {_ [0]*TextServerDummy; ptr gd.Pointer}

//go:nosplit
func (self TextServerDummy) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextServerDummy) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextServerDummy) Super() [1]TextServerExtension { return *(*[1]TextServerExtension)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServerDummy) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServerDummy) AsTextServerDummy() [1]TextServerDummy { return [1]TextServerDummy{self} }


//go:nosplit
func (self TextServerDummy) AsTextServerExtension() [1]TextServerExtension { return *(*[1]TextServerExtension)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServerDummy) AsTextServer() [1]TextServer { return *(*[1]TextServer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServerDummy) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TextServerDummy) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TextServerExtension struct {_ [0]*TextServerExtension; ptr gd.Pointer}

//go:nosplit
func (self TextServerExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextServerExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextServerExtension) Super() [1]TextServer { return *(*[1]TextServer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServerExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServerExtension) AsTextServerExtension() [1]TextServerExtension { return [1]TextServerExtension{self} }


//go:nosplit
func (self TextServerExtension) AsTextServer() [1]TextServer { return *(*[1]TextServer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServerExtension) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
[b]Required.[/b]
Returns [code]true[/code] if the server supports a feature.
*/
func (TextServerExtension) _has_feature(impl func(ptr unsafe.Pointer, feature TextServerFeature) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var feature = gd.UnsafeGet[TextServerFeature](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, feature)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns the name of the server interface.
*/
func (TextServerExtension) _get_name(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns text server features, see [enum TextServer.Feature].
*/
func (TextServerExtension) _get_features(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Frees an object created by this [TextServer].
*/
func (TextServerExtension) _free_rid(impl func(ptr unsafe.Pointer, rid gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, rid)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns [code]true[/code] if [param rid] is valid resource owned by this text server.
*/
func (TextServerExtension) _has(impl func(ptr unsafe.Pointer, rid gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Loads optional TextServer database (e.g. ICU break iterators and dictionaries).
*/
func (TextServerExtension) _load_support_data(impl func(ptr unsafe.Pointer, filename gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var filename = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, filename)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns default TextServer database (e.g. ICU break iterators and dictionaries) filename.
*/
func (TextServerExtension) _get_support_data_filename(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns TextServer database (e.g. ICU break iterators and dictionaries) description.
*/
func (TextServerExtension) _get_support_data_info(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Saves optional TextServer database (e.g. ICU break iterators and dictionaries) to the file.
*/
func (TextServerExtension) _save_support_data(impl func(ptr unsafe.Pointer, filename gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var filename = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, filename)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns [code]true[/code] if locale is right-to-left.
*/
func (TextServerExtension) _is_locale_right_to_left(impl func(ptr unsafe.Pointer, locale gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var locale = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, locale)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Converts readable feature, variation, script, or language name to OpenType tag.
*/
func (TextServerExtension) _name_to_tag(impl func(ptr unsafe.Pointer, name gd.String) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, name)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Converts OpenType tag to readable feature, variation, script, or language name.
*/
func (TextServerExtension) _tag_to_name(impl func(ptr unsafe.Pointer, tag gd.Int) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var tag = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, tag)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Required.[/b]
Creates a new, empty font cache entry resource.
*/
func (TextServerExtension) _create_font(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Optional, implement if font supports extra spacing or baseline offset.
Creates a new variation existing font which is reusing the same glyph cache and font data.
*/
func (TextServerExtension) _create_font_linked_variation(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets font source data, e.g contents of the dynamic font source file.
*/
func (TextServerExtension) _font_set_data(impl func(ptr unsafe.Pointer, font_rid gd.RID, data gd.PackedByteArray) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var data = mmm.Let[gd.PackedByteArray](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, data)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets pointer to the font source data, e.g contents of the dynamic font source file.
*/
func (TextServerExtension) _font_set_data_ptr(impl func(ptr unsafe.Pointer, font_rid gd.RID, data_ptr unsafe.Pointer, data_size gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var data_ptr = gd.UnsafeGet[unsafe.Pointer](p_args,1)
		var data_size = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, data_ptr, data_size)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets an active face index in the TrueType / OpenType collection.
*/
func (TextServerExtension) _font_set_face_index(impl func(ptr unsafe.Pointer, font_rid gd.RID, face_index gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var face_index = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, face_index)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns an active face index in the TrueType / OpenType collection.
*/
func (TextServerExtension) _font_get_face_index(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns number of faces in the TrueType / OpenType collection.
*/
func (TextServerExtension) _font_get_face_count(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets the font style flags, see [enum TextServer.FontStyle].
*/
func (TextServerExtension) _font_set_style(impl func(ptr unsafe.Pointer, font_rid gd.RID, style TextServerFontStyle) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var style = gd.UnsafeGet[TextServerFontStyle](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, style)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns font style flags, see [enum TextServer.FontStyle].
*/
func (TextServerExtension) _font_get_style(impl func(ptr unsafe.Pointer, font_rid gd.RID) TextServerFontStyle, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets the font family name.
*/
func (TextServerExtension) _font_set_name(impl func(ptr unsafe.Pointer, font_rid gd.RID, name gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, name)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns font family name.
*/
func (TextServerExtension) _font_get_name(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns [Dictionary] with OpenType font name strings (localized font names, version, description, license information, sample text, etc.).
*/
func (TextServerExtension) _font_get_ot_name_strings(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets the font style name.
*/
func (TextServerExtension) _font_set_style_name(impl func(ptr unsafe.Pointer, font_rid gd.RID, name_style gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var name_style = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, name_style)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns font style name.
*/
func (TextServerExtension) _font_get_style_name(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets weight (boldness) of the font. A value in the [code]100...999[/code] range, normal font weight is [code]400[/code], bold font weight is [code]700[/code].
*/
func (TextServerExtension) _font_set_weight(impl func(ptr unsafe.Pointer, font_rid gd.RID, weight gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var weight = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, weight)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns weight (boldness) of the font. A value in the [code]100...999[/code] range, normal font weight is [code]400[/code], bold font weight is [code]700[/code].
*/
func (TextServerExtension) _font_get_weight(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets font stretch amount, compared to a normal width. A percentage value between [code]50%[/code] and [code]200%[/code].
*/
func (TextServerExtension) _font_set_stretch(impl func(ptr unsafe.Pointer, font_rid gd.RID, stretch gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var stretch = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, stretch)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns font stretch amount, compared to a normal width. A percentage value between [code]50%[/code] and [code]200%[/code].
*/
func (TextServerExtension) _font_get_stretch(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets font anti-aliasing mode.
*/
func (TextServerExtension) _font_set_antialiasing(impl func(ptr unsafe.Pointer, font_rid gd.RID, antialiasing TextServerFontAntialiasing) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var antialiasing = gd.UnsafeGet[TextServerFontAntialiasing](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, antialiasing)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns font anti-aliasing mode.
*/
func (TextServerExtension) _font_get_antialiasing(impl func(ptr unsafe.Pointer, font_rid gd.RID) TextServerFontAntialiasing, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
If set to [code]true[/code], embedded font bitmap loading is disabled.
*/
func (TextServerExtension) _font_set_disable_embedded_bitmaps(impl func(ptr unsafe.Pointer, font_rid gd.RID, disable_embedded_bitmaps bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var disable_embedded_bitmaps = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, disable_embedded_bitmaps)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns whether the font's embedded bitmap loading is disabled.
*/
func (TextServerExtension) _font_get_disable_embedded_bitmaps(impl func(ptr unsafe.Pointer, font_rid gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
If set to [code]true[/code] font texture mipmap generation is enabled.
*/
func (TextServerExtension) _font_set_generate_mipmaps(impl func(ptr unsafe.Pointer, font_rid gd.RID, generate_mipmaps bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var generate_mipmaps = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, generate_mipmaps)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns [code]true[/code] if font texture mipmap generation is enabled.
*/
func (TextServerExtension) _font_get_generate_mipmaps(impl func(ptr unsafe.Pointer, font_rid gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
If set to [code]true[/code], glyphs of all sizes are rendered using single multichannel signed distance field generated from the dynamic font vector data. MSDF rendering allows displaying the font at any scaling factor without blurriness, and without incurring a CPU cost when the font size changes (since the font no longer needs to be rasterized on the CPU). As a downside, font hinting is not available with MSDF. The lack of font hinting may result in less crisp and less readable fonts at small sizes.
*/
func (TextServerExtension) _font_set_multichannel_signed_distance_field(impl func(ptr unsafe.Pointer, font_rid gd.RID, msdf bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var msdf = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, msdf)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns [code]true[/code] if glyphs of all sizes are rendered using single multichannel signed distance field generated from the dynamic font vector data.
*/
func (TextServerExtension) _font_is_multichannel_signed_distance_field(impl func(ptr unsafe.Pointer, font_rid gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets the width of the range around the shape between the minimum and maximum representable signed distance.
*/
func (TextServerExtension) _font_set_msdf_pixel_range(impl func(ptr unsafe.Pointer, font_rid gd.RID, msdf_pixel_range gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var msdf_pixel_range = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, msdf_pixel_range)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns the width of the range around the shape between the minimum and maximum representable signed distance.
*/
func (TextServerExtension) _font_get_msdf_pixel_range(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets source font size used to generate MSDF textures.
*/
func (TextServerExtension) _font_set_msdf_size(impl func(ptr unsafe.Pointer, font_rid gd.RID, msdf_size gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var msdf_size = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, msdf_size)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns source font size used to generate MSDF textures.
*/
func (TextServerExtension) _font_get_msdf_size(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Sets bitmap font fixed size. If set to value greater than zero, same cache entry will be used for all font sizes.
*/
func (TextServerExtension) _font_set_fixed_size(impl func(ptr unsafe.Pointer, font_rid gd.RID, fixed_size gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var fixed_size = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, fixed_size)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns bitmap font fixed size.
*/
func (TextServerExtension) _font_get_fixed_size(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Sets bitmap font scaling mode. This property is used only if [code]fixed_size[/code] is greater than zero.
*/
func (TextServerExtension) _font_set_fixed_size_scale_mode(impl func(ptr unsafe.Pointer, font_rid gd.RID, fixed_size_scale_mode TextServerFixedSizeScaleMode) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var fixed_size_scale_mode = gd.UnsafeGet[TextServerFixedSizeScaleMode](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, fixed_size_scale_mode)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns bitmap font scaling mode.
*/
func (TextServerExtension) _font_get_fixed_size_scale_mode(impl func(ptr unsafe.Pointer, font_rid gd.RID) TextServerFixedSizeScaleMode, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
If set to [code]true[/code], system fonts can be automatically used as fallbacks.
*/
func (TextServerExtension) _font_set_allow_system_fallback(impl func(ptr unsafe.Pointer, font_rid gd.RID, allow_system_fallback bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var allow_system_fallback = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, allow_system_fallback)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns [code]true[/code] if system fonts can be automatically used as fallbacks.
*/
func (TextServerExtension) _font_is_allow_system_fallback(impl func(ptr unsafe.Pointer, font_rid gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
If set to [code]true[/code] auto-hinting is preferred over font built-in hinting.
*/
func (TextServerExtension) _font_set_force_autohinter(impl func(ptr unsafe.Pointer, font_rid gd.RID, force_autohinter bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var force_autohinter = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, force_autohinter)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns [code]true[/code] if auto-hinting is supported and preferred over font built-in hinting.
*/
func (TextServerExtension) _font_is_force_autohinter(impl func(ptr unsafe.Pointer, font_rid gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets font hinting mode. Used by dynamic fonts only.
*/
func (TextServerExtension) _font_set_hinting(impl func(ptr unsafe.Pointer, font_rid gd.RID, hinting TextServerHinting) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var hinting = gd.UnsafeGet[TextServerHinting](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, hinting)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns the font hinting mode. Used by dynamic fonts only.
*/
func (TextServerExtension) _font_get_hinting(impl func(ptr unsafe.Pointer, font_rid gd.RID) TextServerHinting, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets font subpixel glyph positioning mode.
*/
func (TextServerExtension) _font_set_subpixel_positioning(impl func(ptr unsafe.Pointer, font_rid gd.RID, subpixel_positioning TextServerSubpixelPositioning) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var subpixel_positioning = gd.UnsafeGet[TextServerSubpixelPositioning](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, subpixel_positioning)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns font subpixel glyph positioning mode.
*/
func (TextServerExtension) _font_get_subpixel_positioning(impl func(ptr unsafe.Pointer, font_rid gd.RID) TextServerSubpixelPositioning, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Sets font embolden strength. If [param strength] is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness.
*/
func (TextServerExtension) _font_set_embolden(impl func(ptr unsafe.Pointer, font_rid gd.RID, strength gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var strength = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, strength)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns font embolden strength.
*/
func (TextServerExtension) _font_get_embolden(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets the spacing for [param spacing] (see [enum TextServer.SpacingType]) to [param value] in pixels (not relative to the font size).
*/
func (TextServerExtension) _font_set_spacing(impl func(ptr unsafe.Pointer, font_rid gd.RID, spacing TextServerSpacingType, value gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var spacing = gd.UnsafeGet[TextServerSpacingType](p_args,1)
		var value = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, spacing, value)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns the spacing for [param spacing] (see [enum TextServer.SpacingType]) in pixels (not relative to the font size).
*/
func (TextServerExtension) _font_get_spacing(impl func(ptr unsafe.Pointer, font_rid gd.RID, spacing TextServerSpacingType) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var spacing = gd.UnsafeGet[TextServerSpacingType](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, spacing)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets extra baseline offset (as a fraction of font height).
*/
func (TextServerExtension) _font_set_baseline_offset(impl func(ptr unsafe.Pointer, font_rid gd.RID, baseline_offset gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var baseline_offset = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, baseline_offset)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns extra baseline offset (as a fraction of font height).
*/
func (TextServerExtension) _font_get_baseline_offset(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets 2D transform, applied to the font outlines, can be used for slanting, flipping, and rotating glyphs.
*/
func (TextServerExtension) _font_set_transform(impl func(ptr unsafe.Pointer, font_rid gd.RID, transform gd.Transform2D) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var transform = gd.UnsafeGet[gd.Transform2D](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, transform)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns 2D transform applied to the font outlines.
*/
func (TextServerExtension) _font_get_transform(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Transform2D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets variation coordinates for the specified font cache entry.
*/
func (TextServerExtension) _font_set_variation_coordinates(impl func(ptr unsafe.Pointer, font_rid gd.RID, variation_coordinates gd.Dictionary) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var variation_coordinates = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, variation_coordinates)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns variation coordinates for the specified font cache entry.
*/
func (TextServerExtension) _font_get_variation_coordinates(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets font oversampling factor, if set to [code]0.0[/code] global oversampling factor is used instead. Used by dynamic fonts only.
*/
func (TextServerExtension) _font_set_oversampling(impl func(ptr unsafe.Pointer, font_rid gd.RID, oversampling gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var oversampling = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, oversampling)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns font oversampling factor, if set to [code]0.0[/code] global oversampling factor is used instead. Used by dynamic fonts only.
*/
func (TextServerExtension) _font_get_oversampling(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns list of the font sizes in the cache. Each size is [Vector2i] with font size and outline size.
*/
func (TextServerExtension) _font_get_size_cache_list(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.ArrayOf[gd.Vector2i], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

/*
[b]Required.[/b]
Removes all font sizes from the cache entry.
*/
func (TextServerExtension) _font_clear_size_cache(impl func(ptr unsafe.Pointer, font_rid gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Removes specified font size from the cache entry.
*/
func (TextServerExtension) _font_remove_size_cache(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Sets the font ascent (number of pixels above the baseline).
*/
func (TextServerExtension) _font_set_ascent(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int, ascent gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		var ascent = gd.UnsafeGet[gd.Float](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, ascent)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns the font ascent (number of pixels above the baseline).
*/
func (TextServerExtension) _font_get_ascent(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Sets the font descent (number of pixels below the baseline).
*/
func (TextServerExtension) _font_set_descent(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int, descent gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		var descent = gd.UnsafeGet[gd.Float](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, descent)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns the font descent (number of pixels below the baseline).
*/
func (TextServerExtension) _font_get_descent(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Sets pixel offset of the underline below the baseline.
*/
func (TextServerExtension) _font_set_underline_position(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int, underline_position gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		var underline_position = gd.UnsafeGet[gd.Float](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, underline_position)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns pixel offset of the underline below the baseline.
*/
func (TextServerExtension) _font_get_underline_position(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Sets thickness of the underline in pixels.
*/
func (TextServerExtension) _font_set_underline_thickness(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int, underline_thickness gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		var underline_thickness = gd.UnsafeGet[gd.Float](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, underline_thickness)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns thickness of the underline in pixels.
*/
func (TextServerExtension) _font_get_underline_thickness(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Sets scaling factor of the color bitmap font.
*/
func (TextServerExtension) _font_set_scale(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int, scale gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		var scale = gd.UnsafeGet[gd.Float](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, scale)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns scaling factor of the color bitmap font.
*/
func (TextServerExtension) _font_get_scale(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns number of textures used by font cache entry.
*/
func (TextServerExtension) _font_get_texture_count(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Removes all textures from font cache entry.
*/
func (TextServerExtension) _font_clear_textures(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Removes specified texture from the cache entry.
*/
func (TextServerExtension) _font_remove_texture(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, texture_index gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var texture_index = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, texture_index)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Sets font cache texture image data.
*/
func (TextServerExtension) _font_set_texture_image(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, texture_index gd.Int, image Image) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var texture_index = gd.UnsafeGet[gd.Int](p_args,2)
		var image Image
		image.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,3)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, texture_index, image)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns font cache texture image data.
*/
func (TextServerExtension) _font_get_texture_image(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, texture_index gd.Int) Image, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var texture_index = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size, texture_index)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets array containing glyph packing data.
*/
func (TextServerExtension) _font_set_texture_offsets(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, texture_index gd.Int, offset gd.PackedInt32Array) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var texture_index = gd.UnsafeGet[gd.Int](p_args,2)
		var offset = mmm.Let[gd.PackedInt32Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,3))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, texture_index, offset)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns array containing glyph packing data.
*/
func (TextServerExtension) _font_get_texture_offsets(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, texture_index gd.Int) gd.PackedInt32Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var texture_index = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size, texture_index)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns list of rendered glyphs in the cache entry.
*/
func (TextServerExtension) _font_get_glyph_list(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i) gd.PackedInt32Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Required.[/b]
Removes all rendered glyph information from the cache entry.
*/
func (TextServerExtension) _font_clear_glyphs(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Removes specified rendered glyph information from the cache entry.
*/
func (TextServerExtension) _font_remove_glyph(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, glyph gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var glyph = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, glyph)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns glyph advance (offset of the next glyph).
*/
func (TextServerExtension) _font_get_glyph_advance(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int, glyph gd.Int) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		var glyph = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size, glyph)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Sets glyph advance (offset of the next glyph).
*/
func (TextServerExtension) _font_set_glyph_advance(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int, glyph gd.Int, advance gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		var glyph = gd.UnsafeGet[gd.Int](p_args,2)
		var advance = gd.UnsafeGet[gd.Vector2](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, glyph, advance)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns glyph offset from the baseline.
*/
func (TextServerExtension) _font_get_glyph_offset(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, glyph gd.Int) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var glyph = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size, glyph)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Sets glyph offset from the baseline.
*/
func (TextServerExtension) _font_set_glyph_offset(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, glyph gd.Int, offset gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var glyph = gd.UnsafeGet[gd.Int](p_args,2)
		var offset = gd.UnsafeGet[gd.Vector2](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, glyph, offset)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns size of the glyph.
*/
func (TextServerExtension) _font_get_glyph_size(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, glyph gd.Int) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var glyph = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size, glyph)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Sets size of the glyph.
*/
func (TextServerExtension) _font_set_glyph_size(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, glyph gd.Int, gl_size gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var glyph = gd.UnsafeGet[gd.Int](p_args,2)
		var gl_size = gd.UnsafeGet[gd.Vector2](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, glyph, gl_size)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns rectangle in the cache texture containing the glyph.
*/
func (TextServerExtension) _font_get_glyph_uv_rect(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, glyph gd.Int) gd.Rect2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var glyph = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size, glyph)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Sets rectangle in the cache texture containing the glyph.
*/
func (TextServerExtension) _font_set_glyph_uv_rect(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, glyph gd.Int, uv_rect gd.Rect2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var glyph = gd.UnsafeGet[gd.Int](p_args,2)
		var uv_rect = gd.UnsafeGet[gd.Rect2](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, glyph, uv_rect)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns index of the cache texture containing the glyph.
*/
func (TextServerExtension) _font_get_glyph_texture_idx(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, glyph gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var glyph = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size, glyph)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Sets index of the cache texture containing the glyph.
*/
func (TextServerExtension) _font_set_glyph_texture_idx(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, glyph gd.Int, texture_idx gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var glyph = gd.UnsafeGet[gd.Int](p_args,2)
		var texture_idx = gd.UnsafeGet[gd.Int](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, glyph, texture_idx)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns resource ID of the cache texture containing the glyph.
*/
func (TextServerExtension) _font_get_glyph_texture_rid(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, glyph gd.Int) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var glyph = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size, glyph)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns size of the cache texture containing the glyph.
*/
func (TextServerExtension) _font_get_glyph_texture_size(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, glyph gd.Int) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var glyph = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size, glyph)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns outline contours of the glyph.
*/
func (TextServerExtension) _font_get_glyph_contours(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int, index gd.Int) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		var index = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size, index)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns list of the kerning overrides.
*/
func (TextServerExtension) _font_get_kerning_list(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int) gd.ArrayOf[gd.Vector2i], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Removes all kerning overrides.
*/
func (TextServerExtension) _font_clear_kerning_map(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Removes kerning override for the pair of glyphs.
*/
func (TextServerExtension) _font_remove_kerning(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int, glyph_pair gd.Vector2i) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		var glyph_pair = gd.UnsafeGet[gd.Vector2i](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, glyph_pair)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets kerning for the pair of glyphs.
*/
func (TextServerExtension) _font_set_kerning(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int, glyph_pair gd.Vector2i, kerning gd.Vector2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		var glyph_pair = gd.UnsafeGet[gd.Vector2i](p_args,2)
		var kerning = gd.UnsafeGet[gd.Vector2](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, glyph_pair, kerning)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns kerning for the pair of glyphs.
*/
func (TextServerExtension) _font_get_kerning(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int, glyph_pair gd.Vector2i) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		var glyph_pair = gd.UnsafeGet[gd.Vector2i](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size, glyph_pair)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns the glyph index of a [param char], optionally modified by the [param variation_selector].
*/
func (TextServerExtension) _font_get_glyph_index(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int, char gd.Int, variation_selector gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		var char = gd.UnsafeGet[gd.Int](p_args,2)
		var variation_selector = gd.UnsafeGet[gd.Int](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size, char, variation_selector)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns character code associated with [param glyph_index], or [code]0[/code] if [param glyph_index] is invalid.
*/
func (TextServerExtension) _font_get_char_from_glyph_index(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Int, glyph_index gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		var glyph_index = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, size, glyph_index)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns [code]true[/code] if a Unicode [param char] is available in the font.
*/
func (TextServerExtension) _font_has_char(impl func(ptr unsafe.Pointer, font_rid gd.RID, char gd.Int) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var char = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, char)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns a string containing all the characters available in the font.
*/
func (TextServerExtension) _font_get_supported_chars(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Renders the range of characters to the font cache texture.
*/
func (TextServerExtension) _font_render_range(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, start gd.Int, end gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var start = gd.UnsafeGet[gd.Int](p_args,2)
		var end = gd.UnsafeGet[gd.Int](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, start, end)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Renders specified glyph to the font cache texture.
*/
func (TextServerExtension) _font_render_glyph(impl func(ptr unsafe.Pointer, font_rid gd.RID, size gd.Vector2i, index gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var index = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, size, index)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Draws single glyph into a canvas item at the position, using [param font_rid] at the size [param size].
*/
func (TextServerExtension) _font_draw_glyph(impl func(ptr unsafe.Pointer, font_rid gd.RID, canvas gd.RID, size gd.Int, pos gd.Vector2, index gd.Int, color gd.Color) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var canvas = gd.UnsafeGet[gd.RID](p_args,1)
		var size = gd.UnsafeGet[gd.Int](p_args,2)
		var pos = gd.UnsafeGet[gd.Vector2](p_args,3)
		var index = gd.UnsafeGet[gd.Int](p_args,4)
		var color = gd.UnsafeGet[gd.Color](p_args,5)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, canvas, size, pos, index, color)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Draws single glyph outline of size [param outline_size] into a canvas item at the position, using [param font_rid] at the size [param size].
*/
func (TextServerExtension) _font_draw_glyph_outline(impl func(ptr unsafe.Pointer, font_rid gd.RID, canvas gd.RID, size gd.Int, outline_size gd.Int, pos gd.Vector2, index gd.Int, color gd.Color) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var canvas = gd.UnsafeGet[gd.RID](p_args,1)
		var size = gd.UnsafeGet[gd.Int](p_args,2)
		var outline_size = gd.UnsafeGet[gd.Int](p_args,3)
		var pos = gd.UnsafeGet[gd.Vector2](p_args,4)
		var index = gd.UnsafeGet[gd.Int](p_args,5)
		var color = gd.UnsafeGet[gd.Color](p_args,6)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, canvas, size, outline_size, pos, index, color)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns [code]true[/code], if font supports given language ([url=https://en.wikipedia.org/wiki/ISO_639-1]ISO 639[/url] code).
*/
func (TextServerExtension) _font_is_language_supported(impl func(ptr unsafe.Pointer, font_rid gd.RID, language gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var language = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, language)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Adds override for [method _font_is_language_supported].
*/
func (TextServerExtension) _font_set_language_support_override(impl func(ptr unsafe.Pointer, font_rid gd.RID, language gd.String, supported bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var language = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var supported = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, language, supported)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns [code]true[/code] if support override is enabled for the [param language].
*/
func (TextServerExtension) _font_get_language_support_override(impl func(ptr unsafe.Pointer, font_rid gd.RID, language gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var language = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, language)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Remove language support override.
*/
func (TextServerExtension) _font_remove_language_support_override(impl func(ptr unsafe.Pointer, font_rid gd.RID, language gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var language = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, language)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns list of language support overrides.
*/
func (TextServerExtension) _font_get_language_support_overrides(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns [code]true[/code], if font supports given script (ISO 15924 code).
*/
func (TextServerExtension) _font_is_script_supported(impl func(ptr unsafe.Pointer, font_rid gd.RID, script gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var script = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, script)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Adds override for [method _font_is_script_supported].
*/
func (TextServerExtension) _font_set_script_support_override(impl func(ptr unsafe.Pointer, font_rid gd.RID, script gd.String, supported bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var script = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var supported = gd.UnsafeGet[bool](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, script, supported)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns [code]true[/code] if support override is enabled for the [param script].
*/
func (TextServerExtension) _font_get_script_support_override(impl func(ptr unsafe.Pointer, font_rid gd.RID, script gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var script = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid, script)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Removes script support override.
*/
func (TextServerExtension) _font_remove_script_support_override(impl func(ptr unsafe.Pointer, font_rid gd.RID, script gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var script = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, script)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns list of script support overrides.
*/
func (TextServerExtension) _font_get_script_support_overrides(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets font OpenType feature set override.
*/
func (TextServerExtension) _font_set_opentype_feature_overrides(impl func(ptr unsafe.Pointer, font_rid gd.RID, overrides gd.Dictionary) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		var overrides = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, font_rid, overrides)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns font OpenType feature set override.
*/
func (TextServerExtension) _font_get_opentype_feature_overrides(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns the dictionary of the supported OpenType features.
*/
func (TextServerExtension) _font_supported_feature_list(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns the dictionary of the supported OpenType variation coordinates.
*/
func (TextServerExtension) _font_supported_variation_list(impl func(ptr unsafe.Pointer, font_rid gd.RID) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var font_rid = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, font_rid)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns the font oversampling factor, shared by all fonts in the TextServer.
*/
func (TextServerExtension) _font_get_global_oversampling(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets oversampling factor, shared by all font in the TextServer.
*/
func (TextServerExtension) _font_set_global_oversampling(impl func(ptr unsafe.Pointer, oversampling gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var oversampling = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, oversampling)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns size of the replacement character (box with character hexadecimal code that is drawn in place of invalid characters).
*/
func (TextServerExtension) _get_hex_code_box_size(impl func(ptr unsafe.Pointer, size gd.Int, index gd.Int) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var size = gd.UnsafeGet[gd.Int](p_args,0)
		var index = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, size, index)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Draws box displaying character hexadecimal code.
*/
func (TextServerExtension) _draw_hex_code_box(impl func(ptr unsafe.Pointer, canvas gd.RID, size gd.Int, pos gd.Vector2, index gd.Int, color gd.Color) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var canvas = gd.UnsafeGet[gd.RID](p_args,0)
		var size = gd.UnsafeGet[gd.Int](p_args,1)
		var pos = gd.UnsafeGet[gd.Vector2](p_args,2)
		var index = gd.UnsafeGet[gd.Int](p_args,3)
		var color = gd.UnsafeGet[gd.Color](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, canvas, size, pos, index, color)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Creates a new buffer for complex text layout, with the given [param direction] and [param orientation].
*/
func (TextServerExtension) _create_shaped_text(impl func(ptr unsafe.Pointer, direction TextServerDirection, orientation TextServerOrientation) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var direction = gd.UnsafeGet[TextServerDirection](p_args,0)
		var orientation = gd.UnsafeGet[TextServerOrientation](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, direction, orientation)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Clears text buffer (removes text and inline objects).
*/
func (TextServerExtension) _shaped_text_clear(impl func(ptr unsafe.Pointer, shaped gd.RID) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shaped)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets desired text direction. If set to [constant TextServer.DIRECTION_AUTO], direction will be detected based on the buffer contents and current locale.
*/
func (TextServerExtension) _shaped_text_set_direction(impl func(ptr unsafe.Pointer, shaped gd.RID, direction TextServerDirection) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var direction = gd.UnsafeGet[TextServerDirection](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shaped, direction)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns direction of the text.
*/
func (TextServerExtension) _shaped_text_get_direction(impl func(ptr unsafe.Pointer, shaped gd.RID) TextServerDirection, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns direction of the text, inferred by the BiDi algorithm.
*/
func (TextServerExtension) _shaped_text_get_inferred_direction(impl func(ptr unsafe.Pointer, shaped gd.RID) TextServerDirection, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Overrides BiDi for the structured text.
*/
func (TextServerExtension) _shaped_text_set_bidi_override(impl func(ptr unsafe.Pointer, shaped gd.RID, override gd.Array) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var override = mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shaped, override)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets custom punctuation character list, used for word breaking. If set to empty string, server defaults are used.
*/
func (TextServerExtension) _shaped_text_set_custom_punctuation(impl func(ptr unsafe.Pointer, shaped gd.RID, punct gd.String) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var punct = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shaped, punct)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns custom punctuation character list, used for word breaking. If set to empty string, server defaults are used.
*/
func (TextServerExtension) _shaped_text_get_custom_punctuation(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets ellipsis character used for text clipping.
*/
func (TextServerExtension) _shaped_text_set_custom_ellipsis(impl func(ptr unsafe.Pointer, shaped gd.RID, char gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var char = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shaped, char)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns ellipsis character used for text clipping.
*/
func (TextServerExtension) _shaped_text_get_custom_ellipsis(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets desired text orientation.
*/
func (TextServerExtension) _shaped_text_set_orientation(impl func(ptr unsafe.Pointer, shaped gd.RID, orientation TextServerOrientation) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var orientation = gd.UnsafeGet[TextServerOrientation](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shaped, orientation)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns text orientation.
*/
func (TextServerExtension) _shaped_text_get_orientation(impl func(ptr unsafe.Pointer, shaped gd.RID) TextServerOrientation, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
If set to [code]true[/code] text buffer will display invalid characters as hexadecimal codes, otherwise nothing is displayed.
*/
func (TextServerExtension) _shaped_text_set_preserve_invalid(impl func(ptr unsafe.Pointer, shaped gd.RID, enabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var enabled = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shaped, enabled)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns [code]true[/code] if text buffer is configured to display hexadecimal codes in place of invalid characters.
*/
func (TextServerExtension) _shaped_text_get_preserve_invalid(impl func(ptr unsafe.Pointer, shaped gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
If set to [code]true[/code] text buffer will display control characters.
*/
func (TextServerExtension) _shaped_text_set_preserve_control(impl func(ptr unsafe.Pointer, shaped gd.RID, enabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var enabled = gd.UnsafeGet[bool](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shaped, enabled)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns [code]true[/code] if text buffer is configured to display control characters.
*/
func (TextServerExtension) _shaped_text_get_preserve_control(impl func(ptr unsafe.Pointer, shaped gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Sets extra spacing added between glyphs or lines in pixels.
*/
func (TextServerExtension) _shaped_text_set_spacing(impl func(ptr unsafe.Pointer, shaped gd.RID, spacing TextServerSpacingType, value gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var spacing = gd.UnsafeGet[TextServerSpacingType](p_args,1)
		var value = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shaped, spacing, value)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns extra spacing added between glyphs or lines in pixels.
*/
func (TextServerExtension) _shaped_text_get_spacing(impl func(ptr unsafe.Pointer, shaped gd.RID, spacing TextServerSpacingType) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var spacing = gd.UnsafeGet[TextServerSpacingType](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, spacing)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Adds text span and font to draw it to the text buffer.
*/
func (TextServerExtension) _shaped_text_add_string(impl func(ptr unsafe.Pointer, shaped gd.RID, text gd.String, fonts gd.ArrayOf[gd.RID], size gd.Int, opentype_features gd.Dictionary, language gd.String, meta gd.Variant) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var text = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var fonts = gd.TypedArray[gd.RID](mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2)))
		var size = gd.UnsafeGet[gd.Int](p_args,3)
		var opentype_features = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,4))
		var language = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,5))
		var meta = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,6))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, text, fonts, size, opentype_features, language, meta)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Adds inline object to the text buffer, [param key] must be unique. In the text, object is represented as [param length] object replacement characters.
*/
func (TextServerExtension) _shaped_text_add_object(impl func(ptr unsafe.Pointer, shaped gd.RID, key gd.Variant, size gd.Vector2, inline_align gd.InlineAlignment, length gd.Int, baseline gd.Float) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var key = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,1))
		var size = gd.UnsafeGet[gd.Vector2](p_args,2)
		var inline_align = gd.UnsafeGet[gd.InlineAlignment](p_args,3)
		var length = gd.UnsafeGet[gd.Int](p_args,4)
		var baseline = gd.UnsafeGet[gd.Float](p_args,5)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, key, size, inline_align, length, baseline)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Sets new size and alignment of embedded object.
*/
func (TextServerExtension) _shaped_text_resize_object(impl func(ptr unsafe.Pointer, shaped gd.RID, key gd.Variant, size gd.Vector2, inline_align gd.InlineAlignment, baseline gd.Float) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var key = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,1))
		var size = gd.UnsafeGet[gd.Vector2](p_args,2)
		var inline_align = gd.UnsafeGet[gd.InlineAlignment](p_args,3)
		var baseline = gd.UnsafeGet[gd.Float](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, key, size, inline_align, baseline)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns number of text spans added using [method _shaped_text_add_string] or [method _shaped_text_add_object].
*/
func (TextServerExtension) _shaped_get_span_count(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns text span metadata.
*/
func (TextServerExtension) _shaped_get_span_meta(impl func(ptr unsafe.Pointer, shaped gd.RID, index gd.Int) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var index = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, index)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Required.[/b]
Changes text span font, font size, and OpenType features, without changing the text.
*/
func (TextServerExtension) _shaped_set_span_update_font(impl func(ptr unsafe.Pointer, shaped gd.RID, index gd.Int, fonts gd.ArrayOf[gd.RID], size gd.Int, opentype_features gd.Dictionary) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var index = gd.UnsafeGet[gd.Int](p_args,1)
		var fonts = gd.TypedArray[gd.RID](mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2)))
		var size = gd.UnsafeGet[gd.Int](p_args,3)
		var opentype_features = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,4))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shaped, index, fonts, size, opentype_features)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns text buffer for the substring of the text in the [param shaped] text buffer (including inline objects).
*/
func (TextServerExtension) _shaped_text_substr(impl func(ptr unsafe.Pointer, shaped gd.RID, start gd.Int, length gd.Int) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var start = gd.UnsafeGet[gd.Int](p_args,1)
		var length = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, start, length)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns the parent buffer from which the substring originates.
*/
func (TextServerExtension) _shaped_text_get_parent(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Adjusts text width to fit to specified width, returns new text width.
*/
func (TextServerExtension) _shaped_text_fit_to_width(impl func(ptr unsafe.Pointer, shaped gd.RID, width gd.Float, justification_flags TextServerJustificationFlag) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var width = gd.UnsafeGet[gd.Float](p_args,1)
		var justification_flags = gd.UnsafeGet[TextServerJustificationFlag](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, width, justification_flags)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Aligns shaped text to the given tab-stops.
*/
func (TextServerExtension) _shaped_text_tab_align(impl func(ptr unsafe.Pointer, shaped gd.RID, tab_stops gd.PackedFloat32Array) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var tab_stops = mmm.Let[gd.PackedFloat32Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, tab_stops)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Shapes buffer if it's not shaped. Returns [code]true[/code] if the string is shaped successfully.
*/
func (TextServerExtension) _shaped_text_shape(impl func(ptr unsafe.Pointer, shaped gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Updates break points in the shaped text. This method is called by default implementation of text breaking functions.
*/
func (TextServerExtension) _shaped_text_update_breaks(impl func(ptr unsafe.Pointer, shaped gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Updates justification points in the shaped text. This method is called by default implementation of text justification functions.
*/
func (TextServerExtension) _shaped_text_update_justification_ops(impl func(ptr unsafe.Pointer, shaped gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns [code]true[/code] if buffer is successfully shaped.
*/
func (TextServerExtension) _shaped_text_is_ready(impl func(ptr unsafe.Pointer, shaped gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns an array of glyphs in the visual order.
*/
func (TextServerExtension) _shaped_text_get_glyphs(impl func(ptr unsafe.Pointer, shaped gd.RID) * Glyph, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns text glyphs in the logical order.
*/
func (TextServerExtension) _shaped_text_sort_logical(impl func(ptr unsafe.Pointer, shaped gd.RID) * Glyph, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns number of glyphs in the buffer.
*/
func (TextServerExtension) _shaped_text_get_glyph_count(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns substring buffer character range in the parent buffer.
*/
func (TextServerExtension) _shaped_text_get_range(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.Vector2i, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Breaks text to the lines and columns. Returns character ranges for each segment.
*/
func (TextServerExtension) _shaped_text_get_line_breaks_adv(impl func(ptr unsafe.Pointer, shaped gd.RID, width gd.PackedFloat32Array, start gd.Int, once bool, break_flags TextServerLineBreakFlag) gd.PackedInt32Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var width = mmm.Let[gd.PackedFloat32Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		var start = gd.UnsafeGet[gd.Int](p_args,2)
		var once = gd.UnsafeGet[bool](p_args,3)
		var break_flags = gd.UnsafeGet[TextServerLineBreakFlag](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, width, start, once, break_flags)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Breaks text to the lines and returns character ranges for each line.
*/
func (TextServerExtension) _shaped_text_get_line_breaks(impl func(ptr unsafe.Pointer, shaped gd.RID, width gd.Float, start gd.Int, break_flags TextServerLineBreakFlag) gd.PackedInt32Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var width = gd.UnsafeGet[gd.Float](p_args,1)
		var start = gd.UnsafeGet[gd.Int](p_args,2)
		var break_flags = gd.UnsafeGet[TextServerLineBreakFlag](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, width, start, break_flags)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Breaks text into words and returns array of character ranges. Use [param grapheme_flags] to set what characters are used for breaking (see [enum TextServer.GraphemeFlag]).
*/
func (TextServerExtension) _shaped_text_get_word_breaks(impl func(ptr unsafe.Pointer, shaped gd.RID, grapheme_flags TextServerGraphemeFlag, skip_grapheme_flags TextServerGraphemeFlag) gd.PackedInt32Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var grapheme_flags = gd.UnsafeGet[TextServerGraphemeFlag](p_args,1)
		var skip_grapheme_flags = gd.UnsafeGet[TextServerGraphemeFlag](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, grapheme_flags, skip_grapheme_flags)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns the position of the overrun trim.
*/
func (TextServerExtension) _shaped_text_get_trim_pos(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns position of the ellipsis.
*/
func (TextServerExtension) _shaped_text_get_ellipsis_pos(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns number of glyphs in the ellipsis.
*/
func (TextServerExtension) _shaped_text_get_ellipsis_glyph_count(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns array of the glyphs in the ellipsis.
*/
func (TextServerExtension) _shaped_text_get_ellipsis_glyphs(impl func(ptr unsafe.Pointer, shaped gd.RID) * Glyph, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Trims text if it exceeds the given width.
*/
func (TextServerExtension) _shaped_text_overrun_trim_to_width(impl func(ptr unsafe.Pointer, shaped gd.RID, width gd.Float, trim_flags TextServerTextOverrunFlag) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var width = gd.UnsafeGet[gd.Float](p_args,1)
		var trim_flags = gd.UnsafeGet[TextServerTextOverrunFlag](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shaped, width, trim_flags)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns array of inline objects.
*/
func (TextServerExtension) _shaped_text_get_objects(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns bounding rectangle of the inline object.
*/
func (TextServerExtension) _shaped_text_get_object_rect(impl func(ptr unsafe.Pointer, shaped gd.RID, key gd.Variant) gd.Rect2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var key = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, key)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns the character range of the inline object.
*/
func (TextServerExtension) _shaped_text_get_object_range(impl func(ptr unsafe.Pointer, shaped gd.RID, key gd.Variant) gd.Vector2i, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var key = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, key)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns the glyph index of the inline object.
*/
func (TextServerExtension) _shaped_text_get_object_glyph(impl func(ptr unsafe.Pointer, shaped gd.RID, key gd.Variant) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var key = mmm.Let[gd.Variant](ctx.Lifetime, ctx.API, gd.UnsafeGet[[3]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, key)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns size of the text.
*/
func (TextServerExtension) _shaped_text_get_size(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns the text ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).
*/
func (TextServerExtension) _shaped_text_get_ascent(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns the text descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).
*/
func (TextServerExtension) _shaped_text_get_descent(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns width (for horizontal layout) or height (for vertical) of the text.
*/
func (TextServerExtension) _shaped_text_get_width(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns pixel offset of the underline below the baseline.
*/
func (TextServerExtension) _shaped_text_get_underline_position(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Required.[/b]
Returns thickness of the underline.
*/
func (TextServerExtension) _shaped_text_get_underline_thickness(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns dominant direction of in the range of text.
*/
func (TextServerExtension) _shaped_text_get_dominant_direction_in_range(impl func(ptr unsafe.Pointer, shaped gd.RID, start gd.Int, end gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var start = gd.UnsafeGet[gd.Int](p_args,1)
		var end = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, start, end)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns shapes of the carets corresponding to the character offset [param position] in the text. Returned caret shape is 1 pixel wide rectangle.
*/
func (TextServerExtension) _shaped_text_get_carets(impl func(ptr unsafe.Pointer, shaped gd.RID, position gd.Int, caret *CaretInfo) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var position = gd.UnsafeGet[gd.Int](p_args,1)
		var caret = gd.UnsafeGet[*CaretInfo](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shaped, position, caret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns selection rectangles for the specified character range.
*/
func (TextServerExtension) _shaped_text_get_selection(impl func(ptr unsafe.Pointer, shaped gd.RID, start gd.Int, end gd.Int) gd.PackedVector2Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var start = gd.UnsafeGet[gd.Int](p_args,1)
		var end = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, start, end)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns grapheme index at the specified pixel offset at the baseline, or [code]-1[/code] if none is found.
*/
func (TextServerExtension) _shaped_text_hit_test_grapheme(impl func(ptr unsafe.Pointer, shaped gd.RID, coord gd.Float) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var coord = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, coord)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns caret character offset at the specified pixel offset at the baseline. This function always returns a valid position.
*/
func (TextServerExtension) _shaped_text_hit_test_position(impl func(ptr unsafe.Pointer, shaped gd.RID, coord gd.Float) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var coord = gd.UnsafeGet[gd.Float](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, coord)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Draw shaped text into a canvas item at a given position, with [param color]. [param pos] specifies the leftmost point of the baseline (for horizontal layout) or topmost point of the baseline (for vertical layout).
*/
func (TextServerExtension) _shaped_text_draw(impl func(ptr unsafe.Pointer, shaped gd.RID, canvas gd.RID, pos gd.Vector2, clip_l gd.Float, clip_r gd.Float, color gd.Color) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var canvas = gd.UnsafeGet[gd.RID](p_args,1)
		var pos = gd.UnsafeGet[gd.Vector2](p_args,2)
		var clip_l = gd.UnsafeGet[gd.Float](p_args,3)
		var clip_r = gd.UnsafeGet[gd.Float](p_args,4)
		var color = gd.UnsafeGet[gd.Color](p_args,5)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shaped, canvas, pos, clip_l, clip_r, color)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Draw the outline of the shaped text into a canvas item at a given position, with [param color]. [param pos] specifies the leftmost point of the baseline (for horizontal layout) or topmost point of the baseline (for vertical layout).
*/
func (TextServerExtension) _shaped_text_draw_outline(impl func(ptr unsafe.Pointer, shaped gd.RID, canvas gd.RID, pos gd.Vector2, clip_l gd.Float, clip_r gd.Float, outline_size gd.Int, color gd.Color) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var canvas = gd.UnsafeGet[gd.RID](p_args,1)
		var pos = gd.UnsafeGet[gd.Vector2](p_args,2)
		var clip_l = gd.UnsafeGet[gd.Float](p_args,3)
		var clip_r = gd.UnsafeGet[gd.Float](p_args,4)
		var outline_size = gd.UnsafeGet[gd.Int](p_args,5)
		var color = gd.UnsafeGet[gd.Color](p_args,6)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, shaped, canvas, pos, clip_l, clip_r, outline_size, color)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns composite character's bounds as offsets from the start of the line.
*/
func (TextServerExtension) _shaped_text_get_grapheme_bounds(impl func(ptr unsafe.Pointer, shaped gd.RID, pos gd.Int) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var pos = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, pos)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns grapheme end position closest to the [param pos].
*/
func (TextServerExtension) _shaped_text_next_grapheme_pos(impl func(ptr unsafe.Pointer, shaped gd.RID, pos gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var pos = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, pos)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns grapheme start position closest to the [param pos].
*/
func (TextServerExtension) _shaped_text_prev_grapheme_pos(impl func(ptr unsafe.Pointer, shaped gd.RID, pos gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var pos = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, pos)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns array of the composite character boundaries.
*/
func (TextServerExtension) _shaped_text_get_character_breaks(impl func(ptr unsafe.Pointer, shaped gd.RID) gd.PackedInt32Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns composite character end position closest to the [param pos].
*/
func (TextServerExtension) _shaped_text_next_character_pos(impl func(ptr unsafe.Pointer, shaped gd.RID, pos gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var pos = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, pos)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns composite character start position closest to the [param pos].
*/
func (TextServerExtension) _shaped_text_prev_character_pos(impl func(ptr unsafe.Pointer, shaped gd.RID, pos gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var pos = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, pos)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns composite character position closest to the [param pos].
*/
func (TextServerExtension) _shaped_text_closest_character_pos(impl func(ptr unsafe.Pointer, shaped gd.RID, pos gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var shaped = gd.UnsafeGet[gd.RID](p_args,0)
		var pos = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, shaped, pos)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Converts a number from the Western Arabic (0..9) to the numeral systems used in [param language].
*/
func (TextServerExtension) _format_number(impl func(ptr unsafe.Pointer, number gd.String, language gd.String) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var number = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var language = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, number, language)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Converts [param number] from the numeral systems used in [param language] to Western Arabic (0..9).
*/
func (TextServerExtension) _parse_number(impl func(ptr unsafe.Pointer, number gd.String, language gd.String) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var number = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var language = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, number, language)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns percent sign used in the [param language].
*/
func (TextServerExtension) _percent_sign(impl func(ptr unsafe.Pointer, language gd.String) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var language = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, language)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Strips diacritics from the string.
*/
func (TextServerExtension) _strip_diacritics(impl func(ptr unsafe.Pointer, s gd.String) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var s = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, s)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns [code]true[/code] if [param string] is a valid identifier.
*/
func (TextServerExtension) _is_valid_identifier(impl func(ptr unsafe.Pointer, s gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var s = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, s)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (TextServerExtension) _is_valid_letter(impl func(ptr unsafe.Pointer, unicode gd.Int) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var unicode = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, unicode)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns an array of the word break boundaries. Elements in the returned array are the offsets of the start and end of words. Therefore the length of the array is always even.
*/
func (TextServerExtension) _string_get_word_breaks(impl func(ptr unsafe.Pointer, s gd.String, language gd.String, chars_per_line gd.Int) gd.PackedInt32Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var s = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var language = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var chars_per_line = gd.UnsafeGet[gd.Int](p_args,2)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, s, language, chars_per_line)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns array of the composite character boundaries.
*/
func (TextServerExtension) _string_get_character_breaks(impl func(ptr unsafe.Pointer, s gd.String, language gd.String) gd.PackedInt32Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var s = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var language = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, s, language)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns index of the first string in [param dict] which is visually confusable with the [param string], or [code]-1[/code] if none is found.
*/
func (TextServerExtension) _is_confusable(impl func(ptr unsafe.Pointer, s gd.String, dict gd.PackedStringArray) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var s = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var dict = mmm.Let[gd.PackedStringArray](ctx.Lifetime, ctx.API, gd.UnsafeGet[[2]uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, s, dict)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns [code]true[/code] if [param string] is likely to be an attempt at confusing the reader.
*/
func (TextServerExtension) _spoof_check(impl func(ptr unsafe.Pointer, s gd.String) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var s = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, s)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns the string converted to uppercase.
*/
func (TextServerExtension) _string_to_upper(impl func(ptr unsafe.Pointer, s gd.String, language gd.String) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var s = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var language = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, s, language)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns the string converted to lowercase.
*/
func (TextServerExtension) _string_to_lower(impl func(ptr unsafe.Pointer, s gd.String, language gd.String) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var s = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var language = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, s, language)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Returns the string converted to title case.
*/
func (TextServerExtension) _string_to_title(impl func(ptr unsafe.Pointer, s gd.String, language gd.String) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var s = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var language = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, s, language)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
Default implementation of the BiDi algorithm override function. See [enum TextServer.StructuredTextParser] for more info.
*/
func (TextServerExtension) _parse_structured_text(impl func(ptr unsafe.Pointer, parser_type TextServerStructuredTextParser, args gd.Array, text gd.String) gd.ArrayOf[gd.Vector3i], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var parser_type = gd.UnsafeGet[TextServerStructuredTextParser](p_args,0)
		var args = mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var text = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, parser_type, args, text)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

/*
[b]Optional.[/b]
This method is called before text server is unregistered.
*/
func (TextServerExtension) _cleanup(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (self TextServerExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_has_feature": return reflect.ValueOf(self._has_feature);
	case "_get_name": return reflect.ValueOf(self._get_name);
	case "_get_features": return reflect.ValueOf(self._get_features);
	case "_free_rid": return reflect.ValueOf(self._free_rid);
	case "_has": return reflect.ValueOf(self._has);
	case "_load_support_data": return reflect.ValueOf(self._load_support_data);
	case "_get_support_data_filename": return reflect.ValueOf(self._get_support_data_filename);
	case "_get_support_data_info": return reflect.ValueOf(self._get_support_data_info);
	case "_save_support_data": return reflect.ValueOf(self._save_support_data);
	case "_is_locale_right_to_left": return reflect.ValueOf(self._is_locale_right_to_left);
	case "_name_to_tag": return reflect.ValueOf(self._name_to_tag);
	case "_tag_to_name": return reflect.ValueOf(self._tag_to_name);
	case "_create_font": return reflect.ValueOf(self._create_font);
	case "_create_font_linked_variation": return reflect.ValueOf(self._create_font_linked_variation);
	case "_font_set_data": return reflect.ValueOf(self._font_set_data);
	case "_font_set_data_ptr": return reflect.ValueOf(self._font_set_data_ptr);
	case "_font_set_face_index": return reflect.ValueOf(self._font_set_face_index);
	case "_font_get_face_index": return reflect.ValueOf(self._font_get_face_index);
	case "_font_get_face_count": return reflect.ValueOf(self._font_get_face_count);
	case "_font_set_style": return reflect.ValueOf(self._font_set_style);
	case "_font_get_style": return reflect.ValueOf(self._font_get_style);
	case "_font_set_name": return reflect.ValueOf(self._font_set_name);
	case "_font_get_name": return reflect.ValueOf(self._font_get_name);
	case "_font_get_ot_name_strings": return reflect.ValueOf(self._font_get_ot_name_strings);
	case "_font_set_style_name": return reflect.ValueOf(self._font_set_style_name);
	case "_font_get_style_name": return reflect.ValueOf(self._font_get_style_name);
	case "_font_set_weight": return reflect.ValueOf(self._font_set_weight);
	case "_font_get_weight": return reflect.ValueOf(self._font_get_weight);
	case "_font_set_stretch": return reflect.ValueOf(self._font_set_stretch);
	case "_font_get_stretch": return reflect.ValueOf(self._font_get_stretch);
	case "_font_set_antialiasing": return reflect.ValueOf(self._font_set_antialiasing);
	case "_font_get_antialiasing": return reflect.ValueOf(self._font_get_antialiasing);
	case "_font_set_disable_embedded_bitmaps": return reflect.ValueOf(self._font_set_disable_embedded_bitmaps);
	case "_font_get_disable_embedded_bitmaps": return reflect.ValueOf(self._font_get_disable_embedded_bitmaps);
	case "_font_set_generate_mipmaps": return reflect.ValueOf(self._font_set_generate_mipmaps);
	case "_font_get_generate_mipmaps": return reflect.ValueOf(self._font_get_generate_mipmaps);
	case "_font_set_multichannel_signed_distance_field": return reflect.ValueOf(self._font_set_multichannel_signed_distance_field);
	case "_font_is_multichannel_signed_distance_field": return reflect.ValueOf(self._font_is_multichannel_signed_distance_field);
	case "_font_set_msdf_pixel_range": return reflect.ValueOf(self._font_set_msdf_pixel_range);
	case "_font_get_msdf_pixel_range": return reflect.ValueOf(self._font_get_msdf_pixel_range);
	case "_font_set_msdf_size": return reflect.ValueOf(self._font_set_msdf_size);
	case "_font_get_msdf_size": return reflect.ValueOf(self._font_get_msdf_size);
	case "_font_set_fixed_size": return reflect.ValueOf(self._font_set_fixed_size);
	case "_font_get_fixed_size": return reflect.ValueOf(self._font_get_fixed_size);
	case "_font_set_fixed_size_scale_mode": return reflect.ValueOf(self._font_set_fixed_size_scale_mode);
	case "_font_get_fixed_size_scale_mode": return reflect.ValueOf(self._font_get_fixed_size_scale_mode);
	case "_font_set_allow_system_fallback": return reflect.ValueOf(self._font_set_allow_system_fallback);
	case "_font_is_allow_system_fallback": return reflect.ValueOf(self._font_is_allow_system_fallback);
	case "_font_set_force_autohinter": return reflect.ValueOf(self._font_set_force_autohinter);
	case "_font_is_force_autohinter": return reflect.ValueOf(self._font_is_force_autohinter);
	case "_font_set_hinting": return reflect.ValueOf(self._font_set_hinting);
	case "_font_get_hinting": return reflect.ValueOf(self._font_get_hinting);
	case "_font_set_subpixel_positioning": return reflect.ValueOf(self._font_set_subpixel_positioning);
	case "_font_get_subpixel_positioning": return reflect.ValueOf(self._font_get_subpixel_positioning);
	case "_font_set_embolden": return reflect.ValueOf(self._font_set_embolden);
	case "_font_get_embolden": return reflect.ValueOf(self._font_get_embolden);
	case "_font_set_spacing": return reflect.ValueOf(self._font_set_spacing);
	case "_font_get_spacing": return reflect.ValueOf(self._font_get_spacing);
	case "_font_set_baseline_offset": return reflect.ValueOf(self._font_set_baseline_offset);
	case "_font_get_baseline_offset": return reflect.ValueOf(self._font_get_baseline_offset);
	case "_font_set_transform": return reflect.ValueOf(self._font_set_transform);
	case "_font_get_transform": return reflect.ValueOf(self._font_get_transform);
	case "_font_set_variation_coordinates": return reflect.ValueOf(self._font_set_variation_coordinates);
	case "_font_get_variation_coordinates": return reflect.ValueOf(self._font_get_variation_coordinates);
	case "_font_set_oversampling": return reflect.ValueOf(self._font_set_oversampling);
	case "_font_get_oversampling": return reflect.ValueOf(self._font_get_oversampling);
	case "_font_get_size_cache_list": return reflect.ValueOf(self._font_get_size_cache_list);
	case "_font_clear_size_cache": return reflect.ValueOf(self._font_clear_size_cache);
	case "_font_remove_size_cache": return reflect.ValueOf(self._font_remove_size_cache);
	case "_font_set_ascent": return reflect.ValueOf(self._font_set_ascent);
	case "_font_get_ascent": return reflect.ValueOf(self._font_get_ascent);
	case "_font_set_descent": return reflect.ValueOf(self._font_set_descent);
	case "_font_get_descent": return reflect.ValueOf(self._font_get_descent);
	case "_font_set_underline_position": return reflect.ValueOf(self._font_set_underline_position);
	case "_font_get_underline_position": return reflect.ValueOf(self._font_get_underline_position);
	case "_font_set_underline_thickness": return reflect.ValueOf(self._font_set_underline_thickness);
	case "_font_get_underline_thickness": return reflect.ValueOf(self._font_get_underline_thickness);
	case "_font_set_scale": return reflect.ValueOf(self._font_set_scale);
	case "_font_get_scale": return reflect.ValueOf(self._font_get_scale);
	case "_font_get_texture_count": return reflect.ValueOf(self._font_get_texture_count);
	case "_font_clear_textures": return reflect.ValueOf(self._font_clear_textures);
	case "_font_remove_texture": return reflect.ValueOf(self._font_remove_texture);
	case "_font_set_texture_image": return reflect.ValueOf(self._font_set_texture_image);
	case "_font_get_texture_image": return reflect.ValueOf(self._font_get_texture_image);
	case "_font_set_texture_offsets": return reflect.ValueOf(self._font_set_texture_offsets);
	case "_font_get_texture_offsets": return reflect.ValueOf(self._font_get_texture_offsets);
	case "_font_get_glyph_list": return reflect.ValueOf(self._font_get_glyph_list);
	case "_font_clear_glyphs": return reflect.ValueOf(self._font_clear_glyphs);
	case "_font_remove_glyph": return reflect.ValueOf(self._font_remove_glyph);
	case "_font_get_glyph_advance": return reflect.ValueOf(self._font_get_glyph_advance);
	case "_font_set_glyph_advance": return reflect.ValueOf(self._font_set_glyph_advance);
	case "_font_get_glyph_offset": return reflect.ValueOf(self._font_get_glyph_offset);
	case "_font_set_glyph_offset": return reflect.ValueOf(self._font_set_glyph_offset);
	case "_font_get_glyph_size": return reflect.ValueOf(self._font_get_glyph_size);
	case "_font_set_glyph_size": return reflect.ValueOf(self._font_set_glyph_size);
	case "_font_get_glyph_uv_rect": return reflect.ValueOf(self._font_get_glyph_uv_rect);
	case "_font_set_glyph_uv_rect": return reflect.ValueOf(self._font_set_glyph_uv_rect);
	case "_font_get_glyph_texture_idx": return reflect.ValueOf(self._font_get_glyph_texture_idx);
	case "_font_set_glyph_texture_idx": return reflect.ValueOf(self._font_set_glyph_texture_idx);
	case "_font_get_glyph_texture_rid": return reflect.ValueOf(self._font_get_glyph_texture_rid);
	case "_font_get_glyph_texture_size": return reflect.ValueOf(self._font_get_glyph_texture_size);
	case "_font_get_glyph_contours": return reflect.ValueOf(self._font_get_glyph_contours);
	case "_font_get_kerning_list": return reflect.ValueOf(self._font_get_kerning_list);
	case "_font_clear_kerning_map": return reflect.ValueOf(self._font_clear_kerning_map);
	case "_font_remove_kerning": return reflect.ValueOf(self._font_remove_kerning);
	case "_font_set_kerning": return reflect.ValueOf(self._font_set_kerning);
	case "_font_get_kerning": return reflect.ValueOf(self._font_get_kerning);
	case "_font_get_glyph_index": return reflect.ValueOf(self._font_get_glyph_index);
	case "_font_get_char_from_glyph_index": return reflect.ValueOf(self._font_get_char_from_glyph_index);
	case "_font_has_char": return reflect.ValueOf(self._font_has_char);
	case "_font_get_supported_chars": return reflect.ValueOf(self._font_get_supported_chars);
	case "_font_render_range": return reflect.ValueOf(self._font_render_range);
	case "_font_render_glyph": return reflect.ValueOf(self._font_render_glyph);
	case "_font_draw_glyph": return reflect.ValueOf(self._font_draw_glyph);
	case "_font_draw_glyph_outline": return reflect.ValueOf(self._font_draw_glyph_outline);
	case "_font_is_language_supported": return reflect.ValueOf(self._font_is_language_supported);
	case "_font_set_language_support_override": return reflect.ValueOf(self._font_set_language_support_override);
	case "_font_get_language_support_override": return reflect.ValueOf(self._font_get_language_support_override);
	case "_font_remove_language_support_override": return reflect.ValueOf(self._font_remove_language_support_override);
	case "_font_get_language_support_overrides": return reflect.ValueOf(self._font_get_language_support_overrides);
	case "_font_is_script_supported": return reflect.ValueOf(self._font_is_script_supported);
	case "_font_set_script_support_override": return reflect.ValueOf(self._font_set_script_support_override);
	case "_font_get_script_support_override": return reflect.ValueOf(self._font_get_script_support_override);
	case "_font_remove_script_support_override": return reflect.ValueOf(self._font_remove_script_support_override);
	case "_font_get_script_support_overrides": return reflect.ValueOf(self._font_get_script_support_overrides);
	case "_font_set_opentype_feature_overrides": return reflect.ValueOf(self._font_set_opentype_feature_overrides);
	case "_font_get_opentype_feature_overrides": return reflect.ValueOf(self._font_get_opentype_feature_overrides);
	case "_font_supported_feature_list": return reflect.ValueOf(self._font_supported_feature_list);
	case "_font_supported_variation_list": return reflect.ValueOf(self._font_supported_variation_list);
	case "_font_get_global_oversampling": return reflect.ValueOf(self._font_get_global_oversampling);
	case "_font_set_global_oversampling": return reflect.ValueOf(self._font_set_global_oversampling);
	case "_get_hex_code_box_size": return reflect.ValueOf(self._get_hex_code_box_size);
	case "_draw_hex_code_box": return reflect.ValueOf(self._draw_hex_code_box);
	case "_create_shaped_text": return reflect.ValueOf(self._create_shaped_text);
	case "_shaped_text_clear": return reflect.ValueOf(self._shaped_text_clear);
	case "_shaped_text_set_direction": return reflect.ValueOf(self._shaped_text_set_direction);
	case "_shaped_text_get_direction": return reflect.ValueOf(self._shaped_text_get_direction);
	case "_shaped_text_get_inferred_direction": return reflect.ValueOf(self._shaped_text_get_inferred_direction);
	case "_shaped_text_set_bidi_override": return reflect.ValueOf(self._shaped_text_set_bidi_override);
	case "_shaped_text_set_custom_punctuation": return reflect.ValueOf(self._shaped_text_set_custom_punctuation);
	case "_shaped_text_get_custom_punctuation": return reflect.ValueOf(self._shaped_text_get_custom_punctuation);
	case "_shaped_text_set_custom_ellipsis": return reflect.ValueOf(self._shaped_text_set_custom_ellipsis);
	case "_shaped_text_get_custom_ellipsis": return reflect.ValueOf(self._shaped_text_get_custom_ellipsis);
	case "_shaped_text_set_orientation": return reflect.ValueOf(self._shaped_text_set_orientation);
	case "_shaped_text_get_orientation": return reflect.ValueOf(self._shaped_text_get_orientation);
	case "_shaped_text_set_preserve_invalid": return reflect.ValueOf(self._shaped_text_set_preserve_invalid);
	case "_shaped_text_get_preserve_invalid": return reflect.ValueOf(self._shaped_text_get_preserve_invalid);
	case "_shaped_text_set_preserve_control": return reflect.ValueOf(self._shaped_text_set_preserve_control);
	case "_shaped_text_get_preserve_control": return reflect.ValueOf(self._shaped_text_get_preserve_control);
	case "_shaped_text_set_spacing": return reflect.ValueOf(self._shaped_text_set_spacing);
	case "_shaped_text_get_spacing": return reflect.ValueOf(self._shaped_text_get_spacing);
	case "_shaped_text_add_string": return reflect.ValueOf(self._shaped_text_add_string);
	case "_shaped_text_add_object": return reflect.ValueOf(self._shaped_text_add_object);
	case "_shaped_text_resize_object": return reflect.ValueOf(self._shaped_text_resize_object);
	case "_shaped_get_span_count": return reflect.ValueOf(self._shaped_get_span_count);
	case "_shaped_get_span_meta": return reflect.ValueOf(self._shaped_get_span_meta);
	case "_shaped_set_span_update_font": return reflect.ValueOf(self._shaped_set_span_update_font);
	case "_shaped_text_substr": return reflect.ValueOf(self._shaped_text_substr);
	case "_shaped_text_get_parent": return reflect.ValueOf(self._shaped_text_get_parent);
	case "_shaped_text_fit_to_width": return reflect.ValueOf(self._shaped_text_fit_to_width);
	case "_shaped_text_tab_align": return reflect.ValueOf(self._shaped_text_tab_align);
	case "_shaped_text_shape": return reflect.ValueOf(self._shaped_text_shape);
	case "_shaped_text_update_breaks": return reflect.ValueOf(self._shaped_text_update_breaks);
	case "_shaped_text_update_justification_ops": return reflect.ValueOf(self._shaped_text_update_justification_ops);
	case "_shaped_text_is_ready": return reflect.ValueOf(self._shaped_text_is_ready);
	case "_shaped_text_get_glyphs": return reflect.ValueOf(self._shaped_text_get_glyphs);
	case "_shaped_text_sort_logical": return reflect.ValueOf(self._shaped_text_sort_logical);
	case "_shaped_text_get_glyph_count": return reflect.ValueOf(self._shaped_text_get_glyph_count);
	case "_shaped_text_get_range": return reflect.ValueOf(self._shaped_text_get_range);
	case "_shaped_text_get_line_breaks_adv": return reflect.ValueOf(self._shaped_text_get_line_breaks_adv);
	case "_shaped_text_get_line_breaks": return reflect.ValueOf(self._shaped_text_get_line_breaks);
	case "_shaped_text_get_word_breaks": return reflect.ValueOf(self._shaped_text_get_word_breaks);
	case "_shaped_text_get_trim_pos": return reflect.ValueOf(self._shaped_text_get_trim_pos);
	case "_shaped_text_get_ellipsis_pos": return reflect.ValueOf(self._shaped_text_get_ellipsis_pos);
	case "_shaped_text_get_ellipsis_glyph_count": return reflect.ValueOf(self._shaped_text_get_ellipsis_glyph_count);
	case "_shaped_text_get_ellipsis_glyphs": return reflect.ValueOf(self._shaped_text_get_ellipsis_glyphs);
	case "_shaped_text_overrun_trim_to_width": return reflect.ValueOf(self._shaped_text_overrun_trim_to_width);
	case "_shaped_text_get_objects": return reflect.ValueOf(self._shaped_text_get_objects);
	case "_shaped_text_get_object_rect": return reflect.ValueOf(self._shaped_text_get_object_rect);
	case "_shaped_text_get_object_range": return reflect.ValueOf(self._shaped_text_get_object_range);
	case "_shaped_text_get_object_glyph": return reflect.ValueOf(self._shaped_text_get_object_glyph);
	case "_shaped_text_get_size": return reflect.ValueOf(self._shaped_text_get_size);
	case "_shaped_text_get_ascent": return reflect.ValueOf(self._shaped_text_get_ascent);
	case "_shaped_text_get_descent": return reflect.ValueOf(self._shaped_text_get_descent);
	case "_shaped_text_get_width": return reflect.ValueOf(self._shaped_text_get_width);
	case "_shaped_text_get_underline_position": return reflect.ValueOf(self._shaped_text_get_underline_position);
	case "_shaped_text_get_underline_thickness": return reflect.ValueOf(self._shaped_text_get_underline_thickness);
	case "_shaped_text_get_dominant_direction_in_range": return reflect.ValueOf(self._shaped_text_get_dominant_direction_in_range);
	case "_shaped_text_get_carets": return reflect.ValueOf(self._shaped_text_get_carets);
	case "_shaped_text_get_selection": return reflect.ValueOf(self._shaped_text_get_selection);
	case "_shaped_text_hit_test_grapheme": return reflect.ValueOf(self._shaped_text_hit_test_grapheme);
	case "_shaped_text_hit_test_position": return reflect.ValueOf(self._shaped_text_hit_test_position);
	case "_shaped_text_draw": return reflect.ValueOf(self._shaped_text_draw);
	case "_shaped_text_draw_outline": return reflect.ValueOf(self._shaped_text_draw_outline);
	case "_shaped_text_get_grapheme_bounds": return reflect.ValueOf(self._shaped_text_get_grapheme_bounds);
	case "_shaped_text_next_grapheme_pos": return reflect.ValueOf(self._shaped_text_next_grapheme_pos);
	case "_shaped_text_prev_grapheme_pos": return reflect.ValueOf(self._shaped_text_prev_grapheme_pos);
	case "_shaped_text_get_character_breaks": return reflect.ValueOf(self._shaped_text_get_character_breaks);
	case "_shaped_text_next_character_pos": return reflect.ValueOf(self._shaped_text_next_character_pos);
	case "_shaped_text_prev_character_pos": return reflect.ValueOf(self._shaped_text_prev_character_pos);
	case "_shaped_text_closest_character_pos": return reflect.ValueOf(self._shaped_text_closest_character_pos);
	case "_format_number": return reflect.ValueOf(self._format_number);
	case "_parse_number": return reflect.ValueOf(self._parse_number);
	case "_percent_sign": return reflect.ValueOf(self._percent_sign);
	case "_strip_diacritics": return reflect.ValueOf(self._strip_diacritics);
	case "_is_valid_identifier": return reflect.ValueOf(self._is_valid_identifier);
	case "_is_valid_letter": return reflect.ValueOf(self._is_valid_letter);
	case "_string_get_word_breaks": return reflect.ValueOf(self._string_get_word_breaks);
	case "_string_get_character_breaks": return reflect.ValueOf(self._string_get_character_breaks);
	case "_is_confusable": return reflect.ValueOf(self._is_confusable);
	case "_spoof_check": return reflect.ValueOf(self._spoof_check);
	case "_string_to_upper": return reflect.ValueOf(self._string_to_upper);
	case "_string_to_lower": return reflect.ValueOf(self._string_to_lower);
	case "_string_to_title": return reflect.ValueOf(self._string_to_title);
	case "_parse_structured_text": return reflect.ValueOf(self._parse_structured_text);
	case "_cleanup": return reflect.ValueOf(self._cleanup);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TextServerManager struct {_ [0]*TextServerManager; ptr gd.Pointer}

//go:nosplit
func (self TextServerManager) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextServerManager) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextServerManager) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServerManager) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextServerManager) AsTextServerManager() [1]TextServerManager { return [1]TextServerManager{self} }

//go:nosplit

func (self TextServerManager) IsSingleton() {}

func (self TextServerManager) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Texture struct {_ [0]*Texture; ptr gd.Pointer}

//go:nosplit
func (self Texture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Texture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Texture) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture) AsTexture() [1]Texture { return [1]Texture{self} }


//go:nosplit
func (self Texture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Texture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Texture2D struct {_ [0]*Texture2D; ptr gd.Pointer}

//go:nosplit
func (self Texture2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Texture2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Texture2D) Super() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2D) AsTexture2D() [1]Texture2D { return [1]Texture2D{self} }


//go:nosplit
func (self Texture2D) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Called when the [Texture2D]'s width is queried.
*/
func (Texture2D) _get_width(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the [Texture2D]'s height is queried.
*/
func (Texture2D) _get_height(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when a pixel's opaque state in the [Texture2D] is queried at the specified [code](x, y)[/code] position.
*/
func (Texture2D) _is_pixel_opaque(impl func(ptr unsafe.Pointer, x gd.Int, y gd.Int) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var x = gd.UnsafeGet[gd.Int](p_args,0)
		var y = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, x, y)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the presence of an alpha channel in the [Texture2D] is queried.
*/
func (Texture2D) _has_alpha(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the entire [Texture2D] is requested to be drawn over a [CanvasItem], with the top-left offset specified in [param pos]. [param modulate] specifies a multiplier for the colors being drawn, while [param transpose] specifies whether drawing should be performed in column-major order instead of row-major order (resulting in 90-degree clockwise rotation).
[b]Note:[/b] This is only used in 2D rendering, not 3D.
*/
func (Texture2D) _draw(impl func(ptr unsafe.Pointer, to_canvas_item gd.RID, pos gd.Vector2, modulate gd.Color, transpose bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var to_canvas_item = gd.UnsafeGet[gd.RID](p_args,0)
		var pos = gd.UnsafeGet[gd.Vector2](p_args,1)
		var modulate = gd.UnsafeGet[gd.Color](p_args,2)
		var transpose = gd.UnsafeGet[bool](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, to_canvas_item, pos, modulate, transpose)
		ctx.End()
	}
}

/*
Called when the [Texture2D] is requested to be drawn onto [CanvasItem]'s specified [param rect]. [param modulate] specifies a multiplier for the colors being drawn, while [param transpose] specifies whether drawing should be performed in column-major order instead of row-major order (resulting in 90-degree clockwise rotation).
[b]Note:[/b] This is only used in 2D rendering, not 3D.
*/
func (Texture2D) _draw_rect(impl func(ptr unsafe.Pointer, to_canvas_item gd.RID, rect gd.Rect2, tile bool, modulate gd.Color, transpose bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var to_canvas_item = gd.UnsafeGet[gd.RID](p_args,0)
		var rect = gd.UnsafeGet[gd.Rect2](p_args,1)
		var tile = gd.UnsafeGet[bool](p_args,2)
		var modulate = gd.UnsafeGet[gd.Color](p_args,3)
		var transpose = gd.UnsafeGet[bool](p_args,4)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, to_canvas_item, rect, tile, modulate, transpose)
		ctx.End()
	}
}

/*
Called when a part of the [Texture2D] specified by [param src_rect]'s coordinates is requested to be drawn onto [CanvasItem]'s specified [param rect]. [param modulate] specifies a multiplier for the colors being drawn, while [param transpose] specifies whether drawing should be performed in column-major order instead of row-major order (resulting in 90-degree clockwise rotation).
[b]Note:[/b] This is only used in 2D rendering, not 3D.
*/
func (Texture2D) _draw_rect_region(impl func(ptr unsafe.Pointer, to_canvas_item gd.RID, rect gd.Rect2, src_rect gd.Rect2, modulate gd.Color, transpose bool, clip_uv bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var to_canvas_item = gd.UnsafeGet[gd.RID](p_args,0)
		var rect = gd.UnsafeGet[gd.Rect2](p_args,1)
		var src_rect = gd.UnsafeGet[gd.Rect2](p_args,2)
		var modulate = gd.UnsafeGet[gd.Color](p_args,3)
		var transpose = gd.UnsafeGet[bool](p_args,4)
		var clip_uv = gd.UnsafeGet[bool](p_args,5)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, to_canvas_item, rect, src_rect, modulate, transpose, clip_uv)
		ctx.End()
	}
}

func (self Texture2D) Virtual(name string) reflect.Value {
	switch name {
	case "_get_width": return reflect.ValueOf(self._get_width);
	case "_get_height": return reflect.ValueOf(self._get_height);
	case "_is_pixel_opaque": return reflect.ValueOf(self._is_pixel_opaque);
	case "_has_alpha": return reflect.ValueOf(self._has_alpha);
	case "_draw": return reflect.ValueOf(self._draw);
	case "_draw_rect": return reflect.ValueOf(self._draw_rect);
	case "_draw_rect_region": return reflect.ValueOf(self._draw_rect_region);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Texture2DArray struct {_ [0]*Texture2DArray; ptr gd.Pointer}

//go:nosplit
func (self Texture2DArray) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Texture2DArray) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Texture2DArray) Super() [1]ImageTextureLayered { return *(*[1]ImageTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DArray) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DArray) AsTexture2DArray() [1]Texture2DArray { return [1]Texture2DArray{self} }


//go:nosplit
func (self Texture2DArray) AsImageTextureLayered() [1]ImageTextureLayered { return *(*[1]ImageTextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DArray) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DArray) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DArray) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DArray) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Texture2DArray) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Texture2DArrayRD struct {_ [0]*Texture2DArrayRD; ptr gd.Pointer}

//go:nosplit
func (self Texture2DArrayRD) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Texture2DArrayRD) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Texture2DArrayRD) Super() [1]TextureLayeredRD { return *(*[1]TextureLayeredRD)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DArrayRD) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DArrayRD) AsTexture2DArrayRD() [1]Texture2DArrayRD { return [1]Texture2DArrayRD{self} }


//go:nosplit
func (self Texture2DArrayRD) AsTextureLayeredRD() [1]TextureLayeredRD { return *(*[1]TextureLayeredRD)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DArrayRD) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DArrayRD) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DArrayRD) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DArrayRD) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Texture2DArrayRD) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Texture2DRD struct {_ [0]*Texture2DRD; ptr gd.Pointer}

//go:nosplit
func (self Texture2DRD) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Texture2DRD) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Texture2DRD) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DRD) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DRD) AsTexture2DRD() [1]Texture2DRD { return [1]Texture2DRD{self} }


//go:nosplit
func (self Texture2DRD) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DRD) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DRD) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture2DRD) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Texture2DRD) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Texture3D struct {_ [0]*Texture3D; ptr gd.Pointer}

//go:nosplit
func (self Texture3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Texture3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Texture3D) Super() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture3D) AsTexture3D() [1]Texture3D { return [1]Texture3D{self} }


//go:nosplit
func (self Texture3D) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Called when the [Texture3D]'s format is queried.
*/
func (Texture3D) _get_format(impl func(ptr unsafe.Pointer) ImageFormat, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the [Texture3D]'s width is queried.
*/
func (Texture3D) _get_width(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the [Texture3D]'s height is queried.
*/
func (Texture3D) _get_height(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the [Texture3D]'s depth is queried.
*/
func (Texture3D) _get_depth(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the presence of mipmaps in the [Texture3D] is queried.
*/
func (Texture3D) _has_mipmaps(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the [Texture3D]'s data is queried.
*/
func (Texture3D) _get_data(impl func(ptr unsafe.Pointer) gd.ArrayOf[Image], api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.Array()))
		ctx.End()
	}
}

func (self Texture3D) Virtual(name string) reflect.Value {
	switch name {
	case "_get_format": return reflect.ValueOf(self._get_format);
	case "_get_width": return reflect.ValueOf(self._get_width);
	case "_get_height": return reflect.ValueOf(self._get_height);
	case "_get_depth": return reflect.ValueOf(self._get_depth);
	case "_has_mipmaps": return reflect.ValueOf(self._has_mipmaps);
	case "_get_data": return reflect.ValueOf(self._get_data);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Texture3DRD struct {_ [0]*Texture3DRD; ptr gd.Pointer}

//go:nosplit
func (self Texture3DRD) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Texture3DRD) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Texture3DRD) Super() [1]Texture3D { return *(*[1]Texture3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture3DRD) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture3DRD) AsTexture3DRD() [1]Texture3DRD { return [1]Texture3DRD{self} }


//go:nosplit
func (self Texture3DRD) AsTexture3D() [1]Texture3D { return *(*[1]Texture3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture3DRD) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture3DRD) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Texture3DRD) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Texture3DRD) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TextureButtonStretchMode int64
type TextureButton struct {_ [0]*TextureButton; ptr gd.Pointer}

//go:nosplit
func (self TextureButton) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextureButton) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextureButton) Super() [1]BaseButton { return *(*[1]BaseButton)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureButton) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureButton) AsTextureButton() [1]TextureButton { return [1]TextureButton{self} }


//go:nosplit
func (self TextureButton) AsBaseButton() [1]BaseButton { return *(*[1]BaseButton)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureButton) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureButton) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureButton) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self TextureButton) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TextureCubemapArrayRD struct {_ [0]*TextureCubemapArrayRD; ptr gd.Pointer}

//go:nosplit
func (self TextureCubemapArrayRD) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextureCubemapArrayRD) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextureCubemapArrayRD) Super() [1]TextureLayeredRD { return *(*[1]TextureLayeredRD)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureCubemapArrayRD) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureCubemapArrayRD) AsTextureCubemapArrayRD() [1]TextureCubemapArrayRD { return [1]TextureCubemapArrayRD{self} }


//go:nosplit
func (self TextureCubemapArrayRD) AsTextureLayeredRD() [1]TextureLayeredRD { return *(*[1]TextureLayeredRD)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureCubemapArrayRD) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureCubemapArrayRD) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureCubemapArrayRD) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureCubemapArrayRD) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TextureCubemapArrayRD) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TextureCubemapRD struct {_ [0]*TextureCubemapRD; ptr gd.Pointer}

//go:nosplit
func (self TextureCubemapRD) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextureCubemapRD) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextureCubemapRD) Super() [1]TextureLayeredRD { return *(*[1]TextureLayeredRD)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureCubemapRD) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureCubemapRD) AsTextureCubemapRD() [1]TextureCubemapRD { return [1]TextureCubemapRD{self} }


//go:nosplit
func (self TextureCubemapRD) AsTextureLayeredRD() [1]TextureLayeredRD { return *(*[1]TextureLayeredRD)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureCubemapRD) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureCubemapRD) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureCubemapRD) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureCubemapRD) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TextureCubemapRD) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TextureLayeredLayeredType int64
type TextureLayered struct {_ [0]*TextureLayered; ptr gd.Pointer}

//go:nosplit
func (self TextureLayered) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextureLayered) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextureLayered) Super() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureLayered) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureLayered) AsTextureLayered() [1]TextureLayered { return [1]TextureLayered{self} }


//go:nosplit
func (self TextureLayered) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureLayered) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureLayered) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Called when the [TextureLayered]'s format is queried.
*/
func (TextureLayered) _get_format(impl func(ptr unsafe.Pointer) ImageFormat, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the layers' type in the [TextureLayered] is queried.
*/
func (TextureLayered) _get_layered_type(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the [TextureLayered]'s width queried.
*/
func (TextureLayered) _get_width(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the [TextureLayered]'s height is queried.
*/
func (TextureLayered) _get_height(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the number of layers in the [TextureLayered] is queried.
*/
func (TextureLayered) _get_layers(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the presence of mipmaps in the [TextureLayered] is queried.
*/
func (TextureLayered) _has_mipmaps(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called when the data for a layer in the [TextureLayered] is queried.
*/
func (TextureLayered) _get_layer_data(impl func(ptr unsafe.Pointer, layer_index gd.Int) Image, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var layer_index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, layer_index)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (self TextureLayered) Virtual(name string) reflect.Value {
	switch name {
	case "_get_format": return reflect.ValueOf(self._get_format);
	case "_get_layered_type": return reflect.ValueOf(self._get_layered_type);
	case "_get_width": return reflect.ValueOf(self._get_width);
	case "_get_height": return reflect.ValueOf(self._get_height);
	case "_get_layers": return reflect.ValueOf(self._get_layers);
	case "_has_mipmaps": return reflect.ValueOf(self._has_mipmaps);
	case "_get_layer_data": return reflect.ValueOf(self._get_layer_data);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TextureLayeredRD struct {_ [0]*TextureLayeredRD; ptr gd.Pointer}

//go:nosplit
func (self TextureLayeredRD) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextureLayeredRD) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextureLayeredRD) Super() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureLayeredRD) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureLayeredRD) AsTextureLayeredRD() [1]TextureLayeredRD { return [1]TextureLayeredRD{self} }


//go:nosplit
func (self TextureLayeredRD) AsTextureLayered() [1]TextureLayered { return *(*[1]TextureLayered)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureLayeredRD) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureLayeredRD) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureLayeredRD) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TextureLayeredRD) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TextureProgressBarFillMode int64
type TextureProgressBar struct {_ [0]*TextureProgressBar; ptr gd.Pointer}

//go:nosplit
func (self TextureProgressBar) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextureProgressBar) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextureProgressBar) Super() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureProgressBar) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureProgressBar) AsTextureProgressBar() [1]TextureProgressBar { return [1]TextureProgressBar{self} }


//go:nosplit
func (self TextureProgressBar) AsRange() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureProgressBar) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureProgressBar) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureProgressBar) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self TextureProgressBar) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TextureRectExpandMode int64

type TextureRectStretchMode int64
type TextureRect struct {_ [0]*TextureRect; ptr gd.Pointer}

//go:nosplit
func (self TextureRect) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TextureRect) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TextureRect) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureRect) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureRect) AsTextureRect() [1]TextureRect { return [1]TextureRect{self} }


//go:nosplit
func (self TextureRect) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureRect) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TextureRect) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self TextureRect) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ThemeDataType int64
type Theme struct {_ [0]*Theme; ptr gd.Pointer}

//go:nosplit
func (self Theme) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Theme) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Theme) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Theme) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Theme) AsTheme() [1]Theme { return [1]Theme{self} }


//go:nosplit
func (self Theme) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Theme) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Theme) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ThemeDB struct {_ [0]*ThemeDB; ptr gd.Pointer}

//go:nosplit
func (self ThemeDB) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ThemeDB) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ThemeDB) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ThemeDB) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ThemeDB) AsThemeDB() [1]ThemeDB { return [1]ThemeDB{self} }

//go:nosplit

func (self ThemeDB) IsSingleton() {}

func (self ThemeDB) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ThreadPriority int64
type Thread struct {_ [0]*Thread; ptr gd.Pointer}

//go:nosplit
func (self Thread) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Thread) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Thread) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Thread) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Thread) AsThread() [1]Thread { return [1]Thread{self} }


//go:nosplit
func (self Thread) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Thread) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TileData struct {_ [0]*TileData; ptr gd.Pointer}

//go:nosplit
func (self TileData) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TileData) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TileData) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileData) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileData) AsTileData() [1]TileData { return [1]TileData{self} }

func (self TileData) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TileMapVisibilityMode int64
type TileMap struct {_ [0]*TileMap; ptr gd.Pointer}

//go:nosplit
func (self TileMap) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TileMap) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TileMap) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileMap) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileMap) AsTileMap() [1]TileMap { return [1]TileMap{self} }


//go:nosplit
func (self TileMap) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileMap) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileMap) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Should return [code]true[/code] if the tile at coordinates [param coords] on layer [param layer] requires a runtime update.
[b]Warning:[/b] Make sure this function only return [code]true[/code] when needed. Any tile processed at runtime without a need for it will imply a significant performance penalty.
[b]Note:[/b] If the result of this function should changed, use [method notify_runtime_tile_data_update] to notify the TileMap it needs an update.
*/
func (TileMap) _use_tile_data_runtime_update(impl func(ptr unsafe.Pointer, layer gd.Int, coords gd.Vector2i) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var layer = gd.UnsafeGet[gd.Int](p_args,0)
		var coords = gd.UnsafeGet[gd.Vector2i](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, layer, coords)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called with a TileData object about to be used internally by the TileMap, allowing its modification at runtime.
This method is only called if [method _use_tile_data_runtime_update] is implemented and returns [code]true[/code] for the given tile [param coords] and [param layer].
[b]Warning:[/b] The [param tile_data] object's sub-resources are the same as the one in the TileSet. Modifying them might impact the whole TileSet. Instead, make sure to duplicate those resources.
[b]Note:[/b] If the properties of [param tile_data] object should change over time, use [method notify_runtime_tile_data_update] to notify the TileMap it needs an update.
*/
func (TileMap) _tile_data_runtime_update(impl func(ptr unsafe.Pointer, layer gd.Int, coords gd.Vector2i, tile_data TileData) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var layer = gd.UnsafeGet[gd.Int](p_args,0)
		var coords = gd.UnsafeGet[gd.Vector2i](p_args,1)
		var tile_data TileData
		tile_data.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,2)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, layer, coords, tile_data)
		ctx.End()
	}
}

func (self TileMap) Virtual(name string) reflect.Value {
	switch name {
	case "_use_tile_data_runtime_update": return reflect.ValueOf(self._use_tile_data_runtime_update);
	case "_tile_data_runtime_update": return reflect.ValueOf(self._tile_data_runtime_update);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TileMapLayerDebugVisibilityMode int64
type TileMapLayer struct {_ [0]*TileMapLayer; ptr gd.Pointer}

//go:nosplit
func (self TileMapLayer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TileMapLayer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TileMapLayer) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileMapLayer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileMapLayer) AsTileMapLayer() [1]TileMapLayer { return [1]TileMapLayer{self} }


//go:nosplit
func (self TileMapLayer) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileMapLayer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileMapLayer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Should return [code]true[/code] if the tile at coordinates [param coords] requires a runtime update.
[b]Warning:[/b] Make sure this function only returns [code]true[/code] when needed. Any tile processed at runtime without a need for it will imply a significant performance penalty.
[b]Note:[/b] If the result of this function should change, use [method notify_runtime_tile_data_update] to notify the [TileMapLayer] it needs an update.
*/
func (TileMapLayer) _use_tile_data_runtime_update(impl func(ptr unsafe.Pointer, coords gd.Vector2i) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var coords = gd.UnsafeGet[gd.Vector2i](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, coords)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called with a [TileData] object about to be used internally by the [TileMapLayer], allowing its modification at runtime.
This method is only called if [method _use_tile_data_runtime_update] is implemented and returns [code]true[/code] for the given tile [param coords].
[b]Warning:[/b] The [param tile_data] object's sub-resources are the same as the one in the TileSet. Modifying them might impact the whole TileSet. Instead, make sure to duplicate those resources.
[b]Note:[/b] If the properties of [param tile_data] object should change over time, use [method notify_runtime_tile_data_update] to notify the [TileMapLayer] it needs an update.
*/
func (TileMapLayer) _tile_data_runtime_update(impl func(ptr unsafe.Pointer, coords gd.Vector2i, tile_data TileData) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var coords = gd.UnsafeGet[gd.Vector2i](p_args,0)
		var tile_data TileData
		tile_data.SetPointer(mmm.Let[gd.Pointer](ctx.Lifetime, ctx.API, [2]uintptr{gd.UnsafeGet[uintptr](p_args,1)}))
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, coords, tile_data)
		ctx.End()
	}
}

func (self TileMapLayer) Virtual(name string) reflect.Value {
	switch name {
	case "_use_tile_data_runtime_update": return reflect.ValueOf(self._use_tile_data_runtime_update);
	case "_tile_data_runtime_update": return reflect.ValueOf(self._tile_data_runtime_update);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TileMapPattern struct {_ [0]*TileMapPattern; ptr gd.Pointer}

//go:nosplit
func (self TileMapPattern) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TileMapPattern) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TileMapPattern) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileMapPattern) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileMapPattern) AsTileMapPattern() [1]TileMapPattern { return [1]TileMapPattern{self} }


//go:nosplit
func (self TileMapPattern) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileMapPattern) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TileMapPattern) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TileSetTileShape int64

type TileSetTileLayout int64

type TileSetTileOffsetAxis int64

type TileSetCellNeighbor int64

type TileSetTerrainMode int64
type TileSet struct {_ [0]*TileSet; ptr gd.Pointer}

//go:nosplit
func (self TileSet) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TileSet) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TileSet) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileSet) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileSet) AsTileSet() [1]TileSet { return [1]TileSet{self} }


//go:nosplit
func (self TileSet) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileSet) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TileSet) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TileSetAtlasSourceTileAnimationMode int64
type TileSetAtlasSource struct {_ [0]*TileSetAtlasSource; ptr gd.Pointer}

//go:nosplit
func (self TileSetAtlasSource) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TileSetAtlasSource) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TileSetAtlasSource) Super() [1]TileSetSource { return *(*[1]TileSetSource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileSetAtlasSource) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileSetAtlasSource) AsTileSetAtlasSource() [1]TileSetAtlasSource { return [1]TileSetAtlasSource{self} }


//go:nosplit
func (self TileSetAtlasSource) AsTileSetSource() [1]TileSetSource { return *(*[1]TileSetSource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileSetAtlasSource) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileSetAtlasSource) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TileSetAtlasSource) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TileSetScenesCollectionSource struct {_ [0]*TileSetScenesCollectionSource; ptr gd.Pointer}

//go:nosplit
func (self TileSetScenesCollectionSource) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TileSetScenesCollectionSource) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TileSetScenesCollectionSource) Super() [1]TileSetSource { return *(*[1]TileSetSource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileSetScenesCollectionSource) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileSetScenesCollectionSource) AsTileSetScenesCollectionSource() [1]TileSetScenesCollectionSource { return [1]TileSetScenesCollectionSource{self} }


//go:nosplit
func (self TileSetScenesCollectionSource) AsTileSetSource() [1]TileSetSource { return *(*[1]TileSetSource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileSetScenesCollectionSource) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileSetScenesCollectionSource) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TileSetScenesCollectionSource) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TileSetSource struct {_ [0]*TileSetSource; ptr gd.Pointer}

//go:nosplit
func (self TileSetSource) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TileSetSource) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TileSetSource) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileSetSource) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileSetSource) AsTileSetSource() [1]TileSetSource { return [1]TileSetSource{self} }


//go:nosplit
func (self TileSetSource) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TileSetSource) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TileSetSource) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TimeMonth int64

type TimeWeekday int64
type Time struct {_ [0]*Time; ptr gd.Pointer}

//go:nosplit
func (self Time) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Time) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Time) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Time) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Time) AsTime() [1]Time { return [1]Time{self} }

//go:nosplit

func (self Time) IsSingleton() {}

func (self Time) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TimerTimerProcessCallback int64
type Timer struct {_ [0]*Timer; ptr gd.Pointer}

//go:nosplit
func (self Timer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Timer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Timer) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Timer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Timer) AsTimer() [1]Timer { return [1]Timer{self} }


//go:nosplit
func (self Timer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Timer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TorusMesh struct {_ [0]*TorusMesh; ptr gd.Pointer}

//go:nosplit
func (self TorusMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TorusMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TorusMesh) Super() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TorusMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TorusMesh) AsTorusMesh() [1]TorusMesh { return [1]TorusMesh{self} }


//go:nosplit
func (self TorusMesh) AsPrimitiveMesh() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TorusMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TorusMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TorusMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TorusMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TouchScreenButtonVisibilityMode int64
type TouchScreenButton struct {_ [0]*TouchScreenButton; ptr gd.Pointer}

//go:nosplit
func (self TouchScreenButton) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TouchScreenButton) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TouchScreenButton) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TouchScreenButton) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TouchScreenButton) AsTouchScreenButton() [1]TouchScreenButton { return [1]TouchScreenButton{self} }


//go:nosplit
func (self TouchScreenButton) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TouchScreenButton) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TouchScreenButton) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self TouchScreenButton) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Translation struct {_ [0]*Translation; ptr gd.Pointer}

//go:nosplit
func (self Translation) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Translation) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Translation) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Translation) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Translation) AsTranslation() [1]Translation { return [1]Translation{self} }


//go:nosplit
func (self Translation) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Translation) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Virtual method to override [method get_plural_message].
*/
func (Translation) _get_plural_message(impl func(ptr unsafe.Pointer, src_message gd.StringName, src_plural_message gd.StringName, n gd.Int, context gd.StringName) gd.StringName, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var src_message = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var src_plural_message = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var n = gd.UnsafeGet[gd.Int](p_args,2)
		var context = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,3))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, src_message, src_plural_message, n, context)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Virtual method to override [method get_message].
*/
func (Translation) _get_message(impl func(ptr unsafe.Pointer, src_message gd.StringName, context gd.StringName) gd.StringName, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var src_message = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var context = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, src_message, context)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (self Translation) Virtual(name string) reflect.Value {
	switch name {
	case "_get_plural_message": return reflect.ValueOf(self._get_plural_message);
	case "_get_message": return reflect.ValueOf(self._get_message);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TranslationServer struct {_ [0]*TranslationServer; ptr gd.Pointer}

//go:nosplit
func (self TranslationServer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TranslationServer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TranslationServer) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TranslationServer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TranslationServer) AsTranslationServer() [1]TranslationServer { return [1]TranslationServer{self} }

//go:nosplit

func (self TranslationServer) IsSingleton() {}

func (self TranslationServer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TreeSelectMode int64

type TreeDropModeFlags int64
type Tree struct {_ [0]*Tree; ptr gd.Pointer}

//go:nosplit
func (self Tree) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Tree) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Tree) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Tree) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Tree) AsTree() [1]Tree { return [1]Tree{self} }


//go:nosplit
func (self Tree) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Tree) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Tree) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Tree) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TreeItemTreeCellMode int64
type TreeItem struct {_ [0]*TreeItem; ptr gd.Pointer}

//go:nosplit
func (self TreeItem) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TreeItem) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TreeItem) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TreeItem) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TreeItem) AsTreeItem() [1]TreeItem { return [1]TreeItem{self} }

func (self TreeItem) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TriangleMesh struct {_ [0]*TriangleMesh; ptr gd.Pointer}

//go:nosplit
func (self TriangleMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TriangleMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TriangleMesh) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TriangleMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TriangleMesh) AsTriangleMesh() [1]TriangleMesh { return [1]TriangleMesh{self} }


//go:nosplit
func (self TriangleMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TriangleMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type TubeTrailMesh struct {_ [0]*TubeTrailMesh; ptr gd.Pointer}

//go:nosplit
func (self TubeTrailMesh) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *TubeTrailMesh) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self TubeTrailMesh) Super() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TubeTrailMesh) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TubeTrailMesh) AsTubeTrailMesh() [1]TubeTrailMesh { return [1]TubeTrailMesh{self} }


//go:nosplit
func (self TubeTrailMesh) AsPrimitiveMesh() [1]PrimitiveMesh { return *(*[1]PrimitiveMesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TubeTrailMesh) AsMesh() [1]Mesh { return *(*[1]Mesh)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TubeTrailMesh) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self TubeTrailMesh) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self TubeTrailMesh) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type TweenTweenProcessMode int64

type TweenTweenPauseMode int64

type TweenTransitionType int64

type TweenEaseType int64
type Tween struct {_ [0]*Tween; ptr gd.Pointer}

//go:nosplit
func (self Tween) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Tween) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Tween) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Tween) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Tween) AsTween() [1]Tween { return [1]Tween{self} }


//go:nosplit
func (self Tween) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Tween) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type Tweener struct {_ [0]*Tweener; ptr gd.Pointer}

//go:nosplit
func (self Tweener) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Tweener) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Tweener) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Tweener) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Tweener) AsTweener() [1]Tweener { return [1]Tweener{self} }


//go:nosplit
func (self Tweener) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self Tweener) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type UDPServer struct {_ [0]*UDPServer; ptr gd.Pointer}

//go:nosplit
func (self UDPServer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *UDPServer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self UDPServer) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self UDPServer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self UDPServer) AsUDPServer() [1]UDPServer { return [1]UDPServer{self} }


//go:nosplit
func (self UDPServer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self UDPServer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type UPNPUPNPResult int64
type UPNP struct {_ [0]*UPNP; ptr gd.Pointer}

//go:nosplit
func (self UPNP) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *UPNP) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self UPNP) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self UPNP) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self UPNP) AsUPNP() [1]UPNP { return [1]UPNP{self} }


//go:nosplit
func (self UPNP) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self UPNP) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type UPNPDeviceIGDStatus int64
type UPNPDevice struct {_ [0]*UPNPDevice; ptr gd.Pointer}

//go:nosplit
func (self UPNPDevice) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *UPNPDevice) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self UPNPDevice) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self UPNPDevice) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self UPNPDevice) AsUPNPDevice() [1]UPNPDevice { return [1]UPNPDevice{self} }


//go:nosplit
func (self UPNPDevice) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self UPNPDevice) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type UndoRedoMergeMode int64
type UndoRedo struct {_ [0]*UndoRedo; ptr gd.Pointer}

//go:nosplit
func (self UndoRedo) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *UndoRedo) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self UndoRedo) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self UndoRedo) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self UndoRedo) AsUndoRedo() [1]UndoRedo { return [1]UndoRedo{self} }

func (self UndoRedo) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type UniformSetCacheRD struct {_ [0]*UniformSetCacheRD; ptr gd.Pointer}

//go:nosplit
func (self UniformSetCacheRD) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *UniformSetCacheRD) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self UniformSetCacheRD) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self UniformSetCacheRD) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self UniformSetCacheRD) AsUniformSetCacheRD() [1]UniformSetCacheRD { return [1]UniformSetCacheRD{self} }

func (self UniformSetCacheRD) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VBoxContainer struct {_ [0]*VBoxContainer; ptr gd.Pointer}

//go:nosplit
func (self VBoxContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VBoxContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VBoxContainer) Super() [1]BoxContainer { return *(*[1]BoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VBoxContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VBoxContainer) AsVBoxContainer() [1]VBoxContainer { return [1]VBoxContainer{self} }


//go:nosplit
func (self VBoxContainer) AsBoxContainer() [1]BoxContainer { return *(*[1]BoxContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VBoxContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VBoxContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VBoxContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VBoxContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self VBoxContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VFlowContainer struct {_ [0]*VFlowContainer; ptr gd.Pointer}

//go:nosplit
func (self VFlowContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VFlowContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VFlowContainer) Super() [1]FlowContainer { return *(*[1]FlowContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VFlowContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VFlowContainer) AsVFlowContainer() [1]VFlowContainer { return [1]VFlowContainer{self} }


//go:nosplit
func (self VFlowContainer) AsFlowContainer() [1]FlowContainer { return *(*[1]FlowContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VFlowContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VFlowContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VFlowContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VFlowContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self VFlowContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VScrollBar struct {_ [0]*VScrollBar; ptr gd.Pointer}

//go:nosplit
func (self VScrollBar) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VScrollBar) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VScrollBar) Super() [1]ScrollBar { return *(*[1]ScrollBar)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VScrollBar) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VScrollBar) AsVScrollBar() [1]VScrollBar { return [1]VScrollBar{self} }


//go:nosplit
func (self VScrollBar) AsScrollBar() [1]ScrollBar { return *(*[1]ScrollBar)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VScrollBar) AsRange() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VScrollBar) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VScrollBar) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VScrollBar) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self VScrollBar) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VSeparator struct {_ [0]*VSeparator; ptr gd.Pointer}

//go:nosplit
func (self VSeparator) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VSeparator) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VSeparator) Super() [1]Separator { return *(*[1]Separator)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSeparator) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSeparator) AsVSeparator() [1]VSeparator { return [1]VSeparator{self} }


//go:nosplit
func (self VSeparator) AsSeparator() [1]Separator { return *(*[1]Separator)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSeparator) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSeparator) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSeparator) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self VSeparator) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VSlider struct {_ [0]*VSlider; ptr gd.Pointer}

//go:nosplit
func (self VSlider) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VSlider) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VSlider) Super() [1]Slider { return *(*[1]Slider)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSlider) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSlider) AsVSlider() [1]VSlider { return [1]VSlider{self} }


//go:nosplit
func (self VSlider) AsSlider() [1]Slider { return *(*[1]Slider)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSlider) AsRange() [1]Range { return *(*[1]Range)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSlider) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSlider) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSlider) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self VSlider) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VSplitContainer struct {_ [0]*VSplitContainer; ptr gd.Pointer}

//go:nosplit
func (self VSplitContainer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VSplitContainer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VSplitContainer) Super() [1]SplitContainer { return *(*[1]SplitContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSplitContainer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSplitContainer) AsVSplitContainer() [1]VSplitContainer { return [1]VSplitContainer{self} }


//go:nosplit
func (self VSplitContainer) AsSplitContainer() [1]SplitContainer { return *(*[1]SplitContainer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSplitContainer) AsContainer() [1]Container { return *(*[1]Container)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSplitContainer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSplitContainer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VSplitContainer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self VSplitContainer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VehicleBody3D struct {_ [0]*VehicleBody3D; ptr gd.Pointer}

//go:nosplit
func (self VehicleBody3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VehicleBody3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VehicleBody3D) Super() [1]RigidBody3D { return *(*[1]RigidBody3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VehicleBody3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VehicleBody3D) AsVehicleBody3D() [1]VehicleBody3D { return [1]VehicleBody3D{self} }


//go:nosplit
func (self VehicleBody3D) AsRigidBody3D() [1]RigidBody3D { return *(*[1]RigidBody3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VehicleBody3D) AsPhysicsBody3D() [1]PhysicsBody3D { return *(*[1]PhysicsBody3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VehicleBody3D) AsCollisionObject3D() [1]CollisionObject3D { return *(*[1]CollisionObject3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VehicleBody3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VehicleBody3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self VehicleBody3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VehicleWheel3D struct {_ [0]*VehicleWheel3D; ptr gd.Pointer}

//go:nosplit
func (self VehicleWheel3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VehicleWheel3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VehicleWheel3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VehicleWheel3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VehicleWheel3D) AsVehicleWheel3D() [1]VehicleWheel3D { return [1]VehicleWheel3D{self} }


//go:nosplit
func (self VehicleWheel3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VehicleWheel3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self VehicleWheel3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VideoStream struct {_ [0]*VideoStream; ptr gd.Pointer}

//go:nosplit
func (self VideoStream) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VideoStream) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VideoStream) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VideoStream) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VideoStream) AsVideoStream() [1]VideoStream { return [1]VideoStream{self} }


//go:nosplit
func (self VideoStream) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VideoStream) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Called when the video starts playing, to initialize and return a subclass of [VideoStreamPlayback].
*/
func (VideoStream) _instantiate_playback(impl func(ptr unsafe.Pointer) VideoStreamPlayback, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (self VideoStream) Virtual(name string) reflect.Value {
	switch name {
	case "_instantiate_playback": return reflect.ValueOf(self._instantiate_playback);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VideoStreamPlayback struct {_ [0]*VideoStreamPlayback; ptr gd.Pointer}

//go:nosplit
func (self VideoStreamPlayback) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VideoStreamPlayback) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VideoStreamPlayback) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VideoStreamPlayback) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VideoStreamPlayback) AsVideoStreamPlayback() [1]VideoStreamPlayback { return [1]VideoStreamPlayback{self} }


//go:nosplit
func (self VideoStreamPlayback) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VideoStreamPlayback) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Stops playback. May be called multiple times before [method _play], or in response to [method VideoStreamPlayer.stop]. [method _is_playing] should return false once stopped.
*/
func (VideoStreamPlayback) _stop(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called in response to [member VideoStreamPlayer.autoplay] or [method VideoStreamPlayer.play]. Note that manual playback may also invoke [method _stop] multiple times before this method is called. [method _is_playing] should return true once playing.
*/
func (VideoStreamPlayback) _play(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Returns the playback state, as determined by calls to [method _play] and [method _stop].
*/
func (VideoStreamPlayback) _is_playing(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Set the paused status of video playback. [method _is_paused] must return [param paused]. Called in response to the [member VideoStreamPlayer.paused] setter.
*/
func (VideoStreamPlayback) _set_paused(impl func(ptr unsafe.Pointer, paused bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var paused = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, paused)
		ctx.End()
	}
}

/*
Returns the paused status, as set by [method _set_paused].
*/
func (VideoStreamPlayback) _is_paused(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns the video duration in seconds, if known, or 0 if unknown.
*/
func (VideoStreamPlayback) _get_length(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Return the current playback timestamp. Called in response to the [member VideoStreamPlayer.stream_position] getter.
*/
func (VideoStreamPlayback) _get_playback_position(impl func(ptr unsafe.Pointer) gd.Float, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Seeks to [param time] seconds. Called in response to the [member VideoStreamPlayer.stream_position] setter.
*/
func (VideoStreamPlayback) _seek(impl func(ptr unsafe.Pointer, time gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var time = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, time)
		ctx.End()
	}
}

/*
Select the audio track [param idx]. Called when playback starts, and in response to the [member VideoStreamPlayer.audio_track] setter.
*/
func (VideoStreamPlayback) _set_audio_track(impl func(ptr unsafe.Pointer, idx gd.Int) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var idx = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, idx)
		ctx.End()
	}
}

/*
Allocates a [Texture2D] in which decoded video frames will be drawn.
*/
func (VideoStreamPlayback) _get_texture(impl func(ptr unsafe.Pointer) Texture2D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

/*
Ticks video playback for [param delta] seconds. Called every frame as long as [method _is_paused] and [method _is_playing] return true.
*/
func (VideoStreamPlayback) _update(impl func(ptr unsafe.Pointer, delta gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var delta = gd.UnsafeGet[gd.Float](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, delta)
		ctx.End()
	}
}

/*
Returns the number of audio channels.
*/
func (VideoStreamPlayback) _get_channels(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns the audio sample rate used for mixing.
*/
func (VideoStreamPlayback) _get_mix_rate(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self VideoStreamPlayback) Virtual(name string) reflect.Value {
	switch name {
	case "_stop": return reflect.ValueOf(self._stop);
	case "_play": return reflect.ValueOf(self._play);
	case "_is_playing": return reflect.ValueOf(self._is_playing);
	case "_set_paused": return reflect.ValueOf(self._set_paused);
	case "_is_paused": return reflect.ValueOf(self._is_paused);
	case "_get_length": return reflect.ValueOf(self._get_length);
	case "_get_playback_position": return reflect.ValueOf(self._get_playback_position);
	case "_seek": return reflect.ValueOf(self._seek);
	case "_set_audio_track": return reflect.ValueOf(self._set_audio_track);
	case "_get_texture": return reflect.ValueOf(self._get_texture);
	case "_update": return reflect.ValueOf(self._update);
	case "_get_channels": return reflect.ValueOf(self._get_channels);
	case "_get_mix_rate": return reflect.ValueOf(self._get_mix_rate);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VideoStreamPlayer struct {_ [0]*VideoStreamPlayer; ptr gd.Pointer}

//go:nosplit
func (self VideoStreamPlayer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VideoStreamPlayer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VideoStreamPlayer) Super() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VideoStreamPlayer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VideoStreamPlayer) AsVideoStreamPlayer() [1]VideoStreamPlayer { return [1]VideoStreamPlayer{self} }


//go:nosplit
func (self VideoStreamPlayer) AsControl() [1]Control { return *(*[1]Control)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VideoStreamPlayer) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VideoStreamPlayer) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self VideoStreamPlayer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VideoStreamTheora struct {_ [0]*VideoStreamTheora; ptr gd.Pointer}

//go:nosplit
func (self VideoStreamTheora) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VideoStreamTheora) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VideoStreamTheora) Super() [1]VideoStream { return *(*[1]VideoStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VideoStreamTheora) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VideoStreamTheora) AsVideoStreamTheora() [1]VideoStreamTheora { return [1]VideoStreamTheora{self} }


//go:nosplit
func (self VideoStreamTheora) AsVideoStream() [1]VideoStream { return *(*[1]VideoStream)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VideoStreamTheora) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VideoStreamTheora) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VideoStreamTheora) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ViewportPositionalShadowAtlasQuadrantSubdiv int64

type ViewportScaling3DMode int64

type ViewportMSAA int64

type ViewportScreenSpaceAA int64

type ViewportRenderInfo int64

type ViewportRenderInfoType int64

type ViewportDebugDraw int64

type ViewportDefaultCanvasItemTextureFilter int64

type ViewportDefaultCanvasItemTextureRepeat int64

type ViewportSDFOversize int64

type ViewportSDFScale int64

type ViewportVRSMode int64

type ViewportVRSUpdateMode int64
type Viewport struct {_ [0]*Viewport; ptr gd.Pointer}

//go:nosplit
func (self Viewport) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Viewport) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Viewport) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Viewport) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Viewport) AsViewport() [1]Viewport { return [1]Viewport{self} }


//go:nosplit
func (self Viewport) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self Viewport) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ViewportTexture struct {_ [0]*ViewportTexture; ptr gd.Pointer}

//go:nosplit
func (self ViewportTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ViewportTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ViewportTexture) Super() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ViewportTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ViewportTexture) AsViewportTexture() [1]ViewportTexture { return [1]ViewportTexture{self} }


//go:nosplit
func (self ViewportTexture) AsTexture2D() [1]Texture2D { return *(*[1]Texture2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ViewportTexture) AsTexture() [1]Texture { return *(*[1]Texture)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ViewportTexture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ViewportTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ViewportTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisibleOnScreenEnabler2DEnableMode int64
type VisibleOnScreenEnabler2D struct {_ [0]*VisibleOnScreenEnabler2D; ptr gd.Pointer}

//go:nosplit
func (self VisibleOnScreenEnabler2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisibleOnScreenEnabler2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisibleOnScreenEnabler2D) Super() [1]VisibleOnScreenNotifier2D { return *(*[1]VisibleOnScreenNotifier2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenEnabler2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenEnabler2D) AsVisibleOnScreenEnabler2D() [1]VisibleOnScreenEnabler2D { return [1]VisibleOnScreenEnabler2D{self} }


//go:nosplit
func (self VisibleOnScreenEnabler2D) AsVisibleOnScreenNotifier2D() [1]VisibleOnScreenNotifier2D { return *(*[1]VisibleOnScreenNotifier2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenEnabler2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenEnabler2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenEnabler2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self VisibleOnScreenEnabler2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisibleOnScreenEnabler3DEnableMode int64
type VisibleOnScreenEnabler3D struct {_ [0]*VisibleOnScreenEnabler3D; ptr gd.Pointer}

//go:nosplit
func (self VisibleOnScreenEnabler3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisibleOnScreenEnabler3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisibleOnScreenEnabler3D) Super() [1]VisibleOnScreenNotifier3D { return *(*[1]VisibleOnScreenNotifier3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenEnabler3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenEnabler3D) AsVisibleOnScreenEnabler3D() [1]VisibleOnScreenEnabler3D { return [1]VisibleOnScreenEnabler3D{self} }


//go:nosplit
func (self VisibleOnScreenEnabler3D) AsVisibleOnScreenNotifier3D() [1]VisibleOnScreenNotifier3D { return *(*[1]VisibleOnScreenNotifier3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenEnabler3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenEnabler3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenEnabler3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self VisibleOnScreenEnabler3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisibleOnScreenNotifier2D struct {_ [0]*VisibleOnScreenNotifier2D; ptr gd.Pointer}

//go:nosplit
func (self VisibleOnScreenNotifier2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisibleOnScreenNotifier2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisibleOnScreenNotifier2D) Super() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenNotifier2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenNotifier2D) AsVisibleOnScreenNotifier2D() [1]VisibleOnScreenNotifier2D { return [1]VisibleOnScreenNotifier2D{self} }


//go:nosplit
func (self VisibleOnScreenNotifier2D) AsNode2D() [1]Node2D { return *(*[1]Node2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenNotifier2D) AsCanvasItem() [1]CanvasItem { return *(*[1]CanvasItem)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenNotifier2D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self VisibleOnScreenNotifier2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisibleOnScreenNotifier3D struct {_ [0]*VisibleOnScreenNotifier3D; ptr gd.Pointer}

//go:nosplit
func (self VisibleOnScreenNotifier3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisibleOnScreenNotifier3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisibleOnScreenNotifier3D) Super() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenNotifier3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenNotifier3D) AsVisibleOnScreenNotifier3D() [1]VisibleOnScreenNotifier3D { return [1]VisibleOnScreenNotifier3D{self} }


//go:nosplit
func (self VisibleOnScreenNotifier3D) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenNotifier3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisibleOnScreenNotifier3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self VisibleOnScreenNotifier3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualInstance3D struct {_ [0]*VisualInstance3D; ptr gd.Pointer}

//go:nosplit
func (self VisualInstance3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualInstance3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualInstance3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualInstance3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualInstance3D) AsVisualInstance3D() [1]VisualInstance3D { return [1]VisualInstance3D{self} }


//go:nosplit
func (self VisualInstance3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualInstance3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (VisualInstance3D) _get_aabb(impl func(ptr unsafe.Pointer) gd.AABB, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self VisualInstance3D) Virtual(name string) reflect.Value {
	switch name {
	case "_get_aabb": return reflect.ValueOf(self._get_aabb);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderType int64

type VisualShaderVaryingMode int64

type VisualShaderVaryingType int64
type VisualShader struct {_ [0]*VisualShader; ptr gd.Pointer}

//go:nosplit
func (self VisualShader) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShader) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShader) Super() [1]Shader { return *(*[1]Shader)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShader) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShader) AsVisualShader() [1]VisualShader { return [1]VisualShader{self} }


//go:nosplit
func (self VisualShader) AsShader() [1]Shader { return *(*[1]Shader)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShader) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShader) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShader) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodePortType int64
type VisualShaderNode struct {_ [0]*VisualShaderNode; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNode) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNode) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNode) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNode) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNode) AsVisualShaderNode() [1]VisualShaderNode { return [1]VisualShaderNode{self} }


//go:nosplit
func (self VisualShaderNode) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNode) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNode) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeBillboardBillboardType int64
type VisualShaderNodeBillboard struct {_ [0]*VisualShaderNodeBillboard; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeBillboard) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeBillboard) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeBillboard) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeBillboard) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeBillboard) AsVisualShaderNodeBillboard() [1]VisualShaderNodeBillboard { return [1]VisualShaderNodeBillboard{self} }


//go:nosplit
func (self VisualShaderNodeBillboard) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeBillboard) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeBillboard) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeBillboard) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeBooleanConstant struct {_ [0]*VisualShaderNodeBooleanConstant; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeBooleanConstant) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeBooleanConstant) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeBooleanConstant) Super() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeBooleanConstant) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeBooleanConstant) AsVisualShaderNodeBooleanConstant() [1]VisualShaderNodeBooleanConstant { return [1]VisualShaderNodeBooleanConstant{self} }


//go:nosplit
func (self VisualShaderNodeBooleanConstant) AsVisualShaderNodeConstant() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeBooleanConstant) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeBooleanConstant) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeBooleanConstant) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeBooleanConstant) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeBooleanParameter struct {_ [0]*VisualShaderNodeBooleanParameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeBooleanParameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeBooleanParameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeBooleanParameter) Super() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeBooleanParameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeBooleanParameter) AsVisualShaderNodeBooleanParameter() [1]VisualShaderNodeBooleanParameter { return [1]VisualShaderNodeBooleanParameter{self} }


//go:nosplit
func (self VisualShaderNodeBooleanParameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeBooleanParameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeBooleanParameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeBooleanParameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeBooleanParameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeClampOpType int64
type VisualShaderNodeClamp struct {_ [0]*VisualShaderNodeClamp; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeClamp) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeClamp) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeClamp) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeClamp) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeClamp) AsVisualShaderNodeClamp() [1]VisualShaderNodeClamp { return [1]VisualShaderNodeClamp{self} }


//go:nosplit
func (self VisualShaderNodeClamp) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeClamp) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeClamp) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeClamp) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeColorConstant struct {_ [0]*VisualShaderNodeColorConstant; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeColorConstant) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeColorConstant) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeColorConstant) Super() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorConstant) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorConstant) AsVisualShaderNodeColorConstant() [1]VisualShaderNodeColorConstant { return [1]VisualShaderNodeColorConstant{self} }


//go:nosplit
func (self VisualShaderNodeColorConstant) AsVisualShaderNodeConstant() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorConstant) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorConstant) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorConstant) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeColorConstant) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeColorFuncFunction int64
type VisualShaderNodeColorFunc struct {_ [0]*VisualShaderNodeColorFunc; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeColorFunc) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeColorFunc) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeColorFunc) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorFunc) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorFunc) AsVisualShaderNodeColorFunc() [1]VisualShaderNodeColorFunc { return [1]VisualShaderNodeColorFunc{self} }


//go:nosplit
func (self VisualShaderNodeColorFunc) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorFunc) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorFunc) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeColorFunc) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeColorOpOperator int64
type VisualShaderNodeColorOp struct {_ [0]*VisualShaderNodeColorOp; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeColorOp) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeColorOp) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeColorOp) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorOp) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorOp) AsVisualShaderNodeColorOp() [1]VisualShaderNodeColorOp { return [1]VisualShaderNodeColorOp{self} }


//go:nosplit
func (self VisualShaderNodeColorOp) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorOp) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorOp) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeColorOp) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeColorParameter struct {_ [0]*VisualShaderNodeColorParameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeColorParameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeColorParameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeColorParameter) Super() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorParameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorParameter) AsVisualShaderNodeColorParameter() [1]VisualShaderNodeColorParameter { return [1]VisualShaderNodeColorParameter{self} }


//go:nosplit
func (self VisualShaderNodeColorParameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorParameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorParameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeColorParameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeColorParameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeComment struct {_ [0]*VisualShaderNodeComment; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeComment) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeComment) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeComment) Super() [1]VisualShaderNodeFrame { return *(*[1]VisualShaderNodeFrame)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeComment) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeComment) AsVisualShaderNodeComment() [1]VisualShaderNodeComment { return [1]VisualShaderNodeComment{self} }


//go:nosplit
func (self VisualShaderNodeComment) AsVisualShaderNodeFrame() [1]VisualShaderNodeFrame { return *(*[1]VisualShaderNodeFrame)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeComment) AsVisualShaderNodeResizableBase() [1]VisualShaderNodeResizableBase { return *(*[1]VisualShaderNodeResizableBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeComment) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeComment) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeComment) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeComment) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeCompareComparisonType int64

type VisualShaderNodeCompareFunction int64

type VisualShaderNodeCompareCondition int64
type VisualShaderNodeCompare struct {_ [0]*VisualShaderNodeCompare; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeCompare) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeCompare) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeCompare) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCompare) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCompare) AsVisualShaderNodeCompare() [1]VisualShaderNodeCompare { return [1]VisualShaderNodeCompare{self} }


//go:nosplit
func (self VisualShaderNodeCompare) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCompare) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCompare) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeCompare) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeConstant struct {_ [0]*VisualShaderNodeConstant; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeConstant) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeConstant) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeConstant) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeConstant) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeConstant) AsVisualShaderNodeConstant() [1]VisualShaderNodeConstant { return [1]VisualShaderNodeConstant{self} }


//go:nosplit
func (self VisualShaderNodeConstant) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeConstant) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeConstant) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeConstant) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeCubemapSource int64

type VisualShaderNodeCubemapTextureType int64
type VisualShaderNodeCubemap struct {_ [0]*VisualShaderNodeCubemap; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeCubemap) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeCubemap) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeCubemap) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCubemap) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCubemap) AsVisualShaderNodeCubemap() [1]VisualShaderNodeCubemap { return [1]VisualShaderNodeCubemap{self} }


//go:nosplit
func (self VisualShaderNodeCubemap) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCubemap) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCubemap) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeCubemap) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeCubemapParameter struct {_ [0]*VisualShaderNodeCubemapParameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeCubemapParameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeCubemapParameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeCubemapParameter) Super() [1]VisualShaderNodeTextureParameter { return *(*[1]VisualShaderNodeTextureParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCubemapParameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCubemapParameter) AsVisualShaderNodeCubemapParameter() [1]VisualShaderNodeCubemapParameter { return [1]VisualShaderNodeCubemapParameter{self} }


//go:nosplit
func (self VisualShaderNodeCubemapParameter) AsVisualShaderNodeTextureParameter() [1]VisualShaderNodeTextureParameter { return *(*[1]VisualShaderNodeTextureParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCubemapParameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCubemapParameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCubemapParameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCubemapParameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeCubemapParameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeCurveTexture struct {_ [0]*VisualShaderNodeCurveTexture; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeCurveTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeCurveTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeCurveTexture) Super() [1]VisualShaderNodeResizableBase { return *(*[1]VisualShaderNodeResizableBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCurveTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCurveTexture) AsVisualShaderNodeCurveTexture() [1]VisualShaderNodeCurveTexture { return [1]VisualShaderNodeCurveTexture{self} }


//go:nosplit
func (self VisualShaderNodeCurveTexture) AsVisualShaderNodeResizableBase() [1]VisualShaderNodeResizableBase { return *(*[1]VisualShaderNodeResizableBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCurveTexture) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCurveTexture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCurveTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeCurveTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeCurveXYZTexture struct {_ [0]*VisualShaderNodeCurveXYZTexture; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeCurveXYZTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeCurveXYZTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeCurveXYZTexture) Super() [1]VisualShaderNodeResizableBase { return *(*[1]VisualShaderNodeResizableBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCurveXYZTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCurveXYZTexture) AsVisualShaderNodeCurveXYZTexture() [1]VisualShaderNodeCurveXYZTexture { return [1]VisualShaderNodeCurveXYZTexture{self} }


//go:nosplit
func (self VisualShaderNodeCurveXYZTexture) AsVisualShaderNodeResizableBase() [1]VisualShaderNodeResizableBase { return *(*[1]VisualShaderNodeResizableBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCurveXYZTexture) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCurveXYZTexture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCurveXYZTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeCurveXYZTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeCustom struct {_ [0]*VisualShaderNodeCustom; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeCustom) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeCustom) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeCustom) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCustom) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCustom) AsVisualShaderNodeCustom() [1]VisualShaderNodeCustom { return [1]VisualShaderNodeCustom{self} }


//go:nosplit
func (self VisualShaderNodeCustom) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCustom) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeCustom) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Override this method to define the name of the associated custom node in the Visual Shader Editor's members dialog and graph.
Defining this method is [b]optional[/b], but recommended. If not overridden, the node will be named as "Unnamed".
*/
func (VisualShaderNodeCustom) _get_name(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to define the description of the associated custom node in the Visual Shader Editor's members dialog.
Defining this method is [b]optional[/b].
*/
func (VisualShaderNodeCustom) _get_description(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to define the path to the associated custom node in the Visual Shader Editor's members dialog. The path may look like [code]"MyGame/MyFunctions/Noise"[/code].
Defining this method is [b]optional[/b]. If not overridden, the node will be filed under the "Addons" category.
*/
func (VisualShaderNodeCustom) _get_category(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to define the return icon of the associated custom node in the Visual Shader Editor's members dialog.
Defining this method is [b]optional[/b]. If not overridden, no return icon is shown.
*/
func (VisualShaderNodeCustom) _get_return_icon_type(impl func(ptr unsafe.Pointer) VisualShaderNodePortType, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to define the number of input ports of the associated custom node.
Defining this method is [b]required[/b]. If not overridden, the node has no input ports.
*/
func (VisualShaderNodeCustom) _get_input_port_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to define the returned type of each input port of the associated custom node (see [enum VisualShaderNode.PortType] for possible types).
Defining this method is [b]optional[/b], but recommended. If not overridden, input ports will return the [constant VisualShaderNode.PORT_TYPE_SCALAR] type.
*/
func (VisualShaderNodeCustom) _get_input_port_type(impl func(ptr unsafe.Pointer, port gd.Int) VisualShaderNodePortType, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var port = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, port)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to define the names of input ports of the associated custom node. The names are used both for the input slots in the editor and as identifiers in the shader code, and are passed in the [code]input_vars[/code] array in [method _get_code].
Defining this method is [b]optional[/b], but recommended. If not overridden, input ports are named as [code]"in" + str(port)[/code].
*/
func (VisualShaderNodeCustom) _get_input_port_name(impl func(ptr unsafe.Pointer, port gd.Int) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var port = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, port)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to define the default value for the specified input port. Prefer use this over [method VisualShaderNode.set_input_port_default_value].
Defining this method is [b]required[/b]. If not overridden, the node has no default values for their input ports.
*/
func (VisualShaderNodeCustom) _get_input_port_default_value(impl func(ptr unsafe.Pointer, port gd.Int) gd.Variant, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var port = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, port)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to define the input port which should be connected by default when this node is created as a result of dragging a connection from an existing node to the empty space on the graph.
Defining this method is [b]optional[/b]. If not overridden, the connection will be created to the first valid port.
*/
func (VisualShaderNodeCustom) _get_default_input_port(impl func(ptr unsafe.Pointer, atype VisualShaderNodePortType) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var atype = gd.UnsafeGet[VisualShaderNodePortType](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, atype)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to define the number of output ports of the associated custom node.
Defining this method is [b]required[/b]. If not overridden, the node has no output ports.
*/
func (VisualShaderNodeCustom) _get_output_port_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to define the returned type of each output port of the associated custom node (see [enum VisualShaderNode.PortType] for possible types).
Defining this method is [b]optional[/b], but recommended. If not overridden, output ports will return the [constant VisualShaderNode.PORT_TYPE_SCALAR] type.
*/
func (VisualShaderNodeCustom) _get_output_port_type(impl func(ptr unsafe.Pointer, port gd.Int) VisualShaderNodePortType, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var port = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, port)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to define the names of output ports of the associated custom node. The names are used both for the output slots in the editor and as identifiers in the shader code, and are passed in the [code]output_vars[/code] array in [method _get_code].
Defining this method is [b]optional[/b], but recommended. If not overridden, output ports are named as [code]"out" + str(port)[/code].
*/
func (VisualShaderNodeCustom) _get_output_port_name(impl func(ptr unsafe.Pointer, port gd.Int) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var port = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, port)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to define the number of the properties.
Defining this method is [b]optional[/b].
*/
func (VisualShaderNodeCustom) _get_property_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to define the names of the property of the associated custom node.
Defining this method is [b]optional[/b].
*/
func (VisualShaderNodeCustom) _get_property_name(impl func(ptr unsafe.Pointer, index gd.Int) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, index)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to define the default index of the property of the associated custom node.
Defining this method is [b]optional[/b].
*/
func (VisualShaderNodeCustom) _get_property_default_index(impl func(ptr unsafe.Pointer, index gd.Int) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, index)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to define the options inside the drop-down list property of the associated custom node.
Defining this method is [b]optional[/b].
*/
func (VisualShaderNodeCustom) _get_property_options(impl func(ptr unsafe.Pointer, index gd.Int) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var index = gd.UnsafeGet[gd.Int](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, index)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to define the actual shader code of the associated custom node. The shader code should be returned as a string, which can have multiple lines (the [code]"""[/code] multiline string construct can be used for convenience).
The [param input_vars] and [param output_vars] arrays contain the string names of the various input and output variables, as defined by [code]_get_input_*[/code] and [code]_get_output_*[/code] virtual methods in this class.
The output ports can be assigned values in the shader code. For example, [code]return output_vars[0] + " = " + input_vars[0] + ";"[/code].
You can customize the generated code based on the shader [param mode] (see [enum Shader.Mode]) and/or [param type] (see [enum VisualShader.Type]).
Defining this method is [b]required[/b].
*/
func (VisualShaderNodeCustom) _get_code(impl func(ptr unsafe.Pointer, input_vars gd.ArrayOf[gd.String], output_vars gd.ArrayOf[gd.String], mode ShaderMode, atype VisualShaderType) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var input_vars = gd.TypedArray[gd.String](mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0)))
		var output_vars = gd.TypedArray[gd.String](mmm.Let[gd.Array](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1)))
		var mode = gd.UnsafeGet[ShaderMode](p_args,2)
		var atype = gd.UnsafeGet[VisualShaderType](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, input_vars, output_vars, mode, atype)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to add a shader code to the beginning of each shader function (once). The shader code should be returned as a string, which can have multiple lines (the [code]"""[/code] multiline string construct can be used for convenience).
If there are multiple custom nodes of different types which use this feature the order of each insertion is undefined.
You can customize the generated code based on the shader [param mode] (see [enum Shader.Mode]) and/or [param type] (see [enum VisualShader.Type]).
Defining this method is [b]optional[/b].
*/
func (VisualShaderNodeCustom) _get_func_code(impl func(ptr unsafe.Pointer, mode ShaderMode, atype VisualShaderType) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var mode = gd.UnsafeGet[ShaderMode](p_args,0)
		var atype = gd.UnsafeGet[VisualShaderType](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, mode, atype)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to add shader code on top of the global shader, to define your own standard library of reusable methods, varyings, constants, uniforms, etc. The shader code should be returned as a string, which can have multiple lines (the [code]"""[/code] multiline string construct can be used for convenience).
Be careful with this functionality as it can cause name conflicts with other custom nodes, so be sure to give the defined entities unique names.
You can customize the generated code based on the shader [param mode] (see [enum Shader.Mode]).
Defining this method is [b]optional[/b].
*/
func (VisualShaderNodeCustom) _get_global_code(impl func(ptr unsafe.Pointer, mode ShaderMode) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var mode = gd.UnsafeGet[ShaderMode](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, mode)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Override this method to enable high-end mark in the Visual Shader Editor's members dialog.
Defining this method is [b]optional[/b]. If not overridden, it's [code]false[/code].
*/
func (VisualShaderNodeCustom) _is_highend(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Override this method to prevent the node to be visible in the member dialog for the certain [param mode] (see [enum Shader.Mode]) and/or [param type] (see [enum VisualShader.Type]).
Defining this method is [b]optional[/b]. If not overridden, it's [code]true[/code].
*/
func (VisualShaderNodeCustom) _is_available(impl func(ptr unsafe.Pointer, mode ShaderMode, atype VisualShaderType) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var mode = gd.UnsafeGet[ShaderMode](p_args,0)
		var atype = gd.UnsafeGet[VisualShaderType](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, mode, atype)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self VisualShaderNodeCustom) Virtual(name string) reflect.Value {
	switch name {
	case "_get_name": return reflect.ValueOf(self._get_name);
	case "_get_description": return reflect.ValueOf(self._get_description);
	case "_get_category": return reflect.ValueOf(self._get_category);
	case "_get_return_icon_type": return reflect.ValueOf(self._get_return_icon_type);
	case "_get_input_port_count": return reflect.ValueOf(self._get_input_port_count);
	case "_get_input_port_type": return reflect.ValueOf(self._get_input_port_type);
	case "_get_input_port_name": return reflect.ValueOf(self._get_input_port_name);
	case "_get_input_port_default_value": return reflect.ValueOf(self._get_input_port_default_value);
	case "_get_default_input_port": return reflect.ValueOf(self._get_default_input_port);
	case "_get_output_port_count": return reflect.ValueOf(self._get_output_port_count);
	case "_get_output_port_type": return reflect.ValueOf(self._get_output_port_type);
	case "_get_output_port_name": return reflect.ValueOf(self._get_output_port_name);
	case "_get_property_count": return reflect.ValueOf(self._get_property_count);
	case "_get_property_name": return reflect.ValueOf(self._get_property_name);
	case "_get_property_default_index": return reflect.ValueOf(self._get_property_default_index);
	case "_get_property_options": return reflect.ValueOf(self._get_property_options);
	case "_get_code": return reflect.ValueOf(self._get_code);
	case "_get_func_code": return reflect.ValueOf(self._get_func_code);
	case "_get_global_code": return reflect.ValueOf(self._get_global_code);
	case "_is_highend": return reflect.ValueOf(self._is_highend);
	case "_is_available": return reflect.ValueOf(self._is_available);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeDerivativeFuncOpType int64

type VisualShaderNodeDerivativeFuncFunction int64

type VisualShaderNodeDerivativeFuncPrecision int64
type VisualShaderNodeDerivativeFunc struct {_ [0]*VisualShaderNodeDerivativeFunc; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeDerivativeFunc) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeDerivativeFunc) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeDerivativeFunc) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDerivativeFunc) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDerivativeFunc) AsVisualShaderNodeDerivativeFunc() [1]VisualShaderNodeDerivativeFunc { return [1]VisualShaderNodeDerivativeFunc{self} }


//go:nosplit
func (self VisualShaderNodeDerivativeFunc) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDerivativeFunc) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDerivativeFunc) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeDerivativeFunc) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeDeterminant struct {_ [0]*VisualShaderNodeDeterminant; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeDeterminant) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeDeterminant) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeDeterminant) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDeterminant) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDeterminant) AsVisualShaderNodeDeterminant() [1]VisualShaderNodeDeterminant { return [1]VisualShaderNodeDeterminant{self} }


//go:nosplit
func (self VisualShaderNodeDeterminant) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDeterminant) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDeterminant) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeDeterminant) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeDistanceFade struct {_ [0]*VisualShaderNodeDistanceFade; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeDistanceFade) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeDistanceFade) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeDistanceFade) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDistanceFade) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDistanceFade) AsVisualShaderNodeDistanceFade() [1]VisualShaderNodeDistanceFade { return [1]VisualShaderNodeDistanceFade{self} }


//go:nosplit
func (self VisualShaderNodeDistanceFade) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDistanceFade) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDistanceFade) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeDistanceFade) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeDotProduct struct {_ [0]*VisualShaderNodeDotProduct; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeDotProduct) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeDotProduct) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeDotProduct) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDotProduct) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDotProduct) AsVisualShaderNodeDotProduct() [1]VisualShaderNodeDotProduct { return [1]VisualShaderNodeDotProduct{self} }


//go:nosplit
func (self VisualShaderNodeDotProduct) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDotProduct) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeDotProduct) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeDotProduct) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeExpression struct {_ [0]*VisualShaderNodeExpression; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeExpression) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeExpression) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeExpression) Super() [1]VisualShaderNodeGroupBase { return *(*[1]VisualShaderNodeGroupBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeExpression) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeExpression) AsVisualShaderNodeExpression() [1]VisualShaderNodeExpression { return [1]VisualShaderNodeExpression{self} }


//go:nosplit
func (self VisualShaderNodeExpression) AsVisualShaderNodeGroupBase() [1]VisualShaderNodeGroupBase { return *(*[1]VisualShaderNodeGroupBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeExpression) AsVisualShaderNodeResizableBase() [1]VisualShaderNodeResizableBase { return *(*[1]VisualShaderNodeResizableBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeExpression) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeExpression) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeExpression) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeExpression) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeFaceForward struct {_ [0]*VisualShaderNodeFaceForward; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeFaceForward) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeFaceForward) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeFaceForward) Super() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFaceForward) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFaceForward) AsVisualShaderNodeFaceForward() [1]VisualShaderNodeFaceForward { return [1]VisualShaderNodeFaceForward{self} }


//go:nosplit
func (self VisualShaderNodeFaceForward) AsVisualShaderNodeVectorBase() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFaceForward) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFaceForward) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFaceForward) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeFaceForward) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeFloatConstant struct {_ [0]*VisualShaderNodeFloatConstant; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeFloatConstant) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeFloatConstant) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeFloatConstant) Super() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatConstant) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatConstant) AsVisualShaderNodeFloatConstant() [1]VisualShaderNodeFloatConstant { return [1]VisualShaderNodeFloatConstant{self} }


//go:nosplit
func (self VisualShaderNodeFloatConstant) AsVisualShaderNodeConstant() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatConstant) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatConstant) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatConstant) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeFloatConstant) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeFloatFuncFunction int64
type VisualShaderNodeFloatFunc struct {_ [0]*VisualShaderNodeFloatFunc; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeFloatFunc) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeFloatFunc) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeFloatFunc) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatFunc) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatFunc) AsVisualShaderNodeFloatFunc() [1]VisualShaderNodeFloatFunc { return [1]VisualShaderNodeFloatFunc{self} }


//go:nosplit
func (self VisualShaderNodeFloatFunc) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatFunc) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatFunc) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeFloatFunc) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeFloatOpOperator int64
type VisualShaderNodeFloatOp struct {_ [0]*VisualShaderNodeFloatOp; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeFloatOp) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeFloatOp) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeFloatOp) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatOp) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatOp) AsVisualShaderNodeFloatOp() [1]VisualShaderNodeFloatOp { return [1]VisualShaderNodeFloatOp{self} }


//go:nosplit
func (self VisualShaderNodeFloatOp) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatOp) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatOp) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeFloatOp) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeFloatParameterHint int64
type VisualShaderNodeFloatParameter struct {_ [0]*VisualShaderNodeFloatParameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeFloatParameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeFloatParameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeFloatParameter) Super() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatParameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatParameter) AsVisualShaderNodeFloatParameter() [1]VisualShaderNodeFloatParameter { return [1]VisualShaderNodeFloatParameter{self} }


//go:nosplit
func (self VisualShaderNodeFloatParameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatParameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatParameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFloatParameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeFloatParameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeFrame struct {_ [0]*VisualShaderNodeFrame; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeFrame) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeFrame) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeFrame) Super() [1]VisualShaderNodeResizableBase { return *(*[1]VisualShaderNodeResizableBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFrame) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFrame) AsVisualShaderNodeFrame() [1]VisualShaderNodeFrame { return [1]VisualShaderNodeFrame{self} }


//go:nosplit
func (self VisualShaderNodeFrame) AsVisualShaderNodeResizableBase() [1]VisualShaderNodeResizableBase { return *(*[1]VisualShaderNodeResizableBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFrame) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFrame) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFrame) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeFrame) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeFresnel struct {_ [0]*VisualShaderNodeFresnel; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeFresnel) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeFresnel) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeFresnel) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFresnel) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFresnel) AsVisualShaderNodeFresnel() [1]VisualShaderNodeFresnel { return [1]VisualShaderNodeFresnel{self} }


//go:nosplit
func (self VisualShaderNodeFresnel) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFresnel) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeFresnel) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeFresnel) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeGlobalExpression struct {_ [0]*VisualShaderNodeGlobalExpression; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeGlobalExpression) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeGlobalExpression) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeGlobalExpression) Super() [1]VisualShaderNodeExpression { return *(*[1]VisualShaderNodeExpression)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeGlobalExpression) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeGlobalExpression) AsVisualShaderNodeGlobalExpression() [1]VisualShaderNodeGlobalExpression { return [1]VisualShaderNodeGlobalExpression{self} }


//go:nosplit
func (self VisualShaderNodeGlobalExpression) AsVisualShaderNodeExpression() [1]VisualShaderNodeExpression { return *(*[1]VisualShaderNodeExpression)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeGlobalExpression) AsVisualShaderNodeGroupBase() [1]VisualShaderNodeGroupBase { return *(*[1]VisualShaderNodeGroupBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeGlobalExpression) AsVisualShaderNodeResizableBase() [1]VisualShaderNodeResizableBase { return *(*[1]VisualShaderNodeResizableBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeGlobalExpression) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeGlobalExpression) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeGlobalExpression) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeGlobalExpression) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeGroupBase struct {_ [0]*VisualShaderNodeGroupBase; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeGroupBase) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeGroupBase) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeGroupBase) Super() [1]VisualShaderNodeResizableBase { return *(*[1]VisualShaderNodeResizableBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeGroupBase) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeGroupBase) AsVisualShaderNodeGroupBase() [1]VisualShaderNodeGroupBase { return [1]VisualShaderNodeGroupBase{self} }


//go:nosplit
func (self VisualShaderNodeGroupBase) AsVisualShaderNodeResizableBase() [1]VisualShaderNodeResizableBase { return *(*[1]VisualShaderNodeResizableBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeGroupBase) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeGroupBase) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeGroupBase) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeGroupBase) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeIf struct {_ [0]*VisualShaderNodeIf; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeIf) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeIf) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeIf) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIf) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIf) AsVisualShaderNodeIf() [1]VisualShaderNodeIf { return [1]VisualShaderNodeIf{self} }


//go:nosplit
func (self VisualShaderNodeIf) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIf) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIf) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeIf) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeInput struct {_ [0]*VisualShaderNodeInput; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeInput) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeInput) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeInput) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeInput) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeInput) AsVisualShaderNodeInput() [1]VisualShaderNodeInput { return [1]VisualShaderNodeInput{self} }


//go:nosplit
func (self VisualShaderNodeInput) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeInput) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeInput) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeInput) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeIntConstant struct {_ [0]*VisualShaderNodeIntConstant; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeIntConstant) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeIntConstant) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeIntConstant) Super() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntConstant) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntConstant) AsVisualShaderNodeIntConstant() [1]VisualShaderNodeIntConstant { return [1]VisualShaderNodeIntConstant{self} }


//go:nosplit
func (self VisualShaderNodeIntConstant) AsVisualShaderNodeConstant() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntConstant) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntConstant) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntConstant) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeIntConstant) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeIntFuncFunction int64
type VisualShaderNodeIntFunc struct {_ [0]*VisualShaderNodeIntFunc; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeIntFunc) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeIntFunc) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeIntFunc) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntFunc) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntFunc) AsVisualShaderNodeIntFunc() [1]VisualShaderNodeIntFunc { return [1]VisualShaderNodeIntFunc{self} }


//go:nosplit
func (self VisualShaderNodeIntFunc) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntFunc) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntFunc) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeIntFunc) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeIntOpOperator int64
type VisualShaderNodeIntOp struct {_ [0]*VisualShaderNodeIntOp; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeIntOp) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeIntOp) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeIntOp) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntOp) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntOp) AsVisualShaderNodeIntOp() [1]VisualShaderNodeIntOp { return [1]VisualShaderNodeIntOp{self} }


//go:nosplit
func (self VisualShaderNodeIntOp) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntOp) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntOp) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeIntOp) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeIntParameterHint int64
type VisualShaderNodeIntParameter struct {_ [0]*VisualShaderNodeIntParameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeIntParameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeIntParameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeIntParameter) Super() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntParameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntParameter) AsVisualShaderNodeIntParameter() [1]VisualShaderNodeIntParameter { return [1]VisualShaderNodeIntParameter{self} }


//go:nosplit
func (self VisualShaderNodeIntParameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntParameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntParameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIntParameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeIntParameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeIsFunction int64
type VisualShaderNodeIs struct {_ [0]*VisualShaderNodeIs; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeIs) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeIs) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeIs) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIs) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIs) AsVisualShaderNodeIs() [1]VisualShaderNodeIs { return [1]VisualShaderNodeIs{self} }


//go:nosplit
func (self VisualShaderNodeIs) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIs) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeIs) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeIs) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeLinearSceneDepth struct {_ [0]*VisualShaderNodeLinearSceneDepth; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeLinearSceneDepth) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeLinearSceneDepth) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeLinearSceneDepth) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeLinearSceneDepth) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeLinearSceneDepth) AsVisualShaderNodeLinearSceneDepth() [1]VisualShaderNodeLinearSceneDepth { return [1]VisualShaderNodeLinearSceneDepth{self} }


//go:nosplit
func (self VisualShaderNodeLinearSceneDepth) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeLinearSceneDepth) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeLinearSceneDepth) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeLinearSceneDepth) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeMixOpType int64
type VisualShaderNodeMix struct {_ [0]*VisualShaderNodeMix; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeMix) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeMix) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeMix) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeMix) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeMix) AsVisualShaderNodeMix() [1]VisualShaderNodeMix { return [1]VisualShaderNodeMix{self} }


//go:nosplit
func (self VisualShaderNodeMix) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeMix) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeMix) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeMix) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeMultiplyAddOpType int64
type VisualShaderNodeMultiplyAdd struct {_ [0]*VisualShaderNodeMultiplyAdd; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeMultiplyAdd) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeMultiplyAdd) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeMultiplyAdd) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeMultiplyAdd) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeMultiplyAdd) AsVisualShaderNodeMultiplyAdd() [1]VisualShaderNodeMultiplyAdd { return [1]VisualShaderNodeMultiplyAdd{self} }


//go:nosplit
func (self VisualShaderNodeMultiplyAdd) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeMultiplyAdd) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeMultiplyAdd) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeMultiplyAdd) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeOuterProduct struct {_ [0]*VisualShaderNodeOuterProduct; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeOuterProduct) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeOuterProduct) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeOuterProduct) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeOuterProduct) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeOuterProduct) AsVisualShaderNodeOuterProduct() [1]VisualShaderNodeOuterProduct { return [1]VisualShaderNodeOuterProduct{self} }


//go:nosplit
func (self VisualShaderNodeOuterProduct) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeOuterProduct) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeOuterProduct) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeOuterProduct) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeOutput struct {_ [0]*VisualShaderNodeOutput; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeOutput) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeOutput) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeOutput) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeOutput) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeOutput) AsVisualShaderNodeOutput() [1]VisualShaderNodeOutput { return [1]VisualShaderNodeOutput{self} }


//go:nosplit
func (self VisualShaderNodeOutput) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeOutput) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeOutput) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeOutput) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeParameterQualifier int64
type VisualShaderNodeParameter struct {_ [0]*VisualShaderNodeParameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeParameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeParameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeParameter) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return [1]VisualShaderNodeParameter{self} }


//go:nosplit
func (self VisualShaderNodeParameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeParameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeParameterRef struct {_ [0]*VisualShaderNodeParameterRef; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeParameterRef) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeParameterRef) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeParameterRef) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParameterRef) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParameterRef) AsVisualShaderNodeParameterRef() [1]VisualShaderNodeParameterRef { return [1]VisualShaderNodeParameterRef{self} }


//go:nosplit
func (self VisualShaderNodeParameterRef) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParameterRef) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParameterRef) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeParameterRef) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeParticleAcceleratorMode int64
type VisualShaderNodeParticleAccelerator struct {_ [0]*VisualShaderNodeParticleAccelerator; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeParticleAccelerator) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeParticleAccelerator) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeParticleAccelerator) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleAccelerator) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleAccelerator) AsVisualShaderNodeParticleAccelerator() [1]VisualShaderNodeParticleAccelerator { return [1]VisualShaderNodeParticleAccelerator{self} }


//go:nosplit
func (self VisualShaderNodeParticleAccelerator) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleAccelerator) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleAccelerator) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeParticleAccelerator) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeParticleBoxEmitter struct {_ [0]*VisualShaderNodeParticleBoxEmitter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeParticleBoxEmitter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeParticleBoxEmitter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeParticleBoxEmitter) Super() [1]VisualShaderNodeParticleEmitter { return *(*[1]VisualShaderNodeParticleEmitter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleBoxEmitter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleBoxEmitter) AsVisualShaderNodeParticleBoxEmitter() [1]VisualShaderNodeParticleBoxEmitter { return [1]VisualShaderNodeParticleBoxEmitter{self} }


//go:nosplit
func (self VisualShaderNodeParticleBoxEmitter) AsVisualShaderNodeParticleEmitter() [1]VisualShaderNodeParticleEmitter { return *(*[1]VisualShaderNodeParticleEmitter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleBoxEmitter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleBoxEmitter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleBoxEmitter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeParticleBoxEmitter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeParticleConeVelocity struct {_ [0]*VisualShaderNodeParticleConeVelocity; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeParticleConeVelocity) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeParticleConeVelocity) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeParticleConeVelocity) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleConeVelocity) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleConeVelocity) AsVisualShaderNodeParticleConeVelocity() [1]VisualShaderNodeParticleConeVelocity { return [1]VisualShaderNodeParticleConeVelocity{self} }


//go:nosplit
func (self VisualShaderNodeParticleConeVelocity) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleConeVelocity) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleConeVelocity) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeParticleConeVelocity) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeParticleEmitEmitFlags int64
type VisualShaderNodeParticleEmit struct {_ [0]*VisualShaderNodeParticleEmit; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeParticleEmit) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeParticleEmit) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeParticleEmit) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleEmit) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleEmit) AsVisualShaderNodeParticleEmit() [1]VisualShaderNodeParticleEmit { return [1]VisualShaderNodeParticleEmit{self} }


//go:nosplit
func (self VisualShaderNodeParticleEmit) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleEmit) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleEmit) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeParticleEmit) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeParticleEmitter struct {_ [0]*VisualShaderNodeParticleEmitter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeParticleEmitter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeParticleEmitter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeParticleEmitter) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleEmitter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleEmitter) AsVisualShaderNodeParticleEmitter() [1]VisualShaderNodeParticleEmitter { return [1]VisualShaderNodeParticleEmitter{self} }


//go:nosplit
func (self VisualShaderNodeParticleEmitter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleEmitter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleEmitter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeParticleEmitter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeParticleMeshEmitter struct {_ [0]*VisualShaderNodeParticleMeshEmitter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeParticleMeshEmitter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeParticleMeshEmitter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeParticleMeshEmitter) Super() [1]VisualShaderNodeParticleEmitter { return *(*[1]VisualShaderNodeParticleEmitter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleMeshEmitter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleMeshEmitter) AsVisualShaderNodeParticleMeshEmitter() [1]VisualShaderNodeParticleMeshEmitter { return [1]VisualShaderNodeParticleMeshEmitter{self} }


//go:nosplit
func (self VisualShaderNodeParticleMeshEmitter) AsVisualShaderNodeParticleEmitter() [1]VisualShaderNodeParticleEmitter { return *(*[1]VisualShaderNodeParticleEmitter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleMeshEmitter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleMeshEmitter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleMeshEmitter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeParticleMeshEmitter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeParticleMultiplyByAxisAngle struct {_ [0]*VisualShaderNodeParticleMultiplyByAxisAngle; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeParticleMultiplyByAxisAngle) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeParticleMultiplyByAxisAngle) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeParticleMultiplyByAxisAngle) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleMultiplyByAxisAngle) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleMultiplyByAxisAngle) AsVisualShaderNodeParticleMultiplyByAxisAngle() [1]VisualShaderNodeParticleMultiplyByAxisAngle { return [1]VisualShaderNodeParticleMultiplyByAxisAngle{self} }


//go:nosplit
func (self VisualShaderNodeParticleMultiplyByAxisAngle) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleMultiplyByAxisAngle) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleMultiplyByAxisAngle) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeParticleMultiplyByAxisAngle) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeParticleOutput struct {_ [0]*VisualShaderNodeParticleOutput; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeParticleOutput) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeParticleOutput) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeParticleOutput) Super() [1]VisualShaderNodeOutput { return *(*[1]VisualShaderNodeOutput)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleOutput) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleOutput) AsVisualShaderNodeParticleOutput() [1]VisualShaderNodeParticleOutput { return [1]VisualShaderNodeParticleOutput{self} }


//go:nosplit
func (self VisualShaderNodeParticleOutput) AsVisualShaderNodeOutput() [1]VisualShaderNodeOutput { return *(*[1]VisualShaderNodeOutput)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleOutput) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleOutput) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleOutput) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeParticleOutput) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeParticleRandomnessOpType int64
type VisualShaderNodeParticleRandomness struct {_ [0]*VisualShaderNodeParticleRandomness; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeParticleRandomness) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeParticleRandomness) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeParticleRandomness) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleRandomness) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleRandomness) AsVisualShaderNodeParticleRandomness() [1]VisualShaderNodeParticleRandomness { return [1]VisualShaderNodeParticleRandomness{self} }


//go:nosplit
func (self VisualShaderNodeParticleRandomness) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleRandomness) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleRandomness) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeParticleRandomness) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeParticleRingEmitter struct {_ [0]*VisualShaderNodeParticleRingEmitter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeParticleRingEmitter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeParticleRingEmitter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeParticleRingEmitter) Super() [1]VisualShaderNodeParticleEmitter { return *(*[1]VisualShaderNodeParticleEmitter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleRingEmitter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleRingEmitter) AsVisualShaderNodeParticleRingEmitter() [1]VisualShaderNodeParticleRingEmitter { return [1]VisualShaderNodeParticleRingEmitter{self} }


//go:nosplit
func (self VisualShaderNodeParticleRingEmitter) AsVisualShaderNodeParticleEmitter() [1]VisualShaderNodeParticleEmitter { return *(*[1]VisualShaderNodeParticleEmitter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleRingEmitter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleRingEmitter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleRingEmitter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeParticleRingEmitter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeParticleSphereEmitter struct {_ [0]*VisualShaderNodeParticleSphereEmitter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeParticleSphereEmitter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeParticleSphereEmitter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeParticleSphereEmitter) Super() [1]VisualShaderNodeParticleEmitter { return *(*[1]VisualShaderNodeParticleEmitter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleSphereEmitter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleSphereEmitter) AsVisualShaderNodeParticleSphereEmitter() [1]VisualShaderNodeParticleSphereEmitter { return [1]VisualShaderNodeParticleSphereEmitter{self} }


//go:nosplit
func (self VisualShaderNodeParticleSphereEmitter) AsVisualShaderNodeParticleEmitter() [1]VisualShaderNodeParticleEmitter { return *(*[1]VisualShaderNodeParticleEmitter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleSphereEmitter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleSphereEmitter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeParticleSphereEmitter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeParticleSphereEmitter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeProximityFade struct {_ [0]*VisualShaderNodeProximityFade; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeProximityFade) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeProximityFade) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeProximityFade) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeProximityFade) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeProximityFade) AsVisualShaderNodeProximityFade() [1]VisualShaderNodeProximityFade { return [1]VisualShaderNodeProximityFade{self} }


//go:nosplit
func (self VisualShaderNodeProximityFade) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeProximityFade) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeProximityFade) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeProximityFade) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeRandomRange struct {_ [0]*VisualShaderNodeRandomRange; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeRandomRange) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeRandomRange) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeRandomRange) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeRandomRange) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeRandomRange) AsVisualShaderNodeRandomRange() [1]VisualShaderNodeRandomRange { return [1]VisualShaderNodeRandomRange{self} }


//go:nosplit
func (self VisualShaderNodeRandomRange) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeRandomRange) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeRandomRange) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeRandomRange) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeRemap struct {_ [0]*VisualShaderNodeRemap; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeRemap) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeRemap) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeRemap) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeRemap) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeRemap) AsVisualShaderNodeRemap() [1]VisualShaderNodeRemap { return [1]VisualShaderNodeRemap{self} }


//go:nosplit
func (self VisualShaderNodeRemap) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeRemap) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeRemap) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeRemap) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeReroute struct {_ [0]*VisualShaderNodeReroute; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeReroute) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeReroute) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeReroute) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeReroute) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeReroute) AsVisualShaderNodeReroute() [1]VisualShaderNodeReroute { return [1]VisualShaderNodeReroute{self} }


//go:nosplit
func (self VisualShaderNodeReroute) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeReroute) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeReroute) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeReroute) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeResizableBase struct {_ [0]*VisualShaderNodeResizableBase; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeResizableBase) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeResizableBase) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeResizableBase) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeResizableBase) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeResizableBase) AsVisualShaderNodeResizableBase() [1]VisualShaderNodeResizableBase { return [1]VisualShaderNodeResizableBase{self} }


//go:nosplit
func (self VisualShaderNodeResizableBase) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeResizableBase) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeResizableBase) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeResizableBase) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeRotationByAxis struct {_ [0]*VisualShaderNodeRotationByAxis; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeRotationByAxis) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeRotationByAxis) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeRotationByAxis) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeRotationByAxis) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeRotationByAxis) AsVisualShaderNodeRotationByAxis() [1]VisualShaderNodeRotationByAxis { return [1]VisualShaderNodeRotationByAxis{self} }


//go:nosplit
func (self VisualShaderNodeRotationByAxis) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeRotationByAxis) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeRotationByAxis) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeRotationByAxis) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeSDFRaymarch struct {_ [0]*VisualShaderNodeSDFRaymarch; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeSDFRaymarch) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeSDFRaymarch) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeSDFRaymarch) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSDFRaymarch) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSDFRaymarch) AsVisualShaderNodeSDFRaymarch() [1]VisualShaderNodeSDFRaymarch { return [1]VisualShaderNodeSDFRaymarch{self} }


//go:nosplit
func (self VisualShaderNodeSDFRaymarch) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSDFRaymarch) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSDFRaymarch) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeSDFRaymarch) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeSDFToScreenUV struct {_ [0]*VisualShaderNodeSDFToScreenUV; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeSDFToScreenUV) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeSDFToScreenUV) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeSDFToScreenUV) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSDFToScreenUV) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSDFToScreenUV) AsVisualShaderNodeSDFToScreenUV() [1]VisualShaderNodeSDFToScreenUV { return [1]VisualShaderNodeSDFToScreenUV{self} }


//go:nosplit
func (self VisualShaderNodeSDFToScreenUV) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSDFToScreenUV) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSDFToScreenUV) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeSDFToScreenUV) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeSample3DSource int64
type VisualShaderNodeSample3D struct {_ [0]*VisualShaderNodeSample3D; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeSample3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeSample3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeSample3D) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSample3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSample3D) AsVisualShaderNodeSample3D() [1]VisualShaderNodeSample3D { return [1]VisualShaderNodeSample3D{self} }


//go:nosplit
func (self VisualShaderNodeSample3D) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSample3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSample3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeSample3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeScreenNormalWorldSpace struct {_ [0]*VisualShaderNodeScreenNormalWorldSpace; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeScreenNormalWorldSpace) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeScreenNormalWorldSpace) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeScreenNormalWorldSpace) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeScreenNormalWorldSpace) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeScreenNormalWorldSpace) AsVisualShaderNodeScreenNormalWorldSpace() [1]VisualShaderNodeScreenNormalWorldSpace { return [1]VisualShaderNodeScreenNormalWorldSpace{self} }


//go:nosplit
func (self VisualShaderNodeScreenNormalWorldSpace) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeScreenNormalWorldSpace) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeScreenNormalWorldSpace) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeScreenNormalWorldSpace) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeScreenUVToSDF struct {_ [0]*VisualShaderNodeScreenUVToSDF; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeScreenUVToSDF) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeScreenUVToSDF) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeScreenUVToSDF) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeScreenUVToSDF) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeScreenUVToSDF) AsVisualShaderNodeScreenUVToSDF() [1]VisualShaderNodeScreenUVToSDF { return [1]VisualShaderNodeScreenUVToSDF{self} }


//go:nosplit
func (self VisualShaderNodeScreenUVToSDF) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeScreenUVToSDF) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeScreenUVToSDF) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeScreenUVToSDF) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeSmoothStepOpType int64
type VisualShaderNodeSmoothStep struct {_ [0]*VisualShaderNodeSmoothStep; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeSmoothStep) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeSmoothStep) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeSmoothStep) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSmoothStep) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSmoothStep) AsVisualShaderNodeSmoothStep() [1]VisualShaderNodeSmoothStep { return [1]VisualShaderNodeSmoothStep{self} }


//go:nosplit
func (self VisualShaderNodeSmoothStep) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSmoothStep) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSmoothStep) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeSmoothStep) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeStepOpType int64
type VisualShaderNodeStep struct {_ [0]*VisualShaderNodeStep; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeStep) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeStep) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeStep) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeStep) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeStep) AsVisualShaderNodeStep() [1]VisualShaderNodeStep { return [1]VisualShaderNodeStep{self} }


//go:nosplit
func (self VisualShaderNodeStep) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeStep) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeStep) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeStep) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeSwitchOpType int64
type VisualShaderNodeSwitch struct {_ [0]*VisualShaderNodeSwitch; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeSwitch) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeSwitch) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeSwitch) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSwitch) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSwitch) AsVisualShaderNodeSwitch() [1]VisualShaderNodeSwitch { return [1]VisualShaderNodeSwitch{self} }


//go:nosplit
func (self VisualShaderNodeSwitch) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSwitch) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeSwitch) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeSwitch) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeTextureSource int64

type VisualShaderNodeTextureTextureType int64
type VisualShaderNodeTexture struct {_ [0]*VisualShaderNodeTexture; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTexture) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTexture) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTexture) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture) AsVisualShaderNodeTexture() [1]VisualShaderNodeTexture { return [1]VisualShaderNodeTexture{self} }


//go:nosplit
func (self VisualShaderNodeTexture) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTexture) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeTexture2DArray struct {_ [0]*VisualShaderNodeTexture2DArray; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTexture2DArray) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTexture2DArray) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTexture2DArray) Super() [1]VisualShaderNodeSample3D { return *(*[1]VisualShaderNodeSample3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DArray) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DArray) AsVisualShaderNodeTexture2DArray() [1]VisualShaderNodeTexture2DArray { return [1]VisualShaderNodeTexture2DArray{self} }


//go:nosplit
func (self VisualShaderNodeTexture2DArray) AsVisualShaderNodeSample3D() [1]VisualShaderNodeSample3D { return *(*[1]VisualShaderNodeSample3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DArray) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DArray) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DArray) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTexture2DArray) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeTexture2DArrayParameter struct {_ [0]*VisualShaderNodeTexture2DArrayParameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTexture2DArrayParameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTexture2DArrayParameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTexture2DArrayParameter) Super() [1]VisualShaderNodeTextureParameter { return *(*[1]VisualShaderNodeTextureParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DArrayParameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DArrayParameter) AsVisualShaderNodeTexture2DArrayParameter() [1]VisualShaderNodeTexture2DArrayParameter { return [1]VisualShaderNodeTexture2DArrayParameter{self} }


//go:nosplit
func (self VisualShaderNodeTexture2DArrayParameter) AsVisualShaderNodeTextureParameter() [1]VisualShaderNodeTextureParameter { return *(*[1]VisualShaderNodeTextureParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DArrayParameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DArrayParameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DArrayParameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DArrayParameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTexture2DArrayParameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeTexture2DParameter struct {_ [0]*VisualShaderNodeTexture2DParameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTexture2DParameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTexture2DParameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTexture2DParameter) Super() [1]VisualShaderNodeTextureParameter { return *(*[1]VisualShaderNodeTextureParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DParameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DParameter) AsVisualShaderNodeTexture2DParameter() [1]VisualShaderNodeTexture2DParameter { return [1]VisualShaderNodeTexture2DParameter{self} }


//go:nosplit
func (self VisualShaderNodeTexture2DParameter) AsVisualShaderNodeTextureParameter() [1]VisualShaderNodeTextureParameter { return *(*[1]VisualShaderNodeTextureParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DParameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DParameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DParameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture2DParameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTexture2DParameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeTexture3D struct {_ [0]*VisualShaderNodeTexture3D; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTexture3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTexture3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTexture3D) Super() [1]VisualShaderNodeSample3D { return *(*[1]VisualShaderNodeSample3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture3D) AsVisualShaderNodeTexture3D() [1]VisualShaderNodeTexture3D { return [1]VisualShaderNodeTexture3D{self} }


//go:nosplit
func (self VisualShaderNodeTexture3D) AsVisualShaderNodeSample3D() [1]VisualShaderNodeSample3D { return *(*[1]VisualShaderNodeSample3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture3D) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTexture3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeTexture3DParameter struct {_ [0]*VisualShaderNodeTexture3DParameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTexture3DParameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTexture3DParameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTexture3DParameter) Super() [1]VisualShaderNodeTextureParameter { return *(*[1]VisualShaderNodeTextureParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture3DParameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture3DParameter) AsVisualShaderNodeTexture3DParameter() [1]VisualShaderNodeTexture3DParameter { return [1]VisualShaderNodeTexture3DParameter{self} }


//go:nosplit
func (self VisualShaderNodeTexture3DParameter) AsVisualShaderNodeTextureParameter() [1]VisualShaderNodeTextureParameter { return *(*[1]VisualShaderNodeTextureParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture3DParameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture3DParameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture3DParameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTexture3DParameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTexture3DParameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeTextureParameterTextureType int64

type VisualShaderNodeTextureParameterColorDefault int64

type VisualShaderNodeTextureParameterTextureFilter int64

type VisualShaderNodeTextureParameterTextureRepeat int64

type VisualShaderNodeTextureParameterTextureSource int64
type VisualShaderNodeTextureParameter struct {_ [0]*VisualShaderNodeTextureParameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTextureParameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTextureParameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTextureParameter) Super() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureParameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureParameter) AsVisualShaderNodeTextureParameter() [1]VisualShaderNodeTextureParameter { return [1]VisualShaderNodeTextureParameter{self} }


//go:nosplit
func (self VisualShaderNodeTextureParameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureParameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureParameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureParameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTextureParameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeTextureParameterTriplanar struct {_ [0]*VisualShaderNodeTextureParameterTriplanar; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTextureParameterTriplanar) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTextureParameterTriplanar) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTextureParameterTriplanar) Super() [1]VisualShaderNodeTextureParameter { return *(*[1]VisualShaderNodeTextureParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureParameterTriplanar) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureParameterTriplanar) AsVisualShaderNodeTextureParameterTriplanar() [1]VisualShaderNodeTextureParameterTriplanar { return [1]VisualShaderNodeTextureParameterTriplanar{self} }


//go:nosplit
func (self VisualShaderNodeTextureParameterTriplanar) AsVisualShaderNodeTextureParameter() [1]VisualShaderNodeTextureParameter { return *(*[1]VisualShaderNodeTextureParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureParameterTriplanar) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureParameterTriplanar) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureParameterTriplanar) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureParameterTriplanar) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTextureParameterTriplanar) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeTextureSDF struct {_ [0]*VisualShaderNodeTextureSDF; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTextureSDF) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTextureSDF) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTextureSDF) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureSDF) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureSDF) AsVisualShaderNodeTextureSDF() [1]VisualShaderNodeTextureSDF { return [1]VisualShaderNodeTextureSDF{self} }


//go:nosplit
func (self VisualShaderNodeTextureSDF) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureSDF) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureSDF) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTextureSDF) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeTextureSDFNormal struct {_ [0]*VisualShaderNodeTextureSDFNormal; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTextureSDFNormal) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTextureSDFNormal) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTextureSDFNormal) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureSDFNormal) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureSDFNormal) AsVisualShaderNodeTextureSDFNormal() [1]VisualShaderNodeTextureSDFNormal { return [1]VisualShaderNodeTextureSDFNormal{self} }


//go:nosplit
func (self VisualShaderNodeTextureSDFNormal) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureSDFNormal) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTextureSDFNormal) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTextureSDFNormal) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeTransformCompose struct {_ [0]*VisualShaderNodeTransformCompose; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTransformCompose) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTransformCompose) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTransformCompose) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformCompose) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformCompose) AsVisualShaderNodeTransformCompose() [1]VisualShaderNodeTransformCompose { return [1]VisualShaderNodeTransformCompose{self} }


//go:nosplit
func (self VisualShaderNodeTransformCompose) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformCompose) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformCompose) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTransformCompose) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeTransformConstant struct {_ [0]*VisualShaderNodeTransformConstant; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTransformConstant) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTransformConstant) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTransformConstant) Super() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformConstant) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformConstant) AsVisualShaderNodeTransformConstant() [1]VisualShaderNodeTransformConstant { return [1]VisualShaderNodeTransformConstant{self} }


//go:nosplit
func (self VisualShaderNodeTransformConstant) AsVisualShaderNodeConstant() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformConstant) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformConstant) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformConstant) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTransformConstant) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeTransformDecompose struct {_ [0]*VisualShaderNodeTransformDecompose; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTransformDecompose) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTransformDecompose) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTransformDecompose) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformDecompose) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformDecompose) AsVisualShaderNodeTransformDecompose() [1]VisualShaderNodeTransformDecompose { return [1]VisualShaderNodeTransformDecompose{self} }


//go:nosplit
func (self VisualShaderNodeTransformDecompose) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformDecompose) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformDecompose) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTransformDecompose) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeTransformFuncFunction int64
type VisualShaderNodeTransformFunc struct {_ [0]*VisualShaderNodeTransformFunc; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTransformFunc) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTransformFunc) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTransformFunc) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformFunc) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformFunc) AsVisualShaderNodeTransformFunc() [1]VisualShaderNodeTransformFunc { return [1]VisualShaderNodeTransformFunc{self} }


//go:nosplit
func (self VisualShaderNodeTransformFunc) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformFunc) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformFunc) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTransformFunc) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeTransformOpOperator int64
type VisualShaderNodeTransformOp struct {_ [0]*VisualShaderNodeTransformOp; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTransformOp) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTransformOp) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTransformOp) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformOp) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformOp) AsVisualShaderNodeTransformOp() [1]VisualShaderNodeTransformOp { return [1]VisualShaderNodeTransformOp{self} }


//go:nosplit
func (self VisualShaderNodeTransformOp) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformOp) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformOp) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTransformOp) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeTransformParameter struct {_ [0]*VisualShaderNodeTransformParameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTransformParameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTransformParameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTransformParameter) Super() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformParameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformParameter) AsVisualShaderNodeTransformParameter() [1]VisualShaderNodeTransformParameter { return [1]VisualShaderNodeTransformParameter{self} }


//go:nosplit
func (self VisualShaderNodeTransformParameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformParameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformParameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformParameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTransformParameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeTransformVecMultOperator int64
type VisualShaderNodeTransformVecMult struct {_ [0]*VisualShaderNodeTransformVecMult; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeTransformVecMult) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeTransformVecMult) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeTransformVecMult) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformVecMult) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformVecMult) AsVisualShaderNodeTransformVecMult() [1]VisualShaderNodeTransformVecMult { return [1]VisualShaderNodeTransformVecMult{self} }


//go:nosplit
func (self VisualShaderNodeTransformVecMult) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformVecMult) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeTransformVecMult) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeTransformVecMult) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeUIntConstant struct {_ [0]*VisualShaderNodeUIntConstant; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeUIntConstant) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeUIntConstant) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeUIntConstant) Super() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntConstant) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntConstant) AsVisualShaderNodeUIntConstant() [1]VisualShaderNodeUIntConstant { return [1]VisualShaderNodeUIntConstant{self} }


//go:nosplit
func (self VisualShaderNodeUIntConstant) AsVisualShaderNodeConstant() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntConstant) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntConstant) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntConstant) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeUIntConstant) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeUIntFuncFunction int64
type VisualShaderNodeUIntFunc struct {_ [0]*VisualShaderNodeUIntFunc; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeUIntFunc) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeUIntFunc) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeUIntFunc) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntFunc) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntFunc) AsVisualShaderNodeUIntFunc() [1]VisualShaderNodeUIntFunc { return [1]VisualShaderNodeUIntFunc{self} }


//go:nosplit
func (self VisualShaderNodeUIntFunc) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntFunc) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntFunc) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeUIntFunc) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeUIntOpOperator int64
type VisualShaderNodeUIntOp struct {_ [0]*VisualShaderNodeUIntOp; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeUIntOp) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeUIntOp) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeUIntOp) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntOp) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntOp) AsVisualShaderNodeUIntOp() [1]VisualShaderNodeUIntOp { return [1]VisualShaderNodeUIntOp{self} }


//go:nosplit
func (self VisualShaderNodeUIntOp) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntOp) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntOp) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeUIntOp) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeUIntParameter struct {_ [0]*VisualShaderNodeUIntParameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeUIntParameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeUIntParameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeUIntParameter) Super() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntParameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntParameter) AsVisualShaderNodeUIntParameter() [1]VisualShaderNodeUIntParameter { return [1]VisualShaderNodeUIntParameter{self} }


//go:nosplit
func (self VisualShaderNodeUIntParameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntParameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntParameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUIntParameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeUIntParameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeUVFuncFunction int64
type VisualShaderNodeUVFunc struct {_ [0]*VisualShaderNodeUVFunc; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeUVFunc) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeUVFunc) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeUVFunc) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUVFunc) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUVFunc) AsVisualShaderNodeUVFunc() [1]VisualShaderNodeUVFunc { return [1]VisualShaderNodeUVFunc{self} }


//go:nosplit
func (self VisualShaderNodeUVFunc) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUVFunc) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUVFunc) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeUVFunc) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeUVPolarCoord struct {_ [0]*VisualShaderNodeUVPolarCoord; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeUVPolarCoord) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeUVPolarCoord) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeUVPolarCoord) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUVPolarCoord) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUVPolarCoord) AsVisualShaderNodeUVPolarCoord() [1]VisualShaderNodeUVPolarCoord { return [1]VisualShaderNodeUVPolarCoord{self} }


//go:nosplit
func (self VisualShaderNodeUVPolarCoord) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUVPolarCoord) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeUVPolarCoord) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeUVPolarCoord) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeVarying struct {_ [0]*VisualShaderNodeVarying; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVarying) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVarying) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVarying) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVarying) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVarying) AsVisualShaderNodeVarying() [1]VisualShaderNodeVarying { return [1]VisualShaderNodeVarying{self} }


//go:nosplit
func (self VisualShaderNodeVarying) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVarying) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVarying) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVarying) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeVaryingGetter struct {_ [0]*VisualShaderNodeVaryingGetter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVaryingGetter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVaryingGetter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVaryingGetter) Super() [1]VisualShaderNodeVarying { return *(*[1]VisualShaderNodeVarying)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVaryingGetter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVaryingGetter) AsVisualShaderNodeVaryingGetter() [1]VisualShaderNodeVaryingGetter { return [1]VisualShaderNodeVaryingGetter{self} }


//go:nosplit
func (self VisualShaderNodeVaryingGetter) AsVisualShaderNodeVarying() [1]VisualShaderNodeVarying { return *(*[1]VisualShaderNodeVarying)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVaryingGetter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVaryingGetter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVaryingGetter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVaryingGetter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeVaryingSetter struct {_ [0]*VisualShaderNodeVaryingSetter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVaryingSetter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVaryingSetter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVaryingSetter) Super() [1]VisualShaderNodeVarying { return *(*[1]VisualShaderNodeVarying)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVaryingSetter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVaryingSetter) AsVisualShaderNodeVaryingSetter() [1]VisualShaderNodeVaryingSetter { return [1]VisualShaderNodeVaryingSetter{self} }


//go:nosplit
func (self VisualShaderNodeVaryingSetter) AsVisualShaderNodeVarying() [1]VisualShaderNodeVarying { return *(*[1]VisualShaderNodeVarying)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVaryingSetter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVaryingSetter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVaryingSetter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVaryingSetter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeVec2Constant struct {_ [0]*VisualShaderNodeVec2Constant; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVec2Constant) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVec2Constant) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVec2Constant) Super() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec2Constant) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec2Constant) AsVisualShaderNodeVec2Constant() [1]VisualShaderNodeVec2Constant { return [1]VisualShaderNodeVec2Constant{self} }


//go:nosplit
func (self VisualShaderNodeVec2Constant) AsVisualShaderNodeConstant() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec2Constant) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec2Constant) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec2Constant) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVec2Constant) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeVec2Parameter struct {_ [0]*VisualShaderNodeVec2Parameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVec2Parameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVec2Parameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVec2Parameter) Super() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec2Parameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec2Parameter) AsVisualShaderNodeVec2Parameter() [1]VisualShaderNodeVec2Parameter { return [1]VisualShaderNodeVec2Parameter{self} }


//go:nosplit
func (self VisualShaderNodeVec2Parameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec2Parameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec2Parameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec2Parameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVec2Parameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeVec3Constant struct {_ [0]*VisualShaderNodeVec3Constant; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVec3Constant) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVec3Constant) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVec3Constant) Super() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec3Constant) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec3Constant) AsVisualShaderNodeVec3Constant() [1]VisualShaderNodeVec3Constant { return [1]VisualShaderNodeVec3Constant{self} }


//go:nosplit
func (self VisualShaderNodeVec3Constant) AsVisualShaderNodeConstant() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec3Constant) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec3Constant) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec3Constant) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVec3Constant) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeVec3Parameter struct {_ [0]*VisualShaderNodeVec3Parameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVec3Parameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVec3Parameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVec3Parameter) Super() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec3Parameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec3Parameter) AsVisualShaderNodeVec3Parameter() [1]VisualShaderNodeVec3Parameter { return [1]VisualShaderNodeVec3Parameter{self} }


//go:nosplit
func (self VisualShaderNodeVec3Parameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec3Parameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec3Parameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec3Parameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVec3Parameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeVec4Constant struct {_ [0]*VisualShaderNodeVec4Constant; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVec4Constant) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVec4Constant) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVec4Constant) Super() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec4Constant) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec4Constant) AsVisualShaderNodeVec4Constant() [1]VisualShaderNodeVec4Constant { return [1]VisualShaderNodeVec4Constant{self} }


//go:nosplit
func (self VisualShaderNodeVec4Constant) AsVisualShaderNodeConstant() [1]VisualShaderNodeConstant { return *(*[1]VisualShaderNodeConstant)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec4Constant) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec4Constant) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec4Constant) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVec4Constant) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeVec4Parameter struct {_ [0]*VisualShaderNodeVec4Parameter; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVec4Parameter) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVec4Parameter) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVec4Parameter) Super() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec4Parameter) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec4Parameter) AsVisualShaderNodeVec4Parameter() [1]VisualShaderNodeVec4Parameter { return [1]VisualShaderNodeVec4Parameter{self} }


//go:nosplit
func (self VisualShaderNodeVec4Parameter) AsVisualShaderNodeParameter() [1]VisualShaderNodeParameter { return *(*[1]VisualShaderNodeParameter)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec4Parameter) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec4Parameter) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVec4Parameter) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVec4Parameter) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeVectorBaseOpType int64
type VisualShaderNodeVectorBase struct {_ [0]*VisualShaderNodeVectorBase; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVectorBase) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVectorBase) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVectorBase) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorBase) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorBase) AsVisualShaderNodeVectorBase() [1]VisualShaderNodeVectorBase { return [1]VisualShaderNodeVectorBase{self} }


//go:nosplit
func (self VisualShaderNodeVectorBase) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorBase) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorBase) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVectorBase) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeVectorCompose struct {_ [0]*VisualShaderNodeVectorCompose; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVectorCompose) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVectorCompose) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVectorCompose) Super() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorCompose) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorCompose) AsVisualShaderNodeVectorCompose() [1]VisualShaderNodeVectorCompose { return [1]VisualShaderNodeVectorCompose{self} }


//go:nosplit
func (self VisualShaderNodeVectorCompose) AsVisualShaderNodeVectorBase() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorCompose) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorCompose) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorCompose) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVectorCompose) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeVectorDecompose struct {_ [0]*VisualShaderNodeVectorDecompose; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVectorDecompose) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVectorDecompose) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVectorDecompose) Super() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorDecompose) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorDecompose) AsVisualShaderNodeVectorDecompose() [1]VisualShaderNodeVectorDecompose { return [1]VisualShaderNodeVectorDecompose{self} }


//go:nosplit
func (self VisualShaderNodeVectorDecompose) AsVisualShaderNodeVectorBase() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorDecompose) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorDecompose) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorDecompose) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVectorDecompose) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeVectorDistance struct {_ [0]*VisualShaderNodeVectorDistance; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVectorDistance) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVectorDistance) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVectorDistance) Super() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorDistance) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorDistance) AsVisualShaderNodeVectorDistance() [1]VisualShaderNodeVectorDistance { return [1]VisualShaderNodeVectorDistance{self} }


//go:nosplit
func (self VisualShaderNodeVectorDistance) AsVisualShaderNodeVectorBase() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorDistance) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorDistance) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorDistance) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVectorDistance) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeVectorFuncFunction int64
type VisualShaderNodeVectorFunc struct {_ [0]*VisualShaderNodeVectorFunc; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVectorFunc) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVectorFunc) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVectorFunc) Super() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorFunc) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorFunc) AsVisualShaderNodeVectorFunc() [1]VisualShaderNodeVectorFunc { return [1]VisualShaderNodeVectorFunc{self} }


//go:nosplit
func (self VisualShaderNodeVectorFunc) AsVisualShaderNodeVectorBase() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorFunc) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorFunc) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorFunc) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVectorFunc) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeVectorLen struct {_ [0]*VisualShaderNodeVectorLen; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVectorLen) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVectorLen) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVectorLen) Super() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorLen) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorLen) AsVisualShaderNodeVectorLen() [1]VisualShaderNodeVectorLen { return [1]VisualShaderNodeVectorLen{self} }


//go:nosplit
func (self VisualShaderNodeVectorLen) AsVisualShaderNodeVectorBase() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorLen) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorLen) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorLen) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVectorLen) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VisualShaderNodeVectorOpOperator int64
type VisualShaderNodeVectorOp struct {_ [0]*VisualShaderNodeVectorOp; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVectorOp) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVectorOp) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVectorOp) Super() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorOp) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorOp) AsVisualShaderNodeVectorOp() [1]VisualShaderNodeVectorOp { return [1]VisualShaderNodeVectorOp{self} }


//go:nosplit
func (self VisualShaderNodeVectorOp) AsVisualShaderNodeVectorBase() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorOp) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorOp) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorOp) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVectorOp) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeVectorRefract struct {_ [0]*VisualShaderNodeVectorRefract; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeVectorRefract) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeVectorRefract) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeVectorRefract) Super() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorRefract) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorRefract) AsVisualShaderNodeVectorRefract() [1]VisualShaderNodeVectorRefract { return [1]VisualShaderNodeVectorRefract{self} }


//go:nosplit
func (self VisualShaderNodeVectorRefract) AsVisualShaderNodeVectorBase() [1]VisualShaderNodeVectorBase { return *(*[1]VisualShaderNodeVectorBase)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorRefract) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorRefract) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeVectorRefract) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeVectorRefract) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VisualShaderNodeWorldPositionFromDepth struct {_ [0]*VisualShaderNodeWorldPositionFromDepth; ptr gd.Pointer}

//go:nosplit
func (self VisualShaderNodeWorldPositionFromDepth) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VisualShaderNodeWorldPositionFromDepth) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VisualShaderNodeWorldPositionFromDepth) Super() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeWorldPositionFromDepth) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeWorldPositionFromDepth) AsVisualShaderNodeWorldPositionFromDepth() [1]VisualShaderNodeWorldPositionFromDepth { return [1]VisualShaderNodeWorldPositionFromDepth{self} }


//go:nosplit
func (self VisualShaderNodeWorldPositionFromDepth) AsVisualShaderNode() [1]VisualShaderNode { return *(*[1]VisualShaderNode)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeWorldPositionFromDepth) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VisualShaderNodeWorldPositionFromDepth) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VisualShaderNodeWorldPositionFromDepth) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type VoxelGISubdiv int64
type VoxelGI struct {_ [0]*VoxelGI; ptr gd.Pointer}

//go:nosplit
func (self VoxelGI) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VoxelGI) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VoxelGI) Super() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VoxelGI) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VoxelGI) AsVoxelGI() [1]VoxelGI { return [1]VoxelGI{self} }


//go:nosplit
func (self VoxelGI) AsVisualInstance3D() [1]VisualInstance3D { return *(*[1]VisualInstance3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VoxelGI) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VoxelGI) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self VoxelGI) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type VoxelGIData struct {_ [0]*VoxelGIData; ptr gd.Pointer}

//go:nosplit
func (self VoxelGIData) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *VoxelGIData) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self VoxelGIData) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VoxelGIData) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VoxelGIData) AsVoxelGIData() [1]VoxelGIData { return [1]VoxelGIData{self} }


//go:nosplit
func (self VoxelGIData) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self VoxelGIData) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self VoxelGIData) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type WeakRef struct {_ [0]*WeakRef; ptr gd.Pointer}

//go:nosplit
func (self WeakRef) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *WeakRef) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self WeakRef) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WeakRef) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WeakRef) AsWeakRef() [1]WeakRef { return [1]WeakRef{self} }


//go:nosplit
func (self WeakRef) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self WeakRef) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type WebRTCDataChannelWriteMode int64

type WebRTCDataChannelChannelState int64
type WebRTCDataChannel struct {_ [0]*WebRTCDataChannel; ptr gd.Pointer}

//go:nosplit
func (self WebRTCDataChannel) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *WebRTCDataChannel) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self WebRTCDataChannel) Super() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCDataChannel) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCDataChannel) AsWebRTCDataChannel() [1]WebRTCDataChannel { return [1]WebRTCDataChannel{self} }


//go:nosplit
func (self WebRTCDataChannel) AsPacketPeer() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCDataChannel) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self WebRTCDataChannel) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type WebRTCDataChannelExtension struct {_ [0]*WebRTCDataChannelExtension; ptr gd.Pointer}

//go:nosplit
func (self WebRTCDataChannelExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *WebRTCDataChannelExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self WebRTCDataChannelExtension) Super() [1]WebRTCDataChannel { return *(*[1]WebRTCDataChannel)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCDataChannelExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCDataChannelExtension) AsWebRTCDataChannelExtension() [1]WebRTCDataChannelExtension { return [1]WebRTCDataChannelExtension{self} }


//go:nosplit
func (self WebRTCDataChannelExtension) AsWebRTCDataChannel() [1]WebRTCDataChannel { return *(*[1]WebRTCDataChannel)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCDataChannelExtension) AsPacketPeer() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCDataChannelExtension) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (WebRTCDataChannelExtension) _get_packet(impl func(ptr unsafe.Pointer, r_buffer unsafe.Pointer, r_buffer_size *int32) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var r_buffer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		var r_buffer_size = gd.UnsafeGet[*int32](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, r_buffer, r_buffer_size)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _put_packet(impl func(ptr unsafe.Pointer, p_buffer unsafe.Pointer, p_buffer_size gd.Int) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_buffer = gd.UnsafeGet[unsafe.Pointer](p_args,0)
		var p_buffer_size = gd.UnsafeGet[gd.Int](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, p_buffer, p_buffer_size)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _get_available_packet_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _get_max_packet_size(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _poll(impl func(ptr unsafe.Pointer) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _close(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _set_write_mode(impl func(ptr unsafe.Pointer, p_write_mode WebRTCDataChannelWriteMode) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_write_mode = gd.UnsafeGet[WebRTCDataChannelWriteMode](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, p_write_mode)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _get_write_mode(impl func(ptr unsafe.Pointer) WebRTCDataChannelWriteMode, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _was_string_packet(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _get_ready_state(impl func(ptr unsafe.Pointer) WebRTCDataChannelChannelState, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _get_label(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _is_ordered(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _get_id(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _get_max_packet_life_time(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _get_max_retransmits(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _get_protocol(impl func(ptr unsafe.Pointer) gd.String, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _is_negotiated(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCDataChannelExtension) _get_buffered_amount(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self WebRTCDataChannelExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_get_packet": return reflect.ValueOf(self._get_packet);
	case "_put_packet": return reflect.ValueOf(self._put_packet);
	case "_get_available_packet_count": return reflect.ValueOf(self._get_available_packet_count);
	case "_get_max_packet_size": return reflect.ValueOf(self._get_max_packet_size);
	case "_poll": return reflect.ValueOf(self._poll);
	case "_close": return reflect.ValueOf(self._close);
	case "_set_write_mode": return reflect.ValueOf(self._set_write_mode);
	case "_get_write_mode": return reflect.ValueOf(self._get_write_mode);
	case "_was_string_packet": return reflect.ValueOf(self._was_string_packet);
	case "_get_ready_state": return reflect.ValueOf(self._get_ready_state);
	case "_get_label": return reflect.ValueOf(self._get_label);
	case "_is_ordered": return reflect.ValueOf(self._is_ordered);
	case "_get_id": return reflect.ValueOf(self._get_id);
	case "_get_max_packet_life_time": return reflect.ValueOf(self._get_max_packet_life_time);
	case "_get_max_retransmits": return reflect.ValueOf(self._get_max_retransmits);
	case "_get_protocol": return reflect.ValueOf(self._get_protocol);
	case "_is_negotiated": return reflect.ValueOf(self._is_negotiated);
	case "_get_buffered_amount": return reflect.ValueOf(self._get_buffered_amount);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type WebRTCMultiplayerPeer struct {_ [0]*WebRTCMultiplayerPeer; ptr gd.Pointer}

//go:nosplit
func (self WebRTCMultiplayerPeer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *WebRTCMultiplayerPeer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self WebRTCMultiplayerPeer) Super() [1]MultiplayerPeer { return *(*[1]MultiplayerPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCMultiplayerPeer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCMultiplayerPeer) AsWebRTCMultiplayerPeer() [1]WebRTCMultiplayerPeer { return [1]WebRTCMultiplayerPeer{self} }


//go:nosplit
func (self WebRTCMultiplayerPeer) AsMultiplayerPeer() [1]MultiplayerPeer { return *(*[1]MultiplayerPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCMultiplayerPeer) AsPacketPeer() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCMultiplayerPeer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self WebRTCMultiplayerPeer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type WebRTCPeerConnectionConnectionState int64

type WebRTCPeerConnectionGatheringState int64

type WebRTCPeerConnectionSignalingState int64
type WebRTCPeerConnection struct {_ [0]*WebRTCPeerConnection; ptr gd.Pointer}

//go:nosplit
func (self WebRTCPeerConnection) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *WebRTCPeerConnection) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self WebRTCPeerConnection) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCPeerConnection) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCPeerConnection) AsWebRTCPeerConnection() [1]WebRTCPeerConnection { return [1]WebRTCPeerConnection{self} }


//go:nosplit
func (self WebRTCPeerConnection) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self WebRTCPeerConnection) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type WebRTCPeerConnectionExtension struct {_ [0]*WebRTCPeerConnectionExtension; ptr gd.Pointer}

//go:nosplit
func (self WebRTCPeerConnectionExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *WebRTCPeerConnectionExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self WebRTCPeerConnectionExtension) Super() [1]WebRTCPeerConnection { return *(*[1]WebRTCPeerConnection)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCPeerConnectionExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCPeerConnectionExtension) AsWebRTCPeerConnectionExtension() [1]WebRTCPeerConnectionExtension { return [1]WebRTCPeerConnectionExtension{self} }


//go:nosplit
func (self WebRTCPeerConnectionExtension) AsWebRTCPeerConnection() [1]WebRTCPeerConnection { return *(*[1]WebRTCPeerConnection)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebRTCPeerConnectionExtension) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (WebRTCPeerConnectionExtension) _get_connection_state(impl func(ptr unsafe.Pointer) WebRTCPeerConnectionConnectionState, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCPeerConnectionExtension) _get_gathering_state(impl func(ptr unsafe.Pointer) WebRTCPeerConnectionGatheringState, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCPeerConnectionExtension) _get_signaling_state(impl func(ptr unsafe.Pointer) WebRTCPeerConnectionSignalingState, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCPeerConnectionExtension) _initialize(impl func(ptr unsafe.Pointer, p_config gd.Dictionary) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_config = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, p_config)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCPeerConnectionExtension) _create_data_channel(impl func(ptr unsafe.Pointer, p_label gd.String, p_config gd.Dictionary) WebRTCDataChannel, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_label = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var p_config = mmm.Let[gd.Dictionary](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, p_label, p_config)
		gd.UnsafeSet(p_back, mmm.End(ret.AsPointer()))
		ctx.End()
	}
}

func (WebRTCPeerConnectionExtension) _create_offer(impl func(ptr unsafe.Pointer) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCPeerConnectionExtension) _set_remote_description(impl func(ptr unsafe.Pointer, p_type gd.String, p_sdp gd.String) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_type = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var p_sdp = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, p_type, p_sdp)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCPeerConnectionExtension) _set_local_description(impl func(ptr unsafe.Pointer, p_type gd.String, p_sdp gd.String) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_type = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var p_sdp = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, p_type, p_sdp)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCPeerConnectionExtension) _add_ice_candidate(impl func(ptr unsafe.Pointer, p_sdp_mid_name gd.String, p_sdp_mline_index gd.Int, p_sdp_name gd.String) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var p_sdp_mid_name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var p_sdp_mline_index = gd.UnsafeGet[gd.Int](p_args,1)
		var p_sdp_name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,2))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, p_sdp_mid_name, p_sdp_mline_index, p_sdp_name)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCPeerConnectionExtension) _poll(impl func(ptr unsafe.Pointer) int64, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (WebRTCPeerConnectionExtension) _close(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

func (self WebRTCPeerConnectionExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_get_connection_state": return reflect.ValueOf(self._get_connection_state);
	case "_get_gathering_state": return reflect.ValueOf(self._get_gathering_state);
	case "_get_signaling_state": return reflect.ValueOf(self._get_signaling_state);
	case "_initialize": return reflect.ValueOf(self._initialize);
	case "_create_data_channel": return reflect.ValueOf(self._create_data_channel);
	case "_create_offer": return reflect.ValueOf(self._create_offer);
	case "_set_remote_description": return reflect.ValueOf(self._set_remote_description);
	case "_set_local_description": return reflect.ValueOf(self._set_local_description);
	case "_add_ice_candidate": return reflect.ValueOf(self._add_ice_candidate);
	case "_poll": return reflect.ValueOf(self._poll);
	case "_close": return reflect.ValueOf(self._close);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type WebSocketMultiplayerPeer struct {_ [0]*WebSocketMultiplayerPeer; ptr gd.Pointer}

//go:nosplit
func (self WebSocketMultiplayerPeer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *WebSocketMultiplayerPeer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self WebSocketMultiplayerPeer) Super() [1]MultiplayerPeer { return *(*[1]MultiplayerPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebSocketMultiplayerPeer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebSocketMultiplayerPeer) AsWebSocketMultiplayerPeer() [1]WebSocketMultiplayerPeer { return [1]WebSocketMultiplayerPeer{self} }


//go:nosplit
func (self WebSocketMultiplayerPeer) AsMultiplayerPeer() [1]MultiplayerPeer { return *(*[1]MultiplayerPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebSocketMultiplayerPeer) AsPacketPeer() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebSocketMultiplayerPeer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self WebSocketMultiplayerPeer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type WebSocketPeerWriteMode int64

type WebSocketPeerState int64
type WebSocketPeer struct {_ [0]*WebSocketPeer; ptr gd.Pointer}

//go:nosplit
func (self WebSocketPeer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *WebSocketPeer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self WebSocketPeer) Super() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebSocketPeer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebSocketPeer) AsWebSocketPeer() [1]WebSocketPeer { return [1]WebSocketPeer{self} }


//go:nosplit
func (self WebSocketPeer) AsPacketPeer() [1]PacketPeer { return *(*[1]PacketPeer)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebSocketPeer) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self WebSocketPeer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type WebXRInterfaceTargetRayMode int64
type WebXRInterface struct {_ [0]*WebXRInterface; ptr gd.Pointer}

//go:nosplit
func (self WebXRInterface) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *WebXRInterface) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self WebXRInterface) Super() [1]XRInterface { return *(*[1]XRInterface)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebXRInterface) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebXRInterface) AsWebXRInterface() [1]WebXRInterface { return [1]WebXRInterface{self} }


//go:nosplit
func (self WebXRInterface) AsXRInterface() [1]XRInterface { return *(*[1]XRInterface)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WebXRInterface) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self WebXRInterface) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type WindowMode int64

type WindowFlags int64

type WindowContentScaleMode int64

type WindowContentScaleAspect int64

type WindowContentScaleStretch int64

type WindowLayoutDirection int64

type WindowWindowInitialPosition int64
type Window struct {_ [0]*Window; ptr gd.Pointer}

//go:nosplit
func (self Window) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *Window) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self Window) Super() [1]Viewport { return *(*[1]Viewport)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Window) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Window) AsWindow() [1]Window { return [1]Window{self} }


//go:nosplit
func (self Window) AsViewport() [1]Viewport { return *(*[1]Viewport)(unsafe.Pointer(&self)) }


//go:nosplit
func (self Window) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

/*
Virtual method to be implemented by the user. Overrides the value returned by [method get_contents_minimum_size].
*/
func (Window) _get_contents_minimum_size(impl func(ptr unsafe.Pointer) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self Window) Virtual(name string) reflect.Value {
	switch name {
	case "_get_contents_minimum_size": return reflect.ValueOf(self._get_contents_minimum_size);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type WorkerThreadPool struct {_ [0]*WorkerThreadPool; ptr gd.Pointer}

//go:nosplit
func (self WorkerThreadPool) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *WorkerThreadPool) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self WorkerThreadPool) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WorkerThreadPool) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WorkerThreadPool) AsWorkerThreadPool() [1]WorkerThreadPool { return [1]WorkerThreadPool{self} }

//go:nosplit

func (self WorkerThreadPool) IsSingleton() {}

func (self WorkerThreadPool) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type World2D struct {_ [0]*World2D; ptr gd.Pointer}

//go:nosplit
func (self World2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *World2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self World2D) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self World2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self World2D) AsWorld2D() [1]World2D { return [1]World2D{self} }


//go:nosplit
func (self World2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self World2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self World2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type World3D struct {_ [0]*World3D; ptr gd.Pointer}

//go:nosplit
func (self World3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *World3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self World3D) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self World3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self World3D) AsWorld3D() [1]World3D { return [1]World3D{self} }


//go:nosplit
func (self World3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self World3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self World3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type WorldBoundaryShape2D struct {_ [0]*WorldBoundaryShape2D; ptr gd.Pointer}

//go:nosplit
func (self WorldBoundaryShape2D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *WorldBoundaryShape2D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self WorldBoundaryShape2D) Super() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WorldBoundaryShape2D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WorldBoundaryShape2D) AsWorldBoundaryShape2D() [1]WorldBoundaryShape2D { return [1]WorldBoundaryShape2D{self} }


//go:nosplit
func (self WorldBoundaryShape2D) AsShape2D() [1]Shape2D { return *(*[1]Shape2D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WorldBoundaryShape2D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WorldBoundaryShape2D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self WorldBoundaryShape2D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type WorldBoundaryShape3D struct {_ [0]*WorldBoundaryShape3D; ptr gd.Pointer}

//go:nosplit
func (self WorldBoundaryShape3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *WorldBoundaryShape3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self WorldBoundaryShape3D) Super() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WorldBoundaryShape3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WorldBoundaryShape3D) AsWorldBoundaryShape3D() [1]WorldBoundaryShape3D { return [1]WorldBoundaryShape3D{self} }


//go:nosplit
func (self WorldBoundaryShape3D) AsShape3D() [1]Shape3D { return *(*[1]Shape3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WorldBoundaryShape3D) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WorldBoundaryShape3D) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self WorldBoundaryShape3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type WorldEnvironment struct {_ [0]*WorldEnvironment; ptr gd.Pointer}

//go:nosplit
func (self WorldEnvironment) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *WorldEnvironment) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self WorldEnvironment) Super() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WorldEnvironment) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self WorldEnvironment) AsWorldEnvironment() [1]WorldEnvironment { return [1]WorldEnvironment{self} }


//go:nosplit
func (self WorldEnvironment) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self WorldEnvironment) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type X509Certificate struct {_ [0]*X509Certificate; ptr gd.Pointer}

//go:nosplit
func (self X509Certificate) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *X509Certificate) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self X509Certificate) Super() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self X509Certificate) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self X509Certificate) AsX509Certificate() [1]X509Certificate { return [1]X509Certificate{self} }


//go:nosplit
func (self X509Certificate) AsResource() [1]Resource { return *(*[1]Resource)(unsafe.Pointer(&self)) }


//go:nosplit
func (self X509Certificate) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self X509Certificate) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type XMLParserNodeType int64
type XMLParser struct {_ [0]*XMLParser; ptr gd.Pointer}

//go:nosplit
func (self XMLParser) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XMLParser) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XMLParser) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XMLParser) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XMLParser) AsXMLParser() [1]XMLParser { return [1]XMLParser{self} }


//go:nosplit
func (self XMLParser) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self XMLParser) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type XRAnchor3D struct {_ [0]*XRAnchor3D; ptr gd.Pointer}

//go:nosplit
func (self XRAnchor3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRAnchor3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRAnchor3D) Super() [1]XRNode3D { return *(*[1]XRNode3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRAnchor3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRAnchor3D) AsXRAnchor3D() [1]XRAnchor3D { return [1]XRAnchor3D{self} }


//go:nosplit
func (self XRAnchor3D) AsXRNode3D() [1]XRNode3D { return *(*[1]XRNode3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRAnchor3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRAnchor3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self XRAnchor3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type XRBodyModifier3DBodyUpdate int64

type XRBodyModifier3DBoneUpdate int64
type XRBodyModifier3D struct {_ [0]*XRBodyModifier3D; ptr gd.Pointer}

//go:nosplit
func (self XRBodyModifier3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRBodyModifier3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRBodyModifier3D) Super() [1]SkeletonModifier3D { return *(*[1]SkeletonModifier3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRBodyModifier3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRBodyModifier3D) AsXRBodyModifier3D() [1]XRBodyModifier3D { return [1]XRBodyModifier3D{self} }


//go:nosplit
func (self XRBodyModifier3D) AsSkeletonModifier3D() [1]SkeletonModifier3D { return *(*[1]SkeletonModifier3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRBodyModifier3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRBodyModifier3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self XRBodyModifier3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type XRBodyTrackerBodyFlags int64

type XRBodyTrackerJoint int64

type XRBodyTrackerJointFlags int64
type XRBodyTracker struct {_ [0]*XRBodyTracker; ptr gd.Pointer}

//go:nosplit
func (self XRBodyTracker) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRBodyTracker) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRBodyTracker) Super() [1]XRPositionalTracker { return *(*[1]XRPositionalTracker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRBodyTracker) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRBodyTracker) AsXRBodyTracker() [1]XRBodyTracker { return [1]XRBodyTracker{self} }


//go:nosplit
func (self XRBodyTracker) AsXRPositionalTracker() [1]XRPositionalTracker { return *(*[1]XRPositionalTracker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRBodyTracker) AsXRTracker() [1]XRTracker { return *(*[1]XRTracker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRBodyTracker) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self XRBodyTracker) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type XRCamera3D struct {_ [0]*XRCamera3D; ptr gd.Pointer}

//go:nosplit
func (self XRCamera3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRCamera3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRCamera3D) Super() [1]Camera3D { return *(*[1]Camera3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRCamera3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRCamera3D) AsXRCamera3D() [1]XRCamera3D { return [1]XRCamera3D{self} }


//go:nosplit
func (self XRCamera3D) AsCamera3D() [1]Camera3D { return *(*[1]Camera3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRCamera3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRCamera3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self XRCamera3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type XRController3D struct {_ [0]*XRController3D; ptr gd.Pointer}

//go:nosplit
func (self XRController3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRController3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRController3D) Super() [1]XRNode3D { return *(*[1]XRNode3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRController3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRController3D) AsXRController3D() [1]XRController3D { return [1]XRController3D{self} }


//go:nosplit
func (self XRController3D) AsXRNode3D() [1]XRNode3D { return *(*[1]XRNode3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRController3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRController3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self XRController3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type XRControllerTracker struct {_ [0]*XRControllerTracker; ptr gd.Pointer}

//go:nosplit
func (self XRControllerTracker) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRControllerTracker) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRControllerTracker) Super() [1]XRPositionalTracker { return *(*[1]XRPositionalTracker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRControllerTracker) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRControllerTracker) AsXRControllerTracker() [1]XRControllerTracker { return [1]XRControllerTracker{self} }


//go:nosplit
func (self XRControllerTracker) AsXRPositionalTracker() [1]XRPositionalTracker { return *(*[1]XRPositionalTracker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRControllerTracker) AsXRTracker() [1]XRTracker { return *(*[1]XRTracker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRControllerTracker) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self XRControllerTracker) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type XRFaceModifier3D struct {_ [0]*XRFaceModifier3D; ptr gd.Pointer}

//go:nosplit
func (self XRFaceModifier3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRFaceModifier3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRFaceModifier3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRFaceModifier3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRFaceModifier3D) AsXRFaceModifier3D() [1]XRFaceModifier3D { return [1]XRFaceModifier3D{self} }


//go:nosplit
func (self XRFaceModifier3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRFaceModifier3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self XRFaceModifier3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type XRFaceTrackerBlendShapeEntry int64
type XRFaceTracker struct {_ [0]*XRFaceTracker; ptr gd.Pointer}

//go:nosplit
func (self XRFaceTracker) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRFaceTracker) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRFaceTracker) Super() [1]XRTracker { return *(*[1]XRTracker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRFaceTracker) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRFaceTracker) AsXRFaceTracker() [1]XRFaceTracker { return [1]XRFaceTracker{self} }


//go:nosplit
func (self XRFaceTracker) AsXRTracker() [1]XRTracker { return *(*[1]XRTracker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRFaceTracker) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self XRFaceTracker) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type XRHandModifier3DBoneUpdate int64
type XRHandModifier3D struct {_ [0]*XRHandModifier3D; ptr gd.Pointer}

//go:nosplit
func (self XRHandModifier3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRHandModifier3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRHandModifier3D) Super() [1]SkeletonModifier3D { return *(*[1]SkeletonModifier3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRHandModifier3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRHandModifier3D) AsXRHandModifier3D() [1]XRHandModifier3D { return [1]XRHandModifier3D{self} }


//go:nosplit
func (self XRHandModifier3D) AsSkeletonModifier3D() [1]SkeletonModifier3D { return *(*[1]SkeletonModifier3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRHandModifier3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRHandModifier3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self XRHandModifier3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type XRHandTrackerHandTrackingSource int64

type XRHandTrackerHandJoint int64

type XRHandTrackerHandJointFlags int64
type XRHandTracker struct {_ [0]*XRHandTracker; ptr gd.Pointer}

//go:nosplit
func (self XRHandTracker) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRHandTracker) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRHandTracker) Super() [1]XRPositionalTracker { return *(*[1]XRPositionalTracker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRHandTracker) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRHandTracker) AsXRHandTracker() [1]XRHandTracker { return [1]XRHandTracker{self} }


//go:nosplit
func (self XRHandTracker) AsXRPositionalTracker() [1]XRPositionalTracker { return *(*[1]XRPositionalTracker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRHandTracker) AsXRTracker() [1]XRTracker { return *(*[1]XRTracker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRHandTracker) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self XRHandTracker) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type XRInterfaceCapabilities int64

type XRInterfaceTrackingStatus int64

type XRInterfacePlayAreaMode int64

type XRInterfaceEnvironmentBlendMode int64
type XRInterface struct {_ [0]*XRInterface; ptr gd.Pointer}

//go:nosplit
func (self XRInterface) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRInterface) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRInterface) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRInterface) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRInterface) AsXRInterface() [1]XRInterface { return [1]XRInterface{self} }


//go:nosplit
func (self XRInterface) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self XRInterface) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type XRInterfaceExtension struct {_ [0]*XRInterfaceExtension; ptr gd.Pointer}

//go:nosplit
func (self XRInterfaceExtension) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRInterfaceExtension) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRInterfaceExtension) Super() [1]XRInterface { return *(*[1]XRInterface)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRInterfaceExtension) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRInterfaceExtension) AsXRInterfaceExtension() [1]XRInterfaceExtension { return [1]XRInterfaceExtension{self} }


//go:nosplit
func (self XRInterfaceExtension) AsXRInterface() [1]XRInterface { return *(*[1]XRInterface)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRInterfaceExtension) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

/*
Returns the name of this interface.
*/
func (XRInterfaceExtension) _get_name(impl func(ptr unsafe.Pointer) gd.StringName, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Returns the capabilities of this interface.
*/
func (XRInterfaceExtension) _get_capabilities(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns [code]true[/code] if this interface has been initialized.
*/
func (XRInterfaceExtension) _is_initialized(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Initializes the interface, returns [code]true[/code] on success.
*/
func (XRInterfaceExtension) _initialize(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Uninitialize the interface.
*/
func (XRInterfaceExtension) _uninitialize(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Returns a [Dictionary] with system information related to this interface.
*/
func (XRInterfaceExtension) _get_system_info(impl func(ptr unsafe.Pointer) gd.Dictionary, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Returns [code]true[/code] if this interface supports this play area mode.
*/
func (XRInterfaceExtension) _supports_play_area_mode(impl func(ptr unsafe.Pointer, mode XRInterfacePlayAreaMode) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var mode = gd.UnsafeGet[XRInterfacePlayAreaMode](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, mode)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns the play area mode that sets up our play area.
*/
func (XRInterfaceExtension) _get_play_area_mode(impl func(ptr unsafe.Pointer) XRInterfacePlayAreaMode, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Set the play area mode for this interface.
*/
func (XRInterfaceExtension) _set_play_area_mode(impl func(ptr unsafe.Pointer, mode XRInterfacePlayAreaMode) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var mode = gd.UnsafeGet[XRInterfacePlayAreaMode](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, mode)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns a [PackedVector3Array] that represents the play areas boundaries (if applicable).
*/
func (XRInterfaceExtension) _get_play_area(impl func(ptr unsafe.Pointer) gd.PackedVector3Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Returns the size of our render target for this interface, this overrides the size of the [Viewport] marked as the xr viewport.
*/
func (XRInterfaceExtension) _get_render_target_size(impl func(ptr unsafe.Pointer) gd.Vector2, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns the number of views this interface requires, 1 for mono, 2 for stereoscopic.
*/
func (XRInterfaceExtension) _get_view_count(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns the [Transform3D] that positions the [XRCamera3D] in the world.
*/
func (XRInterfaceExtension) _get_camera_transform(impl func(ptr unsafe.Pointer) gd.Transform3D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns a [Transform3D] for a given view.
*/
func (XRInterfaceExtension) _get_transform_for_view(impl func(ptr unsafe.Pointer, view gd.Int, cam_transform gd.Transform3D) gd.Transform3D, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var view = gd.UnsafeGet[gd.Int](p_args,0)
		var cam_transform = gd.UnsafeGet[gd.Transform3D](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, view, cam_transform)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Returns the projection matrix for the given view as a [PackedFloat64Array].
*/
func (XRInterfaceExtension) _get_projection_for_view(impl func(ptr unsafe.Pointer, view gd.Int, aspect gd.Float, z_near gd.Float, z_far gd.Float) gd.PackedFloat64Array, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var view = gd.UnsafeGet[gd.Int](p_args,0)
		var aspect = gd.UnsafeGet[gd.Float](p_args,1)
		var z_near = gd.UnsafeGet[gd.Float](p_args,2)
		var z_far = gd.UnsafeGet[gd.Float](p_args,3)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, view, aspect, z_near, z_far)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

func (XRInterfaceExtension) _get_vrs_texture(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called if this [XRInterfaceExtension] is active before our physics and game process is called. Most XR interfaces will update its [XRPositionalTracker]s at this point in time.
*/
func (XRInterfaceExtension) _process(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called if this [XRInterfaceExtension] is active before rendering starts. Most XR interfaces will sync tracking at this point in time.
*/
func (XRInterfaceExtension) _pre_render(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Called if this is our primary [XRInterfaceExtension] before we start processing a [Viewport] for every active XR [Viewport], returns [code]true[/code] if that viewport should be rendered. An XR interface may return [code]false[/code] if the user has taken off their headset and we can pause rendering.
*/
func (XRInterfaceExtension) _pre_draw_viewport(impl func(ptr unsafe.Pointer, render_target gd.RID) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var render_target = gd.UnsafeGet[gd.RID](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, render_target)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Called after the XR [Viewport] draw logic has completed.
*/
func (XRInterfaceExtension) _post_draw_viewport(impl func(ptr unsafe.Pointer, render_target gd.RID, screen_rect gd.Rect2) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var render_target = gd.UnsafeGet[gd.RID](p_args,0)
		var screen_rect = gd.UnsafeGet[gd.Rect2](p_args,1)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, render_target, screen_rect)
		ctx.End()
	}
}

/*
Called if interface is active and queues have been submitted.
*/
func (XRInterfaceExtension) _end_frame(impl func(ptr unsafe.Pointer) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self)
		ctx.End()
	}
}

/*
Returns a [PackedStringArray] with tracker names configured by this interface. Note that user configuration can override this list.
*/
func (XRInterfaceExtension) _get_suggested_tracker_names(impl func(ptr unsafe.Pointer) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Returns a [PackedStringArray] with pose names configured by this interface. Note that user configuration can override this list.
*/
func (XRInterfaceExtension) _get_suggested_pose_names(impl func(ptr unsafe.Pointer, tracker_name gd.StringName) gd.PackedStringArray, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var tracker_name = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, tracker_name)
		gd.UnsafeSet(p_back, mmm.End(ret))
		ctx.End()
	}
}

/*
Returns a [enum XRInterface.TrackingStatus] specifying the current status of our tracking.
*/
func (XRInterfaceExtension) _get_tracking_status(impl func(ptr unsafe.Pointer) XRInterfaceTrackingStatus, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Triggers a haptic pulse to be emitted on the specified tracker.
*/
func (XRInterfaceExtension) _trigger_haptic_pulse(impl func(ptr unsafe.Pointer, action_name gd.String, tracker_name gd.StringName, frequency gd.Float, amplitude gd.Float, duration_sec gd.Float, delay_sec gd.Float) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var action_name = mmm.Let[gd.String](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,0))
		var tracker_name = mmm.Let[gd.StringName](ctx.Lifetime, ctx.API, gd.UnsafeGet[uintptr](p_args,1))
		var frequency = gd.UnsafeGet[gd.Float](p_args,2)
		var amplitude = gd.UnsafeGet[gd.Float](p_args,3)
		var duration_sec = gd.UnsafeGet[gd.Float](p_args,4)
		var delay_sec = gd.UnsafeGet[gd.Float](p_args,5)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, action_name, tracker_name, frequency, amplitude, duration_sec, delay_sec)
		ctx.End()
	}
}

/*
Return [code]true[/code] if anchor detection is enabled for this interface.
*/
func (XRInterfaceExtension) _get_anchor_detection_is_enabled(impl func(ptr unsafe.Pointer) bool, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Enables anchor detection on this interface if supported.
*/
func (XRInterfaceExtension) _set_anchor_detection_is_enabled(impl func(ptr unsafe.Pointer, enabled bool) , api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		var enabled = gd.UnsafeGet[bool](p_args,0)
		self := reflect.ValueOf(class).UnsafePointer()
impl(self, enabled)
		ctx.End()
	}
}

/*
Returns the camera feed ID for the [CameraFeed] registered with the [CameraServer] that should be presented as the background on an AR capable device (if applicable).
*/
func (XRInterfaceExtension) _get_camera_feed_id(impl func(ptr unsafe.Pointer) gd.Int, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Return color texture into which to render (if applicable).
*/
func (XRInterfaceExtension) _get_color_texture(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Return depth texture into which to render (if applicable).
*/
func (XRInterfaceExtension) _get_depth_texture(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

/*
Return velocity texture into which to render (if applicable).
*/
func (XRInterfaceExtension) _get_velocity_texture(impl func(ptr unsafe.Pointer) gd.RID, api *gd.API) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class gd.ExtensionClass, p_args gd.UnsafeArgs, p_back gd.UnsafeBack) {
		ctx := gd.NewLifetime(api)
		class.SetTemporary(ctx)
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
		ctx.End()
	}
}

func (self XRInterfaceExtension) Virtual(name string) reflect.Value {
	switch name {
	case "_get_name": return reflect.ValueOf(self._get_name);
	case "_get_capabilities": return reflect.ValueOf(self._get_capabilities);
	case "_is_initialized": return reflect.ValueOf(self._is_initialized);
	case "_initialize": return reflect.ValueOf(self._initialize);
	case "_uninitialize": return reflect.ValueOf(self._uninitialize);
	case "_get_system_info": return reflect.ValueOf(self._get_system_info);
	case "_supports_play_area_mode": return reflect.ValueOf(self._supports_play_area_mode);
	case "_get_play_area_mode": return reflect.ValueOf(self._get_play_area_mode);
	case "_set_play_area_mode": return reflect.ValueOf(self._set_play_area_mode);
	case "_get_play_area": return reflect.ValueOf(self._get_play_area);
	case "_get_render_target_size": return reflect.ValueOf(self._get_render_target_size);
	case "_get_view_count": return reflect.ValueOf(self._get_view_count);
	case "_get_camera_transform": return reflect.ValueOf(self._get_camera_transform);
	case "_get_transform_for_view": return reflect.ValueOf(self._get_transform_for_view);
	case "_get_projection_for_view": return reflect.ValueOf(self._get_projection_for_view);
	case "_get_vrs_texture": return reflect.ValueOf(self._get_vrs_texture);
	case "_process": return reflect.ValueOf(self._process);
	case "_pre_render": return reflect.ValueOf(self._pre_render);
	case "_pre_draw_viewport": return reflect.ValueOf(self._pre_draw_viewport);
	case "_post_draw_viewport": return reflect.ValueOf(self._post_draw_viewport);
	case "_end_frame": return reflect.ValueOf(self._end_frame);
	case "_get_suggested_tracker_names": return reflect.ValueOf(self._get_suggested_tracker_names);
	case "_get_suggested_pose_names": return reflect.ValueOf(self._get_suggested_pose_names);
	case "_get_tracking_status": return reflect.ValueOf(self._get_tracking_status);
	case "_trigger_haptic_pulse": return reflect.ValueOf(self._trigger_haptic_pulse);
	case "_get_anchor_detection_is_enabled": return reflect.ValueOf(self._get_anchor_detection_is_enabled);
	case "_set_anchor_detection_is_enabled": return reflect.ValueOf(self._set_anchor_detection_is_enabled);
	case "_get_camera_feed_id": return reflect.ValueOf(self._get_camera_feed_id);
	case "_get_color_texture": return reflect.ValueOf(self._get_color_texture);
	case "_get_depth_texture": return reflect.ValueOf(self._get_depth_texture);
	case "_get_velocity_texture": return reflect.ValueOf(self._get_velocity_texture);
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type XRNode3D struct {_ [0]*XRNode3D; ptr gd.Pointer}

//go:nosplit
func (self XRNode3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRNode3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRNode3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRNode3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRNode3D) AsXRNode3D() [1]XRNode3D { return [1]XRNode3D{self} }


//go:nosplit
func (self XRNode3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRNode3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self XRNode3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type XROrigin3D struct {_ [0]*XROrigin3D; ptr gd.Pointer}

//go:nosplit
func (self XROrigin3D) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XROrigin3D) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XROrigin3D) Super() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XROrigin3D) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XROrigin3D) AsXROrigin3D() [1]XROrigin3D { return [1]XROrigin3D{self} }


//go:nosplit
func (self XROrigin3D) AsNode3D() [1]Node3D { return *(*[1]Node3D)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XROrigin3D) AsNode() [1]Node { return *(*[1]Node)(unsafe.Pointer(&self)) }

func (self XROrigin3D) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type XRPoseTrackingConfidence int64
type XRPose struct {_ [0]*XRPose; ptr gd.Pointer}

//go:nosplit
func (self XRPose) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRPose) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRPose) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRPose) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRPose) AsXRPose() [1]XRPose { return [1]XRPose{self} }


//go:nosplit
func (self XRPose) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self XRPose) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type XRPositionalTrackerTrackerHand int64
type XRPositionalTracker struct {_ [0]*XRPositionalTracker; ptr gd.Pointer}

//go:nosplit
func (self XRPositionalTracker) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRPositionalTracker) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRPositionalTracker) Super() [1]XRTracker { return *(*[1]XRTracker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRPositionalTracker) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRPositionalTracker) AsXRPositionalTracker() [1]XRPositionalTracker { return [1]XRPositionalTracker{self} }


//go:nosplit
func (self XRPositionalTracker) AsXRTracker() [1]XRTracker { return *(*[1]XRTracker)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRPositionalTracker) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self XRPositionalTracker) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type XRServerTrackerType int64

type XRServerRotationMode int64
type XRServer struct {_ [0]*XRServer; ptr gd.Pointer}

//go:nosplit
func (self XRServer) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRServer) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRServer) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRServer) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRServer) AsXRServer() [1]XRServer { return [1]XRServer{self} }

//go:nosplit

func (self XRServer) IsSingleton() {}

func (self XRServer) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type XRTracker struct {_ [0]*XRTracker; ptr gd.Pointer}

//go:nosplit
func (self XRTracker) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRTracker) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRTracker) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRTracker) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRTracker) AsXRTracker() [1]XRTracker { return [1]XRTracker{self} }


//go:nosplit
func (self XRTracker) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self XRTracker) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type XRVRS struct {_ [0]*XRVRS; ptr gd.Pointer}

//go:nosplit
func (self XRVRS) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *XRVRS) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self XRVRS) Super() [1]gd.Object { return *(*[1]gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRVRS) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self XRVRS) AsXRVRS() [1]XRVRS { return [1]XRVRS{self} }

func (self XRVRS) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}

type ZIPPackerZipAppend int64
type ZIPPacker struct {_ [0]*ZIPPacker; ptr gd.Pointer}

//go:nosplit
func (self ZIPPacker) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ZIPPacker) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ZIPPacker) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ZIPPacker) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ZIPPacker) AsZIPPacker() [1]ZIPPacker { return [1]ZIPPacker{self} }


//go:nosplit
func (self ZIPPacker) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ZIPPacker) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
type ZIPReader struct {_ [0]*ZIPReader; ptr gd.Pointer}

//go:nosplit
func (self ZIPReader) AsPointer() gd.Pointer { return self.ptr }


//go:nosplit
func (self *ZIPReader) SetPointer(ptr gd.Pointer) { self.ptr = ptr }


//go:nosplit
func (self ZIPReader) Super() [1]gd.RefCounted { return *(*[1]gd.RefCounted)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ZIPReader) AsObject() gd.Object { return *(*gd.Object)(unsafe.Pointer(&self)) }


//go:nosplit
func (self ZIPReader) AsZIPReader() [1]ZIPReader { return [1]ZIPReader{self} }


//go:nosplit
func (self ZIPReader) AsRefCounted() gd.RefCounted { return *(*gd.RefCounted)(unsafe.Pointer(&self)) }

func (self ZIPReader) Virtual(name string) reflect.Value {
	switch name {
	default: return gd.VirtualByName(self.Super()[0], name)
	}
}
