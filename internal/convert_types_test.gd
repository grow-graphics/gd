extends Converter

func _init():
    if hello_world() != "Hello, World!":         push_fail("HelloWorld()")
    if echo("1234") != "1234":                  push_fail("Echo()")
    if self.int() != 22:                             push_fail("Int()")
    if !valid_int(22):                           push_fail("ValidInt()")
    if float_64() != 2.2:                        push_fail("Float64()")
    if !valid_float_64(2.2):                      push_fail("ValidFloat64()")
    if float_32() != 2.0:                        push_fail("Float32()")
    if !valid_float_32(2.0):                      push_fail("ValidFloat32()")
    if self.bool() != true:                          push_fail("Bool()")
    if !valid_bool(true):                        push_fail("ValidBool()")
    if int_8() != 8:                             push_fail("Int8()")
    if !valid_int_8(8):                           push_fail("ValidInt8()")
    if int_16() != 16:                           push_fail("Int16()")
    if !valid_int_16(16):                         push_fail("ValidInt16()")
    if int_32() != 32:                           push_fail("Int32()")
    if !valid_int_32(32):                         push_fail("ValidInt32()")
    if int_64() != 64:                           push_fail("Int64()")
    if !valid_int_64(64):                         push_fail("ValidInt64()")
    if uint() != 22:                            push_fail("UInt()")
    if !valid_uint(22):                          push_fail("ValidUInt()")
    if uint_8() != 8:                            push_fail("UInt8()")
    if !valid_uint_8(8):                          push_fail("ValidUInt8()")
    if uint_16() != 16:                          push_fail("UInt16()")
    if !valid_uint_16(16):                        push_fail("ValidUInt16()")
    if uint_32() != 32:                          push_fail("UInt32()")
    if !valid_uint_32(32):                        push_fail("ValidUInt32()")
    if uint_64().get_id() != 64:                 push_fail("UInt64()")
    if !valid_uint_64(rid_from_int64(64)):        push_fail("ValidUInt64()")
    if self.rid() != rid_from_int64(22):        push_fail("RID()")
    if !valid_rid(rid_from_int64(22)):           push_fail("ValidRID()")
    if self.complex_64() != Vector2(2.0, 2.0):   push_fail("Complex32()")
    if !valid_complex_64(Vector2(2.0, 2.0)):      push_fail("ValidComplex32()")
    if self.complex_128() != Vector2(2.0, 2.0):  push_fail("Complex64()")
    if !valid_complex_128(Vector2(2.0, 2.0)):     push_fail("ValidComplex128()")

    if self.float() != 2.2:                       push_fail("Float()")
    if !valid_float(2.2):                          push_fail("ValidFloat()")
    if self.string() != "testing":                push_fail("String()")
    if !valid_string("testing"):                   push_fail("ValidString()")
    if self.vector_2() != Vector2(1.0, 2.0):       push_fail("Vector2()")
    if !valid_vector_2(Vector2(1.0, 2.0)):          push_fail("ValidVector2()")
    if self.vector_2i() != Vector2i(1, 2):         push_fail("Vector2i()")
    if !valid_vector_2i(Vector2i(1, 2)):            push_fail("ValidVector2i()")
    if rect_2() != Rect2(1.0, 2.0, 3.0, 4.0):      push_fail("Rect2()")
    if !valid_rect_2(Rect2(1.0, 2.0, 3.0, 4.0)):   push_fail("ValidRect2()")
    if self.rect_2i() != Rect2i(1, 2, 3, 4):       push_fail("Rect2i()")
    if !valid_rect_2i(Rect2i(1, 2, 3, 4)):          push_fail("ValidRect2i()")
    if self.vector_3() != Vector3(1.0, 2.0, 3.0):  push_fail("Vector3()")
    if !valid_vector_3(Vector3(1.0, 2.0, 3.0)):     push_fail("ValidVector3()")
    if self.vector_3i() != Vector3i(1, 2, 3):      push_fail("Vector3i()")
    if !valid_vector_3i(Vector3i(1, 2, 3)):         push_fail("ValidVector3i()")
    if get_transform_2d() != Transform2D.IDENTITY:  push_fail("Transform2D()")
    if !valid_transform_2d(Transform2D.IDENTITY):   push_fail("ValidTransform2D()")
    if vector_4() != Vector4(1.0, 2.0, 3.0, 4.0):  push_fail("Vector4()")
    if !valid_vector_4(Vector4(1.0, 2.0, 3.0, 4.0)):     push_fail("ValidVector4()")
    if self.vector_4i() != Vector4i(1, 2, 3, 4):        push_fail("Vector4i()")
    if !valid_vector_4i(Vector4i(1, 2, 3, 4)):           push_fail("ValidVector4i()")
    if self.plane() != Plane(Vector3(1.0, 2.0, 3.0), 4.0): push_fail("Plane()")
    if !valid_plane(Plane(Vector3(1.0, 2.0, 3.0), 4.0)):    push_fail("ValidPlane()")
    if self.get_quaternion() != Quaternion.IDENTITY:         push_fail("GetQuaternion()")
    if !valid_quaternion(Quaternion.IDENTITY):               push_fail("ValidQuaternion()")
    if self.aabb() != AABB(Vector3(1.0, 2.0, 3.0), Vector3(4.0, 5.0, 6.0)): push_fail("AABB()")
    if !valid_aabb(AABB(Vector3(1.0, 2.0, 3.0), Vector3(4.0, 5.0, 6.0))): push_fail("ValidAABB()")
    if self.get_basis() != Basis.IDENTITY:                       push_fail("Basis()")
    if !valid_basis(Basis.IDENTITY):                             push_fail("ValidBasis()")
    if self.get_transform_3d() != Transform3D.IDENTITY:          push_fail("Transform3D()")
    if !valid_transform_3d(Transform3D.IDENTITY):                push_fail("ValidTransform3D()")
    if self.get_projection() != Projection.IDENTITY:        push_fail("Projection()")
    if !valid_projection(Projection.IDENTITY):              push_fail("ValidProjection()")
    if self.color() != Color(1.0, 0.0, 0.0, 1.0):      push_fail("Color()")
    if !valid_color(Color(1.0, 0.0, 0.0, 1.0)):         push_fail("ValidColor()")
    if self.string_name() != "testing":                     push_fail("StringName()")
    if !valid_string_name("testing"):                        push_fail("ValidStringName()")
    if self.node_path() != NodePath("/"):             push_fail("NodePath()")
    if !valid_node_path(NodePath("/")):                push_fail("ValidNodePath()")

    var obj = self.object()
    if obj.get_class() != "Object":         push_fail("Object()")
    if !valid_object(obj):                   push_fail("ValidObject()")
    obj.free()

    var callable = self.callable()
    if callable.call() != "Hello, World!":                    push_fail("Callable()")
    if !valid_callable(callable):                  push_fail("ValidCallable()")

    var sig = self.signal()
    if sig.get_name() != "property_list_changed":       push_fail("Signal()")
    if !valid_signal(sig):                              push_fail("ValidSignal()")

    var dict = self.dictionary()
    if dict.size() != 1:                                push_fail("Dictionary()")
    if dict.has("hello") == false:                        push_fail("Dictionary()")
    if dict.get("hello") != "world":                      push_fail("Dictionary()")
    if !valid_dictionary(dict):                          push_fail("ValidDictionary()")

    var arr = self.array()
    if arr.size() != 3:                                  push_fail("Array()")
    if arr[0] != 1:                                  push_fail("Array()")
    if arr[1] != 2:                                  push_fail("Array()")
    if arr[2] != 3:                                  push_fail("Array()")
    if !valid_array(arr):                                push_fail("ValidArray()")

    var arrany = self.array_any()
    if arrany.size() != 3:                           push_fail("ArrayAny()")
    if arrany[0] != 1:                               push_fail("ArrayAny()")
    if arrany[1] != 2:                               push_fail("ArrayAny()")
    if arrany[2] != 3:                               push_fail("ArrayAny()")
    if !valid_array_any(arrany):                       push_fail("ValidArrayAny()")

    var intarr = self.array_int()
    if intarr.size() != 3:                           push_fail("ArrayInt()")
    if intarr[0] != 1:                               push_fail("ArrayInt()")
    if intarr[1] != 2:                               push_fail("ArrayInt()")
    if intarr[2] != 3:                               push_fail("ArrayInt()")
    if !valid_array_int(intarr):                       push_fail("ValidArrayInt()")

    if self.packed_byte_array() != PackedByteArray([1, 2, 3]): push_fail("PackedByteArray()")
    if !valid_packed_byte_array(PackedByteArray([1, 2, 3])): push_fail("ValidPackedByteArray()")
    if self.packed_int_32_array() != PackedInt32Array([1, 2, 3]): push_fail("PackedInt32Array()")
    if !valid_packed_int_32_array(PackedInt32Array([1, 2, 3])): push_fail("ValidPackedInt32Array()")
    if self.packed_int_64_array() != PackedInt64Array([1, 2, 3]): push_fail("PackedInt64Array()")
    if !valid_packed_int_64_array(PackedInt64Array([1, 2, 3])): push_fail("ValidPackedInt64Array()")
    if self.packed_float_32_array() != PackedFloat32Array([1.0, 2.0, 3.0]): push_fail("PackedFloat32Array()")
    if !valid_packed_float_32_array(PackedFloat32Array([1.0, 2.0, 3.0])): push_fail("ValidPackedFloat32Array()")
    if self.packed_float_64_array() != PackedFloat64Array([1.0, 2.0, 3.0]): push_fail("PackedFloat64Array()")
    if !valid_packed_float_64_array(PackedFloat64Array([1.0, 2.0, 3.0])): push_fail("ValidPackedFloat64Array()")
    if self.packed_string_array() != PackedStringArray(["hello", "world"]): push_fail("PackedStringArray()")
    if !valid_packed_string_array(PackedStringArray(["hello", "world"])): push_fail("ValidPackedStringArray()")
    if self.packed_vector_2_array() != PackedVector2Array([Vector2(1.0, 2.0), Vector2(3.0, 4.0)]): push_fail("PackedVector2Array()")
    if !valid_packed_vector_2_array(PackedVector2Array([Vector2(1.0, 2.0), Vector2(3.0, 4.0)])): push_fail("ValidPackedVector2Array()")
    if self.packed_vector_3_array() != PackedVector3Array([Vector3(1.0, 2.0, 3.0), Vector3(4.0, 5.0, 6.0)]): push_fail("PackedVector3Array()")
    if !valid_packed_vector_3_array(PackedVector3Array([Vector3(1.0, 2.0, 3.0), Vector3(4.0, 5.0, 6.0)])): push_fail("ValidPackedVector3Array()")
    if self.packed_color_array() != PackedColorArray([Color(1.0, 2.0, 3.0, 4.0), Color(5.0, 6.0, 7.0, 8.0)]): push_fail("PackedColorArray()")
    if !valid_packed_color_array(PackedColorArray([Color(1.0, 2.0, 3.0, 4.0), Color(5.0, 6.0, 7.0, 8.0)])): push_fail("ValidPackedColorArray()")
    if self.packed_vector_4_array() != PackedVector4Array([Vector4(1.0, 2.0, 3.0, 4.0), Vector4(5.0, 6.0, 7.0, 8.0)]): push_fail("PackedVector4Array()")
    if !valid_packed_vector_4_array(PackedVector4Array([Vector4(1.0, 2.0, 3.0, 4.0), Vector4(5.0, 6.0, 7.0, 8.0)])): push_fail("ValidPackedVector4Array()")

    var custom = self.custom_object()
    if custom.value != 42: push_fail("CustomObject()")
    if !valid_custom_object(custom): push_fail("ValidCustomObject()")

    done()

func push_fail(name: String):
    push_error(name + " push_failed")
    fail()
