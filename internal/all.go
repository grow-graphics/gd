//go:build !generate

// Code generated by the generate package DO NOT EDIT
package gd

import "reflect"
import "unsafe"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"

func Sin(angle_rad float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, angle_rad)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.sin(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Cos(angle_rad float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, angle_rad)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.cos(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Tan(angle_rad float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, angle_rad)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.tan(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Sinh(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.sinh(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Cosh(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.cosh(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Tanh(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.tanh(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Asin(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.asin(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Acos(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.acos(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Atan(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.atan(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Atan2(y float64, x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, y)
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.atan2(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Asinh(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.asinh(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Acosh(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.acosh(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Atanh(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.atanh(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Sqrt(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.sqrt(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Fmod(x float64, y float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	callframe.Arg(frame, y)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.fmod(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Fposmod(x float64, y float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	callframe.Arg(frame, y)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.fposmod(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Posmod(x int64, y int64) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	callframe.Arg(frame, y)
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.posmod(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Floor(x Variant) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(x))
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.floor(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func Floorf(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.floorf(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Floori(x float64) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.floori(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Ceil(x Variant) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(x))
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.ceil(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func Ceilf(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.ceilf(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Ceili(x float64) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.ceili(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Round(x Variant) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(x))
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.round(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func Roundf(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.roundf(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Roundi(x float64) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.roundi(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Abs(x Variant) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(x))
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.abs(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func Absf(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.absf(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Absi(x int64) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.absi(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Sign(x Variant) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(x))
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.sign(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func Signf(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.signf(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Signi(x int64) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.signi(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Snapped(x Variant, step Variant) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(x))
	callframe.Arg(frame, pointers.Get(step))
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.snapped(r_ret.Addr(), frame.Array(0), 2)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func Snappedf(x float64, step float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	callframe.Arg(frame, step)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.snappedf(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Snappedi(x float64, step int64) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	callframe.Arg(frame, step)
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.snappedi(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Pow(base float64, exp float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, base)
	callframe.Arg(frame, exp)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.pow(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Log(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.log(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Exp(x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.exp(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func IsNan(x float64) bool {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[bool](frame)
	Global.utility.is_nan(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func IsInf(x float64) bool {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[bool](frame)
	Global.utility.is_inf(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func IsEqualApprox(a float64, b float64) bool {
	var frame = callframe.New()
	callframe.Arg(frame, a)
	callframe.Arg(frame, b)
	var r_ret = callframe.Ret[bool](frame)
	Global.utility.is_equal_approx(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func IsZeroApprox(x float64) bool {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[bool](frame)
	Global.utility.is_zero_approx(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func IsFinite(x float64) bool {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[bool](frame)
	Global.utility.is_finite(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Ease(x float64, curve float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	callframe.Arg(frame, curve)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.ease(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func StepDecimals(x float64) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.step_decimals(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Lerp(from Variant, to Variant, weight Variant) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(from))
	callframe.Arg(frame, pointers.Get(to))
	callframe.Arg(frame, pointers.Get(weight))
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.lerp(r_ret.Addr(), frame.Array(0), 3)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func Lerpf(from float64, to float64, weight float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, from)
	callframe.Arg(frame, to)
	callframe.Arg(frame, weight)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.lerpf(r_ret.Addr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func CubicInterpolate(from float64, to float64, pre float64, post float64, weight float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, from)
	callframe.Arg(frame, to)
	callframe.Arg(frame, pre)
	callframe.Arg(frame, post)
	callframe.Arg(frame, weight)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.cubic_interpolate(r_ret.Addr(), frame.Array(0), 5)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func CubicInterpolateAngle(from float64, to float64, pre float64, post float64, weight float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, from)
	callframe.Arg(frame, to)
	callframe.Arg(frame, pre)
	callframe.Arg(frame, post)
	callframe.Arg(frame, weight)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.cubic_interpolate_angle(r_ret.Addr(), frame.Array(0), 5)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func CubicInterpolateInTime(from float64, to float64, pre float64, post float64, weight float64, to_t float64, pre_t float64, post_t float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, from)
	callframe.Arg(frame, to)
	callframe.Arg(frame, pre)
	callframe.Arg(frame, post)
	callframe.Arg(frame, weight)
	callframe.Arg(frame, to_t)
	callframe.Arg(frame, pre_t)
	callframe.Arg(frame, post_t)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.cubic_interpolate_in_time(r_ret.Addr(), frame.Array(0), 8)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func CubicInterpolateAngleInTime(from float64, to float64, pre float64, post float64, weight float64, to_t float64, pre_t float64, post_t float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, from)
	callframe.Arg(frame, to)
	callframe.Arg(frame, pre)
	callframe.Arg(frame, post)
	callframe.Arg(frame, weight)
	callframe.Arg(frame, to_t)
	callframe.Arg(frame, pre_t)
	callframe.Arg(frame, post_t)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.cubic_interpolate_angle_in_time(r_ret.Addr(), frame.Array(0), 8)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func BezierInterpolate(start float64, control_1 float64, control_2 float64, end float64, t float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, start)
	callframe.Arg(frame, control_1)
	callframe.Arg(frame, control_2)
	callframe.Arg(frame, end)
	callframe.Arg(frame, t)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.bezier_interpolate(r_ret.Addr(), frame.Array(0), 5)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func BezierDerivative(start float64, control_1 float64, control_2 float64, end float64, t float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, start)
	callframe.Arg(frame, control_1)
	callframe.Arg(frame, control_2)
	callframe.Arg(frame, end)
	callframe.Arg(frame, t)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.bezier_derivative(r_ret.Addr(), frame.Array(0), 5)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func AngleDifference(from float64, to float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, from)
	callframe.Arg(frame, to)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.angle_difference(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func LerpAngle(from float64, to float64, weight float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, from)
	callframe.Arg(frame, to)
	callframe.Arg(frame, weight)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.lerp_angle(r_ret.Addr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func InverseLerp(from float64, to float64, weight float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, from)
	callframe.Arg(frame, to)
	callframe.Arg(frame, weight)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.inverse_lerp(r_ret.Addr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Remap(value float64, istart float64, istop float64, ostart float64, ostop float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, value)
	callframe.Arg(frame, istart)
	callframe.Arg(frame, istop)
	callframe.Arg(frame, ostart)
	callframe.Arg(frame, ostop)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.remap(r_ret.Addr(), frame.Array(0), 5)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Smoothstep(from float64, to float64, x float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, from)
	callframe.Arg(frame, to)
	callframe.Arg(frame, x)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.smoothstep(r_ret.Addr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func MoveToward(from float64, to float64, delta float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, from)
	callframe.Arg(frame, to)
	callframe.Arg(frame, delta)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.move_toward(r_ret.Addr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func RotateToward(from float64, to float64, delta float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, from)
	callframe.Arg(frame, to)
	callframe.Arg(frame, delta)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.rotate_toward(r_ret.Addr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func DegToRad(deg float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, deg)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.deg_to_rad(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func RadToDeg(rad float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, rad)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.rad_to_deg(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func LinearToDb(lin float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, lin)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.linear_to_db(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func DbToLinear(db float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, db)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.db_to_linear(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Wrap(value Variant, min Variant, max Variant) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(value))
	callframe.Arg(frame, pointers.Get(min))
	callframe.Arg(frame, pointers.Get(max))
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.wrap(r_ret.Addr(), frame.Array(0), 3)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func Wrapi(value int64, min int64, max int64) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, value)
	callframe.Arg(frame, min)
	callframe.Arg(frame, max)
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.wrapi(r_ret.Addr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Wrapf(value float64, min float64, max float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, value)
	callframe.Arg(frame, min)
	callframe.Arg(frame, max)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.wrapf(r_ret.Addr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Max(arg1 Variant, arg2 Variant, args ...Variant) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(arg1))
	callframe.Arg(frame, pointers.Get(arg2))
	for _, arg := range args {
		callframe.Arg(frame, pointers.Get(arg))
	}
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.max(r_ret.Addr(), frame.Array(0), 2)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func Maxi(a int64, b int64) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, a)
	callframe.Arg(frame, b)
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.maxi(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Maxf(a float64, b float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, a)
	callframe.Arg(frame, b)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.maxf(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Min(arg1 Variant, arg2 Variant, args ...Variant) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(arg1))
	callframe.Arg(frame, pointers.Get(arg2))
	for _, arg := range args {
		callframe.Arg(frame, pointers.Get(arg))
	}
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.min(r_ret.Addr(), frame.Array(0), 2)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func Mini(a int64, b int64) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, a)
	callframe.Arg(frame, b)
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.mini(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Minf(a float64, b float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, a)
	callframe.Arg(frame, b)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.minf(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Clamp(value Variant, min Variant, max Variant) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(value))
	callframe.Arg(frame, pointers.Get(min))
	callframe.Arg(frame, pointers.Get(max))
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.clamp(r_ret.Addr(), frame.Array(0), 3)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func Clampi(value int64, min int64, max int64) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, value)
	callframe.Arg(frame, min)
	callframe.Arg(frame, max)
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.clampi(r_ret.Addr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Clampf(value float64, min float64, max float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, value)
	callframe.Arg(frame, min)
	callframe.Arg(frame, max)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.clampf(r_ret.Addr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func NearestPo2(value int64) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, value)
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.nearest_po2(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Pingpong(value float64, length float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, value)
	callframe.Arg(frame, length)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.pingpong(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Randomize() {
	var frame = callframe.New()
	var r_ret = callframe.Nil
	Global.utility.randomize(r_ret.Addr(), frame.Array(0), 0)
	frame.Free()
}

func Randi() int64 {
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.randi(r_ret.Addr(), frame.Array(0), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Randf() float64 {
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.randf(r_ret.Addr(), frame.Array(0), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func RandiRange(from int64, to int64) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, from)
	callframe.Arg(frame, to)
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.randi_range(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func RandfRange(from float64, to float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, from)
	callframe.Arg(frame, to)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.randf_range(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Randfn(mean float64, deviation float64) float64 {
	var frame = callframe.New()
	callframe.Arg(frame, mean)
	callframe.Arg(frame, deviation)
	var r_ret = callframe.Ret[float64](frame)
	Global.utility.randfn(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func Seed(base int64) {
	var frame = callframe.New()
	callframe.Arg(frame, base)
	var r_ret = callframe.Nil
	Global.utility.seed(r_ret.Addr(), frame.Array(0), 1)
	frame.Free()
}

func RandFromSeed(seed int64) PackedInt64Array {
	var frame = callframe.New()
	callframe.Arg(frame, seed)
	var r_ret = callframe.Ret[packedPointers](frame)
	Global.utility.rand_from_seed(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[PackedInt64Array](r_ret.Get())
	frame.Free()
	return ret
}

func Weakref(obj Variant) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(obj))
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.weakref(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func Typeof(variable Variant) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(variable))
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.typeof(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func TypeConvert(variant Variant, atype int64) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(variant))
	callframe.Arg(frame, atype)
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.type_convert(r_ret.Addr(), frame.Array(0), 2)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func Str(arg1 Variant, args ...Variant) String {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(arg1))
	for _, arg := range args {
		callframe.Arg(frame, pointers.Get(arg))
	}
	var r_ret = callframe.Ret[[1]enginePointer](frame)
	Global.utility.str(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[String](r_ret.Get())
	frame.Free()
	return ret
}

func ErrorString(error int64) String {
	var frame = callframe.New()
	callframe.Arg(frame, error)
	var r_ret = callframe.Ret[[1]enginePointer](frame)
	Global.utility.error_string(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[String](r_ret.Get())
	frame.Free()
	return ret
}

func TypeToString(atype int64) String {
	var frame = callframe.New()
	callframe.Arg(frame, atype)
	var r_ret = callframe.Ret[[1]enginePointer](frame)
	Global.utility.type_string(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[String](r_ret.Get())
	frame.Free()
	return ret
}

func Print(arg1 Variant, args ...Variant) {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(arg1))
	for _, arg := range args {
		callframe.Arg(frame, pointers.Get(arg))
	}
	var r_ret = callframe.Nil
	Global.utility.print(r_ret.Addr(), frame.Array(0), 1)
	frame.Free()
}

func PrintRich(arg1 Variant, args ...Variant) {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(arg1))
	for _, arg := range args {
		callframe.Arg(frame, pointers.Get(arg))
	}
	var r_ret = callframe.Nil
	Global.utility.print_rich(r_ret.Addr(), frame.Array(0), 1)
	frame.Free()
}

func Printerr(arg1 Variant, args ...Variant) {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(arg1))
	for _, arg := range args {
		callframe.Arg(frame, pointers.Get(arg))
	}
	var r_ret = callframe.Nil
	Global.utility.printerr(r_ret.Addr(), frame.Array(0), 1)
	frame.Free()
}

func Printt(arg1 Variant, args ...Variant) {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(arg1))
	for _, arg := range args {
		callframe.Arg(frame, pointers.Get(arg))
	}
	var r_ret = callframe.Nil
	Global.utility.printt(r_ret.Addr(), frame.Array(0), 1)
	frame.Free()
}

func Prints(arg1 Variant, args ...Variant) {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(arg1))
	for _, arg := range args {
		callframe.Arg(frame, pointers.Get(arg))
	}
	var r_ret = callframe.Nil
	Global.utility.prints(r_ret.Addr(), frame.Array(0), 1)
	frame.Free()
}

func Printraw(arg1 Variant, args ...Variant) {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(arg1))
	for _, arg := range args {
		callframe.Arg(frame, pointers.Get(arg))
	}
	var r_ret = callframe.Nil
	Global.utility.printraw(r_ret.Addr(), frame.Array(0), 1)
	frame.Free()
}

func PrintVerbose(arg1 Variant, args ...Variant) {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(arg1))
	for _, arg := range args {
		callframe.Arg(frame, pointers.Get(arg))
	}
	var r_ret = callframe.Nil
	Global.utility.print_verbose(r_ret.Addr(), frame.Array(0), 1)
	frame.Free()
}

func PushError(arg1 Variant, args ...Variant) {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(arg1))
	for _, arg := range args {
		callframe.Arg(frame, pointers.Get(arg))
	}
	var r_ret = callframe.Nil
	Global.utility.push_error(r_ret.Addr(), frame.Array(0), 1)
	frame.Free()
}

func PushWarning(arg1 Variant, args ...Variant) {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(arg1))
	for _, arg := range args {
		callframe.Arg(frame, pointers.Get(arg))
	}
	var r_ret = callframe.Nil
	Global.utility.push_warning(r_ret.Addr(), frame.Array(0), 1)
	frame.Free()
}

func VarToStr(variable Variant) String {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(variable))
	var r_ret = callframe.Ret[[1]enginePointer](frame)
	Global.utility.var_to_str(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[String](r_ret.Get())
	frame.Free()
	return ret
}

func StrToVar(s String) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(s))
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.str_to_var(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func VarToBytes(variable Variant) PackedByteArray {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(variable))
	var r_ret = callframe.Ret[packedPointers](frame)
	Global.utility.var_to_bytes(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[PackedByteArray](r_ret.Get())
	frame.Free()
	return ret
}

func BytesToVar(bytes PackedByteArray) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(bytes))
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.bytes_to_var(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func VarToBytesWithObjects(variable Variant) PackedByteArray {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(variable))
	var r_ret = callframe.Ret[packedPointers](frame)
	Global.utility.var_to_bytes_with_objects(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[PackedByteArray](r_ret.Get())
	frame.Free()
	return ret
}

func BytesToVarWithObjects(bytes PackedByteArray) Variant {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(bytes))
	var r_ret = callframe.Ret[[3]uint64](frame)
	Global.utility.bytes_to_var_with_objects(r_ret.Addr(), frame.Array(0), 1)
	var ret = pointers.New[Variant](r_ret.Get())
	frame.Free()
	return ret
}

func Hash(variable Variant) int64 {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(variable))
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.hash(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func InstanceFromId(instance_id int64) Object {
	var frame = callframe.New()
	callframe.Arg(frame, instance_id)
	var r_ret = callframe.Ret[enginePointer](frame)
	Global.utility.instance_from_id(r_ret.Addr(), frame.Array(0), 1)
	var ret Object = PointerMustAssertInstanceID[Object](r_ret.Get())
	frame.Free()
	return ret
}

func IsInstanceIdValid(id int64) bool {
	var frame = callframe.New()
	callframe.Arg(frame, id)
	var r_ret = callframe.Ret[bool](frame)
	Global.utility.is_instance_id_valid(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func IsInstanceValid(instance Variant) bool {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(instance))
	var r_ret = callframe.Ret[bool](frame)
	Global.utility.is_instance_valid(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func RidAllocateId() int64 {
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	Global.utility.rid_allocate_id(r_ret.Addr(), frame.Array(0), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func RidFromInt64(base int64) RID {
	var frame = callframe.New()
	callframe.Arg(frame, base)
	var r_ret = callframe.Ret[RID](frame)
	Global.utility.rid_from_int64(r_ret.Addr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func IsSame(a Variant, b Variant) bool {
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(a))
	callframe.Arg(frame, pointers.Get(b))
	var r_ret = callframe.Ret[bool](frame)
	Global.utility.is_same(r_ret.Addr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) Virtual(name string) reflect.Value { return reflect.Value{} }

//go:nosplit
func (self RefCounted) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RefCounted) Virtual(name string) reflect.Value { return reflect.Value{} }
