//go:build !generate

// Code generated by the generate package DO NOT EDIT
package gdclass

import "reflect"
import "unsafe"
import "graphics.gd/internal/pointers"

type AESContext pointers.Trio[AESContext]

func (self AESContext) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AESContext) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AESContext) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AESContext) Virtual(name string) reflect.Value { return reflect.Value{} }

type AStar2D pointers.Trio[AStar2D]

func (self AStar2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AStar2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AStar2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AStar2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type AStar3D pointers.Trio[AStar3D]

func (self AStar3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AStar3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AStar3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AStar3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type AStarGrid2D pointers.Trio[AStarGrid2D]

func (self AStarGrid2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AStarGrid2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AStarGrid2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AStarGrid2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type AcceptDialog pointers.Trio[AcceptDialog]

func (self AcceptDialog) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AcceptDialog) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AcceptDialog) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AcceptDialog) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimatableBody2D pointers.Trio[AnimatableBody2D]

func (self AnimatableBody2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimatableBody2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimatableBody2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimatableBody2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimatableBody3D pointers.Trio[AnimatableBody3D]

func (self AnimatableBody3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimatableBody3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimatableBody3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimatableBody3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimatedSprite2D pointers.Trio[AnimatedSprite2D]

func (self AnimatedSprite2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimatedSprite2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimatedSprite2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimatedSprite2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimatedSprite3D pointers.Trio[AnimatedSprite3D]

func (self AnimatedSprite3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimatedSprite3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimatedSprite3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimatedSprite3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimatedTexture pointers.Trio[AnimatedTexture]

func (self AnimatedTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimatedTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimatedTexture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimatedTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type Animation pointers.Trio[Animation]

func (self Animation) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Animation) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Animation) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Animation) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationLibrary pointers.Trio[AnimationLibrary]

func (self AnimationLibrary) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationLibrary) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationLibrary) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationLibrary) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationMixer pointers.Trio[AnimationMixer]

func (self AnimationMixer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationMixer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationMixer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationMixer) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNode pointers.Trio[AnimationNode]

func (self AnimationNode) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNode) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNode) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationNode) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeAdd2 pointers.Trio[AnimationNodeAdd2]

func (self AnimationNodeAdd2) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeAdd2) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeAdd2) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationNodeAdd2) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeAdd3 pointers.Trio[AnimationNodeAdd3]

func (self AnimationNodeAdd3) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeAdd3) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeAdd3) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationNodeAdd3) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeAnimation pointers.Trio[AnimationNodeAnimation]

func (self AnimationNodeAnimation) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeAnimation) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeAnimation) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AnimationNodeAnimation) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeBlend2 pointers.Trio[AnimationNodeBlend2]

func (self AnimationNodeBlend2) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeBlend2) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeBlend2) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationNodeBlend2) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeBlend3 pointers.Trio[AnimationNodeBlend3]

func (self AnimationNodeBlend3) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeBlend3) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeBlend3) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationNodeBlend3) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeBlendSpace1D pointers.Trio[AnimationNodeBlendSpace1D]

func (self AnimationNodeBlendSpace1D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeBlendSpace1D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeBlendSpace1D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AnimationNodeBlendSpace1D) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeBlendSpace2D pointers.Trio[AnimationNodeBlendSpace2D]

func (self AnimationNodeBlendSpace2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeBlendSpace2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeBlendSpace2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AnimationNodeBlendSpace2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeBlendTree pointers.Trio[AnimationNodeBlendTree]

func (self AnimationNodeBlendTree) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeBlendTree) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeBlendTree) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AnimationNodeBlendTree) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeExtension pointers.Trio[AnimationNodeExtension]

func (self AnimationNodeExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AnimationNodeExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeOneShot pointers.Trio[AnimationNodeOneShot]

func (self AnimationNodeOneShot) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeOneShot) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeOneShot) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationNodeOneShot) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeOutput pointers.Trio[AnimationNodeOutput]

func (self AnimationNodeOutput) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeOutput) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeOutput) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationNodeOutput) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeStateMachine pointers.Trio[AnimationNodeStateMachine]

func (self AnimationNodeStateMachine) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeStateMachine) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeStateMachine) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AnimationNodeStateMachine) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeStateMachinePlayback pointers.Trio[AnimationNodeStateMachinePlayback]

func (self AnimationNodeStateMachinePlayback) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeStateMachinePlayback) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeStateMachinePlayback) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AnimationNodeStateMachinePlayback) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type AnimationNodeStateMachineTransition pointers.Trio[AnimationNodeStateMachineTransition]

func (self AnimationNodeStateMachineTransition) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeStateMachineTransition) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeStateMachineTransition) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AnimationNodeStateMachineTransition) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type AnimationNodeSub2 pointers.Trio[AnimationNodeSub2]

func (self AnimationNodeSub2) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeSub2) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeSub2) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationNodeSub2) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeSync pointers.Trio[AnimationNodeSync]

func (self AnimationNodeSync) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeSync) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeSync) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationNodeSync) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeTimeScale pointers.Trio[AnimationNodeTimeScale]

func (self AnimationNodeTimeScale) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeTimeScale) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeTimeScale) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AnimationNodeTimeScale) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeTimeSeek pointers.Trio[AnimationNodeTimeSeek]

func (self AnimationNodeTimeSeek) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeTimeSeek) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeTimeSeek) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationNodeTimeSeek) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationNodeTransition pointers.Trio[AnimationNodeTransition]

func (self AnimationNodeTransition) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationNodeTransition) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationNodeTransition) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AnimationNodeTransition) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationPlayer pointers.Trio[AnimationPlayer]

func (self AnimationPlayer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationPlayer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationPlayer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationPlayer) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationRootNode pointers.Trio[AnimationRootNode]

func (self AnimationRootNode) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationRootNode) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationRootNode) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationRootNode) Virtual(name string) reflect.Value { return reflect.Value{} }

type AnimationTree pointers.Trio[AnimationTree]

func (self AnimationTree) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AnimationTree) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AnimationTree) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AnimationTree) Virtual(name string) reflect.Value { return reflect.Value{} }

type Area2D pointers.Trio[Area2D]

func (self Area2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Area2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Area2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Area2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Area3D pointers.Trio[Area3D]

func (self Area3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Area3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Area3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Area3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type ArrayMesh pointers.Trio[ArrayMesh]

func (self ArrayMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ArrayMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ArrayMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ArrayMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type ArrayOccluder3D pointers.Trio[ArrayOccluder3D]

func (self ArrayOccluder3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ArrayOccluder3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ArrayOccluder3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ArrayOccluder3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type AspectRatioContainer pointers.Trio[AspectRatioContainer]

func (self AspectRatioContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AspectRatioContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AspectRatioContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AspectRatioContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type AtlasTexture pointers.Trio[AtlasTexture]

func (self AtlasTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AtlasTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AtlasTexture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AtlasTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioBusLayout pointers.Trio[AudioBusLayout]

func (self AudioBusLayout) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioBusLayout) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioBusLayout) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioBusLayout) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffect pointers.Trio[AudioEffect]

func (self AudioEffect) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffect) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffect) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffect) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectAmplify pointers.Trio[AudioEffectAmplify]

func (self AudioEffectAmplify) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectAmplify) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectAmplify) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectAmplify) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectBandLimitFilter pointers.Trio[AudioEffectBandLimitFilter]

func (self AudioEffectBandLimitFilter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectBandLimitFilter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectBandLimitFilter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioEffectBandLimitFilter) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectBandPassFilter pointers.Trio[AudioEffectBandPassFilter]

func (self AudioEffectBandPassFilter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectBandPassFilter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectBandPassFilter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioEffectBandPassFilter) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectCapture pointers.Trio[AudioEffectCapture]

func (self AudioEffectCapture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectCapture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectCapture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectCapture) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectChorus pointers.Trio[AudioEffectChorus]

func (self AudioEffectChorus) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectChorus) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectChorus) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectChorus) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectCompressor pointers.Trio[AudioEffectCompressor]

func (self AudioEffectCompressor) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectCompressor) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectCompressor) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectCompressor) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectDelay pointers.Trio[AudioEffectDelay]

func (self AudioEffectDelay) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectDelay) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectDelay) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectDelay) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectDistortion pointers.Trio[AudioEffectDistortion]

func (self AudioEffectDistortion) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectDistortion) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectDistortion) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectDistortion) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectEQ pointers.Trio[AudioEffectEQ]

func (self AudioEffectEQ) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectEQ) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectEQ) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectEQ) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectEQ10 pointers.Trio[AudioEffectEQ10]

func (self AudioEffectEQ10) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectEQ10) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectEQ10) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectEQ10) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectEQ21 pointers.Trio[AudioEffectEQ21]

func (self AudioEffectEQ21) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectEQ21) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectEQ21) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectEQ21) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectEQ6 pointers.Trio[AudioEffectEQ6]

func (self AudioEffectEQ6) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectEQ6) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectEQ6) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectEQ6) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectFilter pointers.Trio[AudioEffectFilter]

func (self AudioEffectFilter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectFilter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectFilter) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectFilter) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectHardLimiter pointers.Trio[AudioEffectHardLimiter]

func (self AudioEffectHardLimiter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectHardLimiter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectHardLimiter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioEffectHardLimiter) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectHighPassFilter pointers.Trio[AudioEffectHighPassFilter]

func (self AudioEffectHighPassFilter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectHighPassFilter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectHighPassFilter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioEffectHighPassFilter) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectHighShelfFilter pointers.Trio[AudioEffectHighShelfFilter]

func (self AudioEffectHighShelfFilter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectHighShelfFilter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectHighShelfFilter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioEffectHighShelfFilter) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectInstance pointers.Trio[AudioEffectInstance]

func (self AudioEffectInstance) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectInstance) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectInstance) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectInstance) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectLimiter pointers.Trio[AudioEffectLimiter]

func (self AudioEffectLimiter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectLimiter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectLimiter) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectLimiter) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectLowPassFilter pointers.Trio[AudioEffectLowPassFilter]

func (self AudioEffectLowPassFilter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectLowPassFilter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectLowPassFilter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioEffectLowPassFilter) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectLowShelfFilter pointers.Trio[AudioEffectLowShelfFilter]

func (self AudioEffectLowShelfFilter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectLowShelfFilter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectLowShelfFilter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioEffectLowShelfFilter) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectNotchFilter pointers.Trio[AudioEffectNotchFilter]

func (self AudioEffectNotchFilter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectNotchFilter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectNotchFilter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioEffectNotchFilter) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectPanner pointers.Trio[AudioEffectPanner]

func (self AudioEffectPanner) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectPanner) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectPanner) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectPanner) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectPhaser pointers.Trio[AudioEffectPhaser]

func (self AudioEffectPhaser) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectPhaser) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectPhaser) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectPhaser) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectPitchShift pointers.Trio[AudioEffectPitchShift]

func (self AudioEffectPitchShift) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectPitchShift) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectPitchShift) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectPitchShift) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectRecord pointers.Trio[AudioEffectRecord]

func (self AudioEffectRecord) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectRecord) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectRecord) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectRecord) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectReverb pointers.Trio[AudioEffectReverb]

func (self AudioEffectReverb) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectReverb) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectReverb) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioEffectReverb) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectSpectrumAnalyzer pointers.Trio[AudioEffectSpectrumAnalyzer]

func (self AudioEffectSpectrumAnalyzer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectSpectrumAnalyzer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectSpectrumAnalyzer) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioEffectSpectrumAnalyzer) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioEffectSpectrumAnalyzerInstance pointers.Trio[AudioEffectSpectrumAnalyzerInstance]

func (self AudioEffectSpectrumAnalyzerInstance) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectSpectrumAnalyzerInstance) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectSpectrumAnalyzerInstance) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioEffectSpectrumAnalyzerInstance) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type AudioEffectStereoEnhance pointers.Trio[AudioEffectStereoEnhance]

func (self AudioEffectStereoEnhance) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioEffectStereoEnhance) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioEffectStereoEnhance) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioEffectStereoEnhance) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioListener2D pointers.Trio[AudioListener2D]

func (self AudioListener2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioListener2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioListener2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioListener2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioListener3D pointers.Trio[AudioListener3D]

func (self AudioListener3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioListener3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioListener3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioListener3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioSample pointers.Trio[AudioSample]

func (self AudioSample) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioSample) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioSample) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioSample) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioSamplePlayback pointers.Trio[AudioSamplePlayback]

func (self AudioSamplePlayback) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioSamplePlayback) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioSamplePlayback) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioSamplePlayback) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioServer pointers.Trio[AudioServer]

func (self AudioServer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioServer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioServer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioServer) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStream pointers.Trio[AudioStream]

func (self AudioStream) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStream) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStream) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioStream) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamGenerator pointers.Trio[AudioStreamGenerator]

func (self AudioStreamGenerator) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamGenerator) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamGenerator) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioStreamGenerator) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamGeneratorPlayback pointers.Trio[AudioStreamGeneratorPlayback]

func (self AudioStreamGeneratorPlayback) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamGeneratorPlayback) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamGeneratorPlayback) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioStreamGeneratorPlayback) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamInteractive pointers.Trio[AudioStreamInteractive]

func (self AudioStreamInteractive) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamInteractive) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamInteractive) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioStreamInteractive) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamMP3 pointers.Trio[AudioStreamMP3]

func (self AudioStreamMP3) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamMP3) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamMP3) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioStreamMP3) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamMicrophone pointers.Trio[AudioStreamMicrophone]

func (self AudioStreamMicrophone) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamMicrophone) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamMicrophone) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioStreamMicrophone) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamOggVorbis pointers.Trio[AudioStreamOggVorbis]

func (self AudioStreamOggVorbis) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamOggVorbis) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamOggVorbis) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioStreamOggVorbis) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamPlayback pointers.Trio[AudioStreamPlayback]

func (self AudioStreamPlayback) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamPlayback) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamPlayback) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioStreamPlayback) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamPlaybackInteractive pointers.Trio[AudioStreamPlaybackInteractive]

func (self AudioStreamPlaybackInteractive) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamPlaybackInteractive) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamPlaybackInteractive) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioStreamPlaybackInteractive) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamPlaybackOggVorbis pointers.Trio[AudioStreamPlaybackOggVorbis]

func (self AudioStreamPlaybackOggVorbis) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamPlaybackOggVorbis) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamPlaybackOggVorbis) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioStreamPlaybackOggVorbis) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamPlaybackPlaylist pointers.Trio[AudioStreamPlaybackPlaylist]

func (self AudioStreamPlaybackPlaylist) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamPlaybackPlaylist) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamPlaybackPlaylist) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioStreamPlaybackPlaylist) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamPlaybackPolyphonic pointers.Trio[AudioStreamPlaybackPolyphonic]

func (self AudioStreamPlaybackPolyphonic) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamPlaybackPolyphonic) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamPlaybackPolyphonic) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioStreamPlaybackPolyphonic) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamPlaybackResampled pointers.Trio[AudioStreamPlaybackResampled]

func (self AudioStreamPlaybackResampled) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamPlaybackResampled) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamPlaybackResampled) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioStreamPlaybackResampled) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamPlaybackSynchronized pointers.Trio[AudioStreamPlaybackSynchronized]

func (self AudioStreamPlaybackSynchronized) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamPlaybackSynchronized) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamPlaybackSynchronized) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioStreamPlaybackSynchronized) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type AudioStreamPlayer pointers.Trio[AudioStreamPlayer]

func (self AudioStreamPlayer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamPlayer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamPlayer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioStreamPlayer) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamPlayer2D pointers.Trio[AudioStreamPlayer2D]

func (self AudioStreamPlayer2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamPlayer2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamPlayer2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioStreamPlayer2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamPlayer3D pointers.Trio[AudioStreamPlayer3D]

func (self AudioStreamPlayer3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamPlayer3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamPlayer3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioStreamPlayer3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamPlaylist pointers.Trio[AudioStreamPlaylist]

func (self AudioStreamPlaylist) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamPlaylist) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamPlaylist) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioStreamPlaylist) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamPolyphonic pointers.Trio[AudioStreamPolyphonic]

func (self AudioStreamPolyphonic) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamPolyphonic) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamPolyphonic) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioStreamPolyphonic) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamRandomizer pointers.Trio[AudioStreamRandomizer]

func (self AudioStreamRandomizer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamRandomizer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamRandomizer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioStreamRandomizer) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamSynchronized pointers.Trio[AudioStreamSynchronized]

func (self AudioStreamSynchronized) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamSynchronized) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamSynchronized) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self AudioStreamSynchronized) Virtual(name string) reflect.Value { return reflect.Value{} }

type AudioStreamWAV pointers.Trio[AudioStreamWAV]

func (self AudioStreamWAV) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self AudioStreamWAV) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self AudioStreamWAV) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self AudioStreamWAV) Virtual(name string) reflect.Value { return reflect.Value{} }

type BackBufferCopy pointers.Trio[BackBufferCopy]

func (self BackBufferCopy) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self BackBufferCopy) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self BackBufferCopy) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self BackBufferCopy) Virtual(name string) reflect.Value { return reflect.Value{} }

type BaseButton pointers.Trio[BaseButton]

func (self BaseButton) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self BaseButton) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self BaseButton) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self BaseButton) Virtual(name string) reflect.Value { return reflect.Value{} }

type BaseMaterial3D pointers.Trio[BaseMaterial3D]

func (self BaseMaterial3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self BaseMaterial3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self BaseMaterial3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self BaseMaterial3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type BitMap pointers.Trio[BitMap]

func (self BitMap) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self BitMap) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self BitMap) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self BitMap) Virtual(name string) reflect.Value { return reflect.Value{} }

type BlaziumClient pointers.Trio[BlaziumClient]

func (self BlaziumClient) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self BlaziumClient) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self BlaziumClient) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self BlaziumClient) Virtual(name string) reflect.Value { return reflect.Value{} }

type Bone2D pointers.Trio[Bone2D]

func (self Bone2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Bone2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Bone2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Bone2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type BoneAttachment3D pointers.Trio[BoneAttachment3D]

func (self BoneAttachment3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self BoneAttachment3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self BoneAttachment3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self BoneAttachment3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type BoneMap pointers.Trio[BoneMap]

func (self BoneMap) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self BoneMap) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self BoneMap) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self BoneMap) Virtual(name string) reflect.Value { return reflect.Value{} }

type BoxContainer pointers.Trio[BoxContainer]

func (self BoxContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self BoxContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self BoxContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self BoxContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type BoxMesh pointers.Trio[BoxMesh]

func (self BoxMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self BoxMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self BoxMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self BoxMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type BoxOccluder3D pointers.Trio[BoxOccluder3D]

func (self BoxOccluder3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self BoxOccluder3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self BoxOccluder3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self BoxOccluder3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type BoxShape3D pointers.Trio[BoxShape3D]

func (self BoxShape3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self BoxShape3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self BoxShape3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self BoxShape3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Button pointers.Trio[Button]

func (self Button) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Button) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Button) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Button) Virtual(name string) reflect.Value { return reflect.Value{} }

type ButtonGroup pointers.Trio[ButtonGroup]

func (self ButtonGroup) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ButtonGroup) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ButtonGroup) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ButtonGroup) Virtual(name string) reflect.Value { return reflect.Value{} }

type CPUParticles2D pointers.Trio[CPUParticles2D]

func (self CPUParticles2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CPUParticles2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CPUParticles2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CPUParticles2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CPUParticles3D pointers.Trio[CPUParticles3D]

func (self CPUParticles3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CPUParticles3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CPUParticles3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CPUParticles3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CSGBox3D pointers.Trio[CSGBox3D]

func (self CSGBox3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CSGBox3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CSGBox3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CSGBox3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CSGCombiner3D pointers.Trio[CSGCombiner3D]

func (self CSGCombiner3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CSGCombiner3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CSGCombiner3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CSGCombiner3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CSGCylinder3D pointers.Trio[CSGCylinder3D]

func (self CSGCylinder3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CSGCylinder3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CSGCylinder3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CSGCylinder3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CSGMesh3D pointers.Trio[CSGMesh3D]

func (self CSGMesh3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CSGMesh3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CSGMesh3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CSGMesh3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CSGPolygon3D pointers.Trio[CSGPolygon3D]

func (self CSGPolygon3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CSGPolygon3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CSGPolygon3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CSGPolygon3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CSGPrimitive3D pointers.Trio[CSGPrimitive3D]

func (self CSGPrimitive3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CSGPrimitive3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CSGPrimitive3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CSGPrimitive3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CSGShape3D pointers.Trio[CSGShape3D]

func (self CSGShape3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CSGShape3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CSGShape3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CSGShape3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CSGSphere3D pointers.Trio[CSGSphere3D]

func (self CSGSphere3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CSGSphere3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CSGSphere3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CSGSphere3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CSGTorus3D pointers.Trio[CSGTorus3D]

func (self CSGTorus3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CSGTorus3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CSGTorus3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CSGTorus3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CSV pointers.Trio[CSV]

func (self CSV) Free()                      { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CSV) IsAlive(raw [3]uint64) bool { return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw) }

//go:nosplit
func (self CSV) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CSV) Virtual(name string) reflect.Value { return reflect.Value{} }

type CallbackTweener pointers.Trio[CallbackTweener]

func (self CallbackTweener) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CallbackTweener) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CallbackTweener) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CallbackTweener) Virtual(name string) reflect.Value { return reflect.Value{} }

type Camera2D pointers.Trio[Camera2D]

func (self Camera2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Camera2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Camera2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Camera2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Camera3D pointers.Trio[Camera3D]

func (self Camera3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Camera3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Camera3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Camera3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CameraAttributes pointers.Trio[CameraAttributes]

func (self CameraAttributes) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CameraAttributes) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CameraAttributes) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CameraAttributes) Virtual(name string) reflect.Value { return reflect.Value{} }

type CameraAttributesPhysical pointers.Trio[CameraAttributesPhysical]

func (self CameraAttributesPhysical) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CameraAttributesPhysical) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CameraAttributesPhysical) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self CameraAttributesPhysical) Virtual(name string) reflect.Value { return reflect.Value{} }

type CameraAttributesPractical pointers.Trio[CameraAttributesPractical]

func (self CameraAttributesPractical) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CameraAttributesPractical) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CameraAttributesPractical) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self CameraAttributesPractical) Virtual(name string) reflect.Value { return reflect.Value{} }

type CameraFeed pointers.Trio[CameraFeed]

func (self CameraFeed) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CameraFeed) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CameraFeed) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CameraFeed) Virtual(name string) reflect.Value { return reflect.Value{} }

type CameraServer pointers.Trio[CameraServer]

func (self CameraServer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CameraServer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CameraServer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CameraServer) Virtual(name string) reflect.Value { return reflect.Value{} }

type CameraTexture pointers.Trio[CameraTexture]

func (self CameraTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CameraTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CameraTexture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CameraTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type CanvasGroup pointers.Trio[CanvasGroup]

func (self CanvasGroup) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CanvasGroup) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CanvasGroup) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CanvasGroup) Virtual(name string) reflect.Value { return reflect.Value{} }

type CanvasItem pointers.Trio[CanvasItem]

func (self CanvasItem) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CanvasItem) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CanvasItem) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CanvasItem) Virtual(name string) reflect.Value { return reflect.Value{} }

type CanvasItemMaterial pointers.Trio[CanvasItemMaterial]

func (self CanvasItemMaterial) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CanvasItemMaterial) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CanvasItemMaterial) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CanvasItemMaterial) Virtual(name string) reflect.Value { return reflect.Value{} }

type CanvasLayer pointers.Trio[CanvasLayer]

func (self CanvasLayer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CanvasLayer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CanvasLayer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CanvasLayer) Virtual(name string) reflect.Value { return reflect.Value{} }

type CanvasModulate pointers.Trio[CanvasModulate]

func (self CanvasModulate) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CanvasModulate) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CanvasModulate) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CanvasModulate) Virtual(name string) reflect.Value { return reflect.Value{} }

type CanvasTexture pointers.Trio[CanvasTexture]

func (self CanvasTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CanvasTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CanvasTexture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CanvasTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type CapsuleMesh pointers.Trio[CapsuleMesh]

func (self CapsuleMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CapsuleMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CapsuleMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CapsuleMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type CapsuleShape2D pointers.Trio[CapsuleShape2D]

func (self CapsuleShape2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CapsuleShape2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CapsuleShape2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CapsuleShape2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CapsuleShape3D pointers.Trio[CapsuleShape3D]

func (self CapsuleShape3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CapsuleShape3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CapsuleShape3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CapsuleShape3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CenterContainer pointers.Trio[CenterContainer]

func (self CenterContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CenterContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CenterContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CenterContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type CharFXTransform pointers.Trio[CharFXTransform]

func (self CharFXTransform) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CharFXTransform) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CharFXTransform) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CharFXTransform) Virtual(name string) reflect.Value { return reflect.Value{} }

type CharacterBody2D pointers.Trio[CharacterBody2D]

func (self CharacterBody2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CharacterBody2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CharacterBody2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CharacterBody2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CharacterBody3D pointers.Trio[CharacterBody3D]

func (self CharacterBody3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CharacterBody3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CharacterBody3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CharacterBody3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CheckBox pointers.Trio[CheckBox]

func (self CheckBox) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CheckBox) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CheckBox) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CheckBox) Virtual(name string) reflect.Value { return reflect.Value{} }

type CheckButton pointers.Trio[CheckButton]

func (self CheckButton) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CheckButton) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CheckButton) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CheckButton) Virtual(name string) reflect.Value { return reflect.Value{} }

type CircleShape2D pointers.Trio[CircleShape2D]

func (self CircleShape2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CircleShape2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CircleShape2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CircleShape2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type ClassDB pointers.Trio[ClassDB]

func (self ClassDB) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ClassDB) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ClassDB) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ClassDB) Virtual(name string) reflect.Value { return reflect.Value{} }

type CodeEdit pointers.Trio[CodeEdit]

func (self CodeEdit) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CodeEdit) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CodeEdit) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CodeEdit) Virtual(name string) reflect.Value { return reflect.Value{} }

type CodeHighlighter pointers.Trio[CodeHighlighter]

func (self CodeHighlighter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CodeHighlighter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CodeHighlighter) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CodeHighlighter) Virtual(name string) reflect.Value { return reflect.Value{} }

type CollisionObject2D pointers.Trio[CollisionObject2D]

func (self CollisionObject2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CollisionObject2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CollisionObject2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CollisionObject2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CollisionObject3D pointers.Trio[CollisionObject3D]

func (self CollisionObject3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CollisionObject3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CollisionObject3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CollisionObject3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CollisionPolygon2D pointers.Trio[CollisionPolygon2D]

func (self CollisionPolygon2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CollisionPolygon2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CollisionPolygon2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CollisionPolygon2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CollisionPolygon3D pointers.Trio[CollisionPolygon3D]

func (self CollisionPolygon3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CollisionPolygon3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CollisionPolygon3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CollisionPolygon3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CollisionShape2D pointers.Trio[CollisionShape2D]

func (self CollisionShape2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CollisionShape2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CollisionShape2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CollisionShape2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CollisionShape3D pointers.Trio[CollisionShape3D]

func (self CollisionShape3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CollisionShape3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CollisionShape3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CollisionShape3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type ColorButton pointers.Trio[ColorButton]

func (self ColorButton) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ColorButton) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ColorButton) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ColorButton) Virtual(name string) reflect.Value { return reflect.Value{} }

type ColorPalette pointers.Trio[ColorPalette]

func (self ColorPalette) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ColorPalette) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ColorPalette) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ColorPalette) Virtual(name string) reflect.Value { return reflect.Value{} }

type ColorPicker pointers.Trio[ColorPicker]

func (self ColorPicker) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ColorPicker) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ColorPicker) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ColorPicker) Virtual(name string) reflect.Value { return reflect.Value{} }

type ColorPickerButton pointers.Trio[ColorPickerButton]

func (self ColorPickerButton) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ColorPickerButton) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ColorPickerButton) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ColorPickerButton) Virtual(name string) reflect.Value { return reflect.Value{} }

type ColorRect pointers.Trio[ColorRect]

func (self ColorRect) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ColorRect) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ColorRect) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ColorRect) Virtual(name string) reflect.Value { return reflect.Value{} }

type Compositor pointers.Trio[Compositor]

func (self Compositor) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Compositor) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Compositor) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Compositor) Virtual(name string) reflect.Value { return reflect.Value{} }

type CompositorEffect pointers.Trio[CompositorEffect]

func (self CompositorEffect) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CompositorEffect) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CompositorEffect) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CompositorEffect) Virtual(name string) reflect.Value { return reflect.Value{} }

type CompressedCubemap pointers.Trio[CompressedCubemap]

func (self CompressedCubemap) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CompressedCubemap) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CompressedCubemap) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CompressedCubemap) Virtual(name string) reflect.Value { return reflect.Value{} }

type CompressedCubemapArray pointers.Trio[CompressedCubemapArray]

func (self CompressedCubemapArray) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CompressedCubemapArray) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CompressedCubemapArray) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self CompressedCubemapArray) Virtual(name string) reflect.Value { return reflect.Value{} }

type CompressedTexture2D pointers.Trio[CompressedTexture2D]

func (self CompressedTexture2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CompressedTexture2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CompressedTexture2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CompressedTexture2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CompressedTexture2DArray pointers.Trio[CompressedTexture2DArray]

func (self CompressedTexture2DArray) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CompressedTexture2DArray) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CompressedTexture2DArray) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self CompressedTexture2DArray) Virtual(name string) reflect.Value { return reflect.Value{} }

type CompressedTexture3D pointers.Trio[CompressedTexture3D]

func (self CompressedTexture3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CompressedTexture3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CompressedTexture3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CompressedTexture3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CompressedTextureLayered pointers.Trio[CompressedTextureLayered]

func (self CompressedTextureLayered) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CompressedTextureLayered) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CompressedTextureLayered) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self CompressedTextureLayered) Virtual(name string) reflect.Value { return reflect.Value{} }

type ConcavePolygonShape2D pointers.Trio[ConcavePolygonShape2D]

func (self ConcavePolygonShape2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ConcavePolygonShape2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ConcavePolygonShape2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ConcavePolygonShape2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type ConcavePolygonShape3D pointers.Trio[ConcavePolygonShape3D]

func (self ConcavePolygonShape3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ConcavePolygonShape3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ConcavePolygonShape3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ConcavePolygonShape3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type ConeTwistJoint3D pointers.Trio[ConeTwistJoint3D]

func (self ConeTwistJoint3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ConeTwistJoint3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ConeTwistJoint3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ConeTwistJoint3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type ConfigFile pointers.Trio[ConfigFile]

func (self ConfigFile) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ConfigFile) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ConfigFile) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ConfigFile) Virtual(name string) reflect.Value { return reflect.Value{} }

type ConfirmationDialog pointers.Trio[ConfirmationDialog]

func (self ConfirmationDialog) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ConfirmationDialog) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ConfirmationDialog) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ConfirmationDialog) Virtual(name string) reflect.Value { return reflect.Value{} }

type Container pointers.Trio[Container]

func (self Container) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Container) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Container) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Container) Virtual(name string) reflect.Value { return reflect.Value{} }

type Control pointers.Trio[Control]

func (self Control) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Control) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Control) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Control) Virtual(name string) reflect.Value { return reflect.Value{} }

type ConvexPolygonShape2D pointers.Trio[ConvexPolygonShape2D]

func (self ConvexPolygonShape2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ConvexPolygonShape2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ConvexPolygonShape2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ConvexPolygonShape2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type ConvexPolygonShape3D pointers.Trio[ConvexPolygonShape3D]

func (self ConvexPolygonShape3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ConvexPolygonShape3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ConvexPolygonShape3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ConvexPolygonShape3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Crypto pointers.Trio[Crypto]

func (self Crypto) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Crypto) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Crypto) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Crypto) Virtual(name string) reflect.Value { return reflect.Value{} }

type CryptoKey pointers.Trio[CryptoKey]

func (self CryptoKey) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CryptoKey) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CryptoKey) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CryptoKey) Virtual(name string) reflect.Value { return reflect.Value{} }

type Cubemap pointers.Trio[Cubemap]

func (self Cubemap) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Cubemap) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Cubemap) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Cubemap) Virtual(name string) reflect.Value { return reflect.Value{} }

type CubemapArray pointers.Trio[CubemapArray]

func (self CubemapArray) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CubemapArray) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CubemapArray) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CubemapArray) Virtual(name string) reflect.Value { return reflect.Value{} }

type Curve pointers.Trio[Curve]

func (self Curve) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Curve) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Curve) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Curve) Virtual(name string) reflect.Value { return reflect.Value{} }

type Curve2D pointers.Trio[Curve2D]

func (self Curve2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Curve2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Curve2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Curve2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Curve3D pointers.Trio[Curve3D]

func (self Curve3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Curve3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Curve3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Curve3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type CurveTexture pointers.Trio[CurveTexture]

func (self CurveTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CurveTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CurveTexture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CurveTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type CurveXYZTexture pointers.Trio[CurveXYZTexture]

func (self CurveXYZTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CurveXYZTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CurveXYZTexture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CurveXYZTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type CylinderMesh pointers.Trio[CylinderMesh]

func (self CylinderMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CylinderMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CylinderMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CylinderMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type CylinderShape3D pointers.Trio[CylinderShape3D]

func (self CylinderShape3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self CylinderShape3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self CylinderShape3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self CylinderShape3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type DTLSServer pointers.Trio[DTLSServer]

func (self DTLSServer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self DTLSServer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self DTLSServer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self DTLSServer) Virtual(name string) reflect.Value { return reflect.Value{} }

type DampedSpringJoint2D pointers.Trio[DampedSpringJoint2D]

func (self DampedSpringJoint2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self DampedSpringJoint2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self DampedSpringJoint2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self DampedSpringJoint2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Decal pointers.Trio[Decal]

func (self Decal) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Decal) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Decal) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Decal) Virtual(name string) reflect.Value { return reflect.Value{} }

type DirAccess pointers.Trio[DirAccess]

func (self DirAccess) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self DirAccess) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self DirAccess) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self DirAccess) Virtual(name string) reflect.Value { return reflect.Value{} }

type DirectionalLight2D pointers.Trio[DirectionalLight2D]

func (self DirectionalLight2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self DirectionalLight2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self DirectionalLight2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self DirectionalLight2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type DirectionalLight3D pointers.Trio[DirectionalLight3D]

func (self DirectionalLight3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self DirectionalLight3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self DirectionalLight3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self DirectionalLight3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type DiscordEmbeddedAppClient pointers.Trio[DiscordEmbeddedAppClient]

func (self DiscordEmbeddedAppClient) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self DiscordEmbeddedAppClient) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self DiscordEmbeddedAppClient) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self DiscordEmbeddedAppClient) Virtual(name string) reflect.Value { return reflect.Value{} }

type DiscordEmbeddedAppResponse pointers.Trio[DiscordEmbeddedAppResponse]

func (self DiscordEmbeddedAppResponse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self DiscordEmbeddedAppResponse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self DiscordEmbeddedAppResponse) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self DiscordEmbeddedAppResponse) Virtual(name string) reflect.Value { return reflect.Value{} }

type DiscordEmbeddedAppResult pointers.Trio[DiscordEmbeddedAppResult]

func (self DiscordEmbeddedAppResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self DiscordEmbeddedAppResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self DiscordEmbeddedAppResult) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self DiscordEmbeddedAppResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type DisplayServer pointers.Trio[DisplayServer]

func (self DisplayServer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self DisplayServer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self DisplayServer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self DisplayServer) Virtual(name string) reflect.Value { return reflect.Value{} }

type ENV pointers.Trio[ENV]

func (self ENV) Free()                      { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ENV) IsAlive(raw [3]uint64) bool { return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw) }

//go:nosplit
func (self ENV) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ENV) Virtual(name string) reflect.Value { return reflect.Value{} }

type ENetConnection pointers.Trio[ENetConnection]

func (self ENetConnection) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ENetConnection) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ENetConnection) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ENetConnection) Virtual(name string) reflect.Value { return reflect.Value{} }

type ENetMultiplayerPeer pointers.Trio[ENetMultiplayerPeer]

func (self ENetMultiplayerPeer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ENetMultiplayerPeer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ENetMultiplayerPeer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ENetMultiplayerPeer) Virtual(name string) reflect.Value { return reflect.Value{} }

type ENetPacketPeer pointers.Trio[ENetPacketPeer]

func (self ENetPacketPeer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ENetPacketPeer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ENetPacketPeer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ENetPacketPeer) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorCommandPalette pointers.Trio[EditorCommandPalette]

func (self EditorCommandPalette) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorCommandPalette) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorCommandPalette) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorCommandPalette) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorContextMenuPlugin pointers.Trio[EditorContextMenuPlugin]

func (self EditorContextMenuPlugin) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorContextMenuPlugin) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorContextMenuPlugin) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorContextMenuPlugin) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorDebuggerPlugin pointers.Trio[EditorDebuggerPlugin]

func (self EditorDebuggerPlugin) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorDebuggerPlugin) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorDebuggerPlugin) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorDebuggerPlugin) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorDebuggerSession pointers.Trio[EditorDebuggerSession]

func (self EditorDebuggerSession) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorDebuggerSession) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorDebuggerSession) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorDebuggerSession) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorExportPlatform pointers.Trio[EditorExportPlatform]

func (self EditorExportPlatform) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorExportPlatform) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorExportPlatform) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorExportPlatform) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorExportPlatformAndroid pointers.Trio[EditorExportPlatformAndroid]

func (self EditorExportPlatformAndroid) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorExportPlatformAndroid) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorExportPlatformAndroid) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorExportPlatformAndroid) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorExportPlatformExtension pointers.Trio[EditorExportPlatformExtension]

func (self EditorExportPlatformExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorExportPlatformExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorExportPlatformExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorExportPlatformExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorExportPlatformIOS pointers.Trio[EditorExportPlatformIOS]

func (self EditorExportPlatformIOS) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorExportPlatformIOS) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorExportPlatformIOS) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorExportPlatformIOS) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorExportPlatformLinuxBSD pointers.Trio[EditorExportPlatformLinuxBSD]

func (self EditorExportPlatformLinuxBSD) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorExportPlatformLinuxBSD) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorExportPlatformLinuxBSD) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorExportPlatformLinuxBSD) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorExportPlatformMacOS pointers.Trio[EditorExportPlatformMacOS]

func (self EditorExportPlatformMacOS) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorExportPlatformMacOS) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorExportPlatformMacOS) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorExportPlatformMacOS) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorExportPlatformPC pointers.Trio[EditorExportPlatformPC]

func (self EditorExportPlatformPC) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorExportPlatformPC) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorExportPlatformPC) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorExportPlatformPC) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorExportPlatformWeb pointers.Trio[EditorExportPlatformWeb]

func (self EditorExportPlatformWeb) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorExportPlatformWeb) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorExportPlatformWeb) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorExportPlatformWeb) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorExportPlatformWindows pointers.Trio[EditorExportPlatformWindows]

func (self EditorExportPlatformWindows) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorExportPlatformWindows) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorExportPlatformWindows) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorExportPlatformWindows) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorExportPlugin pointers.Trio[EditorExportPlugin]

func (self EditorExportPlugin) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorExportPlugin) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorExportPlugin) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorExportPlugin) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorExportPreset pointers.Trio[EditorExportPreset]

func (self EditorExportPreset) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorExportPreset) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorExportPreset) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorExportPreset) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorFeatureProfile pointers.Trio[EditorFeatureProfile]

func (self EditorFeatureProfile) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorFeatureProfile) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorFeatureProfile) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorFeatureProfile) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorFileDialog pointers.Trio[EditorFileDialog]

func (self EditorFileDialog) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorFileDialog) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorFileDialog) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorFileDialog) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorFileSystem pointers.Trio[EditorFileSystem]

func (self EditorFileSystem) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorFileSystem) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorFileSystem) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorFileSystem) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorFileSystemDirectory pointers.Trio[EditorFileSystemDirectory]

func (self EditorFileSystemDirectory) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorFileSystemDirectory) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorFileSystemDirectory) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorFileSystemDirectory) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorFileSystemImportFormatSupportQuery pointers.Trio[EditorFileSystemImportFormatSupportQuery]

func (self EditorFileSystemImportFormatSupportQuery) Free() {
	(*(*Object)(unsafe.Pointer(&self))).Free()
}
func (self EditorFileSystemImportFormatSupportQuery) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorFileSystemImportFormatSupportQuery) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorFileSystemImportFormatSupportQuery) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type EditorHScrollBox pointers.Trio[EditorHScrollBox]

func (self EditorHScrollBox) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorHScrollBox) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorHScrollBox) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorHScrollBox) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorImportPlugin pointers.Trio[EditorImportPlugin]

func (self EditorImportPlugin) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorImportPlugin) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorImportPlugin) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorImportPlugin) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorInspector pointers.Trio[EditorInspector]

func (self EditorInspector) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorInspector) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorInspector) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorInspector) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorInspectorPlugin pointers.Trio[EditorInspectorPlugin]

func (self EditorInspectorPlugin) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorInspectorPlugin) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorInspectorPlugin) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorInspectorPlugin) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorInterface pointers.Trio[EditorInterface]

func (self EditorInterface) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorInterface) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorInterface) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorInterface) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorNode3DGizmo pointers.Trio[EditorNode3DGizmo]

func (self EditorNode3DGizmo) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorNode3DGizmo) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorNode3DGizmo) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorNode3DGizmo) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorNode3DGizmoPlugin pointers.Trio[EditorNode3DGizmoPlugin]

func (self EditorNode3DGizmoPlugin) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorNode3DGizmoPlugin) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorNode3DGizmoPlugin) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorNode3DGizmoPlugin) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorPaths pointers.Trio[EditorPaths]

func (self EditorPaths) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorPaths) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorPaths) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorPaths) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorPlugin pointers.Trio[EditorPlugin]

func (self EditorPlugin) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorPlugin) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorPlugin) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorPlugin) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorProperty pointers.Trio[EditorProperty]

func (self EditorProperty) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorProperty) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorProperty) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorProperty) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorResourceConversionPlugin pointers.Trio[EditorResourceConversionPlugin]

func (self EditorResourceConversionPlugin) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorResourceConversionPlugin) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorResourceConversionPlugin) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorResourceConversionPlugin) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorResourcePicker pointers.Trio[EditorResourcePicker]

func (self EditorResourcePicker) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorResourcePicker) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorResourcePicker) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorResourcePicker) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorResourcePreview pointers.Trio[EditorResourcePreview]

func (self EditorResourcePreview) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorResourcePreview) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorResourcePreview) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorResourcePreview) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorResourcePreviewGenerator pointers.Trio[EditorResourcePreviewGenerator]

func (self EditorResourcePreviewGenerator) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorResourcePreviewGenerator) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorResourcePreviewGenerator) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorResourcePreviewGenerator) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorResourceTooltipPlugin pointers.Trio[EditorResourceTooltipPlugin]

func (self EditorResourceTooltipPlugin) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorResourceTooltipPlugin) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorResourceTooltipPlugin) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorResourceTooltipPlugin) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorSceneFormatImporter pointers.Trio[EditorSceneFormatImporter]

func (self EditorSceneFormatImporter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorSceneFormatImporter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorSceneFormatImporter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorSceneFormatImporter) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorSceneFormatImporterBlend pointers.Trio[EditorSceneFormatImporterBlend]

func (self EditorSceneFormatImporterBlend) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorSceneFormatImporterBlend) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorSceneFormatImporterBlend) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorSceneFormatImporterBlend) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorSceneFormatImporterFBX2GLTF pointers.Trio[EditorSceneFormatImporterFBX2GLTF]

func (self EditorSceneFormatImporterFBX2GLTF) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorSceneFormatImporterFBX2GLTF) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorSceneFormatImporterFBX2GLTF) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorSceneFormatImporterFBX2GLTF) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type EditorSceneFormatImporterGLTF pointers.Trio[EditorSceneFormatImporterGLTF]

func (self EditorSceneFormatImporterGLTF) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorSceneFormatImporterGLTF) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorSceneFormatImporterGLTF) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorSceneFormatImporterGLTF) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorSceneFormatImporterUFBX pointers.Trio[EditorSceneFormatImporterUFBX]

func (self EditorSceneFormatImporterUFBX) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorSceneFormatImporterUFBX) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorSceneFormatImporterUFBX) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorSceneFormatImporterUFBX) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorScenePostImport pointers.Trio[EditorScenePostImport]

func (self EditorScenePostImport) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorScenePostImport) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorScenePostImport) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorScenePostImport) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorScenePostImportPlugin pointers.Trio[EditorScenePostImportPlugin]

func (self EditorScenePostImportPlugin) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorScenePostImportPlugin) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorScenePostImportPlugin) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorScenePostImportPlugin) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorScript pointers.Trio[EditorScript]

func (self EditorScript) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorScript) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorScript) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorScript) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorScriptPicker pointers.Trio[EditorScriptPicker]

func (self EditorScriptPicker) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorScriptPicker) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorScriptPicker) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorScriptPicker) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorScrollBox pointers.Trio[EditorScrollBox]

func (self EditorScrollBox) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorScrollBox) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorScrollBox) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorScrollBox) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorSelection pointers.Trio[EditorSelection]

func (self EditorSelection) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorSelection) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorSelection) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorSelection) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorSettings pointers.Trio[EditorSettings]

func (self EditorSettings) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorSettings) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorSettings) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorSettings) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorSpinSlider pointers.Trio[EditorSpinSlider]

func (self EditorSpinSlider) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorSpinSlider) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorSpinSlider) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorSpinSlider) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorSyntaxHighlighter pointers.Trio[EditorSyntaxHighlighter]

func (self EditorSyntaxHighlighter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorSyntaxHighlighter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorSyntaxHighlighter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorSyntaxHighlighter) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorToaster pointers.Trio[EditorToaster]

func (self EditorToaster) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorToaster) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorToaster) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorToaster) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorTranslationParserPlugin pointers.Trio[EditorTranslationParserPlugin]

func (self EditorTranslationParserPlugin) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorTranslationParserPlugin) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorTranslationParserPlugin) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self EditorTranslationParserPlugin) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorUndoRedoManager pointers.Trio[EditorUndoRedoManager]

func (self EditorUndoRedoManager) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorUndoRedoManager) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorUndoRedoManager) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorUndoRedoManager) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorVCSInterface pointers.Trio[EditorVCSInterface]

func (self EditorVCSInterface) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorVCSInterface) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorVCSInterface) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorVCSInterface) Virtual(name string) reflect.Value { return reflect.Value{} }

type EditorVScrollBox pointers.Trio[EditorVScrollBox]

func (self EditorVScrollBox) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EditorVScrollBox) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EditorVScrollBox) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EditorVScrollBox) Virtual(name string) reflect.Value { return reflect.Value{} }

type EncodedObjectAsID pointers.Trio[EncodedObjectAsID]

func (self EncodedObjectAsID) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EncodedObjectAsID) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EncodedObjectAsID) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EncodedObjectAsID) Virtual(name string) reflect.Value { return reflect.Value{} }

type Engine pointers.Trio[Engine]

func (self Engine) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Engine) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Engine) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Engine) Virtual(name string) reflect.Value { return reflect.Value{} }

type EngineDebugger pointers.Trio[EngineDebugger]

func (self EngineDebugger) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EngineDebugger) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EngineDebugger) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EngineDebugger) Virtual(name string) reflect.Value { return reflect.Value{} }

type EngineProfiler pointers.Trio[EngineProfiler]

func (self EngineProfiler) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self EngineProfiler) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self EngineProfiler) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self EngineProfiler) Virtual(name string) reflect.Value { return reflect.Value{} }

type Environment pointers.Trio[Environment]

func (self Environment) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Environment) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Environment) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Environment) Virtual(name string) reflect.Value { return reflect.Value{} }

type Expression pointers.Trio[Expression]

func (self Expression) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Expression) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Expression) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Expression) Virtual(name string) reflect.Value { return reflect.Value{} }

type ExternalTexture pointers.Trio[ExternalTexture]

func (self ExternalTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ExternalTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ExternalTexture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ExternalTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type FBXDocument pointers.Trio[FBXDocument]

func (self FBXDocument) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self FBXDocument) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self FBXDocument) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self FBXDocument) Virtual(name string) reflect.Value { return reflect.Value{} }

type FBXState pointers.Trio[FBXState]

func (self FBXState) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self FBXState) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self FBXState) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self FBXState) Virtual(name string) reflect.Value { return reflect.Value{} }

type FastNoiseLite pointers.Trio[FastNoiseLite]

func (self FastNoiseLite) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self FastNoiseLite) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self FastNoiseLite) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self FastNoiseLite) Virtual(name string) reflect.Value { return reflect.Value{} }

type FileAccess pointers.Trio[FileAccess]

func (self FileAccess) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self FileAccess) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self FileAccess) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self FileAccess) Virtual(name string) reflect.Value { return reflect.Value{} }

type FileDialog pointers.Trio[FileDialog]

func (self FileDialog) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self FileDialog) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self FileDialog) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self FileDialog) Virtual(name string) reflect.Value { return reflect.Value{} }

type FileSystemDock pointers.Trio[FileSystemDock]

func (self FileSystemDock) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self FileSystemDock) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self FileSystemDock) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self FileSystemDock) Virtual(name string) reflect.Value { return reflect.Value{} }

type FlowContainer pointers.Trio[FlowContainer]

func (self FlowContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self FlowContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self FlowContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self FlowContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type FogMaterial pointers.Trio[FogMaterial]

func (self FogMaterial) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self FogMaterial) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self FogMaterial) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self FogMaterial) Virtual(name string) reflect.Value { return reflect.Value{} }

type FogVolume pointers.Trio[FogVolume]

func (self FogVolume) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self FogVolume) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self FogVolume) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self FogVolume) Virtual(name string) reflect.Value { return reflect.Value{} }

type FoldableContainer pointers.Trio[FoldableContainer]

func (self FoldableContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self FoldableContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self FoldableContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self FoldableContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type FoldableGroup pointers.Trio[FoldableGroup]

func (self FoldableGroup) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self FoldableGroup) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self FoldableGroup) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self FoldableGroup) Virtual(name string) reflect.Value { return reflect.Value{} }

type Font pointers.Trio[Font]

func (self Font) Free()                      { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Font) IsAlive(raw [3]uint64) bool { return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw) }

//go:nosplit
func (self Font) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Font) Virtual(name string) reflect.Value { return reflect.Value{} }

type FontFile pointers.Trio[FontFile]

func (self FontFile) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self FontFile) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self FontFile) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self FontFile) Virtual(name string) reflect.Value { return reflect.Value{} }

type FontVariation pointers.Trio[FontVariation]

func (self FontVariation) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self FontVariation) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self FontVariation) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self FontVariation) Virtual(name string) reflect.Value { return reflect.Value{} }

type FramebufferCacheRD pointers.Trio[FramebufferCacheRD]

func (self FramebufferCacheRD) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self FramebufferCacheRD) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self FramebufferCacheRD) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self FramebufferCacheRD) Virtual(name string) reflect.Value { return reflect.Value{} }

type GDExtension pointers.Trio[GDExtension]

func (self GDExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GDExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GDExtension) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GDExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type GDExtensionManager pointers.Trio[GDExtensionManager]

func (self GDExtensionManager) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GDExtensionManager) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GDExtensionManager) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GDExtensionManager) Virtual(name string) reflect.Value { return reflect.Value{} }

type GDScript pointers.Trio[GDScript]

func (self GDScript) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GDScript) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GDScript) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GDScript) Virtual(name string) reflect.Value { return reflect.Value{} }

type GDScriptSyntaxHighlighter pointers.Trio[GDScriptSyntaxHighlighter]

func (self GDScriptSyntaxHighlighter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GDScriptSyntaxHighlighter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GDScriptSyntaxHighlighter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self GDScriptSyntaxHighlighter) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFAccessor pointers.Trio[GLTFAccessor]

func (self GLTFAccessor) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFAccessor) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFAccessor) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFAccessor) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFAnimation pointers.Trio[GLTFAnimation]

func (self GLTFAnimation) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFAnimation) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFAnimation) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFAnimation) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFBufferView pointers.Trio[GLTFBufferView]

func (self GLTFBufferView) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFBufferView) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFBufferView) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFBufferView) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFCamera pointers.Trio[GLTFCamera]

func (self GLTFCamera) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFCamera) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFCamera) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFCamera) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFDocument pointers.Trio[GLTFDocument]

func (self GLTFDocument) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFDocument) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFDocument) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFDocument) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFDocumentExtension pointers.Trio[GLTFDocumentExtension]

func (self GLTFDocumentExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFDocumentExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFDocumentExtension) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFDocumentExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFDocumentExtensionConvertImporterMesh pointers.Trio[GLTFDocumentExtensionConvertImporterMesh]

func (self GLTFDocumentExtensionConvertImporterMesh) Free() {
	(*(*Object)(unsafe.Pointer(&self))).Free()
}
func (self GLTFDocumentExtensionConvertImporterMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFDocumentExtensionConvertImporterMesh) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self GLTFDocumentExtensionConvertImporterMesh) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type GLTFLight pointers.Trio[GLTFLight]

func (self GLTFLight) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFLight) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFLight) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFLight) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFMesh pointers.Trio[GLTFMesh]

func (self GLTFMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFNode pointers.Trio[GLTFNode]

func (self GLTFNode) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFNode) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFNode) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFNode) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFObjectModelProperty pointers.Trio[GLTFObjectModelProperty]

func (self GLTFObjectModelProperty) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFObjectModelProperty) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFObjectModelProperty) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self GLTFObjectModelProperty) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFPhysicsBody pointers.Trio[GLTFPhysicsBody]

func (self GLTFPhysicsBody) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFPhysicsBody) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFPhysicsBody) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFPhysicsBody) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFPhysicsShape pointers.Trio[GLTFPhysicsShape]

func (self GLTFPhysicsShape) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFPhysicsShape) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFPhysicsShape) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFPhysicsShape) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFSkeleton pointers.Trio[GLTFSkeleton]

func (self GLTFSkeleton) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFSkeleton) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFSkeleton) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFSkeleton) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFSkin pointers.Trio[GLTFSkin]

func (self GLTFSkin) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFSkin) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFSkin) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFSkin) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFSpecGloss pointers.Trio[GLTFSpecGloss]

func (self GLTFSpecGloss) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFSpecGloss) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFSpecGloss) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFSpecGloss) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFState pointers.Trio[GLTFState]

func (self GLTFState) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFState) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFState) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFState) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFTexture pointers.Trio[GLTFTexture]

func (self GLTFTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFTexture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type GLTFTextureSampler pointers.Trio[GLTFTextureSampler]

func (self GLTFTextureSampler) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GLTFTextureSampler) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GLTFTextureSampler) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GLTFTextureSampler) Virtual(name string) reflect.Value { return reflect.Value{} }

type GPUParticles2D pointers.Trio[GPUParticles2D]

func (self GPUParticles2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GPUParticles2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GPUParticles2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GPUParticles2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type GPUParticles3D pointers.Trio[GPUParticles3D]

func (self GPUParticles3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GPUParticles3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GPUParticles3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GPUParticles3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type GPUParticlesAttractor3D pointers.Trio[GPUParticlesAttractor3D]

func (self GPUParticlesAttractor3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GPUParticlesAttractor3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GPUParticlesAttractor3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self GPUParticlesAttractor3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type GPUParticlesAttractorBox3D pointers.Trio[GPUParticlesAttractorBox3D]

func (self GPUParticlesAttractorBox3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GPUParticlesAttractorBox3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GPUParticlesAttractorBox3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self GPUParticlesAttractorBox3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type GPUParticlesAttractorSphere3D pointers.Trio[GPUParticlesAttractorSphere3D]

func (self GPUParticlesAttractorSphere3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GPUParticlesAttractorSphere3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GPUParticlesAttractorSphere3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self GPUParticlesAttractorSphere3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type GPUParticlesAttractorVectorField3D pointers.Trio[GPUParticlesAttractorVectorField3D]

func (self GPUParticlesAttractorVectorField3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GPUParticlesAttractorVectorField3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GPUParticlesAttractorVectorField3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self GPUParticlesAttractorVectorField3D) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type GPUParticlesCollision3D pointers.Trio[GPUParticlesCollision3D]

func (self GPUParticlesCollision3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GPUParticlesCollision3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GPUParticlesCollision3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self GPUParticlesCollision3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type GPUParticlesCollisionBox3D pointers.Trio[GPUParticlesCollisionBox3D]

func (self GPUParticlesCollisionBox3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GPUParticlesCollisionBox3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GPUParticlesCollisionBox3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self GPUParticlesCollisionBox3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type GPUParticlesCollisionHeightField3D pointers.Trio[GPUParticlesCollisionHeightField3D]

func (self GPUParticlesCollisionHeightField3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GPUParticlesCollisionHeightField3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GPUParticlesCollisionHeightField3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self GPUParticlesCollisionHeightField3D) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type GPUParticlesCollisionSDF3D pointers.Trio[GPUParticlesCollisionSDF3D]

func (self GPUParticlesCollisionSDF3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GPUParticlesCollisionSDF3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GPUParticlesCollisionSDF3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self GPUParticlesCollisionSDF3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type GPUParticlesCollisionSphere3D pointers.Trio[GPUParticlesCollisionSphere3D]

func (self GPUParticlesCollisionSphere3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GPUParticlesCollisionSphere3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GPUParticlesCollisionSphere3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self GPUParticlesCollisionSphere3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type GameServerInfo pointers.Trio[GameServerInfo]

func (self GameServerInfo) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GameServerInfo) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GameServerInfo) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GameServerInfo) Virtual(name string) reflect.Value { return reflect.Value{} }

type Generic6DOFJoint3D pointers.Trio[Generic6DOFJoint3D]

func (self Generic6DOFJoint3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Generic6DOFJoint3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Generic6DOFJoint3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Generic6DOFJoint3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Geometry2D pointers.Trio[Geometry2D]

func (self Geometry2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Geometry2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Geometry2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Geometry2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Geometry3D pointers.Trio[Geometry3D]

func (self Geometry3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Geometry3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Geometry3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Geometry3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type GeometryInstance3D pointers.Trio[GeometryInstance3D]

func (self GeometryInstance3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GeometryInstance3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GeometryInstance3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GeometryInstance3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Gradient pointers.Trio[Gradient]

func (self Gradient) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Gradient) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Gradient) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Gradient) Virtual(name string) reflect.Value { return reflect.Value{} }

type GradientTexture1D pointers.Trio[GradientTexture1D]

func (self GradientTexture1D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GradientTexture1D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GradientTexture1D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GradientTexture1D) Virtual(name string) reflect.Value { return reflect.Value{} }

type GradientTexture2D pointers.Trio[GradientTexture2D]

func (self GradientTexture2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GradientTexture2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GradientTexture2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GradientTexture2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type GraphEdit pointers.Trio[GraphEdit]

func (self GraphEdit) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GraphEdit) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GraphEdit) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GraphEdit) Virtual(name string) reflect.Value { return reflect.Value{} }

type GraphElement pointers.Trio[GraphElement]

func (self GraphElement) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GraphElement) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GraphElement) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GraphElement) Virtual(name string) reflect.Value { return reflect.Value{} }

type GraphFrame pointers.Trio[GraphFrame]

func (self GraphFrame) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GraphFrame) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GraphFrame) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GraphFrame) Virtual(name string) reflect.Value { return reflect.Value{} }

type GraphNode pointers.Trio[GraphNode]

func (self GraphNode) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GraphNode) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GraphNode) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GraphNode) Virtual(name string) reflect.Value { return reflect.Value{} }

type GridContainer pointers.Trio[GridContainer]

func (self GridContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GridContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GridContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GridContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type GridMap pointers.Trio[GridMap]

func (self GridMap) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GridMap) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GridMap) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GridMap) Virtual(name string) reflect.Value { return reflect.Value{} }

type GridMapEditorPlugin pointers.Trio[GridMapEditorPlugin]

func (self GridMapEditorPlugin) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GridMapEditorPlugin) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GridMapEditorPlugin) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GridMapEditorPlugin) Virtual(name string) reflect.Value { return reflect.Value{} }

type GrooveJoint2D pointers.Trio[GrooveJoint2D]

func (self GrooveJoint2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self GrooveJoint2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self GrooveJoint2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self GrooveJoint2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type HBoxContainer pointers.Trio[HBoxContainer]

func (self HBoxContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self HBoxContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self HBoxContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self HBoxContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type HFlowContainer pointers.Trio[HFlowContainer]

func (self HFlowContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self HFlowContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self HFlowContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self HFlowContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type HMACContext pointers.Trio[HMACContext]

func (self HMACContext) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self HMACContext) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self HMACContext) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self HMACContext) Virtual(name string) reflect.Value { return reflect.Value{} }

type HScrollBar pointers.Trio[HScrollBar]

func (self HScrollBar) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self HScrollBar) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self HScrollBar) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self HScrollBar) Virtual(name string) reflect.Value { return reflect.Value{} }

type HSeparator pointers.Trio[HSeparator]

func (self HSeparator) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self HSeparator) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self HSeparator) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self HSeparator) Virtual(name string) reflect.Value { return reflect.Value{} }

type HSlider pointers.Trio[HSlider]

func (self HSlider) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self HSlider) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self HSlider) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self HSlider) Virtual(name string) reflect.Value { return reflect.Value{} }

type HSplitContainer pointers.Trio[HSplitContainer]

func (self HSplitContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self HSplitContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self HSplitContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self HSplitContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type HTTPClient pointers.Trio[HTTPClient]

func (self HTTPClient) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self HTTPClient) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self HTTPClient) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self HTTPClient) Virtual(name string) reflect.Value { return reflect.Value{} }

type HTTPRequest pointers.Trio[HTTPRequest]

func (self HTTPRequest) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self HTTPRequest) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self HTTPRequest) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self HTTPRequest) Virtual(name string) reflect.Value { return reflect.Value{} }

type HashingContext pointers.Trio[HashingContext]

func (self HashingContext) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self HashingContext) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self HashingContext) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self HashingContext) Virtual(name string) reflect.Value { return reflect.Value{} }

type HeightMapShape3D pointers.Trio[HeightMapShape3D]

func (self HeightMapShape3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self HeightMapShape3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self HeightMapShape3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self HeightMapShape3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type HingeJoint3D pointers.Trio[HingeJoint3D]

func (self HingeJoint3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self HingeJoint3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self HingeJoint3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self HingeJoint3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type IP pointers.Trio[IP]

func (self IP) Free()                      { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self IP) IsAlive(raw [3]uint64) bool { return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw) }

//go:nosplit
func (self IP) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self IP) Virtual(name string) reflect.Value { return reflect.Value{} }

type Image pointers.Trio[Image]

func (self Image) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Image) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Image) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Image) Virtual(name string) reflect.Value { return reflect.Value{} }

type ImageFormatLoader pointers.Trio[ImageFormatLoader]

func (self ImageFormatLoader) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ImageFormatLoader) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ImageFormatLoader) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ImageFormatLoader) Virtual(name string) reflect.Value { return reflect.Value{} }

type ImageFormatLoaderExtension pointers.Trio[ImageFormatLoaderExtension]

func (self ImageFormatLoaderExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ImageFormatLoaderExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ImageFormatLoaderExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self ImageFormatLoaderExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type ImageTexture pointers.Trio[ImageTexture]

func (self ImageTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ImageTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ImageTexture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ImageTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type ImageTexture3D pointers.Trio[ImageTexture3D]

func (self ImageTexture3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ImageTexture3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ImageTexture3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ImageTexture3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type ImageTextureLayered pointers.Trio[ImageTextureLayered]

func (self ImageTextureLayered) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ImageTextureLayered) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ImageTextureLayered) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ImageTextureLayered) Virtual(name string) reflect.Value { return reflect.Value{} }

type ImmediateMesh pointers.Trio[ImmediateMesh]

func (self ImmediateMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ImmediateMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ImmediateMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ImmediateMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type ImporterMesh pointers.Trio[ImporterMesh]

func (self ImporterMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ImporterMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ImporterMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ImporterMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type ImporterMeshInstance3D pointers.Trio[ImporterMeshInstance3D]

func (self ImporterMeshInstance3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ImporterMeshInstance3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ImporterMeshInstance3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self ImporterMeshInstance3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Input pointers.Trio[Input]

func (self Input) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Input) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Input) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Input) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEvent pointers.Trio[InputEvent]

func (self InputEvent) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEvent) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEvent) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InputEvent) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventAction pointers.Trio[InputEventAction]

func (self InputEventAction) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventAction) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventAction) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InputEventAction) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventFromWindow pointers.Trio[InputEventFromWindow]

func (self InputEventFromWindow) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventFromWindow) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventFromWindow) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InputEventFromWindow) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventGesture pointers.Trio[InputEventGesture]

func (self InputEventGesture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventGesture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventGesture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InputEventGesture) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventJoypadButton pointers.Trio[InputEventJoypadButton]

func (self InputEventJoypadButton) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventJoypadButton) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventJoypadButton) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self InputEventJoypadButton) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventJoypadMotion pointers.Trio[InputEventJoypadMotion]

func (self InputEventJoypadMotion) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventJoypadMotion) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventJoypadMotion) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self InputEventJoypadMotion) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventKey pointers.Trio[InputEventKey]

func (self InputEventKey) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventKey) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventKey) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InputEventKey) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventMIDI pointers.Trio[InputEventMIDI]

func (self InputEventMIDI) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventMIDI) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventMIDI) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InputEventMIDI) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventMagnifyGesture pointers.Trio[InputEventMagnifyGesture]

func (self InputEventMagnifyGesture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventMagnifyGesture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventMagnifyGesture) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self InputEventMagnifyGesture) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventMouse pointers.Trio[InputEventMouse]

func (self InputEventMouse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventMouse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventMouse) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InputEventMouse) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventMouseButton pointers.Trio[InputEventMouseButton]

func (self InputEventMouseButton) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventMouseButton) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventMouseButton) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InputEventMouseButton) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventMouseMotion pointers.Trio[InputEventMouseMotion]

func (self InputEventMouseMotion) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventMouseMotion) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventMouseMotion) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InputEventMouseMotion) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventPanGesture pointers.Trio[InputEventPanGesture]

func (self InputEventPanGesture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventPanGesture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventPanGesture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InputEventPanGesture) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventScreenDrag pointers.Trio[InputEventScreenDrag]

func (self InputEventScreenDrag) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventScreenDrag) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventScreenDrag) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InputEventScreenDrag) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventScreenTouch pointers.Trio[InputEventScreenTouch]

func (self InputEventScreenTouch) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventScreenTouch) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventScreenTouch) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InputEventScreenTouch) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventShortcut pointers.Trio[InputEventShortcut]

func (self InputEventShortcut) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventShortcut) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventShortcut) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InputEventShortcut) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputEventWithModifiers pointers.Trio[InputEventWithModifiers]

func (self InputEventWithModifiers) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputEventWithModifiers) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputEventWithModifiers) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self InputEventWithModifiers) Virtual(name string) reflect.Value { return reflect.Value{} }

type InputMap pointers.Trio[InputMap]

func (self InputMap) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InputMap) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InputMap) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InputMap) Virtual(name string) reflect.Value { return reflect.Value{} }

type InstancePlaceholder pointers.Trio[InstancePlaceholder]

func (self InstancePlaceholder) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self InstancePlaceholder) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self InstancePlaceholder) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self InstancePlaceholder) Virtual(name string) reflect.Value { return reflect.Value{} }

type IntervalTweener pointers.Trio[IntervalTweener]

func (self IntervalTweener) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self IntervalTweener) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self IntervalTweener) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self IntervalTweener) Virtual(name string) reflect.Value { return reflect.Value{} }

type ItemList pointers.Trio[ItemList]

func (self ItemList) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ItemList) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ItemList) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ItemList) Virtual(name string) reflect.Value { return reflect.Value{} }

type JNISingleton pointers.Trio[JNISingleton]

func (self JNISingleton) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self JNISingleton) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self JNISingleton) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self JNISingleton) Virtual(name string) reflect.Value { return reflect.Value{} }

type JSON pointers.Trio[JSON]

func (self JSON) Free()                      { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self JSON) IsAlive(raw [3]uint64) bool { return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw) }

//go:nosplit
func (self JSON) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self JSON) Virtual(name string) reflect.Value { return reflect.Value{} }

type JSONRPC pointers.Trio[JSONRPC]

func (self JSONRPC) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self JSONRPC) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self JSONRPC) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self JSONRPC) Virtual(name string) reflect.Value { return reflect.Value{} }

type JWT pointers.Trio[JWT]

func (self JWT) Free()                      { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self JWT) IsAlive(raw [3]uint64) bool { return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw) }

//go:nosplit
func (self JWT) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self JWT) Virtual(name string) reflect.Value { return reflect.Value{} }

type JavaClass pointers.Trio[JavaClass]

func (self JavaClass) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self JavaClass) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self JavaClass) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self JavaClass) Virtual(name string) reflect.Value { return reflect.Value{} }

type JavaClassWrapper pointers.Trio[JavaClassWrapper]

func (self JavaClassWrapper) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self JavaClassWrapper) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self JavaClassWrapper) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self JavaClassWrapper) Virtual(name string) reflect.Value { return reflect.Value{} }

type JavaObject pointers.Trio[JavaObject]

func (self JavaObject) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self JavaObject) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self JavaObject) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self JavaObject) Virtual(name string) reflect.Value { return reflect.Value{} }

type JavaScriptBridge pointers.Trio[JavaScriptBridge]

func (self JavaScriptBridge) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self JavaScriptBridge) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self JavaScriptBridge) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self JavaScriptBridge) Virtual(name string) reflect.Value { return reflect.Value{} }

type JavaScriptObject pointers.Trio[JavaScriptObject]

func (self JavaScriptObject) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self JavaScriptObject) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self JavaScriptObject) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self JavaScriptObject) Virtual(name string) reflect.Value { return reflect.Value{} }

type Joint2D pointers.Trio[Joint2D]

func (self Joint2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Joint2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Joint2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Joint2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Joint3D pointers.Trio[Joint3D]

func (self Joint3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Joint3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Joint3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Joint3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type KinematicCollision2D pointers.Trio[KinematicCollision2D]

func (self KinematicCollision2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self KinematicCollision2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self KinematicCollision2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self KinematicCollision2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type KinematicCollision3D pointers.Trio[KinematicCollision3D]

func (self KinematicCollision3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self KinematicCollision3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self KinematicCollision3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self KinematicCollision3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Label pointers.Trio[Label]

func (self Label) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Label) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Label) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Label) Virtual(name string) reflect.Value { return reflect.Value{} }

type Label3D pointers.Trio[Label3D]

func (self Label3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Label3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Label3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Label3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type LabelSettings pointers.Trio[LabelSettings]

func (self LabelSettings) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LabelSettings) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LabelSettings) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LabelSettings) Virtual(name string) reflect.Value { return reflect.Value{} }

type Light2D pointers.Trio[Light2D]

func (self Light2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Light2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Light2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Light2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Light3D pointers.Trio[Light3D]

func (self Light3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Light3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Light3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Light3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type LightOccluder2D pointers.Trio[LightOccluder2D]

func (self LightOccluder2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LightOccluder2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LightOccluder2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LightOccluder2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type LightmapGI pointers.Trio[LightmapGI]

func (self LightmapGI) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LightmapGI) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LightmapGI) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LightmapGI) Virtual(name string) reflect.Value { return reflect.Value{} }

type LightmapGIData pointers.Trio[LightmapGIData]

func (self LightmapGIData) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LightmapGIData) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LightmapGIData) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LightmapGIData) Virtual(name string) reflect.Value { return reflect.Value{} }

type LightmapProbe pointers.Trio[LightmapProbe]

func (self LightmapProbe) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LightmapProbe) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LightmapProbe) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LightmapProbe) Virtual(name string) reflect.Value { return reflect.Value{} }

type Lightmapper pointers.Trio[Lightmapper]

func (self Lightmapper) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Lightmapper) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Lightmapper) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Lightmapper) Virtual(name string) reflect.Value { return reflect.Value{} }

type LightmapperRD pointers.Trio[LightmapperRD]

func (self LightmapperRD) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LightmapperRD) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LightmapperRD) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LightmapperRD) Virtual(name string) reflect.Value { return reflect.Value{} }

type Line2D pointers.Trio[Line2D]

func (self Line2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Line2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Line2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Line2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type LineEdit pointers.Trio[LineEdit]

func (self LineEdit) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LineEdit) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LineEdit) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LineEdit) Virtual(name string) reflect.Value { return reflect.Value{} }

type LinkButton pointers.Trio[LinkButton]

func (self LinkButton) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LinkButton) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LinkButton) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LinkButton) Virtual(name string) reflect.Value { return reflect.Value{} }

type LobbyClient pointers.Trio[LobbyClient]

func (self LobbyClient) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LobbyClient) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LobbyClient) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LobbyClient) Virtual(name string) reflect.Value { return reflect.Value{} }

type LobbyInfo pointers.Trio[LobbyInfo]

func (self LobbyInfo) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LobbyInfo) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LobbyInfo) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LobbyInfo) Virtual(name string) reflect.Value { return reflect.Value{} }

type LobbyPeer pointers.Trio[LobbyPeer]

func (self LobbyPeer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LobbyPeer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LobbyPeer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LobbyPeer) Virtual(name string) reflect.Value { return reflect.Value{} }

type LobbyResponse pointers.Trio[LobbyResponse]

func (self LobbyResponse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LobbyResponse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LobbyResponse) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LobbyResponse) Virtual(name string) reflect.Value { return reflect.Value{} }

type LobbyResult pointers.Trio[LobbyResult]

func (self LobbyResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LobbyResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LobbyResult) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LobbyResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type LoginAccessTokenResponse pointers.Trio[LoginAccessTokenResponse]

func (self LoginAccessTokenResponse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LoginAccessTokenResponse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LoginAccessTokenResponse) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self LoginAccessTokenResponse) Virtual(name string) reflect.Value { return reflect.Value{} }

type LoginAccessTokenResult pointers.Trio[LoginAccessTokenResult]

func (self LoginAccessTokenResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LoginAccessTokenResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LoginAccessTokenResult) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self LoginAccessTokenResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type LoginClient pointers.Trio[LoginClient]

func (self LoginClient) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LoginClient) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LoginClient) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LoginClient) Virtual(name string) reflect.Value { return reflect.Value{} }

type LoginConnectResponse pointers.Trio[LoginConnectResponse]

func (self LoginConnectResponse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LoginConnectResponse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LoginConnectResponse) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LoginConnectResponse) Virtual(name string) reflect.Value { return reflect.Value{} }

type LoginConnectResult pointers.Trio[LoginConnectResult]

func (self LoginConnectResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LoginConnectResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LoginConnectResult) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LoginConnectResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type LoginIDResponse pointers.Trio[LoginIDResponse]

func (self LoginIDResponse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LoginIDResponse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LoginIDResponse) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LoginIDResponse) Virtual(name string) reflect.Value { return reflect.Value{} }

type LoginIDResult pointers.Trio[LoginIDResult]

func (self LoginIDResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LoginIDResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LoginIDResult) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LoginIDResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type LoginRefreshTokenResponse pointers.Trio[LoginRefreshTokenResponse]

func (self LoginRefreshTokenResponse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LoginRefreshTokenResponse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LoginRefreshTokenResponse) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self LoginRefreshTokenResponse) Virtual(name string) reflect.Value { return reflect.Value{} }

type LoginRefreshTokenResult pointers.Trio[LoginRefreshTokenResult]

func (self LoginRefreshTokenResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LoginRefreshTokenResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LoginRefreshTokenResult) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self LoginRefreshTokenResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type LoginURLResponse pointers.Trio[LoginURLResponse]

func (self LoginURLResponse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LoginURLResponse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LoginURLResponse) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LoginURLResponse) Virtual(name string) reflect.Value { return reflect.Value{} }

type LoginURLResult pointers.Trio[LoginURLResult]

func (self LoginURLResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LoginURLResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LoginURLResult) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LoginURLResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type LoginVerifyTokenResponse pointers.Trio[LoginVerifyTokenResponse]

func (self LoginVerifyTokenResponse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LoginVerifyTokenResponse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LoginVerifyTokenResponse) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self LoginVerifyTokenResponse) Virtual(name string) reflect.Value { return reflect.Value{} }

type LoginVerifyTokenResult pointers.Trio[LoginVerifyTokenResult]

func (self LoginVerifyTokenResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LoginVerifyTokenResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LoginVerifyTokenResult) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self LoginVerifyTokenResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type LookAtModifier3D pointers.Trio[LookAtModifier3D]

func (self LookAtModifier3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self LookAtModifier3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self LookAtModifier3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self LookAtModifier3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type MainLoop pointers.Trio[MainLoop]

func (self MainLoop) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MainLoop) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MainLoop) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MainLoop) Virtual(name string) reflect.Value { return reflect.Value{} }

type MarginContainer pointers.Trio[MarginContainer]

func (self MarginContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MarginContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MarginContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MarginContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type Marker2D pointers.Trio[Marker2D]

func (self Marker2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Marker2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Marker2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Marker2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Marker3D pointers.Trio[Marker3D]

func (self Marker3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Marker3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Marker3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Marker3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Marshalls pointers.Trio[Marshalls]

func (self Marshalls) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Marshalls) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Marshalls) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Marshalls) Virtual(name string) reflect.Value { return reflect.Value{} }

type MasterServerClient pointers.Trio[MasterServerClient]

func (self MasterServerClient) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MasterServerClient) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MasterServerClient) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MasterServerClient) Virtual(name string) reflect.Value { return reflect.Value{} }

type MasterServerListResponse pointers.Trio[MasterServerListResponse]

func (self MasterServerListResponse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MasterServerListResponse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MasterServerListResponse) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self MasterServerListResponse) Virtual(name string) reflect.Value { return reflect.Value{} }

type MasterServerListResult pointers.Trio[MasterServerListResult]

func (self MasterServerListResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MasterServerListResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MasterServerListResult) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self MasterServerListResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type MasterServerResponse pointers.Trio[MasterServerResponse]

func (self MasterServerResponse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MasterServerResponse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MasterServerResponse) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MasterServerResponse) Virtual(name string) reflect.Value { return reflect.Value{} }

type MasterServerResult pointers.Trio[MasterServerResult]

func (self MasterServerResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MasterServerResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MasterServerResult) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MasterServerResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type Material pointers.Trio[Material]

func (self Material) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Material) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Material) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Material) Virtual(name string) reflect.Value { return reflect.Value{} }

type MenuBar pointers.Trio[MenuBar]

func (self MenuBar) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MenuBar) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MenuBar) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MenuBar) Virtual(name string) reflect.Value { return reflect.Value{} }

type MenuButton pointers.Trio[MenuButton]

func (self MenuButton) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MenuButton) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MenuButton) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MenuButton) Virtual(name string) reflect.Value { return reflect.Value{} }

type Mesh pointers.Trio[Mesh]

func (self Mesh) Free()                      { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Mesh) IsAlive(raw [3]uint64) bool { return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw) }

//go:nosplit
func (self Mesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Mesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type MeshConvexDecompositionSettings pointers.Trio[MeshConvexDecompositionSettings]

func (self MeshConvexDecompositionSettings) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MeshConvexDecompositionSettings) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MeshConvexDecompositionSettings) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self MeshConvexDecompositionSettings) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type MeshDataTool pointers.Trio[MeshDataTool]

func (self MeshDataTool) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MeshDataTool) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MeshDataTool) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MeshDataTool) Virtual(name string) reflect.Value { return reflect.Value{} }

type MeshInstance2D pointers.Trio[MeshInstance2D]

func (self MeshInstance2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MeshInstance2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MeshInstance2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MeshInstance2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type MeshInstance3D pointers.Trio[MeshInstance3D]

func (self MeshInstance3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MeshInstance3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MeshInstance3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MeshInstance3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type MeshLibrary pointers.Trio[MeshLibrary]

func (self MeshLibrary) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MeshLibrary) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MeshLibrary) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MeshLibrary) Virtual(name string) reflect.Value { return reflect.Value{} }

type MeshTexture pointers.Trio[MeshTexture]

func (self MeshTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MeshTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MeshTexture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MeshTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type MethodTweener pointers.Trio[MethodTweener]

func (self MethodTweener) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MethodTweener) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MethodTweener) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MethodTweener) Virtual(name string) reflect.Value { return reflect.Value{} }

type MissingNode pointers.Trio[MissingNode]

func (self MissingNode) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MissingNode) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MissingNode) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MissingNode) Virtual(name string) reflect.Value { return reflect.Value{} }

type MissingResource pointers.Trio[MissingResource]

func (self MissingResource) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MissingResource) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MissingResource) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MissingResource) Virtual(name string) reflect.Value { return reflect.Value{} }

type MobileVRInterface pointers.Trio[MobileVRInterface]

func (self MobileVRInterface) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MobileVRInterface) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MobileVRInterface) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MobileVRInterface) Virtual(name string) reflect.Value { return reflect.Value{} }

type MovieWriter pointers.Trio[MovieWriter]

func (self MovieWriter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MovieWriter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MovieWriter) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MovieWriter) Virtual(name string) reflect.Value { return reflect.Value{} }

type MultiMesh pointers.Trio[MultiMesh]

func (self MultiMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MultiMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MultiMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MultiMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type MultiMeshInstance2D pointers.Trio[MultiMeshInstance2D]

func (self MultiMeshInstance2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MultiMeshInstance2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MultiMeshInstance2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MultiMeshInstance2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type MultiMeshInstance3D pointers.Trio[MultiMeshInstance3D]

func (self MultiMeshInstance3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MultiMeshInstance3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MultiMeshInstance3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MultiMeshInstance3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type MultiplayerAPI pointers.Trio[MultiplayerAPI]

func (self MultiplayerAPI) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MultiplayerAPI) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MultiplayerAPI) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MultiplayerAPI) Virtual(name string) reflect.Value { return reflect.Value{} }

type MultiplayerAPIExtension pointers.Trio[MultiplayerAPIExtension]

func (self MultiplayerAPIExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MultiplayerAPIExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MultiplayerAPIExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self MultiplayerAPIExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type MultiplayerPeer pointers.Trio[MultiplayerPeer]

func (self MultiplayerPeer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MultiplayerPeer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MultiplayerPeer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MultiplayerPeer) Virtual(name string) reflect.Value { return reflect.Value{} }

type MultiplayerPeerExtension pointers.Trio[MultiplayerPeerExtension]

func (self MultiplayerPeerExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MultiplayerPeerExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MultiplayerPeerExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self MultiplayerPeerExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type MultiplayerSpawner pointers.Trio[MultiplayerSpawner]

func (self MultiplayerSpawner) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MultiplayerSpawner) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MultiplayerSpawner) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self MultiplayerSpawner) Virtual(name string) reflect.Value { return reflect.Value{} }

type MultiplayerSynchronizer pointers.Trio[MultiplayerSynchronizer]

func (self MultiplayerSynchronizer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self MultiplayerSynchronizer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self MultiplayerSynchronizer) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self MultiplayerSynchronizer) Virtual(name string) reflect.Value { return reflect.Value{} }

type Mutex pointers.Trio[Mutex]

func (self Mutex) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Mutex) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Mutex) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Mutex) Virtual(name string) reflect.Value { return reflect.Value{} }

type NativeMenu pointers.Trio[NativeMenu]

func (self NativeMenu) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NativeMenu) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NativeMenu) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NativeMenu) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationAgent2D pointers.Trio[NavigationAgent2D]

func (self NavigationAgent2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationAgent2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationAgent2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NavigationAgent2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationAgent3D pointers.Trio[NavigationAgent3D]

func (self NavigationAgent3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationAgent3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationAgent3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NavigationAgent3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationLink2D pointers.Trio[NavigationLink2D]

func (self NavigationLink2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationLink2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationLink2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NavigationLink2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationLink3D pointers.Trio[NavigationLink3D]

func (self NavigationLink3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationLink3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationLink3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NavigationLink3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationMesh pointers.Trio[NavigationMesh]

func (self NavigationMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NavigationMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationMeshGenerator pointers.Trio[NavigationMeshGenerator]

func (self NavigationMeshGenerator) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationMeshGenerator) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationMeshGenerator) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self NavigationMeshGenerator) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationMeshSourceGeometryData2D pointers.Trio[NavigationMeshSourceGeometryData2D]

func (self NavigationMeshSourceGeometryData2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationMeshSourceGeometryData2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationMeshSourceGeometryData2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self NavigationMeshSourceGeometryData2D) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type NavigationMeshSourceGeometryData3D pointers.Trio[NavigationMeshSourceGeometryData3D]

func (self NavigationMeshSourceGeometryData3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationMeshSourceGeometryData3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationMeshSourceGeometryData3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self NavigationMeshSourceGeometryData3D) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type NavigationObstacle2D pointers.Trio[NavigationObstacle2D]

func (self NavigationObstacle2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationObstacle2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationObstacle2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NavigationObstacle2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationObstacle3D pointers.Trio[NavigationObstacle3D]

func (self NavigationObstacle3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationObstacle3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationObstacle3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NavigationObstacle3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationPathQueryParameters2D pointers.Trio[NavigationPathQueryParameters2D]

func (self NavigationPathQueryParameters2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationPathQueryParameters2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationPathQueryParameters2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self NavigationPathQueryParameters2D) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type NavigationPathQueryParameters3D pointers.Trio[NavigationPathQueryParameters3D]

func (self NavigationPathQueryParameters3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationPathQueryParameters3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationPathQueryParameters3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self NavigationPathQueryParameters3D) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type NavigationPathQueryResult2D pointers.Trio[NavigationPathQueryResult2D]

func (self NavigationPathQueryResult2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationPathQueryResult2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationPathQueryResult2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self NavigationPathQueryResult2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationPathQueryResult3D pointers.Trio[NavigationPathQueryResult3D]

func (self NavigationPathQueryResult3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationPathQueryResult3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationPathQueryResult3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self NavigationPathQueryResult3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationPolygon pointers.Trio[NavigationPolygon]

func (self NavigationPolygon) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationPolygon) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationPolygon) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NavigationPolygon) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationRegion2D pointers.Trio[NavigationRegion2D]

func (self NavigationRegion2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationRegion2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationRegion2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NavigationRegion2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationRegion3D pointers.Trio[NavigationRegion3D]

func (self NavigationRegion3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationRegion3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationRegion3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NavigationRegion3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationServer2D pointers.Trio[NavigationServer2D]

func (self NavigationServer2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationServer2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationServer2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NavigationServer2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type NavigationServer3D pointers.Trio[NavigationServer3D]

func (self NavigationServer3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NavigationServer3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NavigationServer3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NavigationServer3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type NinePatchRect pointers.Trio[NinePatchRect]

func (self NinePatchRect) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NinePatchRect) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NinePatchRect) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NinePatchRect) Virtual(name string) reflect.Value { return reflect.Value{} }

type Node pointers.Trio[Node]

func (self Node) Free()                      { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Node) IsAlive(raw [3]uint64) bool { return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw) }

//go:nosplit
func (self Node) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Node) Virtual(name string) reflect.Value { return reflect.Value{} }

type Node2D pointers.Trio[Node2D]

func (self Node2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Node2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Node2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Node2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Node3D pointers.Trio[Node3D]

func (self Node3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Node3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Node3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Node3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Node3DGizmo pointers.Trio[Node3DGizmo]

func (self Node3DGizmo) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Node3DGizmo) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Node3DGizmo) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Node3DGizmo) Virtual(name string) reflect.Value { return reflect.Value{} }

type Noise pointers.Trio[Noise]

func (self Noise) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Noise) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Noise) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Noise) Virtual(name string) reflect.Value { return reflect.Value{} }

type NoiseTexture2D pointers.Trio[NoiseTexture2D]

func (self NoiseTexture2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NoiseTexture2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NoiseTexture2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NoiseTexture2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type NoiseTexture3D pointers.Trio[NoiseTexture3D]

func (self NoiseTexture3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self NoiseTexture3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self NoiseTexture3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self NoiseTexture3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type ORMMaterial3D pointers.Trio[ORMMaterial3D]

func (self ORMMaterial3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ORMMaterial3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ORMMaterial3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ORMMaterial3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type OS pointers.Trio[OS]

func (self OS) Free()                      { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OS) IsAlive(raw [3]uint64) bool { return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw) }

//go:nosplit
func (self OS) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OS) Virtual(name string) reflect.Value { return reflect.Value{} }

type Occluder3D pointers.Trio[Occluder3D]

func (self Occluder3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Occluder3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Occluder3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Occluder3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type OccluderInstance3D pointers.Trio[OccluderInstance3D]

func (self OccluderInstance3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OccluderInstance3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OccluderInstance3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OccluderInstance3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type OccluderPolygon2D pointers.Trio[OccluderPolygon2D]

func (self OccluderPolygon2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OccluderPolygon2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OccluderPolygon2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OccluderPolygon2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type OfflineMultiplayerPeer pointers.Trio[OfflineMultiplayerPeer]

func (self OfflineMultiplayerPeer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OfflineMultiplayerPeer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OfflineMultiplayerPeer) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OfflineMultiplayerPeer) Virtual(name string) reflect.Value { return reflect.Value{} }

type OggPacketSequence pointers.Trio[OggPacketSequence]

func (self OggPacketSequence) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OggPacketSequence) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OggPacketSequence) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OggPacketSequence) Virtual(name string) reflect.Value { return reflect.Value{} }

type OggPacketSequencePlayback pointers.Trio[OggPacketSequencePlayback]

func (self OggPacketSequencePlayback) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OggPacketSequencePlayback) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OggPacketSequencePlayback) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OggPacketSequencePlayback) Virtual(name string) reflect.Value { return reflect.Value{} }

type OmniLight3D pointers.Trio[OmniLight3D]

func (self OmniLight3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OmniLight3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OmniLight3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OmniLight3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRAPIExtension pointers.Trio[OpenXRAPIExtension]

func (self OpenXRAPIExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRAPIExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRAPIExtension) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OpenXRAPIExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRAction pointers.Trio[OpenXRAction]

func (self OpenXRAction) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRAction) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRAction) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OpenXRAction) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRActionBindingModifier pointers.Trio[OpenXRActionBindingModifier]

func (self OpenXRActionBindingModifier) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRActionBindingModifier) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRActionBindingModifier) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OpenXRActionBindingModifier) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRActionMap pointers.Trio[OpenXRActionMap]

func (self OpenXRActionMap) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRActionMap) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRActionMap) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OpenXRActionMap) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRActionSet pointers.Trio[OpenXRActionSet]

func (self OpenXRActionSet) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRActionSet) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRActionSet) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OpenXRActionSet) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRAnalogThresholdModifier pointers.Trio[OpenXRAnalogThresholdModifier]

func (self OpenXRAnalogThresholdModifier) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRAnalogThresholdModifier) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRAnalogThresholdModifier) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OpenXRAnalogThresholdModifier) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRBindingModifier pointers.Trio[OpenXRBindingModifier]

func (self OpenXRBindingModifier) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRBindingModifier) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRBindingModifier) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OpenXRBindingModifier) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRBindingModifierEditor pointers.Trio[OpenXRBindingModifierEditor]

func (self OpenXRBindingModifierEditor) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRBindingModifierEditor) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRBindingModifierEditor) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OpenXRBindingModifierEditor) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRCompositionLayer pointers.Trio[OpenXRCompositionLayer]

func (self OpenXRCompositionLayer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRCompositionLayer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRCompositionLayer) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OpenXRCompositionLayer) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRCompositionLayerCylinder pointers.Trio[OpenXRCompositionLayerCylinder]

func (self OpenXRCompositionLayerCylinder) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRCompositionLayerCylinder) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRCompositionLayerCylinder) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OpenXRCompositionLayerCylinder) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRCompositionLayerEquirect pointers.Trio[OpenXRCompositionLayerEquirect]

func (self OpenXRCompositionLayerEquirect) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRCompositionLayerEquirect) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRCompositionLayerEquirect) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OpenXRCompositionLayerEquirect) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRCompositionLayerQuad pointers.Trio[OpenXRCompositionLayerQuad]

func (self OpenXRCompositionLayerQuad) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRCompositionLayerQuad) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRCompositionLayerQuad) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OpenXRCompositionLayerQuad) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRDpadBindingModifier pointers.Trio[OpenXRDpadBindingModifier]

func (self OpenXRDpadBindingModifier) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRDpadBindingModifier) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRDpadBindingModifier) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OpenXRDpadBindingModifier) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRExtensionWrapperExtension pointers.Trio[OpenXRExtensionWrapperExtension]

func (self OpenXRExtensionWrapperExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRExtensionWrapperExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRExtensionWrapperExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OpenXRExtensionWrapperExtension) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type OpenXRHand pointers.Trio[OpenXRHand]

func (self OpenXRHand) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRHand) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRHand) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OpenXRHand) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRHapticBase pointers.Trio[OpenXRHapticBase]

func (self OpenXRHapticBase) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRHapticBase) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRHapticBase) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OpenXRHapticBase) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRHapticVibration pointers.Trio[OpenXRHapticVibration]

func (self OpenXRHapticVibration) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRHapticVibration) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRHapticVibration) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OpenXRHapticVibration) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRIPBinding pointers.Trio[OpenXRIPBinding]

func (self OpenXRIPBinding) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRIPBinding) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRIPBinding) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OpenXRIPBinding) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRIPBindingModifier pointers.Trio[OpenXRIPBindingModifier]

func (self OpenXRIPBindingModifier) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRIPBindingModifier) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRIPBindingModifier) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OpenXRIPBindingModifier) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRInteractionProfile pointers.Trio[OpenXRInteractionProfile]

func (self OpenXRInteractionProfile) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRInteractionProfile) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRInteractionProfile) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OpenXRInteractionProfile) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRInteractionProfileEditor pointers.Trio[OpenXRInteractionProfileEditor]

func (self OpenXRInteractionProfileEditor) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRInteractionProfileEditor) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRInteractionProfileEditor) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OpenXRInteractionProfileEditor) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRInteractionProfileEditorBase pointers.Trio[OpenXRInteractionProfileEditorBase]

func (self OpenXRInteractionProfileEditorBase) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRInteractionProfileEditorBase) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRInteractionProfileEditorBase) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OpenXRInteractionProfileEditorBase) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type OpenXRInteractionProfileMetadata pointers.Trio[OpenXRInteractionProfileMetadata]

func (self OpenXRInteractionProfileMetadata) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRInteractionProfileMetadata) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRInteractionProfileMetadata) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self OpenXRInteractionProfileMetadata) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type OpenXRInterface pointers.Trio[OpenXRInterface]

func (self OpenXRInterface) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRInterface) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRInterface) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OpenXRInterface) Virtual(name string) reflect.Value { return reflect.Value{} }

type OpenXRVisibilityMask pointers.Trio[OpenXRVisibilityMask]

func (self OpenXRVisibilityMask) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OpenXRVisibilityMask) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OpenXRVisibilityMask) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OpenXRVisibilityMask) Virtual(name string) reflect.Value { return reflect.Value{} }

type OptimizedTranslation pointers.Trio[OptimizedTranslation]

func (self OptimizedTranslation) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OptimizedTranslation) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OptimizedTranslation) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OptimizedTranslation) Virtual(name string) reflect.Value { return reflect.Value{} }

type OptionButton pointers.Trio[OptionButton]

func (self OptionButton) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self OptionButton) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self OptionButton) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self OptionButton) Virtual(name string) reflect.Value { return reflect.Value{} }

type PCKPacker pointers.Trio[PCKPacker]

func (self PCKPacker) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PCKPacker) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PCKPacker) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PCKPacker) Virtual(name string) reflect.Value { return reflect.Value{} }

type POGRClient pointers.Trio[POGRClient]

func (self POGRClient) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self POGRClient) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self POGRClient) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self POGRClient) Virtual(name string) reflect.Value { return reflect.Value{} }

type POGRResponse pointers.Trio[POGRResponse]

func (self POGRResponse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self POGRResponse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self POGRResponse) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self POGRResponse) Virtual(name string) reflect.Value { return reflect.Value{} }

type POGRResult pointers.Trio[POGRResult]

func (self POGRResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self POGRResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self POGRResult) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self POGRResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type PackedDataContainer pointers.Trio[PackedDataContainer]

func (self PackedDataContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PackedDataContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PackedDataContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PackedDataContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type PackedDataContainerRef pointers.Trio[PackedDataContainerRef]

func (self PackedDataContainerRef) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PackedDataContainerRef) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PackedDataContainerRef) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PackedDataContainerRef) Virtual(name string) reflect.Value { return reflect.Value{} }

type PackedScene pointers.Trio[PackedScene]

func (self PackedScene) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PackedScene) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PackedScene) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PackedScene) Virtual(name string) reflect.Value { return reflect.Value{} }

type PacketPeer pointers.Trio[PacketPeer]

func (self PacketPeer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PacketPeer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PacketPeer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PacketPeer) Virtual(name string) reflect.Value { return reflect.Value{} }

type PacketPeerDTLS pointers.Trio[PacketPeerDTLS]

func (self PacketPeerDTLS) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PacketPeerDTLS) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PacketPeerDTLS) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PacketPeerDTLS) Virtual(name string) reflect.Value { return reflect.Value{} }

type PacketPeerExtension pointers.Trio[PacketPeerExtension]

func (self PacketPeerExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PacketPeerExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PacketPeerExtension) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PacketPeerExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type PacketPeerStream pointers.Trio[PacketPeerStream]

func (self PacketPeerStream) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PacketPeerStream) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PacketPeerStream) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PacketPeerStream) Virtual(name string) reflect.Value { return reflect.Value{} }

type PacketPeerUDP pointers.Trio[PacketPeerUDP]

func (self PacketPeerUDP) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PacketPeerUDP) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PacketPeerUDP) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PacketPeerUDP) Virtual(name string) reflect.Value { return reflect.Value{} }

type Panel pointers.Trio[Panel]

func (self Panel) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Panel) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Panel) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Panel) Virtual(name string) reflect.Value { return reflect.Value{} }

type PanelContainer pointers.Trio[PanelContainer]

func (self PanelContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PanelContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PanelContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PanelContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type PanoramaSkyMaterial pointers.Trio[PanoramaSkyMaterial]

func (self PanoramaSkyMaterial) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PanoramaSkyMaterial) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PanoramaSkyMaterial) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PanoramaSkyMaterial) Virtual(name string) reflect.Value { return reflect.Value{} }

type Parallax2D pointers.Trio[Parallax2D]

func (self Parallax2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Parallax2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Parallax2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Parallax2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type ParallaxBackground pointers.Trio[ParallaxBackground]

func (self ParallaxBackground) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ParallaxBackground) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ParallaxBackground) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ParallaxBackground) Virtual(name string) reflect.Value { return reflect.Value{} }

type ParallaxLayer pointers.Trio[ParallaxLayer]

func (self ParallaxLayer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ParallaxLayer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ParallaxLayer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ParallaxLayer) Virtual(name string) reflect.Value { return reflect.Value{} }

type ParticleProcessMaterial pointers.Trio[ParticleProcessMaterial]

func (self ParticleProcessMaterial) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ParticleProcessMaterial) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ParticleProcessMaterial) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self ParticleProcessMaterial) Virtual(name string) reflect.Value { return reflect.Value{} }

type Path2D pointers.Trio[Path2D]

func (self Path2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Path2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Path2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Path2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Path3D pointers.Trio[Path3D]

func (self Path3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Path3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Path3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Path3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PathFollow2D pointers.Trio[PathFollow2D]

func (self PathFollow2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PathFollow2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PathFollow2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PathFollow2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PathFollow3D pointers.Trio[PathFollow3D]

func (self PathFollow3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PathFollow3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PathFollow3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PathFollow3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Performance pointers.Trio[Performance]

func (self Performance) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Performance) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Performance) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Performance) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicalBone2D pointers.Trio[PhysicalBone2D]

func (self PhysicalBone2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicalBone2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicalBone2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PhysicalBone2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicalBone3D pointers.Trio[PhysicalBone3D]

func (self PhysicalBone3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicalBone3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicalBone3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PhysicalBone3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicalBoneSimulator3D pointers.Trio[PhysicalBoneSimulator3D]

func (self PhysicalBoneSimulator3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicalBoneSimulator3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicalBoneSimulator3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicalBoneSimulator3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicalSkyMaterial pointers.Trio[PhysicalSkyMaterial]

func (self PhysicalSkyMaterial) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicalSkyMaterial) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicalSkyMaterial) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PhysicalSkyMaterial) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsBody2D pointers.Trio[PhysicsBody2D]

func (self PhysicsBody2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsBody2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsBody2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PhysicsBody2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsBody3D pointers.Trio[PhysicsBody3D]

func (self PhysicsBody3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsBody3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsBody3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PhysicsBody3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsDirectBodyState2D pointers.Trio[PhysicsDirectBodyState2D]

func (self PhysicsDirectBodyState2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsDirectBodyState2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsDirectBodyState2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsDirectBodyState2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsDirectBodyState2DExtension pointers.Trio[PhysicsDirectBodyState2DExtension]

func (self PhysicsDirectBodyState2DExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsDirectBodyState2DExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsDirectBodyState2DExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsDirectBodyState2DExtension) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type PhysicsDirectBodyState3D pointers.Trio[PhysicsDirectBodyState3D]

func (self PhysicsDirectBodyState3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsDirectBodyState3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsDirectBodyState3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsDirectBodyState3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsDirectBodyState3DExtension pointers.Trio[PhysicsDirectBodyState3DExtension]

func (self PhysicsDirectBodyState3DExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsDirectBodyState3DExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsDirectBodyState3DExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsDirectBodyState3DExtension) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type PhysicsDirectSpaceState2D pointers.Trio[PhysicsDirectSpaceState2D]

func (self PhysicsDirectSpaceState2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsDirectSpaceState2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsDirectSpaceState2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsDirectSpaceState2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsDirectSpaceState2DExtension pointers.Trio[PhysicsDirectSpaceState2DExtension]

func (self PhysicsDirectSpaceState2DExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsDirectSpaceState2DExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsDirectSpaceState2DExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsDirectSpaceState2DExtension) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type PhysicsDirectSpaceState3D pointers.Trio[PhysicsDirectSpaceState3D]

func (self PhysicsDirectSpaceState3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsDirectSpaceState3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsDirectSpaceState3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsDirectSpaceState3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsDirectSpaceState3DExtension pointers.Trio[PhysicsDirectSpaceState3DExtension]

func (self PhysicsDirectSpaceState3DExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsDirectSpaceState3DExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsDirectSpaceState3DExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsDirectSpaceState3DExtension) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type PhysicsMaterial pointers.Trio[PhysicsMaterial]

func (self PhysicsMaterial) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsMaterial) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsMaterial) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PhysicsMaterial) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsPointQueryParameters2D pointers.Trio[PhysicsPointQueryParameters2D]

func (self PhysicsPointQueryParameters2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsPointQueryParameters2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsPointQueryParameters2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsPointQueryParameters2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsPointQueryParameters3D pointers.Trio[PhysicsPointQueryParameters3D]

func (self PhysicsPointQueryParameters3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsPointQueryParameters3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsPointQueryParameters3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsPointQueryParameters3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsRayQueryParameters2D pointers.Trio[PhysicsRayQueryParameters2D]

func (self PhysicsRayQueryParameters2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsRayQueryParameters2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsRayQueryParameters2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsRayQueryParameters2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsRayQueryParameters3D pointers.Trio[PhysicsRayQueryParameters3D]

func (self PhysicsRayQueryParameters3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsRayQueryParameters3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsRayQueryParameters3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsRayQueryParameters3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsServer2D pointers.Trio[PhysicsServer2D]

func (self PhysicsServer2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsServer2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsServer2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PhysicsServer2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsServer2DExtension pointers.Trio[PhysicsServer2DExtension]

func (self PhysicsServer2DExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsServer2DExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsServer2DExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsServer2DExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsServer2DManager pointers.Trio[PhysicsServer2DManager]

func (self PhysicsServer2DManager) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsServer2DManager) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsServer2DManager) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsServer2DManager) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsServer3D pointers.Trio[PhysicsServer3D]

func (self PhysicsServer3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsServer3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsServer3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PhysicsServer3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsServer3DExtension pointers.Trio[PhysicsServer3DExtension]

func (self PhysicsServer3DExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsServer3DExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsServer3DExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsServer3DExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsServer3DManager pointers.Trio[PhysicsServer3DManager]

func (self PhysicsServer3DManager) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsServer3DManager) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsServer3DManager) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsServer3DManager) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsServer3DRenderingServerHandler pointers.Trio[PhysicsServer3DRenderingServerHandler]

func (self PhysicsServer3DRenderingServerHandler) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsServer3DRenderingServerHandler) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsServer3DRenderingServerHandler) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsServer3DRenderingServerHandler) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type PhysicsShapeQueryParameters2D pointers.Trio[PhysicsShapeQueryParameters2D]

func (self PhysicsShapeQueryParameters2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsShapeQueryParameters2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsShapeQueryParameters2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsShapeQueryParameters2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsShapeQueryParameters3D pointers.Trio[PhysicsShapeQueryParameters3D]

func (self PhysicsShapeQueryParameters3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsShapeQueryParameters3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsShapeQueryParameters3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsShapeQueryParameters3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsTestMotionParameters2D pointers.Trio[PhysicsTestMotionParameters2D]

func (self PhysicsTestMotionParameters2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsTestMotionParameters2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsTestMotionParameters2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsTestMotionParameters2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsTestMotionParameters3D pointers.Trio[PhysicsTestMotionParameters3D]

func (self PhysicsTestMotionParameters3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsTestMotionParameters3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsTestMotionParameters3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsTestMotionParameters3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsTestMotionResult2D pointers.Trio[PhysicsTestMotionResult2D]

func (self PhysicsTestMotionResult2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsTestMotionResult2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsTestMotionResult2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsTestMotionResult2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PhysicsTestMotionResult3D pointers.Trio[PhysicsTestMotionResult3D]

func (self PhysicsTestMotionResult3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PhysicsTestMotionResult3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PhysicsTestMotionResult3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PhysicsTestMotionResult3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PinJoint2D pointers.Trio[PinJoint2D]

func (self PinJoint2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PinJoint2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PinJoint2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PinJoint2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PinJoint3D pointers.Trio[PinJoint3D]

func (self PinJoint3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PinJoint3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PinJoint3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PinJoint3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PlaceholderCubemap pointers.Trio[PlaceholderCubemap]

func (self PlaceholderCubemap) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PlaceholderCubemap) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PlaceholderCubemap) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PlaceholderCubemap) Virtual(name string) reflect.Value { return reflect.Value{} }

type PlaceholderCubemapArray pointers.Trio[PlaceholderCubemapArray]

func (self PlaceholderCubemapArray) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PlaceholderCubemapArray) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PlaceholderCubemapArray) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PlaceholderCubemapArray) Virtual(name string) reflect.Value { return reflect.Value{} }

type PlaceholderMaterial pointers.Trio[PlaceholderMaterial]

func (self PlaceholderMaterial) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PlaceholderMaterial) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PlaceholderMaterial) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PlaceholderMaterial) Virtual(name string) reflect.Value { return reflect.Value{} }

type PlaceholderMesh pointers.Trio[PlaceholderMesh]

func (self PlaceholderMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PlaceholderMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PlaceholderMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PlaceholderMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type PlaceholderTexture2D pointers.Trio[PlaceholderTexture2D]

func (self PlaceholderTexture2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PlaceholderTexture2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PlaceholderTexture2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PlaceholderTexture2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PlaceholderTexture2DArray pointers.Trio[PlaceholderTexture2DArray]

func (self PlaceholderTexture2DArray) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PlaceholderTexture2DArray) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PlaceholderTexture2DArray) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PlaceholderTexture2DArray) Virtual(name string) reflect.Value { return reflect.Value{} }

type PlaceholderTexture3D pointers.Trio[PlaceholderTexture3D]

func (self PlaceholderTexture3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PlaceholderTexture3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PlaceholderTexture3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PlaceholderTexture3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PlaceholderTextureLayered pointers.Trio[PlaceholderTextureLayered]

func (self PlaceholderTextureLayered) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PlaceholderTextureLayered) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PlaceholderTextureLayered) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PlaceholderTextureLayered) Virtual(name string) reflect.Value { return reflect.Value{} }

type PlaneMesh pointers.Trio[PlaneMesh]

func (self PlaneMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PlaneMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PlaneMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PlaneMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type PointLight2D pointers.Trio[PointLight2D]

func (self PointLight2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PointLight2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PointLight2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PointLight2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PointMesh pointers.Trio[PointMesh]

func (self PointMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PointMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PointMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PointMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type Polygon2D pointers.Trio[Polygon2D]

func (self Polygon2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Polygon2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Polygon2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Polygon2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PolygonOccluder3D pointers.Trio[PolygonOccluder3D]

func (self PolygonOccluder3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PolygonOccluder3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PolygonOccluder3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PolygonOccluder3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PolygonPathFinder pointers.Trio[PolygonPathFinder]

func (self PolygonPathFinder) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PolygonPathFinder) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PolygonPathFinder) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PolygonPathFinder) Virtual(name string) reflect.Value { return reflect.Value{} }

type Popup pointers.Trio[Popup]

func (self Popup) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Popup) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Popup) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Popup) Virtual(name string) reflect.Value { return reflect.Value{} }

type PopupMenu pointers.Trio[PopupMenu]

func (self PopupMenu) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PopupMenu) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PopupMenu) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PopupMenu) Virtual(name string) reflect.Value { return reflect.Value{} }

type PopupPanel pointers.Trio[PopupPanel]

func (self PopupPanel) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PopupPanel) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PopupPanel) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PopupPanel) Virtual(name string) reflect.Value { return reflect.Value{} }

type PortableCompressedTexture2D pointers.Trio[PortableCompressedTexture2D]

func (self PortableCompressedTexture2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PortableCompressedTexture2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PortableCompressedTexture2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self PortableCompressedTexture2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type PrimitiveMesh pointers.Trio[PrimitiveMesh]

func (self PrimitiveMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PrimitiveMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PrimitiveMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PrimitiveMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type PrismMesh pointers.Trio[PrismMesh]

func (self PrismMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PrismMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PrismMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PrismMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type ProceduralSkyMaterial pointers.Trio[ProceduralSkyMaterial]

func (self ProceduralSkyMaterial) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ProceduralSkyMaterial) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ProceduralSkyMaterial) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ProceduralSkyMaterial) Virtual(name string) reflect.Value { return reflect.Value{} }

type ProgressBar pointers.Trio[ProgressBar]

func (self ProgressBar) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ProgressBar) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ProgressBar) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ProgressBar) Virtual(name string) reflect.Value { return reflect.Value{} }

type ProjectSettings pointers.Trio[ProjectSettings]

func (self ProjectSettings) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ProjectSettings) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ProjectSettings) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ProjectSettings) Virtual(name string) reflect.Value { return reflect.Value{} }

type PropertyTweener pointers.Trio[PropertyTweener]

func (self PropertyTweener) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self PropertyTweener) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self PropertyTweener) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self PropertyTweener) Virtual(name string) reflect.Value { return reflect.Value{} }

type QuadMesh pointers.Trio[QuadMesh]

func (self QuadMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self QuadMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self QuadMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self QuadMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type QuadOccluder3D pointers.Trio[QuadOccluder3D]

func (self QuadOccluder3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self QuadOccluder3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self QuadOccluder3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self QuadOccluder3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type RDAttachmentFormat pointers.Trio[RDAttachmentFormat]

func (self RDAttachmentFormat) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDAttachmentFormat) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDAttachmentFormat) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RDAttachmentFormat) Virtual(name string) reflect.Value { return reflect.Value{} }

type RDFramebufferPass pointers.Trio[RDFramebufferPass]

func (self RDFramebufferPass) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDFramebufferPass) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDFramebufferPass) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RDFramebufferPass) Virtual(name string) reflect.Value { return reflect.Value{} }

type RDPipelineColorBlendState pointers.Trio[RDPipelineColorBlendState]

func (self RDPipelineColorBlendState) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDPipelineColorBlendState) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDPipelineColorBlendState) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self RDPipelineColorBlendState) Virtual(name string) reflect.Value { return reflect.Value{} }

type RDPipelineColorBlendStateAttachment pointers.Trio[RDPipelineColorBlendStateAttachment]

func (self RDPipelineColorBlendStateAttachment) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDPipelineColorBlendStateAttachment) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDPipelineColorBlendStateAttachment) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self RDPipelineColorBlendStateAttachment) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type RDPipelineDepthStencilState pointers.Trio[RDPipelineDepthStencilState]

func (self RDPipelineDepthStencilState) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDPipelineDepthStencilState) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDPipelineDepthStencilState) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self RDPipelineDepthStencilState) Virtual(name string) reflect.Value { return reflect.Value{} }

type RDPipelineMultisampleState pointers.Trio[RDPipelineMultisampleState]

func (self RDPipelineMultisampleState) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDPipelineMultisampleState) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDPipelineMultisampleState) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self RDPipelineMultisampleState) Virtual(name string) reflect.Value { return reflect.Value{} }

type RDPipelineRasterizationState pointers.Trio[RDPipelineRasterizationState]

func (self RDPipelineRasterizationState) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDPipelineRasterizationState) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDPipelineRasterizationState) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self RDPipelineRasterizationState) Virtual(name string) reflect.Value { return reflect.Value{} }

type RDPipelineSpecializationConstant pointers.Trio[RDPipelineSpecializationConstant]

func (self RDPipelineSpecializationConstant) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDPipelineSpecializationConstant) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDPipelineSpecializationConstant) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self RDPipelineSpecializationConstant) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type RDSamplerState pointers.Trio[RDSamplerState]

func (self RDSamplerState) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDSamplerState) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDSamplerState) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RDSamplerState) Virtual(name string) reflect.Value { return reflect.Value{} }

type RDShaderFile pointers.Trio[RDShaderFile]

func (self RDShaderFile) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDShaderFile) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDShaderFile) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RDShaderFile) Virtual(name string) reflect.Value { return reflect.Value{} }

type RDShaderSPIRV pointers.Trio[RDShaderSPIRV]

func (self RDShaderSPIRV) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDShaderSPIRV) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDShaderSPIRV) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RDShaderSPIRV) Virtual(name string) reflect.Value { return reflect.Value{} }

type RDShaderSource pointers.Trio[RDShaderSource]

func (self RDShaderSource) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDShaderSource) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDShaderSource) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RDShaderSource) Virtual(name string) reflect.Value { return reflect.Value{} }

type RDTextureFormat pointers.Trio[RDTextureFormat]

func (self RDTextureFormat) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDTextureFormat) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDTextureFormat) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RDTextureFormat) Virtual(name string) reflect.Value { return reflect.Value{} }

type RDTextureView pointers.Trio[RDTextureView]

func (self RDTextureView) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDTextureView) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDTextureView) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RDTextureView) Virtual(name string) reflect.Value { return reflect.Value{} }

type RDUniform pointers.Trio[RDUniform]

func (self RDUniform) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDUniform) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDUniform) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RDUniform) Virtual(name string) reflect.Value { return reflect.Value{} }

type RDVertexAttribute pointers.Trio[RDVertexAttribute]

func (self RDVertexAttribute) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RDVertexAttribute) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RDVertexAttribute) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RDVertexAttribute) Virtual(name string) reflect.Value { return reflect.Value{} }

type RandomNumberGenerator pointers.Trio[RandomNumberGenerator]

func (self RandomNumberGenerator) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RandomNumberGenerator) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RandomNumberGenerator) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RandomNumberGenerator) Virtual(name string) reflect.Value { return reflect.Value{} }

type Range pointers.Trio[Range]

func (self Range) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Range) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Range) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Range) Virtual(name string) reflect.Value { return reflect.Value{} }

type RayCast2D pointers.Trio[RayCast2D]

func (self RayCast2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RayCast2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RayCast2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RayCast2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type RayCast3D pointers.Trio[RayCast3D]

func (self RayCast3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RayCast3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RayCast3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RayCast3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type RectangleShape2D pointers.Trio[RectangleShape2D]

func (self RectangleShape2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RectangleShape2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RectangleShape2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RectangleShape2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type ReferenceRect pointers.Trio[ReferenceRect]

func (self ReferenceRect) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ReferenceRect) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ReferenceRect) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ReferenceRect) Virtual(name string) reflect.Value { return reflect.Value{} }

type ReflectionProbe pointers.Trio[ReflectionProbe]

func (self ReflectionProbe) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ReflectionProbe) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ReflectionProbe) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ReflectionProbe) Virtual(name string) reflect.Value { return reflect.Value{} }

type RegEx pointers.Trio[RegEx]

func (self RegEx) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RegEx) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RegEx) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RegEx) Virtual(name string) reflect.Value { return reflect.Value{} }

type RegExMatch pointers.Trio[RegExMatch]

func (self RegExMatch) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RegExMatch) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RegExMatch) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RegExMatch) Virtual(name string) reflect.Value { return reflect.Value{} }

type RemoteTransform2D pointers.Trio[RemoteTransform2D]

func (self RemoteTransform2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RemoteTransform2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RemoteTransform2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RemoteTransform2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type RemoteTransform3D pointers.Trio[RemoteTransform3D]

func (self RemoteTransform3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RemoteTransform3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RemoteTransform3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RemoteTransform3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type RenderData pointers.Trio[RenderData]

func (self RenderData) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RenderData) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RenderData) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RenderData) Virtual(name string) reflect.Value { return reflect.Value{} }

type RenderDataExtension pointers.Trio[RenderDataExtension]

func (self RenderDataExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RenderDataExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RenderDataExtension) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RenderDataExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type RenderDataRD pointers.Trio[RenderDataRD]

func (self RenderDataRD) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RenderDataRD) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RenderDataRD) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RenderDataRD) Virtual(name string) reflect.Value { return reflect.Value{} }

type RenderSceneBuffers pointers.Trio[RenderSceneBuffers]

func (self RenderSceneBuffers) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RenderSceneBuffers) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RenderSceneBuffers) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RenderSceneBuffers) Virtual(name string) reflect.Value { return reflect.Value{} }

type RenderSceneBuffersConfiguration pointers.Trio[RenderSceneBuffersConfiguration]

func (self RenderSceneBuffersConfiguration) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RenderSceneBuffersConfiguration) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RenderSceneBuffersConfiguration) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self RenderSceneBuffersConfiguration) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type RenderSceneBuffersExtension pointers.Trio[RenderSceneBuffersExtension]

func (self RenderSceneBuffersExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RenderSceneBuffersExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RenderSceneBuffersExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self RenderSceneBuffersExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type RenderSceneBuffersRD pointers.Trio[RenderSceneBuffersRD]

func (self RenderSceneBuffersRD) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RenderSceneBuffersRD) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RenderSceneBuffersRD) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RenderSceneBuffersRD) Virtual(name string) reflect.Value { return reflect.Value{} }

type RenderSceneData pointers.Trio[RenderSceneData]

func (self RenderSceneData) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RenderSceneData) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RenderSceneData) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RenderSceneData) Virtual(name string) reflect.Value { return reflect.Value{} }

type RenderSceneDataExtension pointers.Trio[RenderSceneDataExtension]

func (self RenderSceneDataExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RenderSceneDataExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RenderSceneDataExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self RenderSceneDataExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type RenderSceneDataRD pointers.Trio[RenderSceneDataRD]

func (self RenderSceneDataRD) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RenderSceneDataRD) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RenderSceneDataRD) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RenderSceneDataRD) Virtual(name string) reflect.Value { return reflect.Value{} }

type RenderingDevice pointers.Trio[RenderingDevice]

func (self RenderingDevice) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RenderingDevice) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RenderingDevice) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RenderingDevice) Virtual(name string) reflect.Value { return reflect.Value{} }

type RenderingServer pointers.Trio[RenderingServer]

func (self RenderingServer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RenderingServer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RenderingServer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RenderingServer) Virtual(name string) reflect.Value { return reflect.Value{} }

type Resource pointers.Trio[Resource]

func (self Resource) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Resource) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Resource) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Resource) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceFormatLoader pointers.Trio[ResourceFormatLoader]

func (self ResourceFormatLoader) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceFormatLoader) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceFormatLoader) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ResourceFormatLoader) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceFormatSaver pointers.Trio[ResourceFormatSaver]

func (self ResourceFormatSaver) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceFormatSaver) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceFormatSaver) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ResourceFormatSaver) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporter pointers.Trio[ResourceImporter]

func (self ResourceImporter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporter) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ResourceImporter) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterBMFont pointers.Trio[ResourceImporterBMFont]

func (self ResourceImporterBMFont) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterBMFont) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterBMFont) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self ResourceImporterBMFont) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterBitMap pointers.Trio[ResourceImporterBitMap]

func (self ResourceImporterBitMap) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterBitMap) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterBitMap) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self ResourceImporterBitMap) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterCSV pointers.Trio[ResourceImporterCSV]

func (self ResourceImporterCSV) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterCSV) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterCSV) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ResourceImporterCSV) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterCSVTranslation pointers.Trio[ResourceImporterCSVTranslation]

func (self ResourceImporterCSVTranslation) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterCSVTranslation) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterCSVTranslation) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self ResourceImporterCSVTranslation) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterDynamicFont pointers.Trio[ResourceImporterDynamicFont]

func (self ResourceImporterDynamicFont) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterDynamicFont) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterDynamicFont) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self ResourceImporterDynamicFont) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterImage pointers.Trio[ResourceImporterImage]

func (self ResourceImporterImage) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterImage) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterImage) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ResourceImporterImage) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterImageFont pointers.Trio[ResourceImporterImageFont]

func (self ResourceImporterImageFont) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterImageFont) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterImageFont) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self ResourceImporterImageFont) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterLayeredTexture pointers.Trio[ResourceImporterLayeredTexture]

func (self ResourceImporterLayeredTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterLayeredTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterLayeredTexture) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self ResourceImporterLayeredTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterMP3 pointers.Trio[ResourceImporterMP3]

func (self ResourceImporterMP3) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterMP3) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterMP3) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ResourceImporterMP3) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterOBJ pointers.Trio[ResourceImporterOBJ]

func (self ResourceImporterOBJ) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterOBJ) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterOBJ) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ResourceImporterOBJ) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterOggVorbis pointers.Trio[ResourceImporterOggVorbis]

func (self ResourceImporterOggVorbis) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterOggVorbis) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterOggVorbis) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self ResourceImporterOggVorbis) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterScene pointers.Trio[ResourceImporterScene]

func (self ResourceImporterScene) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterScene) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterScene) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ResourceImporterScene) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterShaderFile pointers.Trio[ResourceImporterShaderFile]

func (self ResourceImporterShaderFile) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterShaderFile) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterShaderFile) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self ResourceImporterShaderFile) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterTexture pointers.Trio[ResourceImporterTexture]

func (self ResourceImporterTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterTexture) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self ResourceImporterTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterTextureAtlas pointers.Trio[ResourceImporterTextureAtlas]

func (self ResourceImporterTextureAtlas) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterTextureAtlas) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterTextureAtlas) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self ResourceImporterTextureAtlas) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceImporterWAV pointers.Trio[ResourceImporterWAV]

func (self ResourceImporterWAV) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceImporterWAV) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceImporterWAV) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ResourceImporterWAV) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceLoader pointers.Trio[ResourceLoader]

func (self ResourceLoader) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceLoader) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceLoader) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ResourceLoader) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourcePreloader pointers.Trio[ResourcePreloader]

func (self ResourcePreloader) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourcePreloader) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourcePreloader) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ResourcePreloader) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceSaver pointers.Trio[ResourceSaver]

func (self ResourceSaver) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceSaver) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceSaver) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ResourceSaver) Virtual(name string) reflect.Value { return reflect.Value{} }

type ResourceUID pointers.Trio[ResourceUID]

func (self ResourceUID) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ResourceUID) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ResourceUID) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ResourceUID) Virtual(name string) reflect.Value { return reflect.Value{} }

type RetargetModifier3D pointers.Trio[RetargetModifier3D]

func (self RetargetModifier3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RetargetModifier3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RetargetModifier3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RetargetModifier3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type RibbonTrailMesh pointers.Trio[RibbonTrailMesh]

func (self RibbonTrailMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RibbonTrailMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RibbonTrailMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RibbonTrailMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type RichTextEffect pointers.Trio[RichTextEffect]

func (self RichTextEffect) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RichTextEffect) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RichTextEffect) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RichTextEffect) Virtual(name string) reflect.Value { return reflect.Value{} }

type RichTextLabel pointers.Trio[RichTextLabel]

func (self RichTextLabel) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RichTextLabel) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RichTextLabel) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RichTextLabel) Virtual(name string) reflect.Value { return reflect.Value{} }

type RigidBody2D pointers.Trio[RigidBody2D]

func (self RigidBody2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RigidBody2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RigidBody2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RigidBody2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type RigidBody3D pointers.Trio[RigidBody3D]

func (self RigidBody3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RigidBody3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RigidBody3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RigidBody3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type RootMotionView pointers.Trio[RootMotionView]

func (self RootMotionView) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self RootMotionView) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self RootMotionView) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self RootMotionView) Virtual(name string) reflect.Value { return reflect.Value{} }

type SQLite pointers.Trio[SQLite]

func (self SQLite) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SQLite) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SQLite) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SQLite) Virtual(name string) reflect.Value { return reflect.Value{} }

type SQLiteAccess pointers.Trio[SQLiteAccess]

func (self SQLiteAccess) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SQLiteAccess) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SQLiteAccess) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SQLiteAccess) Virtual(name string) reflect.Value { return reflect.Value{} }

type SQLiteColumnSchema pointers.Trio[SQLiteColumnSchema]

func (self SQLiteColumnSchema) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SQLiteColumnSchema) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SQLiteColumnSchema) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SQLiteColumnSchema) Virtual(name string) reflect.Value { return reflect.Value{} }

type SQLiteDatabase pointers.Trio[SQLiteDatabase]

func (self SQLiteDatabase) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SQLiteDatabase) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SQLiteDatabase) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SQLiteDatabase) Virtual(name string) reflect.Value { return reflect.Value{} }

type SQLiteQuery pointers.Trio[SQLiteQuery]

func (self SQLiteQuery) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SQLiteQuery) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SQLiteQuery) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SQLiteQuery) Virtual(name string) reflect.Value { return reflect.Value{} }

type SQLiteQueryResult pointers.Trio[SQLiteQueryResult]

func (self SQLiteQueryResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SQLiteQueryResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SQLiteQueryResult) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SQLiteQueryResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type SceneMultiplayer pointers.Trio[SceneMultiplayer]

func (self SceneMultiplayer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SceneMultiplayer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SceneMultiplayer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SceneMultiplayer) Virtual(name string) reflect.Value { return reflect.Value{} }

type SceneReplicationConfig pointers.Trio[SceneReplicationConfig]

func (self SceneReplicationConfig) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SceneReplicationConfig) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SceneReplicationConfig) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SceneReplicationConfig) Virtual(name string) reflect.Value { return reflect.Value{} }

type SceneState pointers.Trio[SceneState]

func (self SceneState) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SceneState) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SceneState) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SceneState) Virtual(name string) reflect.Value { return reflect.Value{} }

type SceneTree pointers.Trio[SceneTree]

func (self SceneTree) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SceneTree) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SceneTree) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SceneTree) Virtual(name string) reflect.Value { return reflect.Value{} }

type SceneTreeTimer pointers.Trio[SceneTreeTimer]

func (self SceneTreeTimer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SceneTreeTimer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SceneTreeTimer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SceneTreeTimer) Virtual(name string) reflect.Value { return reflect.Value{} }

type Script pointers.Trio[Script]

func (self Script) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Script) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Script) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Script) Virtual(name string) reflect.Value { return reflect.Value{} }

type ScriptCreateDialog pointers.Trio[ScriptCreateDialog]

func (self ScriptCreateDialog) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ScriptCreateDialog) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ScriptCreateDialog) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ScriptCreateDialog) Virtual(name string) reflect.Value { return reflect.Value{} }

type ScriptEditor pointers.Trio[ScriptEditor]

func (self ScriptEditor) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ScriptEditor) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ScriptEditor) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ScriptEditor) Virtual(name string) reflect.Value { return reflect.Value{} }

type ScriptEditorBase pointers.Trio[ScriptEditorBase]

func (self ScriptEditorBase) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ScriptEditorBase) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ScriptEditorBase) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ScriptEditorBase) Virtual(name string) reflect.Value { return reflect.Value{} }

type ScriptExtension pointers.Trio[ScriptExtension]

func (self ScriptExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ScriptExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ScriptExtension) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ScriptExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type ScriptLanguage pointers.Trio[ScriptLanguage]

func (self ScriptLanguage) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ScriptLanguage) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ScriptLanguage) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ScriptLanguage) Virtual(name string) reflect.Value { return reflect.Value{} }

type ScriptLanguageExtension pointers.Trio[ScriptLanguageExtension]

func (self ScriptLanguageExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ScriptLanguageExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ScriptLanguageExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self ScriptLanguageExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type ScriptedLobbyClient pointers.Trio[ScriptedLobbyClient]

func (self ScriptedLobbyClient) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ScriptedLobbyClient) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ScriptedLobbyClient) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ScriptedLobbyClient) Virtual(name string) reflect.Value { return reflect.Value{} }

type ScriptedLobbyResponse pointers.Trio[ScriptedLobbyResponse]

func (self ScriptedLobbyResponse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ScriptedLobbyResponse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ScriptedLobbyResponse) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ScriptedLobbyResponse) Virtual(name string) reflect.Value { return reflect.Value{} }

type ScriptedLobbyResult pointers.Trio[ScriptedLobbyResult]

func (self ScriptedLobbyResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ScriptedLobbyResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ScriptedLobbyResult) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ScriptedLobbyResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type ScrollBar pointers.Trio[ScrollBar]

func (self ScrollBar) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ScrollBar) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ScrollBar) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ScrollBar) Virtual(name string) reflect.Value { return reflect.Value{} }

type ScrollContainer pointers.Trio[ScrollContainer]

func (self ScrollContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ScrollContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ScrollContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ScrollContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type SegmentShape2D pointers.Trio[SegmentShape2D]

func (self SegmentShape2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SegmentShape2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SegmentShape2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SegmentShape2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Semaphore pointers.Trio[Semaphore]

func (self Semaphore) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Semaphore) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Semaphore) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Semaphore) Virtual(name string) reflect.Value { return reflect.Value{} }

type SeparationRayShape2D pointers.Trio[SeparationRayShape2D]

func (self SeparationRayShape2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SeparationRayShape2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SeparationRayShape2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SeparationRayShape2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SeparationRayShape3D pointers.Trio[SeparationRayShape3D]

func (self SeparationRayShape3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SeparationRayShape3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SeparationRayShape3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SeparationRayShape3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Separator pointers.Trio[Separator]

func (self Separator) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Separator) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Separator) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Separator) Virtual(name string) reflect.Value { return reflect.Value{} }

type Shader pointers.Trio[Shader]

func (self Shader) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Shader) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Shader) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Shader) Virtual(name string) reflect.Value { return reflect.Value{} }

type ShaderGlobalsOverride pointers.Trio[ShaderGlobalsOverride]

func (self ShaderGlobalsOverride) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ShaderGlobalsOverride) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ShaderGlobalsOverride) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ShaderGlobalsOverride) Virtual(name string) reflect.Value { return reflect.Value{} }

type ShaderInclude pointers.Trio[ShaderInclude]

func (self ShaderInclude) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ShaderInclude) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ShaderInclude) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ShaderInclude) Virtual(name string) reflect.Value { return reflect.Value{} }

type ShaderIncludeDB pointers.Trio[ShaderIncludeDB]

func (self ShaderIncludeDB) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ShaderIncludeDB) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ShaderIncludeDB) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ShaderIncludeDB) Virtual(name string) reflect.Value { return reflect.Value{} }

type ShaderMaterial pointers.Trio[ShaderMaterial]

func (self ShaderMaterial) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ShaderMaterial) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ShaderMaterial) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ShaderMaterial) Virtual(name string) reflect.Value { return reflect.Value{} }

type Shape2D pointers.Trio[Shape2D]

func (self Shape2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Shape2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Shape2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Shape2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Shape3D pointers.Trio[Shape3D]

func (self Shape3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Shape3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Shape3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Shape3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type ShapeCast2D pointers.Trio[ShapeCast2D]

func (self ShapeCast2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ShapeCast2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ShapeCast2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ShapeCast2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type ShapeCast3D pointers.Trio[ShapeCast3D]

func (self ShapeCast3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ShapeCast3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ShapeCast3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ShapeCast3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Shortcut pointers.Trio[Shortcut]

func (self Shortcut) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Shortcut) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Shortcut) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Shortcut) Virtual(name string) reflect.Value { return reflect.Value{} }

type SixWayLightingMaterial pointers.Trio[SixWayLightingMaterial]

func (self SixWayLightingMaterial) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SixWayLightingMaterial) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SixWayLightingMaterial) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SixWayLightingMaterial) Virtual(name string) reflect.Value { return reflect.Value{} }

type Skeleton2D pointers.Trio[Skeleton2D]

func (self Skeleton2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Skeleton2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Skeleton2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Skeleton2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Skeleton3D pointers.Trio[Skeleton3D]

func (self Skeleton3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Skeleton3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Skeleton3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Skeleton3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SkeletonIK3D pointers.Trio[SkeletonIK3D]

func (self SkeletonIK3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SkeletonIK3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SkeletonIK3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SkeletonIK3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SkeletonModification2D pointers.Trio[SkeletonModification2D]

func (self SkeletonModification2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SkeletonModification2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SkeletonModification2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SkeletonModification2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SkeletonModification2DCCDIK pointers.Trio[SkeletonModification2DCCDIK]

func (self SkeletonModification2DCCDIK) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SkeletonModification2DCCDIK) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SkeletonModification2DCCDIK) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SkeletonModification2DCCDIK) Virtual(name string) reflect.Value { return reflect.Value{} }

type SkeletonModification2DFABRIK pointers.Trio[SkeletonModification2DFABRIK]

func (self SkeletonModification2DFABRIK) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SkeletonModification2DFABRIK) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SkeletonModification2DFABRIK) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SkeletonModification2DFABRIK) Virtual(name string) reflect.Value { return reflect.Value{} }

type SkeletonModification2DJiggle pointers.Trio[SkeletonModification2DJiggle]

func (self SkeletonModification2DJiggle) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SkeletonModification2DJiggle) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SkeletonModification2DJiggle) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SkeletonModification2DJiggle) Virtual(name string) reflect.Value { return reflect.Value{} }

type SkeletonModification2DLookAt pointers.Trio[SkeletonModification2DLookAt]

func (self SkeletonModification2DLookAt) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SkeletonModification2DLookAt) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SkeletonModification2DLookAt) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SkeletonModification2DLookAt) Virtual(name string) reflect.Value { return reflect.Value{} }

type SkeletonModification2DPhysicalBones pointers.Trio[SkeletonModification2DPhysicalBones]

func (self SkeletonModification2DPhysicalBones) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SkeletonModification2DPhysicalBones) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SkeletonModification2DPhysicalBones) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SkeletonModification2DPhysicalBones) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type SkeletonModification2DStackHolder pointers.Trio[SkeletonModification2DStackHolder]

func (self SkeletonModification2DStackHolder) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SkeletonModification2DStackHolder) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SkeletonModification2DStackHolder) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SkeletonModification2DStackHolder) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type SkeletonModification2DTwoBoneIK pointers.Trio[SkeletonModification2DTwoBoneIK]

func (self SkeletonModification2DTwoBoneIK) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SkeletonModification2DTwoBoneIK) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SkeletonModification2DTwoBoneIK) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SkeletonModification2DTwoBoneIK) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type SkeletonModificationStack2D pointers.Trio[SkeletonModificationStack2D]

func (self SkeletonModificationStack2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SkeletonModificationStack2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SkeletonModificationStack2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SkeletonModificationStack2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SkeletonModifier3D pointers.Trio[SkeletonModifier3D]

func (self SkeletonModifier3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SkeletonModifier3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SkeletonModifier3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SkeletonModifier3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SkeletonProfile pointers.Trio[SkeletonProfile]

func (self SkeletonProfile) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SkeletonProfile) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SkeletonProfile) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SkeletonProfile) Virtual(name string) reflect.Value { return reflect.Value{} }

type SkeletonProfileHumanoid pointers.Trio[SkeletonProfileHumanoid]

func (self SkeletonProfileHumanoid) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SkeletonProfileHumanoid) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SkeletonProfileHumanoid) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SkeletonProfileHumanoid) Virtual(name string) reflect.Value { return reflect.Value{} }

type Skin pointers.Trio[Skin]

func (self Skin) Free()                      { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Skin) IsAlive(raw [3]uint64) bool { return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw) }

//go:nosplit
func (self Skin) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Skin) Virtual(name string) reflect.Value { return reflect.Value{} }

type SkinReference pointers.Trio[SkinReference]

func (self SkinReference) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SkinReference) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SkinReference) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SkinReference) Virtual(name string) reflect.Value { return reflect.Value{} }

type Sky pointers.Trio[Sky]

func (self Sky) Free()                      { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Sky) IsAlive(raw [3]uint64) bool { return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw) }

//go:nosplit
func (self Sky) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Sky) Virtual(name string) reflect.Value { return reflect.Value{} }

type Slider pointers.Trio[Slider]

func (self Slider) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Slider) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Slider) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Slider) Virtual(name string) reflect.Value { return reflect.Value{} }

type SliderJoint3D pointers.Trio[SliderJoint3D]

func (self SliderJoint3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SliderJoint3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SliderJoint3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SliderJoint3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SoftBody3D pointers.Trio[SoftBody3D]

func (self SoftBody3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SoftBody3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SoftBody3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SoftBody3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SphereMesh pointers.Trio[SphereMesh]

func (self SphereMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SphereMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SphereMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SphereMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type SphereOccluder3D pointers.Trio[SphereOccluder3D]

func (self SphereOccluder3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SphereOccluder3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SphereOccluder3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SphereOccluder3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SphereShape3D pointers.Trio[SphereShape3D]

func (self SphereShape3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SphereShape3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SphereShape3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SphereShape3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SpinBox pointers.Trio[SpinBox]

func (self SpinBox) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SpinBox) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SpinBox) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SpinBox) Virtual(name string) reflect.Value { return reflect.Value{} }

type SplitContainer pointers.Trio[SplitContainer]

func (self SplitContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SplitContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SplitContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SplitContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type SpotLight3D pointers.Trio[SpotLight3D]

func (self SpotLight3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SpotLight3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SpotLight3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SpotLight3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SpringArm3D pointers.Trio[SpringArm3D]

func (self SpringArm3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SpringArm3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SpringArm3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SpringArm3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SpringBoneCollision3D pointers.Trio[SpringBoneCollision3D]

func (self SpringBoneCollision3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SpringBoneCollision3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SpringBoneCollision3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SpringBoneCollision3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SpringBoneCollisionCapsule3D pointers.Trio[SpringBoneCollisionCapsule3D]

func (self SpringBoneCollisionCapsule3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SpringBoneCollisionCapsule3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SpringBoneCollisionCapsule3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SpringBoneCollisionCapsule3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SpringBoneCollisionPlane3D pointers.Trio[SpringBoneCollisionPlane3D]

func (self SpringBoneCollisionPlane3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SpringBoneCollisionPlane3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SpringBoneCollisionPlane3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SpringBoneCollisionPlane3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SpringBoneCollisionSphere3D pointers.Trio[SpringBoneCollisionSphere3D]

func (self SpringBoneCollisionSphere3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SpringBoneCollisionSphere3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SpringBoneCollisionSphere3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self SpringBoneCollisionSphere3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SpringBoneSimulator3D pointers.Trio[SpringBoneSimulator3D]

func (self SpringBoneSimulator3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SpringBoneSimulator3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SpringBoneSimulator3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SpringBoneSimulator3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Sprite2D pointers.Trio[Sprite2D]

func (self Sprite2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Sprite2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Sprite2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Sprite2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Sprite3D pointers.Trio[Sprite3D]

func (self Sprite3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Sprite3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Sprite3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Sprite3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SpriteBase3D pointers.Trio[SpriteBase3D]

func (self SpriteBase3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SpriteBase3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SpriteBase3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SpriteBase3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type SpriteFrames pointers.Trio[SpriteFrames]

func (self SpriteFrames) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SpriteFrames) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SpriteFrames) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SpriteFrames) Virtual(name string) reflect.Value { return reflect.Value{} }

type StandardMaterial3D pointers.Trio[StandardMaterial3D]

func (self StandardMaterial3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StandardMaterial3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StandardMaterial3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StandardMaterial3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type StaticBody2D pointers.Trio[StaticBody2D]

func (self StaticBody2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StaticBody2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StaticBody2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StaticBody2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type StaticBody3D pointers.Trio[StaticBody3D]

func (self StaticBody3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StaticBody3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StaticBody3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StaticBody3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type StatusIndicator pointers.Trio[StatusIndicator]

func (self StatusIndicator) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StatusIndicator) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StatusIndicator) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StatusIndicator) Virtual(name string) reflect.Value { return reflect.Value{} }

type Steam pointers.Trio[Steam]

func (self Steam) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Steam) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Steam) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Steam) Virtual(name string) reflect.Value { return reflect.Value{} }

type StreamPeer pointers.Trio[StreamPeer]

func (self StreamPeer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StreamPeer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StreamPeer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StreamPeer) Virtual(name string) reflect.Value { return reflect.Value{} }

type StreamPeerBuffer pointers.Trio[StreamPeerBuffer]

func (self StreamPeerBuffer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StreamPeerBuffer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StreamPeerBuffer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StreamPeerBuffer) Virtual(name string) reflect.Value { return reflect.Value{} }

type StreamPeerExtension pointers.Trio[StreamPeerExtension]

func (self StreamPeerExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StreamPeerExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StreamPeerExtension) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StreamPeerExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type StreamPeerGZIP pointers.Trio[StreamPeerGZIP]

func (self StreamPeerGZIP) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StreamPeerGZIP) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StreamPeerGZIP) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StreamPeerGZIP) Virtual(name string) reflect.Value { return reflect.Value{} }

type StreamPeerTCP pointers.Trio[StreamPeerTCP]

func (self StreamPeerTCP) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StreamPeerTCP) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StreamPeerTCP) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StreamPeerTCP) Virtual(name string) reflect.Value { return reflect.Value{} }

type StreamPeerTLS pointers.Trio[StreamPeerTLS]

func (self StreamPeerTLS) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StreamPeerTLS) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StreamPeerTLS) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StreamPeerTLS) Virtual(name string) reflect.Value { return reflect.Value{} }

type StyleBox pointers.Trio[StyleBox]

func (self StyleBox) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StyleBox) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StyleBox) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StyleBox) Virtual(name string) reflect.Value { return reflect.Value{} }

type StyleBoxEmpty pointers.Trio[StyleBoxEmpty]

func (self StyleBoxEmpty) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StyleBoxEmpty) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StyleBoxEmpty) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StyleBoxEmpty) Virtual(name string) reflect.Value { return reflect.Value{} }

type StyleBoxFlat pointers.Trio[StyleBoxFlat]

func (self StyleBoxFlat) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StyleBoxFlat) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StyleBoxFlat) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StyleBoxFlat) Virtual(name string) reflect.Value { return reflect.Value{} }

type StyleBoxLine pointers.Trio[StyleBoxLine]

func (self StyleBoxLine) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StyleBoxLine) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StyleBoxLine) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StyleBoxLine) Virtual(name string) reflect.Value { return reflect.Value{} }

type StyleBoxTexture pointers.Trio[StyleBoxTexture]

func (self StyleBoxTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self StyleBoxTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self StyleBoxTexture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self StyleBoxTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type SubViewport pointers.Trio[SubViewport]

func (self SubViewport) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SubViewport) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SubViewport) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SubViewport) Virtual(name string) reflect.Value { return reflect.Value{} }

type SubViewportContainer pointers.Trio[SubViewportContainer]

func (self SubViewportContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SubViewportContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SubViewportContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SubViewportContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type SubtweenTweener pointers.Trio[SubtweenTweener]

func (self SubtweenTweener) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SubtweenTweener) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SubtweenTweener) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SubtweenTweener) Virtual(name string) reflect.Value { return reflect.Value{} }

type SurfaceTool pointers.Trio[SurfaceTool]

func (self SurfaceTool) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SurfaceTool) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SurfaceTool) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SurfaceTool) Virtual(name string) reflect.Value { return reflect.Value{} }

type SyntaxHighlighter pointers.Trio[SyntaxHighlighter]

func (self SyntaxHighlighter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SyntaxHighlighter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SyntaxHighlighter) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SyntaxHighlighter) Virtual(name string) reflect.Value { return reflect.Value{} }

type SystemFont pointers.Trio[SystemFont]

func (self SystemFont) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self SystemFont) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self SystemFont) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self SystemFont) Virtual(name string) reflect.Value { return reflect.Value{} }

type TCPServer pointers.Trio[TCPServer]

func (self TCPServer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TCPServer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TCPServer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TCPServer) Virtual(name string) reflect.Value { return reflect.Value{} }

type TLSOptions pointers.Trio[TLSOptions]

func (self TLSOptions) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TLSOptions) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TLSOptions) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TLSOptions) Virtual(name string) reflect.Value { return reflect.Value{} }

type TabBar pointers.Trio[TabBar]

func (self TabBar) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TabBar) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TabBar) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TabBar) Virtual(name string) reflect.Value { return reflect.Value{} }

type TabContainer pointers.Trio[TabContainer]

func (self TabContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TabContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TabContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TabContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextEdit pointers.Trio[TextEdit]

func (self TextEdit) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextEdit) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextEdit) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextEdit) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextLine pointers.Trio[TextLine]

func (self TextLine) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextLine) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextLine) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextLine) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextMesh pointers.Trio[TextMesh]

func (self TextMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextParagraph pointers.Trio[TextParagraph]

func (self TextParagraph) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextParagraph) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextParagraph) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextParagraph) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextServer pointers.Trio[TextServer]

func (self TextServer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextServer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextServer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextServer) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextServerAdvanced pointers.Trio[TextServerAdvanced]

func (self TextServerAdvanced) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextServerAdvanced) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextServerAdvanced) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextServerAdvanced) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextServerDummy pointers.Trio[TextServerDummy]

func (self TextServerDummy) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextServerDummy) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextServerDummy) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextServerDummy) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextServerExtension pointers.Trio[TextServerExtension]

func (self TextServerExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextServerExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextServerExtension) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextServerExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextServerManager pointers.Trio[TextServerManager]

func (self TextServerManager) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextServerManager) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextServerManager) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextServerManager) Virtual(name string) reflect.Value { return reflect.Value{} }

type Texture pointers.Trio[Texture]

func (self Texture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Texture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Texture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Texture) Virtual(name string) reflect.Value { return reflect.Value{} }

type Texture2D pointers.Trio[Texture2D]

func (self Texture2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Texture2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Texture2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Texture2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Texture2DArray pointers.Trio[Texture2DArray]

func (self Texture2DArray) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Texture2DArray) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Texture2DArray) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Texture2DArray) Virtual(name string) reflect.Value { return reflect.Value{} }

type Texture2DArrayRD pointers.Trio[Texture2DArrayRD]

func (self Texture2DArrayRD) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Texture2DArrayRD) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Texture2DArrayRD) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Texture2DArrayRD) Virtual(name string) reflect.Value { return reflect.Value{} }

type Texture2DRD pointers.Trio[Texture2DRD]

func (self Texture2DRD) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Texture2DRD) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Texture2DRD) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Texture2DRD) Virtual(name string) reflect.Value { return reflect.Value{} }

type Texture3D pointers.Trio[Texture3D]

func (self Texture3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Texture3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Texture3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Texture3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type Texture3DRD pointers.Trio[Texture3DRD]

func (self Texture3DRD) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Texture3DRD) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Texture3DRD) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Texture3DRD) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextureButton pointers.Trio[TextureButton]

func (self TextureButton) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextureButton) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextureButton) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextureButton) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextureCubemapArrayRD pointers.Trio[TextureCubemapArrayRD]

func (self TextureCubemapArrayRD) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextureCubemapArrayRD) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextureCubemapArrayRD) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextureCubemapArrayRD) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextureCubemapRD pointers.Trio[TextureCubemapRD]

func (self TextureCubemapRD) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextureCubemapRD) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextureCubemapRD) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextureCubemapRD) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextureLayered pointers.Trio[TextureLayered]

func (self TextureLayered) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextureLayered) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextureLayered) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextureLayered) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextureLayeredRD pointers.Trio[TextureLayeredRD]

func (self TextureLayeredRD) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextureLayeredRD) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextureLayeredRD) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextureLayeredRD) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextureProgressBar pointers.Trio[TextureProgressBar]

func (self TextureProgressBar) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextureProgressBar) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextureProgressBar) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextureProgressBar) Virtual(name string) reflect.Value { return reflect.Value{} }

type TextureRect pointers.Trio[TextureRect]

func (self TextureRect) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TextureRect) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TextureRect) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TextureRect) Virtual(name string) reflect.Value { return reflect.Value{} }

type Theme pointers.Trio[Theme]

func (self Theme) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Theme) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Theme) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Theme) Virtual(name string) reflect.Value { return reflect.Value{} }

type ThemeDB pointers.Trio[ThemeDB]

func (self ThemeDB) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ThemeDB) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ThemeDB) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ThemeDB) Virtual(name string) reflect.Value { return reflect.Value{} }

type ThirdPartyClient pointers.Trio[ThirdPartyClient]

func (self ThirdPartyClient) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ThirdPartyClient) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ThirdPartyClient) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ThirdPartyClient) Virtual(name string) reflect.Value { return reflect.Value{} }

type Thread pointers.Trio[Thread]

func (self Thread) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Thread) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Thread) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Thread) Virtual(name string) reflect.Value { return reflect.Value{} }

type TileData pointers.Trio[TileData]

func (self TileData) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TileData) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TileData) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TileData) Virtual(name string) reflect.Value { return reflect.Value{} }

type TileMap pointers.Trio[TileMap]

func (self TileMap) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TileMap) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TileMap) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TileMap) Virtual(name string) reflect.Value { return reflect.Value{} }

type TileMapLayer pointers.Trio[TileMapLayer]

func (self TileMapLayer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TileMapLayer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TileMapLayer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TileMapLayer) Virtual(name string) reflect.Value { return reflect.Value{} }

type TileMapPattern pointers.Trio[TileMapPattern]

func (self TileMapPattern) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TileMapPattern) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TileMapPattern) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TileMapPattern) Virtual(name string) reflect.Value { return reflect.Value{} }

type TileSet pointers.Trio[TileSet]

func (self TileSet) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TileSet) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TileSet) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TileSet) Virtual(name string) reflect.Value { return reflect.Value{} }

type TileSetAtlasSource pointers.Trio[TileSetAtlasSource]

func (self TileSetAtlasSource) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TileSetAtlasSource) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TileSetAtlasSource) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TileSetAtlasSource) Virtual(name string) reflect.Value { return reflect.Value{} }

type TileSetScenesCollectionSource pointers.Trio[TileSetScenesCollectionSource]

func (self TileSetScenesCollectionSource) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TileSetScenesCollectionSource) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TileSetScenesCollectionSource) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self TileSetScenesCollectionSource) Virtual(name string) reflect.Value { return reflect.Value{} }

type TileSetSource pointers.Trio[TileSetSource]

func (self TileSetSource) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TileSetSource) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TileSetSource) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TileSetSource) Virtual(name string) reflect.Value { return reflect.Value{} }

type Time pointers.Trio[Time]

func (self Time) Free()                      { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Time) IsAlive(raw [3]uint64) bool { return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw) }

//go:nosplit
func (self Time) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Time) Virtual(name string) reflect.Value { return reflect.Value{} }

type Timer pointers.Trio[Timer]

func (self Timer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Timer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Timer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Timer) Virtual(name string) reflect.Value { return reflect.Value{} }

type TorusMesh pointers.Trio[TorusMesh]

func (self TorusMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TorusMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TorusMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TorusMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type TouchScreenButton pointers.Trio[TouchScreenButton]

func (self TouchScreenButton) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TouchScreenButton) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TouchScreenButton) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TouchScreenButton) Virtual(name string) reflect.Value { return reflect.Value{} }

type Translation pointers.Trio[Translation]

func (self Translation) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Translation) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Translation) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Translation) Virtual(name string) reflect.Value { return reflect.Value{} }

type TranslationDomain pointers.Trio[TranslationDomain]

func (self TranslationDomain) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TranslationDomain) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TranslationDomain) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TranslationDomain) Virtual(name string) reflect.Value { return reflect.Value{} }

type TranslationServer pointers.Trio[TranslationServer]

func (self TranslationServer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TranslationServer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TranslationServer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TranslationServer) Virtual(name string) reflect.Value { return reflect.Value{} }

type Tree pointers.Trio[Tree]

func (self Tree) Free()                      { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Tree) IsAlive(raw [3]uint64) bool { return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw) }

//go:nosplit
func (self Tree) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Tree) Virtual(name string) reflect.Value { return reflect.Value{} }

type TreeItem pointers.Trio[TreeItem]

func (self TreeItem) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TreeItem) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TreeItem) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TreeItem) Virtual(name string) reflect.Value { return reflect.Value{} }

type TriangleMesh pointers.Trio[TriangleMesh]

func (self TriangleMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TriangleMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TriangleMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TriangleMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type TubeTrailMesh pointers.Trio[TubeTrailMesh]

func (self TubeTrailMesh) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self TubeTrailMesh) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self TubeTrailMesh) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self TubeTrailMesh) Virtual(name string) reflect.Value { return reflect.Value{} }

type Tween pointers.Trio[Tween]

func (self Tween) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Tween) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Tween) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Tween) Virtual(name string) reflect.Value { return reflect.Value{} }

type Tweener pointers.Trio[Tweener]

func (self Tweener) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Tweener) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Tweener) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Tweener) Virtual(name string) reflect.Value { return reflect.Value{} }

type UDPServer pointers.Trio[UDPServer]

func (self UDPServer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self UDPServer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self UDPServer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self UDPServer) Virtual(name string) reflect.Value { return reflect.Value{} }

type UPNP pointers.Trio[UPNP]

func (self UPNP) Free()                      { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self UPNP) IsAlive(raw [3]uint64) bool { return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw) }

//go:nosplit
func (self UPNP) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self UPNP) Virtual(name string) reflect.Value { return reflect.Value{} }

type UPNPDevice pointers.Trio[UPNPDevice]

func (self UPNPDevice) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self UPNPDevice) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self UPNPDevice) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self UPNPDevice) Virtual(name string) reflect.Value { return reflect.Value{} }

type UndoRedo pointers.Trio[UndoRedo]

func (self UndoRedo) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self UndoRedo) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self UndoRedo) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self UndoRedo) Virtual(name string) reflect.Value { return reflect.Value{} }

type UniformSetCacheRD pointers.Trio[UniformSetCacheRD]

func (self UniformSetCacheRD) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self UniformSetCacheRD) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self UniformSetCacheRD) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self UniformSetCacheRD) Virtual(name string) reflect.Value { return reflect.Value{} }

type VBoxContainer pointers.Trio[VBoxContainer]

func (self VBoxContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VBoxContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VBoxContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VBoxContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type VFlowContainer pointers.Trio[VFlowContainer]

func (self VFlowContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VFlowContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VFlowContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VFlowContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type VScrollBar pointers.Trio[VScrollBar]

func (self VScrollBar) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VScrollBar) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VScrollBar) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VScrollBar) Virtual(name string) reflect.Value { return reflect.Value{} }

type VSeparator pointers.Trio[VSeparator]

func (self VSeparator) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VSeparator) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VSeparator) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VSeparator) Virtual(name string) reflect.Value { return reflect.Value{} }

type VSlider pointers.Trio[VSlider]

func (self VSlider) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VSlider) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VSlider) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VSlider) Virtual(name string) reflect.Value { return reflect.Value{} }

type VSplitContainer pointers.Trio[VSplitContainer]

func (self VSplitContainer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VSplitContainer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VSplitContainer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VSplitContainer) Virtual(name string) reflect.Value { return reflect.Value{} }

type VehicleBody3D pointers.Trio[VehicleBody3D]

func (self VehicleBody3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VehicleBody3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VehicleBody3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VehicleBody3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type VehicleWheel3D pointers.Trio[VehicleWheel3D]

func (self VehicleWheel3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VehicleWheel3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VehicleWheel3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VehicleWheel3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type VideoStream pointers.Trio[VideoStream]

func (self VideoStream) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VideoStream) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VideoStream) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VideoStream) Virtual(name string) reflect.Value { return reflect.Value{} }

type VideoStreamPlayback pointers.Trio[VideoStreamPlayback]

func (self VideoStreamPlayback) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VideoStreamPlayback) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VideoStreamPlayback) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VideoStreamPlayback) Virtual(name string) reflect.Value { return reflect.Value{} }

type VideoStreamPlayer pointers.Trio[VideoStreamPlayer]

func (self VideoStreamPlayer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VideoStreamPlayer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VideoStreamPlayer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VideoStreamPlayer) Virtual(name string) reflect.Value { return reflect.Value{} }

type VideoStreamTheora pointers.Trio[VideoStreamTheora]

func (self VideoStreamTheora) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VideoStreamTheora) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VideoStreamTheora) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VideoStreamTheora) Virtual(name string) reflect.Value { return reflect.Value{} }

type ViewLobbyResponse pointers.Trio[ViewLobbyResponse]

func (self ViewLobbyResponse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ViewLobbyResponse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ViewLobbyResponse) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ViewLobbyResponse) Virtual(name string) reflect.Value { return reflect.Value{} }

type ViewLobbyResult pointers.Trio[ViewLobbyResult]

func (self ViewLobbyResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ViewLobbyResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ViewLobbyResult) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ViewLobbyResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type Viewport pointers.Trio[Viewport]

func (self Viewport) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Viewport) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Viewport) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Viewport) Virtual(name string) reflect.Value { return reflect.Value{} }

type ViewportTexture pointers.Trio[ViewportTexture]

func (self ViewportTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ViewportTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ViewportTexture) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ViewportTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisibleOnScreenEnabler2D pointers.Trio[VisibleOnScreenEnabler2D]

func (self VisibleOnScreenEnabler2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisibleOnScreenEnabler2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisibleOnScreenEnabler2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisibleOnScreenEnabler2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisibleOnScreenEnabler3D pointers.Trio[VisibleOnScreenEnabler3D]

func (self VisibleOnScreenEnabler3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisibleOnScreenEnabler3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisibleOnScreenEnabler3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisibleOnScreenEnabler3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisibleOnScreenNotifier2D pointers.Trio[VisibleOnScreenNotifier2D]

func (self VisibleOnScreenNotifier2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisibleOnScreenNotifier2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisibleOnScreenNotifier2D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisibleOnScreenNotifier2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisibleOnScreenNotifier3D pointers.Trio[VisibleOnScreenNotifier3D]

func (self VisibleOnScreenNotifier3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisibleOnScreenNotifier3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisibleOnScreenNotifier3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisibleOnScreenNotifier3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualInstance3D pointers.Trio[VisualInstance3D]

func (self VisualInstance3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualInstance3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualInstance3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VisualInstance3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShader pointers.Trio[VisualShader]

func (self VisualShader) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShader) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShader) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VisualShader) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNode pointers.Trio[VisualShaderNode]

func (self VisualShaderNode) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNode) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNode) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VisualShaderNode) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeBillboard pointers.Trio[VisualShaderNodeBillboard]

func (self VisualShaderNodeBillboard) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeBillboard) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeBillboard) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeBillboard) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeBooleanConstant pointers.Trio[VisualShaderNodeBooleanConstant]

func (self VisualShaderNodeBooleanConstant) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeBooleanConstant) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeBooleanConstant) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeBooleanConstant) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeBooleanParameter pointers.Trio[VisualShaderNodeBooleanParameter]

func (self VisualShaderNodeBooleanParameter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeBooleanParameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeBooleanParameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeBooleanParameter) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeClamp pointers.Trio[VisualShaderNodeClamp]

func (self VisualShaderNodeClamp) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeClamp) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeClamp) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VisualShaderNodeClamp) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeColorConstant pointers.Trio[VisualShaderNodeColorConstant]

func (self VisualShaderNodeColorConstant) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeColorConstant) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeColorConstant) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeColorConstant) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeColorFunc pointers.Trio[VisualShaderNodeColorFunc]

func (self VisualShaderNodeColorFunc) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeColorFunc) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeColorFunc) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeColorFunc) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeColorOp pointers.Trio[VisualShaderNodeColorOp]

func (self VisualShaderNodeColorOp) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeColorOp) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeColorOp) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeColorOp) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeColorParameter pointers.Trio[VisualShaderNodeColorParameter]

func (self VisualShaderNodeColorParameter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeColorParameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeColorParameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeColorParameter) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeComment pointers.Trio[VisualShaderNodeComment]

func (self VisualShaderNodeComment) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeComment) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeComment) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeComment) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeCompare pointers.Trio[VisualShaderNodeCompare]

func (self VisualShaderNodeCompare) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeCompare) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeCompare) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeCompare) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeConstant pointers.Trio[VisualShaderNodeConstant]

func (self VisualShaderNodeConstant) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeConstant) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeConstant) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeConstant) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeCubemap pointers.Trio[VisualShaderNodeCubemap]

func (self VisualShaderNodeCubemap) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeCubemap) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeCubemap) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeCubemap) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeCubemapParameter pointers.Trio[VisualShaderNodeCubemapParameter]

func (self VisualShaderNodeCubemapParameter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeCubemapParameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeCubemapParameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeCubemapParameter) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeCurveTexture pointers.Trio[VisualShaderNodeCurveTexture]

func (self VisualShaderNodeCurveTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeCurveTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeCurveTexture) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeCurveTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeCurveXYZTexture pointers.Trio[VisualShaderNodeCurveXYZTexture]

func (self VisualShaderNodeCurveXYZTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeCurveXYZTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeCurveXYZTexture) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeCurveXYZTexture) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeCustom pointers.Trio[VisualShaderNodeCustom]

func (self VisualShaderNodeCustom) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeCustom) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeCustom) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeCustom) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeDerivativeFunc pointers.Trio[VisualShaderNodeDerivativeFunc]

func (self VisualShaderNodeDerivativeFunc) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeDerivativeFunc) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeDerivativeFunc) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeDerivativeFunc) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeDeterminant pointers.Trio[VisualShaderNodeDeterminant]

func (self VisualShaderNodeDeterminant) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeDeterminant) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeDeterminant) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeDeterminant) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeDistanceFade pointers.Trio[VisualShaderNodeDistanceFade]

func (self VisualShaderNodeDistanceFade) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeDistanceFade) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeDistanceFade) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeDistanceFade) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeDotProduct pointers.Trio[VisualShaderNodeDotProduct]

func (self VisualShaderNodeDotProduct) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeDotProduct) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeDotProduct) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeDotProduct) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeExpression pointers.Trio[VisualShaderNodeExpression]

func (self VisualShaderNodeExpression) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeExpression) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeExpression) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeExpression) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeFaceForward pointers.Trio[VisualShaderNodeFaceForward]

func (self VisualShaderNodeFaceForward) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeFaceForward) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeFaceForward) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeFaceForward) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeFloatConstant pointers.Trio[VisualShaderNodeFloatConstant]

func (self VisualShaderNodeFloatConstant) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeFloatConstant) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeFloatConstant) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeFloatConstant) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeFloatFunc pointers.Trio[VisualShaderNodeFloatFunc]

func (self VisualShaderNodeFloatFunc) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeFloatFunc) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeFloatFunc) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeFloatFunc) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeFloatOp pointers.Trio[VisualShaderNodeFloatOp]

func (self VisualShaderNodeFloatOp) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeFloatOp) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeFloatOp) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeFloatOp) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeFloatParameter pointers.Trio[VisualShaderNodeFloatParameter]

func (self VisualShaderNodeFloatParameter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeFloatParameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeFloatParameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeFloatParameter) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeFrame pointers.Trio[VisualShaderNodeFrame]

func (self VisualShaderNodeFrame) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeFrame) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeFrame) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VisualShaderNodeFrame) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeFresnel pointers.Trio[VisualShaderNodeFresnel]

func (self VisualShaderNodeFresnel) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeFresnel) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeFresnel) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeFresnel) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeGlobalExpression pointers.Trio[VisualShaderNodeGlobalExpression]

func (self VisualShaderNodeGlobalExpression) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeGlobalExpression) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeGlobalExpression) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeGlobalExpression) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeGroupBase pointers.Trio[VisualShaderNodeGroupBase]

func (self VisualShaderNodeGroupBase) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeGroupBase) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeGroupBase) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeGroupBase) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeIf pointers.Trio[VisualShaderNodeIf]

func (self VisualShaderNodeIf) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeIf) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeIf) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VisualShaderNodeIf) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeInput pointers.Trio[VisualShaderNodeInput]

func (self VisualShaderNodeInput) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeInput) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeInput) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VisualShaderNodeInput) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeIntConstant pointers.Trio[VisualShaderNodeIntConstant]

func (self VisualShaderNodeIntConstant) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeIntConstant) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeIntConstant) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeIntConstant) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeIntFunc pointers.Trio[VisualShaderNodeIntFunc]

func (self VisualShaderNodeIntFunc) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeIntFunc) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeIntFunc) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeIntFunc) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeIntOp pointers.Trio[VisualShaderNodeIntOp]

func (self VisualShaderNodeIntOp) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeIntOp) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeIntOp) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VisualShaderNodeIntOp) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeIntParameter pointers.Trio[VisualShaderNodeIntParameter]

func (self VisualShaderNodeIntParameter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeIntParameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeIntParameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeIntParameter) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeIs pointers.Trio[VisualShaderNodeIs]

func (self VisualShaderNodeIs) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeIs) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeIs) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VisualShaderNodeIs) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeLinearSceneDepth pointers.Trio[VisualShaderNodeLinearSceneDepth]

func (self VisualShaderNodeLinearSceneDepth) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeLinearSceneDepth) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeLinearSceneDepth) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeLinearSceneDepth) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeMix pointers.Trio[VisualShaderNodeMix]

func (self VisualShaderNodeMix) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeMix) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeMix) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VisualShaderNodeMix) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeMultiplyAdd pointers.Trio[VisualShaderNodeMultiplyAdd]

func (self VisualShaderNodeMultiplyAdd) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeMultiplyAdd) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeMultiplyAdd) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeMultiplyAdd) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeOuterProduct pointers.Trio[VisualShaderNodeOuterProduct]

func (self VisualShaderNodeOuterProduct) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeOuterProduct) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeOuterProduct) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeOuterProduct) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeOutput pointers.Trio[VisualShaderNodeOutput]

func (self VisualShaderNodeOutput) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeOutput) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeOutput) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeOutput) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeParameter pointers.Trio[VisualShaderNodeParameter]

func (self VisualShaderNodeParameter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeParameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeParameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeParameter) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeParameterRef pointers.Trio[VisualShaderNodeParameterRef]

func (self VisualShaderNodeParameterRef) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeParameterRef) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeParameterRef) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeParameterRef) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeParticleAccelerator pointers.Trio[VisualShaderNodeParticleAccelerator]

func (self VisualShaderNodeParticleAccelerator) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeParticleAccelerator) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeParticleAccelerator) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeParticleAccelerator) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeParticleBoxEmitter pointers.Trio[VisualShaderNodeParticleBoxEmitter]

func (self VisualShaderNodeParticleBoxEmitter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeParticleBoxEmitter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeParticleBoxEmitter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeParticleBoxEmitter) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeParticleConeVelocity pointers.Trio[VisualShaderNodeParticleConeVelocity]

func (self VisualShaderNodeParticleConeVelocity) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeParticleConeVelocity) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeParticleConeVelocity) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeParticleConeVelocity) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeParticleEmit pointers.Trio[VisualShaderNodeParticleEmit]

func (self VisualShaderNodeParticleEmit) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeParticleEmit) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeParticleEmit) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeParticleEmit) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeParticleEmitter pointers.Trio[VisualShaderNodeParticleEmitter]

func (self VisualShaderNodeParticleEmitter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeParticleEmitter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeParticleEmitter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeParticleEmitter) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeParticleMeshEmitter pointers.Trio[VisualShaderNodeParticleMeshEmitter]

func (self VisualShaderNodeParticleMeshEmitter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeParticleMeshEmitter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeParticleMeshEmitter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeParticleMeshEmitter) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeParticleMultiplyByAxisAngle pointers.Trio[VisualShaderNodeParticleMultiplyByAxisAngle]

func (self VisualShaderNodeParticleMultiplyByAxisAngle) Free() {
	(*(*Object)(unsafe.Pointer(&self))).Free()
}
func (self VisualShaderNodeParticleMultiplyByAxisAngle) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeParticleMultiplyByAxisAngle) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeParticleMultiplyByAxisAngle) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeParticleOutput pointers.Trio[VisualShaderNodeParticleOutput]

func (self VisualShaderNodeParticleOutput) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeParticleOutput) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeParticleOutput) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeParticleOutput) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeParticleRandomness pointers.Trio[VisualShaderNodeParticleRandomness]

func (self VisualShaderNodeParticleRandomness) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeParticleRandomness) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeParticleRandomness) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeParticleRandomness) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeParticleRingEmitter pointers.Trio[VisualShaderNodeParticleRingEmitter]

func (self VisualShaderNodeParticleRingEmitter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeParticleRingEmitter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeParticleRingEmitter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeParticleRingEmitter) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeParticleSphereEmitter pointers.Trio[VisualShaderNodeParticleSphereEmitter]

func (self VisualShaderNodeParticleSphereEmitter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeParticleSphereEmitter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeParticleSphereEmitter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeParticleSphereEmitter) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeProximityFade pointers.Trio[VisualShaderNodeProximityFade]

func (self VisualShaderNodeProximityFade) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeProximityFade) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeProximityFade) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeProximityFade) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeRandomRange pointers.Trio[VisualShaderNodeRandomRange]

func (self VisualShaderNodeRandomRange) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeRandomRange) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeRandomRange) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeRandomRange) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeRemap pointers.Trio[VisualShaderNodeRemap]

func (self VisualShaderNodeRemap) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeRemap) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeRemap) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VisualShaderNodeRemap) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeReroute pointers.Trio[VisualShaderNodeReroute]

func (self VisualShaderNodeReroute) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeReroute) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeReroute) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeReroute) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeResizableBase pointers.Trio[VisualShaderNodeResizableBase]

func (self VisualShaderNodeResizableBase) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeResizableBase) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeResizableBase) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeResizableBase) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeRotationByAxis pointers.Trio[VisualShaderNodeRotationByAxis]

func (self VisualShaderNodeRotationByAxis) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeRotationByAxis) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeRotationByAxis) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeRotationByAxis) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeSDFRaymarch pointers.Trio[VisualShaderNodeSDFRaymarch]

func (self VisualShaderNodeSDFRaymarch) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeSDFRaymarch) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeSDFRaymarch) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeSDFRaymarch) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeSDFToScreenUV pointers.Trio[VisualShaderNodeSDFToScreenUV]

func (self VisualShaderNodeSDFToScreenUV) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeSDFToScreenUV) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeSDFToScreenUV) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeSDFToScreenUV) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeSample3D pointers.Trio[VisualShaderNodeSample3D]

func (self VisualShaderNodeSample3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeSample3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeSample3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeSample3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeScreenNormalWorldSpace pointers.Trio[VisualShaderNodeScreenNormalWorldSpace]

func (self VisualShaderNodeScreenNormalWorldSpace) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeScreenNormalWorldSpace) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeScreenNormalWorldSpace) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeScreenNormalWorldSpace) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeScreenUVToSDF pointers.Trio[VisualShaderNodeScreenUVToSDF]

func (self VisualShaderNodeScreenUVToSDF) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeScreenUVToSDF) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeScreenUVToSDF) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeScreenUVToSDF) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeSmoothStep pointers.Trio[VisualShaderNodeSmoothStep]

func (self VisualShaderNodeSmoothStep) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeSmoothStep) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeSmoothStep) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeSmoothStep) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeStep pointers.Trio[VisualShaderNodeStep]

func (self VisualShaderNodeStep) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeStep) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeStep) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VisualShaderNodeStep) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeSwitch pointers.Trio[VisualShaderNodeSwitch]

func (self VisualShaderNodeSwitch) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeSwitch) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeSwitch) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeSwitch) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeTexture pointers.Trio[VisualShaderNodeTexture]

func (self VisualShaderNodeTexture) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTexture) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTexture) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTexture) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeTexture2DArray pointers.Trio[VisualShaderNodeTexture2DArray]

func (self VisualShaderNodeTexture2DArray) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTexture2DArray) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTexture2DArray) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTexture2DArray) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeTexture2DArrayParameter pointers.Trio[VisualShaderNodeTexture2DArrayParameter]

func (self VisualShaderNodeTexture2DArrayParameter) Free() {
	(*(*Object)(unsafe.Pointer(&self))).Free()
}
func (self VisualShaderNodeTexture2DArrayParameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTexture2DArrayParameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTexture2DArrayParameter) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeTexture2DParameter pointers.Trio[VisualShaderNodeTexture2DParameter]

func (self VisualShaderNodeTexture2DParameter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTexture2DParameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTexture2DParameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTexture2DParameter) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeTexture3D pointers.Trio[VisualShaderNodeTexture3D]

func (self VisualShaderNodeTexture3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTexture3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTexture3D) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTexture3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeTexture3DParameter pointers.Trio[VisualShaderNodeTexture3DParameter]

func (self VisualShaderNodeTexture3DParameter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTexture3DParameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTexture3DParameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTexture3DParameter) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeTextureParameter pointers.Trio[VisualShaderNodeTextureParameter]

func (self VisualShaderNodeTextureParameter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTextureParameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTextureParameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTextureParameter) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeTextureParameterTriplanar pointers.Trio[VisualShaderNodeTextureParameterTriplanar]

func (self VisualShaderNodeTextureParameterTriplanar) Free() {
	(*(*Object)(unsafe.Pointer(&self))).Free()
}
func (self VisualShaderNodeTextureParameterTriplanar) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTextureParameterTriplanar) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTextureParameterTriplanar) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeTextureSDF pointers.Trio[VisualShaderNodeTextureSDF]

func (self VisualShaderNodeTextureSDF) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTextureSDF) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTextureSDF) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTextureSDF) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeTextureSDFNormal pointers.Trio[VisualShaderNodeTextureSDFNormal]

func (self VisualShaderNodeTextureSDFNormal) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTextureSDFNormal) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTextureSDFNormal) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTextureSDFNormal) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeTransformCompose pointers.Trio[VisualShaderNodeTransformCompose]

func (self VisualShaderNodeTransformCompose) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTransformCompose) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTransformCompose) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTransformCompose) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeTransformConstant pointers.Trio[VisualShaderNodeTransformConstant]

func (self VisualShaderNodeTransformConstant) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTransformConstant) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTransformConstant) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTransformConstant) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeTransformDecompose pointers.Trio[VisualShaderNodeTransformDecompose]

func (self VisualShaderNodeTransformDecompose) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTransformDecompose) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTransformDecompose) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTransformDecompose) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeTransformFunc pointers.Trio[VisualShaderNodeTransformFunc]

func (self VisualShaderNodeTransformFunc) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTransformFunc) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTransformFunc) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTransformFunc) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeTransformOp pointers.Trio[VisualShaderNodeTransformOp]

func (self VisualShaderNodeTransformOp) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTransformOp) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTransformOp) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTransformOp) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeTransformParameter pointers.Trio[VisualShaderNodeTransformParameter]

func (self VisualShaderNodeTransformParameter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTransformParameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTransformParameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTransformParameter) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeTransformVecMult pointers.Trio[VisualShaderNodeTransformVecMult]

func (self VisualShaderNodeTransformVecMult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeTransformVecMult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeTransformVecMult) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeTransformVecMult) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeUIntConstant pointers.Trio[VisualShaderNodeUIntConstant]

func (self VisualShaderNodeUIntConstant) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeUIntConstant) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeUIntConstant) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeUIntConstant) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeUIntFunc pointers.Trio[VisualShaderNodeUIntFunc]

func (self VisualShaderNodeUIntFunc) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeUIntFunc) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeUIntFunc) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeUIntFunc) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeUIntOp pointers.Trio[VisualShaderNodeUIntOp]

func (self VisualShaderNodeUIntOp) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeUIntOp) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeUIntOp) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeUIntOp) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeUIntParameter pointers.Trio[VisualShaderNodeUIntParameter]

func (self VisualShaderNodeUIntParameter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeUIntParameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeUIntParameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeUIntParameter) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeUVFunc pointers.Trio[VisualShaderNodeUVFunc]

func (self VisualShaderNodeUVFunc) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeUVFunc) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeUVFunc) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeUVFunc) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeUVPolarCoord pointers.Trio[VisualShaderNodeUVPolarCoord]

func (self VisualShaderNodeUVPolarCoord) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeUVPolarCoord) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeUVPolarCoord) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeUVPolarCoord) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVarying pointers.Trio[VisualShaderNodeVarying]

func (self VisualShaderNodeVarying) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVarying) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVarying) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVarying) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVaryingGetter pointers.Trio[VisualShaderNodeVaryingGetter]

func (self VisualShaderNodeVaryingGetter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVaryingGetter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVaryingGetter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVaryingGetter) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVaryingSetter pointers.Trio[VisualShaderNodeVaryingSetter]

func (self VisualShaderNodeVaryingSetter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVaryingSetter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVaryingSetter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVaryingSetter) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVec2Constant pointers.Trio[VisualShaderNodeVec2Constant]

func (self VisualShaderNodeVec2Constant) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVec2Constant) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVec2Constant) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVec2Constant) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVec2Parameter pointers.Trio[VisualShaderNodeVec2Parameter]

func (self VisualShaderNodeVec2Parameter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVec2Parameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVec2Parameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVec2Parameter) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVec3Constant pointers.Trio[VisualShaderNodeVec3Constant]

func (self VisualShaderNodeVec3Constant) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVec3Constant) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVec3Constant) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVec3Constant) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVec3Parameter pointers.Trio[VisualShaderNodeVec3Parameter]

func (self VisualShaderNodeVec3Parameter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVec3Parameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVec3Parameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVec3Parameter) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVec4Constant pointers.Trio[VisualShaderNodeVec4Constant]

func (self VisualShaderNodeVec4Constant) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVec4Constant) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVec4Constant) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVec4Constant) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVec4Parameter pointers.Trio[VisualShaderNodeVec4Parameter]

func (self VisualShaderNodeVec4Parameter) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVec4Parameter) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVec4Parameter) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVec4Parameter) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVectorBase pointers.Trio[VisualShaderNodeVectorBase]

func (self VisualShaderNodeVectorBase) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVectorBase) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVectorBase) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVectorBase) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVectorCompose pointers.Trio[VisualShaderNodeVectorCompose]

func (self VisualShaderNodeVectorCompose) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVectorCompose) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVectorCompose) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVectorCompose) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVectorDecompose pointers.Trio[VisualShaderNodeVectorDecompose]

func (self VisualShaderNodeVectorDecompose) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVectorDecompose) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVectorDecompose) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVectorDecompose) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VisualShaderNodeVectorDistance pointers.Trio[VisualShaderNodeVectorDistance]

func (self VisualShaderNodeVectorDistance) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVectorDistance) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVectorDistance) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVectorDistance) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVectorFunc pointers.Trio[VisualShaderNodeVectorFunc]

func (self VisualShaderNodeVectorFunc) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVectorFunc) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVectorFunc) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVectorFunc) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVectorLen pointers.Trio[VisualShaderNodeVectorLen]

func (self VisualShaderNodeVectorLen) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVectorLen) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVectorLen) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVectorLen) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVectorOp pointers.Trio[VisualShaderNodeVectorOp]

func (self VisualShaderNodeVectorOp) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVectorOp) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVectorOp) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVectorOp) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeVectorRefract pointers.Trio[VisualShaderNodeVectorRefract]

func (self VisualShaderNodeVectorRefract) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeVectorRefract) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeVectorRefract) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeVectorRefract) Virtual(name string) reflect.Value { return reflect.Value{} }

type VisualShaderNodeWorldPositionFromDepth pointers.Trio[VisualShaderNodeWorldPositionFromDepth]

func (self VisualShaderNodeWorldPositionFromDepth) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VisualShaderNodeWorldPositionFromDepth) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VisualShaderNodeWorldPositionFromDepth) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self VisualShaderNodeWorldPositionFromDepth) Virtual(name string) reflect.Value {
	return reflect.Value{}
}

type VoxelGI pointers.Trio[VoxelGI]

func (self VoxelGI) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VoxelGI) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VoxelGI) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VoxelGI) Virtual(name string) reflect.Value { return reflect.Value{} }

type VoxelGIData pointers.Trio[VoxelGIData]

func (self VoxelGIData) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self VoxelGIData) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self VoxelGIData) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self VoxelGIData) Virtual(name string) reflect.Value { return reflect.Value{} }

type WeakRef pointers.Trio[WeakRef]

func (self WeakRef) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self WeakRef) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self WeakRef) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self WeakRef) Virtual(name string) reflect.Value { return reflect.Value{} }

type WebRTCDataChannel pointers.Trio[WebRTCDataChannel]

func (self WebRTCDataChannel) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self WebRTCDataChannel) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self WebRTCDataChannel) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self WebRTCDataChannel) Virtual(name string) reflect.Value { return reflect.Value{} }

type WebRTCDataChannelExtension pointers.Trio[WebRTCDataChannelExtension]

func (self WebRTCDataChannelExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self WebRTCDataChannelExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self WebRTCDataChannelExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self WebRTCDataChannelExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type WebRTCMultiplayerPeer pointers.Trio[WebRTCMultiplayerPeer]

func (self WebRTCMultiplayerPeer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self WebRTCMultiplayerPeer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self WebRTCMultiplayerPeer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self WebRTCMultiplayerPeer) Virtual(name string) reflect.Value { return reflect.Value{} }

type WebRTCPeerConnection pointers.Trio[WebRTCPeerConnection]

func (self WebRTCPeerConnection) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self WebRTCPeerConnection) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self WebRTCPeerConnection) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self WebRTCPeerConnection) Virtual(name string) reflect.Value { return reflect.Value{} }

type WebRTCPeerConnectionExtension pointers.Trio[WebRTCPeerConnectionExtension]

func (self WebRTCPeerConnectionExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self WebRTCPeerConnectionExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self WebRTCPeerConnectionExtension) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self WebRTCPeerConnectionExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type WebSocketMultiplayerPeer pointers.Trio[WebSocketMultiplayerPeer]

func (self WebSocketMultiplayerPeer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self WebSocketMultiplayerPeer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self WebSocketMultiplayerPeer) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self WebSocketMultiplayerPeer) Virtual(name string) reflect.Value { return reflect.Value{} }

type WebSocketPeer pointers.Trio[WebSocketPeer]

func (self WebSocketPeer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self WebSocketPeer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self WebSocketPeer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self WebSocketPeer) Virtual(name string) reflect.Value { return reflect.Value{} }

type WebXRInterface pointers.Trio[WebXRInterface]

func (self WebXRInterface) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self WebXRInterface) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self WebXRInterface) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self WebXRInterface) Virtual(name string) reflect.Value { return reflect.Value{} }

type Window pointers.Trio[Window]

func (self Window) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self Window) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self Window) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self Window) Virtual(name string) reflect.Value { return reflect.Value{} }

type WorkerThreadPool pointers.Trio[WorkerThreadPool]

func (self WorkerThreadPool) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self WorkerThreadPool) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self WorkerThreadPool) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self WorkerThreadPool) Virtual(name string) reflect.Value { return reflect.Value{} }

type World2D pointers.Trio[World2D]

func (self World2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self World2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self World2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self World2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type World3D pointers.Trio[World3D]

func (self World3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self World3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self World3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self World3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type WorldBoundaryShape2D pointers.Trio[WorldBoundaryShape2D]

func (self WorldBoundaryShape2D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self WorldBoundaryShape2D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self WorldBoundaryShape2D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self WorldBoundaryShape2D) Virtual(name string) reflect.Value { return reflect.Value{} }

type WorldBoundaryShape3D pointers.Trio[WorldBoundaryShape3D]

func (self WorldBoundaryShape3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self WorldBoundaryShape3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self WorldBoundaryShape3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self WorldBoundaryShape3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type WorldEnvironment pointers.Trio[WorldEnvironment]

func (self WorldEnvironment) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self WorldEnvironment) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self WorldEnvironment) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self WorldEnvironment) Virtual(name string) reflect.Value { return reflect.Value{} }

type X509Certificate pointers.Trio[X509Certificate]

func (self X509Certificate) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self X509Certificate) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self X509Certificate) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self X509Certificate) Virtual(name string) reflect.Value { return reflect.Value{} }

type XMLParser pointers.Trio[XMLParser]

func (self XMLParser) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XMLParser) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XMLParser) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XMLParser) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRAnchor3D pointers.Trio[XRAnchor3D]

func (self XRAnchor3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRAnchor3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRAnchor3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRAnchor3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRBodyModifier3D pointers.Trio[XRBodyModifier3D]

func (self XRBodyModifier3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRBodyModifier3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRBodyModifier3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRBodyModifier3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRBodyTracker pointers.Trio[XRBodyTracker]

func (self XRBodyTracker) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRBodyTracker) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRBodyTracker) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRBodyTracker) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRCamera3D pointers.Trio[XRCamera3D]

func (self XRCamera3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRCamera3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRCamera3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRCamera3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRController3D pointers.Trio[XRController3D]

func (self XRController3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRController3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRController3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRController3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRControllerTracker pointers.Trio[XRControllerTracker]

func (self XRControllerTracker) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRControllerTracker) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRControllerTracker) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRControllerTracker) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRFaceModifier3D pointers.Trio[XRFaceModifier3D]

func (self XRFaceModifier3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRFaceModifier3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRFaceModifier3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRFaceModifier3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRFaceTracker pointers.Trio[XRFaceTracker]

func (self XRFaceTracker) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRFaceTracker) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRFaceTracker) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRFaceTracker) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRHandModifier3D pointers.Trio[XRHandModifier3D]

func (self XRHandModifier3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRHandModifier3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRHandModifier3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRHandModifier3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRHandTracker pointers.Trio[XRHandTracker]

func (self XRHandTracker) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRHandTracker) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRHandTracker) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRHandTracker) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRInterface pointers.Trio[XRInterface]

func (self XRInterface) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRInterface) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRInterface) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRInterface) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRInterfaceExtension pointers.Trio[XRInterfaceExtension]

func (self XRInterfaceExtension) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRInterfaceExtension) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRInterfaceExtension) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRInterfaceExtension) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRNode3D pointers.Trio[XRNode3D]

func (self XRNode3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRNode3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRNode3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRNode3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type XROrigin3D pointers.Trio[XROrigin3D]

func (self XROrigin3D) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XROrigin3D) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XROrigin3D) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XROrigin3D) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRPose pointers.Trio[XRPose]

func (self XRPose) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRPose) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRPose) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRPose) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRPositionalTracker pointers.Trio[XRPositionalTracker]

func (self XRPositionalTracker) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRPositionalTracker) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRPositionalTracker) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRPositionalTracker) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRServer pointers.Trio[XRServer]

func (self XRServer) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRServer) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRServer) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRServer) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRTracker pointers.Trio[XRTracker]

func (self XRTracker) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRTracker) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRTracker) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRTracker) Virtual(name string) reflect.Value { return reflect.Value{} }

type XRVRS pointers.Trio[XRVRS]

func (self XRVRS) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self XRVRS) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self XRVRS) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self XRVRS) Virtual(name string) reflect.Value { return reflect.Value{} }

type YoutubePlayablesClient pointers.Trio[YoutubePlayablesClient]

func (self YoutubePlayablesClient) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self YoutubePlayablesClient) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self YoutubePlayablesClient) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self YoutubePlayablesClient) Virtual(name string) reflect.Value { return reflect.Value{} }

type YoutubePlayablesResponse pointers.Trio[YoutubePlayablesResponse]

func (self YoutubePlayablesResponse) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self YoutubePlayablesResponse) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self YoutubePlayablesResponse) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self YoutubePlayablesResponse) Virtual(name string) reflect.Value { return reflect.Value{} }

type YoutubePlayablesResult pointers.Trio[YoutubePlayablesResult]

func (self YoutubePlayablesResult) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self YoutubePlayablesResult) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self YoutubePlayablesResult) AsObject() [1]Object {
	return (*(*[1]Object)(unsafe.Pointer(&self)))
}

func (self YoutubePlayablesResult) Virtual(name string) reflect.Value { return reflect.Value{} }

type ZIPPacker pointers.Trio[ZIPPacker]

func (self ZIPPacker) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ZIPPacker) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ZIPPacker) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ZIPPacker) Virtual(name string) reflect.Value { return reflect.Value{} }

type ZIPReader pointers.Trio[ZIPReader]

func (self ZIPReader) Free() { (*(*Object)(unsafe.Pointer(&self))).Free() }
func (self ZIPReader) IsAlive(raw [3]uint64) bool {
	return (*(*Object)(unsafe.Pointer(&self))).IsAlive(raw)
}

//go:nosplit
func (self ZIPReader) AsObject() [1]Object { return (*(*[1]Object)(unsafe.Pointer(&self))) }

func (self ZIPReader) Virtual(name string) reflect.Value { return reflect.Value{} }
