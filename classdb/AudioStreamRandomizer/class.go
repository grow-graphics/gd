// Code generated by the generate package DO NOT EDIT

// Package AudioStreamRandomizer provides methods for working with AudioStreamRandomizer object instances.
package AudioStreamRandomizer

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/AudioStream"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Picks a random AudioStream from the pool, depending on the playback mode, and applies random pitch shifting and volume shifting during playback.
*/
type Instance [1]gdclass.AudioStreamRandomizer

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	add_stream                    gdextension.MethodForClass `hash:"1892018854"`
	move_stream                   gdextension.MethodForClass `hash:"3937882851"`
	remove_stream                 gdextension.MethodForClass `hash:"1286410249"`
	set_stream                    gdextension.MethodForClass `hash:"111075094"`
	get_stream                    gdextension.MethodForClass `hash:"2739380747"`
	set_stream_probability_weight gdextension.MethodForClass `hash:"1602489585"`
	get_stream_probability_weight gdextension.MethodForClass `hash:"2339986948"`
	set_streams_count             gdextension.MethodForClass `hash:"1286410249"`
	get_streams_count             gdextension.MethodForClass `hash:"3905245786"`
	set_random_pitch              gdextension.MethodForClass `hash:"373806689"`
	get_random_pitch              gdextension.MethodForClass `hash:"1740695150"`
	set_random_volume_offset_db   gdextension.MethodForClass `hash:"373806689"`
	get_random_volume_offset_db   gdextension.MethodForClass `hash:"1740695150"`
	set_playback_mode             gdextension.MethodForClass `hash:"3950967023"`
	get_playback_mode             gdextension.MethodForClass `hash:"3943055077"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("AudioStreamRandomizer")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.AudioStreamRandomizer

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAudioStreamRandomizer() Instance
}

/*
Insert a stream at the specified index. If the index is less than zero, the insertion occurs at the end of the underlying pool.
*/
func (self Instance) AddStream(index int, stream AudioStream.Instance) { //gd:AudioStreamRandomizer.add_stream
	Advanced(self).AddStream(int64(index), stream, float64(1.0))
}

/*
Insert a stream at the specified index. If the index is less than zero, the insertion occurs at the end of the underlying pool.
*/
func (self Expanded) AddStream(index int, stream AudioStream.Instance, weight Float.X) { //gd:AudioStreamRandomizer.add_stream
	Advanced(self).AddStream(int64(index), stream, float64(weight))
}

/*
Move a stream from one index to another.
*/
func (self Instance) MoveStream(index_from int, index_to int) { //gd:AudioStreamRandomizer.move_stream
	Advanced(self).MoveStream(int64(index_from), int64(index_to))
}

/*
Remove the stream at the specified index.
*/
func (self Instance) RemoveStream(index int) { //gd:AudioStreamRandomizer.remove_stream
	Advanced(self).RemoveStream(int64(index))
}

/*
Set the AudioStream at the specified index.
*/
func (self Instance) SetStream(index int, stream AudioStream.Instance) { //gd:AudioStreamRandomizer.set_stream
	Advanced(self).SetStream(int64(index), stream)
}

/*
Returns the stream at the specified index.
*/
func (self Instance) GetStream(index int) AudioStream.Instance { //gd:AudioStreamRandomizer.get_stream
	return AudioStream.Instance(Advanced(self).GetStream(int64(index)))
}

/*
Set the probability weight of the stream at the specified index. The higher this value, the more likely that the randomizer will choose this stream during random playback modes.
*/
func (self Instance) SetStreamProbabilityWeight(index int, weight Float.X) { //gd:AudioStreamRandomizer.set_stream_probability_weight
	Advanced(self).SetStreamProbabilityWeight(int64(index), float64(weight))
}

/*
Returns the probability weight associated with the stream at the given index.
*/
func (self Instance) GetStreamProbabilityWeight(index int) Float.X { //gd:AudioStreamRandomizer.get_stream_probability_weight
	return Float.X(Float.X(Advanced(self).GetStreamProbabilityWeight(int64(index))))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AudioStreamRandomizer

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AudioStreamRandomizer)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AudioStreamRandomizer)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.AudioStreamRandomizer)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].InitRef()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) PlaybackMode() PlaybackMode {
	return PlaybackMode(class(self).GetPlaybackMode())
}

func (self Instance) SetPlaybackMode(value PlaybackMode) {
	class(self).SetPlaybackMode(value)
}

func (self Instance) RandomPitch() Float.X {
	return Float.X(Float.X(class(self).GetRandomPitch()))
}

func (self Instance) SetRandomPitch(value Float.X) {
	class(self).SetRandomPitch(float64(value))
}

func (self Instance) RandomVolumeOffsetDb() Float.X {
	return Float.X(Float.X(class(self).GetRandomVolumeOffsetDb()))
}

func (self Instance) SetRandomVolumeOffsetDb(value Float.X) {
	class(self).SetRandomVolumeOffsetDb(float64(value))
}

func (self Instance) StreamsCount() int {
	return int(int(class(self).GetStreamsCount()))
}

func (self Instance) SetStreamsCount(value int) {
	class(self).SetStreamsCount(int64(value))
}

/*
Insert a stream at the specified index. If the index is less than zero, the insertion occurs at the end of the underlying pool.
*/
//go:nosplit
func (self class) AddStream(index int64, stream [1]gdclass.AudioStream, weight float64) { //gd:AudioStreamRandomizer.add_stream
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.add_stream, 0|(gdextension.SizeInt<<4)|(gdextension.SizeObject<<8)|(gdextension.SizeFloat<<12), unsafe.Pointer(&struct {
		index  int64
		stream gdextension.Object
		weight float64
	}{index, gdextension.Object(gd.ObjectChecked(stream[0].AsObject())), weight}))
}

/*
Move a stream from one index to another.
*/
//go:nosplit
func (self class) MoveStream(index_from int64, index_to int64) { //gd:AudioStreamRandomizer.move_stream
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.move_stream, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		index_from int64
		index_to   int64
	}{index_from, index_to}))
}

/*
Remove the stream at the specified index.
*/
//go:nosplit
func (self class) RemoveStream(index int64) { //gd:AudioStreamRandomizer.remove_stream
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_stream, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ index int64 }{index}))
}

/*
Set the AudioStream at the specified index.
*/
//go:nosplit
func (self class) SetStream(index int64, stream [1]gdclass.AudioStream) { //gd:AudioStreamRandomizer.set_stream
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_stream, 0|(gdextension.SizeInt<<4)|(gdextension.SizeObject<<8), unsafe.Pointer(&struct {
		index  int64
		stream gdextension.Object
	}{index, gdextension.Object(gd.ObjectChecked(stream[0].AsObject()))}))
}

/*
Returns the stream at the specified index.
*/
//go:nosplit
func (self class) GetStream(index int64) [1]gdclass.AudioStream { //gd:AudioStreamRandomizer.get_stream
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_stream, gdextension.SizeObject|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ index int64 }{index}))
	var ret = [1]gdclass.AudioStream{gd.PointerWithOwnershipTransferredToGo[gdclass.AudioStream](r_ret)}
	return ret
}

/*
Set the probability weight of the stream at the specified index. The higher this value, the more likely that the randomizer will choose this stream during random playback modes.
*/
//go:nosplit
func (self class) SetStreamProbabilityWeight(index int64, weight float64) { //gd:AudioStreamRandomizer.set_stream_probability_weight
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_stream_probability_weight, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		index  int64
		weight float64
	}{index, weight}))
}

/*
Returns the probability weight associated with the stream at the given index.
*/
//go:nosplit
func (self class) GetStreamProbabilityWeight(index int64) float64 { //gd:AudioStreamRandomizer.get_stream_probability_weight
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_stream_probability_weight, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ index int64 }{index}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetStreamsCount(count int64) { //gd:AudioStreamRandomizer.set_streams_count
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_streams_count, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ count int64 }{count}))
}

//go:nosplit
func (self class) GetStreamsCount() int64 { //gd:AudioStreamRandomizer.get_streams_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_streams_count, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRandomPitch(scale float64) { //gd:AudioStreamRandomizer.set_random_pitch
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_random_pitch, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ scale float64 }{scale}))
}

//go:nosplit
func (self class) GetRandomPitch() float64 { //gd:AudioStreamRandomizer.get_random_pitch
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_random_pitch, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRandomVolumeOffsetDb(db_offset float64) { //gd:AudioStreamRandomizer.set_random_volume_offset_db
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_random_volume_offset_db, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ db_offset float64 }{db_offset}))
}

//go:nosplit
func (self class) GetRandomVolumeOffsetDb() float64 { //gd:AudioStreamRandomizer.get_random_volume_offset_db
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_random_volume_offset_db, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPlaybackMode(mode PlaybackMode) { //gd:AudioStreamRandomizer.set_playback_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_playback_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode PlaybackMode }{mode}))
}

//go:nosplit
func (self class) GetPlaybackMode() PlaybackMode { //gd:AudioStreamRandomizer.get_playback_mode
	var r_ret = gdextension.Call[PlaybackMode](gd.ObjectChecked(self.AsObject()), methods.get_playback_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsAudioStreamRandomizer() Advanced    { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsAudioStreamRandomizer() Instance { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsAudioStreamRandomizer() Instance {
	return self.Super().AsAudioStreamRandomizer()
}
func (self class) AsAudioStream() AudioStream.Advanced {
	return *((*AudioStream.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAudioStream() AudioStream.Instance { return self.Super().AsAudioStream() }
func (self Instance) AsAudioStream() AudioStream.Instance {
	return *((*AudioStream.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioStream.Advanced(self.AsAudioStream()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioStream.Instance(self.AsAudioStream()), name)
	}
}
func init() {
	gdclass.Register("AudioStreamRandomizer", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type PlaybackMode int //gd:AudioStreamRandomizer.PlaybackMode

const (
	/*Pick a stream at random according to the probability weights chosen for each stream, but avoid playing the same stream twice in a row whenever possible. If only 1 sound is present in the pool, the same sound will always play, effectively allowing repeats to occur.*/
	PlaybackRandomNoRepeats PlaybackMode = 0
	/*Pick a stream at random according to the probability weights chosen for each stream. If only 1 sound is present in the pool, the same sound will always play.*/
	PlaybackRandom PlaybackMode = 1
	/*Play streams in the order they appear in the stream pool. If only 1 sound is present in the pool, the same sound will always play.*/
	PlaybackSequential PlaybackMode = 2
)
