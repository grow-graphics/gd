// Code generated by the generate package DO NOT EDIT

// Package GPUParticlesCollisionHeightField3D provides methods for working with GPUParticlesCollisionHeightField3D object instances.
package GPUParticlesCollisionHeightField3D

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/GPUParticlesCollision3D"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/classdb/VisualInstance3D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector3"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A real-time heightmap-shaped 3D particle collision shape affecting [GPUParticles3D] nodes.
Heightmap shapes allow for efficiently representing collisions for convex and concave objects with a single "floor" (such as terrain). This is less flexible than [GPUParticlesCollisionSDF3D], but it doesn't require a baking step.
[GPUParticlesCollisionHeightField3D] can also be regenerated in real-time when it is moved, when the camera moves, or even continuously. This makes [GPUParticlesCollisionHeightField3D] a good choice for weather effects such as rain and snow and games with highly dynamic geometry. However, this class is limited since heightmaps cannot represent overhangs (e.g. indoors or caves).
[b]Note:[/b] [member ParticleProcessMaterial.collision_mode] must be [code]true[/code] on the [GPUParticles3D]'s process material for collision to work.
[b]Note:[/b] Particle collision only affects [GPUParticles3D], not [CPUParticles3D].
*/
type Instance [1]gdclass.GPUParticlesCollisionHeightField3D

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_size                   gdextension.MethodForClass `hash:"3460891852"`
	get_size                   gdextension.MethodForClass `hash:"3360562783"`
	set_resolution             gdextension.MethodForClass `hash:"1009996517"`
	get_resolution             gdextension.MethodForClass `hash:"1156065644"`
	set_update_mode            gdextension.MethodForClass `hash:"673680859"`
	get_update_mode            gdextension.MethodForClass `hash:"1998141380"`
	set_heightfield_mask       gdextension.MethodForClass `hash:"1286410249"`
	get_heightfield_mask       gdextension.MethodForClass `hash:"3905245786"`
	set_heightfield_mask_value gdextension.MethodForClass `hash:"300928843"`
	get_heightfield_mask_value gdextension.MethodForClass `hash:"1116898809"`
	set_follow_camera_enabled  gdextension.MethodForClass `hash:"2586408642"`
	is_follow_camera_enabled   gdextension.MethodForClass `hash:"36873697"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("GPUParticlesCollisionHeightField3D")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsGPUParticlesCollisionHeightField3D() Instance
}

/*
Based on [param value], enables or disables the specified layer in the [member heightfield_mask], given a [param layer_number] between [code]1[/code] and [code]20[/code], inclusive.
*/
func (self Instance) SetHeightfieldMaskValue(layer_number int, value bool) { //gd:GPUParticlesCollisionHeightField3D.set_heightfield_mask_value
	Advanced(self).SetHeightfieldMaskValue(int64(layer_number), value)
}

/*
Returns [code]true[/code] if the specified layer of the [member heightfield_mask] is enabled, given a [param layer_number] between [code]1[/code] and [code]20[/code], inclusive.
*/
func (self Instance) GetHeightfieldMaskValue(layer_number int) bool { //gd:GPUParticlesCollisionHeightField3D.get_heightfield_mask_value
	return bool(Advanced(self).GetHeightfieldMaskValue(int64(layer_number)))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.GPUParticlesCollisionHeightField3D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.GPUParticlesCollisionHeightField3D](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.GPUParticlesCollisionHeightField3D](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.GPUParticlesCollisionHeightField3D{pointers.Add[gdclass.GPUParticlesCollisionHeightField3D]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.GPUParticlesCollisionHeightField3D{pointers.New[gdclass.GPUParticlesCollisionHeightField3D]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Size() Vector3.XYZ {
	return Vector3.XYZ(class(self).GetSize())
}

func (self Instance) SetSize(value Vector3.XYZ) {
	class(self).SetSize(Vector3.XYZ(value))
}

func (self Instance) Resolution() Resolution {
	return Resolution(class(self).GetResolution())
}

func (self Instance) SetResolution(value Resolution) {
	class(self).SetResolution(value)
}

func (self Instance) UpdateMode() UpdateMode {
	return UpdateMode(class(self).GetUpdateMode())
}

func (self Instance) SetUpdateMode(value UpdateMode) {
	class(self).SetUpdateMode(value)
}

func (self Instance) FollowCameraEnabled() bool {
	return bool(class(self).IsFollowCameraEnabled())
}

func (self Instance) SetFollowCameraEnabled(value bool) {
	class(self).SetFollowCameraEnabled(value)
}

func (self Instance) HeightfieldMask() int {
	return int(int(class(self).GetHeightfieldMask()))
}

func (self Instance) SetHeightfieldMask(value int) {
	class(self).SetHeightfieldMask(int64(value))
}

//go:nosplit
func (self class) SetSize(size Vector3.XYZ) { //gd:GPUParticlesCollisionHeightField3D.set_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_size, 0|(gdextension.SizeVector3<<4), &struct{ size Vector3.XYZ }{size})
}

//go:nosplit
func (self class) GetSize() Vector3.XYZ { //gd:GPUParticlesCollisionHeightField3D.get_size
	var r_ret = gdextension.Call[Vector3.XYZ](gd.ObjectChecked(self.AsObject()), methods.get_size, gdextension.SizeVector3, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetResolution(resolution Resolution) { //gd:GPUParticlesCollisionHeightField3D.set_resolution
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_resolution, 0|(gdextension.SizeInt<<4), &struct{ resolution Resolution }{resolution})
}

//go:nosplit
func (self class) GetResolution() Resolution { //gd:GPUParticlesCollisionHeightField3D.get_resolution
	var r_ret = gdextension.Call[Resolution](gd.ObjectChecked(self.AsObject()), methods.get_resolution, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetUpdateMode(update_mode UpdateMode) { //gd:GPUParticlesCollisionHeightField3D.set_update_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_update_mode, 0|(gdextension.SizeInt<<4), &struct{ update_mode UpdateMode }{update_mode})
}

//go:nosplit
func (self class) GetUpdateMode() UpdateMode { //gd:GPUParticlesCollisionHeightField3D.get_update_mode
	var r_ret = gdextension.Call[UpdateMode](gd.ObjectChecked(self.AsObject()), methods.get_update_mode, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHeightfieldMask(heightfield_mask int64) { //gd:GPUParticlesCollisionHeightField3D.set_heightfield_mask
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_heightfield_mask, 0|(gdextension.SizeInt<<4), &struct{ heightfield_mask int64 }{heightfield_mask})
}

//go:nosplit
func (self class) GetHeightfieldMask() int64 { //gd:GPUParticlesCollisionHeightField3D.get_heightfield_mask
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_heightfield_mask, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Based on [param value], enables or disables the specified layer in the [member heightfield_mask], given a [param layer_number] between [code]1[/code] and [code]20[/code], inclusive.
*/
//go:nosplit
func (self class) SetHeightfieldMaskValue(layer_number int64, value bool) { //gd:GPUParticlesCollisionHeightField3D.set_heightfield_mask_value
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_heightfield_mask_value, 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), &struct {
		layer_number int64
		value        bool
	}{layer_number, value})
}

/*
Returns [code]true[/code] if the specified layer of the [member heightfield_mask] is enabled, given a [param layer_number] between [code]1[/code] and [code]20[/code], inclusive.
*/
//go:nosplit
func (self class) GetHeightfieldMaskValue(layer_number int64) bool { //gd:GPUParticlesCollisionHeightField3D.get_heightfield_mask_value
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_heightfield_mask_value, gdextension.SizeBool|(gdextension.SizeInt<<4), &struct{ layer_number int64 }{layer_number})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFollowCameraEnabled(enabled bool) { //gd:GPUParticlesCollisionHeightField3D.set_follow_camera_enabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_follow_camera_enabled, 0|(gdextension.SizeBool<<4), &struct{ enabled bool }{enabled})
}

//go:nosplit
func (self class) IsFollowCameraEnabled() bool { //gd:GPUParticlesCollisionHeightField3D.is_follow_camera_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_follow_camera_enabled, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsGPUParticlesCollisionHeightField3D() Advanced {
	return Advanced{pointers.AsA[gdclass.GPUParticlesCollisionHeightField3D](self[0])}
}
func (self Instance) AsGPUParticlesCollisionHeightField3D() Instance {
	return Instance{pointers.AsA[gdclass.GPUParticlesCollisionHeightField3D](self[0])}
}
func (self *Extension[T]) AsGPUParticlesCollisionHeightField3D() Instance {
	return self.Super().AsGPUParticlesCollisionHeightField3D()
}
func (self class) AsGPUParticlesCollision3D() GPUParticlesCollision3D.Advanced {
	return GPUParticlesCollision3D.Advanced{pointers.AsA[gdclass.GPUParticlesCollision3D](self[0])}
}
func (self *Extension[T]) AsGPUParticlesCollision3D() GPUParticlesCollision3D.Instance {
	return self.Super().AsGPUParticlesCollision3D()
}
func (self Instance) AsGPUParticlesCollision3D() GPUParticlesCollision3D.Instance {
	return GPUParticlesCollision3D.Instance{pointers.AsA[gdclass.GPUParticlesCollision3D](self[0])}
}
func (self class) AsVisualInstance3D() VisualInstance3D.Advanced {
	return VisualInstance3D.Advanced{pointers.AsA[gdclass.VisualInstance3D](self[0])}
}
func (self *Extension[T]) AsVisualInstance3D() VisualInstance3D.Instance {
	return self.Super().AsVisualInstance3D()
}
func (self Instance) AsVisualInstance3D() VisualInstance3D.Instance {
	return VisualInstance3D.Instance{pointers.AsA[gdclass.VisualInstance3D](self[0])}
}
func (self class) AsNode3D() Node3D.Advanced {
	return Node3D.Advanced{pointers.AsA[gdclass.Node3D](self[0])}
}
func (self *Extension[T]) AsNode3D() Node3D.Instance { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance {
	return Node3D.Instance{pointers.AsA[gdclass.Node3D](self[0])}
}
func (self class) AsNode() Node.Advanced         { return Node.Advanced{pointers.AsA[gdclass.Node](self[0])} }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance {
	return Node.Instance{pointers.AsA[gdclass.Node](self[0])}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(GPUParticlesCollision3D.Advanced(self.AsGPUParticlesCollision3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(GPUParticlesCollision3D.Instance(self.AsGPUParticlesCollision3D()), name)
	}
}
func init() {
	gdclass.Register("GPUParticlesCollisionHeightField3D", func(ptr gd.Object) any {
		return Instance{pointers.AsA[gdclass.GPUParticlesCollisionHeightField3D](ptr)}
	})
}

type Resolution int //gd:GPUParticlesCollisionHeightField3D.Resolution

const (
	/*Generate a 256×256 heightmap. Intended for small-scale scenes, or larger scenes with no distant particles.*/
	Resolution256 Resolution = 0
	/*Generate a 512×512 heightmap. Intended for medium-scale scenes, or larger scenes with no distant particles.*/
	Resolution512 Resolution = 1
	/*Generate a 1024×1024 heightmap. Intended for large scenes with distant particles.*/
	Resolution1024 Resolution = 2
	/*Generate a 2048×2048 heightmap. Intended for very large scenes with distant particles.*/
	Resolution2048 Resolution = 3
	/*Generate a 4096×4096 heightmap. Intended for huge scenes with distant particles.*/
	Resolution4096 Resolution = 4
	/*Generate a 8192×8192 heightmap. Intended for gigantic scenes with distant particles.*/
	Resolution8192 Resolution = 5
	/*Represents the size of the [enum Resolution] enum.*/
	ResolutionMax Resolution = 6
)

type UpdateMode int //gd:GPUParticlesCollisionHeightField3D.UpdateMode

const (
	/*Only update the heightmap when the [GPUParticlesCollisionHeightField3D] node is moved, or when the camera moves if [member follow_camera_enabled] is [code]true[/code]. An update can be forced by slightly moving the [GPUParticlesCollisionHeightField3D] in any direction, or by calling [method RenderingServer.particles_collision_height_field_update].*/
	UpdateModeWhenMoved UpdateMode = 0
	/*Update the heightmap every frame. This has a significant performance cost. This update should only be used when geometry that particles can collide with changes significantly during gameplay.*/
	UpdateModeAlways UpdateMode = 1
)
