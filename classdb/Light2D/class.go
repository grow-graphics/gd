// Code generated by the generate package DO NOT EDIT

// Package Light2D provides methods for working with Light2D object instances.
package Light2D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node2D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Casts light in a 2D environment. A light is defined as a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related).
*/
type Instance [1]gdclass.Light2D

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsLight2D() Instance
}

/*
Sets the light's height, which is used in 2D normal mapping. See [member PointLight2D.height] and [member DirectionalLight2D.height].
*/
func (self Instance) SetHeight(height Float.X) { //gd:Light2D.set_height
	Advanced(self).SetHeight(float64(height))
}

/*
Returns the light's height, which is used in 2D normal mapping. See [member PointLight2D.height] and [member DirectionalLight2D.height].
*/
func (self Instance) GetHeight() Float.X { //gd:Light2D.get_height
	return Float.X(Float.X(Advanced(self).GetHeight()))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.Light2D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(pointers.Get(gd.NewStringName("Light2D"))))})}
	casted := Instance{*(*gdclass.Light2D)(unsafe.Pointer(&object))}
	object[0].Notification(0, false)
	return casted
}

func (self Instance) Enabled() bool {
	return bool(class(self).IsEnabled())
}

func (self Instance) SetEnabled(value bool) {
	class(self).SetEnabled(value)
}

func (self Instance) EditorOnly() bool {
	return bool(class(self).IsEditorOnly())
}

func (self Instance) SetEditorOnly(value bool) {
	class(self).SetEditorOnly(value)
}

func (self Instance) Color() Color.RGBA {
	return Color.RGBA(class(self).GetColor())
}

func (self Instance) SetColor(value Color.RGBA) {
	class(self).SetColor(Color.RGBA(value))
}

func (self Instance) Energy() Float.X {
	return Float.X(Float.X(class(self).GetEnergy()))
}

func (self Instance) SetEnergy(value Float.X) {
	class(self).SetEnergy(float64(value))
}

func (self Instance) BlendMode() BlendMode {
	return BlendMode(class(self).GetBlendMode())
}

func (self Instance) SetBlendMode(value BlendMode) {
	class(self).SetBlendMode(value)
}

func (self Instance) RangeZMin() int {
	return int(int(class(self).GetZRangeMin()))
}

func (self Instance) SetRangeZMin(value int) {
	class(self).SetZRangeMin(int64(value))
}

func (self Instance) RangeZMax() int {
	return int(int(class(self).GetZRangeMax()))
}

func (self Instance) SetRangeZMax(value int) {
	class(self).SetZRangeMax(int64(value))
}

func (self Instance) RangeLayerMin() int {
	return int(int(class(self).GetLayerRangeMin()))
}

func (self Instance) SetRangeLayerMin(value int) {
	class(self).SetLayerRangeMin(int64(value))
}

func (self Instance) RangeLayerMax() int {
	return int(int(class(self).GetLayerRangeMax()))
}

func (self Instance) SetRangeLayerMax(value int) {
	class(self).SetLayerRangeMax(int64(value))
}

func (self Instance) RangeItemCullMask() int {
	return int(int(class(self).GetItemCullMask()))
}

func (self Instance) SetRangeItemCullMask(value int) {
	class(self).SetItemCullMask(int64(value))
}

func (self Instance) ShadowEnabled() bool {
	return bool(class(self).IsShadowEnabled())
}

func (self Instance) SetShadowEnabled(value bool) {
	class(self).SetShadowEnabled(value)
}

func (self Instance) ShadowColor() Color.RGBA {
	return Color.RGBA(class(self).GetShadowColor())
}

func (self Instance) SetShadowColor(value Color.RGBA) {
	class(self).SetShadowColor(Color.RGBA(value))
}

func (self Instance) ShadowFilter() ShadowFilter {
	return ShadowFilter(class(self).GetShadowFilter())
}

func (self Instance) SetShadowFilter(value ShadowFilter) {
	class(self).SetShadowFilter(value)
}

func (self Instance) ShadowFilterSmooth() Float.X {
	return Float.X(Float.X(class(self).GetShadowSmooth()))
}

func (self Instance) SetShadowFilterSmooth(value Float.X) {
	class(self).SetShadowSmooth(float64(value))
}

func (self Instance) ShadowItemCullMask() int {
	return int(int(class(self).GetItemShadowCullMask()))
}

func (self Instance) SetShadowItemCullMask(value int) {
	class(self).SetItemShadowCullMask(int64(value))
}

//go:nosplit
func (self class) SetEnabled(enabled bool) { //gd:Light2D.set_enabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_enabled), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsEnabled() bool { //gd:Light2D.is_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_is_enabled), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEditorOnly(editor_only bool) { //gd:Light2D.set_editor_only
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_editor_only), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ editor_only bool }{editor_only}))
}

//go:nosplit
func (self class) IsEditorOnly() bool { //gd:Light2D.is_editor_only
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_is_editor_only), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetColor(color Color.RGBA) { //gd:Light2D.set_color
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_color), 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

//go:nosplit
func (self class) GetColor() Color.RGBA { //gd:Light2D.get_color
	var r_ret = gdextension.Call[Color.RGBA](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_get_color), gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEnergy(energy float64) { //gd:Light2D.set_energy
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_energy), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ energy float64 }{energy}))
}

//go:nosplit
func (self class) GetEnergy() float64 { //gd:Light2D.get_energy
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_get_energy), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetZRangeMin(z int64) { //gd:Light2D.set_z_range_min
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_z_range_min), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ z int64 }{z}))
}

//go:nosplit
func (self class) GetZRangeMin() int64 { //gd:Light2D.get_z_range_min
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_get_z_range_min), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetZRangeMax(z int64) { //gd:Light2D.set_z_range_max
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_z_range_max), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ z int64 }{z}))
}

//go:nosplit
func (self class) GetZRangeMax() int64 { //gd:Light2D.get_z_range_max
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_get_z_range_max), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetLayerRangeMin(layer int64) { //gd:Light2D.set_layer_range_min
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_layer_range_min), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ layer int64 }{layer}))
}

//go:nosplit
func (self class) GetLayerRangeMin() int64 { //gd:Light2D.get_layer_range_min
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_get_layer_range_min), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetLayerRangeMax(layer int64) { //gd:Light2D.set_layer_range_max
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_layer_range_max), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ layer int64 }{layer}))
}

//go:nosplit
func (self class) GetLayerRangeMax() int64 { //gd:Light2D.get_layer_range_max
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_get_layer_range_max), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetItemCullMask(item_cull_mask int64) { //gd:Light2D.set_item_cull_mask
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_item_cull_mask), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ item_cull_mask int64 }{item_cull_mask}))
}

//go:nosplit
func (self class) GetItemCullMask() int64 { //gd:Light2D.get_item_cull_mask
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_get_item_cull_mask), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetItemShadowCullMask(item_shadow_cull_mask int64) { //gd:Light2D.set_item_shadow_cull_mask
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_item_shadow_cull_mask), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ item_shadow_cull_mask int64 }{item_shadow_cull_mask}))
}

//go:nosplit
func (self class) GetItemShadowCullMask() int64 { //gd:Light2D.get_item_shadow_cull_mask
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_get_item_shadow_cull_mask), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetShadowEnabled(enabled bool) { //gd:Light2D.set_shadow_enabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_shadow_enabled), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsShadowEnabled() bool { //gd:Light2D.is_shadow_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_is_shadow_enabled), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetShadowSmooth(smooth float64) { //gd:Light2D.set_shadow_smooth
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_shadow_smooth), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ smooth float64 }{smooth}))
}

//go:nosplit
func (self class) GetShadowSmooth() float64 { //gd:Light2D.get_shadow_smooth
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_get_shadow_smooth), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetShadowFilter(filter ShadowFilter) { //gd:Light2D.set_shadow_filter
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_shadow_filter), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ filter ShadowFilter }{filter}))
}

//go:nosplit
func (self class) GetShadowFilter() ShadowFilter { //gd:Light2D.get_shadow_filter
	var r_ret = gdextension.Call[ShadowFilter](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_get_shadow_filter), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetShadowColor(shadow_color Color.RGBA) { //gd:Light2D.set_shadow_color
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_shadow_color), 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ shadow_color Color.RGBA }{shadow_color}))
}

//go:nosplit
func (self class) GetShadowColor() Color.RGBA { //gd:Light2D.get_shadow_color
	var r_ret = gdextension.Call[Color.RGBA](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_get_shadow_color), gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBlendMode(mode BlendMode) { //gd:Light2D.set_blend_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_blend_mode), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode BlendMode }{mode}))
}

//go:nosplit
func (self class) GetBlendMode() BlendMode { //gd:Light2D.get_blend_mode
	var r_ret = gdextension.Call[BlendMode](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_get_blend_mode), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets the light's height, which is used in 2D normal mapping. See [member PointLight2D.height] and [member DirectionalLight2D.height].
*/
//go:nosplit
func (self class) SetHeight(height float64) { //gd:Light2D.set_height
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_set_height), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ height float64 }{height}))
}

/*
Returns the light's height, which is used in 2D normal mapping. See [member PointLight2D.height] and [member DirectionalLight2D.height].
*/
//go:nosplit
func (self class) GetHeight() float64 { //gd:Light2D.get_height
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.Light2D.Bind_get_height), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsLight2D() Advanced               { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsLight2D() Instance            { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsLight2D() Instance       { return self.Super().AsLight2D() }
func (self class) AsNode2D() Node2D.Advanced         { return *((*Node2D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode2D() Node2D.Instance { return self.Super().AsNode2D() }
func (self Instance) AsNode2D() Node2D.Instance      { return *((*Node2D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return *((*CanvasItem.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return *((*CanvasItem.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node2D.Advanced(self.AsNode2D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node2D.Instance(self.AsNode2D()), name)
	}
}
func init() {
	gdclass.Register("Light2D", func(ptr gd.Object) any { return [1]gdclass.Light2D{*(*gdclass.Light2D)(unsafe.Pointer(&ptr))} })
}

type ShadowFilter int //gd:Light2D.ShadowFilter

const (
	/*No filter applies to the shadow map. This provides hard shadow edges and is the fastest to render. See [member shadow_filter].*/
	ShadowFilterNone ShadowFilter = 0
	/*Percentage closer filtering (5 samples) applies to the shadow map. This is slower compared to hard shadow rendering. See [member shadow_filter].*/
	ShadowFilterPcf5 ShadowFilter = 1
	/*Percentage closer filtering (13 samples) applies to the shadow map. This is the slowest shadow filtering mode, and should be used sparingly. See [member shadow_filter].*/
	ShadowFilterPcf13 ShadowFilter = 2
)

type BlendMode int //gd:Light2D.BlendMode

const (
	/*Adds the value of pixels corresponding to the Light2D to the values of pixels under it. This is the common behavior of a light.*/
	BlendModeAdd BlendMode = 0
	/*Subtracts the value of pixels corresponding to the Light2D to the values of pixels under it, resulting in inversed light effect.*/
	BlendModeSub BlendMode = 1
	/*Mix the value of pixels corresponding to the Light2D to the values of pixels under it by linear interpolation.*/
	BlendModeMix BlendMode = 2
)
