// Code generated by the generate package DO NOT EDIT

// Package ImmediateMesh provides methods for working with ImmediateMesh object instances.
package ImmediateMesh

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Material"
import "graphics.gd/classdb/Mesh"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/Plane"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2"
import "graphics.gd/variant/Vector3"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A mesh type optimized for creating geometry manually, similar to OpenGL 1.x immediate mode.
Here's a sample on how to generate a triangular face:
[codeblocks]
[gdscript]
var mesh = ImmediateMesh.new()
mesh.surface_begin(Mesh.PRIMITIVE_TRIANGLES)
mesh.surface_add_vertex(Vector3.LEFT)
mesh.surface_add_vertex(Vector3.FORWARD)
mesh.surface_add_vertex(Vector3.ZERO)
mesh.surface_end()
[/gdscript]
[csharp]
var mesh = new ImmediateMesh();
mesh.SurfaceBegin(Mesh.PrimitiveType.Triangles);
mesh.SurfaceAddVertex(Vector3.Left);
mesh.SurfaceAddVertex(Vector3.Forward);
mesh.SurfaceAddVertex(Vector3.Zero);
mesh.SurfaceEnd();
[/csharp]
[/codeblocks]
[b]Note:[/b] Generating complex geometries with [ImmediateMesh] is highly inefficient. Instead, it is designed to generate simple geometry that changes often.
*/
type Instance [1]gdclass.ImmediateMesh

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	surface_begin         gdextension.MethodForClass `hash:"2794442543"`
	surface_set_color     gdextension.MethodForClass `hash:"2920490490"`
	surface_set_normal    gdextension.MethodForClass `hash:"3460891852"`
	surface_set_tangent   gdextension.MethodForClass `hash:"3505987427"`
	surface_set_uv        gdextension.MethodForClass `hash:"743155724"`
	surface_set_uv2       gdextension.MethodForClass `hash:"743155724"`
	surface_add_vertex    gdextension.MethodForClass `hash:"3460891852"`
	surface_add_vertex_2d gdextension.MethodForClass `hash:"743155724"`
	surface_end           gdextension.MethodForClass `hash:"3218959716"`
	clear_surfaces        gdextension.MethodForClass `hash:"3218959716"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("ImmediateMesh")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.ImmediateMesh

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsImmediateMesh() Instance
}

/*
Begin a new surface.
*/
func (self Instance) SurfaceBegin(primitive Mesh.PrimitiveType) { //gd:ImmediateMesh.surface_begin
	Advanced(self).SurfaceBegin(primitive, [1]Material.Instance{}[0])
}

/*
Begin a new surface.
*/
func (self Expanded) SurfaceBegin(primitive Mesh.PrimitiveType, material Material.Instance) { //gd:ImmediateMesh.surface_begin
	Advanced(self).SurfaceBegin(primitive, material)
}

/*
Set the color attribute that will be pushed with the next vertex.
*/
func (self Instance) SurfaceSetColor(color Color.RGBA) { //gd:ImmediateMesh.surface_set_color
	Advanced(self).SurfaceSetColor(Color.RGBA(color))
}

/*
Set the normal attribute that will be pushed with the next vertex.
*/
func (self Instance) SurfaceSetNormal(normal Vector3.XYZ) { //gd:ImmediateMesh.surface_set_normal
	Advanced(self).SurfaceSetNormal(Vector3.XYZ(normal))
}

/*
Set the tangent attribute that will be pushed with the next vertex.
*/
func (self Instance) SurfaceSetTangent(tangent Plane.NormalD) { //gd:ImmediateMesh.surface_set_tangent
	Advanced(self).SurfaceSetTangent(Plane.NormalD(tangent))
}

/*
Set the UV attribute that will be pushed with the next vertex.
*/
func (self Instance) SurfaceSetUv(uv Vector2.XY) { //gd:ImmediateMesh.surface_set_uv
	Advanced(self).SurfaceSetUv(Vector2.XY(uv))
}

/*
Set the UV2 attribute that will be pushed with the next vertex.
*/
func (self Instance) SurfaceSetUv2(uv2 Vector2.XY) { //gd:ImmediateMesh.surface_set_uv2
	Advanced(self).SurfaceSetUv2(Vector2.XY(uv2))
}

/*
Add a 3D vertex using the current attributes previously set.
*/
func (self Instance) SurfaceAddVertex(vertex Vector3.XYZ) { //gd:ImmediateMesh.surface_add_vertex
	Advanced(self).SurfaceAddVertex(Vector3.XYZ(vertex))
}

/*
Add a 2D vertex using the current attributes previously set.
*/
func (self Instance) SurfaceAddVertex2d(vertex Vector2.XY) { //gd:ImmediateMesh.surface_add_vertex_2d
	Advanced(self).SurfaceAddVertex2d(Vector2.XY(vertex))
}

/*
End and commit current surface. Note that surface being created will not be visible until this function is called.
*/
func (self Instance) SurfaceEnd() { //gd:ImmediateMesh.surface_end
	Advanced(self).SurfaceEnd()
}

/*
Clear all surfaces.
*/
func (self Instance) ClearSurfaces() { //gd:ImmediateMesh.clear_surfaces
	Advanced(self).ClearSurfaces()
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.ImmediateMesh

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.ImmediateMesh)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.ImmediateMesh)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.ImmediateMesh)(unsafe.Pointer(&object))}
	object[0].Notification(0, false)
	return casted
}

/*
Begin a new surface.
*/
//go:nosplit
func (self class) SurfaceBegin(primitive Mesh.PrimitiveType, material [1]gdclass.Material) { //gd:ImmediateMesh.surface_begin
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.surface_begin, 0|(gdextension.SizeInt<<4)|(gdextension.SizeObject<<8), unsafe.Pointer(&struct {
		primitive Mesh.PrimitiveType
		material  gdextension.Object
	}{primitive, gdextension.Object(gd.CallerIncrements(material[0].AsObject()))}))
}

/*
Set the color attribute that will be pushed with the next vertex.
*/
//go:nosplit
func (self class) SurfaceSetColor(color Color.RGBA) { //gd:ImmediateMesh.surface_set_color
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.surface_set_color, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

/*
Set the normal attribute that will be pushed with the next vertex.
*/
//go:nosplit
func (self class) SurfaceSetNormal(normal Vector3.XYZ) { //gd:ImmediateMesh.surface_set_normal
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.surface_set_normal, 0|(gdextension.SizeVector3<<4), unsafe.Pointer(&struct{ normal Vector3.XYZ }{normal}))
}

/*
Set the tangent attribute that will be pushed with the next vertex.
*/
//go:nosplit
func (self class) SurfaceSetTangent(tangent Plane.NormalD) { //gd:ImmediateMesh.surface_set_tangent
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.surface_set_tangent, 0|(gdextension.SizePlane<<4), unsafe.Pointer(&struct{ tangent Plane.NormalD }{tangent}))
}

/*
Set the UV attribute that will be pushed with the next vertex.
*/
//go:nosplit
func (self class) SurfaceSetUv(uv Vector2.XY) { //gd:ImmediateMesh.surface_set_uv
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.surface_set_uv, 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ uv Vector2.XY }{uv}))
}

/*
Set the UV2 attribute that will be pushed with the next vertex.
*/
//go:nosplit
func (self class) SurfaceSetUv2(uv2 Vector2.XY) { //gd:ImmediateMesh.surface_set_uv2
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.surface_set_uv2, 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ uv2 Vector2.XY }{uv2}))
}

/*
Add a 3D vertex using the current attributes previously set.
*/
//go:nosplit
func (self class) SurfaceAddVertex(vertex Vector3.XYZ) { //gd:ImmediateMesh.surface_add_vertex
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.surface_add_vertex, 0|(gdextension.SizeVector3<<4), unsafe.Pointer(&struct{ vertex Vector3.XYZ }{vertex}))
}

/*
Add a 2D vertex using the current attributes previously set.
*/
//go:nosplit
func (self class) SurfaceAddVertex2d(vertex Vector2.XY) { //gd:ImmediateMesh.surface_add_vertex_2d
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.surface_add_vertex_2d, 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ vertex Vector2.XY }{vertex}))
}

/*
End and commit current surface. Note that surface being created will not be visible until this function is called.
*/
//go:nosplit
func (self class) SurfaceEnd() { //gd:ImmediateMesh.surface_end
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.surface_end, 0, unsafe.Pointer(&struct{}{}))
}

/*
Clear all surfaces.
*/
//go:nosplit
func (self class) ClearSurfaces() { //gd:ImmediateMesh.clear_surfaces
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear_surfaces, 0, unsafe.Pointer(&struct{}{}))
}
func (self class) AsImmediateMesh() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsImmediateMesh() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsImmediateMesh() Instance { return self.Super().AsImmediateMesh() }
func (self class) AsMesh() Mesh.Advanced             { return *((*Mesh.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsMesh() Mesh.Instance     { return self.Super().AsMesh() }
func (self Instance) AsMesh() Mesh.Instance          { return *((*Mesh.Instance)(unsafe.Pointer(&self))) }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Mesh.Advanced(self.AsMesh()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Mesh.Instance(self.AsMesh()), name)
	}
}
func init() {
	gdclass.Register("ImmediateMesh", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
