// Code generated by the generate package DO NOT EDIT

// Package ReflectionProbe provides methods for working with ReflectionProbe object instances.
package ReflectionProbe

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/classdb/VisualInstance3D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector3"

var _ Object.ID
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ = slices.Delete[[]struct{}, struct{}]

/*
Captures its surroundings as a cubemap, and stores versions of it with increasing levels of blur to simulate different material roughnesses.
The [ReflectionProbe] is used to create high-quality reflections at a low performance cost (when [member update_mode] is [constant UPDATE_ONCE]). [ReflectionProbe]s can be blended together and with the rest of the scene smoothly. [ReflectionProbe]s can also be combined with [VoxelGI], SDFGI ([member Environment.sdfgi_enabled]) and screen-space reflections ([member Environment.ssr_enabled]) to get more accurate reflections in specific areas. [ReflectionProbe]s render all objects within their [member cull_mask], so updating them can be quite expensive. It is best to update them once with the important static objects and then leave them as-is.
[b]Note:[/b] Unlike [VoxelGI] and SDFGI, [ReflectionProbe]s only source their environment from a [WorldEnvironment] node. If you specify an [Environment] resource within a [Camera3D] node, it will be ignored by the [ReflectionProbe]. This can lead to incorrect lighting within the [ReflectionProbe].
[b]Note:[/b] Reflection probes are only supported in the Forward+ and Mobile rendering methods, not Compatibility. When using the Mobile rendering method, only 8 reflection probes can be displayed on each mesh resource. Attempting to display more than 8 reflection probes on a single mesh resource will result in reflection probes flickering in and out as the camera moves.
[b]Note:[/b] When using the Mobile rendering method, reflection probes will only correctly affect meshes whose visibility AABB intersects with the reflection probe's AABB. If using a shader to deform the mesh in a way that makes it go outside its AABB, [member GeometryInstance3D.extra_cull_margin] must be increased on the mesh. Otherwise, the reflection probe may not be visible on the mesh.
*/
type Instance [1]gdclass.ReflectionProbe

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsReflectionProbe() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.ReflectionProbe

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("ReflectionProbe"))
	casted := Instance{*(*gdclass.ReflectionProbe)(unsafe.Pointer(&object))}
	return casted
}

func (self Instance) UpdateMode() gdclass.ReflectionProbeUpdateMode {
	return gdclass.ReflectionProbeUpdateMode(class(self).GetUpdateMode())
}

func (self Instance) SetUpdateMode(value gdclass.ReflectionProbeUpdateMode) {
	class(self).SetUpdateMode(value)
}

func (self Instance) Intensity() Float.X {
	return Float.X(Float.X(class(self).GetIntensity()))
}

func (self Instance) SetIntensity(value Float.X) {
	class(self).SetIntensity(float64(value))
}

func (self Instance) BlendDistance() Float.X {
	return Float.X(Float.X(class(self).GetBlendDistance()))
}

func (self Instance) SetBlendDistance(value Float.X) {
	class(self).SetBlendDistance(float64(value))
}

func (self Instance) MaxDistance() Float.X {
	return Float.X(Float.X(class(self).GetMaxDistance()))
}

func (self Instance) SetMaxDistance(value Float.X) {
	class(self).SetMaxDistance(float64(value))
}

func (self Instance) Size() Vector3.XYZ {
	return Vector3.XYZ(class(self).GetSize())
}

func (self Instance) SetSize(value Vector3.XYZ) {
	class(self).SetSize(Vector3.XYZ(value))
}

func (self Instance) OriginOffset() Vector3.XYZ {
	return Vector3.XYZ(class(self).GetOriginOffset())
}

func (self Instance) SetOriginOffset(value Vector3.XYZ) {
	class(self).SetOriginOffset(Vector3.XYZ(value))
}

func (self Instance) BoxProjection() bool {
	return bool(class(self).IsBoxProjectionEnabled())
}

func (self Instance) SetBoxProjection(value bool) {
	class(self).SetEnableBoxProjection(value)
}

func (self Instance) Interior() bool {
	return bool(class(self).IsSetAsInterior())
}

func (self Instance) SetInterior(value bool) {
	class(self).SetAsInterior(value)
}

func (self Instance) EnableShadows() bool {
	return bool(class(self).AreShadowsEnabled())
}

func (self Instance) SetEnableShadows(value bool) {
	class(self).SetEnableShadows(value)
}

func (self Instance) CullMask() int {
	return int(int(class(self).GetCullMask()))
}

func (self Instance) SetCullMask(value int) {
	class(self).SetCullMask(int64(value))
}

func (self Instance) ReflectionMask() int {
	return int(int(class(self).GetReflectionMask()))
}

func (self Instance) SetReflectionMask(value int) {
	class(self).SetReflectionMask(int64(value))
}

func (self Instance) MeshLodThreshold() Float.X {
	return Float.X(Float.X(class(self).GetMeshLodThreshold()))
}

func (self Instance) SetMeshLodThreshold(value Float.X) {
	class(self).SetMeshLodThreshold(float64(value))
}

func (self Instance) AmbientMode() gdclass.ReflectionProbeAmbientMode {
	return gdclass.ReflectionProbeAmbientMode(class(self).GetAmbientMode())
}

func (self Instance) SetAmbientMode(value gdclass.ReflectionProbeAmbientMode) {
	class(self).SetAmbientMode(value)
}

func (self Instance) AmbientColor() Color.RGBA {
	return Color.RGBA(class(self).GetAmbientColor())
}

func (self Instance) SetAmbientColor(value Color.RGBA) {
	class(self).SetAmbientColor(Color.RGBA(value))
}

func (self Instance) AmbientColorEnergy() Float.X {
	return Float.X(Float.X(class(self).GetAmbientColorEnergy()))
}

func (self Instance) SetAmbientColorEnergy(value Float.X) {
	class(self).SetAmbientColorEnergy(float64(value))
}

//go:nosplit
func (self class) SetIntensity(intensity float64) { //gd:ReflectionProbe.set_intensity
	var frame = callframe.New()
	callframe.Arg(frame, intensity)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_intensity, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetIntensity() float64 { //gd:ReflectionProbe.get_intensity
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_get_intensity, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetBlendDistance(blend_distance float64) { //gd:ReflectionProbe.set_blend_distance
	var frame = callframe.New()
	callframe.Arg(frame, blend_distance)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_blend_distance, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetBlendDistance() float64 { //gd:ReflectionProbe.get_blend_distance
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_get_blend_distance, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetAmbientMode(ambient gdclass.ReflectionProbeAmbientMode) { //gd:ReflectionProbe.set_ambient_mode
	var frame = callframe.New()
	callframe.Arg(frame, ambient)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_ambient_mode, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetAmbientMode() gdclass.ReflectionProbeAmbientMode { //gd:ReflectionProbe.get_ambient_mode
	var frame = callframe.New()
	var r_ret = callframe.Ret[gdclass.ReflectionProbeAmbientMode](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_get_ambient_mode, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetAmbientColor(ambient Color.RGBA) { //gd:ReflectionProbe.set_ambient_color
	var frame = callframe.New()
	callframe.Arg(frame, ambient)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_ambient_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetAmbientColor() Color.RGBA { //gd:ReflectionProbe.get_ambient_color
	var frame = callframe.New()
	var r_ret = callframe.Ret[Color.RGBA](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_get_ambient_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetAmbientColorEnergy(ambient_energy float64) { //gd:ReflectionProbe.set_ambient_color_energy
	var frame = callframe.New()
	callframe.Arg(frame, ambient_energy)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_ambient_color_energy, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetAmbientColorEnergy() float64 { //gd:ReflectionProbe.get_ambient_color_energy
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_get_ambient_color_energy, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetMaxDistance(max_distance float64) { //gd:ReflectionProbe.set_max_distance
	var frame = callframe.New()
	callframe.Arg(frame, max_distance)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_max_distance, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetMaxDistance() float64 { //gd:ReflectionProbe.get_max_distance
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_get_max_distance, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetMeshLodThreshold(ratio float64) { //gd:ReflectionProbe.set_mesh_lod_threshold
	var frame = callframe.New()
	callframe.Arg(frame, ratio)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_mesh_lod_threshold, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetMeshLodThreshold() float64 { //gd:ReflectionProbe.get_mesh_lod_threshold
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_get_mesh_lod_threshold, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetSize(size Vector3.XYZ) { //gd:ReflectionProbe.set_size
	var frame = callframe.New()
	callframe.Arg(frame, size)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_size, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetSize() Vector3.XYZ { //gd:ReflectionProbe.get_size
	var frame = callframe.New()
	var r_ret = callframe.Ret[Vector3.XYZ](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_get_size, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetOriginOffset(origin_offset Vector3.XYZ) { //gd:ReflectionProbe.set_origin_offset
	var frame = callframe.New()
	callframe.Arg(frame, origin_offset)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_origin_offset, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetOriginOffset() Vector3.XYZ { //gd:ReflectionProbe.get_origin_offset
	var frame = callframe.New()
	var r_ret = callframe.Ret[Vector3.XYZ](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_get_origin_offset, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetAsInterior(enable bool) { //gd:ReflectionProbe.set_as_interior
	var frame = callframe.New()
	callframe.Arg(frame, enable)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_as_interior, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) IsSetAsInterior() bool { //gd:ReflectionProbe.is_set_as_interior
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_is_set_as_interior, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetEnableBoxProjection(enable bool) { //gd:ReflectionProbe.set_enable_box_projection
	var frame = callframe.New()
	callframe.Arg(frame, enable)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_enable_box_projection, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) IsBoxProjectionEnabled() bool { //gd:ReflectionProbe.is_box_projection_enabled
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_is_box_projection_enabled, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetEnableShadows(enable bool) { //gd:ReflectionProbe.set_enable_shadows
	var frame = callframe.New()
	callframe.Arg(frame, enable)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_enable_shadows, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) AreShadowsEnabled() bool { //gd:ReflectionProbe.are_shadows_enabled
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_are_shadows_enabled, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetCullMask(layers int64) { //gd:ReflectionProbe.set_cull_mask
	var frame = callframe.New()
	callframe.Arg(frame, layers)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_cull_mask, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetCullMask() int64 { //gd:ReflectionProbe.get_cull_mask
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_get_cull_mask, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetReflectionMask(layers int64) { //gd:ReflectionProbe.set_reflection_mask
	var frame = callframe.New()
	callframe.Arg(frame, layers)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_reflection_mask, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetReflectionMask() int64 { //gd:ReflectionProbe.get_reflection_mask
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_get_reflection_mask, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetUpdateMode(mode gdclass.ReflectionProbeUpdateMode) { //gd:ReflectionProbe.set_update_mode
	var frame = callframe.New()
	callframe.Arg(frame, mode)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_set_update_mode, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetUpdateMode() gdclass.ReflectionProbeUpdateMode { //gd:ReflectionProbe.get_update_mode
	var frame = callframe.New()
	var r_ret = callframe.Ret[gdclass.ReflectionProbeUpdateMode](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ReflectionProbe.Bind_get_update_mode, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}
func (self class) AsReflectionProbe() Advanced    { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsReflectionProbe() Instance { return *((*Instance)(unsafe.Pointer(&self))) }
func (self class) AsVisualInstance3D() VisualInstance3D.Advanced {
	return *((*VisualInstance3D.Advanced)(unsafe.Pointer(&self)))
}
func (self Instance) AsVisualInstance3D() VisualInstance3D.Instance {
	return *((*VisualInstance3D.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode3D() Node3D.Advanced    { return *((*Node3D.Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsNode3D() Node3D.Instance { return *((*Node3D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsNode() Node.Advanced        { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsNode() Node.Instance     { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualInstance3D.Advanced(self.AsVisualInstance3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualInstance3D.Instance(self.AsVisualInstance3D()), name)
	}
}
func init() {
	gdclass.Register("ReflectionProbe", func(ptr gd.Object) any {
		return [1]gdclass.ReflectionProbe{*(*gdclass.ReflectionProbe)(unsafe.Pointer(&ptr))}
	})
}

type UpdateMode = gdclass.ReflectionProbeUpdateMode //gd:ReflectionProbe.UpdateMode

const (
	/*Update the probe once on the next frame (recommended for most objects). The corresponding radiance map will be generated over the following six frames. This takes more time to update than [constant UPDATE_ALWAYS], but it has a lower performance cost and can result in higher-quality reflections. The ReflectionProbe is updated when its transform changes, but not when nearby geometry changes. You can force a [ReflectionProbe] update by moving the [ReflectionProbe] slightly in any direction.*/
	UpdateOnce UpdateMode = 0
	/*Update the probe every frame. This provides better results for fast-moving dynamic objects (such as cars). However, it has a significant performance cost. Due to the cost, it's recommended to only use one ReflectionProbe with [constant UPDATE_ALWAYS] at most per scene. For all other use cases, use [constant UPDATE_ONCE].*/
	UpdateAlways UpdateMode = 1
)

type AmbientMode = gdclass.ReflectionProbeAmbientMode //gd:ReflectionProbe.AmbientMode

const (
	/*Do not apply any ambient lighting inside the [ReflectionProbe]'s box defined by its [member size].*/
	AmbientDisabled AmbientMode = 0
	/*Apply automatically-sourced environment lighting inside the [ReflectionProbe]'s box defined by its [member size].*/
	AmbientEnvironment AmbientMode = 1
	/*Apply custom ambient lighting inside the [ReflectionProbe]'s box defined by its [member size]. See [member ambient_color] and [member ambient_color_energy].*/
	AmbientColor AmbientMode = 2
)
