// Code generated by the generate package DO NOT EDIT

// Package CanvasItemMaterial provides methods for working with CanvasItemMaterial object instances.
package CanvasItemMaterial

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Material"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[CanvasItemMaterial]s provide a means of modifying the textures associated with a CanvasItem. They specialize in describing blend and lighting behaviors for textures. Use a [ShaderMaterial] to more fully customize a material's interactions with a [CanvasItem].
*/
type Instance [1]gdclass.CanvasItemMaterial

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_blend_mode              gdextension.MethodForClass `hash:"1786054936"`
	get_blend_mode              gdextension.MethodForClass `hash:"3318684035"`
	set_light_mode              gdextension.MethodForClass `hash:"628074070"`
	get_light_mode              gdextension.MethodForClass `hash:"3863292382"`
	set_particles_animation     gdextension.MethodForClass `hash:"2586408642"`
	get_particles_animation     gdextension.MethodForClass `hash:"36873697"`
	set_particles_anim_h_frames gdextension.MethodForClass `hash:"1286410249"`
	get_particles_anim_h_frames gdextension.MethodForClass `hash:"3905245786"`
	set_particles_anim_v_frames gdextension.MethodForClass `hash:"1286410249"`
	get_particles_anim_v_frames gdextension.MethodForClass `hash:"3905245786"`
	set_particles_anim_loop     gdextension.MethodForClass `hash:"2586408642"`
	get_particles_anim_loop     gdextension.MethodForClass `hash:"36873697"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("CanvasItemMaterial")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsCanvasItemMaterial() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.CanvasItemMaterial

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.CanvasItemMaterial](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.CanvasItemMaterial](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.CanvasItemMaterial{pointers.Add[gdclass.CanvasItemMaterial]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.CanvasItemMaterial{pointers.New[gdclass.CanvasItemMaterial]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) BlendMode() BlendMode {
	return BlendMode(class(self).GetBlendMode())
}

func (self Instance) SetBlendMode(value BlendMode) {
	class(self).SetBlendMode(value)
}

func (self Instance) LightMode() LightMode {
	return LightMode(class(self).GetLightMode())
}

func (self Instance) SetLightMode(value LightMode) {
	class(self).SetLightMode(value)
}

func (self Instance) ParticlesAnimation() bool {
	return bool(class(self).GetParticlesAnimation())
}

func (self Instance) SetParticlesAnimation(value bool) {
	class(self).SetParticlesAnimation(value)
}

func (self Instance) ParticlesAnimHFrames() int {
	return int(int(class(self).GetParticlesAnimHFrames()))
}

func (self Instance) SetParticlesAnimHFrames(value int) {
	class(self).SetParticlesAnimHFrames(int64(value))
}

func (self Instance) ParticlesAnimVFrames() int {
	return int(int(class(self).GetParticlesAnimVFrames()))
}

func (self Instance) SetParticlesAnimVFrames(value int) {
	class(self).SetParticlesAnimVFrames(int64(value))
}

func (self Instance) ParticlesAnimLoop() bool {
	return bool(class(self).GetParticlesAnimLoop())
}

func (self Instance) SetParticlesAnimLoop(value bool) {
	class(self).SetParticlesAnimLoop(value)
}

//go:nosplit
func (self class) SetBlendMode(blend_mode BlendMode) { //gd:CanvasItemMaterial.set_blend_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_blend_mode, 0|(gdextension.SizeInt<<4), &struct{ blend_mode BlendMode }{blend_mode})
}

//go:nosplit
func (self class) GetBlendMode() BlendMode { //gd:CanvasItemMaterial.get_blend_mode
	var r_ret = gdextension.Call[BlendMode](gd.ObjectChecked(self.AsObject()), methods.get_blend_mode, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetLightMode(light_mode LightMode) { //gd:CanvasItemMaterial.set_light_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_light_mode, 0|(gdextension.SizeInt<<4), &struct{ light_mode LightMode }{light_mode})
}

//go:nosplit
func (self class) GetLightMode() LightMode { //gd:CanvasItemMaterial.get_light_mode
	var r_ret = gdextension.Call[LightMode](gd.ObjectChecked(self.AsObject()), methods.get_light_mode, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetParticlesAnimation(particles_anim bool) { //gd:CanvasItemMaterial.set_particles_animation
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_particles_animation, 0|(gdextension.SizeBool<<4), &struct{ particles_anim bool }{particles_anim})
}

//go:nosplit
func (self class) GetParticlesAnimation() bool { //gd:CanvasItemMaterial.get_particles_animation
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_particles_animation, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetParticlesAnimHFrames(frames int64) { //gd:CanvasItemMaterial.set_particles_anim_h_frames
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_particles_anim_h_frames, 0|(gdextension.SizeInt<<4), &struct{ frames int64 }{frames})
}

//go:nosplit
func (self class) GetParticlesAnimHFrames() int64 { //gd:CanvasItemMaterial.get_particles_anim_h_frames
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_particles_anim_h_frames, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetParticlesAnimVFrames(frames int64) { //gd:CanvasItemMaterial.set_particles_anim_v_frames
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_particles_anim_v_frames, 0|(gdextension.SizeInt<<4), &struct{ frames int64 }{frames})
}

//go:nosplit
func (self class) GetParticlesAnimVFrames() int64 { //gd:CanvasItemMaterial.get_particles_anim_v_frames
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_particles_anim_v_frames, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetParticlesAnimLoop(loop bool) { //gd:CanvasItemMaterial.set_particles_anim_loop
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_particles_anim_loop, 0|(gdextension.SizeBool<<4), &struct{ loop bool }{loop})
}

//go:nosplit
func (self class) GetParticlesAnimLoop() bool { //gd:CanvasItemMaterial.get_particles_anim_loop
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_particles_anim_loop, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsCanvasItemMaterial() Advanced {
	return Advanced{pointers.AsA[gdclass.CanvasItemMaterial](self[0])}
}
func (self Instance) AsCanvasItemMaterial() Instance {
	return Instance{pointers.AsA[gdclass.CanvasItemMaterial](self[0])}
}
func (self *Extension[T]) AsCanvasItemMaterial() Instance { return self.Super().AsCanvasItemMaterial() }
func (self class) AsMaterial() Material.Advanced {
	return Material.Advanced{pointers.AsA[gdclass.Material](self[0])}
}
func (self *Extension[T]) AsMaterial() Material.Instance { return self.Super().AsMaterial() }
func (self Instance) AsMaterial() Material.Instance {
	return Material.Instance{pointers.AsA[gdclass.Material](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Material.Advanced(self.AsMaterial()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Material.Instance(self.AsMaterial()), name)
	}
}
func init() {
	gdclass.Register("CanvasItemMaterial", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.CanvasItemMaterial](ptr)} })
}

type BlendMode int //gd:CanvasItemMaterial.BlendMode

const (
	/*Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value.*/
	BlendModeMix BlendMode = 0
	/*Additive blending mode.*/
	BlendModeAdd BlendMode = 1
	/*Subtractive blending mode.*/
	BlendModeSub BlendMode = 2
	/*Multiplicative blending mode.*/
	BlendModeMul BlendMode = 3
	/*Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value.*/
	BlendModePremultAlpha BlendMode = 4
)

type LightMode int //gd:CanvasItemMaterial.LightMode

const (
	/*Render the material using both light and non-light sensitive material properties.*/
	LightModeNormal LightMode = 0
	/*Render the material as if there were no light.*/
	LightModeUnshaded LightMode = 1
	/*Render the material as if there were only light.*/
	LightModeLightOnly LightMode = 2
)
