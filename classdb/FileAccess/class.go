// Code generated by the generate package DO NOT EDIT

// Package FileAccess provides methods for working with FileAccess object instances.
package FileAccess

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This class can be used to permanently store data in the user device's file system and to read from it. This is useful for storing game save data or player configuration files.
Here's a sample on how to write and read from a file:
[codeblocks]
[gdscript]
func save_to_file(content):

	var file = FileAccess.open("user://save_game.dat", FileAccess.WRITE)
	file.store_string(content)

func load_from_file():

	var file = FileAccess.open("user://save_game.dat", FileAccess.READ)
	var content = file.get_as_text()
	return content

[/gdscript]
[csharp]
public void SaveToFile(string content)

	{
	    using var file = FileAccess.Open("user://save_game.dat", FileAccess.ModeFlags.Write);
	    file.StoreString(content);
	}

public string LoadFromFile()

	{
	    using var file = FileAccess.Open("user://save_game.dat", FileAccess.ModeFlags.Read);
	    string content = file.GetAsText();
	    return content;
	}

[/csharp]
[/codeblocks]
In the example above, the file will be saved in the user data folder as specified in the [url=$DOCS_URL/tutorials/io/data_paths.html]Data paths[/url] documentation.
[FileAccess] will close when it's freed, which happens when it goes out of scope or when it gets assigned with [code]null[/code]. [method close] can be used to close it before then explicitly. In C# the reference must be disposed manually, which can be done with the [code]using[/code] statement or by calling the [code]Dispose[/code] method directly.
[b]Note:[/b] To access project resources once exported, it is recommended to use [ResourceLoader] instead of [FileAccess], as some files are converted to engine-specific formats and their original source files might not be present in the exported PCK package. If using [FileAccess], make sure the file is included in the export by changing its import mode to [b]Keep File (exported as is)[/b] in the Import dock, or, for files where this option is not available, change the non-resource export filter in the Export dialog to include the file's extension (e.g. [code]*.txt[/code]).
[b]Note:[/b] Files are automatically closed only if the process exits "normally" (such as by clicking the window manager's close button or pressing [b]Alt + F4[/b]). If you stop the project execution by pressing [b]F8[/b] while the project is running, the file won't be closed as the game process will be killed. You can work around this by calling [method flush] at regular intervals.
*/
type Instance [1]gdclass.FileAccess

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	open                     gdextension.MethodForClass `hash:"1247358404"`
	open_encrypted           gdextension.MethodForClass `hash:"788003459"`
	open_encrypted_with_pass gdextension.MethodForClass `hash:"790283377"`
	open_compressed          gdextension.MethodForClass `hash:"3686439335"`
	get_open_error           gdextension.MethodForClass `hash:"166280745"`
	create_temp              gdextension.MethodForClass `hash:"3075606245"`
	get_file_as_bytes        gdextension.MethodForClass `hash:"659035735"`
	get_file_as_string       gdextension.MethodForClass `hash:"1703090593"`
	resize                   gdextension.MethodForClass `hash:"844576869"`
	flush                    gdextension.MethodForClass `hash:"3218959716"`
	get_path                 gdextension.MethodForClass `hash:"201670096"`
	get_path_absolute        gdextension.MethodForClass `hash:"201670096"`
	is_open                  gdextension.MethodForClass `hash:"36873697"`
	seek                     gdextension.MethodForClass `hash:"1286410249"`
	seek_end                 gdextension.MethodForClass `hash:"1995695955"`
	get_position             gdextension.MethodForClass `hash:"3905245786"`
	get_length               gdextension.MethodForClass `hash:"3905245786"`
	eof_reached              gdextension.MethodForClass `hash:"36873697"`
	get_8                    gdextension.MethodForClass `hash:"3905245786"`
	get_16                   gdextension.MethodForClass `hash:"3905245786"`
	get_32                   gdextension.MethodForClass `hash:"3905245786"`
	get_64                   gdextension.MethodForClass `hash:"3905245786"`
	get_half                 gdextension.MethodForClass `hash:"1740695150"`
	get_float                gdextension.MethodForClass `hash:"1740695150"`
	get_double               gdextension.MethodForClass `hash:"1740695150"`
	get_real                 gdextension.MethodForClass `hash:"1740695150"`
	get_buffer               gdextension.MethodForClass `hash:"4131300905"`
	get_line                 gdextension.MethodForClass `hash:"201670096"`
	get_csv_line             gdextension.MethodForClass `hash:"2358116058"`
	get_as_text              gdextension.MethodForClass `hash:"1162154673"`
	get_md5                  gdextension.MethodForClass `hash:"1703090593"`
	get_sha256               gdextension.MethodForClass `hash:"1703090593"`
	is_big_endian            gdextension.MethodForClass `hash:"36873697"`
	set_big_endian           gdextension.MethodForClass `hash:"2586408642"`
	get_error                gdextension.MethodForClass `hash:"3185525595"`
	get_var                  gdextension.MethodForClass `hash:"189129690"`
	store_8                  gdextension.MethodForClass `hash:"3067735520"`
	store_16                 gdextension.MethodForClass `hash:"3067735520"`
	store_32                 gdextension.MethodForClass `hash:"3067735520"`
	store_64                 gdextension.MethodForClass `hash:"3067735520"`
	store_half               gdextension.MethodForClass `hash:"330693286"`
	store_float              gdextension.MethodForClass `hash:"330693286"`
	store_double             gdextension.MethodForClass `hash:"330693286"`
	store_real               gdextension.MethodForClass `hash:"330693286"`
	store_buffer             gdextension.MethodForClass `hash:"114037665"`
	store_line               gdextension.MethodForClass `hash:"2323990056"`
	store_csv_line           gdextension.MethodForClass `hash:"1611473434"`
	store_string             gdextension.MethodForClass `hash:"2323990056"`
	store_var                gdextension.MethodForClass `hash:"117357437"`
	store_pascal_string      gdextension.MethodForClass `hash:"2323990056"`
	get_pascal_string        gdextension.MethodForClass `hash:"2841200299"`
	close                    gdextension.MethodForClass `hash:"3218959716"`
	file_exists              gdextension.MethodForClass `hash:"2323990056"`
	get_modified_time        gdextension.MethodForClass `hash:"1597066294"`
	get_unix_permissions     gdextension.MethodForClass `hash:"524341837"`
	set_unix_permissions     gdextension.MethodForClass `hash:"846038644"`
	get_hidden_attribute     gdextension.MethodForClass `hash:"2323990056"`
	set_hidden_attribute     gdextension.MethodForClass `hash:"2892558115"`
	set_read_only_attribute  gdextension.MethodForClass `hash:"2892558115"`
	get_read_only_attribute  gdextension.MethodForClass `hash:"2323990056"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("FileAccess")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.FileAccess

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsFileAccess() Instance
}

/*
Creates a new [FileAccess] object and opens the file for writing or reading, depending on the flags.
Returns [code]null[/code] if opening the file failed. You can use [method get_open_error] to check the error that occurred.
*/
func Open(path string, flags ModeFlags) Instance { //gd:FileAccess.open
	self := Instance{}
	return Instance(Advanced(self).Open(String.New(path), flags))
}

/*
Creates a new [FileAccess] object and opens an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.
[b]Note:[/b] The provided key must be 32 bytes long.
Returns [code]null[/code] if opening the file failed. You can use [method get_open_error] to check the error that occurred.
*/
func OpenEncrypted(path string, mode_flags ModeFlags, key []byte, iv []byte) Instance { //gd:FileAccess.open_encrypted
	self := Instance{}
	return Instance(Advanced(self).OpenEncrypted(String.New(path), mode_flags, Packed.Bytes(Packed.New(key...)), Packed.Bytes(Packed.New(iv...))))
}

/*
Creates a new [FileAccess] object and opens an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.
[b]Note:[/b] The provided key must be 32 bytes long.
Returns [code]null[/code] if opening the file failed. You can use [method get_open_error] to check the error that occurred.
*/
func OpenEncryptedOptions(path string, mode_flags ModeFlags, key []byte, iv []byte) Instance { //gd:FileAccess.open_encrypted
	self := Instance{}
	return Instance(Advanced(self).OpenEncrypted(String.New(path), mode_flags, Packed.Bytes(Packed.New(key...)), Packed.Bytes(Packed.New(iv...))))
}

/*
Creates a new [FileAccess] object and opens an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it.
Returns [code]null[/code] if opening the file failed. You can use [method get_open_error] to check the error that occurred.
*/
func OpenEncryptedWithPass(path string, mode_flags ModeFlags, pass string) Instance { //gd:FileAccess.open_encrypted_with_pass
	self := Instance{}
	return Instance(Advanced(self).OpenEncryptedWithPass(String.New(path), mode_flags, String.New(pass)))
}

/*
Creates a new [FileAccess] object and opens a compressed file for reading or writing.
[b]Note:[/b] [method open_compressed] can only read files that were saved by Godot, not third-party compression formats. See [url=https://github.com/godotengine/godot/issues/28999]GitHub issue #28999[/url] for a workaround.
Returns [code]null[/code] if opening the file failed. You can use [method get_open_error] to check the error that occurred.
*/
func OpenCompressed(path string, mode_flags ModeFlags, compression_mode CompressionMode) Instance { //gd:FileAccess.open_compressed
	self := Instance{}
	return Instance(Advanced(self).OpenCompressed(String.New(path), mode_flags, compression_mode))
}

/*
Creates a new [FileAccess] object and opens a compressed file for reading or writing.
[b]Note:[/b] [method open_compressed] can only read files that were saved by Godot, not third-party compression formats. See [url=https://github.com/godotengine/godot/issues/28999]GitHub issue #28999[/url] for a workaround.
Returns [code]null[/code] if opening the file failed. You can use [method get_open_error] to check the error that occurred.
*/
func OpenCompressedOptions(path string, mode_flags ModeFlags, compression_mode CompressionMode) Instance { //gd:FileAccess.open_compressed
	self := Instance{}
	return Instance(Advanced(self).OpenCompressed(String.New(path), mode_flags, compression_mode))
}

/*
Returns the result of the last [method open] call in the current thread.
*/
func GetOpenError() error { //gd:FileAccess.get_open_error
	self := Instance{}
	return error(gd.ToError(Advanced(self).GetOpenError()))
}

/*
Creates a temporary file. This file will be freed when the returned [FileAccess] is freed.
If [param prefix] is not empty, it will be prefixed to the file name, separated by a [code]-[/code].
If [param extension] is not empty, it will be appended to the temporary file name.
If [param keep] is [code]true[/code], the file is not deleted when the returned [FileAccess] is freed.
Returns [code]null[/code] if opening the file failed. You can use [method get_open_error] to check the error that occurred.
*/
func CreateTemp(mode_flags int, prefix string, extension string, keep bool) Instance { //gd:FileAccess.create_temp
	self := Instance{}
	return Instance(Advanced(self).CreateTemp(int64(mode_flags), String.New(prefix), String.New(extension), keep))
}

/*
Creates a temporary file. This file will be freed when the returned [FileAccess] is freed.
If [param prefix] is not empty, it will be prefixed to the file name, separated by a [code]-[/code].
If [param extension] is not empty, it will be appended to the temporary file name.
If [param keep] is [code]true[/code], the file is not deleted when the returned [FileAccess] is freed.
Returns [code]null[/code] if opening the file failed. You can use [method get_open_error] to check the error that occurred.
*/
func CreateTempOptions(mode_flags int, prefix string, extension string, keep bool) Instance { //gd:FileAccess.create_temp
	self := Instance{}
	return Instance(Advanced(self).CreateTemp(int64(mode_flags), String.New(prefix), String.New(extension), keep))
}

/*
Returns the whole [param path] file contents as a [PackedByteArray] without any decoding.
Returns an empty [PackedByteArray] if an error occurred while opening the file. You can use [method get_open_error] to check the error that occurred.
*/
func GetFileAsBytes(path string) []byte { //gd:FileAccess.get_file_as_bytes
	self := Instance{}
	return []byte(Advanced(self).GetFileAsBytes(String.New(path)).Bytes())
}

/*
Returns the whole [param path] file contents as a [String]. Text is interpreted as being UTF-8 encoded.
Returns an empty [String] if an error occurred while opening the file. You can use [method get_open_error] to check the error that occurred.
*/
func GetFileAsString(path string) string { //gd:FileAccess.get_file_as_string
	self := Instance{}
	return string(Advanced(self).GetFileAsString(String.New(path)).String())
}

/*
Resizes the file to a specified length. The file must be open in a mode that permits writing. If the file is extended, NUL characters are appended. If the file is truncated, all data from the end file to the original length of the file is lost.
*/
func (self Instance) Resize(length int) error { //gd:FileAccess.resize
	return error(gd.ToError(Advanced(self).Resize(int64(length))))
}

/*
Writes the file's buffer to disk. Flushing is automatically performed when the file is closed. This means you don't need to call [method flush] manually before closing a file. Still, calling [method flush] can be used to ensure the data is safe even if the project crashes instead of being closed gracefully.
[b]Note:[/b] Only call [method flush] when you actually need it. Otherwise, it will decrease performance due to constant disk writes.
*/
func (self Instance) Flush() { //gd:FileAccess.flush
	Advanced(self).Flush()
}

/*
Returns the path as a [String] for the current open file.
*/
func (self Instance) GetPath() string { //gd:FileAccess.get_path
	return string(Advanced(self).GetPath().String())
}

/*
Returns the absolute path as a [String] for the current open file.
*/
func (self Instance) GetPathAbsolute() string { //gd:FileAccess.get_path_absolute
	return string(Advanced(self).GetPathAbsolute().String())
}

/*
Returns [code]true[/code] if the file is currently opened.
*/
func (self Instance) IsOpen() bool { //gd:FileAccess.is_open
	return bool(Advanced(self).IsOpen())
}

/*
Changes the file reading/writing cursor to the specified position (in bytes from the beginning of the file).
*/
func (self Instance) SeekTo(position int) { //gd:FileAccess.seek
	Advanced(self).SeekTo(int64(position))
}

/*
Changes the file reading/writing cursor to the specified position (in bytes from the end of the file).
[b]Note:[/b] This is an offset, so you should use negative numbers or the cursor will be at the end of the file.
*/
func (self Instance) SeekEnd() { //gd:FileAccess.seek_end
	Advanced(self).SeekEnd(int64(0))
}

/*
Changes the file reading/writing cursor to the specified position (in bytes from the end of the file).
[b]Note:[/b] This is an offset, so you should use negative numbers or the cursor will be at the end of the file.
*/
func (self Expanded) SeekEnd(position int) { //gd:FileAccess.seek_end
	Advanced(self).SeekEnd(int64(position))
}

/*
Returns the file cursor's position.
*/
func (self Instance) GetPosition() int { //gd:FileAccess.get_position
	return int(int(Advanced(self).GetPosition()))
}

/*
Returns the size of the file in bytes. For a pipe, returns the number of bytes available for reading from the pipe.
*/
func (self Instance) GetLength() int { //gd:FileAccess.get_length
	return int(int(Advanced(self).GetLength()))
}

/*
Returns [code]true[/code] if the file cursor has already read past the end of the file.
[b]Note:[/b] [code]eof_reached() == false[/code] cannot be used to check whether there is more data available. To loop while there is more data available, use:
[codeblocks]
[gdscript]
while file.get_position() < file.get_length():

	# Read data

[/gdscript]
[csharp]
while (file.GetPosition() < file.GetLength())

	{
	    // Read data
	}

[/csharp]
[/codeblocks]
*/
func (self Instance) EofReached() bool { //gd:FileAccess.eof_reached
	return bool(Advanced(self).EofReached())
}

/*
Returns the next 8 bits from the file as an integer. See [method store_8] for details on what values can be stored and retrieved this way.
*/
func (self Instance) Get8() int { //gd:FileAccess.get_8
	return int(int(Advanced(self).Get8()))
}

/*
Returns the next 16 bits from the file as an integer. See [method store_16] for details on what values can be stored and retrieved this way.
*/
func (self Instance) Get16() int { //gd:FileAccess.get_16
	return int(int(Advanced(self).Get16()))
}

/*
Returns the next 32 bits from the file as an integer. See [method store_32] for details on what values can be stored and retrieved this way.
*/
func (self Instance) Get32() int { //gd:FileAccess.get_32
	return int(int(Advanced(self).Get32()))
}

/*
Returns the next 64 bits from the file as an integer. See [method store_64] for details on what values can be stored and retrieved this way.
*/
func (self Instance) Get64() int { //gd:FileAccess.get_64
	return int(int(Advanced(self).Get64()))
}

/*
Returns the next 16 bits from the file as a half-precision floating-point number.
*/
func (self Instance) GetHalf() Float.X { //gd:FileAccess.get_half
	return Float.X(Float.X(Advanced(self).GetHalf()))
}

/*
Returns the next 32 bits from the file as a floating-point number.
*/
func (self Instance) GetFloat() Float.X { //gd:FileAccess.get_float
	return Float.X(Float.X(Advanced(self).GetFloat()))
}

/*
Returns the next 64 bits from the file as a floating-point number.
*/
func (self Instance) GetDouble() Float.X { //gd:FileAccess.get_double
	return Float.X(Float.X(Advanced(self).GetDouble()))
}

/*
Returns the next bits from the file as a floating-point number.
*/
func (self Instance) GetReal() Float.X { //gd:FileAccess.get_real
	return Float.X(Float.X(Advanced(self).GetReal()))
}

/*
Returns next [param length] bytes of the file as a [PackedByteArray].
*/
func (self Instance) GetBuffer(length int) []byte { //gd:FileAccess.get_buffer
	return []byte(Advanced(self).GetBuffer(int64(length)).Bytes())
}

/*
Returns the next line of the file as a [String]. The returned string doesn't include newline ([code]\n[/code]) or carriage return ([code]\r[/code]) characters, but does include any other leading or trailing whitespace.
Text is interpreted as being UTF-8 encoded.
*/
func (self Instance) GetLine() string { //gd:FileAccess.get_line
	return string(Advanced(self).GetLine().String())
}

/*
Returns the next value of the file in CSV (Comma-Separated Values) format. You can pass a different delimiter [param delim] to use other than the default [code]","[/code] (comma). This delimiter must be one-character long, and cannot be a double quotation mark.
Text is interpreted as being UTF-8 encoded. Text values must be enclosed in double quotes if they include the delimiter character. Double quotes within a text value can be escaped by doubling their occurrence.
For example, the following CSV lines are valid and will be properly parsed as two strings each:
[codeblock lang=text]
Alice,"Hello, Bob!"
Bob,Alice! What a surprise!
Alice,"I thought you'd reply with ""Hello, world""."
[/codeblock]
Note how the second line can omit the enclosing quotes as it does not include the delimiter. However it [i]could[/i] very well use quotes, it was only written without for demonstration purposes. The third line must use [code]""[/code] for each quotation mark that needs to be interpreted as such instead of the end of a text value.
*/
func (self Instance) GetCsvLine() []string { //gd:FileAccess.get_csv_line
	return []string(Advanced(self).GetCsvLine(String.New(",")).Strings())
}

/*
Returns the next value of the file in CSV (Comma-Separated Values) format. You can pass a different delimiter [param delim] to use other than the default [code]","[/code] (comma). This delimiter must be one-character long, and cannot be a double quotation mark.
Text is interpreted as being UTF-8 encoded. Text values must be enclosed in double quotes if they include the delimiter character. Double quotes within a text value can be escaped by doubling their occurrence.
For example, the following CSV lines are valid and will be properly parsed as two strings each:
[codeblock lang=text]
Alice,"Hello, Bob!"
Bob,Alice! What a surprise!
Alice,"I thought you'd reply with ""Hello, world""."
[/codeblock]
Note how the second line can omit the enclosing quotes as it does not include the delimiter. However it [i]could[/i] very well use quotes, it was only written without for demonstration purposes. The third line must use [code]""[/code] for each quotation mark that needs to be interpreted as such instead of the end of a text value.
*/
func (self Expanded) GetCsvLine(delim string) []string { //gd:FileAccess.get_csv_line
	return []string(Advanced(self).GetCsvLine(String.New(delim)).Strings())
}

/*
Returns the whole file as a [String]. Text is interpreted as being UTF-8 encoded.
If [param skip_cr] is [code]true[/code], carriage return characters ([code]\r[/code], CR) will be ignored when parsing the UTF-8, so that only line feed characters ([code]\n[/code], LF) represent a new line (Unix convention).
*/
func (self Instance) GetAsText() string { //gd:FileAccess.get_as_text
	return string(Advanced(self).GetAsText(false).String())
}

/*
Returns the whole file as a [String]. Text is interpreted as being UTF-8 encoded.
If [param skip_cr] is [code]true[/code], carriage return characters ([code]\r[/code], CR) will be ignored when parsing the UTF-8, so that only line feed characters ([code]\n[/code], LF) represent a new line (Unix convention).
*/
func (self Expanded) GetAsText(skip_cr bool) string { //gd:FileAccess.get_as_text
	return string(Advanced(self).GetAsText(skip_cr).String())
}

/*
Returns an MD5 String representing the file at the given path or an empty [String] on failure.
*/
func GetMd5(path string) string { //gd:FileAccess.get_md5
	self := Instance{}
	return string(Advanced(self).GetMd5(String.New(path)).String())
}

/*
Returns an SHA-256 [String] representing the file at the given path or an empty [String] on failure.
*/
func GetSha256(path string) string { //gd:FileAccess.get_sha256
	self := Instance{}
	return string(Advanced(self).GetSha256(String.New(path)).String())
}

/*
Returns the last error that happened when trying to perform operations. Compare with the [code]ERR_FILE_*[/code] constants from [enum Error].
*/
func (self Instance) GetError() error { //gd:FileAccess.get_error
	return error(gd.ToError(Advanced(self).GetError()))
}

/*
Returns the next [Variant] value from the file. If [param allow_objects] is [code]true[/code], decoding objects is allowed.
Internally, this uses the same decoding mechanism as the [method @GlobalScope.bytes_to_var] method.
[b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
*/
func (self Instance) GetVar() any { //gd:FileAccess.get_var
	return any(Advanced(self).GetVar(false).Interface())
}

/*
Returns the next [Variant] value from the file. If [param allow_objects] is [code]true[/code], decoding objects is allowed.
Internally, this uses the same decoding mechanism as the [method @GlobalScope.bytes_to_var] method.
[b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
*/
func (self Expanded) GetVar(allow_objects bool) any { //gd:FileAccess.get_var
	return any(Advanced(self).GetVar(allow_objects).Interface())
}

/*
Stores an integer as 8 bits in the file.
[b]Note:[/b] The [param value] should lie in the interval [code][0, 255][/code]. Any other value will overflow and wrap around.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
To store a signed integer, use [method store_64], or convert it manually (see [method store_16] for an example).
*/
func (self Instance) Store8(value int) bool { //gd:FileAccess.store_8
	return bool(Advanced(self).Store8(int64(value)))
}

/*
Stores an integer as 16 bits in the file.
[b]Note:[/b] The [param value] should lie in the interval [code][0, 2^16 - 1][/code]. Any other value will overflow and wrap around.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
To store a signed integer, use [method store_64] or store a signed integer from the interval [code][-2^15, 2^15 - 1][/code] (i.e. keeping one bit for the signedness) and compute its sign manually when reading. For example:
[codeblocks]
[gdscript]
const MAX_15B = 1 << 15
const MAX_16B = 1 << 16

func unsigned16_to_signed(unsigned):

	return (unsigned + MAX_15B) % MAX_16B - MAX_15B

func _ready():

	var f = FileAccess.open("user://file.dat", FileAccess.WRITE_READ)
	f.store_16(-42) # This wraps around and stores 65494 (2^16 - 42).
	f.store_16(121) # In bounds, will store 121.
	f.seek(0) # Go back to start to read the stored value.
	var read1 = f.get_16() # 65494
	var read2 = f.get_16() # 121
	var converted1 = unsigned16_to_signed(read1) # -42
	var converted2 = unsigned16_to_signed(read2) # 121

[/gdscript]
[csharp]
public override void _Ready()

	{
	    using var f = FileAccess.Open("user://file.dat", FileAccess.ModeFlags.WriteRead);
	    f.Store16(unchecked((ushort)-42)); // This wraps around and stores 65494 (2^16 - 42).
	    f.Store16(121); // In bounds, will store 121.
	    f.Seek(0); // Go back to start to read the stored value.
	    ushort read1 = f.Get16(); // 65494
	    ushort read2 = f.Get16(); // 121
	    short converted1 = (short)read1; // -42
	    short converted2 = (short)read2; // 121
	}

[/csharp]
[/codeblocks]
*/
func (self Instance) Store16(value int) bool { //gd:FileAccess.store_16
	return bool(Advanced(self).Store16(int64(value)))
}

/*
Stores an integer as 32 bits in the file.
[b]Note:[/b] The [param value] should lie in the interval [code][0, 2^32 - 1][/code]. Any other value will overflow and wrap around.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
To store a signed integer, use [method store_64], or convert it manually (see [method store_16] for an example).
*/
func (self Instance) Store32(value int) bool { //gd:FileAccess.store_32
	return bool(Advanced(self).Store32(int64(value)))
}

/*
Stores an integer as 64 bits in the file.
[b]Note:[/b] The [param value] must lie in the interval [code][-2^63, 2^63 - 1][/code] (i.e. be a valid [int] value).
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
func (self Instance) Store64(value int) bool { //gd:FileAccess.store_64
	return bool(Advanced(self).Store64(int64(value)))
}

/*
Stores a half-precision floating-point number as 16 bits in the file.
*/
func (self Instance) StoreHalf(value Float.X) bool { //gd:FileAccess.store_half
	return bool(Advanced(self).StoreHalf(float64(value)))
}

/*
Stores a floating-point number as 32 bits in the file.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
func (self Instance) StoreFloat(value Float.X) bool { //gd:FileAccess.store_float
	return bool(Advanced(self).StoreFloat(float64(value)))
}

/*
Stores a floating-point number as 64 bits in the file.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
func (self Instance) StoreDouble(value Float.X) bool { //gd:FileAccess.store_double
	return bool(Advanced(self).StoreDouble(float64(value)))
}

/*
Stores a floating-point number in the file.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
func (self Instance) StoreReal(value Float.X) bool { //gd:FileAccess.store_real
	return bool(Advanced(self).StoreReal(float64(value)))
}

/*
Stores the given array of bytes in the file.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
func (self Instance) StoreBuffer(buffer []byte) bool { //gd:FileAccess.store_buffer
	return bool(Advanced(self).StoreBuffer(Packed.Bytes(Packed.New(buffer...))))
}

/*
Stores [param line] in the file followed by a newline character ([code]\n[/code]), encoding the text as UTF-8.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
func (self Instance) StoreLine(line string) bool { //gd:FileAccess.store_line
	return bool(Advanced(self).StoreLine(String.New(line)))
}

/*
Store the given [PackedStringArray] in the file as a line formatted in the CSV (Comma-Separated Values) format. You can pass a different delimiter [param delim] to use other than the default [code]","[/code] (comma). This delimiter must be one-character long.
Text will be encoded as UTF-8.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
func (self Instance) StoreCsvLine(values []string) bool { //gd:FileAccess.store_csv_line
	return bool(Advanced(self).StoreCsvLine(Packed.MakeStrings(values...), String.New(",")))
}

/*
Store the given [PackedStringArray] in the file as a line formatted in the CSV (Comma-Separated Values) format. You can pass a different delimiter [param delim] to use other than the default [code]","[/code] (comma). This delimiter must be one-character long.
Text will be encoded as UTF-8.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
func (self Expanded) StoreCsvLine(values []string, delim string) bool { //gd:FileAccess.store_csv_line
	return bool(Advanced(self).StoreCsvLine(Packed.MakeStrings(values...), String.New(delim)))
}

/*
Stores [param string] in the file without a newline character ([code]\n[/code]), encoding the text as UTF-8.
[b]Note:[/b] This method is intended to be used to write text files. The string is stored as a UTF-8 encoded buffer without string length or terminating zero, which means that it can't be loaded back easily. If you want to store a retrievable string in a binary file, consider using [method store_pascal_string] instead. For retrieving strings from a text file, you can use [code]get_buffer(length).get_string_from_utf8()[/code] (if you know the length) or [method get_as_text].
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
func (self Instance) StoreString(s string) bool { //gd:FileAccess.store_string
	return bool(Advanced(self).StoreString(String.New(s)))
}

/*
Stores any Variant value in the file. If [param full_objects] is [code]true[/code], encoding objects is allowed (and can potentially include code).
Internally, this uses the same encoding mechanism as the [method @GlobalScope.var_to_bytes] method.
[b]Note:[/b] Not all properties are included. Only properties that are configured with the [constant PROPERTY_USAGE_STORAGE] flag set will be serialized. You can add a new usage flag to a property by overriding the [method Object._get_property_list] method in your class. You can also check how property usage is configured by calling [method Object._get_property_list]. See [enum PropertyUsageFlags] for the possible usage flags.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
func (self Instance) StoreVar(value any) bool { //gd:FileAccess.store_var
	return bool(Advanced(self).StoreVar(variant.New(value), false))
}

/*
Stores any Variant value in the file. If [param full_objects] is [code]true[/code], encoding objects is allowed (and can potentially include code).
Internally, this uses the same encoding mechanism as the [method @GlobalScope.var_to_bytes] method.
[b]Note:[/b] Not all properties are included. Only properties that are configured with the [constant PROPERTY_USAGE_STORAGE] flag set will be serialized. You can add a new usage flag to a property by overriding the [method Object._get_property_list] method in your class. You can also check how property usage is configured by calling [method Object._get_property_list]. See [enum PropertyUsageFlags] for the possible usage flags.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
func (self Expanded) StoreVar(value any, full_objects bool) bool { //gd:FileAccess.store_var
	return bool(Advanced(self).StoreVar(variant.New(value), full_objects))
}

/*
Stores the given [String] as a line in the file in Pascal format (i.e. also store the length of the string).
Text will be encoded as UTF-8.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
func (self Instance) StorePascalString(s string) bool { //gd:FileAccess.store_pascal_string
	return bool(Advanced(self).StorePascalString(String.New(s)))
}

/*
Returns a [String] saved in Pascal format from the file.
Text is interpreted as being UTF-8 encoded.
*/
func (self Instance) GetPascalString() string { //gd:FileAccess.get_pascal_string
	return string(Advanced(self).GetPascalString().String())
}

/*
Closes the currently opened file and prevents subsequent read/write operations. Use [method flush] to persist the data to disk without closing the file.
[b]Note:[/b] [FileAccess] will automatically close when it's freed, which happens when it goes out of scope or when it gets assigned with [code]null[/code]. In C# the reference must be disposed after we are done using it, this can be done with the [code]using[/code] statement or calling the [code]Dispose[/code] method directly.
*/
func (self Instance) Close() { //gd:FileAccess.close
	Advanced(self).Close()
}

/*
Returns [code]true[/code] if the file exists in the given path.
[b]Note:[/b] Many resources types are imported (e.g. textures or sound files), and their source asset will not be included in the exported game, as only the imported version is used. See [method ResourceLoader.exists] for an alternative approach that takes resource remapping into account.
For a non-static, relative equivalent, use [method DirAccess.file_exists].
*/
func FileExists(path string) bool { //gd:FileAccess.file_exists
	self := Instance{}
	return bool(Advanced(self).FileExists(String.New(path)))
}

/*
Returns the last time the [param file] was modified in Unix timestamp format, or [code]0[/code] on error. This Unix timestamp can be converted to another format using the [Time] singleton.
*/
func GetModifiedTime(file string) int { //gd:FileAccess.get_modified_time
	self := Instance{}
	return int(int(Advanced(self).GetModifiedTime(String.New(file))))
}

/*
Returns file UNIX permissions.
[b]Note:[/b] This method is implemented on iOS, Linux/BSD, and macOS.
*/
func GetUnixPermissions(file string) UnixPermissionFlags { //gd:FileAccess.get_unix_permissions
	self := Instance{}
	return UnixPermissionFlags(Advanced(self).GetUnixPermissions(String.New(file)))
}

/*
Sets file UNIX permissions.
[b]Note:[/b] This method is implemented on iOS, Linux/BSD, and macOS.
*/
func SetUnixPermissions(file string, permissions UnixPermissionFlags) error { //gd:FileAccess.set_unix_permissions
	self := Instance{}
	return error(gd.ToError(Advanced(self).SetUnixPermissions(String.New(file), permissions)))
}

/*
Returns [code]true[/code], if file [code]hidden[/code] attribute is set.
[b]Note:[/b] This method is implemented on iOS, BSD, macOS, and Windows.
*/
func GetHiddenAttribute(file string) bool { //gd:FileAccess.get_hidden_attribute
	self := Instance{}
	return bool(Advanced(self).GetHiddenAttribute(String.New(file)))
}

/*
Sets file [b]hidden[/b] attribute.
[b]Note:[/b] This method is implemented on iOS, BSD, macOS, and Windows.
*/
func SetHiddenAttribute(file string, hidden bool) error { //gd:FileAccess.set_hidden_attribute
	self := Instance{}
	return error(gd.ToError(Advanced(self).SetHiddenAttribute(String.New(file), hidden)))
}

/*
Sets file [b]read only[/b] attribute.
[b]Note:[/b] This method is implemented on iOS, BSD, macOS, and Windows.
*/
func SetReadOnlyAttribute(file string, ro bool) error { //gd:FileAccess.set_read_only_attribute
	self := Instance{}
	return error(gd.ToError(Advanced(self).SetReadOnlyAttribute(String.New(file), ro)))
}

/*
Returns [code]true[/code], if file [code]read only[/code] attribute is set.
[b]Note:[/b] This method is implemented on iOS, BSD, macOS, and Windows.
*/
func GetReadOnlyAttribute(file string) bool { //gd:FileAccess.get_read_only_attribute
	self := Instance{}
	return bool(Advanced(self).GetReadOnlyAttribute(String.New(file)))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.FileAccess

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.FileAccess)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.FileAccess)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.FileAccess)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) BigEndian() bool {
	return bool(class(self).IsBigEndian())
}

func (self Instance) SetBigEndian(value bool) {
	class(self).SetBigEndian(value)
}

/*
Creates a new [FileAccess] object and opens the file for writing or reading, depending on the flags.
Returns [code]null[/code] if opening the file failed. You can use [method get_open_error] to check the error that occurred.
*/
//go:nosplit
func (self class) Open(path String.Readable, flags ModeFlags) [1]gdclass.FileAccess { //gd:FileAccess.open
	var r_ret = gdextension.CallStatic[gdextension.Object](methods.open, gdextension.SizeObject|(gdextension.SizeString<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		path  gdextension.String
		flags ModeFlags
	}{pointers.Get(gd.InternalString(path)), flags}))
	var ret = [1]gdclass.FileAccess{gd.PointerWithOwnershipTransferredToGo[gdclass.FileAccess](r_ret)}
	return ret
}

/*
Creates a new [FileAccess] object and opens an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.
[b]Note:[/b] The provided key must be 32 bytes long.
Returns [code]null[/code] if opening the file failed. You can use [method get_open_error] to check the error that occurred.
*/
//go:nosplit
func (self class) OpenEncrypted(path String.Readable, mode_flags ModeFlags, key Packed.Bytes, iv Packed.Bytes) [1]gdclass.FileAccess { //gd:FileAccess.open_encrypted
	var r_ret = gdextension.CallStatic[gdextension.Object](methods.open_encrypted, gdextension.SizeObject|(gdextension.SizeString<<4)|(gdextension.SizeInt<<8)|(gdextension.SizePackedArray<<12)|(gdextension.SizePackedArray<<16), unsafe.Pointer(&struct {
		path       gdextension.String
		mode_flags ModeFlags
		key        gdextension.PackedArray[byte]
		iv         gdextension.PackedArray[byte]
	}{pointers.Get(gd.InternalString(path)), mode_flags, pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](key))), pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](iv)))}))
	var ret = [1]gdclass.FileAccess{gd.PointerWithOwnershipTransferredToGo[gdclass.FileAccess](r_ret)}
	return ret
}

/*
Creates a new [FileAccess] object and opens an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it.
Returns [code]null[/code] if opening the file failed. You can use [method get_open_error] to check the error that occurred.
*/
//go:nosplit
func (self class) OpenEncryptedWithPass(path String.Readable, mode_flags ModeFlags, pass String.Readable) [1]gdclass.FileAccess { //gd:FileAccess.open_encrypted_with_pass
	var r_ret = gdextension.CallStatic[gdextension.Object](methods.open_encrypted_with_pass, gdextension.SizeObject|(gdextension.SizeString<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeString<<12), unsafe.Pointer(&struct {
		path       gdextension.String
		mode_flags ModeFlags
		pass       gdextension.String
	}{pointers.Get(gd.InternalString(path)), mode_flags, pointers.Get(gd.InternalString(pass))}))
	var ret = [1]gdclass.FileAccess{gd.PointerWithOwnershipTransferredToGo[gdclass.FileAccess](r_ret)}
	return ret
}

/*
Creates a new [FileAccess] object and opens a compressed file for reading or writing.
[b]Note:[/b] [method open_compressed] can only read files that were saved by Godot, not third-party compression formats. See [url=https://github.com/godotengine/godot/issues/28999]GitHub issue #28999[/url] for a workaround.
Returns [code]null[/code] if opening the file failed. You can use [method get_open_error] to check the error that occurred.
*/
//go:nosplit
func (self class) OpenCompressed(path String.Readable, mode_flags ModeFlags, compression_mode CompressionMode) [1]gdclass.FileAccess { //gd:FileAccess.open_compressed
	var r_ret = gdextension.CallStatic[gdextension.Object](methods.open_compressed, gdextension.SizeObject|(gdextension.SizeString<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeInt<<12), unsafe.Pointer(&struct {
		path             gdextension.String
		mode_flags       ModeFlags
		compression_mode CompressionMode
	}{pointers.Get(gd.InternalString(path)), mode_flags, compression_mode}))
	var ret = [1]gdclass.FileAccess{gd.PointerWithOwnershipTransferredToGo[gdclass.FileAccess](r_ret)}
	return ret
}

/*
Returns the result of the last [method open] call in the current thread.
*/
//go:nosplit
func (self class) GetOpenError() Error.Code { //gd:FileAccess.get_open_error
	var r_ret = gdextension.CallStatic[int64](methods.get_open_error, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Creates a temporary file. This file will be freed when the returned [FileAccess] is freed.
If [param prefix] is not empty, it will be prefixed to the file name, separated by a [code]-[/code].
If [param extension] is not empty, it will be appended to the temporary file name.
If [param keep] is [code]true[/code], the file is not deleted when the returned [FileAccess] is freed.
Returns [code]null[/code] if opening the file failed. You can use [method get_open_error] to check the error that occurred.
*/
//go:nosplit
func (self class) CreateTemp(mode_flags int64, prefix String.Readable, extension String.Readable, keep bool) [1]gdclass.FileAccess { //gd:FileAccess.create_temp
	var r_ret = gdextension.CallStatic[gdextension.Object](methods.create_temp, gdextension.SizeObject|(gdextension.SizeInt<<4)|(gdextension.SizeString<<8)|(gdextension.SizeString<<12)|(gdextension.SizeBool<<16), unsafe.Pointer(&struct {
		mode_flags int64
		prefix     gdextension.String
		extension  gdextension.String
		keep       bool
	}{mode_flags, pointers.Get(gd.InternalString(prefix)), pointers.Get(gd.InternalString(extension)), keep}))
	var ret = [1]gdclass.FileAccess{gd.PointerWithOwnershipTransferredToGo[gdclass.FileAccess](r_ret)}
	return ret
}

/*
Returns the whole [param path] file contents as a [PackedByteArray] without any decoding.
Returns an empty [PackedByteArray] if an error occurred while opening the file. You can use [method get_open_error] to check the error that occurred.
*/
//go:nosplit
func (self class) GetFileAsBytes(path String.Readable) Packed.Bytes { //gd:FileAccess.get_file_as_bytes
	var r_ret = gdextension.CallStatic[gd.PackedPointers](methods.get_file_as_bytes, gdextension.SizePackedArray|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ path gdextension.String }{pointers.Get(gd.InternalString(path))}))
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret))))
	return ret
}

/*
Returns the whole [param path] file contents as a [String]. Text is interpreted as being UTF-8 encoded.
Returns an empty [String] if an error occurred while opening the file. You can use [method get_open_error] to check the error that occurred.
*/
//go:nosplit
func (self class) GetFileAsString(path String.Readable) String.Readable { //gd:FileAccess.get_file_as_string
	var r_ret = gdextension.CallStatic[gdextension.String](methods.get_file_as_string, gdextension.SizeString|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ path gdextension.String }{pointers.Get(gd.InternalString(path))}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Resizes the file to a specified length. The file must be open in a mode that permits writing. If the file is extended, NUL characters are appended. If the file is truncated, all data from the end file to the original length of the file is lost.
*/
//go:nosplit
func (self class) Resize(length int64) Error.Code { //gd:FileAccess.resize
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.resize, gdextension.SizeInt|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ length int64 }{length}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Writes the file's buffer to disk. Flushing is automatically performed when the file is closed. This means you don't need to call [method flush] manually before closing a file. Still, calling [method flush] can be used to ensure the data is safe even if the project crashes instead of being closed gracefully.
[b]Note:[/b] Only call [method flush] when you actually need it. Otherwise, it will decrease performance due to constant disk writes.
*/
//go:nosplit
func (self class) Flush() { //gd:FileAccess.flush
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.flush, 0, unsafe.Pointer(&struct{}{}))
}

/*
Returns the path as a [String] for the current open file.
*/
//go:nosplit
func (self class) GetPath() String.Readable { //gd:FileAccess.get_path
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_path, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns the absolute path as a [String] for the current open file.
*/
//go:nosplit
func (self class) GetPathAbsolute() String.Readable { //gd:FileAccess.get_path_absolute
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_path_absolute, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns [code]true[/code] if the file is currently opened.
*/
//go:nosplit
func (self class) IsOpen() bool { //gd:FileAccess.is_open
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_open, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Changes the file reading/writing cursor to the specified position (in bytes from the beginning of the file).
*/
//go:nosplit
func (self class) SeekTo(position int64) { //gd:FileAccess.seek
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.seek, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ position int64 }{position}))
}

/*
Changes the file reading/writing cursor to the specified position (in bytes from the end of the file).
[b]Note:[/b] This is an offset, so you should use negative numbers or the cursor will be at the end of the file.
*/
//go:nosplit
func (self class) SeekEnd(position int64) { //gd:FileAccess.seek_end
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.seek_end, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ position int64 }{position}))
}

/*
Returns the file cursor's position.
*/
//go:nosplit
func (self class) GetPosition() int64 { //gd:FileAccess.get_position
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_position, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the size of the file in bytes. For a pipe, returns the number of bytes available for reading from the pipe.
*/
//go:nosplit
func (self class) GetLength() int64 { //gd:FileAccess.get_length
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_length, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if the file cursor has already read past the end of the file.
[b]Note:[/b] [code]eof_reached() == false[/code] cannot be used to check whether there is more data available. To loop while there is more data available, use:
[codeblocks]
[gdscript]
while file.get_position() < file.get_length():
    # Read data
[/gdscript]
[csharp]
while (file.GetPosition() < file.GetLength())
{
    // Read data
}
[/csharp]
[/codeblocks]
*/
//go:nosplit
func (self class) EofReached() bool { //gd:FileAccess.eof_reached
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.eof_reached, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the next 8 bits from the file as an integer. See [method store_8] for details on what values can be stored and retrieved this way.
*/
//go:nosplit
func (self class) Get8() int64 { //gd:FileAccess.get_8
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_8, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the next 16 bits from the file as an integer. See [method store_16] for details on what values can be stored and retrieved this way.
*/
//go:nosplit
func (self class) Get16() int64 { //gd:FileAccess.get_16
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_16, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the next 32 bits from the file as an integer. See [method store_32] for details on what values can be stored and retrieved this way.
*/
//go:nosplit
func (self class) Get32() int64 { //gd:FileAccess.get_32
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_32, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the next 64 bits from the file as an integer. See [method store_64] for details on what values can be stored and retrieved this way.
*/
//go:nosplit
func (self class) Get64() int64 { //gd:FileAccess.get_64
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_64, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the next 16 bits from the file as a half-precision floating-point number.
*/
//go:nosplit
func (self class) GetHalf() float64 { //gd:FileAccess.get_half
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_half, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the next 32 bits from the file as a floating-point number.
*/
//go:nosplit
func (self class) GetFloat() float64 { //gd:FileAccess.get_float
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_float, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the next 64 bits from the file as a floating-point number.
*/
//go:nosplit
func (self class) GetDouble() float64 { //gd:FileAccess.get_double
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_double, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the next bits from the file as a floating-point number.
*/
//go:nosplit
func (self class) GetReal() float64 { //gd:FileAccess.get_real
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_real, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns next [param length] bytes of the file as a [PackedByteArray].
*/
//go:nosplit
func (self class) GetBuffer(length int64) Packed.Bytes { //gd:FileAccess.get_buffer
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_buffer, gdextension.SizePackedArray|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ length int64 }{length}))
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret))))
	return ret
}

/*
Returns the next line of the file as a [String]. The returned string doesn't include newline ([code]\n[/code]) or carriage return ([code]\r[/code]) characters, but does include any other leading or trailing whitespace.
Text is interpreted as being UTF-8 encoded.
*/
//go:nosplit
func (self class) GetLine() String.Readable { //gd:FileAccess.get_line
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_line, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns the next value of the file in CSV (Comma-Separated Values) format. You can pass a different delimiter [param delim] to use other than the default [code]","[/code] (comma). This delimiter must be one-character long, and cannot be a double quotation mark.
Text is interpreted as being UTF-8 encoded. Text values must be enclosed in double quotes if they include the delimiter character. Double quotes within a text value can be escaped by doubling their occurrence.
For example, the following CSV lines are valid and will be properly parsed as two strings each:
[codeblock lang=text]
Alice,"Hello, Bob!"
Bob,Alice! What a surprise!
Alice,"I thought you'd reply with ""Hello, world""."
[/codeblock]
Note how the second line can omit the enclosing quotes as it does not include the delimiter. However it [i]could[/i] very well use quotes, it was only written without for demonstration purposes. The third line must use [code]""[/code] for each quotation mark that needs to be interpreted as such instead of the end of a text value.
*/
//go:nosplit
func (self class) GetCsvLine(delim String.Readable) Packed.Strings { //gd:FileAccess.get_csv_line
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_csv_line, gdextension.SizePackedArray|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ delim gdextension.String }{pointers.Get(gd.InternalString(delim))}))
	var ret = Packed.Strings(Array.Through(gd.PackedStringArrayProxy{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

/*
Returns the whole file as a [String]. Text is interpreted as being UTF-8 encoded.
If [param skip_cr] is [code]true[/code], carriage return characters ([code]\r[/code], CR) will be ignored when parsing the UTF-8, so that only line feed characters ([code]\n[/code], LF) represent a new line (Unix convention).
*/
//go:nosplit
func (self class) GetAsText(skip_cr bool) String.Readable { //gd:FileAccess.get_as_text
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_as_text, gdextension.SizeString|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ skip_cr bool }{skip_cr}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns an MD5 String representing the file at the given path or an empty [String] on failure.
*/
//go:nosplit
func (self class) GetMd5(path String.Readable) String.Readable { //gd:FileAccess.get_md5
	var r_ret = gdextension.CallStatic[gdextension.String](methods.get_md5, gdextension.SizeString|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ path gdextension.String }{pointers.Get(gd.InternalString(path))}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns an SHA-256 [String] representing the file at the given path or an empty [String] on failure.
*/
//go:nosplit
func (self class) GetSha256(path String.Readable) String.Readable { //gd:FileAccess.get_sha256
	var r_ret = gdextension.CallStatic[gdextension.String](methods.get_sha256, gdextension.SizeString|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ path gdextension.String }{pointers.Get(gd.InternalString(path))}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) IsBigEndian() bool { //gd:FileAccess.is_big_endian
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_big_endian, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBigEndian(big_endian bool) { //gd:FileAccess.set_big_endian
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_big_endian, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ big_endian bool }{big_endian}))
}

/*
Returns the last error that happened when trying to perform operations. Compare with the [code]ERR_FILE_*[/code] constants from [enum Error].
*/
//go:nosplit
func (self class) GetError() Error.Code { //gd:FileAccess.get_error
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_error, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Returns the next [Variant] value from the file. If [param allow_objects] is [code]true[/code], decoding objects is allowed.
Internally, this uses the same decoding mechanism as the [method @GlobalScope.bytes_to_var] method.
[b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
*/
//go:nosplit
func (self class) GetVar(allow_objects bool) variant.Any { //gd:FileAccess.get_var
	var r_ret = gdextension.Call[gdextension.Variant](gd.ObjectChecked(self.AsObject()), methods.get_var, gdextension.SizeVariant|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ allow_objects bool }{allow_objects}))
	var ret = variant.Implementation(gd.VariantProxy{}, pointers.Pack(pointers.New[gd.Variant](r_ret)))
	return ret
}

/*
Stores an integer as 8 bits in the file.
[b]Note:[/b] The [param value] should lie in the interval [code][0, 255][/code]. Any other value will overflow and wrap around.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
To store a signed integer, use [method store_64], or convert it manually (see [method store_16] for an example).
*/
//go:nosplit
func (self class) Store8(value int64) bool { //gd:FileAccess.store_8
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.store_8, gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ value int64 }{value}))
	var ret = r_ret
	return ret
}

/*
Stores an integer as 16 bits in the file.
[b]Note:[/b] The [param value] should lie in the interval [code][0, 2^16 - 1][/code]. Any other value will overflow and wrap around.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
To store a signed integer, use [method store_64] or store a signed integer from the interval [code][-2^15, 2^15 - 1][/code] (i.e. keeping one bit for the signedness) and compute its sign manually when reading. For example:
[codeblocks]
[gdscript]
const MAX_15B = 1 << 15
const MAX_16B = 1 << 16

func unsigned16_to_signed(unsigned):
    return (unsigned + MAX_15B) % MAX_16B - MAX_15B

func _ready():
    var f = FileAccess.open("user://file.dat", FileAccess.WRITE_READ)
    f.store_16(-42) # This wraps around and stores 65494 (2^16 - 42).
    f.store_16(121) # In bounds, will store 121.
    f.seek(0) # Go back to start to read the stored value.
    var read1 = f.get_16() # 65494
    var read2 = f.get_16() # 121
    var converted1 = unsigned16_to_signed(read1) # -42
    var converted2 = unsigned16_to_signed(read2) # 121
[/gdscript]
[csharp]
public override void _Ready()
{
    using var f = FileAccess.Open("user://file.dat", FileAccess.ModeFlags.WriteRead);
    f.Store16(unchecked((ushort)-42)); // This wraps around and stores 65494 (2^16 - 42).
    f.Store16(121); // In bounds, will store 121.
    f.Seek(0); // Go back to start to read the stored value.
    ushort read1 = f.Get16(); // 65494
    ushort read2 = f.Get16(); // 121
    short converted1 = (short)read1; // -42
    short converted2 = (short)read2; // 121
}
[/csharp]
[/codeblocks]
*/
//go:nosplit
func (self class) Store16(value int64) bool { //gd:FileAccess.store_16
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.store_16, gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ value int64 }{value}))
	var ret = r_ret
	return ret
}

/*
Stores an integer as 32 bits in the file.
[b]Note:[/b] The [param value] should lie in the interval [code][0, 2^32 - 1][/code]. Any other value will overflow and wrap around.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
To store a signed integer, use [method store_64], or convert it manually (see [method store_16] for an example).
*/
//go:nosplit
func (self class) Store32(value int64) bool { //gd:FileAccess.store_32
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.store_32, gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ value int64 }{value}))
	var ret = r_ret
	return ret
}

/*
Stores an integer as 64 bits in the file.
[b]Note:[/b] The [param value] must lie in the interval [code][-2^63, 2^63 - 1][/code] (i.e. be a valid [int] value).
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
//go:nosplit
func (self class) Store64(value int64) bool { //gd:FileAccess.store_64
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.store_64, gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ value int64 }{value}))
	var ret = r_ret
	return ret
}

/*
Stores a half-precision floating-point number as 16 bits in the file.
*/
//go:nosplit
func (self class) StoreHalf(value float64) bool { //gd:FileAccess.store_half
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.store_half, gdextension.SizeBool|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ value float64 }{value}))
	var ret = r_ret
	return ret
}

/*
Stores a floating-point number as 32 bits in the file.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
//go:nosplit
func (self class) StoreFloat(value float64) bool { //gd:FileAccess.store_float
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.store_float, gdextension.SizeBool|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ value float64 }{value}))
	var ret = r_ret
	return ret
}

/*
Stores a floating-point number as 64 bits in the file.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
//go:nosplit
func (self class) StoreDouble(value float64) bool { //gd:FileAccess.store_double
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.store_double, gdextension.SizeBool|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ value float64 }{value}))
	var ret = r_ret
	return ret
}

/*
Stores a floating-point number in the file.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
//go:nosplit
func (self class) StoreReal(value float64) bool { //gd:FileAccess.store_real
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.store_real, gdextension.SizeBool|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ value float64 }{value}))
	var ret = r_ret
	return ret
}

/*
Stores the given array of bytes in the file.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
//go:nosplit
func (self class) StoreBuffer(buffer Packed.Bytes) bool { //gd:FileAccess.store_buffer
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.store_buffer, gdextension.SizeBool|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ buffer gdextension.PackedArray[byte] }{pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](buffer)))}))
	var ret = r_ret
	return ret
}

/*
Stores [param line] in the file followed by a newline character ([code]\n[/code]), encoding the text as UTF-8.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
//go:nosplit
func (self class) StoreLine(line String.Readable) bool { //gd:FileAccess.store_line
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.store_line, gdextension.SizeBool|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ line gdextension.String }{pointers.Get(gd.InternalString(line))}))
	var ret = r_ret
	return ret
}

/*
Store the given [PackedStringArray] in the file as a line formatted in the CSV (Comma-Separated Values) format. You can pass a different delimiter [param delim] to use other than the default [code]","[/code] (comma). This delimiter must be one-character long.
Text will be encoded as UTF-8.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
//go:nosplit
func (self class) StoreCsvLine(values Packed.Strings, delim String.Readable) bool { //gd:FileAccess.store_csv_line
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.store_csv_line, gdextension.SizeBool|(gdextension.SizePackedArray<<4)|(gdextension.SizeString<<8), unsafe.Pointer(&struct {
		values gdextension.PackedArray[gdextension.String]
		delim  gdextension.String
	}{pointers.Get(gd.InternalPackedStrings(values)), pointers.Get(gd.InternalString(delim))}))
	var ret = r_ret
	return ret
}

/*
Stores [param string] in the file without a newline character ([code]\n[/code]), encoding the text as UTF-8.
[b]Note:[/b] This method is intended to be used to write text files. The string is stored as a UTF-8 encoded buffer without string length or terminating zero, which means that it can't be loaded back easily. If you want to store a retrievable string in a binary file, consider using [method store_pascal_string] instead. For retrieving strings from a text file, you can use [code]get_buffer(length).get_string_from_utf8()[/code] (if you know the length) or [method get_as_text].
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
//go:nosplit
func (self class) StoreString(s String.Readable) bool { //gd:FileAccess.store_string
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.store_string, gdextension.SizeBool|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ s gdextension.String }{pointers.Get(gd.InternalString(s))}))
	var ret = r_ret
	return ret
}

/*
Stores any Variant value in the file. If [param full_objects] is [code]true[/code], encoding objects is allowed (and can potentially include code).
Internally, this uses the same encoding mechanism as the [method @GlobalScope.var_to_bytes] method.
[b]Note:[/b] Not all properties are included. Only properties that are configured with the [constant PROPERTY_USAGE_STORAGE] flag set will be serialized. You can add a new usage flag to a property by overriding the [method Object._get_property_list] method in your class. You can also check how property usage is configured by calling [method Object._get_property_list]. See [enum PropertyUsageFlags] for the possible usage flags.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
//go:nosplit
func (self class) StoreVar(value variant.Any, full_objects bool) bool { //gd:FileAccess.store_var
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.store_var, gdextension.SizeBool|(gdextension.SizeVariant<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		value        gdextension.Variant
		full_objects bool
	}{gdextension.Variant(pointers.Get(gd.InternalVariant(value))), full_objects}))
	var ret = r_ret
	return ret
}

/*
Stores the given [String] as a line in the file in Pascal format (i.e. also store the length of the string).
Text will be encoded as UTF-8.
[b]Note:[/b] If an error occurs, the resulting value of the file position indicator is indeterminate.
*/
//go:nosplit
func (self class) StorePascalString(s String.Readable) bool { //gd:FileAccess.store_pascal_string
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.store_pascal_string, gdextension.SizeBool|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ s gdextension.String }{pointers.Get(gd.InternalString(s))}))
	var ret = r_ret
	return ret
}

/*
Returns a [String] saved in Pascal format from the file.
Text is interpreted as being UTF-8 encoded.
*/
//go:nosplit
func (self class) GetPascalString() String.Readable { //gd:FileAccess.get_pascal_string
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_pascal_string, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Closes the currently opened file and prevents subsequent read/write operations. Use [method flush] to persist the data to disk without closing the file.
[b]Note:[/b] [FileAccess] will automatically close when it's freed, which happens when it goes out of scope or when it gets assigned with [code]null[/code]. In C# the reference must be disposed after we are done using it, this can be done with the [code]using[/code] statement or calling the [code]Dispose[/code] method directly.
*/
//go:nosplit
func (self class) Close() { //gd:FileAccess.close
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.close, 0, unsafe.Pointer(&struct{}{}))
}

/*
Returns [code]true[/code] if the file exists in the given path.
[b]Note:[/b] Many resources types are imported (e.g. textures or sound files), and their source asset will not be included in the exported game, as only the imported version is used. See [method ResourceLoader.exists] for an alternative approach that takes resource remapping into account.
For a non-static, relative equivalent, use [method DirAccess.file_exists].
*/
//go:nosplit
func (self class) FileExists(path String.Readable) bool { //gd:FileAccess.file_exists
	var r_ret = gdextension.CallStatic[bool](methods.file_exists, gdextension.SizeBool|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ path gdextension.String }{pointers.Get(gd.InternalString(path))}))
	var ret = r_ret
	return ret
}

/*
Returns the last time the [param file] was modified in Unix timestamp format, or [code]0[/code] on error. This Unix timestamp can be converted to another format using the [Time] singleton.
*/
//go:nosplit
func (self class) GetModifiedTime(file String.Readable) int64 { //gd:FileAccess.get_modified_time
	var r_ret = gdextension.CallStatic[int64](methods.get_modified_time, gdextension.SizeInt|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ file gdextension.String }{pointers.Get(gd.InternalString(file))}))
	var ret = r_ret
	return ret
}

/*
Returns file UNIX permissions.
[b]Note:[/b] This method is implemented on iOS, Linux/BSD, and macOS.
*/
//go:nosplit
func (self class) GetUnixPermissions(file String.Readable) UnixPermissionFlags { //gd:FileAccess.get_unix_permissions
	var r_ret = gdextension.CallStatic[UnixPermissionFlags](methods.get_unix_permissions, gdextension.SizeInt|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ file gdextension.String }{pointers.Get(gd.InternalString(file))}))
	var ret = r_ret
	return ret
}

/*
Sets file UNIX permissions.
[b]Note:[/b] This method is implemented on iOS, Linux/BSD, and macOS.
*/
//go:nosplit
func (self class) SetUnixPermissions(file String.Readable, permissions UnixPermissionFlags) Error.Code { //gd:FileAccess.set_unix_permissions
	var r_ret = gdextension.CallStatic[int64](methods.set_unix_permissions, gdextension.SizeInt|(gdextension.SizeString<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		file        gdextension.String
		permissions UnixPermissionFlags
	}{pointers.Get(gd.InternalString(file)), permissions}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Returns [code]true[/code], if file [code]hidden[/code] attribute is set.
[b]Note:[/b] This method is implemented on iOS, BSD, macOS, and Windows.
*/
//go:nosplit
func (self class) GetHiddenAttribute(file String.Readable) bool { //gd:FileAccess.get_hidden_attribute
	var r_ret = gdextension.CallStatic[bool](methods.get_hidden_attribute, gdextension.SizeBool|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ file gdextension.String }{pointers.Get(gd.InternalString(file))}))
	var ret = r_ret
	return ret
}

/*
Sets file [b]hidden[/b] attribute.
[b]Note:[/b] This method is implemented on iOS, BSD, macOS, and Windows.
*/
//go:nosplit
func (self class) SetHiddenAttribute(file String.Readable, hidden bool) Error.Code { //gd:FileAccess.set_hidden_attribute
	var r_ret = gdextension.CallStatic[int64](methods.set_hidden_attribute, gdextension.SizeInt|(gdextension.SizeString<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		file   gdextension.String
		hidden bool
	}{pointers.Get(gd.InternalString(file)), hidden}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Sets file [b]read only[/b] attribute.
[b]Note:[/b] This method is implemented on iOS, BSD, macOS, and Windows.
*/
//go:nosplit
func (self class) SetReadOnlyAttribute(file String.Readable, ro bool) Error.Code { //gd:FileAccess.set_read_only_attribute
	var r_ret = gdextension.CallStatic[int64](methods.set_read_only_attribute, gdextension.SizeInt|(gdextension.SizeString<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		file gdextension.String
		ro   bool
	}{pointers.Get(gd.InternalString(file)), ro}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Returns [code]true[/code], if file [code]read only[/code] attribute is set.
[b]Note:[/b] This method is implemented on iOS, BSD, macOS, and Windows.
*/
//go:nosplit
func (self class) GetReadOnlyAttribute(file String.Readable) bool { //gd:FileAccess.get_read_only_attribute
	var r_ret = gdextension.CallStatic[bool](methods.get_read_only_attribute, gdextension.SizeBool|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ file gdextension.String }{pointers.Get(gd.InternalString(file))}))
	var ret = r_ret
	return ret
}
func (self class) AsFileAccess() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsFileAccess() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsFileAccess() Instance { return self.Super().AsFileAccess() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("FileAccess", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type ModeFlags int //gd:FileAccess.ModeFlags

const (
	/*Opens the file for read operations. The cursor is positioned at the beginning of the file.*/
	Read ModeFlags = 1
	/*Opens the file for write operations. The file is created if it does not exist, and truncated if it does.
	  [b]Note:[/b] When creating a file it must be in an already existing directory. To recursively create directories for a file path, see [method DirAccess.make_dir_recursive].*/
	Write ModeFlags = 2
	/*Opens the file for read and write operations. Does not truncate the file. The cursor is positioned at the beginning of the file.*/
	ReadWrite ModeFlags = 3
	/*Opens the file for read and write operations. The file is created if it does not exist, and truncated if it does. The cursor is positioned at the beginning of the file.
	  [b]Note:[/b] When creating a file it must be in an already existing directory. To recursively create directories for a file path, see [method DirAccess.make_dir_recursive].*/
	WriteRead ModeFlags = 7
)

type CompressionMode int //gd:FileAccess.CompressionMode

const (
	/*Uses the [url=https://fastlz.org/]FastLZ[/url] compression method.*/
	CompressionFastlz CompressionMode = 0
	/*Uses the [url=https://en.wikipedia.org/wiki/DEFLATE]DEFLATE[/url] compression method.*/
	CompressionDeflate CompressionMode = 1
	/*Uses the [url=https://facebook.github.io/zstd/]Zstandard[/url] compression method.*/
	CompressionZstd CompressionMode = 2
	/*Uses the [url=https://www.gzip.org/]gzip[/url] compression method.*/
	CompressionGzip CompressionMode = 3
	/*Uses the [url=https://github.com/google/brotli]brotli[/url] compression method (only decompression is supported).*/
	CompressionBrotli CompressionMode = 4
)

type UnixPermissionFlags int //gd:FileAccess.UnixPermissionFlags

const (
	/*Read for owner bit.*/
	UnixReadOwner UnixPermissionFlags = 256
	/*Write for owner bit.*/
	UnixWriteOwner UnixPermissionFlags = 128
	/*Execute for owner bit.*/
	UnixExecuteOwner UnixPermissionFlags = 64
	/*Read for group bit.*/
	UnixReadGroup UnixPermissionFlags = 32
	/*Write for group bit.*/
	UnixWriteGroup UnixPermissionFlags = 16
	/*Execute for group bit.*/
	UnixExecuteGroup UnixPermissionFlags = 8
	/*Read for other bit.*/
	UnixReadOther UnixPermissionFlags = 4
	/*Write for other bit.*/
	UnixWriteOther UnixPermissionFlags = 2
	/*Execute for other bit.*/
	UnixExecuteOther UnixPermissionFlags = 1
	/*Set user id on execution bit.*/
	UnixSetUserId UnixPermissionFlags = 2048
	/*Set group id on execution bit.*/
	UnixSetGroupId UnixPermissionFlags = 1024
	/*Restricted deletion (sticky) bit.*/
	UnixRestrictedDelete UnixPermissionFlags = 512
)
