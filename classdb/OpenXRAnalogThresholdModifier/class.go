// Code generated by the generate package DO NOT EDIT

// Package OpenXRAnalogThresholdModifier provides methods for working with OpenXRAnalogThresholdModifier object instances.
package OpenXRAnalogThresholdModifier

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/OpenXRActionBindingModifier"
import "graphics.gd/classdb/OpenXRBindingModifier"
import "graphics.gd/classdb/OpenXRHapticBase"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
The analog threshold binding modifier can modify a float input to a boolean input with specified thresholds.
See [url=https://registry.khronos.org/OpenXR/specs/1.1/html/xrspec.html#XR_VALVE_analog_threshold]XR_VALVE_analog_threshold[/url] for in-depth details.
*/
type Instance [1]gdclass.OpenXRAnalogThresholdModifier

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsOpenXRAnalogThresholdModifier() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.OpenXRAnalogThresholdModifier

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(pointers.Get(gd.NewStringName("OpenXRAnalogThresholdModifier"))))})}
	casted := Instance{*(*gdclass.OpenXRAnalogThresholdModifier)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) OnThreshold() Float.X {
	return Float.X(Float.X(class(self).GetOnThreshold()))
}

func (self Instance) SetOnThreshold(value Float.X) {
	class(self).SetOnThreshold(float64(value))
}

func (self Instance) OffThreshold() Float.X {
	return Float.X(Float.X(class(self).GetOffThreshold()))
}

func (self Instance) SetOffThreshold(value Float.X) {
	class(self).SetOffThreshold(float64(value))
}

func (self Instance) OnHaptic() OpenXRHapticBase.Instance {
	return OpenXRHapticBase.Instance(class(self).GetOnHaptic())
}

func (self Instance) SetOnHaptic(value OpenXRHapticBase.Instance) {
	class(self).SetOnHaptic(value)
}

func (self Instance) OffHaptic() OpenXRHapticBase.Instance {
	return OpenXRHapticBase.Instance(class(self).GetOffHaptic())
}

func (self Instance) SetOffHaptic(value OpenXRHapticBase.Instance) {
	class(self).SetOffHaptic(value)
}

//go:nosplit
func (self class) SetOnThreshold(on_threshold float64) { //gd:OpenXRAnalogThresholdModifier.set_on_threshold
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.OpenXRAnalogThresholdModifier.Bind_set_on_threshold), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ on_threshold float64 }{on_threshold}))
}

//go:nosplit
func (self class) GetOnThreshold() float64 { //gd:OpenXRAnalogThresholdModifier.get_on_threshold
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.OpenXRAnalogThresholdModifier.Bind_get_on_threshold), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetOffThreshold(off_threshold float64) { //gd:OpenXRAnalogThresholdModifier.set_off_threshold
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.OpenXRAnalogThresholdModifier.Bind_set_off_threshold), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ off_threshold float64 }{off_threshold}))
}

//go:nosplit
func (self class) GetOffThreshold() float64 { //gd:OpenXRAnalogThresholdModifier.get_off_threshold
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.OpenXRAnalogThresholdModifier.Bind_get_off_threshold), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetOnHaptic(haptic [1]gdclass.OpenXRHapticBase) { //gd:OpenXRAnalogThresholdModifier.set_on_haptic
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.OpenXRAnalogThresholdModifier.Bind_set_on_haptic), 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ haptic gdextension.Object }{gdextension.Object(gd.ObjectChecked(haptic[0].AsObject()))}))
}

//go:nosplit
func (self class) GetOnHaptic() [1]gdclass.OpenXRHapticBase { //gd:OpenXRAnalogThresholdModifier.get_on_haptic
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.OpenXRAnalogThresholdModifier.Bind_get_on_haptic), gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.OpenXRHapticBase{gd.PointerWithOwnershipTransferredToGo[gdclass.OpenXRHapticBase](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetOffHaptic(haptic [1]gdclass.OpenXRHapticBase) { //gd:OpenXRAnalogThresholdModifier.set_off_haptic
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.OpenXRAnalogThresholdModifier.Bind_set_off_haptic), 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ haptic gdextension.Object }{gdextension.Object(gd.ObjectChecked(haptic[0].AsObject()))}))
}

//go:nosplit
func (self class) GetOffHaptic() [1]gdclass.OpenXRHapticBase { //gd:OpenXRAnalogThresholdModifier.get_off_haptic
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.OpenXRAnalogThresholdModifier.Bind_get_off_haptic), gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.OpenXRHapticBase{gd.PointerWithOwnershipTransferredToGo[gdclass.OpenXRHapticBase](r_ret)}
	return ret
}
func (self class) AsOpenXRAnalogThresholdModifier() Advanced {
	return *((*Advanced)(unsafe.Pointer(&self)))
}
func (self Instance) AsOpenXRAnalogThresholdModifier() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsOpenXRAnalogThresholdModifier() Instance {
	return self.Super().AsOpenXRAnalogThresholdModifier()
}
func (self class) AsOpenXRActionBindingModifier() OpenXRActionBindingModifier.Advanced {
	return *((*OpenXRActionBindingModifier.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsOpenXRActionBindingModifier() OpenXRActionBindingModifier.Instance {
	return self.Super().AsOpenXRActionBindingModifier()
}
func (self Instance) AsOpenXRActionBindingModifier() OpenXRActionBindingModifier.Instance {
	return *((*OpenXRActionBindingModifier.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsOpenXRBindingModifier() OpenXRBindingModifier.Advanced {
	return *((*OpenXRBindingModifier.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsOpenXRBindingModifier() OpenXRBindingModifier.Instance {
	return self.Super().AsOpenXRBindingModifier()
}
func (self Instance) AsOpenXRBindingModifier() OpenXRBindingModifier.Instance {
	return *((*OpenXRBindingModifier.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(OpenXRActionBindingModifier.Advanced(self.AsOpenXRActionBindingModifier()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(OpenXRActionBindingModifier.Instance(self.AsOpenXRActionBindingModifier()), name)
	}
}
func init() {
	gdclass.Register("OpenXRAnalogThresholdModifier", func(ptr gd.Object) any {
		return [1]gdclass.OpenXRAnalogThresholdModifier{*(*gdclass.OpenXRAnalogThresholdModifier)(unsafe.Pointer(&ptr))}
	})
}
