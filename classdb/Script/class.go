// Code generated by the generate package DO NOT EDIT

// Package Script provides methods for working with Script object instances.
package Script

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A class stored as a resource. A script extends the functionality of all objects that instantiate it.
This is the base class for all scripts and should not be used directly. Trying to create a new script with this class will result in an error.
The [code]new[/code] method of a script subclass creates a new instance. [method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes.
*/
type Instance [1]gdclass.Script

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.Script

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsScript() Instance
}

/*
Returns [code]true[/code] if the script can be instantiated.
*/
func (self Instance) CanInstantiate() bool { //gd:Script.can_instantiate
	return bool(Advanced(self).CanInstantiate())
}

/*
Returns [code]true[/code] if [param base_object] is an instance of this script.
*/
func (self Instance) InstanceHas(base_object Object.Instance) bool { //gd:Script.instance_has
	return bool(Advanced(self).InstanceHas(base_object))
}

/*
Returns [code]true[/code] if the script contains non-empty source code.
[b]Note:[/b] If a script does not have source code, this does not mean that it is invalid or unusable. For example, a [GDScript] that was exported with binary tokenization has no source code, but still behaves as expected and could be instantiated. This can be checked with [method can_instantiate].
*/
func (self Instance) HasSourceCode() bool { //gd:Script.has_source_code
	return bool(Advanced(self).HasSourceCode())
}

/*
Reloads the script's class implementation. Returns an error code.
*/
func (self Instance) Reload() error { //gd:Script.reload
	return error(gd.ToError(Advanced(self).Reload(false)))
}

/*
Reloads the script's class implementation. Returns an error code.
*/
func (self Expanded) Reload(keep_state bool) error { //gd:Script.reload
	return error(gd.ToError(Advanced(self).Reload(keep_state)))
}

/*
Returns the script directly inherited by this script.
*/
func (self Instance) GetBaseScript() Instance { //gd:Script.get_base_script
	return Instance(Advanced(self).GetBaseScript())
}

/*
Returns the script's base type.
*/
func (self Instance) GetInstanceBaseType() string { //gd:Script.get_instance_base_type
	return string(Advanced(self).GetInstanceBaseType().String())
}

/*
Returns the class name associated with the script, if there is one. Returns an empty string otherwise.
To give the script a global name, you can use the [code]class_name[/code] keyword in GDScript and the [code][GlobalClass][/code] attribute in C#.
[codeblocks]
[gdscript]
class_name MyNode
extends Node
[/gdscript]
[csharp]
using Godot;

[GlobalClass]
public partial class MyNode : Node
{
}
[/csharp]
[/codeblocks]
*/
func (self Instance) GetGlobalName() string { //gd:Script.get_global_name
	return string(Advanced(self).GetGlobalName().String())
}

/*
Returns [code]true[/code] if the script, or a base class, defines a signal with the given name.
*/
func (self Instance) HasScriptSignal(signal_name string) bool { //gd:Script.has_script_signal
	return bool(Advanced(self).HasScriptSignal(String.Name(String.New(signal_name))))
}

/*
Returns the list of properties in this [Script].
*/
func (self Instance) GetScriptPropertyList() []PropertyInfo { //gd:Script.get_script_property_list
	return []PropertyInfo(gd.ArrayAs[[]PropertyInfo](gd.InternalArray(Advanced(self).GetScriptPropertyList())))
}

/*
Returns the list of methods in this [Script].
*/
func (self Instance) GetScriptMethodList() []PropertyInfo { //gd:Script.get_script_method_list
	return []PropertyInfo(gd.ArrayAs[[]PropertyInfo](gd.InternalArray(Advanced(self).GetScriptMethodList())))
}

/*
Returns the list of user signals defined in this [Script].
*/
func (self Instance) GetScriptSignalList() []SignalInfo { //gd:Script.get_script_signal_list
	return []SignalInfo(gd.ArrayAs[[]SignalInfo](gd.InternalArray(Advanced(self).GetScriptSignalList())))
}

/*
Returns a dictionary containing constant names and their values.
*/
func (self Instance) GetScriptConstantMap() map[string]interface{} { //gd:Script.get_script_constant_map
	return map[string]interface{}(gd.DictionaryAs[map[string]interface{}](Advanced(self).GetScriptConstantMap()))
}

/*
Returns the default value of the specified property.
*/
func (self Instance) GetPropertyDefaultValue(property string) any { //gd:Script.get_property_default_value
	return any(Advanced(self).GetPropertyDefaultValue(String.Name(String.New(property))).Interface())
}

/*
Returns [code]true[/code] if the script is a tool script. A tool script can run in the editor.
*/
func (self Instance) IsTool() bool { //gd:Script.is_tool
	return bool(Advanced(self).IsTool())
}

/*
Returns [code]true[/code] if the script is an abstract script. An abstract script does not have a constructor and cannot be instantiated.
*/
func (self Instance) IsAbstract() bool { //gd:Script.is_abstract
	return bool(Advanced(self).IsAbstract())
}

/*
Returns a [Dictionary] mapping method names to their RPC configuration defined by this script.
*/
func (self Instance) GetRpcConfig() any { //gd:Script.get_rpc_config
	return any(Advanced(self).GetRpcConfig().Interface())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.Script

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("Script"))
	casted := Instance{*(*gdclass.Script)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) SourceCode() string {
	return string(class(self).GetSourceCode().String())
}

func (self Instance) SetSourceCode(value string) {
	class(self).SetSourceCode(String.New(value))
}

/*
Returns [code]true[/code] if the script can be instantiated.
*/
//go:nosplit
func (self class) CanInstantiate() bool { //gd:Script.can_instantiate
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_can_instantiate), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if [param base_object] is an instance of this script.
*/
//go:nosplit
func (self class) InstanceHas(base_object [1]gd.Object) bool { //gd:Script.instance_has
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_instance_has), gdextension.SizeBool|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ base_object gdextension.Object }{gdextension.Object(gd.ObjectChecked(base_object[0].AsObject()))}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if the script contains non-empty source code.
[b]Note:[/b] If a script does not have source code, this does not mean that it is invalid or unusable. For example, a [GDScript] that was exported with binary tokenization has no source code, but still behaves as expected and could be instantiated. This can be checked with [method can_instantiate].
*/
//go:nosplit
func (self class) HasSourceCode() bool { //gd:Script.has_source_code
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_has_source_code), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetSourceCode() String.Readable { //gd:Script.get_source_code
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_get_source_code), gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetSourceCode(source String.Readable) { //gd:Script.set_source_code
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_set_source_code), 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ source gdextension.String }{gdextension.String(pointers.Get(gd.InternalString(source))[0])}))
}

/*
Reloads the script's class implementation. Returns an error code.
*/
//go:nosplit
func (self class) Reload(keep_state bool) Error.Code { //gd:Script.reload
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_reload), gdextension.SizeInt|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ keep_state bool }{keep_state}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Returns the script directly inherited by this script.
*/
//go:nosplit
func (self class) GetBaseScript() [1]gdclass.Script { //gd:Script.get_base_script
	var r_ret = gdextension.Call[gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_get_base_script), gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Script{gd.PointerWithOwnershipTransferredToGo[gdclass.Script](r_ret)}
	return ret
}

/*
Returns the script's base type.
*/
//go:nosplit
func (self class) GetInstanceBaseType() String.Name { //gd:Script.get_instance_base_type
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_get_instance_base_type), gdextension.SizeStringName, unsafe.Pointer(&struct{}{}))
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret))))
	return ret
}

/*
Returns the class name associated with the script, if there is one. Returns an empty string otherwise.
To give the script a global name, you can use the [code]class_name[/code] keyword in GDScript and the [code][GlobalClass][/code] attribute in C#.
[codeblocks]
[gdscript]
class_name MyNode
extends Node
[/gdscript]
[csharp]
using Godot;

[GlobalClass]
public partial class MyNode : Node
{
}
[/csharp]
[/codeblocks]
*/
//go:nosplit
func (self class) GetGlobalName() String.Name { //gd:Script.get_global_name
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_get_global_name), gdextension.SizeStringName, unsafe.Pointer(&struct{}{}))
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret))))
	return ret
}

/*
Returns [code]true[/code] if the script, or a base class, defines a signal with the given name.
*/
//go:nosplit
func (self class) HasScriptSignal(signal_name String.Name) bool { //gd:Script.has_script_signal
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_has_script_signal), gdextension.SizeBool|(gdextension.SizeStringName<<4), unsafe.Pointer(&struct{ signal_name gdextension.StringName }{gdextension.StringName(pointers.Get(gd.InternalStringName(signal_name))[0])}))
	var ret = r_ret
	return ret
}

/*
Returns the list of properties in this [Script].
*/
//go:nosplit
func (self class) GetScriptPropertyList() Array.Contains[Dictionary.Any] { //gd:Script.get_script_property_list
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_get_script_property_list), gdextension.SizeArray, unsafe.Pointer(&struct{}{}))
	var ret = Array.Through(gd.ArrayProxy[Dictionary.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

/*
Returns the list of methods in this [Script].
*/
//go:nosplit
func (self class) GetScriptMethodList() Array.Contains[Dictionary.Any] { //gd:Script.get_script_method_list
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_get_script_method_list), gdextension.SizeArray, unsafe.Pointer(&struct{}{}))
	var ret = Array.Through(gd.ArrayProxy[Dictionary.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

/*
Returns the list of user signals defined in this [Script].
*/
//go:nosplit
func (self class) GetScriptSignalList() Array.Contains[Dictionary.Any] { //gd:Script.get_script_signal_list
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_get_script_signal_list), gdextension.SizeArray, unsafe.Pointer(&struct{}{}))
	var ret = Array.Through(gd.ArrayProxy[Dictionary.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

/*
Returns a dictionary containing constant names and their values.
*/
//go:nosplit
func (self class) GetScriptConstantMap() Dictionary.Any { //gd:Script.get_script_constant_map
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_get_script_constant_map), gdextension.SizeDictionary, unsafe.Pointer(&struct{}{}))
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret)))
	return ret
}

/*
Returns the default value of the specified property.
*/
//go:nosplit
func (self class) GetPropertyDefaultValue(property String.Name) variant.Any { //gd:Script.get_property_default_value
	var r_ret = gdextension.Call[[3]uint64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_get_property_default_value), gdextension.SizeVariant|(gdextension.SizeStringName<<4), unsafe.Pointer(&struct{ property gdextension.StringName }{gdextension.StringName(pointers.Get(gd.InternalStringName(property))[0])}))
	var ret = variant.Implementation(gd.VariantProxy{}, pointers.Pack(pointers.New[gd.Variant](r_ret)))
	return ret
}

/*
Returns [code]true[/code] if the script is a tool script. A tool script can run in the editor.
*/
//go:nosplit
func (self class) IsTool() bool { //gd:Script.is_tool
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_is_tool), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if the script is an abstract script. An abstract script does not have a constructor and cannot be instantiated.
*/
//go:nosplit
func (self class) IsAbstract() bool { //gd:Script.is_abstract
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_is_abstract), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns a [Dictionary] mapping method names to their RPC configuration defined by this script.
*/
//go:nosplit
func (self class) GetRpcConfig() variant.Any { //gd:Script.get_rpc_config
	var r_ret = gdextension.Call[[3]uint64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.Script.Bind_get_rpc_config), gdextension.SizeVariant, unsafe.Pointer(&struct{}{}))
	var ret = variant.Implementation(gd.VariantProxy{}, pointers.Pack(pointers.New[gd.Variant](r_ret)))
	return ret
}
func (self class) AsScript() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsScript() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsScript() Instance { return self.Super().AsScript() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("Script", func(ptr gd.Object) any { return [1]gdclass.Script{*(*gdclass.Script)(unsafe.Pointer(&ptr))} })
}

type PropertyInfo struct {
	ClassName  string       `gd:"class_name"`
	Name       string       `gd:"name"`
	Hint       int          `gd:"hint"`
	HintString string       `gd:"hint_string"`
	Type       reflect.Type `gd:"type"`
	Usage      int          `gd:"usage"`
}
type SignalInfo struct {
	Name        string         `gd:"name"`
	Flags       int            `gd:"flags"`
	ID          int            `gd:"id"`
	DefaultArgs []interface{}  `gd:"default_args"`
	Args        []PropertyInfo `gd:"args"`
}
