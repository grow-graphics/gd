// Code generated by the generate package DO NOT EDIT

// Package MasterServerClient provides methods for working with MasterServerClient object instances.
package MasterServerClient

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/BlaziumClient"
import "graphics.gd/classdb/GameServerInfo"
import "graphics.gd/classdb/MasterServerListResponse"
import "graphics.gd/classdb/MasterServerResponse"
import "graphics.gd/classdb/Node"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
The [MasterServerClient] node provides an interface for connecting to the Blazium Master Server service. There is a free instance hosted on the [url=https://blazium.app]blazium.app[/url] domain that is used by default.
[b]Note:[/b] All methods are non blocking and can be awaited in order to get the result.
*/
type Instance [1]gdclass.MasterServerClient

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsMasterServerClient() Instance
}

/*
Create a game server.
Returns a [MasterServerResponse] object that has a [signal MasterServerResponse.finished] signal that is emitted when finished.
*/
func (self Instance) CreateGame(game_server_info GameServerInfo.Instance) MasterServerResponse.Instance { //gd:MasterServerClient.create_game
	return MasterServerResponse.Instance(Advanced(self).CreateGame(game_server_info))
}

/*
Update a game server.
Returns a [MasterServerResponse] object that has a [signal MasterServerResponse.finished] signal that is emitted when finished.
*/
func (self Instance) UpdateGame(game_server_info GameServerInfo.Instance) MasterServerResponse.Instance { //gd:MasterServerClient.update_game
	return MasterServerResponse.Instance(Advanced(self).UpdateGame(game_server_info))
}

/*
Get a list of recent games.
Returns a [MasterServerListResponse] object that has a [signal MasterServerListResponse.finished] signal that is emitted when finished.
*/
func (self Instance) RecentGames() MasterServerListResponse.Instance { //gd:MasterServerClient.recent_games
	return MasterServerListResponse.Instance(Advanced(self).RecentGames())
}
func (self Instance) SetOverrideDiscordPath(override_discord_path string) { //gd:MasterServerClient.set_override_discord_path
	Advanced(self).SetOverrideDiscordPath(String.New(override_discord_path))
}
func (self Instance) GetOverrideDiscordPath() string { //gd:MasterServerClient.get_override_discord_path
	return string(Advanced(self).GetOverrideDiscordPath().String())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.MasterServerClient

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("MasterServerClient"))
	casted := Instance{*(*gdclass.MasterServerClient)(unsafe.Pointer(&object))}
	return casted
}

func (self Instance) ServerUrl() string {
	return string(class(self).GetServerUrl().String())
}

func (self Instance) SetServerUrl(value string) {
	class(self).SetServerUrl(String.New(value))
}

func (self Instance) GameId() string {
	return string(class(self).GetGameId().String())
}

func (self Instance) SetGameId(value string) {
	class(self).SetGameId(String.New(value))
}

/*
Create a game server.
Returns a [MasterServerResponse] object that has a [signal MasterServerResponse.finished] signal that is emitted when finished.
*/
//go:nosplit
func (self class) CreateGame(game_server_info [1]gdclass.GameServerInfo) [1]gdclass.MasterServerResponse { //gd:MasterServerClient.create_game
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(game_server_info[0])[0])
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MasterServerClient.Bind_create_game, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.MasterServerResponse{gd.PointerWithOwnershipTransferredToGo[gdclass.MasterServerResponse](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Update a game server.
Returns a [MasterServerResponse] object that has a [signal MasterServerResponse.finished] signal that is emitted when finished.
*/
//go:nosplit
func (self class) UpdateGame(game_server_info [1]gdclass.GameServerInfo) [1]gdclass.MasterServerResponse { //gd:MasterServerClient.update_game
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(game_server_info[0])[0])
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MasterServerClient.Bind_update_game, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.MasterServerResponse{gd.PointerWithOwnershipTransferredToGo[gdclass.MasterServerResponse](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Get a list of recent games.
Returns a [MasterServerListResponse] object that has a [signal MasterServerListResponse.finished] signal that is emitted when finished.
*/
//go:nosplit
func (self class) RecentGames() [1]gdclass.MasterServerListResponse { //gd:MasterServerClient.recent_games
	var frame = callframe.New()
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MasterServerClient.Bind_recent_games, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.MasterServerListResponse{gd.PointerWithOwnershipTransferredToGo[gdclass.MasterServerListResponse](r_ret.Get())}
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetServerUrl(server_url String.Readable) { //gd:MasterServerClient.set_server_url
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(server_url)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MasterServerClient.Bind_set_server_url, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetServerUrl() String.Readable { //gd:MasterServerClient.get_server_url
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MasterServerClient.Bind_get_server_url, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetGameId(game_id String.Readable) { //gd:MasterServerClient.set_game_id
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(game_id)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MasterServerClient.Bind_set_game_id, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetGameId() String.Readable { //gd:MasterServerClient.get_game_id
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MasterServerClient.Bind_get_game_id, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetOverrideDiscordPath(override_discord_path String.Readable) { //gd:MasterServerClient.set_override_discord_path
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(override_discord_path)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MasterServerClient.Bind_set_override_discord_path, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetOverrideDiscordPath() String.Readable { //gd:MasterServerClient.get_override_discord_path
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MasterServerClient.Bind_get_override_discord_path, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}
func (self class) AsMasterServerClient() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsMasterServerClient() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsMasterServerClient() Instance { return self.Super().AsMasterServerClient() }
func (self class) AsBlaziumClient() BlaziumClient.Advanced {
	return *((*BlaziumClient.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsBlaziumClient() BlaziumClient.Instance {
	return self.Super().AsBlaziumClient()
}
func (self Instance) AsBlaziumClient() BlaziumClient.Instance {
	return *((*BlaziumClient.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(BlaziumClient.Advanced(self.AsBlaziumClient()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(BlaziumClient.Instance(self.AsBlaziumClient()), name)
	}
}
func init() {
	gdclass.Register("MasterServerClient", func(ptr gd.Object) any {
		return [1]gdclass.MasterServerClient{*(*gdclass.MasterServerClient)(unsafe.Pointer(&ptr))}
	})
}
