// Code generated by the generate package DO NOT EDIT

// Package CylinderMesh provides methods for working with CylinderMesh object instances.
package CylinderMesh

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Mesh"
import "graphics.gd/classdb/PrimitiveMesh"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Class representing a cylindrical [PrimitiveMesh]. This class can be used to create cones by setting either the [member top_radius] or [member bottom_radius] properties to [code]0.0[/code].
*/
type Instance [1]gdclass.CylinderMesh

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_top_radius      gdextension.MethodForClass `hash:"373806689"`
	get_top_radius      gdextension.MethodForClass `hash:"1740695150"`
	set_bottom_radius   gdextension.MethodForClass `hash:"373806689"`
	get_bottom_radius   gdextension.MethodForClass `hash:"1740695150"`
	set_height          gdextension.MethodForClass `hash:"373806689"`
	get_height          gdextension.MethodForClass `hash:"1740695150"`
	set_radial_segments gdextension.MethodForClass `hash:"1286410249"`
	get_radial_segments gdextension.MethodForClass `hash:"3905245786"`
	set_rings           gdextension.MethodForClass `hash:"1286410249"`
	get_rings           gdextension.MethodForClass `hash:"3905245786"`
	set_cap_top         gdextension.MethodForClass `hash:"2586408642"`
	is_cap_top          gdextension.MethodForClass `hash:"36873697"`
	set_cap_bottom      gdextension.MethodForClass `hash:"2586408642"`
	is_cap_bottom       gdextension.MethodForClass `hash:"36873697"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("CylinderMesh")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsCylinderMesh() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.CylinderMesh

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.CylinderMesh](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.CylinderMesh](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.CylinderMesh{pointers.Add[gdclass.CylinderMesh]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.CylinderMesh{pointers.New[gdclass.CylinderMesh]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) TopRadius() Float.X {
	return Float.X(Float.X(class(self).GetTopRadius()))
}

func (self Instance) SetTopRadius(value Float.X) {
	class(self).SetTopRadius(float64(value))
}

func (self Instance) BottomRadius() Float.X {
	return Float.X(Float.X(class(self).GetBottomRadius()))
}

func (self Instance) SetBottomRadius(value Float.X) {
	class(self).SetBottomRadius(float64(value))
}

func (self Instance) Height() Float.X {
	return Float.X(Float.X(class(self).GetHeight()))
}

func (self Instance) SetHeight(value Float.X) {
	class(self).SetHeight(float64(value))
}

func (self Instance) RadialSegments() int {
	return int(int(class(self).GetRadialSegments()))
}

func (self Instance) SetRadialSegments(value int) {
	class(self).SetRadialSegments(int64(value))
}

func (self Instance) Rings() int {
	return int(int(class(self).GetRings()))
}

func (self Instance) SetRings(value int) {
	class(self).SetRings(int64(value))
}

func (self Instance) CapTop() bool {
	return bool(class(self).IsCapTop())
}

func (self Instance) SetCapTop(value bool) {
	class(self).SetCapTop(value)
}

func (self Instance) CapBottom() bool {
	return bool(class(self).IsCapBottom())
}

func (self Instance) SetCapBottom(value bool) {
	class(self).SetCapBottom(value)
}

//go:nosplit
func (self class) SetTopRadius(radius float64) { //gd:CylinderMesh.set_top_radius
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_top_radius, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ radius float64 }{radius}))
}

//go:nosplit
func (self class) GetTopRadius() float64 { //gd:CylinderMesh.get_top_radius
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_top_radius, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBottomRadius(radius float64) { //gd:CylinderMesh.set_bottom_radius
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bottom_radius, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ radius float64 }{radius}))
}

//go:nosplit
func (self class) GetBottomRadius() float64 { //gd:CylinderMesh.get_bottom_radius
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_bottom_radius, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHeight(height float64) { //gd:CylinderMesh.set_height
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_height, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ height float64 }{height}))
}

//go:nosplit
func (self class) GetHeight() float64 { //gd:CylinderMesh.get_height
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_height, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRadialSegments(segments int64) { //gd:CylinderMesh.set_radial_segments
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_radial_segments, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ segments int64 }{segments}))
}

//go:nosplit
func (self class) GetRadialSegments() int64 { //gd:CylinderMesh.get_radial_segments
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_radial_segments, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRings(rings int64) { //gd:CylinderMesh.set_rings
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_rings, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ rings int64 }{rings}))
}

//go:nosplit
func (self class) GetRings() int64 { //gd:CylinderMesh.get_rings
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_rings, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCapTop(cap_top bool) { //gd:CylinderMesh.set_cap_top
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_cap_top, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ cap_top bool }{cap_top}))
}

//go:nosplit
func (self class) IsCapTop() bool { //gd:CylinderMesh.is_cap_top
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_cap_top, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCapBottom(cap_bottom bool) { //gd:CylinderMesh.set_cap_bottom
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_cap_bottom, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ cap_bottom bool }{cap_bottom}))
}

//go:nosplit
func (self class) IsCapBottom() bool { //gd:CylinderMesh.is_cap_bottom
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_cap_bottom, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsCylinderMesh() Advanced {
	return Advanced{pointers.AsA[gdclass.CylinderMesh](self[0])}
}
func (self Instance) AsCylinderMesh() Instance {
	return Instance{pointers.AsA[gdclass.CylinderMesh](self[0])}
}
func (self *Extension[T]) AsCylinderMesh() Instance { return self.Super().AsCylinderMesh() }
func (self class) AsPrimitiveMesh() PrimitiveMesh.Advanced {
	return PrimitiveMesh.Advanced{pointers.AsA[gdclass.PrimitiveMesh](self[0])}
}
func (self *Extension[T]) AsPrimitiveMesh() PrimitiveMesh.Instance {
	return self.Super().AsPrimitiveMesh()
}
func (self Instance) AsPrimitiveMesh() PrimitiveMesh.Instance {
	return PrimitiveMesh.Instance{pointers.AsA[gdclass.PrimitiveMesh](self[0])}
}
func (self class) AsMesh() Mesh.Advanced         { return Mesh.Advanced{pointers.AsA[gdclass.Mesh](self[0])} }
func (self *Extension[T]) AsMesh() Mesh.Instance { return self.Super().AsMesh() }
func (self Instance) AsMesh() Mesh.Instance {
	return Mesh.Instance{pointers.AsA[gdclass.Mesh](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(PrimitiveMesh.Advanced(self.AsPrimitiveMesh()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(PrimitiveMesh.Instance(self.AsPrimitiveMesh()), name)
	}
}
func init() {
	gdclass.Register("CylinderMesh", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.CylinderMesh](ptr)} })
}
