// Code generated by the generate package DO NOT EDIT

// Package Image provides methods for working with Image object instances.
package Image

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/Rect2i"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2i"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Native image datatype. Contains image data which can be converted to an [ImageTexture] and provides commonly used [i]image processing[/i] methods. The maximum width and height for an [Image] are [constant MAX_WIDTH] and [constant MAX_HEIGHT].
An [Image] cannot be assigned to a texture property of an object directly (such as [member Sprite2D.texture]), and has to be converted manually to an [ImageTexture] first.
[b]Note:[/b] The maximum image size is 16384Ã—16384 pixels due to graphics hardware limitations. Larger images may fail to import.
*/
type Instance [1]gdclass.Image

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_width              gdextension.MethodForClass `hash:"3905245786"`
	get_height             gdextension.MethodForClass `hash:"3905245786"`
	get_size               gdextension.MethodForClass `hash:"3690982128"`
	has_mipmaps            gdextension.MethodForClass `hash:"36873697"`
	get_format             gdextension.MethodForClass `hash:"3847873762"`
	get_data               gdextension.MethodForClass `hash:"2362200018"`
	get_data_size          gdextension.MethodForClass `hash:"3905245786"`
	convert                gdextension.MethodForClass `hash:"2120693146"`
	get_mipmap_count       gdextension.MethodForClass `hash:"3905245786"`
	get_mipmap_offset      gdextension.MethodForClass `hash:"923996154"`
	resize_to_po2          gdextension.MethodForClass `hash:"4189212329"`
	resize                 gdextension.MethodForClass `hash:"994498151"`
	shrink_x2              gdextension.MethodForClass `hash:"3218959716"`
	crop                   gdextension.MethodForClass `hash:"3937882851"`
	flip_x                 gdextension.MethodForClass `hash:"3218959716"`
	flip_y                 gdextension.MethodForClass `hash:"3218959716"`
	generate_mipmaps       gdextension.MethodForClass `hash:"1633102583"`
	clear_mipmaps          gdextension.MethodForClass `hash:"3218959716"`
	create                 gdextension.MethodForClass `hash:"986942177"`
	create_empty           gdextension.MethodForClass `hash:"986942177"`
	create_from_data       gdextension.MethodForClass `hash:"299398494"`
	set_data               gdextension.MethodForClass `hash:"2740482212"`
	is_empty               gdextension.MethodForClass `hash:"36873697"`
	load                   gdextension.MethodForClass `hash:"166001499"`
	load_from_file         gdextension.MethodForClass `hash:"736337515"`
	save_png               gdextension.MethodForClass `hash:"2113323047"`
	save_png_to_buffer     gdextension.MethodForClass `hash:"2362200018"`
	save_jpg               gdextension.MethodForClass `hash:"2800019068"`
	save_jpg_to_buffer     gdextension.MethodForClass `hash:"592235273"`
	save_exr               gdextension.MethodForClass `hash:"3108122999"`
	save_exr_to_buffer     gdextension.MethodForClass `hash:"3178917920"`
	save_webp              gdextension.MethodForClass `hash:"2781156876"`
	save_webp_to_buffer    gdextension.MethodForClass `hash:"1214628238"`
	detect_alpha           gdextension.MethodForClass `hash:"2030116505"`
	is_invisible           gdextension.MethodForClass `hash:"36873697"`
	detect_used_channels   gdextension.MethodForClass `hash:"2703139984"`
	compress               gdextension.MethodForClass `hash:"2975424957"`
	compress_from_channels gdextension.MethodForClass `hash:"4212890953"`
	decompress             gdextension.MethodForClass `hash:"166280745"`
	is_compressed          gdextension.MethodForClass `hash:"36873697"`
	rotate_90              gdextension.MethodForClass `hash:"1901204267"`
	rotate_180             gdextension.MethodForClass `hash:"3218959716"`
	fix_alpha_edges        gdextension.MethodForClass `hash:"3218959716"`
	premultiply_alpha      gdextension.MethodForClass `hash:"3218959716"`
	srgb_to_linear         gdextension.MethodForClass `hash:"3218959716"`
	linear_to_srgb         gdextension.MethodForClass `hash:"3218959716"`
	normal_map_to_xy       gdextension.MethodForClass `hash:"3218959716"`
	rgbe_to_srgb           gdextension.MethodForClass `hash:"564927088"`
	bump_map_to_normal_map gdextension.MethodForClass `hash:"3423495036"`
	compute_image_metrics  gdextension.MethodForClass `hash:"3080961247"`
	blit_rect              gdextension.MethodForClass `hash:"2903928755"`
	blit_rect_mask         gdextension.MethodForClass `hash:"3383581145"`
	blend_rect             gdextension.MethodForClass `hash:"2903928755"`
	blend_rect_mask        gdextension.MethodForClass `hash:"3383581145"`
	fill                   gdextension.MethodForClass `hash:"2920490490"`
	fill_rect              gdextension.MethodForClass `hash:"514693913"`
	get_used_rect          gdextension.MethodForClass `hash:"410525958"`
	get_region             gdextension.MethodForClass `hash:"2601441065"`
	copy_from              gdextension.MethodForClass `hash:"532598488"`
	get_pixelv             gdextension.MethodForClass `hash:"1532707496"`
	get_pixel              gdextension.MethodForClass `hash:"2165839948"`
	set_pixelv             gdextension.MethodForClass `hash:"287851464"`
	set_pixel              gdextension.MethodForClass `hash:"3733378741"`
	adjust_bcs             gdextension.MethodForClass `hash:"2385087082"`
	load_png_from_buffer   gdextension.MethodForClass `hash:"680677267"`
	load_jpg_from_buffer   gdextension.MethodForClass `hash:"680677267"`
	load_webp_from_buffer  gdextension.MethodForClass `hash:"680677267"`
	load_tga_from_buffer   gdextension.MethodForClass `hash:"680677267"`
	load_bmp_from_buffer   gdextension.MethodForClass `hash:"680677267"`
	load_ktx_from_buffer   gdextension.MethodForClass `hash:"680677267"`
	load_svg_from_buffer   gdextension.MethodForClass `hash:"311853421"`
	load_svg_from_string   gdextension.MethodForClass `hash:"3254053600"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("Image")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.Image

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsImage() Instance
}

/*
Returns the image's width.
*/
func (self Instance) GetWidth() int { //gd:Image.get_width
	return int(int(Advanced(self).GetWidth()))
}

/*
Returns the image's height.
*/
func (self Instance) GetHeight() int { //gd:Image.get_height
	return int(int(Advanced(self).GetHeight()))
}

/*
Returns the image's size (width and height).
*/
func (self Instance) GetSize() Vector2i.XY { //gd:Image.get_size
	return Vector2i.XY(Advanced(self).GetSize())
}

/*
Returns [code]true[/code] if the image has generated mipmaps.
*/
func (self Instance) HasMipmaps() bool { //gd:Image.has_mipmaps
	return bool(Advanced(self).HasMipmaps())
}

/*
Returns the image's format. See [enum Format] constants.
*/
func (self Instance) GetFormat() Format { //gd:Image.get_format
	return Format(Advanced(self).GetFormat())
}

/*
Returns a copy of the image's raw data.
*/
func (self Instance) GetData() []byte { //gd:Image.get_data
	return []byte(Advanced(self).GetData().Bytes())
}

/*
Returns size (in bytes) of the image's raw data.
*/
func (self Instance) GetDataSize() int { //gd:Image.get_data_size
	return int(int(Advanced(self).GetDataSize()))
}

/*
Converts the image's format. See [enum Format] constants.
*/
func (self Instance) Convert(format Format) { //gd:Image.convert
	Advanced(self).Convert(format)
}

/*
Returns the number of mipmap levels or 0 if the image has no mipmaps. The largest main level image is not counted as a mipmap level by this method, so if you want to include it you can add 1 to this count.
*/
func (self Instance) GetMipmapCount() int { //gd:Image.get_mipmap_count
	return int(int(Advanced(self).GetMipmapCount()))
}

/*
Returns the offset where the image's mipmap with index [param mipmap] is stored in the [member data] dictionary.
*/
func (self Instance) GetMipmapOffset(mipmap int) int { //gd:Image.get_mipmap_offset
	return int(int(Advanced(self).GetMipmapOffset(int64(mipmap))))
}

/*
Resizes the image to the nearest power of 2 for the width and height. If [param square] is [code]true[/code] then set width and height to be the same. New pixels are calculated using the [param interpolation] mode defined via [enum Interpolation] constants.
*/
func (self Instance) ResizeToPo2() { //gd:Image.resize_to_po2
	Advanced(self).ResizeToPo2(false, 1)
}

/*
Resizes the image to the nearest power of 2 for the width and height. If [param square] is [code]true[/code] then set width and height to be the same. New pixels are calculated using the [param interpolation] mode defined via [enum Interpolation] constants.
*/
func (self Expanded) ResizeToPo2(square bool, interpolation Interpolation) { //gd:Image.resize_to_po2
	Advanced(self).ResizeToPo2(square, interpolation)
}

/*
Resizes the image to the given [param width] and [param height]. New pixels are calculated using the [param interpolation] mode defined via [enum Interpolation] constants.
*/
func (self Instance) Resize(width int, height int) { //gd:Image.resize
	Advanced(self).Resize(int64(width), int64(height), 1)
}

/*
Resizes the image to the given [param width] and [param height]. New pixels are calculated using the [param interpolation] mode defined via [enum Interpolation] constants.
*/
func (self Expanded) Resize(width int, height int, interpolation Interpolation) { //gd:Image.resize
	Advanced(self).Resize(int64(width), int64(height), interpolation)
}

/*
Shrinks the image by a factor of 2 on each axis (this divides the pixel count by 4).
*/
func (self Instance) ShrinkX2() { //gd:Image.shrink_x2
	Advanced(self).ShrinkX2()
}

/*
Crops the image to the given [param width] and [param height]. If the specified size is larger than the current size, the extra area is filled with black pixels.
*/
func (self Instance) Crop(width int, height int) { //gd:Image.crop
	Advanced(self).Crop(int64(width), int64(height))
}

/*
Flips the image horizontally.
*/
func (self Instance) FlipX() { //gd:Image.flip_x
	Advanced(self).FlipX()
}

/*
Flips the image vertically.
*/
func (self Instance) FlipY() { //gd:Image.flip_y
	Advanced(self).FlipY()
}

/*
Generates mipmaps for the image. Mipmaps are precalculated lower-resolution copies of the image that are automatically used if the image needs to be scaled down when rendered. They help improve image quality and performance when rendering. This method returns an error if the image is compressed, in a custom format, or if the image's width/height is [code]0[/code]. Enabling [param renormalize] when generating mipmaps for normal map textures will make sure all resulting vector values are normalized.
It is possible to check if the image has mipmaps by calling [method has_mipmaps] or [method get_mipmap_count]. Calling [method generate_mipmaps] on an image that already has mipmaps will replace existing mipmaps in the image.
*/
func (self Instance) GenerateMipmaps() error { //gd:Image.generate_mipmaps
	return error(gd.ToError(Advanced(self).GenerateMipmaps(false)))
}

/*
Generates mipmaps for the image. Mipmaps are precalculated lower-resolution copies of the image that are automatically used if the image needs to be scaled down when rendered. They help improve image quality and performance when rendering. This method returns an error if the image is compressed, in a custom format, or if the image's width/height is [code]0[/code]. Enabling [param renormalize] when generating mipmaps for normal map textures will make sure all resulting vector values are normalized.
It is possible to check if the image has mipmaps by calling [method has_mipmaps] or [method get_mipmap_count]. Calling [method generate_mipmaps] on an image that already has mipmaps will replace existing mipmaps in the image.
*/
func (self Expanded) GenerateMipmaps(renormalize bool) error { //gd:Image.generate_mipmaps
	return error(gd.ToError(Advanced(self).GenerateMipmaps(renormalize)))
}

/*
Removes the image's mipmaps.
*/
func (self Instance) ClearMipmaps() { //gd:Image.clear_mipmaps
	Advanced(self).ClearMipmaps()
}

/*
Creates an empty image of given size and format. See [enum Format] constants. If [param use_mipmaps] is [code]true[/code], then generate mipmaps for this image. See the [method generate_mipmaps].
*/
func Create(width int, height int, use_mipmaps bool, format Format) Instance { //gd:Image.create
	self := Instance{}
	return Instance(Advanced(self).Create(int64(width), int64(height), use_mipmaps, format))
}

/*
Creates an empty image of given size and format. See [enum Format] constants. If [param use_mipmaps] is [code]true[/code], then generate mipmaps for this image. See the [method generate_mipmaps].
*/
func CreateEmpty(width int, height int, use_mipmaps bool, format Format) Instance { //gd:Image.create_empty
	self := Instance{}
	return Instance(Advanced(self).CreateEmpty(int64(width), int64(height), use_mipmaps, format))
}

/*
Creates a new image of given size and format. See [enum Format] constants. Fills the image with the given raw data. If [param use_mipmaps] is [code]true[/code] then loads mipmaps for this image from [param data]. See [method generate_mipmaps].
*/
func CreateFromData(width int, height int, use_mipmaps bool, format Format, data []byte) Instance { //gd:Image.create_from_data
	self := Instance{}
	return Instance(Advanced(self).CreateFromData(int64(width), int64(height), use_mipmaps, format, Packed.Bytes(Packed.New(data...))))
}

/*
Overwrites data of an existing [Image]. Non-static equivalent of [method create_from_data].
*/
func (self Instance) SetData(width int, height int, use_mipmaps bool, format Format, data []byte) { //gd:Image.set_data
	Advanced(self).SetData(int64(width), int64(height), use_mipmaps, format, Packed.Bytes(Packed.New(data...)))
}

/*
Returns [code]true[/code] if the image has no data.
*/
func (self Instance) IsEmpty() bool { //gd:Image.is_empty
	return bool(Advanced(self).IsEmpty())
}

/*
Loads an image from file [param path]. See [url=$DOCS_URL/tutorials/assets_pipeline/importing_images.html#supported-image-formats]Supported image formats[/url] for a list of supported image formats and limitations.
[b]Warning:[/b] This method should only be used in the editor or in cases when you need to load external images at run-time, such as images located at the [code]user://[/code] directory, and may not work in exported projects.
See also [ImageTexture] description for usage examples.
*/
func (self Instance) Load(path string) error { //gd:Image.load
	return error(gd.ToError(Advanced(self).Load(String.New(path))))
}

/*
Creates a new [Image] and loads data from the specified file.
*/
func LoadFromFile(path string) Instance { //gd:Image.load_from_file
	self := Instance{}
	return Instance(Advanced(self).LoadFromFile(String.New(path)))
}

/*
Saves the image as a PNG file to the file at [param path].
*/
func (self Instance) SavePng(path string) error { //gd:Image.save_png
	return error(gd.ToError(Advanced(self).SavePng(String.New(path))))
}

/*
Saves the image as a PNG file to a byte array.
*/
func (self Instance) SavePngToBuffer() []byte { //gd:Image.save_png_to_buffer
	return []byte(Advanced(self).SavePngToBuffer().Bytes())
}

/*
Saves the image as a JPEG file to [param path] with the specified [param quality] between [code]0.01[/code] and [code]1.0[/code] (inclusive). Higher [param quality] values result in better-looking output at the cost of larger file sizes. Recommended [param quality] values are between [code]0.75[/code] and [code]0.90[/code]. Even at quality [code]1.00[/code], JPEG compression remains lossy.
[b]Note:[/b] JPEG does not save an alpha channel. If the [Image] contains an alpha channel, the image will still be saved, but the resulting JPEG file won't contain the alpha channel.
*/
func (self Instance) SaveJpg(path string) error { //gd:Image.save_jpg
	return error(gd.ToError(Advanced(self).SaveJpg(String.New(path), float64(0.75))))
}

/*
Saves the image as a JPEG file to [param path] with the specified [param quality] between [code]0.01[/code] and [code]1.0[/code] (inclusive). Higher [param quality] values result in better-looking output at the cost of larger file sizes. Recommended [param quality] values are between [code]0.75[/code] and [code]0.90[/code]. Even at quality [code]1.00[/code], JPEG compression remains lossy.
[b]Note:[/b] JPEG does not save an alpha channel. If the [Image] contains an alpha channel, the image will still be saved, but the resulting JPEG file won't contain the alpha channel.
*/
func (self Expanded) SaveJpg(path string, quality Float.X) error { //gd:Image.save_jpg
	return error(gd.ToError(Advanced(self).SaveJpg(String.New(path), float64(quality))))
}

/*
Saves the image as a JPEG file to a byte array with the specified [param quality] between [code]0.01[/code] and [code]1.0[/code] (inclusive). Higher [param quality] values result in better-looking output at the cost of larger byte array sizes (and therefore memory usage). Recommended [param quality] values are between [code]0.75[/code] and [code]0.90[/code]. Even at quality [code]1.00[/code], JPEG compression remains lossy.
[b]Note:[/b] JPEG does not save an alpha channel. If the [Image] contains an alpha channel, the image will still be saved, but the resulting byte array won't contain the alpha channel.
*/
func (self Instance) SaveJpgToBuffer() []byte { //gd:Image.save_jpg_to_buffer
	return []byte(Advanced(self).SaveJpgToBuffer(float64(0.75)).Bytes())
}

/*
Saves the image as a JPEG file to a byte array with the specified [param quality] between [code]0.01[/code] and [code]1.0[/code] (inclusive). Higher [param quality] values result in better-looking output at the cost of larger byte array sizes (and therefore memory usage). Recommended [param quality] values are between [code]0.75[/code] and [code]0.90[/code]. Even at quality [code]1.00[/code], JPEG compression remains lossy.
[b]Note:[/b] JPEG does not save an alpha channel. If the [Image] contains an alpha channel, the image will still be saved, but the resulting byte array won't contain the alpha channel.
*/
func (self Expanded) SaveJpgToBuffer(quality Float.X) []byte { //gd:Image.save_jpg_to_buffer
	return []byte(Advanced(self).SaveJpgToBuffer(float64(quality)).Bytes())
}

/*
Saves the image as an EXR file to [param path]. If [param grayscale] is [code]true[/code] and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return [constant ERR_UNAVAILABLE] if Godot was compiled without the TinyEXR module.
[b]Note:[/b] The TinyEXR module is disabled in non-editor builds, which means [method save_exr] will return [constant ERR_UNAVAILABLE] when it is called from an exported project.
*/
func (self Instance) SaveExr(path string) error { //gd:Image.save_exr
	return error(gd.ToError(Advanced(self).SaveExr(String.New(path), false)))
}

/*
Saves the image as an EXR file to [param path]. If [param grayscale] is [code]true[/code] and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return [constant ERR_UNAVAILABLE] if Godot was compiled without the TinyEXR module.
[b]Note:[/b] The TinyEXR module is disabled in non-editor builds, which means [method save_exr] will return [constant ERR_UNAVAILABLE] when it is called from an exported project.
*/
func (self Expanded) SaveExr(path string, grayscale bool) error { //gd:Image.save_exr
	return error(gd.ToError(Advanced(self).SaveExr(String.New(path), grayscale)))
}

/*
Saves the image as an EXR file to a byte array. If [param grayscale] is [code]true[/code] and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return an empty byte array if Godot was compiled without the TinyEXR module.
[b]Note:[/b] The TinyEXR module is disabled in non-editor builds, which means [method save_exr] will return an empty byte array when it is called from an exported project.
*/
func (self Instance) SaveExrToBuffer() []byte { //gd:Image.save_exr_to_buffer
	return []byte(Advanced(self).SaveExrToBuffer(false).Bytes())
}

/*
Saves the image as an EXR file to a byte array. If [param grayscale] is [code]true[/code] and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return an empty byte array if Godot was compiled without the TinyEXR module.
[b]Note:[/b] The TinyEXR module is disabled in non-editor builds, which means [method save_exr] will return an empty byte array when it is called from an exported project.
*/
func (self Expanded) SaveExrToBuffer(grayscale bool) []byte { //gd:Image.save_exr_to_buffer
	return []byte(Advanced(self).SaveExrToBuffer(grayscale).Bytes())
}

/*
Saves the image as a WebP (Web Picture) file to the file at [param path]. By default it will save lossless. If [param lossy] is [code]true[/code], the image will be saved lossy, using the [param quality] setting between [code]0.0[/code] and [code]1.0[/code] (inclusive). Lossless WebP offers more efficient compression than PNG.
[b]Note:[/b] The WebP format is limited to a size of 16383Ã—16383 pixels, while PNG can save larger images.
*/
func (self Instance) SaveWebp(path string) error { //gd:Image.save_webp
	return error(gd.ToError(Advanced(self).SaveWebp(String.New(path), false, float64(0.75))))
}

/*
Saves the image as a WebP (Web Picture) file to the file at [param path]. By default it will save lossless. If [param lossy] is [code]true[/code], the image will be saved lossy, using the [param quality] setting between [code]0.0[/code] and [code]1.0[/code] (inclusive). Lossless WebP offers more efficient compression than PNG.
[b]Note:[/b] The WebP format is limited to a size of 16383Ã—16383 pixels, while PNG can save larger images.
*/
func (self Expanded) SaveWebp(path string, lossy bool, quality Float.X) error { //gd:Image.save_webp
	return error(gd.ToError(Advanced(self).SaveWebp(String.New(path), lossy, float64(quality))))
}

/*
Saves the image as a WebP (Web Picture) file to a byte array. By default it will save lossless. If [param lossy] is [code]true[/code], the image will be saved lossy, using the [param quality] setting between [code]0.0[/code] and [code]1.0[/code] (inclusive). Lossless WebP offers more efficient compression than PNG.
[b]Note:[/b] The WebP format is limited to a size of 16383Ã—16383 pixels, while PNG can save larger images.
*/
func (self Instance) SaveWebpToBuffer() []byte { //gd:Image.save_webp_to_buffer
	return []byte(Advanced(self).SaveWebpToBuffer(false, float64(0.75)).Bytes())
}

/*
Saves the image as a WebP (Web Picture) file to a byte array. By default it will save lossless. If [param lossy] is [code]true[/code], the image will be saved lossy, using the [param quality] setting between [code]0.0[/code] and [code]1.0[/code] (inclusive). Lossless WebP offers more efficient compression than PNG.
[b]Note:[/b] The WebP format is limited to a size of 16383Ã—16383 pixels, while PNG can save larger images.
*/
func (self Expanded) SaveWebpToBuffer(lossy bool, quality Float.X) []byte { //gd:Image.save_webp_to_buffer
	return []byte(Advanced(self).SaveWebpToBuffer(lossy, float64(quality)).Bytes())
}

/*
Returns [constant ALPHA_BLEND] if the image has data for alpha values. Returns [constant ALPHA_BIT] if all the alpha values are stored in a single bit. Returns [constant ALPHA_NONE] if no data for alpha values is found.
*/
func (self Instance) DetectAlpha() AlphaMode { //gd:Image.detect_alpha
	return AlphaMode(Advanced(self).DetectAlpha())
}

/*
Returns [code]true[/code] if all the image's pixels have an alpha value of 0. Returns [code]false[/code] if any pixel has an alpha value higher than 0.
*/
func (self Instance) IsInvisible() bool { //gd:Image.is_invisible
	return bool(Advanced(self).IsInvisible())
}

/*
Returns the color channels used by this image, as one of the [enum UsedChannels] constants. If the image is compressed, the original [param source] must be specified.
*/
func (self Instance) DetectUsedChannels() UsedChannels { //gd:Image.detect_used_channels
	return UsedChannels(Advanced(self).DetectUsedChannels(0))
}

/*
Returns the color channels used by this image, as one of the [enum UsedChannels] constants. If the image is compressed, the original [param source] must be specified.
*/
func (self Expanded) DetectUsedChannels(source CompressSource) UsedChannels { //gd:Image.detect_used_channels
	return UsedChannels(Advanced(self).DetectUsedChannels(source))
}

/*
Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available.
The [param source] parameter helps to pick the best compression method for DXT and ETC2 formats. It is ignored for ASTC compression.
For ASTC compression, the [param astc_format] parameter must be supplied.
*/
func (self Instance) Compress(mode CompressMode) error { //gd:Image.compress
	return error(gd.ToError(Advanced(self).Compress(mode, 0, 0)))
}

/*
Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available.
The [param source] parameter helps to pick the best compression method for DXT and ETC2 formats. It is ignored for ASTC compression.
For ASTC compression, the [param astc_format] parameter must be supplied.
*/
func (self Expanded) Compress(mode CompressMode, source CompressSource, astc_format ASTCFormat) error { //gd:Image.compress
	return error(gd.ToError(Advanced(self).Compress(mode, source, astc_format)))
}

/*
Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available.
This is an alternative to [method compress] that lets the user supply the channels used in order for the compressor to pick the best DXT and ETC2 formats. For other formats (non DXT or ETC2), this argument is ignored.
For ASTC compression, the [param astc_format] parameter must be supplied.
*/
func (self Instance) CompressFromChannels(mode CompressMode, channels UsedChannels) error { //gd:Image.compress_from_channels
	return error(gd.ToError(Advanced(self).CompressFromChannels(mode, channels, 0)))
}

/*
Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available.
This is an alternative to [method compress] that lets the user supply the channels used in order for the compressor to pick the best DXT and ETC2 formats. For other formats (non DXT or ETC2), this argument is ignored.
For ASTC compression, the [param astc_format] parameter must be supplied.
*/
func (self Expanded) CompressFromChannels(mode CompressMode, channels UsedChannels, astc_format ASTCFormat) error { //gd:Image.compress_from_channels
	return error(gd.ToError(Advanced(self).CompressFromChannels(mode, channels, astc_format)))
}

/*
Decompresses the image if it is VRAM compressed in a supported format. Returns [constant OK] if the format is supported, otherwise [constant ERR_UNAVAILABLE].
[b]Note:[/b] The following formats can be decompressed: DXT, RGTC, BPTC. The formats ETC1 and ETC2 are not supported.
*/
func (self Instance) Decompress() error { //gd:Image.decompress
	return error(gd.ToError(Advanced(self).Decompress()))
}

/*
Returns [code]true[/code] if the image is compressed.
*/
func (self Instance) IsCompressed() bool { //gd:Image.is_compressed
	return bool(Advanced(self).IsCompressed())
}

/*
Rotates the image in the specified [param direction] by [code]90[/code] degrees. The width and height of the image must be greater than [code]1[/code]. If the width and height are not equal, the image will be resized.
*/
func (self Instance) Rotate90(direction Angle.Direction) { //gd:Image.rotate_90
	Advanced(self).Rotate90(direction)
}

/*
Rotates the image by [code]180[/code] degrees. The width and height of the image must be greater than [code]1[/code].
*/
func (self Instance) Rotate180() { //gd:Image.rotate_180
	Advanced(self).Rotate180()
}

/*
Blends low-alpha pixels with nearby pixels.
*/
func (self Instance) FixAlphaEdges() { //gd:Image.fix_alpha_edges
	Advanced(self).FixAlphaEdges()
}

/*
Multiplies color values with alpha values. Resulting color values for a pixel are [code](color * alpha)/256[/code]. See also [member CanvasItemMaterial.blend_mode].
*/
func (self Instance) PremultiplyAlpha() { //gd:Image.premultiply_alpha
	Advanced(self).PremultiplyAlpha()
}

/*
Converts the raw data from the sRGB colorspace to a linear scale. Only works on images with [constant FORMAT_RGB8] or [constant FORMAT_RGBA8] formats.
*/
func (self Instance) SrgbToLinear() { //gd:Image.srgb_to_linear
	Advanced(self).SrgbToLinear()
}

/*
Converts the entire image from the linear colorspace to the sRGB colorspace. Only works on images with [constant FORMAT_RGB8] or [constant FORMAT_RGBA8] formats.
*/
func (self Instance) LinearToSrgb() { //gd:Image.linear_to_srgb
	Advanced(self).LinearToSrgb()
}

/*
Converts the image's data to represent coordinates on a 3D plane. This is used when the image represents a normal map. A normal map can add lots of detail to a 3D surface without increasing the polygon count.
*/
func (self Instance) NormalMapToXy() { //gd:Image.normal_map_to_xy
	Advanced(self).NormalMapToXy()
}

/*
Converts a standard RGBE (Red Green Blue Exponent) image to an sRGB image.
*/
func (self Instance) RgbeToSrgb() Instance { //gd:Image.rgbe_to_srgb
	return Instance(Advanced(self).RgbeToSrgb())
}

/*
Converts a bump map to a normal map. A bump map provides a height offset per-pixel, while a normal map provides a normal direction per pixel.
*/
func (self Instance) BumpMapToNormalMap() { //gd:Image.bump_map_to_normal_map
	Advanced(self).BumpMapToNormalMap(float64(1.0))
}

/*
Converts a bump map to a normal map. A bump map provides a height offset per-pixel, while a normal map provides a normal direction per pixel.
*/
func (self Expanded) BumpMapToNormalMap(bump_scale Float.X) { //gd:Image.bump_map_to_normal_map
	Advanced(self).BumpMapToNormalMap(float64(bump_scale))
}

/*
Compute image metrics on the current image and the compared image.
The dictionary contains [code]max[/code], [code]mean[/code], [code]mean_squared[/code], [code]root_mean_squared[/code] and [code]peak_snr[/code].
*/
func (self Instance) ComputeImageMetrics(compared_image Instance, use_luma bool) Metrics { //gd:Image.compute_image_metrics
	return Metrics(gd.DictionaryAs[Metrics](Advanced(self).ComputeImageMetrics(compared_image, use_luma)))
}

/*
Copies [param src_rect] from [param src] image to this image at coordinates [param dst], clipped accordingly to both image bounds. This image and [param src] image [b]must[/b] have the same format. [param src_rect] with non-positive size is treated as empty.
[b]Note:[/b] The alpha channel data in [param src] will overwrite the corresponding data in this image at the target position. To blend alpha channels, use [method blend_rect] instead.
*/
func (self Instance) BlitRect(src Instance, src_rect Rect2i.PositionSize, dst Vector2i.XY) { //gd:Image.blit_rect
	Advanced(self).BlitRect(src, Rect2i.PositionSize(src_rect), Vector2i.XY(dst))
}

/*
Blits [param src_rect] area from [param src] image to this image at the coordinates given by [param dst], clipped accordingly to both image bounds. [param src] pixel is copied onto [param dst] if the corresponding [param mask] pixel's alpha value is not 0. This image and [param src] image [b]must[/b] have the same format. [param src] image and [param mask] image [b]must[/b] have the same size (width and height) but they can have different formats. [param src_rect] with non-positive size is treated as empty.
*/
func (self Instance) BlitRectMask(src Instance, mask Instance, src_rect Rect2i.PositionSize, dst Vector2i.XY) { //gd:Image.blit_rect_mask
	Advanced(self).BlitRectMask(src, mask, Rect2i.PositionSize(src_rect), Vector2i.XY(dst))
}

/*
Alpha-blends [param src_rect] from [param src] image to this image at coordinates [param dst], clipped accordingly to both image bounds. This image and [param src] image [b]must[/b] have the same format. [param src_rect] with non-positive size is treated as empty.
*/
func (self Instance) BlendRect(src Instance, src_rect Rect2i.PositionSize, dst Vector2i.XY) { //gd:Image.blend_rect
	Advanced(self).BlendRect(src, Rect2i.PositionSize(src_rect), Vector2i.XY(dst))
}

/*
Alpha-blends [param src_rect] from [param src] image to this image using [param mask] image at coordinates [param dst], clipped accordingly to both image bounds. Alpha channels are required for both [param src] and [param mask]. [param dst] pixels and [param src] pixels will blend if the corresponding mask pixel's alpha value is not 0. This image and [param src] image [b]must[/b] have the same format. [param src] image and [param mask] image [b]must[/b] have the same size (width and height) but they can have different formats. [param src_rect] with non-positive size is treated as empty.
*/
func (self Instance) BlendRectMask(src Instance, mask Instance, src_rect Rect2i.PositionSize, dst Vector2i.XY) { //gd:Image.blend_rect_mask
	Advanced(self).BlendRectMask(src, mask, Rect2i.PositionSize(src_rect), Vector2i.XY(dst))
}

/*
Fills the image with [param color].
*/
func (self Instance) Fill(color Color.RGBA) { //gd:Image.fill
	Advanced(self).Fill(Color.RGBA(color))
}

/*
Fills [param rect] with [param color].
*/
func (self Instance) FillRect(rect Rect2i.PositionSize, color Color.RGBA) { //gd:Image.fill_rect
	Advanced(self).FillRect(Rect2i.PositionSize(rect), Color.RGBA(color))
}

/*
Returns a [Rect2i] enclosing the visible portion of the image, considering each pixel with a non-zero alpha channel as visible.
*/
func (self Instance) GetUsedRect() Rect2i.PositionSize { //gd:Image.get_used_rect
	return Rect2i.PositionSize(Advanced(self).GetUsedRect())
}

/*
Returns a new [Image] that is a copy of this [Image]'s area specified with [param region].
*/
func (self Instance) GetRegion(region Rect2i.PositionSize) Instance { //gd:Image.get_region
	return Instance(Advanced(self).GetRegion(Rect2i.PositionSize(region)))
}

/*
Copies [param src] image to this image.
*/
func (self Instance) CopyFrom(src Instance) { //gd:Image.copy_from
	Advanced(self).CopyFrom(src)
}

/*
Returns the color of the pixel at [param point].
This is the same as [method get_pixel], but with a [Vector2i] argument instead of two integer arguments.
*/
func (self Instance) GetPixelv(point Vector2i.XY) Color.RGBA { //gd:Image.get_pixelv
	return Color.RGBA(Advanced(self).GetPixelv(Vector2i.XY(point)))
}

/*
Returns the color of the pixel at [code](x, y)[/code].
This is the same as [method get_pixelv], but with two integer arguments instead of a [Vector2i] argument.
*/
func (self Instance) GetPixel(x int, y int) Color.RGBA { //gd:Image.get_pixel
	return Color.RGBA(Advanced(self).GetPixel(int64(x), int64(y)))
}

/*
Sets the [Color] of the pixel at [param point] to [param color].
[codeblocks]
[gdscript]
var img_width = 10
var img_height = 5
var img = Image.create(img_width, img_height, false, Image.FORMAT_RGBA8)

img.set_pixelv(Vector2i(1, 2), Color.RED) # Sets the color at (1, 2) to red.
[/gdscript]
[csharp]
int imgWidth = 10;
int imgHeight = 5;
var img = Image.Create(imgWidth, imgHeight, false, Image.Format.Rgba8);

img.SetPixelv(new Vector2I(1, 2), Colors.Red); // Sets the color at (1, 2) to red.
[/csharp]
[/codeblocks]
This is the same as [method set_pixel], but with a [Vector2i] argument instead of two integer arguments.
*/
func (self Instance) SetPixelv(point Vector2i.XY, color Color.RGBA) { //gd:Image.set_pixelv
	Advanced(self).SetPixelv(Vector2i.XY(point), Color.RGBA(color))
}

/*
Sets the [Color] of the pixel at [code](x, y)[/code] to [param color].
[codeblocks]
[gdscript]
var img_width = 10
var img_height = 5
var img = Image.create(img_width, img_height, false, Image.FORMAT_RGBA8)

img.set_pixel(1, 2, Color.RED) # Sets the color at (1, 2) to red.
[/gdscript]
[csharp]
int imgWidth = 10;
int imgHeight = 5;
var img = Image.Create(imgWidth, imgHeight, false, Image.Format.Rgba8);

img.SetPixel(1, 2, Colors.Red); // Sets the color at (1, 2) to red.
[/csharp]
[/codeblocks]
This is the same as [method set_pixelv], but with a two integer arguments instead of a [Vector2i] argument.
*/
func (self Instance) SetPixel(x int, y int, color Color.RGBA) { //gd:Image.set_pixel
	Advanced(self).SetPixel(int64(x), int64(y), Color.RGBA(color))
}

/*
Adjusts this image's [param brightness], [param contrast], and [param saturation] by the given values. Does not work if the image is compressed (see [method is_compressed]).
*/
func (self Instance) AdjustBcs(brightness Float.X, contrast Float.X, saturation Float.X) { //gd:Image.adjust_bcs
	Advanced(self).AdjustBcs(float64(brightness), float64(contrast), float64(saturation))
}

/*
Loads an image from the binary contents of a PNG file.
*/
func (self Instance) LoadPngFromBuffer(buffer []byte) error { //gd:Image.load_png_from_buffer
	return error(gd.ToError(Advanced(self).LoadPngFromBuffer(Packed.Bytes(Packed.New(buffer...)))))
}

/*
Loads an image from the binary contents of a JPEG file.
*/
func (self Instance) LoadJpgFromBuffer(buffer []byte) error { //gd:Image.load_jpg_from_buffer
	return error(gd.ToError(Advanced(self).LoadJpgFromBuffer(Packed.Bytes(Packed.New(buffer...)))))
}

/*
Loads an image from the binary contents of a WebP file.
*/
func (self Instance) LoadWebpFromBuffer(buffer []byte) error { //gd:Image.load_webp_from_buffer
	return error(gd.ToError(Advanced(self).LoadWebpFromBuffer(Packed.Bytes(Packed.New(buffer...)))))
}

/*
Loads an image from the binary contents of a TGA file.
[b]Note:[/b] This method is only available in engine builds with the TGA module enabled. By default, the TGA module is enabled, but it can be disabled at build-time using the [code]module_tga_enabled=no[/code] SCons option.
*/
func (self Instance) LoadTgaFromBuffer(buffer []byte) error { //gd:Image.load_tga_from_buffer
	return error(gd.ToError(Advanced(self).LoadTgaFromBuffer(Packed.Bytes(Packed.New(buffer...)))))
}

/*
Loads an image from the binary contents of a BMP file.
[b]Note:[/b] Godot's BMP module doesn't support 16-bit per pixel images. Only 1-bit, 4-bit, 8-bit, 24-bit, and 32-bit per pixel images are supported.
[b]Note:[/b] This method is only available in engine builds with the BMP module enabled. By default, the BMP module is enabled, but it can be disabled at build-time using the [code]module_bmp_enabled=no[/code] SCons option.
*/
func (self Instance) LoadBmpFromBuffer(buffer []byte) error { //gd:Image.load_bmp_from_buffer
	return error(gd.ToError(Advanced(self).LoadBmpFromBuffer(Packed.Bytes(Packed.New(buffer...)))))
}

/*
Loads an image from the binary contents of a [url=https://github.com/KhronosGroup/KTX-Software]KTX[/url] file. Unlike most image formats, KTX can store VRAM-compressed data and embed mipmaps.
[b]Note:[/b] Godot's libktx implementation only supports 2D images. Cubemaps, texture arrays, and de-padding are not supported.
[b]Note:[/b] This method is only available in engine builds with the KTX module enabled. By default, the KTX module is enabled, but it can be disabled at build-time using the [code]module_ktx_enabled=no[/code] SCons option.
*/
func (self Instance) LoadKtxFromBuffer(buffer []byte) error { //gd:Image.load_ktx_from_buffer
	return error(gd.ToError(Advanced(self).LoadKtxFromBuffer(Packed.Bytes(Packed.New(buffer...)))))
}

/*
Loads an image from the UTF-8 binary contents of an [b]uncompressed[/b] SVG file ([b].svg[/b]).
[b]Note:[/b] Beware when using compressed SVG files (like [b].svgz[/b]), they need to be [code]decompressed[/code] before loading.
[b]Note:[/b] This method is only available in engine builds with the SVG module enabled. By default, the SVG module is enabled, but it can be disabled at build-time using the [code]module_svg_enabled=no[/code] SCons option.
*/
func (self Instance) LoadSvgFromBuffer(buffer []byte) error { //gd:Image.load_svg_from_buffer
	return error(gd.ToError(Advanced(self).LoadSvgFromBuffer(Packed.Bytes(Packed.New(buffer...)), float64(1.0))))
}

/*
Loads an image from the UTF-8 binary contents of an [b]uncompressed[/b] SVG file ([b].svg[/b]).
[b]Note:[/b] Beware when using compressed SVG files (like [b].svgz[/b]), they need to be [code]decompressed[/code] before loading.
[b]Note:[/b] This method is only available in engine builds with the SVG module enabled. By default, the SVG module is enabled, but it can be disabled at build-time using the [code]module_svg_enabled=no[/code] SCons option.
*/
func (self Expanded) LoadSvgFromBuffer(buffer []byte, scale Float.X) error { //gd:Image.load_svg_from_buffer
	return error(gd.ToError(Advanced(self).LoadSvgFromBuffer(Packed.Bytes(Packed.New(buffer...)), float64(scale))))
}

/*
Loads an image from the string contents of an SVG file ([b].svg[/b]).
[b]Note:[/b] This method is only available in engine builds with the SVG module enabled. By default, the SVG module is enabled, but it can be disabled at build-time using the [code]module_svg_enabled=no[/code] SCons option.
*/
func (self Instance) LoadSvgFromString(svg_str string) error { //gd:Image.load_svg_from_string
	return error(gd.ToError(Advanced(self).LoadSvgFromString(String.New(svg_str), float64(1.0))))
}

/*
Loads an image from the string contents of an SVG file ([b].svg[/b]).
[b]Note:[/b] This method is only available in engine builds with the SVG module enabled. By default, the SVG module is enabled, but it can be disabled at build-time using the [code]module_svg_enabled=no[/code] SCons option.
*/
func (self Expanded) LoadSvgFromString(svg_str string, scale Float.X) error { //gd:Image.load_svg_from_string
	return error(gd.ToError(Advanced(self).LoadSvgFromString(String.New(svg_str), float64(scale))))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.Image

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.Image)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.Image)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.Image)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

/*
Returns the image's width.
*/
//go:nosplit
func (self class) GetWidth() int64 { //gd:Image.get_width
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_width, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the image's height.
*/
//go:nosplit
func (self class) GetHeight() int64 { //gd:Image.get_height
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_height, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the image's size (width and height).
*/
//go:nosplit
func (self class) GetSize() Vector2i.XY { //gd:Image.get_size
	var r_ret = gdextension.Call[Vector2i.XY](gd.ObjectChecked(self.AsObject()), methods.get_size, gdextension.SizeVector2i, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if the image has generated mipmaps.
*/
//go:nosplit
func (self class) HasMipmaps() bool { //gd:Image.has_mipmaps
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.has_mipmaps, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the image's format. See [enum Format] constants.
*/
//go:nosplit
func (self class) GetFormat() Format { //gd:Image.get_format
	var r_ret = gdextension.Call[Format](gd.ObjectChecked(self.AsObject()), methods.get_format, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns a copy of the image's raw data.
*/
//go:nosplit
func (self class) GetData() Packed.Bytes { //gd:Image.get_data
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_data, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret))))
	return ret
}

/*
Returns size (in bytes) of the image's raw data.
*/
//go:nosplit
func (self class) GetDataSize() int64 { //gd:Image.get_data_size
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_data_size, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Converts the image's format. See [enum Format] constants.
*/
//go:nosplit
func (self class) Convert(format Format) { //gd:Image.convert
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.convert, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ format Format }{format}))
}

/*
Returns the number of mipmap levels or 0 if the image has no mipmaps. The largest main level image is not counted as a mipmap level by this method, so if you want to include it you can add 1 to this count.
*/
//go:nosplit
func (self class) GetMipmapCount() int64 { //gd:Image.get_mipmap_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_mipmap_count, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the offset where the image's mipmap with index [param mipmap] is stored in the [member data] dictionary.
*/
//go:nosplit
func (self class) GetMipmapOffset(mipmap int64) int64 { //gd:Image.get_mipmap_offset
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_mipmap_offset, gdextension.SizeInt|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mipmap int64 }{mipmap}))
	var ret = r_ret
	return ret
}

/*
Resizes the image to the nearest power of 2 for the width and height. If [param square] is [code]true[/code] then set width and height to be the same. New pixels are calculated using the [param interpolation] mode defined via [enum Interpolation] constants.
*/
//go:nosplit
func (self class) ResizeToPo2(square bool, interpolation Interpolation) { //gd:Image.resize_to_po2
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.resize_to_po2, 0|(gdextension.SizeBool<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		square        bool
		interpolation Interpolation
	}{square, interpolation}))
}

/*
Resizes the image to the given [param width] and [param height]. New pixels are calculated using the [param interpolation] mode defined via [enum Interpolation] constants.
*/
//go:nosplit
func (self class) Resize(width int64, height int64, interpolation Interpolation) { //gd:Image.resize
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.resize, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeInt<<12), unsafe.Pointer(&struct {
		width         int64
		height        int64
		interpolation Interpolation
	}{width, height, interpolation}))
}

/*
Shrinks the image by a factor of 2 on each axis (this divides the pixel count by 4).
*/
//go:nosplit
func (self class) ShrinkX2() { //gd:Image.shrink_x2
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.shrink_x2, 0, unsafe.Pointer(&struct{}{}))
}

/*
Crops the image to the given [param width] and [param height]. If the specified size is larger than the current size, the extra area is filled with black pixels.
*/
//go:nosplit
func (self class) Crop(width int64, height int64) { //gd:Image.crop
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.crop, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		width  int64
		height int64
	}{width, height}))
}

/*
Flips the image horizontally.
*/
//go:nosplit
func (self class) FlipX() { //gd:Image.flip_x
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.flip_x, 0, unsafe.Pointer(&struct{}{}))
}

/*
Flips the image vertically.
*/
//go:nosplit
func (self class) FlipY() { //gd:Image.flip_y
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.flip_y, 0, unsafe.Pointer(&struct{}{}))
}

/*
Generates mipmaps for the image. Mipmaps are precalculated lower-resolution copies of the image that are automatically used if the image needs to be scaled down when rendered. They help improve image quality and performance when rendering. This method returns an error if the image is compressed, in a custom format, or if the image's width/height is [code]0[/code]. Enabling [param renormalize] when generating mipmaps for normal map textures will make sure all resulting vector values are normalized.
It is possible to check if the image has mipmaps by calling [method has_mipmaps] or [method get_mipmap_count]. Calling [method generate_mipmaps] on an image that already has mipmaps will replace existing mipmaps in the image.
*/
//go:nosplit
func (self class) GenerateMipmaps(renormalize bool) Error.Code { //gd:Image.generate_mipmaps
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.generate_mipmaps, gdextension.SizeInt|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ renormalize bool }{renormalize}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Removes the image's mipmaps.
*/
//go:nosplit
func (self class) ClearMipmaps() { //gd:Image.clear_mipmaps
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear_mipmaps, 0, unsafe.Pointer(&struct{}{}))
}

/*
Creates an empty image of given size and format. See [enum Format] constants. If [param use_mipmaps] is [code]true[/code], then generate mipmaps for this image. See the [method generate_mipmaps].
*/
//go:nosplit
func (self class) Create(width int64, height int64, use_mipmaps bool, format Format) [1]gdclass.Image { //gd:Image.create
	var r_ret = gdextension.CallStatic[gdextension.Object](methods.create, gdextension.SizeObject|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeBool<<12)|(gdextension.SizeInt<<16), unsafe.Pointer(&struct {
		width       int64
		height      int64
		use_mipmaps bool
		format      Format
	}{width, height, use_mipmaps, format}))
	var ret = [1]gdclass.Image{gd.PointerWithOwnershipTransferredToGo[gdclass.Image](r_ret)}
	return ret
}

/*
Creates an empty image of given size and format. See [enum Format] constants. If [param use_mipmaps] is [code]true[/code], then generate mipmaps for this image. See the [method generate_mipmaps].
*/
//go:nosplit
func (self class) CreateEmpty(width int64, height int64, use_mipmaps bool, format Format) [1]gdclass.Image { //gd:Image.create_empty
	var r_ret = gdextension.CallStatic[gdextension.Object](methods.create_empty, gdextension.SizeObject|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeBool<<12)|(gdextension.SizeInt<<16), unsafe.Pointer(&struct {
		width       int64
		height      int64
		use_mipmaps bool
		format      Format
	}{width, height, use_mipmaps, format}))
	var ret = [1]gdclass.Image{gd.PointerWithOwnershipTransferredToGo[gdclass.Image](r_ret)}
	return ret
}

/*
Creates a new image of given size and format. See [enum Format] constants. Fills the image with the given raw data. If [param use_mipmaps] is [code]true[/code] then loads mipmaps for this image from [param data]. See [method generate_mipmaps].
*/
//go:nosplit
func (self class) CreateFromData(width int64, height int64, use_mipmaps bool, format Format, data Packed.Bytes) [1]gdclass.Image { //gd:Image.create_from_data
	var r_ret = gdextension.CallStatic[gdextension.Object](methods.create_from_data, gdextension.SizeObject|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeBool<<12)|(gdextension.SizeInt<<16)|(gdextension.SizePackedArray<<20), unsafe.Pointer(&struct {
		width       int64
		height      int64
		use_mipmaps bool
		format      Format
		data        gdextension.PackedArray[byte]
	}{width, height, use_mipmaps, format, pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](data)))}))
	var ret = [1]gdclass.Image{gd.PointerWithOwnershipTransferredToGo[gdclass.Image](r_ret)}
	return ret
}

/*
Overwrites data of an existing [Image]. Non-static equivalent of [method create_from_data].
*/
//go:nosplit
func (self class) SetData(width int64, height int64, use_mipmaps bool, format Format, data Packed.Bytes) { //gd:Image.set_data
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_data, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeBool<<12)|(gdextension.SizeInt<<16)|(gdextension.SizePackedArray<<20), unsafe.Pointer(&struct {
		width       int64
		height      int64
		use_mipmaps bool
		format      Format
		data        gdextension.PackedArray[byte]
	}{width, height, use_mipmaps, format, pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](data)))}))
}

/*
Returns [code]true[/code] if the image has no data.
*/
//go:nosplit
func (self class) IsEmpty() bool { //gd:Image.is_empty
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_empty, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Loads an image from file [param path]. See [url=$DOCS_URL/tutorials/assets_pipeline/importing_images.html#supported-image-formats]Supported image formats[/url] for a list of supported image formats and limitations.
[b]Warning:[/b] This method should only be used in the editor or in cases when you need to load external images at run-time, such as images located at the [code]user://[/code] directory, and may not work in exported projects.
See also [ImageTexture] description for usage examples.
*/
//go:nosplit
func (self class) Load(path String.Readable) Error.Code { //gd:Image.load
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.load, gdextension.SizeInt|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ path gdextension.String }{pointers.Get(gd.InternalString(path))}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Creates a new [Image] and loads data from the specified file.
*/
//go:nosplit
func (self class) LoadFromFile(path String.Readable) [1]gdclass.Image { //gd:Image.load_from_file
	var r_ret = gdextension.CallStatic[gdextension.Object](methods.load_from_file, gdextension.SizeObject|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ path gdextension.String }{pointers.Get(gd.InternalString(path))}))
	var ret = [1]gdclass.Image{gd.PointerWithOwnershipTransferredToGo[gdclass.Image](r_ret)}
	return ret
}

/*
Saves the image as a PNG file to the file at [param path].
*/
//go:nosplit
func (self class) SavePng(path String.Readable) Error.Code { //gd:Image.save_png
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.save_png, gdextension.SizeInt|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ path gdextension.String }{pointers.Get(gd.InternalString(path))}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Saves the image as a PNG file to a byte array.
*/
//go:nosplit
func (self class) SavePngToBuffer() Packed.Bytes { //gd:Image.save_png_to_buffer
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.save_png_to_buffer, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret))))
	return ret
}

/*
Saves the image as a JPEG file to [param path] with the specified [param quality] between [code]0.01[/code] and [code]1.0[/code] (inclusive). Higher [param quality] values result in better-looking output at the cost of larger file sizes. Recommended [param quality] values are between [code]0.75[/code] and [code]0.90[/code]. Even at quality [code]1.00[/code], JPEG compression remains lossy.
[b]Note:[/b] JPEG does not save an alpha channel. If the [Image] contains an alpha channel, the image will still be saved, but the resulting JPEG file won't contain the alpha channel.
*/
//go:nosplit
func (self class) SaveJpg(path String.Readable, quality float64) Error.Code { //gd:Image.save_jpg
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.save_jpg, gdextension.SizeInt|(gdextension.SizeString<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		path    gdextension.String
		quality float64
	}{pointers.Get(gd.InternalString(path)), quality}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Saves the image as a JPEG file to a byte array with the specified [param quality] between [code]0.01[/code] and [code]1.0[/code] (inclusive). Higher [param quality] values result in better-looking output at the cost of larger byte array sizes (and therefore memory usage). Recommended [param quality] values are between [code]0.75[/code] and [code]0.90[/code]. Even at quality [code]1.00[/code], JPEG compression remains lossy.
[b]Note:[/b] JPEG does not save an alpha channel. If the [Image] contains an alpha channel, the image will still be saved, but the resulting byte array won't contain the alpha channel.
*/
//go:nosplit
func (self class) SaveJpgToBuffer(quality float64) Packed.Bytes { //gd:Image.save_jpg_to_buffer
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.save_jpg_to_buffer, gdextension.SizePackedArray|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ quality float64 }{quality}))
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret))))
	return ret
}

/*
Saves the image as an EXR file to [param path]. If [param grayscale] is [code]true[/code] and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return [constant ERR_UNAVAILABLE] if Godot was compiled without the TinyEXR module.
[b]Note:[/b] The TinyEXR module is disabled in non-editor builds, which means [method save_exr] will return [constant ERR_UNAVAILABLE] when it is called from an exported project.
*/
//go:nosplit
func (self class) SaveExr(path String.Readable, grayscale bool) Error.Code { //gd:Image.save_exr
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.save_exr, gdextension.SizeInt|(gdextension.SizeString<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		path      gdextension.String
		grayscale bool
	}{pointers.Get(gd.InternalString(path)), grayscale}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Saves the image as an EXR file to a byte array. If [param grayscale] is [code]true[/code] and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return an empty byte array if Godot was compiled without the TinyEXR module.
[b]Note:[/b] The TinyEXR module is disabled in non-editor builds, which means [method save_exr] will return an empty byte array when it is called from an exported project.
*/
//go:nosplit
func (self class) SaveExrToBuffer(grayscale bool) Packed.Bytes { //gd:Image.save_exr_to_buffer
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.save_exr_to_buffer, gdextension.SizePackedArray|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ grayscale bool }{grayscale}))
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret))))
	return ret
}

/*
Saves the image as a WebP (Web Picture) file to the file at [param path]. By default it will save lossless. If [param lossy] is [code]true[/code], the image will be saved lossy, using the [param quality] setting between [code]0.0[/code] and [code]1.0[/code] (inclusive). Lossless WebP offers more efficient compression than PNG.
[b]Note:[/b] The WebP format is limited to a size of 16383Ã—16383 pixels, while PNG can save larger images.
*/
//go:nosplit
func (self class) SaveWebp(path String.Readable, lossy bool, quality float64) Error.Code { //gd:Image.save_webp
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.save_webp, gdextension.SizeInt|(gdextension.SizeString<<4)|(gdextension.SizeBool<<8)|(gdextension.SizeFloat<<12), unsafe.Pointer(&struct {
		path    gdextension.String
		lossy   bool
		quality float64
	}{pointers.Get(gd.InternalString(path)), lossy, quality}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Saves the image as a WebP (Web Picture) file to a byte array. By default it will save lossless. If [param lossy] is [code]true[/code], the image will be saved lossy, using the [param quality] setting between [code]0.0[/code] and [code]1.0[/code] (inclusive). Lossless WebP offers more efficient compression than PNG.
[b]Note:[/b] The WebP format is limited to a size of 16383Ã—16383 pixels, while PNG can save larger images.
*/
//go:nosplit
func (self class) SaveWebpToBuffer(lossy bool, quality float64) Packed.Bytes { //gd:Image.save_webp_to_buffer
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.save_webp_to_buffer, gdextension.SizePackedArray|(gdextension.SizeBool<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		lossy   bool
		quality float64
	}{lossy, quality}))
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret))))
	return ret
}

/*
Returns [constant ALPHA_BLEND] if the image has data for alpha values. Returns [constant ALPHA_BIT] if all the alpha values are stored in a single bit. Returns [constant ALPHA_NONE] if no data for alpha values is found.
*/
//go:nosplit
func (self class) DetectAlpha() AlphaMode { //gd:Image.detect_alpha
	var r_ret = gdextension.Call[AlphaMode](gd.ObjectChecked(self.AsObject()), methods.detect_alpha, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if all the image's pixels have an alpha value of 0. Returns [code]false[/code] if any pixel has an alpha value higher than 0.
*/
//go:nosplit
func (self class) IsInvisible() bool { //gd:Image.is_invisible
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_invisible, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the color channels used by this image, as one of the [enum UsedChannels] constants. If the image is compressed, the original [param source] must be specified.
*/
//go:nosplit
func (self class) DetectUsedChannels(source CompressSource) UsedChannels { //gd:Image.detect_used_channels
	var r_ret = gdextension.Call[UsedChannels](gd.ObjectChecked(self.AsObject()), methods.detect_used_channels, gdextension.SizeInt|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ source CompressSource }{source}))
	var ret = r_ret
	return ret
}

/*
Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available.
The [param source] parameter helps to pick the best compression method for DXT and ETC2 formats. It is ignored for ASTC compression.
For ASTC compression, the [param astc_format] parameter must be supplied.
*/
//go:nosplit
func (self class) Compress(mode CompressMode, source CompressSource, astc_format ASTCFormat) Error.Code { //gd:Image.compress
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.compress, gdextension.SizeInt|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeInt<<12), unsafe.Pointer(&struct {
		mode        CompressMode
		source      CompressSource
		astc_format ASTCFormat
	}{mode, source, astc_format}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available.
This is an alternative to [method compress] that lets the user supply the channels used in order for the compressor to pick the best DXT and ETC2 formats. For other formats (non DXT or ETC2), this argument is ignored.
For ASTC compression, the [param astc_format] parameter must be supplied.
*/
//go:nosplit
func (self class) CompressFromChannels(mode CompressMode, channels UsedChannels, astc_format ASTCFormat) Error.Code { //gd:Image.compress_from_channels
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.compress_from_channels, gdextension.SizeInt|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeInt<<12), unsafe.Pointer(&struct {
		mode        CompressMode
		channels    UsedChannels
		astc_format ASTCFormat
	}{mode, channels, astc_format}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Decompresses the image if it is VRAM compressed in a supported format. Returns [constant OK] if the format is supported, otherwise [constant ERR_UNAVAILABLE].
[b]Note:[/b] The following formats can be decompressed: DXT, RGTC, BPTC. The formats ETC1 and ETC2 are not supported.
*/
//go:nosplit
func (self class) Decompress() Error.Code { //gd:Image.decompress
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.decompress, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Returns [code]true[/code] if the image is compressed.
*/
//go:nosplit
func (self class) IsCompressed() bool { //gd:Image.is_compressed
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_compressed, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Rotates the image in the specified [param direction] by [code]90[/code] degrees. The width and height of the image must be greater than [code]1[/code]. If the width and height are not equal, the image will be resized.
*/
//go:nosplit
func (self class) Rotate90(direction Angle.Direction) { //gd:Image.rotate_90
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.rotate_90, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ direction Angle.Direction }{direction}))
}

/*
Rotates the image by [code]180[/code] degrees. The width and height of the image must be greater than [code]1[/code].
*/
//go:nosplit
func (self class) Rotate180() { //gd:Image.rotate_180
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.rotate_180, 0, unsafe.Pointer(&struct{}{}))
}

/*
Blends low-alpha pixels with nearby pixels.
*/
//go:nosplit
func (self class) FixAlphaEdges() { //gd:Image.fix_alpha_edges
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.fix_alpha_edges, 0, unsafe.Pointer(&struct{}{}))
}

/*
Multiplies color values with alpha values. Resulting color values for a pixel are [code](color * alpha)/256[/code]. See also [member CanvasItemMaterial.blend_mode].
*/
//go:nosplit
func (self class) PremultiplyAlpha() { //gd:Image.premultiply_alpha
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.premultiply_alpha, 0, unsafe.Pointer(&struct{}{}))
}

/*
Converts the raw data from the sRGB colorspace to a linear scale. Only works on images with [constant FORMAT_RGB8] or [constant FORMAT_RGBA8] formats.
*/
//go:nosplit
func (self class) SrgbToLinear() { //gd:Image.srgb_to_linear
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.srgb_to_linear, 0, unsafe.Pointer(&struct{}{}))
}

/*
Converts the entire image from the linear colorspace to the sRGB colorspace. Only works on images with [constant FORMAT_RGB8] or [constant FORMAT_RGBA8] formats.
*/
//go:nosplit
func (self class) LinearToSrgb() { //gd:Image.linear_to_srgb
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.linear_to_srgb, 0, unsafe.Pointer(&struct{}{}))
}

/*
Converts the image's data to represent coordinates on a 3D plane. This is used when the image represents a normal map. A normal map can add lots of detail to a 3D surface without increasing the polygon count.
*/
//go:nosplit
func (self class) NormalMapToXy() { //gd:Image.normal_map_to_xy
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.normal_map_to_xy, 0, unsafe.Pointer(&struct{}{}))
}

/*
Converts a standard RGBE (Red Green Blue Exponent) image to an sRGB image.
*/
//go:nosplit
func (self class) RgbeToSrgb() [1]gdclass.Image { //gd:Image.rgbe_to_srgb
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.rgbe_to_srgb, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Image{gd.PointerWithOwnershipTransferredToGo[gdclass.Image](r_ret)}
	return ret
}

/*
Converts a bump map to a normal map. A bump map provides a height offset per-pixel, while a normal map provides a normal direction per pixel.
*/
//go:nosplit
func (self class) BumpMapToNormalMap(bump_scale float64) { //gd:Image.bump_map_to_normal_map
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.bump_map_to_normal_map, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ bump_scale float64 }{bump_scale}))
}

/*
Compute image metrics on the current image and the compared image.
The dictionary contains [code]max[/code], [code]mean[/code], [code]mean_squared[/code], [code]root_mean_squared[/code] and [code]peak_snr[/code].
*/
//go:nosplit
func (self class) ComputeImageMetrics(compared_image [1]gdclass.Image, use_luma bool) Dictionary.Any { //gd:Image.compute_image_metrics
	var r_ret = gdextension.Call[gdextension.Dictionary](gd.ObjectChecked(self.AsObject()), methods.compute_image_metrics, gdextension.SizeDictionary|(gdextension.SizeObject<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		compared_image gdextension.Object
		use_luma       bool
	}{gdextension.Object(gd.ObjectChecked(compared_image[0].AsObject())), use_luma}))
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret)))
	return ret
}

/*
Copies [param src_rect] from [param src] image to this image at coordinates [param dst], clipped accordingly to both image bounds. This image and [param src] image [b]must[/b] have the same format. [param src_rect] with non-positive size is treated as empty.
[b]Note:[/b] The alpha channel data in [param src] will overwrite the corresponding data in this image at the target position. To blend alpha channels, use [method blend_rect] instead.
*/
//go:nosplit
func (self class) BlitRect(src [1]gdclass.Image, src_rect Rect2i.PositionSize, dst Vector2i.XY) { //gd:Image.blit_rect
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.blit_rect, 0|(gdextension.SizeObject<<4)|(gdextension.SizeRect2i<<8)|(gdextension.SizeVector2i<<12), unsafe.Pointer(&struct {
		src      gdextension.Object
		src_rect Rect2i.PositionSize
		dst      Vector2i.XY
	}{gdextension.Object(gd.ObjectChecked(src[0].AsObject())), src_rect, dst}))
}

/*
Blits [param src_rect] area from [param src] image to this image at the coordinates given by [param dst], clipped accordingly to both image bounds. [param src] pixel is copied onto [param dst] if the corresponding [param mask] pixel's alpha value is not 0. This image and [param src] image [b]must[/b] have the same format. [param src] image and [param mask] image [b]must[/b] have the same size (width and height) but they can have different formats. [param src_rect] with non-positive size is treated as empty.
*/
//go:nosplit
func (self class) BlitRectMask(src [1]gdclass.Image, mask [1]gdclass.Image, src_rect Rect2i.PositionSize, dst Vector2i.XY) { //gd:Image.blit_rect_mask
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.blit_rect_mask, 0|(gdextension.SizeObject<<4)|(gdextension.SizeObject<<8)|(gdextension.SizeRect2i<<12)|(gdextension.SizeVector2i<<16), unsafe.Pointer(&struct {
		src      gdextension.Object
		mask     gdextension.Object
		src_rect Rect2i.PositionSize
		dst      Vector2i.XY
	}{gdextension.Object(gd.ObjectChecked(src[0].AsObject())), gdextension.Object(gd.ObjectChecked(mask[0].AsObject())), src_rect, dst}))
}

/*
Alpha-blends [param src_rect] from [param src] image to this image at coordinates [param dst], clipped accordingly to both image bounds. This image and [param src] image [b]must[/b] have the same format. [param src_rect] with non-positive size is treated as empty.
*/
//go:nosplit
func (self class) BlendRect(src [1]gdclass.Image, src_rect Rect2i.PositionSize, dst Vector2i.XY) { //gd:Image.blend_rect
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.blend_rect, 0|(gdextension.SizeObject<<4)|(gdextension.SizeRect2i<<8)|(gdextension.SizeVector2i<<12), unsafe.Pointer(&struct {
		src      gdextension.Object
		src_rect Rect2i.PositionSize
		dst      Vector2i.XY
	}{gdextension.Object(gd.ObjectChecked(src[0].AsObject())), src_rect, dst}))
}

/*
Alpha-blends [param src_rect] from [param src] image to this image using [param mask] image at coordinates [param dst], clipped accordingly to both image bounds. Alpha channels are required for both [param src] and [param mask]. [param dst] pixels and [param src] pixels will blend if the corresponding mask pixel's alpha value is not 0. This image and [param src] image [b]must[/b] have the same format. [param src] image and [param mask] image [b]must[/b] have the same size (width and height) but they can have different formats. [param src_rect] with non-positive size is treated as empty.
*/
//go:nosplit
func (self class) BlendRectMask(src [1]gdclass.Image, mask [1]gdclass.Image, src_rect Rect2i.PositionSize, dst Vector2i.XY) { //gd:Image.blend_rect_mask
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.blend_rect_mask, 0|(gdextension.SizeObject<<4)|(gdextension.SizeObject<<8)|(gdextension.SizeRect2i<<12)|(gdextension.SizeVector2i<<16), unsafe.Pointer(&struct {
		src      gdextension.Object
		mask     gdextension.Object
		src_rect Rect2i.PositionSize
		dst      Vector2i.XY
	}{gdextension.Object(gd.ObjectChecked(src[0].AsObject())), gdextension.Object(gd.ObjectChecked(mask[0].AsObject())), src_rect, dst}))
}

/*
Fills the image with [param color].
*/
//go:nosplit
func (self class) Fill(color Color.RGBA) { //gd:Image.fill
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.fill, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

/*
Fills [param rect] with [param color].
*/
//go:nosplit
func (self class) FillRect(rect Rect2i.PositionSize, color Color.RGBA) { //gd:Image.fill_rect
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.fill_rect, 0|(gdextension.SizeRect2i<<4)|(gdextension.SizeColor<<8), unsafe.Pointer(&struct {
		rect  Rect2i.PositionSize
		color Color.RGBA
	}{rect, color}))
}

/*
Returns a [Rect2i] enclosing the visible portion of the image, considering each pixel with a non-zero alpha channel as visible.
*/
//go:nosplit
func (self class) GetUsedRect() Rect2i.PositionSize { //gd:Image.get_used_rect
	var r_ret = gdextension.Call[Rect2i.PositionSize](gd.ObjectChecked(self.AsObject()), methods.get_used_rect, gdextension.SizeRect2i, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns a new [Image] that is a copy of this [Image]'s area specified with [param region].
*/
//go:nosplit
func (self class) GetRegion(region Rect2i.PositionSize) [1]gdclass.Image { //gd:Image.get_region
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_region, gdextension.SizeObject|(gdextension.SizeRect2i<<4), unsafe.Pointer(&struct{ region Rect2i.PositionSize }{region}))
	var ret = [1]gdclass.Image{gd.PointerWithOwnershipTransferredToGo[gdclass.Image](r_ret)}
	return ret
}

/*
Copies [param src] image to this image.
*/
//go:nosplit
func (self class) CopyFrom(src [1]gdclass.Image) { //gd:Image.copy_from
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.copy_from, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ src gdextension.Object }{gdextension.Object(gd.ObjectChecked(src[0].AsObject()))}))
}

/*
Returns the color of the pixel at [param point].
This is the same as [method get_pixel], but with a [Vector2i] argument instead of two integer arguments.
*/
//go:nosplit
func (self class) GetPixelv(point Vector2i.XY) Color.RGBA { //gd:Image.get_pixelv
	var r_ret = gdextension.Call[Color.RGBA](gd.ObjectChecked(self.AsObject()), methods.get_pixelv, gdextension.SizeColor|(gdextension.SizeVector2i<<4), unsafe.Pointer(&struct{ point Vector2i.XY }{point}))
	var ret = r_ret
	return ret
}

/*
Returns the color of the pixel at [code](x, y)[/code].
This is the same as [method get_pixelv], but with two integer arguments instead of a [Vector2i] argument.
*/
//go:nosplit
func (self class) GetPixel(x int64, y int64) Color.RGBA { //gd:Image.get_pixel
	var r_ret = gdextension.Call[Color.RGBA](gd.ObjectChecked(self.AsObject()), methods.get_pixel, gdextension.SizeColor|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		x int64
		y int64
	}{x, y}))
	var ret = r_ret
	return ret
}

/*
Sets the [Color] of the pixel at [param point] to [param color].
[codeblocks]
[gdscript]
var img_width = 10
var img_height = 5
var img = Image.create(img_width, img_height, false, Image.FORMAT_RGBA8)

img.set_pixelv(Vector2i(1, 2), Color.RED) # Sets the color at (1, 2) to red.
[/gdscript]
[csharp]
int imgWidth = 10;
int imgHeight = 5;
var img = Image.Create(imgWidth, imgHeight, false, Image.Format.Rgba8);

img.SetPixelv(new Vector2I(1, 2), Colors.Red); // Sets the color at (1, 2) to red.
[/csharp]
[/codeblocks]
This is the same as [method set_pixel], but with a [Vector2i] argument instead of two integer arguments.
*/
//go:nosplit
func (self class) SetPixelv(point Vector2i.XY, color Color.RGBA) { //gd:Image.set_pixelv
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pixelv, 0|(gdextension.SizeVector2i<<4)|(gdextension.SizeColor<<8), unsafe.Pointer(&struct {
		point Vector2i.XY
		color Color.RGBA
	}{point, color}))
}

/*
Sets the [Color] of the pixel at [code](x, y)[/code] to [param color].
[codeblocks]
[gdscript]
var img_width = 10
var img_height = 5
var img = Image.create(img_width, img_height, false, Image.FORMAT_RGBA8)

img.set_pixel(1, 2, Color.RED) # Sets the color at (1, 2) to red.
[/gdscript]
[csharp]
int imgWidth = 10;
int imgHeight = 5;
var img = Image.Create(imgWidth, imgHeight, false, Image.Format.Rgba8);

img.SetPixel(1, 2, Colors.Red); // Sets the color at (1, 2) to red.
[/csharp]
[/codeblocks]
This is the same as [method set_pixelv], but with a two integer arguments instead of a [Vector2i] argument.
*/
//go:nosplit
func (self class) SetPixel(x int64, y int64, color Color.RGBA) { //gd:Image.set_pixel
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pixel, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeColor<<12), unsafe.Pointer(&struct {
		x     int64
		y     int64
		color Color.RGBA
	}{x, y, color}))
}

/*
Adjusts this image's [param brightness], [param contrast], and [param saturation] by the given values. Does not work if the image is compressed (see [method is_compressed]).
*/
//go:nosplit
func (self class) AdjustBcs(brightness float64, contrast float64, saturation float64) { //gd:Image.adjust_bcs
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.adjust_bcs, 0|(gdextension.SizeFloat<<4)|(gdextension.SizeFloat<<8)|(gdextension.SizeFloat<<12), unsafe.Pointer(&struct {
		brightness float64
		contrast   float64
		saturation float64
	}{brightness, contrast, saturation}))
}

/*
Loads an image from the binary contents of a PNG file.
*/
//go:nosplit
func (self class) LoadPngFromBuffer(buffer Packed.Bytes) Error.Code { //gd:Image.load_png_from_buffer
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.load_png_from_buffer, gdextension.SizeInt|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ buffer gdextension.PackedArray[byte] }{pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](buffer)))}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Loads an image from the binary contents of a JPEG file.
*/
//go:nosplit
func (self class) LoadJpgFromBuffer(buffer Packed.Bytes) Error.Code { //gd:Image.load_jpg_from_buffer
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.load_jpg_from_buffer, gdextension.SizeInt|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ buffer gdextension.PackedArray[byte] }{pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](buffer)))}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Loads an image from the binary contents of a WebP file.
*/
//go:nosplit
func (self class) LoadWebpFromBuffer(buffer Packed.Bytes) Error.Code { //gd:Image.load_webp_from_buffer
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.load_webp_from_buffer, gdextension.SizeInt|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ buffer gdextension.PackedArray[byte] }{pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](buffer)))}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Loads an image from the binary contents of a TGA file.
[b]Note:[/b] This method is only available in engine builds with the TGA module enabled. By default, the TGA module is enabled, but it can be disabled at build-time using the [code]module_tga_enabled=no[/code] SCons option.
*/
//go:nosplit
func (self class) LoadTgaFromBuffer(buffer Packed.Bytes) Error.Code { //gd:Image.load_tga_from_buffer
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.load_tga_from_buffer, gdextension.SizeInt|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ buffer gdextension.PackedArray[byte] }{pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](buffer)))}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Loads an image from the binary contents of a BMP file.
[b]Note:[/b] Godot's BMP module doesn't support 16-bit per pixel images. Only 1-bit, 4-bit, 8-bit, 24-bit, and 32-bit per pixel images are supported.
[b]Note:[/b] This method is only available in engine builds with the BMP module enabled. By default, the BMP module is enabled, but it can be disabled at build-time using the [code]module_bmp_enabled=no[/code] SCons option.
*/
//go:nosplit
func (self class) LoadBmpFromBuffer(buffer Packed.Bytes) Error.Code { //gd:Image.load_bmp_from_buffer
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.load_bmp_from_buffer, gdextension.SizeInt|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ buffer gdextension.PackedArray[byte] }{pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](buffer)))}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Loads an image from the binary contents of a [url=https://github.com/KhronosGroup/KTX-Software]KTX[/url] file. Unlike most image formats, KTX can store VRAM-compressed data and embed mipmaps.
[b]Note:[/b] Godot's libktx implementation only supports 2D images. Cubemaps, texture arrays, and de-padding are not supported.
[b]Note:[/b] This method is only available in engine builds with the KTX module enabled. By default, the KTX module is enabled, but it can be disabled at build-time using the [code]module_ktx_enabled=no[/code] SCons option.
*/
//go:nosplit
func (self class) LoadKtxFromBuffer(buffer Packed.Bytes) Error.Code { //gd:Image.load_ktx_from_buffer
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.load_ktx_from_buffer, gdextension.SizeInt|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ buffer gdextension.PackedArray[byte] }{pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](buffer)))}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Loads an image from the UTF-8 binary contents of an [b]uncompressed[/b] SVG file ([b].svg[/b]).
[b]Note:[/b] Beware when using compressed SVG files (like [b].svgz[/b]), they need to be [code]decompressed[/code] before loading.
[b]Note:[/b] This method is only available in engine builds with the SVG module enabled. By default, the SVG module is enabled, but it can be disabled at build-time using the [code]module_svg_enabled=no[/code] SCons option.
*/
//go:nosplit
func (self class) LoadSvgFromBuffer(buffer Packed.Bytes, scale float64) Error.Code { //gd:Image.load_svg_from_buffer
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.load_svg_from_buffer, gdextension.SizeInt|(gdextension.SizePackedArray<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		buffer gdextension.PackedArray[byte]
		scale  float64
	}{pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](buffer))), scale}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Loads an image from the string contents of an SVG file ([b].svg[/b]).
[b]Note:[/b] This method is only available in engine builds with the SVG module enabled. By default, the SVG module is enabled, but it can be disabled at build-time using the [code]module_svg_enabled=no[/code] SCons option.
*/
//go:nosplit
func (self class) LoadSvgFromString(svg_str String.Readable, scale float64) Error.Code { //gd:Image.load_svg_from_string
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.load_svg_from_string, gdextension.SizeInt|(gdextension.SizeString<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		svg_str gdextension.String
		scale   float64
	}{pointers.Get(gd.InternalString(svg_str)), scale}))
	var ret = Error.Code(r_ret)
	return ret
}
func (self class) AsImage() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsImage() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsImage() Instance { return self.Super().AsImage() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("Image", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type Format int //gd:Image.Format

const (
	/*Texture format with a single 8-bit depth representing luminance.*/
	FormatL8 Format = 0
	/*OpenGL texture format with two values, luminance and alpha each stored with 8 bits.*/
	FormatLa8 Format = 1
	/*OpenGL texture format [code]RED[/code] with a single component and a bitdepth of 8.*/
	FormatR8 Format = 2
	/*OpenGL texture format [code]RG[/code] with two components and a bitdepth of 8 for each.*/
	FormatRg8 Format = 3
	/*OpenGL texture format [code]RGB[/code] with three components, each with a bitdepth of 8.
	  [b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.*/
	FormatRgb8 Format = 4
	/*OpenGL texture format [code]RGBA[/code] with four components, each with a bitdepth of 8.
	  [b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.*/
	FormatRgba8 Format = 5
	/*OpenGL texture format [code]RGBA[/code] with four components, each with a bitdepth of 4.*/
	FormatRgba4444 Format = 6
	/*OpenGL texture format [code]RGB[/code] with three components. Red and blue have a bitdepth of 5, and green has a bitdepth of 6.*/
	FormatRgb565 Format = 7
	/*OpenGL texture format [code]GL_R32F[/code] where there's one component, a 32-bit floating-point value.*/
	FormatRf Format = 8
	/*OpenGL texture format [code]GL_RG32F[/code] where there are two components, each a 32-bit floating-point values.*/
	FormatRgf Format = 9
	/*OpenGL texture format [code]GL_RGB32F[/code] where there are three components, each a 32-bit floating-point values.*/
	FormatRgbf Format = 10
	/*OpenGL texture format [code]GL_RGBA32F[/code] where there are four components, each a 32-bit floating-point values.*/
	FormatRgbaf Format = 11
	/*OpenGL texture format [code]GL_R16F[/code] where there's one component, a 16-bit "half-precision" floating-point value.*/
	FormatRh Format = 12
	/*OpenGL texture format [code]GL_RG16F[/code] where there are two components, each a 16-bit "half-precision" floating-point value.*/
	FormatRgh Format = 13
	/*OpenGL texture format [code]GL_RGB16F[/code] where there are three components, each a 16-bit "half-precision" floating-point value.*/
	FormatRgbh Format = 14
	/*OpenGL texture format [code]GL_RGBA16F[/code] where there are four components, each a 16-bit "half-precision" floating-point value.*/
	FormatRgbah Format = 15
	/*A special OpenGL texture format where the three color components have 9 bits of precision and all three share a single 5-bit exponent.*/
	FormatRgbe9995 Format = 16
	/*The [url=https://en.wikipedia.org/wiki/S3_Texture_Compression]S3TC[/url] texture format that uses Block Compression 1, and is the smallest variation of S3TC, only providing 1 bit of alpha and color data being premultiplied with alpha.
	  [b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.*/
	FormatDxt1 Format = 17
	/*The [url=https://en.wikipedia.org/wiki/S3_Texture_Compression]S3TC[/url] texture format that uses Block Compression 2, and color data is interpreted as not having been premultiplied by alpha. Well suited for images with sharp alpha transitions between translucent and opaque areas.
	  [b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.*/
	FormatDxt3 Format = 18
	/*The [url=https://en.wikipedia.org/wiki/S3_Texture_Compression]S3TC[/url] texture format also known as Block Compression 3 or BC3 that contains 64 bits of alpha channel data followed by 64 bits of DXT1-encoded color data. Color data is not premultiplied by alpha, same as DXT3. DXT5 generally produces superior results for transparent gradients compared to DXT3.
	  [b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.*/
	FormatDxt5 Format = 19
	/*Texture format that uses [url=https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression]Red Green Texture Compression[/url], normalizing the red channel data using the same compression algorithm that DXT5 uses for the alpha channel.*/
	FormatRgtcR Format = 20
	/*Texture format that uses [url=https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression]Red Green Texture Compression[/url], normalizing the red and green channel data using the same compression algorithm that DXT5 uses for the alpha channel.*/
	FormatRgtcRg Format = 21
	/*Texture format that uses [url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression]BPTC[/url] compression with unsigned normalized RGBA components.
	  [b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.*/
	FormatBptcRgba Format = 22
	/*Texture format that uses [url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression]BPTC[/url] compression with signed floating-point RGB components.*/
	FormatBptcRgbf Format = 23
	/*Texture format that uses [url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression]BPTC[/url] compression with unsigned floating-point RGB components.*/
	FormatBptcRgbfu Format = 24
	/*[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC1]Ericsson Texture Compression format 1[/url], also referred to as "ETC1", and is part of the OpenGL ES graphics standard. This format cannot store an alpha channel.*/
	FormatEtc Format = 25
	/*[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]R11_EAC[/code] variant), which provides one channel of unsigned data.*/
	FormatEtc2R11 Format = 26
	/*[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]SIGNED_R11_EAC[/code] variant), which provides one channel of signed data.*/
	FormatEtc2R11s Format = 27
	/*[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]RG11_EAC[/code] variant), which provides two channels of unsigned data.*/
	FormatEtc2Rg11 Format = 28
	/*[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]SIGNED_RG11_EAC[/code] variant), which provides two channels of signed data.*/
	FormatEtc2Rg11s Format = 29
	/*[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]RGB8[/code] variant), which is a follow-up of ETC1 and compresses RGB888 data.
	  [b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.*/
	FormatEtc2Rgb8 Format = 30
	/*[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]RGBA8[/code]variant), which compresses RGBA8888 data with full alpha support.
	  [b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.*/
	FormatEtc2Rgba8 Format = 31
	/*[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]RGB8_PUNCHTHROUGH_ALPHA1[/code] variant), which compresses RGBA data to make alpha either fully transparent or fully opaque.
	  [b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.*/
	FormatEtc2Rgb8a1 Format = 32
	/*[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]RGBA8[/code] variant), which compresses RA data and interprets it as two channels (red and green). See also [constant FORMAT_ETC2_RGBA8].*/
	FormatEtc2RaAsRg Format = 33
	/*The [url=https://en.wikipedia.org/wiki/S3_Texture_Compression]S3TC[/url] texture format also known as Block Compression 3 or BC3, which compresses RA data and interprets it as two channels (red and green). See also [constant FORMAT_DXT5].*/
	FormatDxt5RaAsRg Format = 34
	/*[url=https://en.wikipedia.org/wiki/Adaptive_scalable_texture_compression]Adaptive Scalable Texture Compression[/url]. This implements the 4Ã—4 (high quality) mode.*/
	FormatAstc4x4 Format = 35
	/*Same format as [constant FORMAT_ASTC_4x4], but with the hint to let the GPU know it is used for HDR.*/
	FormatAstc4x4Hdr Format = 36
	/*[url=https://en.wikipedia.org/wiki/Adaptive_scalable_texture_compression]Adaptive Scalable Texture Compression[/url]. This implements the 8Ã—8 (low quality) mode.*/
	FormatAstc8x8 Format = 37
	/*Same format as [constant FORMAT_ASTC_8x8], but with the hint to let the GPU know it is used for HDR.*/
	FormatAstc8x8Hdr Format = 38
	/*Represents the size of the [enum Format] enum.*/
	FormatMax Format = 39
)

type Interpolation int //gd:Image.Interpolation

const (
	/*Performs nearest-neighbor interpolation. If the image is resized, it will be pixelated.*/
	InterpolateNearest Interpolation = 0
	/*Performs bilinear interpolation. If the image is resized, it will be blurry. This mode is faster than [constant INTERPOLATE_CUBIC], but it results in lower quality.*/
	InterpolateBilinear Interpolation = 1
	/*Performs cubic interpolation. If the image is resized, it will be blurry. This mode often gives better results compared to [constant INTERPOLATE_BILINEAR], at the cost of being slower.*/
	InterpolateCubic Interpolation = 2
	/*Performs bilinear separately on the two most-suited mipmap levels, then linearly interpolates between them.
	  It's slower than [constant INTERPOLATE_BILINEAR], but produces higher-quality results with far fewer aliasing artifacts.
	  If the image does not have mipmaps, they will be generated and used internally, but no mipmaps will be generated on the resulting image.
	  [b]Note:[/b] If you intend to scale multiple copies of the original image, it's better to call [method generate_mipmaps]] on it in advance, to avoid wasting processing power in generating them again and again.
	  On the other hand, if the image already has mipmaps, they will be used, and a new set will be generated for the resulting image.*/
	InterpolateTrilinear Interpolation = 3
	/*Performs Lanczos interpolation. This is the slowest image resizing mode, but it typically gives the best results, especially when downscaling images.*/
	InterpolateLanczos Interpolation = 4
)

type AlphaMode int //gd:Image.AlphaMode

const (
	/*Image does not have alpha.*/
	AlphaNone AlphaMode = 0
	/*Image stores alpha in a single bit.*/
	AlphaBit AlphaMode = 1
	/*Image uses alpha.*/
	AlphaBlend AlphaMode = 2
)

type CompressMode int //gd:Image.CompressMode

const (
	/*Use S3TC compression.*/
	CompressS3tc CompressMode = 0
	/*Use ETC compression.*/
	CompressEtc CompressMode = 1
	/*Use ETC2 compression.*/
	CompressEtc2 CompressMode = 2
	/*Use BPTC compression.*/
	CompressBptc CompressMode = 3
	/*Use ASTC compression.*/
	CompressAstc CompressMode = 4
	/*Represents the size of the [enum CompressMode] enum.*/
	CompressMax CompressMode = 5
)

type UsedChannels int //gd:Image.UsedChannels

const (
	/*The image only uses one channel for luminance (grayscale).*/
	UsedChannelsL UsedChannels = 0
	/*The image uses two channels for luminance and alpha, respectively.*/
	UsedChannelsLa UsedChannels = 1
	/*The image only uses the red channel.*/
	UsedChannelsR UsedChannels = 2
	/*The image uses two channels for red and green.*/
	UsedChannelsRg UsedChannels = 3
	/*The image uses three channels for red, green, and blue.*/
	UsedChannelsRgb UsedChannels = 4
	/*The image uses four channels for red, green, blue, and alpha.*/
	UsedChannelsRgba UsedChannels = 5
)

type CompressSource int //gd:Image.CompressSource

const (
	/*Source texture (before compression) is a regular texture. Default for all textures.*/
	CompressSourceGeneric CompressSource = 0
	/*Source texture (before compression) is in sRGB space.*/
	CompressSourceSrgb CompressSource = 1
	/*Source texture (before compression) is a normal texture (e.g. it can be compressed into two channels).*/
	CompressSourceNormal CompressSource = 2
)

type ASTCFormat int //gd:Image.ASTCFormat

const (
	/*Hint to indicate that the high quality 4Ã—4 ASTC compression format should be used.*/
	AstcFormat4x4 ASTCFormat = 0
	/*Hint to indicate that the low quality 8Ã—8 ASTC compression format should be used.*/
	AstcFormat8x8 ASTCFormat = 1
)

type Metrics struct {
	Max             float32 `gd:"max"`
	Mean            float32 `gd:"mean"`
	MeanSquared     float32 `gd:"mean_squared"`
	RootMeanSquared float32 `gd:"root_mean_squared"`
	PeakSNR         float32 `gd:"peak_snr"`
}

const MaxWidth = 1.6777216e+07  //gd:Image.MAX_WIDTH
const MaxHeight = 1.6777216e+07 //gd:Image.MAX_HEIGHT
