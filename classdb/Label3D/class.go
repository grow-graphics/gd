// Code generated by the generate package DO NOT EDIT

// Package Label3D provides methods for working with Label3D object instances.
package Label3D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/BaseMaterial3D"
import "graphics.gd/classdb/Font"
import "graphics.gd/classdb/GUI"
import "graphics.gd/classdb/GeometryInstance3D"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/classdb/TextServer"
import "graphics.gd/classdb/TriangleMesh"
import "graphics.gd/classdb/VisualInstance3D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A node for displaying plain text in 3D space. By adjusting various properties of this node, you can configure things such as the text's appearance and whether it always faces the camera.
*/
type Instance [1]gdclass.Label3D

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_horizontal_alignment                  gdextension.MethodForClass `hash:"2312603777"`
	get_horizontal_alignment                  gdextension.MethodForClass `hash:"341400642"`
	set_vertical_alignment                    gdextension.MethodForClass `hash:"1796458609"`
	get_vertical_alignment                    gdextension.MethodForClass `hash:"3274884059"`
	set_modulate                              gdextension.MethodForClass `hash:"2920490490"`
	get_modulate                              gdextension.MethodForClass `hash:"3444240500"`
	set_outline_modulate                      gdextension.MethodForClass `hash:"2920490490"`
	get_outline_modulate                      gdextension.MethodForClass `hash:"3444240500"`
	set_text                                  gdextension.MethodForClass `hash:"83702148"`
	get_text                                  gdextension.MethodForClass `hash:"201670096"`
	set_text_direction                        gdextension.MethodForClass `hash:"1418190634"`
	get_text_direction                        gdextension.MethodForClass `hash:"2516697328"`
	set_language                              gdextension.MethodForClass `hash:"83702148"`
	get_language                              gdextension.MethodForClass `hash:"201670096"`
	set_structured_text_bidi_override         gdextension.MethodForClass `hash:"55961453"`
	get_structured_text_bidi_override         gdextension.MethodForClass `hash:"3385126229"`
	set_structured_text_bidi_override_options gdextension.MethodForClass `hash:"381264803"`
	get_structured_text_bidi_override_options gdextension.MethodForClass `hash:"3995934104"`
	set_uppercase                             gdextension.MethodForClass `hash:"2586408642"`
	is_uppercase                              gdextension.MethodForClass `hash:"36873697"`
	set_render_priority                       gdextension.MethodForClass `hash:"1286410249"`
	get_render_priority                       gdextension.MethodForClass `hash:"3905245786"`
	set_outline_render_priority               gdextension.MethodForClass `hash:"1286410249"`
	get_outline_render_priority               gdextension.MethodForClass `hash:"3905245786"`
	set_font                                  gdextension.MethodForClass `hash:"1262170328"`
	get_font                                  gdextension.MethodForClass `hash:"3229501585"`
	set_font_size                             gdextension.MethodForClass `hash:"1286410249"`
	get_font_size                             gdextension.MethodForClass `hash:"3905245786"`
	set_outline_size                          gdextension.MethodForClass `hash:"1286410249"`
	get_outline_size                          gdextension.MethodForClass `hash:"3905245786"`
	set_line_spacing                          gdextension.MethodForClass `hash:"373806689"`
	get_line_spacing                          gdextension.MethodForClass `hash:"1740695150"`
	set_autowrap_mode                         gdextension.MethodForClass `hash:"3289138044"`
	get_autowrap_mode                         gdextension.MethodForClass `hash:"1549071663"`
	set_justification_flags                   gdextension.MethodForClass `hash:"2877345813"`
	get_justification_flags                   gdextension.MethodForClass `hash:"1583363614"`
	set_width                                 gdextension.MethodForClass `hash:"373806689"`
	get_width                                 gdextension.MethodForClass `hash:"1740695150"`
	set_pixel_size                            gdextension.MethodForClass `hash:"373806689"`
	get_pixel_size                            gdextension.MethodForClass `hash:"1740695150"`
	set_offset                                gdextension.MethodForClass `hash:"743155724"`
	get_offset                                gdextension.MethodForClass `hash:"3341600327"`
	set_draw_flag                             gdextension.MethodForClass `hash:"1285833066"`
	get_draw_flag                             gdextension.MethodForClass `hash:"259226453"`
	set_billboard_mode                        gdextension.MethodForClass `hash:"4202036497"`
	get_billboard_mode                        gdextension.MethodForClass `hash:"1283840139"`
	set_alpha_cut_mode                        gdextension.MethodForClass `hash:"2549142916"`
	get_alpha_cut_mode                        gdextension.MethodForClass `hash:"219468601"`
	set_alpha_scissor_threshold               gdextension.MethodForClass `hash:"373806689"`
	get_alpha_scissor_threshold               gdextension.MethodForClass `hash:"1740695150"`
	set_alpha_hash_scale                      gdextension.MethodForClass `hash:"373806689"`
	get_alpha_hash_scale                      gdextension.MethodForClass `hash:"1740695150"`
	set_alpha_antialiasing                    gdextension.MethodForClass `hash:"3212649852"`
	get_alpha_antialiasing                    gdextension.MethodForClass `hash:"2889939400"`
	set_alpha_antialiasing_edge               gdextension.MethodForClass `hash:"373806689"`
	get_alpha_antialiasing_edge               gdextension.MethodForClass `hash:"1740695150"`
	set_texture_filter                        gdextension.MethodForClass `hash:"22904437"`
	get_texture_filter                        gdextension.MethodForClass `hash:"3289213076"`
	generate_triangle_mesh                    gdextension.MethodForClass `hash:"3476533166"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("Label3D")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsLabel3D() Instance
}

/*
Returns a [TriangleMesh] with the label's vertices following its current configuration (such as its [member pixel_size]).
*/
func (self Instance) GenerateTriangleMesh() TriangleMesh.Instance { //gd:Label3D.generate_triangle_mesh
	return TriangleMesh.Instance(Advanced(self).GenerateTriangleMesh())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.Label3D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.Label3D)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.Label3D)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.Label3D)(unsafe.Pointer(&object))}
	object[0].Notification(0, false)
	return casted
}

func (self Instance) PixelSize() Float.X {
	return Float.X(Float.X(class(self).GetPixelSize()))
}

func (self Instance) SetPixelSize(value Float.X) {
	class(self).SetPixelSize(float64(value))
}

func (self Instance) Offset() Vector2.XY {
	return Vector2.XY(class(self).GetOffset())
}

func (self Instance) SetOffset(value Vector2.XY) {
	class(self).SetOffset(Vector2.XY(value))
}

func (self Instance) Billboard() BaseMaterial3D.BillboardMode {
	return BaseMaterial3D.BillboardMode(class(self).GetBillboardMode())
}

func (self Instance) SetBillboard(value BaseMaterial3D.BillboardMode) {
	class(self).SetBillboardMode(value)
}

func (self Instance) Shaded() bool {
	return bool(class(self).GetDrawFlag(0))
}

func (self Instance) SetShaded(value bool) {
	class(self).SetDrawFlag(0, value)
}

func (self Instance) DoubleSided() bool {
	return bool(class(self).GetDrawFlag(1))
}

func (self Instance) SetDoubleSided(value bool) {
	class(self).SetDrawFlag(1, value)
}

func (self Instance) NoDepthTest() bool {
	return bool(class(self).GetDrawFlag(2))
}

func (self Instance) SetNoDepthTest(value bool) {
	class(self).SetDrawFlag(2, value)
}

func (self Instance) FixedSize() bool {
	return bool(class(self).GetDrawFlag(3))
}

func (self Instance) SetFixedSize(value bool) {
	class(self).SetDrawFlag(3, value)
}

func (self Instance) AlphaCut() AlphaCutMode {
	return AlphaCutMode(class(self).GetAlphaCutMode())
}

func (self Instance) SetAlphaCut(value AlphaCutMode) {
	class(self).SetAlphaCutMode(value)
}

func (self Instance) AlphaScissorThreshold() Float.X {
	return Float.X(Float.X(class(self).GetAlphaScissorThreshold()))
}

func (self Instance) SetAlphaScissorThreshold(value Float.X) {
	class(self).SetAlphaScissorThreshold(float64(value))
}

func (self Instance) AlphaHashScale() Float.X {
	return Float.X(Float.X(class(self).GetAlphaHashScale()))
}

func (self Instance) SetAlphaHashScale(value Float.X) {
	class(self).SetAlphaHashScale(float64(value))
}

func (self Instance) AlphaAntialiasingMode() BaseMaterial3D.AlphaAntiAliasing {
	return BaseMaterial3D.AlphaAntiAliasing(class(self).GetAlphaAntialiasing())
}

func (self Instance) SetAlphaAntialiasingMode(value BaseMaterial3D.AlphaAntiAliasing) {
	class(self).SetAlphaAntialiasing(value)
}

func (self Instance) AlphaAntialiasingEdge() Float.X {
	return Float.X(Float.X(class(self).GetAlphaAntialiasingEdge()))
}

func (self Instance) SetAlphaAntialiasingEdge(value Float.X) {
	class(self).SetAlphaAntialiasingEdge(float64(value))
}

func (self Instance) TextureFilter() BaseMaterial3D.TextureFilter {
	return BaseMaterial3D.TextureFilter(class(self).GetTextureFilter())
}

func (self Instance) SetTextureFilter(value BaseMaterial3D.TextureFilter) {
	class(self).SetTextureFilter(value)
}

func (self Instance) RenderPriority() int {
	return int(int(class(self).GetRenderPriority()))
}

func (self Instance) SetRenderPriority(value int) {
	class(self).SetRenderPriority(int64(value))
}

func (self Instance) OutlineRenderPriority() int {
	return int(int(class(self).GetOutlineRenderPriority()))
}

func (self Instance) SetOutlineRenderPriority(value int) {
	class(self).SetOutlineRenderPriority(int64(value))
}

func (self Instance) Modulate() Color.RGBA {
	return Color.RGBA(class(self).GetModulate())
}

func (self Instance) SetModulate(value Color.RGBA) {
	class(self).SetModulate(Color.RGBA(value))
}

func (self Instance) OutlineModulate() Color.RGBA {
	return Color.RGBA(class(self).GetOutlineModulate())
}

func (self Instance) SetOutlineModulate(value Color.RGBA) {
	class(self).SetOutlineModulate(Color.RGBA(value))
}

func (self Instance) Text() string {
	return string(class(self).GetText().String())
}

func (self Instance) SetText(value string) {
	class(self).SetText(String.New(value))
}

func (self Instance) Font() Font.Instance {
	return Font.Instance(class(self).GetFont())
}

func (self Instance) SetFont(value Font.Instance) {
	class(self).SetFont(value)
}

func (self Instance) FontSize() int {
	return int(int(class(self).GetFontSize()))
}

func (self Instance) SetFontSize(value int) {
	class(self).SetFontSize(int64(value))
}

func (self Instance) OutlineSize() int {
	return int(int(class(self).GetOutlineSize()))
}

func (self Instance) SetOutlineSize(value int) {
	class(self).SetOutlineSize(int64(value))
}

func (self Instance) HorizontalAlignment() GUI.HorizontalAlignment {
	return GUI.HorizontalAlignment(class(self).GetHorizontalAlignment())
}

func (self Instance) SetHorizontalAlignment(value GUI.HorizontalAlignment) {
	class(self).SetHorizontalAlignment(value)
}

func (self Instance) VerticalAlignment() GUI.VerticalAlignment {
	return GUI.VerticalAlignment(class(self).GetVerticalAlignment())
}

func (self Instance) SetVerticalAlignment(value GUI.VerticalAlignment) {
	class(self).SetVerticalAlignment(value)
}

func (self Instance) Uppercase() bool {
	return bool(class(self).IsUppercase())
}

func (self Instance) SetUppercase(value bool) {
	class(self).SetUppercase(value)
}

func (self Instance) LineSpacing() Float.X {
	return Float.X(Float.X(class(self).GetLineSpacing()))
}

func (self Instance) SetLineSpacing(value Float.X) {
	class(self).SetLineSpacing(float64(value))
}

func (self Instance) AutowrapMode() TextServer.AutowrapMode {
	return TextServer.AutowrapMode(class(self).GetAutowrapMode())
}

func (self Instance) SetAutowrapMode(value TextServer.AutowrapMode) {
	class(self).SetAutowrapMode(value)
}

func (self Instance) JustificationFlags() TextServer.JustificationFlag {
	return TextServer.JustificationFlag(class(self).GetJustificationFlags())
}

func (self Instance) SetJustificationFlags(value TextServer.JustificationFlag) {
	class(self).SetJustificationFlags(value)
}

func (self Instance) Width() Float.X {
	return Float.X(Float.X(class(self).GetWidth()))
}

func (self Instance) SetWidth(value Float.X) {
	class(self).SetWidth(float64(value))
}

func (self Instance) TextDirection() TextServer.Direction {
	return TextServer.Direction(class(self).GetTextDirection())
}

func (self Instance) SetTextDirection(value TextServer.Direction) {
	class(self).SetTextDirection(value)
}

func (self Instance) Language() string {
	return string(class(self).GetLanguage().String())
}

func (self Instance) SetLanguage(value string) {
	class(self).SetLanguage(String.New(value))
}

func (self Instance) StructuredTextBidiOverride() TextServer.StructuredTextParser {
	return TextServer.StructuredTextParser(class(self).GetStructuredTextBidiOverride())
}

func (self Instance) SetStructuredTextBidiOverride(value TextServer.StructuredTextParser) {
	class(self).SetStructuredTextBidiOverride(value)
}

func (self Instance) StructuredTextBidiOverrideOptions() []any {
	return []any(gd.ArrayAs[[]any](gd.InternalArray(class(self).GetStructuredTextBidiOverrideOptions())))
}

func (self Instance) SetStructuredTextBidiOverrideOptions(value []any) {
	class(self).SetStructuredTextBidiOverrideOptions(gd.EngineArrayFromSlice(value))
}

//go:nosplit
func (self class) SetHorizontalAlignment(alignment GUI.HorizontalAlignment) { //gd:Label3D.set_horizontal_alignment
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_horizontal_alignment, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ alignment GUI.HorizontalAlignment }{alignment}))
}

//go:nosplit
func (self class) GetHorizontalAlignment() GUI.HorizontalAlignment { //gd:Label3D.get_horizontal_alignment
	var r_ret = gdextension.Call[GUI.HorizontalAlignment](gd.ObjectChecked(self.AsObject()), methods.get_horizontal_alignment, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVerticalAlignment(alignment GUI.VerticalAlignment) { //gd:Label3D.set_vertical_alignment
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_vertical_alignment, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ alignment GUI.VerticalAlignment }{alignment}))
}

//go:nosplit
func (self class) GetVerticalAlignment() GUI.VerticalAlignment { //gd:Label3D.get_vertical_alignment
	var r_ret = gdextension.Call[GUI.VerticalAlignment](gd.ObjectChecked(self.AsObject()), methods.get_vertical_alignment, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetModulate(modulate Color.RGBA) { //gd:Label3D.set_modulate
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_modulate, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ modulate Color.RGBA }{modulate}))
}

//go:nosplit
func (self class) GetModulate() Color.RGBA { //gd:Label3D.get_modulate
	var r_ret = gdextension.Call[Color.RGBA](gd.ObjectChecked(self.AsObject()), methods.get_modulate, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetOutlineModulate(modulate Color.RGBA) { //gd:Label3D.set_outline_modulate
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_outline_modulate, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ modulate Color.RGBA }{modulate}))
}

//go:nosplit
func (self class) GetOutlineModulate() Color.RGBA { //gd:Label3D.get_outline_modulate
	var r_ret = gdextension.Call[Color.RGBA](gd.ObjectChecked(self.AsObject()), methods.get_outline_modulate, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetText(text String.Readable) { //gd:Label3D.set_text
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_text, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ text gdextension.String }{pointers.Get(gd.InternalString(text))}))
}

//go:nosplit
func (self class) GetText() String.Readable { //gd:Label3D.get_text
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_text, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetTextDirection(direction TextServer.Direction) { //gd:Label3D.set_text_direction
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_text_direction, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ direction TextServer.Direction }{direction}))
}

//go:nosplit
func (self class) GetTextDirection() TextServer.Direction { //gd:Label3D.get_text_direction
	var r_ret = gdextension.Call[TextServer.Direction](gd.ObjectChecked(self.AsObject()), methods.get_text_direction, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetLanguage(language String.Readable) { //gd:Label3D.set_language
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_language, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ language gdextension.String }{pointers.Get(gd.InternalString(language))}))
}

//go:nosplit
func (self class) GetLanguage() String.Readable { //gd:Label3D.get_language
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_language, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetStructuredTextBidiOverride(parser TextServer.StructuredTextParser) { //gd:Label3D.set_structured_text_bidi_override
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_structured_text_bidi_override, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct {
		parser TextServer.StructuredTextParser
	}{parser}))
}

//go:nosplit
func (self class) GetStructuredTextBidiOverride() TextServer.StructuredTextParser { //gd:Label3D.get_structured_text_bidi_override
	var r_ret = gdextension.Call[TextServer.StructuredTextParser](gd.ObjectChecked(self.AsObject()), methods.get_structured_text_bidi_override, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetStructuredTextBidiOverrideOptions(args Array.Any) { //gd:Label3D.set_structured_text_bidi_override_options
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_structured_text_bidi_override_options, 0|(gdextension.SizeArray<<4), unsafe.Pointer(&struct{ args gdextension.Array }{pointers.Get(gd.InternalArray(args))}))
}

//go:nosplit
func (self class) GetStructuredTextBidiOverrideOptions() Array.Any { //gd:Label3D.get_structured_text_bidi_override_options
	var r_ret = gdextension.Call[gdextension.Array](gd.ObjectChecked(self.AsObject()), methods.get_structured_text_bidi_override_options, gdextension.SizeArray, unsafe.Pointer(&struct{}{}))
	var ret = Array.Through(gd.ArrayProxy[variant.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetUppercase(enable bool) { //gd:Label3D.set_uppercase
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_uppercase, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) IsUppercase() bool { //gd:Label3D.is_uppercase
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_uppercase, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRenderPriority(priority int64) { //gd:Label3D.set_render_priority
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_render_priority, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ priority int64 }{priority}))
}

//go:nosplit
func (self class) GetRenderPriority() int64 { //gd:Label3D.get_render_priority
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_render_priority, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetOutlineRenderPriority(priority int64) { //gd:Label3D.set_outline_render_priority
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_outline_render_priority, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ priority int64 }{priority}))
}

//go:nosplit
func (self class) GetOutlineRenderPriority() int64 { //gd:Label3D.get_outline_render_priority
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_outline_render_priority, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFont(font [1]gdclass.Font) { //gd:Label3D.set_font
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_font, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ font gdextension.Object }{gdextension.Object(gd.ObjectChecked(font[0].AsObject()))}))
}

//go:nosplit
func (self class) GetFont() [1]gdclass.Font { //gd:Label3D.get_font
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_font, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Font{gd.PointerWithOwnershipTransferredToGo[gdclass.Font](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetFontSize(size int64) { //gd:Label3D.set_font_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_font_size, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ size int64 }{size}))
}

//go:nosplit
func (self class) GetFontSize() int64 { //gd:Label3D.get_font_size
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_font_size, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetOutlineSize(outline_size int64) { //gd:Label3D.set_outline_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_outline_size, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ outline_size int64 }{outline_size}))
}

//go:nosplit
func (self class) GetOutlineSize() int64 { //gd:Label3D.get_outline_size
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_outline_size, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetLineSpacing(line_spacing float64) { //gd:Label3D.set_line_spacing
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_line_spacing, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ line_spacing float64 }{line_spacing}))
}

//go:nosplit
func (self class) GetLineSpacing() float64 { //gd:Label3D.get_line_spacing
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_line_spacing, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAutowrapMode(autowrap_mode TextServer.AutowrapMode) { //gd:Label3D.set_autowrap_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_autowrap_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ autowrap_mode TextServer.AutowrapMode }{autowrap_mode}))
}

//go:nosplit
func (self class) GetAutowrapMode() TextServer.AutowrapMode { //gd:Label3D.get_autowrap_mode
	var r_ret = gdextension.Call[TextServer.AutowrapMode](gd.ObjectChecked(self.AsObject()), methods.get_autowrap_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetJustificationFlags(justification_flags TextServer.JustificationFlag) { //gd:Label3D.set_justification_flags
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_justification_flags, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ justification_flags TextServer.JustificationFlag }{justification_flags}))
}

//go:nosplit
func (self class) GetJustificationFlags() TextServer.JustificationFlag { //gd:Label3D.get_justification_flags
	var r_ret = gdextension.Call[TextServer.JustificationFlag](gd.ObjectChecked(self.AsObject()), methods.get_justification_flags, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWidth(width float64) { //gd:Label3D.set_width
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_width, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ width float64 }{width}))
}

//go:nosplit
func (self class) GetWidth() float64 { //gd:Label3D.get_width
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_width, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPixelSize(pixel_size float64) { //gd:Label3D.set_pixel_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pixel_size, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ pixel_size float64 }{pixel_size}))
}

//go:nosplit
func (self class) GetPixelSize() float64 { //gd:Label3D.get_pixel_size
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_pixel_size, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetOffset(offset Vector2.XY) { //gd:Label3D.set_offset
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_offset, 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ offset Vector2.XY }{offset}))
}

//go:nosplit
func (self class) GetOffset() Vector2.XY { //gd:Label3D.get_offset
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_offset, gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
If [code]true[/code], the specified flag will be enabled. See [enum Label3D.DrawFlags] for a list of flags.
*/
//go:nosplit
func (self class) SetDrawFlag(flag DrawFlags, enabled bool) { //gd:Label3D.set_draw_flag
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_draw_flag, 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		flag    DrawFlags
		enabled bool
	}{flag, enabled}))
}

/*
Returns the value of the specified flag.
*/
//go:nosplit
func (self class) GetDrawFlag(flag DrawFlags) bool { //gd:Label3D.get_draw_flag
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_draw_flag, gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ flag DrawFlags }{flag}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBillboardMode(mode BaseMaterial3D.BillboardMode) { //gd:Label3D.set_billboard_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_billboard_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode BaseMaterial3D.BillboardMode }{mode}))
}

//go:nosplit
func (self class) GetBillboardMode() BaseMaterial3D.BillboardMode { //gd:Label3D.get_billboard_mode
	var r_ret = gdextension.Call[BaseMaterial3D.BillboardMode](gd.ObjectChecked(self.AsObject()), methods.get_billboard_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAlphaCutMode(mode AlphaCutMode) { //gd:Label3D.set_alpha_cut_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_alpha_cut_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode AlphaCutMode }{mode}))
}

//go:nosplit
func (self class) GetAlphaCutMode() AlphaCutMode { //gd:Label3D.get_alpha_cut_mode
	var r_ret = gdextension.Call[AlphaCutMode](gd.ObjectChecked(self.AsObject()), methods.get_alpha_cut_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAlphaScissorThreshold(threshold float64) { //gd:Label3D.set_alpha_scissor_threshold
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_alpha_scissor_threshold, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ threshold float64 }{threshold}))
}

//go:nosplit
func (self class) GetAlphaScissorThreshold() float64 { //gd:Label3D.get_alpha_scissor_threshold
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_alpha_scissor_threshold, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAlphaHashScale(threshold float64) { //gd:Label3D.set_alpha_hash_scale
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_alpha_hash_scale, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ threshold float64 }{threshold}))
}

//go:nosplit
func (self class) GetAlphaHashScale() float64 { //gd:Label3D.get_alpha_hash_scale
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_alpha_hash_scale, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAlphaAntialiasing(alpha_aa BaseMaterial3D.AlphaAntiAliasing) { //gd:Label3D.set_alpha_antialiasing
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_alpha_antialiasing, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct {
		alpha_aa BaseMaterial3D.AlphaAntiAliasing
	}{alpha_aa}))
}

//go:nosplit
func (self class) GetAlphaAntialiasing() BaseMaterial3D.AlphaAntiAliasing { //gd:Label3D.get_alpha_antialiasing
	var r_ret = gdextension.Call[BaseMaterial3D.AlphaAntiAliasing](gd.ObjectChecked(self.AsObject()), methods.get_alpha_antialiasing, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAlphaAntialiasingEdge(edge float64) { //gd:Label3D.set_alpha_antialiasing_edge
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_alpha_antialiasing_edge, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ edge float64 }{edge}))
}

//go:nosplit
func (self class) GetAlphaAntialiasingEdge() float64 { //gd:Label3D.get_alpha_antialiasing_edge
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_alpha_antialiasing_edge, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTextureFilter(mode BaseMaterial3D.TextureFilter) { //gd:Label3D.set_texture_filter
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_texture_filter, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode BaseMaterial3D.TextureFilter }{mode}))
}

//go:nosplit
func (self class) GetTextureFilter() BaseMaterial3D.TextureFilter { //gd:Label3D.get_texture_filter
	var r_ret = gdextension.Call[BaseMaterial3D.TextureFilter](gd.ObjectChecked(self.AsObject()), methods.get_texture_filter, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns a [TriangleMesh] with the label's vertices following its current configuration (such as its [member pixel_size]).
*/
//go:nosplit
func (self class) GenerateTriangleMesh() [1]gdclass.TriangleMesh { //gd:Label3D.generate_triangle_mesh
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.generate_triangle_mesh, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.TriangleMesh{gd.PointerWithOwnershipTransferredToGo[gdclass.TriangleMesh](r_ret)}
	return ret
}
func (self class) AsLabel3D() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsLabel3D() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsLabel3D() Instance { return self.Super().AsLabel3D() }
func (self class) AsGeometryInstance3D() GeometryInstance3D.Advanced {
	return *((*GeometryInstance3D.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsGeometryInstance3D() GeometryInstance3D.Instance {
	return self.Super().AsGeometryInstance3D()
}
func (self Instance) AsGeometryInstance3D() GeometryInstance3D.Instance {
	return *((*GeometryInstance3D.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsVisualInstance3D() VisualInstance3D.Advanced {
	return *((*VisualInstance3D.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisualInstance3D() VisualInstance3D.Instance {
	return self.Super().AsVisualInstance3D()
}
func (self Instance) AsVisualInstance3D() VisualInstance3D.Instance {
	return *((*VisualInstance3D.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode3D() Node3D.Advanced         { return *((*Node3D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode3D() Node3D.Instance { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance      { return *((*Node3D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsNode() Node.Advanced             { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance     { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance          { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(GeometryInstance3D.Advanced(self.AsGeometryInstance3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(GeometryInstance3D.Instance(self.AsGeometryInstance3D()), name)
	}
}
func init() {
	gdclass.Register("Label3D", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type DrawFlags int //gd:Label3D.DrawFlags

const (
	/*If set, lights in the environment affect the label.*/
	FlagShaded DrawFlags = 0
	/*If set, text can be seen from the back as well. If not, the text is invisible when looking at it from behind.*/
	FlagDoubleSided DrawFlags = 1
	/*Disables the depth test, so this object is drawn on top of all others. However, objects drawn after it in the draw order may cover it.*/
	FlagDisableDepthTest DrawFlags = 2
	/*Label is scaled by depth so that it always appears the same size on screen.*/
	FlagFixedSize DrawFlags = 3
	/*Represents the size of the [enum DrawFlags] enum.*/
	FlagMax DrawFlags = 4
)

type AlphaCutMode int //gd:Label3D.AlphaCutMode

const (
	/*This mode performs standard alpha blending. It can display translucent areas, but transparency sorting issues may be visible when multiple transparent materials are overlapping. [member GeometryInstance3D.cast_shadow] has no effect when this transparency mode is used; the [Label3D] will never cast shadows.*/
	AlphaCutDisabled AlphaCutMode = 0
	/*This mode only allows fully transparent or fully opaque pixels. Harsh edges will be visible unless some form of screen-space antialiasing is enabled (see [member ProjectSettings.rendering/anti_aliasing/quality/screen_space_aa]). This mode is also known as [i]alpha testing[/i] or [i]1-bit transparency[/i].
	  [b]Note:[/b] This mode might have issues with anti-aliased fonts and outlines, try adjusting [member alpha_scissor_threshold] or using MSDF font.
	  [b]Note:[/b] When using text with overlapping glyphs (e.g., cursive scripts), this mode might have transparency sorting issues between the main text and the outline.*/
	AlphaCutDiscard AlphaCutMode = 1
	/*This mode draws fully opaque pixels in the depth prepass. This is slower than [constant ALPHA_CUT_DISABLED] or [constant ALPHA_CUT_DISCARD], but it allows displaying translucent areas and smooth edges while using proper sorting.
	  [b]Note:[/b] When using text with overlapping glyphs (e.g., cursive scripts), this mode might have transparency sorting issues between the main text and the outline.*/
	AlphaCutOpaquePrepass AlphaCutMode = 2
	/*This mode draws cuts off all values below a spatially-deterministic threshold, the rest will remain opaque.*/
	AlphaCutHash AlphaCutMode = 3
)
