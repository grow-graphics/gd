// Code generated by the generate package DO NOT EDIT

// Package TileMapPattern provides methods for working with TileMapPattern object instances.
package TileMapPattern

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2i"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This resource holds a set of cells to help bulk manipulations of [TileMap].
A pattern always start at the [code](0,0)[/code] coordinates and cannot have cells with negative coordinates.
*/
type Instance [1]gdclass.TileMapPattern

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_cell                  gdextension.MethodForClass `hash:"2224802556"`
	has_cell                  gdextension.MethodForClass `hash:"3900751641"`
	remove_cell               gdextension.MethodForClass `hash:"4153096796"`
	get_cell_source_id        gdextension.MethodForClass `hash:"2485466453"`
	get_cell_atlas_coords     gdextension.MethodForClass `hash:"3050897911"`
	get_cell_alternative_tile gdextension.MethodForClass `hash:"2485466453"`
	get_used_cells            gdextension.MethodForClass `hash:"3995934104"`
	get_size                  gdextension.MethodForClass `hash:"3690982128"`
	set_size                  gdextension.MethodForClass `hash:"1130785943"`
	is_empty                  gdextension.MethodForClass `hash:"36873697"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("TileMapPattern")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.TileMapPattern

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsTileMapPattern() Instance
}

/*
Sets the tile identifiers for the cell at coordinates [param coords]. See [method TileMap.set_cell].
*/
func (self Instance) SetCell(coords Vector2i.XY) { //gd:TileMapPattern.set_cell
	Advanced(self).SetCell(Vector2i.XY(coords), int64(-1), Vector2i.XY(gd.Vector2i{-1, -1}), int64(-1))
}

/*
Sets the tile identifiers for the cell at coordinates [param coords]. See [method TileMap.set_cell].
*/
func (self Expanded) SetCell(coords Vector2i.XY, source_id int, atlas_coords Vector2i.XY, alternative_tile int) { //gd:TileMapPattern.set_cell
	Advanced(self).SetCell(Vector2i.XY(coords), int64(source_id), Vector2i.XY(atlas_coords), int64(alternative_tile))
}

/*
Returns whether the pattern has a tile at the given coordinates.
*/
func (self Instance) HasCell(coords Vector2i.XY) bool { //gd:TileMapPattern.has_cell
	return bool(Advanced(self).HasCell(Vector2i.XY(coords)))
}

/*
Remove the cell at the given coordinates.
*/
func (self Instance) RemoveCell(coords Vector2i.XY, update_size bool) { //gd:TileMapPattern.remove_cell
	Advanced(self).RemoveCell(Vector2i.XY(coords), update_size)
}

/*
Returns the tile source ID of the cell at [param coords].
*/
func (self Instance) GetCellSourceId(coords Vector2i.XY) int { //gd:TileMapPattern.get_cell_source_id
	return int(int(Advanced(self).GetCellSourceId(Vector2i.XY(coords))))
}

/*
Returns the tile atlas coordinates ID of the cell at [param coords].
*/
func (self Instance) GetCellAtlasCoords(coords Vector2i.XY) Vector2i.XY { //gd:TileMapPattern.get_cell_atlas_coords
	return Vector2i.XY(Advanced(self).GetCellAtlasCoords(Vector2i.XY(coords)))
}

/*
Returns the tile alternative ID of the cell at [param coords].
*/
func (self Instance) GetCellAlternativeTile(coords Vector2i.XY) int { //gd:TileMapPattern.get_cell_alternative_tile
	return int(int(Advanced(self).GetCellAlternativeTile(Vector2i.XY(coords))))
}

/*
Returns the list of used cell coordinates in the pattern.
*/
func (self Instance) GetUsedCells() []Vector2i.XY { //gd:TileMapPattern.get_used_cells
	return []Vector2i.XY(gd.ArrayAs[[]Vector2i.XY](gd.InternalArray(Advanced(self).GetUsedCells())))
}

/*
Returns the size, in cells, of the pattern.
*/
func (self Instance) GetSize() Vector2i.XY { //gd:TileMapPattern.get_size
	return Vector2i.XY(Advanced(self).GetSize())
}

/*
Sets the size of the pattern.
*/
func (self Instance) SetSize(size Vector2i.XY) { //gd:TileMapPattern.set_size
	Advanced(self).SetSize(Vector2i.XY(size))
}

/*
Returns whether the pattern is empty or not.
*/
func (self Instance) IsEmpty() bool { //gd:TileMapPattern.is_empty
	return bool(Advanced(self).IsEmpty())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.TileMapPattern

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.TileMapPattern)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.TileMapPattern)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.TileMapPattern)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

/*
Sets the tile identifiers for the cell at coordinates [param coords]. See [method TileMap.set_cell].
*/
//go:nosplit
func (self class) SetCell(coords Vector2i.XY, source_id int64, atlas_coords Vector2i.XY, alternative_tile int64) { //gd:TileMapPattern.set_cell
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_cell, 0|(gdextension.SizeVector2i<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeVector2i<<12)|(gdextension.SizeInt<<16), unsafe.Pointer(&struct {
		coords           Vector2i.XY
		source_id        int64
		atlas_coords     Vector2i.XY
		alternative_tile int64
	}{coords, source_id, atlas_coords, alternative_tile}))
}

/*
Returns whether the pattern has a tile at the given coordinates.
*/
//go:nosplit
func (self class) HasCell(coords Vector2i.XY) bool { //gd:TileMapPattern.has_cell
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.has_cell, gdextension.SizeBool|(gdextension.SizeVector2i<<4), unsafe.Pointer(&struct{ coords Vector2i.XY }{coords}))
	var ret = r_ret
	return ret
}

/*
Remove the cell at the given coordinates.
*/
//go:nosplit
func (self class) RemoveCell(coords Vector2i.XY, update_size bool) { //gd:TileMapPattern.remove_cell
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_cell, 0|(gdextension.SizeVector2i<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		coords      Vector2i.XY
		update_size bool
	}{coords, update_size}))
}

/*
Returns the tile source ID of the cell at [param coords].
*/
//go:nosplit
func (self class) GetCellSourceId(coords Vector2i.XY) int64 { //gd:TileMapPattern.get_cell_source_id
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_cell_source_id, gdextension.SizeInt|(gdextension.SizeVector2i<<4), unsafe.Pointer(&struct{ coords Vector2i.XY }{coords}))
	var ret = r_ret
	return ret
}

/*
Returns the tile atlas coordinates ID of the cell at [param coords].
*/
//go:nosplit
func (self class) GetCellAtlasCoords(coords Vector2i.XY) Vector2i.XY { //gd:TileMapPattern.get_cell_atlas_coords
	var r_ret = gdextension.Call[Vector2i.XY](gd.ObjectChecked(self.AsObject()), methods.get_cell_atlas_coords, gdextension.SizeVector2i|(gdextension.SizeVector2i<<4), unsafe.Pointer(&struct{ coords Vector2i.XY }{coords}))
	var ret = r_ret
	return ret
}

/*
Returns the tile alternative ID of the cell at [param coords].
*/
//go:nosplit
func (self class) GetCellAlternativeTile(coords Vector2i.XY) int64 { //gd:TileMapPattern.get_cell_alternative_tile
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_cell_alternative_tile, gdextension.SizeInt|(gdextension.SizeVector2i<<4), unsafe.Pointer(&struct{ coords Vector2i.XY }{coords}))
	var ret = r_ret
	return ret
}

/*
Returns the list of used cell coordinates in the pattern.
*/
//go:nosplit
func (self class) GetUsedCells() Array.Contains[Vector2i.XY] { //gd:TileMapPattern.get_used_cells
	var r_ret = gdextension.Call[gdextension.Array](gd.ObjectChecked(self.AsObject()), methods.get_used_cells, gdextension.SizeArray, unsafe.Pointer(&struct{}{}))
	var ret = Array.Through(gd.ArrayProxy[Vector2i.XY]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

/*
Returns the size, in cells, of the pattern.
*/
//go:nosplit
func (self class) GetSize() Vector2i.XY { //gd:TileMapPattern.get_size
	var r_ret = gdextension.Call[Vector2i.XY](gd.ObjectChecked(self.AsObject()), methods.get_size, gdextension.SizeVector2i, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets the size of the pattern.
*/
//go:nosplit
func (self class) SetSize(size Vector2i.XY) { //gd:TileMapPattern.set_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_size, 0|(gdextension.SizeVector2i<<4), unsafe.Pointer(&struct{ size Vector2i.XY }{size}))
}

/*
Returns whether the pattern is empty or not.
*/
//go:nosplit
func (self class) IsEmpty() bool { //gd:TileMapPattern.is_empty
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_empty, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsTileMapPattern() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsTileMapPattern() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsTileMapPattern() Instance { return self.Super().AsTileMapPattern() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("TileMapPattern", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
