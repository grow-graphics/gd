// Code generated by the generate package DO NOT EDIT

// Package RDShaderSPIRV provides methods for working with RDShaderSPIRV object instances.
package RDShaderSPIRV

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Rendering"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[RDShaderSPIRV] represents a [RDShaderFile]'s [url=https://www.khronos.org/spir/]SPIR-V[/url] code for various shader stages, as well as possible compilation error messages. SPIR-V is a low-level intermediate shader representation. This intermediate representation is not used directly by GPUs for rendering, but it can be compiled into binary shaders that GPUs can understand. Unlike compiled shaders, SPIR-V is portable across GPU models and driver versions.
This object is used by [RenderingDevice].
*/
type Instance [1]gdclass.RDShaderSPIRV

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsRDShaderSPIRV() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.RDShaderSPIRV

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("RDShaderSPIRV"))
	casted := Instance{*(*gdclass.RDShaderSPIRV)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) BytecodeVertex() []byte {
	return []byte(class(self).GetStageBytecode(0).Bytes())
}

func (self Instance) SetBytecodeVertex(value []byte) {
	class(self).SetStageBytecode(0, Packed.Bytes(Packed.New(value...)))
}

func (self Instance) BytecodeFragment() []byte {
	return []byte(class(self).GetStageBytecode(1).Bytes())
}

func (self Instance) SetBytecodeFragment(value []byte) {
	class(self).SetStageBytecode(1, Packed.Bytes(Packed.New(value...)))
}

func (self Instance) BytecodeTesselationControl() []byte {
	return []byte(class(self).GetStageBytecode(2).Bytes())
}

func (self Instance) SetBytecodeTesselationControl(value []byte) {
	class(self).SetStageBytecode(2, Packed.Bytes(Packed.New(value...)))
}

func (self Instance) BytecodeTesselationEvaluation() []byte {
	return []byte(class(self).GetStageBytecode(3).Bytes())
}

func (self Instance) SetBytecodeTesselationEvaluation(value []byte) {
	class(self).SetStageBytecode(3, Packed.Bytes(Packed.New(value...)))
}

func (self Instance) BytecodeCompute() []byte {
	return []byte(class(self).GetStageBytecode(4).Bytes())
}

func (self Instance) SetBytecodeCompute(value []byte) {
	class(self).SetStageBytecode(4, Packed.Bytes(Packed.New(value...)))
}

func (self Instance) CompileErrorVertex() string {
	return string(class(self).GetStageCompileError(0).String())
}

func (self Instance) SetCompileErrorVertex(value string) {
	class(self).SetStageCompileError(0, String.New(value))
}

func (self Instance) CompileErrorFragment() string {
	return string(class(self).GetStageCompileError(1).String())
}

func (self Instance) SetCompileErrorFragment(value string) {
	class(self).SetStageCompileError(1, String.New(value))
}

func (self Instance) CompileErrorTesselationControl() string {
	return string(class(self).GetStageCompileError(2).String())
}

func (self Instance) SetCompileErrorTesselationControl(value string) {
	class(self).SetStageCompileError(2, String.New(value))
}

func (self Instance) CompileErrorTesselationEvaluation() string {
	return string(class(self).GetStageCompileError(3).String())
}

func (self Instance) SetCompileErrorTesselationEvaluation(value string) {
	class(self).SetStageCompileError(3, String.New(value))
}

func (self Instance) CompileErrorCompute() string {
	return string(class(self).GetStageCompileError(4).String())
}

func (self Instance) SetCompileErrorCompute(value string) {
	class(self).SetStageCompileError(4, String.New(value))
}

/*
Sets the SPIR-V [param bytecode] for the given shader [param stage]. Equivalent to setting one of [member bytecode_compute], [member bytecode_fragment], [member bytecode_tesselation_control], [member bytecode_tesselation_evaluation], [member bytecode_vertex].
*/
//go:nosplit
func (self class) SetStageBytecode(stage Rendering.ShaderStage, bytecode Packed.Bytes) { //gd:RDShaderSPIRV.set_stage_bytecode
	var frame = callframe.New()
	callframe.Arg(frame, stage)
	callframe.Arg(frame, pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](bytecode))))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.RDShaderSPIRV.Bind_set_stage_bytecode, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Equivalent to getting one of [member bytecode_compute], [member bytecode_fragment], [member bytecode_tesselation_control], [member bytecode_tesselation_evaluation], [member bytecode_vertex].
*/
//go:nosplit
func (self class) GetStageBytecode(stage Rendering.ShaderStage) Packed.Bytes { //gd:RDShaderSPIRV.get_stage_bytecode
	var frame = callframe.New()
	callframe.Arg(frame, stage)
	var r_ret = callframe.Ret[gd.PackedPointers](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.RDShaderSPIRV.Bind_get_stage_bytecode, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret.Get()))))
	frame.Free()
	return ret
}

/*
Sets the compilation error message for the given shader [param stage] to [param compile_error]. Equivalent to setting one of [member compile_error_compute], [member compile_error_fragment], [member compile_error_tesselation_control], [member compile_error_tesselation_evaluation], [member compile_error_vertex].
*/
//go:nosplit
func (self class) SetStageCompileError(stage Rendering.ShaderStage, compile_error String.Readable) { //gd:RDShaderSPIRV.set_stage_compile_error
	var frame = callframe.New()
	callframe.Arg(frame, stage)
	callframe.Arg(frame, pointers.Get(gd.InternalString(compile_error)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.RDShaderSPIRV.Bind_set_stage_compile_error, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the compilation error message for the given shader [param stage]. Equivalent to getting one of [member compile_error_compute], [member compile_error_fragment], [member compile_error_tesselation_control], [member compile_error_tesselation_evaluation], [member compile_error_vertex].
*/
//go:nosplit
func (self class) GetStageCompileError(stage Rendering.ShaderStage) String.Readable { //gd:RDShaderSPIRV.get_stage_compile_error
	var frame = callframe.New()
	callframe.Arg(frame, stage)
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.RDShaderSPIRV.Bind_get_stage_compile_error, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}
func (self class) AsRDShaderSPIRV() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsRDShaderSPIRV() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsRDShaderSPIRV() Instance { return self.Super().AsRDShaderSPIRV() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("RDShaderSPIRV", func(ptr gd.Object) any {
		return [1]gdclass.RDShaderSPIRV{*(*gdclass.RDShaderSPIRV)(unsafe.Pointer(&ptr))}
	})
}
