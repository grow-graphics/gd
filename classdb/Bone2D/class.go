// Code generated by the generate package DO NOT EDIT

// Package Bone2D provides methods for working with Bone2D object instances.
package Bone2D

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node2D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Transform2D"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A hierarchy of [Bone2D]s can be bound to a [Skeleton2D] to control and animate other [Node2D] nodes.
You can use [Bone2D] and [Skeleton2D] nodes to animate 2D meshes created with the [Polygon2D] UV editor.
Each bone has a [member rest] transform that you can reset to with [method apply_rest]. These rest poses are relative to the bone's parent.
If in the editor, you can set the rest pose of an entire skeleton using a menu option, from the code, you need to iterate over the bones to set their individual rest poses.
*/
type Instance [1]gdclass.Bone2D

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_rest                           gdextension.MethodForClass `hash:"2761652528"`
	get_rest                           gdextension.MethodForClass `hash:"3814499831"`
	apply_rest                         gdextension.MethodForClass `hash:"3218959716"`
	get_skeleton_rest                  gdextension.MethodForClass `hash:"3814499831"`
	get_index_in_skeleton              gdextension.MethodForClass `hash:"3905245786"`
	set_autocalculate_length_and_angle gdextension.MethodForClass `hash:"2586408642"`
	get_autocalculate_length_and_angle gdextension.MethodForClass `hash:"36873697"`
	set_length                         gdextension.MethodForClass `hash:"373806689"`
	get_length                         gdextension.MethodForClass `hash:"1740695150"`
	set_bone_angle                     gdextension.MethodForClass `hash:"373806689"`
	get_bone_angle                     gdextension.MethodForClass `hash:"1740695150"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("Bone2D")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsBone2D() Instance
}

/*
Resets the bone to the rest pose. This is equivalent to setting [member Node2D.transform] to [member rest].
*/
func (self Instance) ApplyRest() { //gd:Bone2D.apply_rest
	Advanced(self).ApplyRest()
}

/*
Returns the node's [member rest] [Transform2D] if it doesn't have a parent, or its rest pose relative to its parent.
*/
func (self Instance) GetSkeletonRest() Transform2D.OriginXY { //gd:Bone2D.get_skeleton_rest
	return Transform2D.OriginXY(Advanced(self).GetSkeletonRest())
}

/*
Returns the node's index as part of the entire skeleton. See [Skeleton2D].
*/
func (self Instance) GetIndexInSkeleton() int { //gd:Bone2D.get_index_in_skeleton
	return int(int(Advanced(self).GetIndexInSkeleton()))
}

/*
When set to [code]true[/code], the [Bone2D] node will attempt to automatically calculate the bone angle and length using the first child [Bone2D] node, if one exists. If none exist, the [Bone2D] cannot automatically calculate these values and will print a warning.
*/
func (self Instance) SetAutocalculateLengthAndAngle(auto_calculate bool) { //gd:Bone2D.set_autocalculate_length_and_angle
	Advanced(self).SetAutocalculateLengthAndAngle(auto_calculate)
}

/*
Returns whether this [Bone2D] is going to autocalculate its length and bone angle using its first [Bone2D] child node, if one exists. If there are no [Bone2D] children, then it cannot autocalculate these values and will print a warning.
*/
func (self Instance) GetAutocalculateLengthAndAngle() bool { //gd:Bone2D.get_autocalculate_length_and_angle
	return bool(Advanced(self).GetAutocalculateLengthAndAngle())
}

/*
Sets the length of the bone in the [Bone2D].
*/
func (self Instance) SetLength(length Float.X) { //gd:Bone2D.set_length
	Advanced(self).SetLength(float64(length))
}

/*
Returns the length of the bone in the [Bone2D] node.
*/
func (self Instance) GetLength() Float.X { //gd:Bone2D.get_length
	return Float.X(Float.X(Advanced(self).GetLength()))
}

/*
Sets the bone angle for the [Bone2D]. This is typically set to the rotation from the [Bone2D] to a child [Bone2D] node.
[b]Note:[/b] This is different from the [Bone2D]'s rotation. The bone's angle is the rotation of the bone shown by the gizmo, which is unaffected by the [Bone2D]'s [member Node2D.transform].
*/
func (self Instance) SetBoneAngle(angle Angle.Radians) { //gd:Bone2D.set_bone_angle
	Advanced(self).SetBoneAngle(float64(angle))
}

/*
Returns the angle of the bone in the [Bone2D].
[b]Note:[/b] This is different from the [Bone2D]'s rotation. The bone's angle is the rotation of the bone shown by the gizmo, which is unaffected by the [Bone2D]'s [member Node2D.transform].
*/
func (self Instance) GetBoneAngle() Angle.Radians { //gd:Bone2D.get_bone_angle
	return Angle.Radians(Float.X(Advanced(self).GetBoneAngle()))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.Bone2D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.Bone2D](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.Bone2D](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.Bone2D{pointers.Add[gdclass.Bone2D]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.Bone2D{pointers.New[gdclass.Bone2D]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Rest() Transform2D.OriginXY {
	return Transform2D.OriginXY(class(self).GetRest())
}

func (self Instance) SetRest(value Transform2D.OriginXY) {
	class(self).SetRest(Transform2D.OriginXY(value))
}

//go:nosplit
func (self class) SetRest(rest Transform2D.OriginXY) { //gd:Bone2D.set_rest
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_rest, 0|(gdextension.SizeTransform2D<<4), &struct{ rest Transform2D.OriginXY }{rest})
}

//go:nosplit
func (self class) GetRest() Transform2D.OriginXY { //gd:Bone2D.get_rest
	var r_ret = gdextension.Call[Transform2D.OriginXY](gd.ObjectChecked(self.AsObject()), methods.get_rest, gdextension.SizeTransform2D, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Resets the bone to the rest pose. This is equivalent to setting [member Node2D.transform] to [member rest].
*/
//go:nosplit
func (self class) ApplyRest() { //gd:Bone2D.apply_rest
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.apply_rest, 0, &struct{}{})
}

/*
Returns the node's [member rest] [Transform2D] if it doesn't have a parent, or its rest pose relative to its parent.
*/
//go:nosplit
func (self class) GetSkeletonRest() Transform2D.OriginXY { //gd:Bone2D.get_skeleton_rest
	var r_ret = gdextension.Call[Transform2D.OriginXY](gd.ObjectChecked(self.AsObject()), methods.get_skeleton_rest, gdextension.SizeTransform2D, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Returns the node's index as part of the entire skeleton. See [Skeleton2D].
*/
//go:nosplit
func (self class) GetIndexInSkeleton() int64 { //gd:Bone2D.get_index_in_skeleton
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_index_in_skeleton, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

/*
When set to [code]true[/code], the [Bone2D] node will attempt to automatically calculate the bone angle and length using the first child [Bone2D] node, if one exists. If none exist, the [Bone2D] cannot automatically calculate these values and will print a warning.
*/
//go:nosplit
func (self class) SetAutocalculateLengthAndAngle(auto_calculate bool) { //gd:Bone2D.set_autocalculate_length_and_angle
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_autocalculate_length_and_angle, 0|(gdextension.SizeBool<<4), &struct{ auto_calculate bool }{auto_calculate})
}

/*
Returns whether this [Bone2D] is going to autocalculate its length and bone angle using its first [Bone2D] child node, if one exists. If there are no [Bone2D] children, then it cannot autocalculate these values and will print a warning.
*/
//go:nosplit
func (self class) GetAutocalculateLengthAndAngle() bool { //gd:Bone2D.get_autocalculate_length_and_angle
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_autocalculate_length_and_angle, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Sets the length of the bone in the [Bone2D].
*/
//go:nosplit
func (self class) SetLength(length float64) { //gd:Bone2D.set_length
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_length, 0|(gdextension.SizeFloat<<4), &struct{ length float64 }{length})
}

/*
Returns the length of the bone in the [Bone2D] node.
*/
//go:nosplit
func (self class) GetLength() float64 { //gd:Bone2D.get_length
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_length, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Sets the bone angle for the [Bone2D]. This is typically set to the rotation from the [Bone2D] to a child [Bone2D] node.
[b]Note:[/b] This is different from the [Bone2D]'s rotation. The bone's angle is the rotation of the bone shown by the gizmo, which is unaffected by the [Bone2D]'s [member Node2D.transform].
*/
//go:nosplit
func (self class) SetBoneAngle(angle float64) { //gd:Bone2D.set_bone_angle
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bone_angle, 0|(gdextension.SizeFloat<<4), &struct{ angle float64 }{angle})
}

/*
Returns the angle of the bone in the [Bone2D].
[b]Note:[/b] This is different from the [Bone2D]'s rotation. The bone's angle is the rotation of the bone shown by the gizmo, which is unaffected by the [Bone2D]'s [member Node2D.transform].
*/
//go:nosplit
func (self class) GetBoneAngle() float64 { //gd:Bone2D.get_bone_angle
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_bone_angle, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsBone2D() Advanced         { return Advanced{pointers.AsA[gdclass.Bone2D](self[0])} }
func (self Instance) AsBone2D() Instance      { return Instance{pointers.AsA[gdclass.Bone2D](self[0])} }
func (self *Extension[T]) AsBone2D() Instance { return self.Super().AsBone2D() }
func (self class) AsNode2D() Node2D.Advanced {
	return Node2D.Advanced{pointers.AsA[gdclass.Node2D](self[0])}
}
func (self *Extension[T]) AsNode2D() Node2D.Instance { return self.Super().AsNode2D() }
func (self Instance) AsNode2D() Node2D.Instance {
	return Node2D.Instance{pointers.AsA[gdclass.Node2D](self[0])}
}
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return CanvasItem.Advanced{pointers.AsA[gdclass.CanvasItem](self[0])}
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return CanvasItem.Instance{pointers.AsA[gdclass.CanvasItem](self[0])}
}
func (self class) AsNode() Node.Advanced         { return Node.Advanced{pointers.AsA[gdclass.Node](self[0])} }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance {
	return Node.Instance{pointers.AsA[gdclass.Node](self[0])}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node2D.Advanced(self.AsNode2D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node2D.Instance(self.AsNode2D()), name)
	}
}
func init() {
	gdclass.Register("Bone2D", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.Bone2D](ptr)} })
}
