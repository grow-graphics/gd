// Code generated by the generate package DO NOT EDIT

// Package CameraServer provides methods for working with CameraServer object instances.
package CameraServer

import "unsafe"
import "sync"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/CameraFeed"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
The [CameraServer] keeps track of different cameras accessible in Godot. These are external cameras such as webcams or the cameras on your phone.
It is notably used to provide AR modules with a video feed from the camera.
[b]Note:[/b] This class is currently only implemented on Linux, macOS, and iOS. On other platforms no [CameraFeed]s will be available. To get a [CameraFeed] on iOS, the camera plugin from [url=https://github.com/godotengine/godot-ios-plugins]godot-ios-plugins[/url] is required.
*/
type Instance [1]gdclass.CameraServer

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_feed       gdextension.MethodForClass `hash:"361927068"`
	get_feed_count gdextension.MethodForClass `hash:"2455072627"`
	feeds          gdextension.MethodForClass `hash:"2915620761"`
	add_feed       gdextension.MethodForClass `hash:"3204782488"`
	remove_feed    gdextension.MethodForClass `hash:"3204782488"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("CameraServer")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

var self [1]gdclass.CameraServer
var once sync.Once

func singleton() {
	self[0] = pointers.Raw[gdclass.CameraServer]([3]uint64{uint64(gdextension.Host.Objects.Global(sname))})
}

/*
Returns the [CameraFeed] corresponding to the camera with the given [param index].
*/
func GetFeed(index int) CameraFeed.Instance { //gd:CameraServer.get_feed
	once.Do(singleton)
	return CameraFeed.Instance(Advanced().GetFeed(int64(index)))
}

/*
Returns the number of [CameraFeed]s registered.
*/
func GetFeedCount() int { //gd:CameraServer.get_feed_count
	once.Do(singleton)
	return int(int(Advanced().GetFeedCount()))
}

/*
Returns an array of [CameraFeed]s.
*/
func Feeds() []CameraFeed.Instance { //gd:CameraServer.feeds
	once.Do(singleton)
	return []CameraFeed.Instance(gd.ArrayAs[[]CameraFeed.Instance](gd.InternalArray(Advanced().Feeds())))
}

/*
Adds the camera [param feed] to the camera server.
*/
func AddFeed(feed CameraFeed.Instance) { //gd:CameraServer.add_feed
	once.Do(singleton)
	Advanced().AddFeed(feed)
}

/*
Removes the specified camera [param feed].
*/
func RemoveFeed(feed CameraFeed.Instance) { //gd:CameraServer.remove_feed
	once.Do(singleton)
	Advanced().RemoveFeed(feed)
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
func Advanced() class { once.Do(singleton); return self }

type class [1]gdclass.CameraServer

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.CameraServer)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.CameraServer)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }

/*
Returns the [CameraFeed] corresponding to the camera with the given [param index].
*/
//go:nosplit
func (self class) GetFeed(index int64) [1]gdclass.CameraFeed { //gd:CameraServer.get_feed
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_feed, gdextension.SizeObject|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ index int64 }{index}))
	var ret = [1]gdclass.CameraFeed{gd.PointerWithOwnershipTransferredToGo[gdclass.CameraFeed](r_ret)}
	return ret
}

/*
Returns the number of [CameraFeed]s registered.
*/
//go:nosplit
func (self class) GetFeedCount() int64 { //gd:CameraServer.get_feed_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_feed_count, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns an array of [CameraFeed]s.
*/
//go:nosplit
func (self class) Feeds() Array.Contains[[1]gdclass.CameraFeed] { //gd:CameraServer.feeds
	var r_ret = gdextension.Call[gdextension.Array](gd.ObjectChecked(self.AsObject()), methods.feeds, gdextension.SizeArray, unsafe.Pointer(&struct{}{}))
	var ret = Array.Through(gd.ArrayProxy[[1]gdclass.CameraFeed]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

/*
Adds the camera [param feed] to the camera server.
*/
//go:nosplit
func (self class) AddFeed(feed [1]gdclass.CameraFeed) { //gd:CameraServer.add_feed
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.add_feed, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ feed gdextension.Object }{gdextension.Object(gd.ObjectChecked(feed[0].AsObject()))}))
}

/*
Removes the specified camera [param feed].
*/
//go:nosplit
func (self class) RemoveFeed(feed [1]gdclass.CameraFeed) { //gd:CameraServer.remove_feed
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_feed, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ feed gdextension.Object }{gdextension.Object(gd.ObjectChecked(feed[0].AsObject()))}))
}
func OnCameraFeedAdded(cb func(id int)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("camera_feed_added"), gd.NewCallable(cb), 0)
}

func OnCameraFeedRemoved(cb func(id int)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("camera_feed_removed"), gd.NewCallable(cb), 0)
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Object.Advanced(self.AsObject()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Object.Instance(self.AsObject()), name)
	}
}
func init() {
	gdclass.Register("CameraServer", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
