// Code generated by the generate package DO NOT EDIT

// Package CameraServer provides methods for working with CameraServer object instances.
package CameraServer

import "unsafe"
import "sync"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ = slices.Delete[[]struct{}, struct{}]

/*
The [CameraServer] keeps track of different cameras accessible in Godot. These are external cameras such as webcams or the cameras on your phone.
It is notably used to provide AR modules with a video feed from the camera.
[b]Note:[/b] This class is currently only implemented on Linux, macOS, and iOS. On other platforms no [CameraFeed]s will be available. To get a [CameraFeed] on iOS, the camera plugin from [url=https://github.com/godotengine/godot-ios-plugins]godot-ios-plugins[/url] is required.
*/
var self [1]gdclass.CameraServer
var once sync.Once

func singleton() {
	obj := gd.Global.Object.GetSingleton(gd.Global.Singletons.CameraServer)
	self = *(*[1]gdclass.CameraServer)(unsafe.Pointer(&obj))
}

/*
Returns the [CameraFeed] corresponding to the camera with the given [param index].
*/
func GetFeed(index int) [1]gdclass.CameraFeed { //gd:CameraServer.get_feed
	once.Do(singleton)
	return [1]gdclass.CameraFeed(Advanced().GetFeed(int64(index)))
}

/*
Returns the number of [CameraFeed]s registered.
*/
func GetFeedCount() int { //gd:CameraServer.get_feed_count
	once.Do(singleton)
	return int(int(Advanced().GetFeedCount()))
}

/*
Returns an array of [CameraFeed]s.
*/
func Feeds() [][1]gdclass.CameraFeed { //gd:CameraServer.feeds
	once.Do(singleton)
	return [][1]gdclass.CameraFeed(gd.ArrayAs[[][1]gdclass.CameraFeed](gd.InternalArray(Advanced().Feeds())))
}

/*
Adds the camera [param feed] to the camera server.
*/
func AddFeed(feed [1]gdclass.CameraFeed) { //gd:CameraServer.add_feed
	once.Do(singleton)
	Advanced().AddFeed(feed)
}

/*
Removes the specified camera [param feed].
*/
func RemoveFeed(feed [1]gdclass.CameraFeed) { //gd:CameraServer.remove_feed
	once.Do(singleton)
	Advanced().RemoveFeed(feed)
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
func Advanced() class { once.Do(singleton); return self }

type class [1]gdclass.CameraServer

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }

/*
Returns the [CameraFeed] corresponding to the camera with the given [param index].
*/
//go:nosplit
func (self class) GetFeed(index int64) [1]gdclass.CameraFeed { //gd:CameraServer.get_feed
	var frame = callframe.New()
	callframe.Arg(frame, index)
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraServer.Bind_get_feed, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.CameraFeed{gd.PointerWithOwnershipTransferredToGo[gdclass.CameraFeed](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Returns the number of [CameraFeed]s registered.
*/
//go:nosplit
func (self class) GetFeedCount() int64 { //gd:CameraServer.get_feed_count
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraServer.Bind_get_feed_count, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns an array of [CameraFeed]s.
*/
//go:nosplit
func (self class) Feeds() Array.Contains[[1]gdclass.CameraFeed] { //gd:CameraServer.feeds
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraServer.Bind_feeds, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Array.Through(gd.ArrayProxy[[1]gdclass.CameraFeed]{}, pointers.Pack(pointers.New[gd.Array](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Adds the camera [param feed] to the camera server.
*/
//go:nosplit
func (self class) AddFeed(feed [1]gdclass.CameraFeed) { //gd:CameraServer.add_feed
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(feed[0])[0])
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraServer.Bind_add_feed, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Removes the specified camera [param feed].
*/
//go:nosplit
func (self class) RemoveFeed(feed [1]gdclass.CameraFeed) { //gd:CameraServer.remove_feed
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(feed[0])[0])
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraServer.Bind_remove_feed, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}
func OnCameraFeedAdded(cb func(id int)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("camera_feed_added"), gd.NewCallable(cb), 0)
}

func OnCameraFeedRemoved(cb func(id int)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("camera_feed_removed"), gd.NewCallable(cb), 0)
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Object.Advanced(self.AsObject()), name)
	}
}
func init() {
	gdclass.Register("CameraServer", func(ptr gd.Object) any {
		return [1]gdclass.CameraServer{*(*gdclass.CameraServer)(unsafe.Pointer(&ptr))}
	})
}

type FeedImage = gdclass.CameraServerFeedImage //gd:CameraServer.FeedImage

const (
	/*The RGBA camera image.*/
	FeedRgbaImage FeedImage = 0
	/*The [url=https://en.wikipedia.org/wiki/YCbCr]YCbCr[/url] camera image.*/
	FeedYcbcrImage FeedImage = 0
	/*The Y component camera image.*/
	FeedYImage FeedImage = 0
	/*The CbCr component camera image.*/
	FeedCbcrImage FeedImage = 1
)
