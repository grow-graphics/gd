// Code generated by the generate package DO NOT EDIT

// Package WebSocketMultiplayerPeer provides methods for working with WebSocketMultiplayerPeer object instances.
package WebSocketMultiplayerPeer

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/MultiplayerPeer"
import "graphics.gd/classdb/PacketPeer"
import "graphics.gd/classdb/TLSOptions"
import "graphics.gd/classdb/WebSocketPeer"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Base class for WebSocket server and client, allowing them to be used as multiplayer peer for the [MultiplayerAPI].
[b]Note:[/b] When exporting to Android, make sure to enable the [code]INTERNET[/code] permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
*/
type Instance [1]gdclass.WebSocketMultiplayerPeer

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	create_client            gdextension.MethodForClass `hash:"1966198364"`
	create_server            gdextension.MethodForClass `hash:"2400822951"`
	get_peer                 gdextension.MethodForClass `hash:"1381378851"`
	get_peer_address         gdextension.MethodForClass `hash:"844755477"`
	get_peer_port            gdextension.MethodForClass `hash:"923996154"`
	get_supported_protocols  gdextension.MethodForClass `hash:"1139954409"`
	set_supported_protocols  gdextension.MethodForClass `hash:"4015028928"`
	get_handshake_headers    gdextension.MethodForClass `hash:"1139954409"`
	set_handshake_headers    gdextension.MethodForClass `hash:"4015028928"`
	get_inbound_buffer_size  gdextension.MethodForClass `hash:"3905245786"`
	set_inbound_buffer_size  gdextension.MethodForClass `hash:"1286410249"`
	get_outbound_buffer_size gdextension.MethodForClass `hash:"3905245786"`
	set_outbound_buffer_size gdextension.MethodForClass `hash:"1286410249"`
	get_handshake_timeout    gdextension.MethodForClass `hash:"1740695150"`
	set_handshake_timeout    gdextension.MethodForClass `hash:"373806689"`
	set_max_queued_packets   gdextension.MethodForClass `hash:"1286410249"`
	get_max_queued_packets   gdextension.MethodForClass `hash:"3905245786"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("WebSocketMultiplayerPeer")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.WebSocketMultiplayerPeer

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsWebSocketMultiplayerPeer() Instance
}

/*
Starts a new multiplayer client connecting to the given [param url]. TLS certificates will be verified against the hostname when connecting using the [code]wss://[/code] protocol. You can pass the optional [param tls_client_options] parameter to customize the trusted certification authorities, or disable the common name verification. See [method TLSOptions.client] and [method TLSOptions.client_unsafe].
[b]Note:[/b] It is recommended to specify the scheme part of the URL, i.e. the [param url] should start with either [code]ws://[/code] or [code]wss://[/code].
*/
func (self Instance) CreateClient(url string) error { //gd:WebSocketMultiplayerPeer.create_client
	return error(gd.ToError(Advanced(self).CreateClient(String.New(url), [1]TLSOptions.Instance{}[0])))
}

/*
Starts a new multiplayer client connecting to the given [param url]. TLS certificates will be verified against the hostname when connecting using the [code]wss://[/code] protocol. You can pass the optional [param tls_client_options] parameter to customize the trusted certification authorities, or disable the common name verification. See [method TLSOptions.client] and [method TLSOptions.client_unsafe].
[b]Note:[/b] It is recommended to specify the scheme part of the URL, i.e. the [param url] should start with either [code]ws://[/code] or [code]wss://[/code].
*/
func (self Expanded) CreateClient(url string, tls_client_options TLSOptions.Instance) error { //gd:WebSocketMultiplayerPeer.create_client
	return error(gd.ToError(Advanced(self).CreateClient(String.New(url), tls_client_options)))
}

/*
Starts a new multiplayer server listening on the given [param port]. You can optionally specify a [param bind_address], and provide valid [param tls_server_options] to use TLS. See [method TLSOptions.server].
*/
func (self Instance) CreateServer(port int) error { //gd:WebSocketMultiplayerPeer.create_server
	return error(gd.ToError(Advanced(self).CreateServer(int64(port), String.New("*"), [1]TLSOptions.Instance{}[0])))
}

/*
Starts a new multiplayer server listening on the given [param port]. You can optionally specify a [param bind_address], and provide valid [param tls_server_options] to use TLS. See [method TLSOptions.server].
*/
func (self Expanded) CreateServer(port int, bind_address string, tls_server_options TLSOptions.Instance) error { //gd:WebSocketMultiplayerPeer.create_server
	return error(gd.ToError(Advanced(self).CreateServer(int64(port), String.New(bind_address), tls_server_options)))
}

/*
Returns the [WebSocketPeer] associated to the given [param peer_id].
*/
func (self Instance) GetPeer(peer_id int) WebSocketPeer.Instance { //gd:WebSocketMultiplayerPeer.get_peer
	return WebSocketPeer.Instance(Advanced(self).GetPeer(int64(peer_id)))
}

/*
Returns the IP address of the given peer.
*/
func (self Instance) GetPeerAddress(id int) string { //gd:WebSocketMultiplayerPeer.get_peer_address
	return string(Advanced(self).GetPeerAddress(int64(id)).String())
}

/*
Returns the remote port of the given peer.
*/
func (self Instance) GetPeerPort(id int) int { //gd:WebSocketMultiplayerPeer.get_peer_port
	return int(int(Advanced(self).GetPeerPort(int64(id))))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.WebSocketMultiplayerPeer

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.WebSocketMultiplayerPeer](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.WebSocketMultiplayerPeer](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.WebSocketMultiplayerPeer{pointers.Add[gdclass.WebSocketMultiplayerPeer]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.WebSocketMultiplayerPeer{pointers.New[gdclass.WebSocketMultiplayerPeer]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) SupportedProtocols() []string {
	return []string(class(self).GetSupportedProtocols().Strings())
}

func (self Instance) SetSupportedProtocols(value []string) {
	class(self).SetSupportedProtocols(Packed.MakeStrings(value...))
}

func (self Instance) HandshakeHeaders() []string {
	return []string(class(self).GetHandshakeHeaders().Strings())
}

func (self Instance) SetHandshakeHeaders(value []string) {
	class(self).SetHandshakeHeaders(Packed.MakeStrings(value...))
}

func (self Instance) InboundBufferSize() int {
	return int(int(class(self).GetInboundBufferSize()))
}

func (self Instance) SetInboundBufferSize(value int) {
	class(self).SetInboundBufferSize(int64(value))
}

func (self Instance) OutboundBufferSize() int {
	return int(int(class(self).GetOutboundBufferSize()))
}

func (self Instance) SetOutboundBufferSize(value int) {
	class(self).SetOutboundBufferSize(int64(value))
}

func (self Instance) HandshakeTimeout() Float.X {
	return Float.X(Float.X(class(self).GetHandshakeTimeout()))
}

func (self Instance) SetHandshakeTimeout(value Float.X) {
	class(self).SetHandshakeTimeout(float64(value))
}

func (self Instance) MaxQueuedPackets() int {
	return int(int(class(self).GetMaxQueuedPackets()))
}

func (self Instance) SetMaxQueuedPackets(value int) {
	class(self).SetMaxQueuedPackets(int64(value))
}

/*
Starts a new multiplayer client connecting to the given [param url]. TLS certificates will be verified against the hostname when connecting using the [code]wss://[/code] protocol. You can pass the optional [param tls_client_options] parameter to customize the trusted certification authorities, or disable the common name verification. See [method TLSOptions.client] and [method TLSOptions.client_unsafe].
[b]Note:[/b] It is recommended to specify the scheme part of the URL, i.e. the [param url] should start with either [code]ws://[/code] or [code]wss://[/code].
*/
//go:nosplit
func (self class) CreateClient(url String.Readable, tls_client_options [1]gdclass.TLSOptions) Error.Code { //gd:WebSocketMultiplayerPeer.create_client
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.create_client, gdextension.SizeInt|(gdextension.SizeString<<4)|(gdextension.SizeObject<<8), &struct {
		url                gdextension.String
		tls_client_options gdextension.Object
	}{pointers.Get(gd.InternalString(url)), gdextension.Object(gd.ObjectChecked(tls_client_options[0].AsObject()))})
	var ret = Error.Code(r_ret)
	return ret
}

/*
Starts a new multiplayer server listening on the given [param port]. You can optionally specify a [param bind_address], and provide valid [param tls_server_options] to use TLS. See [method TLSOptions.server].
*/
//go:nosplit
func (self class) CreateServer(port int64, bind_address String.Readable, tls_server_options [1]gdclass.TLSOptions) Error.Code { //gd:WebSocketMultiplayerPeer.create_server
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.create_server, gdextension.SizeInt|(gdextension.SizeInt<<4)|(gdextension.SizeString<<8)|(gdextension.SizeObject<<12), &struct {
		port               int64
		bind_address       gdextension.String
		tls_server_options gdextension.Object
	}{port, pointers.Get(gd.InternalString(bind_address)), gdextension.Object(gd.ObjectChecked(tls_server_options[0].AsObject()))})
	var ret = Error.Code(r_ret)
	return ret
}

/*
Returns the [WebSocketPeer] associated to the given [param peer_id].
*/
//go:nosplit
func (self class) GetPeer(peer_id int64) [1]gdclass.WebSocketPeer { //gd:WebSocketMultiplayerPeer.get_peer
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_peer, gdextension.SizeObject|(gdextension.SizeInt<<4), &struct{ peer_id int64 }{peer_id})
	var ret = [1]gdclass.WebSocketPeer{gd.PointerWithOwnershipTransferredToGo[gdclass.WebSocketPeer](r_ret)}
	return ret
}

/*
Returns the IP address of the given peer.
*/
//go:nosplit
func (self class) GetPeerAddress(id int64) String.Readable { //gd:WebSocketMultiplayerPeer.get_peer_address
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_peer_address, gdextension.SizeString|(gdextension.SizeInt<<4), &struct{ id int64 }{id})
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns the remote port of the given peer.
*/
//go:nosplit
func (self class) GetPeerPort(id int64) int64 { //gd:WebSocketMultiplayerPeer.get_peer_port
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_peer_port, gdextension.SizeInt|(gdextension.SizeInt<<4), &struct{ id int64 }{id})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetSupportedProtocols() Packed.Strings { //gd:WebSocketMultiplayerPeer.get_supported_protocols
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_supported_protocols, gdextension.SizePackedArray, &struct{}{})
	var ret = Packed.Strings(Array.Through(gd.PackedStringArrayProxy{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetSupportedProtocols(protocols Packed.Strings) { //gd:WebSocketMultiplayerPeer.set_supported_protocols
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_supported_protocols, 0|(gdextension.SizePackedArray<<4), &struct {
		protocols gdextension.PackedArray[gdextension.String]
	}{pointers.Get(gd.InternalPackedStrings(protocols))})
}

//go:nosplit
func (self class) GetHandshakeHeaders() Packed.Strings { //gd:WebSocketMultiplayerPeer.get_handshake_headers
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_handshake_headers, gdextension.SizePackedArray, &struct{}{})
	var ret = Packed.Strings(Array.Through(gd.PackedStringArrayProxy{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetHandshakeHeaders(protocols Packed.Strings) { //gd:WebSocketMultiplayerPeer.set_handshake_headers
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_handshake_headers, 0|(gdextension.SizePackedArray<<4), &struct {
		protocols gdextension.PackedArray[gdextension.String]
	}{pointers.Get(gd.InternalPackedStrings(protocols))})
}

//go:nosplit
func (self class) GetInboundBufferSize() int64 { //gd:WebSocketMultiplayerPeer.get_inbound_buffer_size
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_inbound_buffer_size, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetInboundBufferSize(buffer_size int64) { //gd:WebSocketMultiplayerPeer.set_inbound_buffer_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_inbound_buffer_size, 0|(gdextension.SizeInt<<4), &struct{ buffer_size int64 }{buffer_size})
}

//go:nosplit
func (self class) GetOutboundBufferSize() int64 { //gd:WebSocketMultiplayerPeer.get_outbound_buffer_size
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_outbound_buffer_size, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetOutboundBufferSize(buffer_size int64) { //gd:WebSocketMultiplayerPeer.set_outbound_buffer_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_outbound_buffer_size, 0|(gdextension.SizeInt<<4), &struct{ buffer_size int64 }{buffer_size})
}

//go:nosplit
func (self class) GetHandshakeTimeout() float64 { //gd:WebSocketMultiplayerPeer.get_handshake_timeout
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_handshake_timeout, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHandshakeTimeout(timeout float64) { //gd:WebSocketMultiplayerPeer.set_handshake_timeout
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_handshake_timeout, 0|(gdextension.SizeFloat<<4), &struct{ timeout float64 }{timeout})
}

//go:nosplit
func (self class) SetMaxQueuedPackets(max_queued_packets int64) { //gd:WebSocketMultiplayerPeer.set_max_queued_packets
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_max_queued_packets, 0|(gdextension.SizeInt<<4), &struct{ max_queued_packets int64 }{max_queued_packets})
}

//go:nosplit
func (self class) GetMaxQueuedPackets() int64 { //gd:WebSocketMultiplayerPeer.get_max_queued_packets
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_max_queued_packets, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsWebSocketMultiplayerPeer() Advanced {
	return Advanced{pointers.AsA[gdclass.WebSocketMultiplayerPeer](self[0])}
}
func (self Instance) AsWebSocketMultiplayerPeer() Instance {
	return Instance{pointers.AsA[gdclass.WebSocketMultiplayerPeer](self[0])}
}
func (self *Extension[T]) AsWebSocketMultiplayerPeer() Instance {
	return self.Super().AsWebSocketMultiplayerPeer()
}
func (self class) AsMultiplayerPeer() MultiplayerPeer.Advanced {
	return MultiplayerPeer.Advanced{pointers.AsA[gdclass.MultiplayerPeer](self[0])}
}
func (self *Extension[T]) AsMultiplayerPeer() MultiplayerPeer.Instance {
	return self.Super().AsMultiplayerPeer()
}
func (self Instance) AsMultiplayerPeer() MultiplayerPeer.Instance {
	return MultiplayerPeer.Instance{pointers.AsA[gdclass.MultiplayerPeer](self[0])}
}
func (self class) AsPacketPeer() PacketPeer.Advanced {
	return PacketPeer.Advanced{pointers.AsA[gdclass.PacketPeer](self[0])}
}
func (self *Extension[T]) AsPacketPeer() PacketPeer.Instance { return self.Super().AsPacketPeer() }
func (self Instance) AsPacketPeer() PacketPeer.Instance {
	return PacketPeer.Instance{pointers.AsA[gdclass.PacketPeer](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(MultiplayerPeer.Advanced(self.AsMultiplayerPeer()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(MultiplayerPeer.Instance(self.AsMultiplayerPeer()), name)
	}
}
func init() {
	gdclass.Register("WebSocketMultiplayerPeer", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.WebSocketMultiplayerPeer](ptr)} })
}
