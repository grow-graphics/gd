// Code generated by the generate package DO NOT EDIT

// Package AudioEffectCompressor provides methods for working with AudioEffectCompressor object instances.
package AudioEffectCompressor

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/AudioEffect"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Dynamic range compressor reduces the level of the sound when the amplitude goes over a certain threshold in Decibels. One of the main uses of a compressor is to increase the dynamic range by clipping as little as possible (when sound goes over 0dB).
Compressor has many uses in the mix:
- In the Master bus to compress the whole output (although an [AudioEffectLimiter] is probably better).
- In voice channels to ensure they sound as balanced as possible.
- Sidechained. This can reduce the sound level sidechained with another audio bus for threshold detection. This technique is common in video game mixing to the level of music and SFX while voices are being heard.
- Accentuates transients by using a wider attack, making effects sound more punchy.
*/
type Instance [1]gdclass.AudioEffectCompressor

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_threshold  gdextension.MethodForClass `hash:"373806689"`
	get_threshold  gdextension.MethodForClass `hash:"1740695150"`
	set_ratio      gdextension.MethodForClass `hash:"373806689"`
	get_ratio      gdextension.MethodForClass `hash:"1740695150"`
	set_gain       gdextension.MethodForClass `hash:"373806689"`
	get_gain       gdextension.MethodForClass `hash:"1740695150"`
	set_attack_us  gdextension.MethodForClass `hash:"373806689"`
	get_attack_us  gdextension.MethodForClass `hash:"1740695150"`
	set_release_ms gdextension.MethodForClass `hash:"373806689"`
	get_release_ms gdextension.MethodForClass `hash:"1740695150"`
	set_mix        gdextension.MethodForClass `hash:"373806689"`
	get_mix        gdextension.MethodForClass `hash:"1740695150"`
	set_sidechain  gdextension.MethodForClass `hash:"3304788590"`
	get_sidechain  gdextension.MethodForClass `hash:"2002593661"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("AudioEffectCompressor")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAudioEffectCompressor() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AudioEffectCompressor

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AudioEffectCompressor)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AudioEffectCompressor)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.AudioEffectCompressor)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) Threshold() Float.X {
	return Float.X(Float.X(class(self).GetThreshold()))
}

func (self Instance) SetThreshold(value Float.X) {
	class(self).SetThreshold(float64(value))
}

func (self Instance) Ratio() Float.X {
	return Float.X(Float.X(class(self).GetRatio()))
}

func (self Instance) SetRatio(value Float.X) {
	class(self).SetRatio(float64(value))
}

func (self Instance) Gain() Float.X {
	return Float.X(Float.X(class(self).GetGain()))
}

func (self Instance) SetGain(value Float.X) {
	class(self).SetGain(float64(value))
}

func (self Instance) AttackUs() Float.X {
	return Float.X(Float.X(class(self).GetAttackUs()))
}

func (self Instance) SetAttackUs(value Float.X) {
	class(self).SetAttackUs(float64(value))
}

func (self Instance) ReleaseMs() Float.X {
	return Float.X(Float.X(class(self).GetReleaseMs()))
}

func (self Instance) SetReleaseMs(value Float.X) {
	class(self).SetReleaseMs(float64(value))
}

func (self Instance) Mix() Float.X {
	return Float.X(Float.X(class(self).GetMix()))
}

func (self Instance) SetMix(value Float.X) {
	class(self).SetMix(float64(value))
}

func (self Instance) Sidechain() string {
	return string(class(self).GetSidechain().String())
}

func (self Instance) SetSidechain(value string) {
	class(self).SetSidechain(String.Name(String.New(value)))
}

//go:nosplit
func (self class) SetThreshold(threshold float64) { //gd:AudioEffectCompressor.set_threshold
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_threshold, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ threshold float64 }{threshold}))
}

//go:nosplit
func (self class) GetThreshold() float64 { //gd:AudioEffectCompressor.get_threshold
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_threshold, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRatio(ratio float64) { //gd:AudioEffectCompressor.set_ratio
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_ratio, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ ratio float64 }{ratio}))
}

//go:nosplit
func (self class) GetRatio() float64 { //gd:AudioEffectCompressor.get_ratio
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_ratio, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGain(gain float64) { //gd:AudioEffectCompressor.set_gain
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_gain, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ gain float64 }{gain}))
}

//go:nosplit
func (self class) GetGain() float64 { //gd:AudioEffectCompressor.get_gain
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_gain, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAttackUs(attack_us float64) { //gd:AudioEffectCompressor.set_attack_us
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_attack_us, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ attack_us float64 }{attack_us}))
}

//go:nosplit
func (self class) GetAttackUs() float64 { //gd:AudioEffectCompressor.get_attack_us
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_attack_us, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetReleaseMs(release_ms float64) { //gd:AudioEffectCompressor.set_release_ms
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_release_ms, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ release_ms float64 }{release_ms}))
}

//go:nosplit
func (self class) GetReleaseMs() float64 { //gd:AudioEffectCompressor.get_release_ms
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_release_ms, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMix(mix float64) { //gd:AudioEffectCompressor.set_mix
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_mix, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ mix float64 }{mix}))
}

//go:nosplit
func (self class) GetMix() float64 { //gd:AudioEffectCompressor.get_mix
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_mix, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSidechain(sidechain String.Name) { //gd:AudioEffectCompressor.set_sidechain
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_sidechain, 0|(gdextension.SizeStringName<<4), unsafe.Pointer(&struct{ sidechain gdextension.StringName }{pointers.Get(gd.InternalStringName(sidechain))}))
}

//go:nosplit
func (self class) GetSidechain() String.Name { //gd:AudioEffectCompressor.get_sidechain
	var r_ret = gdextension.Call[gdextension.StringName](gd.ObjectChecked(self.AsObject()), methods.get_sidechain, gdextension.SizeStringName, unsafe.Pointer(&struct{}{}))
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret))))
	return ret
}
func (self class) AsAudioEffectCompressor() Advanced    { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsAudioEffectCompressor() Instance { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsAudioEffectCompressor() Instance {
	return self.Super().AsAudioEffectCompressor()
}
func (self class) AsAudioEffect() AudioEffect.Advanced {
	return *((*AudioEffect.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAudioEffect() AudioEffect.Instance { return self.Super().AsAudioEffect() }
func (self Instance) AsAudioEffect() AudioEffect.Instance {
	return *((*AudioEffect.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioEffect.Advanced(self.AsAudioEffect()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioEffect.Instance(self.AsAudioEffect()), name)
	}
}
func init() {
	gdclass.Register("AudioEffectCompressor", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
