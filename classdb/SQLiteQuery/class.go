// Code generated by the generate package DO NOT EDIT

// Package SQLiteQuery provides methods for working with SQLiteQuery object instances.
package SQLiteQuery

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/SQLiteColumnSchema"
import "graphics.gd/classdb/SQLiteQueryResult"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A class that allows you to execute SQL queries on an SQLite database. It provides methods for both single and batch execution of queries. It also provides a method to retrieve the column names from the last executed query and a method to get the last error message, if any.
*/
type Instance [1]gdclass.SQLiteQuery

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.SQLiteQuery

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsSQLiteQuery() Instance
}

/*
Returns the last error message, if any. If there was no error, returns an empty string.
*/
func (self Instance) GetLastErrorMessage() string { //gd:SQLiteQuery.get_last_error_message
	return string(Advanced(self).GetLastErrorMessage().String())
}

/*
Executes a single SQL query. The query is provided as a string. If the query requires arguments, they can be provided as an array. Returns the result of the query.
*/
func (self Instance) Execute() SQLiteQueryResult.Instance { //gd:SQLiteQuery.execute
	return SQLiteQueryResult.Instance(Advanced(self).Execute(Array.Nil))
}

/*
Executes a single SQL query. The query is provided as a string. If the query requires arguments, they can be provided as an array. Returns the result of the query.
*/
func (self Expanded) Execute(arguments []any) SQLiteQueryResult.Instance { //gd:SQLiteQuery.execute
	return SQLiteQueryResult.Instance(Advanced(self).Execute(gd.EngineArrayFromSlice(arguments)))
}

/*
Executes a batch of SQL queries. The queries are provided as an array of strings. Returns the result of the last query in the batch.
*/
func (self Instance) BatchExecute(rows [][]any) []SQLiteQueryResult.Instance { //gd:SQLiteQuery.batch_execute
	return []SQLiteQueryResult.Instance(gd.ArrayAs[[]SQLiteQueryResult.Instance](gd.InternalArray(Advanced(self).BatchExecute(gd.ArrayFromSlice[Array.Contains[Array.Any]](rows)))))
}

/*
Returns an array of column names from the last executed query.
*/
func (self Instance) GetColumns() []SQLiteColumnSchema.Instance { //gd:SQLiteQuery.get_columns
	return []SQLiteColumnSchema.Instance(gd.ArrayAs[[]SQLiteColumnSchema.Instance](gd.InternalArray(Advanced(self).GetColumns())))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.SQLiteQuery

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("SQLiteQuery"))
	casted := Instance{*(*gdclass.SQLiteQuery)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) Arguments() []any {
	return []any(gd.ArrayAs[[]any](gd.InternalArray(class(self).GetArguments())))
}

func (self Instance) SetArguments(value []any) {
	class(self).SetArguments(gd.EngineArrayFromSlice(value))
}

func (self Instance) Query() string {
	return string(class(self).GetQuery().String())
}

/*
Returns the last error message, if any. If there was no error, returns an empty string.
*/
//go:nosplit
func (self class) GetLastErrorMessage() String.Readable { //gd:SQLiteQuery.get_last_error_message
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteQuery.Bind_get_last_error_message, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Executes a single SQL query. The query is provided as a string. If the query requires arguments, they can be provided as an array. Returns the result of the query.
*/
//go:nosplit
func (self class) Execute(arguments Array.Any) [1]gdclass.SQLiteQueryResult { //gd:SQLiteQuery.execute
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalArray(arguments)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteQuery.Bind_execute, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.SQLiteQueryResult{gd.PointerWithOwnershipTransferredToGo[gdclass.SQLiteQueryResult](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Executes a batch of SQL queries. The queries are provided as an array of strings. Returns the result of the last query in the batch.
*/
//go:nosplit
func (self class) BatchExecute(rows Array.Contains[Array.Any]) Array.Contains[[1]gdclass.SQLiteQueryResult] { //gd:SQLiteQuery.batch_execute
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalArray(rows)))
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteQuery.Bind_batch_execute, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Array.Through(gd.ArrayProxy[[1]gdclass.SQLiteQueryResult]{}, pointers.Pack(pointers.New[gd.Array](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Returns an array of column names from the last executed query.
*/
//go:nosplit
func (self class) GetColumns() Array.Contains[[1]gdclass.SQLiteColumnSchema] { //gd:SQLiteQuery.get_columns
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteQuery.Bind_get_columns, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Array.Through(gd.ArrayProxy[[1]gdclass.SQLiteColumnSchema]{}, pointers.Pack(pointers.New[gd.Array](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetQuery() String.Readable { //gd:SQLiteQuery.get_query
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteQuery.Bind_get_query, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetArguments() Array.Any { //gd:SQLiteQuery.get_arguments
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteQuery.Bind_get_arguments, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Array.Through(gd.ArrayProxy[variant.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetArguments(arguments Array.Any) { //gd:SQLiteQuery.set_arguments
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalArray(arguments)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteQuery.Bind_set_arguments, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}
func (self class) AsSQLiteQuery() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsSQLiteQuery() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsSQLiteQuery() Instance { return self.Super().AsSQLiteQuery() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("SQLiteQuery", func(ptr gd.Object) any { return [1]gdclass.SQLiteQuery{*(*gdclass.SQLiteQuery)(unsafe.Pointer(&ptr))} })
}
