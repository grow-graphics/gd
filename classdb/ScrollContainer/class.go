// Code generated by the generate package DO NOT EDIT

// Package ScrollContainer provides methods for working with ScrollContainer object instances.
package ScrollContainer

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Container"
import "graphics.gd/classdb/Control"
import "graphics.gd/classdb/HScrollBar"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/VScrollBar"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A container used to provide a child control with scrollbars when needed. Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer. Scrollbars will also automatically resize the grabber based on the [member Control.custom_minimum_size] of the Control relative to the ScrollContainer.
*/
type Instance [1]gdclass.ScrollContainer

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_h_scroll               gdextension.MethodForClass `hash:"1286410249"`
	get_h_scroll               gdextension.MethodForClass `hash:"3905245786"`
	set_v_scroll               gdextension.MethodForClass `hash:"1286410249"`
	get_v_scroll               gdextension.MethodForClass `hash:"3905245786"`
	set_horizontal_custom_step gdextension.MethodForClass `hash:"373806689"`
	get_horizontal_custom_step gdextension.MethodForClass `hash:"1740695150"`
	set_vertical_custom_step   gdextension.MethodForClass `hash:"373806689"`
	get_vertical_custom_step   gdextension.MethodForClass `hash:"1740695150"`
	set_horizontal_scroll_mode gdextension.MethodForClass `hash:"2750506364"`
	get_horizontal_scroll_mode gdextension.MethodForClass `hash:"3987985145"`
	set_vertical_scroll_mode   gdextension.MethodForClass `hash:"2750506364"`
	get_vertical_scroll_mode   gdextension.MethodForClass `hash:"3987985145"`
	set_deadzone               gdextension.MethodForClass `hash:"1286410249"`
	get_deadzone               gdextension.MethodForClass `hash:"3905245786"`
	set_follow_focus           gdextension.MethodForClass `hash:"2586408642"`
	is_following_focus         gdextension.MethodForClass `hash:"36873697"`
	get_h_scroll_bar           gdextension.MethodForClass `hash:"4004517983"`
	get_v_scroll_bar           gdextension.MethodForClass `hash:"2630340773"`
	ensure_control_visible     gdextension.MethodForClass `hash:"1496901182"`
	set_draw_focus_border      gdextension.MethodForClass `hash:"2586408642"`
	get_draw_focus_border      gdextension.MethodForClass `hash:"2240911060"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("ScrollContainer")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsScrollContainer() Instance
}

/*
Returns the horizontal scrollbar [HScrollBar] of this [ScrollContainer].
[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to disable or hide a scrollbar, you can use [member horizontal_scroll_mode].
*/
func (self Instance) GetHScrollBar() HScrollBar.Instance { //gd:ScrollContainer.get_h_scroll_bar
	return HScrollBar.Instance(Advanced(self).GetHScrollBar())
}

/*
Returns the vertical scrollbar [VScrollBar] of this [ScrollContainer].
[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to disable or hide a scrollbar, you can use [member vertical_scroll_mode].
*/
func (self Instance) GetVScrollBar() VScrollBar.Instance { //gd:ScrollContainer.get_v_scroll_bar
	return VScrollBar.Instance(Advanced(self).GetVScrollBar())
}

/*
Ensures the given [param control] is visible (must be a direct or indirect child of the ScrollContainer). Used by [member follow_focus].
[b]Note:[/b] This will not work on a node that was just added during the same frame. If you want to scroll to a newly added child, you must wait until the next frame using [signal SceneTree.process_frame]:
[codeblock]
add_child(child_node)
await get_tree().process_frame
ensure_control_visible(child_node)
[/codeblock]
*/
func (self Instance) EnsureControlVisible(control Control.Instance) { //gd:ScrollContainer.ensure_control_visible
	Advanced(self).EnsureControlVisible(control)
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.ScrollContainer

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.ScrollContainer)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.ScrollContainer)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.ScrollContainer)(unsafe.Pointer(&object))}
	object[0].Notification(0, false)
	return casted
}

func (self Instance) FollowFocus() bool {
	return bool(class(self).IsFollowingFocus())
}

func (self Instance) SetFollowFocus(value bool) {
	class(self).SetFollowFocus(value)
}

func (self Instance) DrawFocusBorder() bool {
	return bool(class(self).GetDrawFocusBorder())
}

func (self Instance) SetDrawFocusBorder(value bool) {
	class(self).SetDrawFocusBorder(value)
}

func (self Instance) ScrollHorizontal() int {
	return int(int(class(self).GetHScroll()))
}

func (self Instance) SetScrollHorizontal(value int) {
	class(self).SetHScroll(int64(value))
}

func (self Instance) ScrollVertical() int {
	return int(int(class(self).GetVScroll()))
}

func (self Instance) SetScrollVertical(value int) {
	class(self).SetVScroll(int64(value))
}

func (self Instance) ScrollHorizontalCustomStep() Float.X {
	return Float.X(Float.X(class(self).GetHorizontalCustomStep()))
}

func (self Instance) SetScrollHorizontalCustomStep(value Float.X) {
	class(self).SetHorizontalCustomStep(float64(value))
}

func (self Instance) ScrollVerticalCustomStep() Float.X {
	return Float.X(Float.X(class(self).GetVerticalCustomStep()))
}

func (self Instance) SetScrollVerticalCustomStep(value Float.X) {
	class(self).SetVerticalCustomStep(float64(value))
}

func (self Instance) HorizontalScrollMode() ScrollMode {
	return ScrollMode(class(self).GetHorizontalScrollMode())
}

func (self Instance) SetHorizontalScrollMode(value ScrollMode) {
	class(self).SetHorizontalScrollMode(value)
}

func (self Instance) VerticalScrollMode() ScrollMode {
	return ScrollMode(class(self).GetVerticalScrollMode())
}

func (self Instance) SetVerticalScrollMode(value ScrollMode) {
	class(self).SetVerticalScrollMode(value)
}

func (self Instance) ScrollDeadzone() int {
	return int(int(class(self).GetDeadzone()))
}

func (self Instance) SetScrollDeadzone(value int) {
	class(self).SetDeadzone(int64(value))
}

//go:nosplit
func (self class) SetHScroll(value int64) { //gd:ScrollContainer.set_h_scroll
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_h_scroll, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ value int64 }{value}))
}

//go:nosplit
func (self class) GetHScroll() int64 { //gd:ScrollContainer.get_h_scroll
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_h_scroll, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVScroll(value int64) { //gd:ScrollContainer.set_v_scroll
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_v_scroll, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ value int64 }{value}))
}

//go:nosplit
func (self class) GetVScroll() int64 { //gd:ScrollContainer.get_v_scroll
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_v_scroll, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHorizontalCustomStep(value float64) { //gd:ScrollContainer.set_horizontal_custom_step
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_horizontal_custom_step, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ value float64 }{value}))
}

//go:nosplit
func (self class) GetHorizontalCustomStep() float64 { //gd:ScrollContainer.get_horizontal_custom_step
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_horizontal_custom_step, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVerticalCustomStep(value float64) { //gd:ScrollContainer.set_vertical_custom_step
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_vertical_custom_step, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ value float64 }{value}))
}

//go:nosplit
func (self class) GetVerticalCustomStep() float64 { //gd:ScrollContainer.get_vertical_custom_step
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_vertical_custom_step, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHorizontalScrollMode(enable ScrollMode) { //gd:ScrollContainer.set_horizontal_scroll_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_horizontal_scroll_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ enable ScrollMode }{enable}))
}

//go:nosplit
func (self class) GetHorizontalScrollMode() ScrollMode { //gd:ScrollContainer.get_horizontal_scroll_mode
	var r_ret = gdextension.Call[ScrollMode](gd.ObjectChecked(self.AsObject()), methods.get_horizontal_scroll_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVerticalScrollMode(enable ScrollMode) { //gd:ScrollContainer.set_vertical_scroll_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_vertical_scroll_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ enable ScrollMode }{enable}))
}

//go:nosplit
func (self class) GetVerticalScrollMode() ScrollMode { //gd:ScrollContainer.get_vertical_scroll_mode
	var r_ret = gdextension.Call[ScrollMode](gd.ObjectChecked(self.AsObject()), methods.get_vertical_scroll_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDeadzone(deadzone int64) { //gd:ScrollContainer.set_deadzone
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_deadzone, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ deadzone int64 }{deadzone}))
}

//go:nosplit
func (self class) GetDeadzone() int64 { //gd:ScrollContainer.get_deadzone
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_deadzone, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFollowFocus(enabled bool) { //gd:ScrollContainer.set_follow_focus
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_follow_focus, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsFollowingFocus() bool { //gd:ScrollContainer.is_following_focus
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_following_focus, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the horizontal scrollbar [HScrollBar] of this [ScrollContainer].
[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to disable or hide a scrollbar, you can use [member horizontal_scroll_mode].
*/
//go:nosplit
func (self class) GetHScrollBar() [1]gdclass.HScrollBar { //gd:ScrollContainer.get_h_scroll_bar
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_h_scroll_bar, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.HScrollBar{gd.PointerLifetimeBoundTo[gdclass.HScrollBar](self.AsObject(), r_ret)}
	return ret
}

/*
Returns the vertical scrollbar [VScrollBar] of this [ScrollContainer].
[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to disable or hide a scrollbar, you can use [member vertical_scroll_mode].
*/
//go:nosplit
func (self class) GetVScrollBar() [1]gdclass.VScrollBar { //gd:ScrollContainer.get_v_scroll_bar
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_v_scroll_bar, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.VScrollBar{gd.PointerLifetimeBoundTo[gdclass.VScrollBar](self.AsObject(), r_ret)}
	return ret
}

/*
Ensures the given [param control] is visible (must be a direct or indirect child of the ScrollContainer). Used by [member follow_focus].
[b]Note:[/b] This will not work on a node that was just added during the same frame. If you want to scroll to a newly added child, you must wait until the next frame using [signal SceneTree.process_frame]:
[codeblock]
add_child(child_node)
await get_tree().process_frame
ensure_control_visible(child_node)
[/codeblock]
*/
//go:nosplit
func (self class) EnsureControlVisible(control [1]gdclass.Control) { //gd:ScrollContainer.ensure_control_visible
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.ensure_control_visible, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ control gdextension.Object }{gdextension.Object(gd.ObjectChecked(control[0].AsObject()))}))
}

//go:nosplit
func (self class) SetDrawFocusBorder(draw bool) { //gd:ScrollContainer.set_draw_focus_border
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_draw_focus_border, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ draw bool }{draw}))
}

//go:nosplit
func (self class) GetDrawFocusBorder() bool { //gd:ScrollContainer.get_draw_focus_border
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_draw_focus_border, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self Instance) OnScrollStarted(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("scroll_started"), gd.NewCallable(cb), 0)
}

func (self Instance) OnScrollEnded(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("scroll_ended"), gd.NewCallable(cb), 0)
}

func (self class) AsScrollContainer() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsScrollContainer() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsScrollContainer() Instance { return self.Super().AsScrollContainer() }
func (self class) AsContainer() Container.Advanced {
	return *((*Container.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsContainer() Container.Instance { return self.Super().AsContainer() }
func (self Instance) AsContainer() Container.Instance {
	return *((*Container.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsControl() Control.Advanced         { return *((*Control.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsControl() Control.Instance { return self.Super().AsControl() }
func (self Instance) AsControl() Control.Instance {
	return *((*Control.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return *((*CanvasItem.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return *((*CanvasItem.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Container.Advanced(self.AsContainer()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Container.Instance(self.AsContainer()), name)
	}
}
func init() {
	gdclass.Register("ScrollContainer", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type ScrollMode int //gd:ScrollContainer.ScrollMode

const (
	/*Scrolling disabled, scrollbar will be invisible.*/
	ScrollModeDisabled ScrollMode = 0
	/*Scrolling enabled, scrollbar will be visible only if necessary, i.e. container's content is bigger than the container.*/
	ScrollModeAuto ScrollMode = 1
	/*Scrolling enabled, scrollbar will be always visible.*/
	ScrollModeShowAlways ScrollMode = 2
	/*Scrolling enabled, scrollbar will be hidden.*/
	ScrollModeShowNever ScrollMode = 3
	/*Combines [constant SCROLL_MODE_AUTO] and [constant SCROLL_MODE_SHOW_ALWAYS]. The scrollbar is only visible if necessary, but the content size is adjusted as if it was always visible. It's useful for ensuring that content size stays the same regardless if the scrollbar is visible.*/
	ScrollModeReserve ScrollMode = 4
)
