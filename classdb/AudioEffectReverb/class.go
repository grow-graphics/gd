// Code generated by the generate package DO NOT EDIT

// Package AudioEffectReverb provides methods for working with AudioEffectReverb object instances.
package AudioEffectReverb

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/AudioEffect"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Simulates the sound of acoustic environments such as rooms, concert halls, caverns, or an open spaces.
*/
type Instance [1]gdclass.AudioEffectReverb

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_predelay_msec     gdextension.MethodForClass `hash:"373806689"`
	get_predelay_msec     gdextension.MethodForClass `hash:"1740695150"`
	set_predelay_feedback gdextension.MethodForClass `hash:"373806689"`
	get_predelay_feedback gdextension.MethodForClass `hash:"1740695150"`
	set_room_size         gdextension.MethodForClass `hash:"373806689"`
	get_room_size         gdextension.MethodForClass `hash:"1740695150"`
	set_damping           gdextension.MethodForClass `hash:"373806689"`
	get_damping           gdextension.MethodForClass `hash:"1740695150"`
	set_spread            gdextension.MethodForClass `hash:"373806689"`
	get_spread            gdextension.MethodForClass `hash:"1740695150"`
	set_dry               gdextension.MethodForClass `hash:"373806689"`
	get_dry               gdextension.MethodForClass `hash:"1740695150"`
	set_wet               gdextension.MethodForClass `hash:"373806689"`
	get_wet               gdextension.MethodForClass `hash:"1740695150"`
	set_hpf               gdextension.MethodForClass `hash:"373806689"`
	get_hpf               gdextension.MethodForClass `hash:"1740695150"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("AudioEffectReverb")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAudioEffectReverb() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AudioEffectReverb

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AudioEffectReverb)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AudioEffectReverb)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.AudioEffectReverb)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].InitRef()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) PredelayMsec() Float.X {
	return Float.X(Float.X(class(self).GetPredelayMsec()))
}

func (self Instance) SetPredelayMsec(value Float.X) {
	class(self).SetPredelayMsec(float64(value))
}

func (self Instance) PredelayFeedback() Float.X {
	return Float.X(Float.X(class(self).GetPredelayFeedback()))
}

func (self Instance) SetPredelayFeedback(value Float.X) {
	class(self).SetPredelayFeedback(float64(value))
}

func (self Instance) RoomSize() Float.X {
	return Float.X(Float.X(class(self).GetRoomSize()))
}

func (self Instance) SetRoomSize(value Float.X) {
	class(self).SetRoomSize(float64(value))
}

func (self Instance) Damping() Float.X {
	return Float.X(Float.X(class(self).GetDamping()))
}

func (self Instance) SetDamping(value Float.X) {
	class(self).SetDamping(float64(value))
}

func (self Instance) Spread() Float.X {
	return Float.X(Float.X(class(self).GetSpread()))
}

func (self Instance) SetSpread(value Float.X) {
	class(self).SetSpread(float64(value))
}

func (self Instance) Hipass() Float.X {
	return Float.X(Float.X(class(self).GetHpf()))
}

func (self Instance) SetHipass(value Float.X) {
	class(self).SetHpf(float64(value))
}

func (self Instance) Dry() Float.X {
	return Float.X(Float.X(class(self).GetDry()))
}

func (self Instance) SetDry(value Float.X) {
	class(self).SetDry(float64(value))
}

func (self Instance) Wet() Float.X {
	return Float.X(Float.X(class(self).GetWet()))
}

func (self Instance) SetWet(value Float.X) {
	class(self).SetWet(float64(value))
}

//go:nosplit
func (self class) SetPredelayMsec(msec float64) { //gd:AudioEffectReverb.set_predelay_msec
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_predelay_msec, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ msec float64 }{msec}))
}

//go:nosplit
func (self class) GetPredelayMsec() float64 { //gd:AudioEffectReverb.get_predelay_msec
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_predelay_msec, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPredelayFeedback(feedback float64) { //gd:AudioEffectReverb.set_predelay_feedback
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_predelay_feedback, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ feedback float64 }{feedback}))
}

//go:nosplit
func (self class) GetPredelayFeedback() float64 { //gd:AudioEffectReverb.get_predelay_feedback
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_predelay_feedback, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRoomSize(size float64) { //gd:AudioEffectReverb.set_room_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_room_size, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ size float64 }{size}))
}

//go:nosplit
func (self class) GetRoomSize() float64 { //gd:AudioEffectReverb.get_room_size
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_room_size, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDamping(amount float64) { //gd:AudioEffectReverb.set_damping
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_damping, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetDamping() float64 { //gd:AudioEffectReverb.get_damping
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_damping, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSpread(amount float64) { //gd:AudioEffectReverb.set_spread
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_spread, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetSpread() float64 { //gd:AudioEffectReverb.get_spread
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_spread, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDry(amount float64) { //gd:AudioEffectReverb.set_dry
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_dry, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetDry() float64 { //gd:AudioEffectReverb.get_dry
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_dry, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWet(amount float64) { //gd:AudioEffectReverb.set_wet
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_wet, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetWet() float64 { //gd:AudioEffectReverb.get_wet
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_wet, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHpf(amount float64) { //gd:AudioEffectReverb.set_hpf
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_hpf, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetHpf() float64 { //gd:AudioEffectReverb.get_hpf
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_hpf, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsAudioEffectReverb() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsAudioEffectReverb() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsAudioEffectReverb() Instance { return self.Super().AsAudioEffectReverb() }
func (self class) AsAudioEffect() AudioEffect.Advanced {
	return *((*AudioEffect.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAudioEffect() AudioEffect.Instance { return self.Super().AsAudioEffect() }
func (self Instance) AsAudioEffect() AudioEffect.Instance {
	return *((*AudioEffect.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioEffect.Advanced(self.AsAudioEffect()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioEffect.Instance(self.AsAudioEffect()), name)
	}
}
func init() {
	gdclass.Register("AudioEffectReverb", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
