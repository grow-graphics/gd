// Code generated by the generate package DO NOT EDIT

// Package GPUParticles3D provides methods for working with GPUParticles3D object instances.
package GPUParticles3D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/GeometryInstance3D"
import "graphics.gd/classdb/Material"
import "graphics.gd/classdb/Mesh"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/classdb/Skin"
import "graphics.gd/classdb/VisualInstance3D"
import "graphics.gd/variant/AABB"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Transform3D"
import "graphics.gd/variant/Vector3"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
3D particle node used to create a variety of particle systems and effects. [GPUParticles3D] features an emitter that generates some number of particles at a given rate.
Use [member process_material] to add a [ParticleProcessMaterial] to configure particle appearance and behavior. Alternatively, you can add a [ShaderMaterial] which will be applied to all particles.
*/
type Instance [1]gdclass.GPUParticles3D

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_emitting              gdextension.MethodForClass `hash:"2586408642"`
	set_amount                gdextension.MethodForClass `hash:"1286410249"`
	set_lifetime              gdextension.MethodForClass `hash:"373806689"`
	set_one_shot              gdextension.MethodForClass `hash:"2586408642"`
	set_pre_process_time      gdextension.MethodForClass `hash:"373806689"`
	set_explosiveness_ratio   gdextension.MethodForClass `hash:"373806689"`
	set_randomness_ratio      gdextension.MethodForClass `hash:"373806689"`
	set_visibility_aabb       gdextension.MethodForClass `hash:"259215842"`
	set_use_local_coordinates gdextension.MethodForClass `hash:"2586408642"`
	set_fixed_fps             gdextension.MethodForClass `hash:"1286410249"`
	set_fractional_delta      gdextension.MethodForClass `hash:"2586408642"`
	set_interpolate           gdextension.MethodForClass `hash:"2586408642"`
	set_process_material      gdextension.MethodForClass `hash:"2757459619"`
	set_speed_scale           gdextension.MethodForClass `hash:"373806689"`
	set_collision_base_size   gdextension.MethodForClass `hash:"373806689"`
	set_interp_to_end         gdextension.MethodForClass `hash:"373806689"`
	is_emitting               gdextension.MethodForClass `hash:"36873697"`
	get_amount                gdextension.MethodForClass `hash:"3905245786"`
	get_lifetime              gdextension.MethodForClass `hash:"1740695150"`
	get_one_shot              gdextension.MethodForClass `hash:"36873697"`
	get_pre_process_time      gdextension.MethodForClass `hash:"1740695150"`
	get_explosiveness_ratio   gdextension.MethodForClass `hash:"1740695150"`
	get_randomness_ratio      gdextension.MethodForClass `hash:"1740695150"`
	get_visibility_aabb       gdextension.MethodForClass `hash:"1068685055"`
	get_use_local_coordinates gdextension.MethodForClass `hash:"36873697"`
	get_fixed_fps             gdextension.MethodForClass `hash:"3905245786"`
	get_fractional_delta      gdextension.MethodForClass `hash:"36873697"`
	get_interpolate           gdextension.MethodForClass `hash:"36873697"`
	get_process_material      gdextension.MethodForClass `hash:"5934680"`
	get_speed_scale           gdextension.MethodForClass `hash:"1740695150"`
	get_collision_base_size   gdextension.MethodForClass `hash:"1740695150"`
	get_interp_to_end         gdextension.MethodForClass `hash:"1740695150"`
	set_use_fixed_seed        gdextension.MethodForClass `hash:"2586408642"`
	get_use_fixed_seed        gdextension.MethodForClass `hash:"36873697"`
	set_seed                  gdextension.MethodForClass `hash:"1286410249"`
	get_seed                  gdextension.MethodForClass `hash:"3905245786"`
	set_draw_order            gdextension.MethodForClass `hash:"1208074815"`
	get_draw_order            gdextension.MethodForClass `hash:"3770381780"`
	set_draw_passes           gdextension.MethodForClass `hash:"1286410249"`
	set_draw_pass_mesh        gdextension.MethodForClass `hash:"969122797"`
	get_draw_passes           gdextension.MethodForClass `hash:"3905245786"`
	get_draw_pass_mesh        gdextension.MethodForClass `hash:"1576363275"`
	set_skin                  gdextension.MethodForClass `hash:"3971435618"`
	get_skin                  gdextension.MethodForClass `hash:"2074563878"`
	restart                   gdextension.MethodForClass `hash:"107499316"`
	capture_aabb              gdextension.MethodForClass `hash:"1068685055"`
	set_sub_emitter           gdextension.MethodForClass `hash:"1348162250"`
	get_sub_emitter           gdextension.MethodForClass `hash:"4075236667"`
	emit_particle             gdextension.MethodForClass `hash:"992173727"`
	set_trail_enabled         gdextension.MethodForClass `hash:"2586408642"`
	set_trail_lifetime        gdextension.MethodForClass `hash:"373806689"`
	is_trail_enabled          gdextension.MethodForClass `hash:"36873697"`
	get_trail_lifetime        gdextension.MethodForClass `hash:"1740695150"`
	set_transform_align       gdextension.MethodForClass `hash:"3892425954"`
	get_transform_align       gdextension.MethodForClass `hash:"2100992166"`
	convert_from_particles    gdextension.MethodForClass `hash:"1078189570"`
	set_amount_ratio          gdextension.MethodForClass `hash:"373806689"`
	get_amount_ratio          gdextension.MethodForClass `hash:"1740695150"`
	request_particles_process gdextension.MethodForClass `hash:"373806689"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("GPUParticles3D")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.GPUParticles3D

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsGPUParticles3D() Instance
}

/*
Restarts the particle emission cycle, clearing existing particles. To avoid particles vanishing from the viewport, wait for the [signal finished] signal before calling.
[b]Note:[/b] The [signal finished] signal is only emitted by [member one_shot] emitters.
If [param keep_seed] is [code]true[/code], the current random seed will be preserved. Useful for seeking and playback.
*/
func (self Instance) Restart() { //gd:GPUParticles3D.restart
	Advanced(self).Restart(false)
}

/*
Restarts the particle emission cycle, clearing existing particles. To avoid particles vanishing from the viewport, wait for the [signal finished] signal before calling.
[b]Note:[/b] The [signal finished] signal is only emitted by [member one_shot] emitters.
If [param keep_seed] is [code]true[/code], the current random seed will be preserved. Useful for seeking and playback.
*/
func (self Expanded) Restart(keep_seed bool) { //gd:GPUParticles3D.restart
	Advanced(self).Restart(keep_seed)
}

/*
Returns the axis-aligned bounding box that contains all the particles that are active in the current frame.
*/
func (self Instance) CaptureAabb() AABB.PositionSize { //gd:GPUParticles3D.capture_aabb
	return AABB.PositionSize(Advanced(self).CaptureAabb())
}

/*
Emits a single particle. Whether [param xform], [param velocity], [param color] and [param custom] are applied depends on the value of [param flags]. See [enum EmitFlags].
The default ParticleProcessMaterial will overwrite [param color] and use the contents of [param custom] as [code](rotation, age, animation, lifetime)[/code].
[b]Note:[/b] [method emit_particle] is only supported on the Forward+ and Mobile rendering methods, not Compatibility.
*/
func (self Instance) EmitParticle(xform Transform3D.BasisOrigin, velocity Vector3.XYZ, color Color.RGBA, custom Color.RGBA, flags int) { //gd:GPUParticles3D.emit_particle
	Advanced(self).EmitParticle(Transform3D.BasisOrigin(xform), Vector3.XYZ(velocity), Color.RGBA(color), Color.RGBA(custom), int64(flags))
}

/*
Sets this node's properties to match a given [CPUParticles3D] node.
*/
func (self Instance) ConvertFromParticles(particles Node.Instance) { //gd:GPUParticles3D.convert_from_particles
	Advanced(self).ConvertFromParticles(particles)
}

/*
Requests the particles to process for extra process time during a single frame.
Useful for particle playback, if used in combination with [member use_fixed_seed] or by calling [method restart] with parameter [code]keep_seed[/code] set to [code]true[/code].
*/
func (self Instance) RequestParticlesProcess(process_time Float.X) { //gd:GPUParticles3D.request_particles_process
	Advanced(self).RequestParticlesProcess(float64(process_time))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.GPUParticles3D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.GPUParticles3D)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.GPUParticles3D)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.GPUParticles3D)(unsafe.Pointer(&object))}
	object[0].Notification(0, false)
	return casted
}

func (self Instance) Emitting() bool {
	return bool(class(self).IsEmitting())
}

func (self Instance) SetEmitting(value bool) {
	class(self).SetEmitting(value)
}

func (self Instance) Amount() int {
	return int(int(class(self).GetAmount()))
}

func (self Instance) SetAmount(value int) {
	class(self).SetAmount(int64(value))
}

func (self Instance) AmountRatio() Float.X {
	return Float.X(Float.X(class(self).GetAmountRatio()))
}

func (self Instance) SetAmountRatio(value Float.X) {
	class(self).SetAmountRatio(float64(value))
}

func (self Instance) SubEmitter() string {
	return string(class(self).GetSubEmitter().String())
}

func (self Instance) SetSubEmitter(value string) {
	class(self).SetSubEmitter(Path.ToNode(String.New(value)))
}

func (self Instance) Lifetime() Float.X {
	return Float.X(Float.X(class(self).GetLifetime()))
}

func (self Instance) SetLifetime(value Float.X) {
	class(self).SetLifetime(float64(value))
}

func (self Instance) InterpToEnd() Float.X {
	return Float.X(Float.X(class(self).GetInterpToEnd()))
}

func (self Instance) SetInterpToEnd(value Float.X) {
	class(self).SetInterpToEnd(float64(value))
}

func (self Instance) OneShot() bool {
	return bool(class(self).GetOneShot())
}

func (self Instance) SetOneShot(value bool) {
	class(self).SetOneShot(value)
}

func (self Instance) Preprocess() Float.X {
	return Float.X(Float.X(class(self).GetPreProcessTime()))
}

func (self Instance) SetPreprocess(value Float.X) {
	class(self).SetPreProcessTime(float64(value))
}

func (self Instance) SpeedScale() Float.X {
	return Float.X(Float.X(class(self).GetSpeedScale()))
}

func (self Instance) SetSpeedScale(value Float.X) {
	class(self).SetSpeedScale(float64(value))
}

func (self Instance) Explosiveness() Float.X {
	return Float.X(Float.X(class(self).GetExplosivenessRatio()))
}

func (self Instance) SetExplosiveness(value Float.X) {
	class(self).SetExplosivenessRatio(float64(value))
}

func (self Instance) Randomness() Float.X {
	return Float.X(Float.X(class(self).GetRandomnessRatio()))
}

func (self Instance) SetRandomness(value Float.X) {
	class(self).SetRandomnessRatio(float64(value))
}

func (self Instance) UseFixedSeed() bool {
	return bool(class(self).GetUseFixedSeed())
}

func (self Instance) SetUseFixedSeed(value bool) {
	class(self).SetUseFixedSeed(value)
}

func (self Instance) Seed() int {
	return int(int(class(self).GetSeed()))
}

func (self Instance) SetSeed(value int) {
	class(self).SetSeed(int64(value))
}

func (self Instance) FixedFps() int {
	return int(int(class(self).GetFixedFps()))
}

func (self Instance) SetFixedFps(value int) {
	class(self).SetFixedFps(int64(value))
}

func (self Instance) Interpolate() bool {
	return bool(class(self).GetInterpolate())
}

func (self Instance) SetInterpolate(value bool) {
	class(self).SetInterpolate(value)
}

func (self Instance) FractDelta() bool {
	return bool(class(self).GetFractionalDelta())
}

func (self Instance) SetFractDelta(value bool) {
	class(self).SetFractionalDelta(value)
}

func (self Instance) CollisionBaseSize() Float.X {
	return Float.X(Float.X(class(self).GetCollisionBaseSize()))
}

func (self Instance) SetCollisionBaseSize(value Float.X) {
	class(self).SetCollisionBaseSize(float64(value))
}

func (self Instance) VisibilityAabb() AABB.PositionSize {
	return AABB.PositionSize(class(self).GetVisibilityAabb())
}

func (self Instance) SetVisibilityAabb(value AABB.PositionSize) {
	class(self).SetVisibilityAabb(AABB.PositionSize(value))
}

func (self Instance) LocalCoords() bool {
	return bool(class(self).GetUseLocalCoordinates())
}

func (self Instance) SetLocalCoords(value bool) {
	class(self).SetUseLocalCoordinates(value)
}

func (self Instance) DrawOrder() DrawOrder {
	return DrawOrder(class(self).GetDrawOrder())
}

func (self Instance) SetDrawOrder(value DrawOrder) {
	class(self).SetDrawOrder(value)
}

func (self Instance) TransformAlign() TransformAlign {
	return TransformAlign(class(self).GetTransformAlign())
}

func (self Instance) SetTransformAlign(value TransformAlign) {
	class(self).SetTransformAlign(value)
}

func (self Instance) TrailEnabled() bool {
	return bool(class(self).IsTrailEnabled())
}

func (self Instance) SetTrailEnabled(value bool) {
	class(self).SetTrailEnabled(value)
}

func (self Instance) TrailLifetime() Float.X {
	return Float.X(Float.X(class(self).GetTrailLifetime()))
}

func (self Instance) SetTrailLifetime(value Float.X) {
	class(self).SetTrailLifetime(float64(value))
}

func (self Instance) ProcessMaterial() Material.Instance {
	return Material.Instance(class(self).GetProcessMaterial())
}

func (self Instance) SetProcessMaterial(value Material.Instance) {
	class(self).SetProcessMaterial(value)
}

func (self Instance) DrawPasses() int {
	return int(int(class(self).GetDrawPasses()))
}

func (self Instance) SetDrawPasses(value int) {
	class(self).SetDrawPasses(int64(value))
}

func (self Instance) DrawPass1() Mesh.Instance {
	return Mesh.Instance(class(self).GetDrawPassMesh(0))
}

func (self Instance) SetDrawPass1(value Mesh.Instance) {
	class(self).SetDrawPassMesh(0, value)
}

func (self Instance) DrawPass2() Mesh.Instance {
	return Mesh.Instance(class(self).GetDrawPassMesh(1))
}

func (self Instance) SetDrawPass2(value Mesh.Instance) {
	class(self).SetDrawPassMesh(1, value)
}

func (self Instance) DrawPass3() Mesh.Instance {
	return Mesh.Instance(class(self).GetDrawPassMesh(2))
}

func (self Instance) SetDrawPass3(value Mesh.Instance) {
	class(self).SetDrawPassMesh(2, value)
}

func (self Instance) DrawPass4() Mesh.Instance {
	return Mesh.Instance(class(self).GetDrawPassMesh(3))
}

func (self Instance) SetDrawPass4(value Mesh.Instance) {
	class(self).SetDrawPassMesh(3, value)
}

func (self Instance) DrawSkin() Skin.Instance {
	return Skin.Instance(class(self).GetSkin())
}

func (self Instance) SetDrawSkin(value Skin.Instance) {
	class(self).SetSkin(value)
}

//go:nosplit
func (self class) SetEmitting(emitting bool) { //gd:GPUParticles3D.set_emitting
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_emitting, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ emitting bool }{emitting}))
}

//go:nosplit
func (self class) SetAmount(amount int64) { //gd:GPUParticles3D.set_amount
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_amount, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ amount int64 }{amount}))
}

//go:nosplit
func (self class) SetLifetime(secs float64) { //gd:GPUParticles3D.set_lifetime
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_lifetime, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ secs float64 }{secs}))
}

//go:nosplit
func (self class) SetOneShot(enable bool) { //gd:GPUParticles3D.set_one_shot
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_one_shot, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) SetPreProcessTime(secs float64) { //gd:GPUParticles3D.set_pre_process_time
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pre_process_time, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ secs float64 }{secs}))
}

//go:nosplit
func (self class) SetExplosivenessRatio(ratio float64) { //gd:GPUParticles3D.set_explosiveness_ratio
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_explosiveness_ratio, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ ratio float64 }{ratio}))
}

//go:nosplit
func (self class) SetRandomnessRatio(ratio float64) { //gd:GPUParticles3D.set_randomness_ratio
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_randomness_ratio, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ ratio float64 }{ratio}))
}

//go:nosplit
func (self class) SetVisibilityAabb(aabb AABB.PositionSize) { //gd:GPUParticles3D.set_visibility_aabb
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_visibility_aabb, 0|(gdextension.SizeAABB<<4), unsafe.Pointer(&struct{ aabb AABB.PositionSize }{aabb}))
}

//go:nosplit
func (self class) SetUseLocalCoordinates(enable bool) { //gd:GPUParticles3D.set_use_local_coordinates
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_use_local_coordinates, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) SetFixedFps(fps int64) { //gd:GPUParticles3D.set_fixed_fps
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_fixed_fps, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ fps int64 }{fps}))
}

//go:nosplit
func (self class) SetFractionalDelta(enable bool) { //gd:GPUParticles3D.set_fractional_delta
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_fractional_delta, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) SetInterpolate(enable bool) { //gd:GPUParticles3D.set_interpolate
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_interpolate, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) SetProcessMaterial(material [1]gdclass.Material) { //gd:GPUParticles3D.set_process_material
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_process_material, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ material gdextension.Object }{gdextension.Object(gd.ObjectChecked(material[0].AsObject()))}))
}

//go:nosplit
func (self class) SetSpeedScale(scale float64) { //gd:GPUParticles3D.set_speed_scale
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_speed_scale, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ scale float64 }{scale}))
}

//go:nosplit
func (self class) SetCollisionBaseSize(size float64) { //gd:GPUParticles3D.set_collision_base_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_collision_base_size, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ size float64 }{size}))
}

//go:nosplit
func (self class) SetInterpToEnd(interp float64) { //gd:GPUParticles3D.set_interp_to_end
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_interp_to_end, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ interp float64 }{interp}))
}

//go:nosplit
func (self class) IsEmitting() bool { //gd:GPUParticles3D.is_emitting
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_emitting, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetAmount() int64 { //gd:GPUParticles3D.get_amount
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_amount, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetLifetime() float64 { //gd:GPUParticles3D.get_lifetime
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_lifetime, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetOneShot() bool { //gd:GPUParticles3D.get_one_shot
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_one_shot, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetPreProcessTime() float64 { //gd:GPUParticles3D.get_pre_process_time
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_pre_process_time, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetExplosivenessRatio() float64 { //gd:GPUParticles3D.get_explosiveness_ratio
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_explosiveness_ratio, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetRandomnessRatio() float64 { //gd:GPUParticles3D.get_randomness_ratio
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_randomness_ratio, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetVisibilityAabb() AABB.PositionSize { //gd:GPUParticles3D.get_visibility_aabb
	var r_ret = gdextension.Call[AABB.PositionSize](gd.ObjectChecked(self.AsObject()), methods.get_visibility_aabb, gdextension.SizeAABB, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetUseLocalCoordinates() bool { //gd:GPUParticles3D.get_use_local_coordinates
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_use_local_coordinates, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetFixedFps() int64 { //gd:GPUParticles3D.get_fixed_fps
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_fixed_fps, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetFractionalDelta() bool { //gd:GPUParticles3D.get_fractional_delta
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_fractional_delta, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetInterpolate() bool { //gd:GPUParticles3D.get_interpolate
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_interpolate, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetProcessMaterial() [1]gdclass.Material { //gd:GPUParticles3D.get_process_material
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_process_material, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Material{gd.PointerWithOwnershipTransferredToGo[gdclass.Material](r_ret)}
	return ret
}

//go:nosplit
func (self class) GetSpeedScale() float64 { //gd:GPUParticles3D.get_speed_scale
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_speed_scale, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetCollisionBaseSize() float64 { //gd:GPUParticles3D.get_collision_base_size
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_collision_base_size, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetInterpToEnd() float64 { //gd:GPUParticles3D.get_interp_to_end
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_interp_to_end, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetUseFixedSeed(use_fixed_seed bool) { //gd:GPUParticles3D.set_use_fixed_seed
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_use_fixed_seed, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ use_fixed_seed bool }{use_fixed_seed}))
}

//go:nosplit
func (self class) GetUseFixedSeed() bool { //gd:GPUParticles3D.get_use_fixed_seed
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_use_fixed_seed, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSeed(seed int64) { //gd:GPUParticles3D.set_seed
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_seed, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ seed int64 }{seed}))
}

//go:nosplit
func (self class) GetSeed() int64 { //gd:GPUParticles3D.get_seed
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_seed, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDrawOrder(order DrawOrder) { //gd:GPUParticles3D.set_draw_order
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_draw_order, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ order DrawOrder }{order}))
}

//go:nosplit
func (self class) GetDrawOrder() DrawOrder { //gd:GPUParticles3D.get_draw_order
	var r_ret = gdextension.Call[DrawOrder](gd.ObjectChecked(self.AsObject()), methods.get_draw_order, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDrawPasses(passes int64) { //gd:GPUParticles3D.set_draw_passes
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_draw_passes, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ passes int64 }{passes}))
}

/*
Sets the [Mesh] that is drawn at index [param pass].
*/
//go:nosplit
func (self class) SetDrawPassMesh(pass int64, mesh [1]gdclass.Mesh) { //gd:GPUParticles3D.set_draw_pass_mesh
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_draw_pass_mesh, 0|(gdextension.SizeInt<<4)|(gdextension.SizeObject<<8), unsafe.Pointer(&struct {
		pass int64
		mesh gdextension.Object
	}{pass, gdextension.Object(gd.ObjectChecked(mesh[0].AsObject()))}))
}

//go:nosplit
func (self class) GetDrawPasses() int64 { //gd:GPUParticles3D.get_draw_passes
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_draw_passes, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the [Mesh] that is drawn at index [param pass].
*/
//go:nosplit
func (self class) GetDrawPassMesh(pass int64) [1]gdclass.Mesh { //gd:GPUParticles3D.get_draw_pass_mesh
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_draw_pass_mesh, gdextension.SizeObject|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ pass int64 }{pass}))
	var ret = [1]gdclass.Mesh{gd.PointerWithOwnershipTransferredToGo[gdclass.Mesh](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetSkin(skin [1]gdclass.Skin) { //gd:GPUParticles3D.set_skin
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_skin, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ skin gdextension.Object }{gdextension.Object(gd.ObjectChecked(skin[0].AsObject()))}))
}

//go:nosplit
func (self class) GetSkin() [1]gdclass.Skin { //gd:GPUParticles3D.get_skin
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_skin, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Skin{gd.PointerWithOwnershipTransferredToGo[gdclass.Skin](r_ret)}
	return ret
}

/*
Restarts the particle emission cycle, clearing existing particles. To avoid particles vanishing from the viewport, wait for the [signal finished] signal before calling.
[b]Note:[/b] The [signal finished] signal is only emitted by [member one_shot] emitters.
If [param keep_seed] is [code]true[/code], the current random seed will be preserved. Useful for seeking and playback.
*/
//go:nosplit
func (self class) Restart(keep_seed bool) { //gd:GPUParticles3D.restart
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.restart, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ keep_seed bool }{keep_seed}))
}

/*
Returns the axis-aligned bounding box that contains all the particles that are active in the current frame.
*/
//go:nosplit
func (self class) CaptureAabb() AABB.PositionSize { //gd:GPUParticles3D.capture_aabb
	var r_ret = gdextension.Call[AABB.PositionSize](gd.ObjectChecked(self.AsObject()), methods.capture_aabb, gdextension.SizeAABB, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSubEmitter(path Path.ToNode) { //gd:GPUParticles3D.set_sub_emitter
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_sub_emitter, 0|(gdextension.SizeNodePath<<4), unsafe.Pointer(&struct{ path gdextension.NodePath }{pointers.Get(gd.InternalNodePath(path))}))
}

//go:nosplit
func (self class) GetSubEmitter() Path.ToNode { //gd:GPUParticles3D.get_sub_emitter
	var r_ret = gdextension.Call[gdextension.NodePath](gd.ObjectChecked(self.AsObject()), methods.get_sub_emitter, gdextension.SizeNodePath, unsafe.Pointer(&struct{}{}))
	var ret = Path.ToNode(String.Via(gd.NodePathProxy{}, pointers.Pack(pointers.New[gd.NodePath](r_ret))))
	return ret
}

/*
Emits a single particle. Whether [param xform], [param velocity], [param color] and [param custom] are applied depends on the value of [param flags]. See [enum EmitFlags].
The default ParticleProcessMaterial will overwrite [param color] and use the contents of [param custom] as [code](rotation, age, animation, lifetime)[/code].
[b]Note:[/b] [method emit_particle] is only supported on the Forward+ and Mobile rendering methods, not Compatibility.
*/
//go:nosplit
func (self class) EmitParticle(xform Transform3D.BasisOrigin, velocity Vector3.XYZ, color Color.RGBA, custom Color.RGBA, flags int64) { //gd:GPUParticles3D.emit_particle
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.emit_particle, 0|(gdextension.SizeTransform3D<<4)|(gdextension.SizeVector3<<8)|(gdextension.SizeColor<<12)|(gdextension.SizeColor<<16)|(gdextension.SizeInt<<20), unsafe.Pointer(&struct {
		xform    Transform3D.BasisOrigin
		velocity Vector3.XYZ
		color    Color.RGBA
		custom   Color.RGBA
		flags    int64
	}{gd.Transposed(xform), velocity, color, custom, flags}))
}

//go:nosplit
func (self class) SetTrailEnabled(enabled bool) { //gd:GPUParticles3D.set_trail_enabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_trail_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) SetTrailLifetime(secs float64) { //gd:GPUParticles3D.set_trail_lifetime
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_trail_lifetime, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ secs float64 }{secs}))
}

//go:nosplit
func (self class) IsTrailEnabled() bool { //gd:GPUParticles3D.is_trail_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_trail_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetTrailLifetime() float64 { //gd:GPUParticles3D.get_trail_lifetime
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_trail_lifetime, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTransformAlign(align TransformAlign) { //gd:GPUParticles3D.set_transform_align
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_transform_align, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ align TransformAlign }{align}))
}

//go:nosplit
func (self class) GetTransformAlign() TransformAlign { //gd:GPUParticles3D.get_transform_align
	var r_ret = gdextension.Call[TransformAlign](gd.ObjectChecked(self.AsObject()), methods.get_transform_align, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets this node's properties to match a given [CPUParticles3D] node.
*/
//go:nosplit
func (self class) ConvertFromParticles(particles [1]gdclass.Node) { //gd:GPUParticles3D.convert_from_particles
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.convert_from_particles, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ particles gdextension.Object }{gdextension.Object(gd.ObjectChecked(particles[0].AsObject()))}))
}

//go:nosplit
func (self class) SetAmountRatio(ratio float64) { //gd:GPUParticles3D.set_amount_ratio
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_amount_ratio, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ ratio float64 }{ratio}))
}

//go:nosplit
func (self class) GetAmountRatio() float64 { //gd:GPUParticles3D.get_amount_ratio
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_amount_ratio, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Requests the particles to process for extra process time during a single frame.
Useful for particle playback, if used in combination with [member use_fixed_seed] or by calling [method restart] with parameter [code]keep_seed[/code] set to [code]true[/code].
*/
//go:nosplit
func (self class) RequestParticlesProcess(process_time float64) { //gd:GPUParticles3D.request_particles_process
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.request_particles_process, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ process_time float64 }{process_time}))
}
func (self Instance) OnFinished(cb func(), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("finished"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) Finished() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`Finished`))))
}

func (self class) AsGPUParticles3D() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsGPUParticles3D() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsGPUParticles3D() Instance { return self.Super().AsGPUParticles3D() }
func (self class) AsGeometryInstance3D() GeometryInstance3D.Advanced {
	return *((*GeometryInstance3D.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsGeometryInstance3D() GeometryInstance3D.Instance {
	return self.Super().AsGeometryInstance3D()
}
func (self Instance) AsGeometryInstance3D() GeometryInstance3D.Instance {
	return *((*GeometryInstance3D.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsVisualInstance3D() VisualInstance3D.Advanced {
	return *((*VisualInstance3D.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisualInstance3D() VisualInstance3D.Instance {
	return self.Super().AsVisualInstance3D()
}
func (self Instance) AsVisualInstance3D() VisualInstance3D.Instance {
	return *((*VisualInstance3D.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode3D() Node3D.Advanced         { return *((*Node3D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode3D() Node3D.Instance { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance      { return *((*Node3D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsNode() Node.Advanced             { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance     { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance          { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(GeometryInstance3D.Advanced(self.AsGeometryInstance3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(GeometryInstance3D.Instance(self.AsGeometryInstance3D()), name)
	}
}
func init() {
	gdclass.Register("GPUParticles3D", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type DrawOrder int //gd:GPUParticles3D.DrawOrder

const (
	/*Particles are drawn in the order emitted.*/
	DrawOrderIndex DrawOrder = 0
	/*Particles are drawn in order of remaining lifetime. In other words, the particle with the highest lifetime is drawn at the front.*/
	DrawOrderLifetime DrawOrder = 1
	/*Particles are drawn in reverse order of remaining lifetime. In other words, the particle with the lowest lifetime is drawn at the front.*/
	DrawOrderReverseLifetime DrawOrder = 2
	/*Particles are drawn in order of depth.*/
	DrawOrderViewDepth DrawOrder = 3
)

type EmitFlags int //gd:GPUParticles3D.EmitFlags

const (
	/*Particle starts at the specified position.*/
	EmitFlagPosition EmitFlags = 1
	/*Particle starts with specified rotation and scale.*/
	EmitFlagRotationScale EmitFlags = 2
	/*Particle starts with the specified velocity vector, which defines the emission direction and speed.*/
	EmitFlagVelocity EmitFlags = 4
	/*Particle starts with specified color.*/
	EmitFlagColor EmitFlags = 8
	/*Particle starts with specified [code]CUSTOM[/code] data.*/
	EmitFlagCustom EmitFlags = 16
)

type TransformAlign int //gd:GPUParticles3D.TransformAlign

const (
	TransformAlignDisabled              TransformAlign = 0
	TransformAlignZBillboard            TransformAlign = 1
	TransformAlignYToVelocity           TransformAlign = 2
	TransformAlignZBillboardYToVelocity TransformAlign = 3
)
const MaxDrawPasses int = 4 //gd:GPUParticles3D.MAX_DRAW_PASSES
