// Code generated by the generate package DO NOT EDIT

// Package InputEventKey provides methods for working with InputEventKey object instances.
package InputEventKey

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Input"
import "graphics.gd/classdb/InputEvent"
import "graphics.gd/classdb/InputEventFromWindow"
import "graphics.gd/classdb/InputEventWithModifiers"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
An input event for keys on a keyboard. Supports key presses, key releases and [member echo] events. It can also be received in [method Node._unhandled_key_input].
[b]Note:[/b] Events received from the keyboard usually have all properties set. Event mappings should have only one of the [member keycode], [member physical_keycode] or [member unicode] set.
When events are compared, properties are checked in the following priority - [member keycode], [member physical_keycode] and [member unicode]. Events with the first matching value will be considered equal.
*/
type Instance [1]gdclass.InputEventKey

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsInputEventKey() Instance
}

/*
Returns the Latin keycode combined with modifier keys such as [kbd]Shift[/kbd] or [kbd]Alt[/kbd]. See also [InputEventWithModifiers].
To get a human-readable representation of the [InputEventKey] with modifiers, use [code]OS.get_keycode_string(event.get_keycode_with_modifiers())[/code] where [code]event[/code] is the [InputEventKey].
*/
func (self Instance) GetKeycodeWithModifiers() Input.Key { //gd:InputEventKey.get_keycode_with_modifiers
	return Input.Key(Advanced(self).GetKeycodeWithModifiers())
}

/*
Returns the physical keycode combined with modifier keys such as [kbd]Shift[/kbd] or [kbd]Alt[/kbd]. See also [InputEventWithModifiers].
To get a human-readable representation of the [InputEventKey] with modifiers, use [code]OS.get_keycode_string(event.get_physical_keycode_with_modifiers())[/code] where [code]event[/code] is the [InputEventKey].
*/
func (self Instance) GetPhysicalKeycodeWithModifiers() Input.Key { //gd:InputEventKey.get_physical_keycode_with_modifiers
	return Input.Key(Advanced(self).GetPhysicalKeycodeWithModifiers())
}

/*
Returns the localized key label combined with modifier keys such as [kbd]Shift[/kbd] or [kbd]Alt[/kbd]. See also [InputEventWithModifiers].
To get a human-readable representation of the [InputEventKey] with modifiers, use [code]OS.get_keycode_string(event.get_key_label_with_modifiers())[/code] where [code]event[/code] is the [InputEventKey].
*/
func (self Instance) GetKeyLabelWithModifiers() Input.Key { //gd:InputEventKey.get_key_label_with_modifiers
	return Input.Key(Advanced(self).GetKeyLabelWithModifiers())
}

/*
Returns a [String] representation of the event's [member keycode] and modifiers.
*/
func (self Instance) AsTextKeycode() string { //gd:InputEventKey.as_text_keycode
	return string(Advanced(self).AsTextKeycode().String())
}

/*
Returns a [String] representation of the event's [member physical_keycode] and modifiers.
*/
func (self Instance) AsTextPhysicalKeycode() string { //gd:InputEventKey.as_text_physical_keycode
	return string(Advanced(self).AsTextPhysicalKeycode().String())
}

/*
Returns a [String] representation of the event's [member key_label] and modifiers.
*/
func (self Instance) AsTextKeyLabel() string { //gd:InputEventKey.as_text_key_label
	return string(Advanced(self).AsTextKeyLabel().String())
}

/*
Returns a [String] representation of the event's [member location]. This will be a blank string if the event is not specific to a location.
*/
func (self Instance) AsTextLocation() string { //gd:InputEventKey.as_text_location
	return string(Advanced(self).AsTextLocation().String())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.InputEventKey

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("InputEventKey"))
	casted := Instance{*(*gdclass.InputEventKey)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) SetPressed(value bool) {
	class(self).SetPressed(value)
}

func (self Instance) Keycode() Input.Key {
	return Input.Key(class(self).GetKeycode())
}

func (self Instance) SetKeycode(value Input.Key) {
	class(self).SetKeycode(value)
}

func (self Instance) PhysicalKeycode() Input.Key {
	return Input.Key(class(self).GetPhysicalKeycode())
}

func (self Instance) SetPhysicalKeycode(value Input.Key) {
	class(self).SetPhysicalKeycode(value)
}

func (self Instance) KeyLabel() Input.Key {
	return Input.Key(class(self).GetKeyLabel())
}

func (self Instance) SetKeyLabel(value Input.Key) {
	class(self).SetKeyLabel(value)
}

func (self Instance) Unicode() int {
	return int(int(class(self).GetUnicode()))
}

func (self Instance) SetUnicode(value int) {
	class(self).SetUnicode(int64(value))
}

func (self Instance) Location() Input.KeyLocation {
	return Input.KeyLocation(class(self).GetLocation())
}

func (self Instance) SetLocation(value Input.KeyLocation) {
	class(self).SetLocation(value)
}

func (self Instance) SetEcho(value bool) {
	class(self).SetEcho(value)
}

//go:nosplit
func (self class) SetPressed(pressed bool) { //gd:InputEventKey.set_pressed
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_set_pressed), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ pressed bool }{pressed}))
}

//go:nosplit
func (self class) SetKeycode(keycode Input.Key) { //gd:InputEventKey.set_keycode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_set_keycode), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ keycode Input.Key }{keycode}))
}

//go:nosplit
func (self class) GetKeycode() Input.Key { //gd:InputEventKey.get_keycode
	var r_ret = gdextension.Call[Input.Key](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_get_keycode), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPhysicalKeycode(physical_keycode Input.Key) { //gd:InputEventKey.set_physical_keycode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_set_physical_keycode), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ physical_keycode Input.Key }{physical_keycode}))
}

//go:nosplit
func (self class) GetPhysicalKeycode() Input.Key { //gd:InputEventKey.get_physical_keycode
	var r_ret = gdextension.Call[Input.Key](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_get_physical_keycode), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetKeyLabel(key_label Input.Key) { //gd:InputEventKey.set_key_label
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_set_key_label), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ key_label Input.Key }{key_label}))
}

//go:nosplit
func (self class) GetKeyLabel() Input.Key { //gd:InputEventKey.get_key_label
	var r_ret = gdextension.Call[Input.Key](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_get_key_label), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetUnicode(unicode int64) { //gd:InputEventKey.set_unicode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_set_unicode), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ unicode int64 }{unicode}))
}

//go:nosplit
func (self class) GetUnicode() int64 { //gd:InputEventKey.get_unicode
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_get_unicode), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetLocation(location Input.KeyLocation) { //gd:InputEventKey.set_location
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_set_location), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ location Input.KeyLocation }{location}))
}

//go:nosplit
func (self class) GetLocation() Input.KeyLocation { //gd:InputEventKey.get_location
	var r_ret = gdextension.Call[Input.KeyLocation](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_get_location), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEcho(echo bool) { //gd:InputEventKey.set_echo
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_set_echo), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ echo bool }{echo}))
}

/*
Returns the Latin keycode combined with modifier keys such as [kbd]Shift[/kbd] or [kbd]Alt[/kbd]. See also [InputEventWithModifiers].
To get a human-readable representation of the [InputEventKey] with modifiers, use [code]OS.get_keycode_string(event.get_keycode_with_modifiers())[/code] where [code]event[/code] is the [InputEventKey].
*/
//go:nosplit
func (self class) GetKeycodeWithModifiers() Input.Key { //gd:InputEventKey.get_keycode_with_modifiers
	var r_ret = gdextension.Call[Input.Key](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_get_keycode_with_modifiers), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the physical keycode combined with modifier keys such as [kbd]Shift[/kbd] or [kbd]Alt[/kbd]. See also [InputEventWithModifiers].
To get a human-readable representation of the [InputEventKey] with modifiers, use [code]OS.get_keycode_string(event.get_physical_keycode_with_modifiers())[/code] where [code]event[/code] is the [InputEventKey].
*/
//go:nosplit
func (self class) GetPhysicalKeycodeWithModifiers() Input.Key { //gd:InputEventKey.get_physical_keycode_with_modifiers
	var r_ret = gdextension.Call[Input.Key](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_get_physical_keycode_with_modifiers), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the localized key label combined with modifier keys such as [kbd]Shift[/kbd] or [kbd]Alt[/kbd]. See also [InputEventWithModifiers].
To get a human-readable representation of the [InputEventKey] with modifiers, use [code]OS.get_keycode_string(event.get_key_label_with_modifiers())[/code] where [code]event[/code] is the [InputEventKey].
*/
//go:nosplit
func (self class) GetKeyLabelWithModifiers() Input.Key { //gd:InputEventKey.get_key_label_with_modifiers
	var r_ret = gdextension.Call[Input.Key](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_get_key_label_with_modifiers), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns a [String] representation of the event's [member keycode] and modifiers.
*/
//go:nosplit
func (self class) AsTextKeycode() String.Readable { //gd:InputEventKey.as_text_keycode
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_as_text_keycode), gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns a [String] representation of the event's [member physical_keycode] and modifiers.
*/
//go:nosplit
func (self class) AsTextPhysicalKeycode() String.Readable { //gd:InputEventKey.as_text_physical_keycode
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_as_text_physical_keycode), gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns a [String] representation of the event's [member key_label] and modifiers.
*/
//go:nosplit
func (self class) AsTextKeyLabel() String.Readable { //gd:InputEventKey.as_text_key_label
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_as_text_key_label), gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns a [String] representation of the event's [member location]. This will be a blank string if the event is not specific to a location.
*/
//go:nosplit
func (self class) AsTextLocation() String.Readable { //gd:InputEventKey.as_text_location
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventKey.Bind_as_text_location), gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}
func (self class) AsInputEventKey() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsInputEventKey() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsInputEventKey() Instance { return self.Super().AsInputEventKey() }
func (self class) AsInputEventWithModifiers() InputEventWithModifiers.Advanced {
	return *((*InputEventWithModifiers.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsInputEventWithModifiers() InputEventWithModifiers.Instance {
	return self.Super().AsInputEventWithModifiers()
}
func (self Instance) AsInputEventWithModifiers() InputEventWithModifiers.Instance {
	return *((*InputEventWithModifiers.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsInputEventFromWindow() InputEventFromWindow.Advanced {
	return *((*InputEventFromWindow.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsInputEventFromWindow() InputEventFromWindow.Instance {
	return self.Super().AsInputEventFromWindow()
}
func (self Instance) AsInputEventFromWindow() InputEventFromWindow.Instance {
	return *((*InputEventFromWindow.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsInputEvent() InputEvent.Advanced {
	return *((*InputEvent.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsInputEvent() InputEvent.Instance { return self.Super().AsInputEvent() }
func (self Instance) AsInputEvent() InputEvent.Instance {
	return *((*InputEvent.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(InputEventWithModifiers.Advanced(self.AsInputEventWithModifiers()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(InputEventWithModifiers.Instance(self.AsInputEventWithModifiers()), name)
	}
}
func init() {
	gdclass.Register("InputEventKey", func(ptr gd.Object) any {
		return [1]gdclass.InputEventKey{*(*gdclass.InputEventKey)(unsafe.Pointer(&ptr))}
	})
}
