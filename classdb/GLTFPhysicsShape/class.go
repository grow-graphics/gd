// Code generated by the generate package DO NOT EDIT

// Package GLTFPhysicsShape provides methods for working with GLTFPhysicsShape object instances.
package GLTFPhysicsShape

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/CollisionShape3D"
import "graphics.gd/classdb/ImporterMesh"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/Shape3D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector3"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Represents a physics shape as defined by the [code]OMI_physics_shape[/code] or [code]OMI_collider[/code] glTF extensions. This class is an intermediary between the glTF data and Godot's nodes, and it's abstracted in a way that allows adding support for different glTF physics extensions in the future.
*/
type Instance [1]gdclass.GLTFPhysicsShape

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.GLTFPhysicsShape

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsGLTFPhysicsShape() Instance
}

/*
Creates a new GLTFPhysicsShape instance from the given Godot [CollisionShape3D] node.
*/
func FromNode(shape_node CollisionShape3D.Instance) Instance { //gd:GLTFPhysicsShape.from_node
	self := Instance{}
	return Instance(Advanced(self).FromNode(shape_node))
}

/*
Converts this GLTFPhysicsShape instance into a Godot [CollisionShape3D] node.
*/
func (self Instance) ToNode() CollisionShape3D.Instance { //gd:GLTFPhysicsShape.to_node
	return CollisionShape3D.Instance(Advanced(self).ToNode(false))
}

/*
Converts this GLTFPhysicsShape instance into a Godot [CollisionShape3D] node.
*/
func (self Expanded) ToNode(cache_shapes bool) CollisionShape3D.Instance { //gd:GLTFPhysicsShape.to_node
	return CollisionShape3D.Instance(Advanced(self).ToNode(cache_shapes))
}

/*
Creates a new GLTFPhysicsShape instance from the given Godot [Shape3D] resource.
*/
func FromResource(shape_resource Shape3D.Instance) Instance { //gd:GLTFPhysicsShape.from_resource
	self := Instance{}
	return Instance(Advanced(self).FromResource(shape_resource))
}

/*
Converts this GLTFPhysicsShape instance into a Godot [Shape3D] resource.
*/
func (self Instance) ToResource() Shape3D.Instance { //gd:GLTFPhysicsShape.to_resource
	return Shape3D.Instance(Advanced(self).ToResource(false))
}

/*
Converts this GLTFPhysicsShape instance into a Godot [Shape3D] resource.
*/
func (self Expanded) ToResource(cache_shapes bool) Shape3D.Instance { //gd:GLTFPhysicsShape.to_resource
	return Shape3D.Instance(Advanced(self).ToResource(cache_shapes))
}

/*
Creates a new GLTFPhysicsShape instance by parsing the given [Dictionary].
*/
func FromDictionary(dictionary Structure) Instance { //gd:GLTFPhysicsShape.from_dictionary
	self := Instance{}
	return Instance(Advanced(self).FromDictionary(gd.DictionaryFromMap(dictionary)))
}

/*
Serializes this GLTFPhysicsShape instance into a [Dictionary] in the format defined by [code]OMI_physics_shape[/code].
*/
func (self Instance) ToDictionary() Structure { //gd:GLTFPhysicsShape.to_dictionary
	return Structure(gd.DictionaryAs[Structure](Advanced(self).ToDictionary()))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.GLTFPhysicsShape

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("GLTFPhysicsShape"))
	casted := Instance{*(*gdclass.GLTFPhysicsShape)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) ShapeType() string {
	return string(class(self).GetShapeType().String())
}

func (self Instance) SetShapeType(value string) {
	class(self).SetShapeType(String.New(value))
}

func (self Instance) Size() Vector3.XYZ {
	return Vector3.XYZ(class(self).GetSize())
}

func (self Instance) SetSize(value Vector3.XYZ) {
	class(self).SetSize(Vector3.XYZ(value))
}

func (self Instance) Radius() Float.X {
	return Float.X(Float.X(class(self).GetRadius()))
}

func (self Instance) SetRadius(value Float.X) {
	class(self).SetRadius(float64(value))
}

func (self Instance) Height() Float.X {
	return Float.X(Float.X(class(self).GetHeight()))
}

func (self Instance) SetHeight(value Float.X) {
	class(self).SetHeight(float64(value))
}

func (self Instance) IsTrigger() bool {
	return bool(class(self).GetIsTrigger())
}

func (self Instance) SetIsTrigger(value bool) {
	class(self).SetIsTrigger(value)
}

func (self Instance) MeshIndex() int {
	return int(int(class(self).GetMeshIndex()))
}

func (self Instance) SetMeshIndex(value int) {
	class(self).SetMeshIndex(int64(value))
}

func (self Instance) ImporterMesh() ImporterMesh.Instance {
	return ImporterMesh.Instance(class(self).GetImporterMesh())
}

func (self Instance) SetImporterMesh(value ImporterMesh.Instance) {
	class(self).SetImporterMesh(value)
}

/*
Creates a new GLTFPhysicsShape instance from the given Godot [CollisionShape3D] node.
*/
//go:nosplit
func (self class) FromNode(shape_node [1]gdclass.CollisionShape3D) [1]gdclass.GLTFPhysicsShape { //gd:GLTFPhysicsShape.from_node
	var r_ret = gdunsafe.CallStatic[gd.EnginePointer](gd.Global.Methods.GLTFPhysicsShape.Bind_from_node, gdextension.SizeObject|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ shape_node gdextension.Object }{gdextension.Object(pointers.Get(shape_node[0])[0])}))
	var ret = [1]gdclass.GLTFPhysicsShape{gd.PointerWithOwnershipTransferredToGo[gdclass.GLTFPhysicsShape](r_ret)}
	return ret
}

/*
Converts this GLTFPhysicsShape instance into a Godot [CollisionShape3D] node.
*/
//go:nosplit
func (self class) ToNode(cache_shapes bool) [1]gdclass.CollisionShape3D { //gd:GLTFPhysicsShape.to_node
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_to_node, gdextension.SizeObject|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ cache_shapes bool }{cache_shapes}))
	var ret = [1]gdclass.CollisionShape3D{gd.PointerWithOwnershipTransferredToGo[gdclass.CollisionShape3D](r_ret)}
	return ret
}

/*
Creates a new GLTFPhysicsShape instance from the given Godot [Shape3D] resource.
*/
//go:nosplit
func (self class) FromResource(shape_resource [1]gdclass.Shape3D) [1]gdclass.GLTFPhysicsShape { //gd:GLTFPhysicsShape.from_resource
	var r_ret = gdunsafe.CallStatic[gd.EnginePointer](gd.Global.Methods.GLTFPhysicsShape.Bind_from_resource, gdextension.SizeObject|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ shape_resource gdextension.Object }{gdextension.Object(pointers.Get(shape_resource[0])[0])}))
	var ret = [1]gdclass.GLTFPhysicsShape{gd.PointerWithOwnershipTransferredToGo[gdclass.GLTFPhysicsShape](r_ret)}
	return ret
}

/*
Converts this GLTFPhysicsShape instance into a Godot [Shape3D] resource.
*/
//go:nosplit
func (self class) ToResource(cache_shapes bool) [1]gdclass.Shape3D { //gd:GLTFPhysicsShape.to_resource
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_to_resource, gdextension.SizeObject|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ cache_shapes bool }{cache_shapes}))
	var ret = [1]gdclass.Shape3D{gd.PointerWithOwnershipTransferredToGo[gdclass.Shape3D](r_ret)}
	return ret
}

/*
Creates a new GLTFPhysicsShape instance by parsing the given [Dictionary].
*/
//go:nosplit
func (self class) FromDictionary(dictionary Dictionary.Any) [1]gdclass.GLTFPhysicsShape { //gd:GLTFPhysicsShape.from_dictionary
	var r_ret = gdunsafe.CallStatic[gd.EnginePointer](gd.Global.Methods.GLTFPhysicsShape.Bind_from_dictionary, gdextension.SizeObject|(gdextension.SizeDictionary<<4), unsafe.Pointer(&struct{ dictionary gdextension.Dictionary }{gdextension.Dictionary(pointers.Get(gd.InternalDictionary(dictionary))[0])}))
	var ret = [1]gdclass.GLTFPhysicsShape{gd.PointerWithOwnershipTransferredToGo[gdclass.GLTFPhysicsShape](r_ret)}
	return ret
}

/*
Serializes this GLTFPhysicsShape instance into a [Dictionary] in the format defined by [code]OMI_physics_shape[/code].
*/
//go:nosplit
func (self class) ToDictionary() Dictionary.Any { //gd:GLTFPhysicsShape.to_dictionary
	var r_ret = gdunsafe.Call[[1]gd.EnginePointer](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_to_dictionary, gdextension.SizeDictionary, unsafe.Pointer(&struct{}{}))
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret)))
	return ret
}

//go:nosplit
func (self class) GetShapeType() String.Readable { //gd:GLTFPhysicsShape.get_shape_type
	var r_ret = gdunsafe.Call[[1]gd.EnginePointer](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_get_shape_type, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetShapeType(shape_type String.Readable) { //gd:GLTFPhysicsShape.set_shape_type
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_set_shape_type, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ shape_type gdextension.String }{gdextension.String(pointers.Get(gd.InternalString(shape_type))[0])}))
}

//go:nosplit
func (self class) GetSize() Vector3.XYZ { //gd:GLTFPhysicsShape.get_size
	var r_ret = gdunsafe.Call[Vector3.XYZ](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_get_size, gdextension.SizeVector3, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSize(size Vector3.XYZ) { //gd:GLTFPhysicsShape.set_size
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_set_size, 0|(gdextension.SizeVector3<<4), unsafe.Pointer(&struct{ size Vector3.XYZ }{size}))
}

//go:nosplit
func (self class) GetRadius() float64 { //gd:GLTFPhysicsShape.get_radius
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_get_radius, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRadius(radius float64) { //gd:GLTFPhysicsShape.set_radius
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_set_radius, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ radius float64 }{radius}))
}

//go:nosplit
func (self class) GetHeight() float64 { //gd:GLTFPhysicsShape.get_height
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_get_height, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHeight(height float64) { //gd:GLTFPhysicsShape.set_height
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_set_height, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ height float64 }{height}))
}

//go:nosplit
func (self class) GetIsTrigger() bool { //gd:GLTFPhysicsShape.get_is_trigger
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_get_is_trigger, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetIsTrigger(is_trigger bool) { //gd:GLTFPhysicsShape.set_is_trigger
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_set_is_trigger, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ is_trigger bool }{is_trigger}))
}

//go:nosplit
func (self class) GetMeshIndex() int64 { //gd:GLTFPhysicsShape.get_mesh_index
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_get_mesh_index, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMeshIndex(mesh_index int64) { //gd:GLTFPhysicsShape.set_mesh_index
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_set_mesh_index, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mesh_index int64 }{mesh_index}))
}

//go:nosplit
func (self class) GetImporterMesh() [1]gdclass.ImporterMesh { //gd:GLTFPhysicsShape.get_importer_mesh
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_get_importer_mesh, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.ImporterMesh{gd.PointerWithOwnershipTransferredToGo[gdclass.ImporterMesh](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetImporterMesh(importer_mesh [1]gdclass.ImporterMesh) { //gd:GLTFPhysicsShape.set_importer_mesh
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GLTFPhysicsShape.Bind_set_importer_mesh, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ importer_mesh gdextension.Object }{gdextension.Object(pointers.Get(importer_mesh[0])[0])}))
}
func (self class) AsGLTFPhysicsShape() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsGLTFPhysicsShape() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsGLTFPhysicsShape() Instance { return self.Super().AsGLTFPhysicsShape() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("GLTFPhysicsShape", func(ptr gd.Object) any {
		return [1]gdclass.GLTFPhysicsShape{*(*gdclass.GLTFPhysicsShape)(unsafe.Pointer(&ptr))}
	})
}

type Structure map[interface{}]interface{}
