// Code generated by the generate package DO NOT EDIT

// Package GradientTexture2D provides methods for working with GradientTexture2D object instances.
package GradientTexture2D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Gradient"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/Texture"
import "graphics.gd/classdb/Texture2D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A 2D texture that obtains colors from a [Gradient] to fill the texture data. This texture is able to transform a color transition into different patterns such as a linear or a radial gradient. The gradient is sampled individually for each pixel so it does not necessarily represent an exact copy of the gradient(see [member width] and [member height]). See also [GradientTexture1D], [CurveTexture] and [CurveXYZTexture].
*/
type Instance [1]gdclass.GradientTexture2D

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_gradient  gdextension.MethodForClass `hash:"2756054477"`
	get_gradient  gdextension.MethodForClass `hash:"132272999"`
	set_width     gdextension.MethodForClass `hash:"1286410249"`
	set_height    gdextension.MethodForClass `hash:"1286410249"`
	set_use_hdr   gdextension.MethodForClass `hash:"2586408642"`
	is_using_hdr  gdextension.MethodForClass `hash:"36873697"`
	set_fill      gdextension.MethodForClass `hash:"3623927636"`
	get_fill      gdextension.MethodForClass `hash:"1876227217"`
	set_fill_from gdextension.MethodForClass `hash:"743155724"`
	get_fill_from gdextension.MethodForClass `hash:"3341600327"`
	set_fill_to   gdextension.MethodForClass `hash:"743155724"`
	get_fill_to   gdextension.MethodForClass `hash:"3341600327"`
	set_repeat    gdextension.MethodForClass `hash:"1357597002"`
	get_repeat    gdextension.MethodForClass `hash:"3351758665"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("GradientTexture2D")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsGradientTexture2D() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.GradientTexture2D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.GradientTexture2D](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.GradientTexture2D](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.GradientTexture2D{pointers.Add[gdclass.GradientTexture2D]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.GradientTexture2D{pointers.New[gdclass.GradientTexture2D]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Gradient() Gradient.Instance {
	return Gradient.Instance(class(self).GetGradient())
}

func (self Instance) SetGradient(value Gradient.Instance) {
	class(self).SetGradient(value)
}

func (self Instance) SetWidth(value int) {
	class(self).SetWidth(int64(value))
}

func (self Instance) SetHeight(value int) {
	class(self).SetHeight(int64(value))
}

func (self Instance) UseHdr() bool {
	return bool(class(self).IsUsingHdr())
}

func (self Instance) SetUseHdr(value bool) {
	class(self).SetUseHdr(value)
}

func (self Instance) Fill() Fill {
	return Fill(class(self).GetFill())
}

func (self Instance) SetFill(value Fill) {
	class(self).SetFill(value)
}

func (self Instance) FillFrom() Vector2.XY {
	return Vector2.XY(class(self).GetFillFrom())
}

func (self Instance) SetFillFrom(value Vector2.XY) {
	class(self).SetFillFrom(Vector2.XY(value))
}

func (self Instance) FillTo() Vector2.XY {
	return Vector2.XY(class(self).GetFillTo())
}

func (self Instance) SetFillTo(value Vector2.XY) {
	class(self).SetFillTo(Vector2.XY(value))
}

func (self Instance) Repeat() Repeat {
	return Repeat(class(self).GetRepeat())
}

func (self Instance) SetRepeat(value Repeat) {
	class(self).SetRepeat(value)
}

//go:nosplit
func (self class) SetGradient(gradient [1]gdclass.Gradient) { //gd:GradientTexture2D.set_gradient
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_gradient, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ gradient gdextension.Object }{gdextension.Object(gd.ObjectChecked(gradient[0].AsObject()))}))
}

//go:nosplit
func (self class) GetGradient() [1]gdclass.Gradient { //gd:GradientTexture2D.get_gradient
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_gradient, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Gradient{gd.PointerWithOwnershipTransferredToGo[gdclass.Gradient](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetWidth(width int64) { //gd:GradientTexture2D.set_width
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_width, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ width int64 }{width}))
}

//go:nosplit
func (self class) SetHeight(height int64) { //gd:GradientTexture2D.set_height
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_height, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ height int64 }{height}))
}

//go:nosplit
func (self class) SetUseHdr(enabled bool) { //gd:GradientTexture2D.set_use_hdr
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_use_hdr, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsUsingHdr() bool { //gd:GradientTexture2D.is_using_hdr
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_using_hdr, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFill(fill Fill) { //gd:GradientTexture2D.set_fill
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_fill, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ fill Fill }{fill}))
}

//go:nosplit
func (self class) GetFill() Fill { //gd:GradientTexture2D.get_fill
	var r_ret = gdextension.Call[Fill](gd.ObjectChecked(self.AsObject()), methods.get_fill, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFillFrom(fill_from Vector2.XY) { //gd:GradientTexture2D.set_fill_from
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_fill_from, 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ fill_from Vector2.XY }{fill_from}))
}

//go:nosplit
func (self class) GetFillFrom() Vector2.XY { //gd:GradientTexture2D.get_fill_from
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_fill_from, gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFillTo(fill_to Vector2.XY) { //gd:GradientTexture2D.set_fill_to
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_fill_to, 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ fill_to Vector2.XY }{fill_to}))
}

//go:nosplit
func (self class) GetFillTo() Vector2.XY { //gd:GradientTexture2D.get_fill_to
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_fill_to, gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRepeat(repeat Repeat) { //gd:GradientTexture2D.set_repeat
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_repeat, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ repeat Repeat }{repeat}))
}

//go:nosplit
func (self class) GetRepeat() Repeat { //gd:GradientTexture2D.get_repeat
	var r_ret = gdextension.Call[Repeat](gd.ObjectChecked(self.AsObject()), methods.get_repeat, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsGradientTexture2D() Advanced {
	return Advanced{pointers.AsA[gdclass.GradientTexture2D](self[0])}
}
func (self Instance) AsGradientTexture2D() Instance {
	return Instance{pointers.AsA[gdclass.GradientTexture2D](self[0])}
}
func (self *Extension[T]) AsGradientTexture2D() Instance { return self.Super().AsGradientTexture2D() }
func (self class) AsTexture2D() Texture2D.Advanced {
	return Texture2D.Advanced{pointers.AsA[gdclass.Texture2D](self[0])}
}
func (self *Extension[T]) AsTexture2D() Texture2D.Instance { return self.Super().AsTexture2D() }
func (self Instance) AsTexture2D() Texture2D.Instance {
	return Texture2D.Instance{pointers.AsA[gdclass.Texture2D](self[0])}
}
func (self class) AsTexture() Texture.Advanced {
	return Texture.Advanced{pointers.AsA[gdclass.Texture](self[0])}
}
func (self *Extension[T]) AsTexture() Texture.Instance { return self.Super().AsTexture() }
func (self Instance) AsTexture() Texture.Instance {
	return Texture.Instance{pointers.AsA[gdclass.Texture](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Texture2D.Advanced(self.AsTexture2D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Texture2D.Instance(self.AsTexture2D()), name)
	}
}
func init() {
	gdclass.Register("GradientTexture2D", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.GradientTexture2D](ptr)} })
}

type Fill int //gd:GradientTexture2D.Fill

const (
	/*The colors are linearly interpolated in a straight line.*/
	FillLinear Fill = 0
	/*The colors are linearly interpolated in a circular pattern.*/
	FillRadial Fill = 1
	/*The colors are linearly interpolated in a square pattern.*/
	FillSquare Fill = 2
)

type Repeat int //gd:GradientTexture2D.Repeat

const (
	/*The gradient fill is restricted to the range defined by [member fill_from] to [member fill_to] offsets.*/
	RepeatNone Repeat = 0
	/*The texture is filled starting from [member fill_from] to [member fill_to] offsets, repeating the same pattern in both directions.*/
	RepeatDefault Repeat = 1
	/*The texture is filled starting from [member fill_from] to [member fill_to] offsets, mirroring the pattern in both directions.*/
	RepeatMirror Repeat = 2
)
