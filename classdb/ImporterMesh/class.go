// Code generated by the generate package DO NOT EDIT

// Package ImporterMesh provides methods for working with ImporterMesh object instances.
package ImporterMesh

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/classdb/ArrayMesh"
import "graphics.gd/classdb/Material"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2i"

var _ Object.ID
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ = slices.Delete[[]struct{}, struct{}]

/*
ImporterMesh is a type of [Resource] analogous to [ArrayMesh]. It contains vertex array-based geometry, divided in [i]surfaces[/i]. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials.
Unlike its runtime counterpart, [ImporterMesh] contains mesh data before various import steps, such as lod and shadow mesh generation, have taken place. Modify surface data by calling [method clear], followed by [method add_surface] for each surface.
*/
type Instance [1]gdclass.ImporterMesh
type Expanded [1]gdclass.ImporterMesh

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsImporterMesh() Instance
}

/*
Adds name for a blend shape that will be added with [method add_surface]. Must be called before surface is added.
*/
func (self Instance) AddBlendShape(name string) { //gd:ImporterMesh.add_blend_shape
	Advanced(self).AddBlendShape(String.New(name))
}

/*
Returns the number of blend shapes that the mesh holds.
*/
func (self Instance) GetBlendShapeCount() int { //gd:ImporterMesh.get_blend_shape_count
	return int(int(Advanced(self).GetBlendShapeCount()))
}

/*
Returns the name of the blend shape at this index.
*/
func (self Instance) GetBlendShapeName(blend_shape_idx int) string { //gd:ImporterMesh.get_blend_shape_name
	return string(Advanced(self).GetBlendShapeName(int64(blend_shape_idx)).String())
}

/*
Sets the blend shape mode to one of [enum Mesh.BlendShapeMode].
*/
func (self Instance) SetBlendShapeMode(mode gdclass.MeshBlendShapeMode) { //gd:ImporterMesh.set_blend_shape_mode
	Advanced(self).SetBlendShapeMode(mode)
}

/*
Returns the blend shape mode for this Mesh.
*/
func (self Instance) GetBlendShapeMode() gdclass.MeshBlendShapeMode { //gd:ImporterMesh.get_blend_shape_mode
	return gdclass.MeshBlendShapeMode(Advanced(self).GetBlendShapeMode())
}

/*
Creates a new surface. [method Mesh.get_surface_count] will become the [code]surf_idx[/code] for this new surface.
Surfaces are created to be rendered using a [param primitive], which may be any of the values defined in [enum Mesh.PrimitiveType].
The [param arrays] argument is an array of arrays. Each of the [constant Mesh.ARRAY_MAX] elements contains an array with some of the mesh data for this surface as described by the corresponding member of [enum Mesh.ArrayType] or [code]null[/code] if it is not used by the surface. For example, [code]arrays[0][/code] is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this surface into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array (or be an exact multiple of the vertex array's length, when multiple elements of a sub-array correspond to a single vertex) or be empty, except for [constant Mesh.ARRAY_INDEX] if it is used.
The [param blend_shapes] argument is an array of vertex data for each blend shape. Each element is an array of the same structure as [param arrays], but [constant Mesh.ARRAY_VERTEX], [constant Mesh.ARRAY_NORMAL], and [constant Mesh.ARRAY_TANGENT] are set if and only if they are set in [param arrays] and all other entries are [code]null[/code].
The [param lods] argument is a dictionary with [float] keys and [PackedInt32Array] values. Each entry in the dictionary represents an LOD level of the surface, where the value is the [constant Mesh.ARRAY_INDEX] array to use for the LOD level and the key is roughly proportional to the distance at which the LOD stats being used. I.e., increasing the key of an LOD also increases the distance that the objects has to be from the camera before the LOD is used.
The [param flags] argument is the bitwise OR of, as required: One value of [enum Mesh.ArrayCustomFormat] left shifted by [code]ARRAY_FORMAT_CUSTOMn_SHIFT[/code] for each custom channel in use, [constant Mesh.ARRAY_FLAG_USE_DYNAMIC_UPDATE], [constant Mesh.ARRAY_FLAG_USE_8_BONE_WEIGHTS], or [constant Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY].
[b]Note:[/b] When using indices, it is recommended to only use points, lines, or triangles.
*/
func (self Instance) AddSurface(primitive gdclass.MeshPrimitiveType, arrays []any) { //gd:ImporterMesh.add_surface
	Advanced(self).AddSurface(primitive, gd.EngineArrayFromSlice(arrays), gd.ArrayFromSlice[Array.Contains[Array.Any]]([1][][]any{}[0]), Dictionary.Nil, [1]Material.Instance{}[0], String.New(""), int64(0))
}

/*
Creates a new surface. [method Mesh.get_surface_count] will become the [code]surf_idx[/code] for this new surface.
Surfaces are created to be rendered using a [param primitive], which may be any of the values defined in [enum Mesh.PrimitiveType].
The [param arrays] argument is an array of arrays. Each of the [constant Mesh.ARRAY_MAX] elements contains an array with some of the mesh data for this surface as described by the corresponding member of [enum Mesh.ArrayType] or [code]null[/code] if it is not used by the surface. For example, [code]arrays[0][/code] is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this surface into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array (or be an exact multiple of the vertex array's length, when multiple elements of a sub-array correspond to a single vertex) or be empty, except for [constant Mesh.ARRAY_INDEX] if it is used.
The [param blend_shapes] argument is an array of vertex data for each blend shape. Each element is an array of the same structure as [param arrays], but [constant Mesh.ARRAY_VERTEX], [constant Mesh.ARRAY_NORMAL], and [constant Mesh.ARRAY_TANGENT] are set if and only if they are set in [param arrays] and all other entries are [code]null[/code].
The [param lods] argument is a dictionary with [float] keys and [PackedInt32Array] values. Each entry in the dictionary represents an LOD level of the surface, where the value is the [constant Mesh.ARRAY_INDEX] array to use for the LOD level and the key is roughly proportional to the distance at which the LOD stats being used. I.e., increasing the key of an LOD also increases the distance that the objects has to be from the camera before the LOD is used.
The [param flags] argument is the bitwise OR of, as required: One value of [enum Mesh.ArrayCustomFormat] left shifted by [code]ARRAY_FORMAT_CUSTOMn_SHIFT[/code] for each custom channel in use, [constant Mesh.ARRAY_FLAG_USE_DYNAMIC_UPDATE], [constant Mesh.ARRAY_FLAG_USE_8_BONE_WEIGHTS], or [constant Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY].
[b]Note:[/b] When using indices, it is recommended to only use points, lines, or triangles.
*/
func (self Expanded) AddSurface(primitive gdclass.MeshPrimitiveType, arrays []any, blend_shapes [][]any, lods map[float32][]int32, material Material.Instance, name string, flags int) { //gd:ImporterMesh.add_surface
	Advanced(self).AddSurface(primitive, gd.EngineArrayFromSlice(arrays), gd.ArrayFromSlice[Array.Contains[Array.Any]](blend_shapes), gd.DictionaryFromMap(lods), material, String.New(name), int64(flags))
}

/*
Returns the number of surfaces that the mesh holds.
*/
func (self Instance) GetSurfaceCount() int { //gd:ImporterMesh.get_surface_count
	return int(int(Advanced(self).GetSurfaceCount()))
}

/*
Returns the primitive type of the requested surface (see [method add_surface]).
*/
func (self Instance) GetSurfacePrimitiveType(surface_idx int) gdclass.MeshPrimitiveType { //gd:ImporterMesh.get_surface_primitive_type
	return gdclass.MeshPrimitiveType(Advanced(self).GetSurfacePrimitiveType(int64(surface_idx)))
}

/*
Gets the name assigned to this surface.
*/
func (self Instance) GetSurfaceName(surface_idx int) string { //gd:ImporterMesh.get_surface_name
	return string(Advanced(self).GetSurfaceName(int64(surface_idx)).String())
}

/*
Returns the arrays for the vertices, normals, UVs, etc. that make up the requested surface. See [method add_surface].
*/
func (self Instance) GetSurfaceArrays(surface_idx int) []any { //gd:ImporterMesh.get_surface_arrays
	return []any(gd.ArrayAs[[]any](gd.InternalArray(Advanced(self).GetSurfaceArrays(int64(surface_idx)))))
}

/*
Returns a single set of blend shape arrays for the requested blend shape index for a surface.
*/
func (self Instance) GetSurfaceBlendShapeArrays(surface_idx int, blend_shape_idx int) []any { //gd:ImporterMesh.get_surface_blend_shape_arrays
	return []any(gd.ArrayAs[[]any](gd.InternalArray(Advanced(self).GetSurfaceBlendShapeArrays(int64(surface_idx), int64(blend_shape_idx)))))
}

/*
Returns the number of lods that the mesh holds on a given surface.
*/
func (self Instance) GetSurfaceLodCount(surface_idx int) int { //gd:ImporterMesh.get_surface_lod_count
	return int(int(Advanced(self).GetSurfaceLodCount(int64(surface_idx))))
}

/*
Returns the screen ratio which activates a lod for a surface.
*/
func (self Instance) GetSurfaceLodSize(surface_idx int, lod_idx int) Float.X { //gd:ImporterMesh.get_surface_lod_size
	return Float.X(Float.X(Advanced(self).GetSurfaceLodSize(int64(surface_idx), int64(lod_idx))))
}

/*
Returns the index buffer of a lod for a surface.
*/
func (self Instance) GetSurfaceLodIndices(surface_idx int, lod_idx int) []int32 { //gd:ImporterMesh.get_surface_lod_indices
	return []int32(slices.Collect(Advanced(self).GetSurfaceLodIndices(int64(surface_idx), int64(lod_idx)).Values()))
}

/*
Returns a [Material] in a given surface. Surface is rendered using this material.
*/
func (self Instance) GetSurfaceMaterial(surface_idx int) Material.Instance { //gd:ImporterMesh.get_surface_material
	return Material.Instance(Advanced(self).GetSurfaceMaterial(int64(surface_idx)))
}

/*
Returns the format of the surface that the mesh holds.
*/
func (self Instance) GetSurfaceFormat(surface_idx int) int { //gd:ImporterMesh.get_surface_format
	return int(int(Advanced(self).GetSurfaceFormat(int64(surface_idx))))
}

/*
Sets a name for a given surface.
*/
func (self Instance) SetSurfaceName(surface_idx int, name string) { //gd:ImporterMesh.set_surface_name
	Advanced(self).SetSurfaceName(int64(surface_idx), String.New(name))
}

/*
Sets a [Material] for a given surface. Surface will be rendered using this material.
*/
func (self Instance) SetSurfaceMaterial(surface_idx int, material Material.Instance) { //gd:ImporterMesh.set_surface_material
	Advanced(self).SetSurfaceMaterial(int64(surface_idx), material)
}

/*
Generates all lods for this ImporterMesh.
[param normal_merge_angle] is in degrees and used in the same way as the importer settings in [code]lods[/code].
[param normal_split_angle] is not used and only remains for compatibility with older versions of the API.
The number of generated lods can be accessed using [method get_surface_lod_count], and each LOD is available in [method get_surface_lod_size] and [method get_surface_lod_indices].
[param bone_transform_array] is an [Array] which can be either empty or contain [Transform3D]s which, for each of the mesh's bone IDs, will apply mesh skinning when generating the LOD mesh variations. This is usually used to account for discrepancies in scale between the mesh itself and its skinning data.
*/
func (self Instance) GenerateLods(normal_merge_angle Float.X, normal_split_angle Float.X, bone_transform_array []any) { //gd:ImporterMesh.generate_lods
	Advanced(self).GenerateLods(float64(normal_merge_angle), float64(normal_split_angle), gd.EngineArrayFromSlice(bone_transform_array))
}

/*
Returns the mesh data represented by this [ImporterMesh] as a usable [ArrayMesh].
This method caches the returned mesh, and subsequent calls will return the cached data until [method clear] is called.
If not yet cached and [param base_mesh] is provided, [param base_mesh] will be used and mutated.
*/
func (self Instance) GetMesh() ArrayMesh.Instance { //gd:ImporterMesh.get_mesh
	return ArrayMesh.Instance(Advanced(self).GetMesh([1]ArrayMesh.Instance{}[0]))
}

/*
Returns the mesh data represented by this [ImporterMesh] as a usable [ArrayMesh].
This method caches the returned mesh, and subsequent calls will return the cached data until [method clear] is called.
If not yet cached and [param base_mesh] is provided, [param base_mesh] will be used and mutated.
*/
func (self Expanded) GetMesh(base_mesh ArrayMesh.Instance) ArrayMesh.Instance { //gd:ImporterMesh.get_mesh
	return ArrayMesh.Instance(Advanced(self).GetMesh(base_mesh))
}

/*
Removes all surfaces and blend shapes from this [ImporterMesh].
*/
func (self Instance) Clear() { //gd:ImporterMesh.clear
	Advanced(self).Clear()
}

/*
Sets the size hint of this mesh for lightmap-unwrapping in UV-space.
*/
func (self Instance) SetLightmapSizeHint(size Vector2i.XY) { //gd:ImporterMesh.set_lightmap_size_hint
	Advanced(self).SetLightmapSizeHint(Vector2i.XY(size))
}

/*
Returns the size hint of this mesh for lightmap-unwrapping in UV-space.
*/
func (self Instance) GetLightmapSizeHint() Vector2i.XY { //gd:ImporterMesh.get_lightmap_size_hint
	return Vector2i.XY(Advanced(self).GetLightmapSizeHint())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.ImporterMesh

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("ImporterMesh"))
	casted := Instance{*(*gdclass.ImporterMesh)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

/*
Adds name for a blend shape that will be added with [method add_surface]. Must be called before surface is added.
*/
//go:nosplit
func (self class) AddBlendShape(name String.Readable) { //gd:ImporterMesh.add_blend_shape
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(name)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_add_blend_shape, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the number of blend shapes that the mesh holds.
*/
//go:nosplit
func (self class) GetBlendShapeCount() int64 { //gd:ImporterMesh.get_blend_shape_count
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_blend_shape_count, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the name of the blend shape at this index.
*/
//go:nosplit
func (self class) GetBlendShapeName(blend_shape_idx int64) String.Readable { //gd:ImporterMesh.get_blend_shape_name
	var frame = callframe.New()
	callframe.Arg(frame, blend_shape_idx)
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_blend_shape_name, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Sets the blend shape mode to one of [enum Mesh.BlendShapeMode].
*/
//go:nosplit
func (self class) SetBlendShapeMode(mode gdclass.MeshBlendShapeMode) { //gd:ImporterMesh.set_blend_shape_mode
	var frame = callframe.New()
	callframe.Arg(frame, mode)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_set_blend_shape_mode, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the blend shape mode for this Mesh.
*/
//go:nosplit
func (self class) GetBlendShapeMode() gdclass.MeshBlendShapeMode { //gd:ImporterMesh.get_blend_shape_mode
	var frame = callframe.New()
	var r_ret = callframe.Ret[gdclass.MeshBlendShapeMode](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_blend_shape_mode, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Creates a new surface. [method Mesh.get_surface_count] will become the [code]surf_idx[/code] for this new surface.
Surfaces are created to be rendered using a [param primitive], which may be any of the values defined in [enum Mesh.PrimitiveType].
The [param arrays] argument is an array of arrays. Each of the [constant Mesh.ARRAY_MAX] elements contains an array with some of the mesh data for this surface as described by the corresponding member of [enum Mesh.ArrayType] or [code]null[/code] if it is not used by the surface. For example, [code]arrays[0][/code] is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this surface into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array (or be an exact multiple of the vertex array's length, when multiple elements of a sub-array correspond to a single vertex) or be empty, except for [constant Mesh.ARRAY_INDEX] if it is used.
The [param blend_shapes] argument is an array of vertex data for each blend shape. Each element is an array of the same structure as [param arrays], but [constant Mesh.ARRAY_VERTEX], [constant Mesh.ARRAY_NORMAL], and [constant Mesh.ARRAY_TANGENT] are set if and only if they are set in [param arrays] and all other entries are [code]null[/code].
The [param lods] argument is a dictionary with [float] keys and [PackedInt32Array] values. Each entry in the dictionary represents an LOD level of the surface, where the value is the [constant Mesh.ARRAY_INDEX] array to use for the LOD level and the key is roughly proportional to the distance at which the LOD stats being used. I.e., increasing the key of an LOD also increases the distance that the objects has to be from the camera before the LOD is used.
The [param flags] argument is the bitwise OR of, as required: One value of [enum Mesh.ArrayCustomFormat] left shifted by [code]ARRAY_FORMAT_CUSTOMn_SHIFT[/code] for each custom channel in use, [constant Mesh.ARRAY_FLAG_USE_DYNAMIC_UPDATE], [constant Mesh.ARRAY_FLAG_USE_8_BONE_WEIGHTS], or [constant Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY].
[b]Note:[/b] When using indices, it is recommended to only use points, lines, or triangles.
*/
//go:nosplit
func (self class) AddSurface(primitive gdclass.MeshPrimitiveType, arrays Array.Any, blend_shapes Array.Contains[Array.Any], lods Dictionary.Any, material [1]gdclass.Material, name String.Readable, flags int64) { //gd:ImporterMesh.add_surface
	var frame = callframe.New()
	callframe.Arg(frame, primitive)
	callframe.Arg(frame, pointers.Get(gd.InternalArray(arrays)))
	callframe.Arg(frame, pointers.Get(gd.InternalArray(blend_shapes)))
	callframe.Arg(frame, pointers.Get(gd.InternalDictionary(lods)))
	callframe.Arg(frame, pointers.Get(material[0])[0])
	callframe.Arg(frame, pointers.Get(gd.InternalString(name)))
	callframe.Arg(frame, flags)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_add_surface, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the number of surfaces that the mesh holds.
*/
//go:nosplit
func (self class) GetSurfaceCount() int64 { //gd:ImporterMesh.get_surface_count
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_surface_count, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the primitive type of the requested surface (see [method add_surface]).
*/
//go:nosplit
func (self class) GetSurfacePrimitiveType(surface_idx int64) gdclass.MeshPrimitiveType { //gd:ImporterMesh.get_surface_primitive_type
	var frame = callframe.New()
	callframe.Arg(frame, surface_idx)
	var r_ret = callframe.Ret[gdclass.MeshPrimitiveType](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_surface_primitive_type, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Gets the name assigned to this surface.
*/
//go:nosplit
func (self class) GetSurfaceName(surface_idx int64) String.Readable { //gd:ImporterMesh.get_surface_name
	var frame = callframe.New()
	callframe.Arg(frame, surface_idx)
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_surface_name, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Returns the arrays for the vertices, normals, UVs, etc. that make up the requested surface. See [method add_surface].
*/
//go:nosplit
func (self class) GetSurfaceArrays(surface_idx int64) Array.Any { //gd:ImporterMesh.get_surface_arrays
	var frame = callframe.New()
	callframe.Arg(frame, surface_idx)
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_surface_arrays, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Array.Through(gd.ArrayProxy[variant.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Returns a single set of blend shape arrays for the requested blend shape index for a surface.
*/
//go:nosplit
func (self class) GetSurfaceBlendShapeArrays(surface_idx int64, blend_shape_idx int64) Array.Any { //gd:ImporterMesh.get_surface_blend_shape_arrays
	var frame = callframe.New()
	callframe.Arg(frame, surface_idx)
	callframe.Arg(frame, blend_shape_idx)
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_surface_blend_shape_arrays, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Array.Through(gd.ArrayProxy[variant.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Returns the number of lods that the mesh holds on a given surface.
*/
//go:nosplit
func (self class) GetSurfaceLodCount(surface_idx int64) int64 { //gd:ImporterMesh.get_surface_lod_count
	var frame = callframe.New()
	callframe.Arg(frame, surface_idx)
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_surface_lod_count, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the screen ratio which activates a lod for a surface.
*/
//go:nosplit
func (self class) GetSurfaceLodSize(surface_idx int64, lod_idx int64) float64 { //gd:ImporterMesh.get_surface_lod_size
	var frame = callframe.New()
	callframe.Arg(frame, surface_idx)
	callframe.Arg(frame, lod_idx)
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_surface_lod_size, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the index buffer of a lod for a surface.
*/
//go:nosplit
func (self class) GetSurfaceLodIndices(surface_idx int64, lod_idx int64) Packed.Array[int32] { //gd:ImporterMesh.get_surface_lod_indices
	var frame = callframe.New()
	callframe.Arg(frame, surface_idx)
	callframe.Arg(frame, lod_idx)
	var r_ret = callframe.Ret[gd.PackedPointers](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_surface_lod_indices, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Packed.Array[int32](Array.Through(gd.PackedProxy[gd.PackedInt32Array, int32]{}, pointers.Pack(pointers.New[gd.PackedStringArray](r_ret.Get()))))
	frame.Free()
	return ret
}

/*
Returns a [Material] in a given surface. Surface is rendered using this material.
*/
//go:nosplit
func (self class) GetSurfaceMaterial(surface_idx int64) [1]gdclass.Material { //gd:ImporterMesh.get_surface_material
	var frame = callframe.New()
	callframe.Arg(frame, surface_idx)
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_surface_material, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.Material{gd.PointerWithOwnershipTransferredToGo[gdclass.Material](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Returns the format of the surface that the mesh holds.
*/
//go:nosplit
func (self class) GetSurfaceFormat(surface_idx int64) int64 { //gd:ImporterMesh.get_surface_format
	var frame = callframe.New()
	callframe.Arg(frame, surface_idx)
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_surface_format, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Sets a name for a given surface.
*/
//go:nosplit
func (self class) SetSurfaceName(surface_idx int64, name String.Readable) { //gd:ImporterMesh.set_surface_name
	var frame = callframe.New()
	callframe.Arg(frame, surface_idx)
	callframe.Arg(frame, pointers.Get(gd.InternalString(name)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_set_surface_name, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Sets a [Material] for a given surface. Surface will be rendered using this material.
*/
//go:nosplit
func (self class) SetSurfaceMaterial(surface_idx int64, material [1]gdclass.Material) { //gd:ImporterMesh.set_surface_material
	var frame = callframe.New()
	callframe.Arg(frame, surface_idx)
	callframe.Arg(frame, pointers.Get(material[0])[0])
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_set_surface_material, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Generates all lods for this ImporterMesh.
[param normal_merge_angle] is in degrees and used in the same way as the importer settings in [code]lods[/code].
[param normal_split_angle] is not used and only remains for compatibility with older versions of the API.
The number of generated lods can be accessed using [method get_surface_lod_count], and each LOD is available in [method get_surface_lod_size] and [method get_surface_lod_indices].
[param bone_transform_array] is an [Array] which can be either empty or contain [Transform3D]s which, for each of the mesh's bone IDs, will apply mesh skinning when generating the LOD mesh variations. This is usually used to account for discrepancies in scale between the mesh itself and its skinning data.
*/
//go:nosplit
func (self class) GenerateLods(normal_merge_angle float64, normal_split_angle float64, bone_transform_array Array.Any) { //gd:ImporterMesh.generate_lods
	var frame = callframe.New()
	callframe.Arg(frame, normal_merge_angle)
	callframe.Arg(frame, normal_split_angle)
	callframe.Arg(frame, pointers.Get(gd.InternalArray(bone_transform_array)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_generate_lods, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the mesh data represented by this [ImporterMesh] as a usable [ArrayMesh].
This method caches the returned mesh, and subsequent calls will return the cached data until [method clear] is called.
If not yet cached and [param base_mesh] is provided, [param base_mesh] will be used and mutated.
*/
//go:nosplit
func (self class) GetMesh(base_mesh [1]gdclass.ArrayMesh) [1]gdclass.ArrayMesh { //gd:ImporterMesh.get_mesh
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(base_mesh[0])[0])
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_mesh, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.ArrayMesh{gd.PointerWithOwnershipTransferredToGo[gdclass.ArrayMesh](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Removes all surfaces and blend shapes from this [ImporterMesh].
*/
//go:nosplit
func (self class) Clear() { //gd:ImporterMesh.clear
	var frame = callframe.New()
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_clear, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Sets the size hint of this mesh for lightmap-unwrapping in UV-space.
*/
//go:nosplit
func (self class) SetLightmapSizeHint(size Vector2i.XY) { //gd:ImporterMesh.set_lightmap_size_hint
	var frame = callframe.New()
	callframe.Arg(frame, size)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_set_lightmap_size_hint, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the size hint of this mesh for lightmap-unwrapping in UV-space.
*/
//go:nosplit
func (self class) GetLightmapSizeHint() Vector2i.XY { //gd:ImporterMesh.get_lightmap_size_hint
	var frame = callframe.New()
	var r_ret = callframe.Ret[Vector2i.XY](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ImporterMesh.Bind_get_lightmap_size_hint, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}
func (self class) AsImporterMesh() Advanced    { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsImporterMesh() Instance { return *((*Instance)(unsafe.Pointer(&self))) }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("ImporterMesh", func(ptr gd.Object) any {
		return [1]gdclass.ImporterMesh{*(*gdclass.ImporterMesh)(unsafe.Pointer(&ptr))}
	})
}
