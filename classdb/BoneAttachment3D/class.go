// Code generated by the generate package DO NOT EDIT

// Package BoneAttachment3D provides methods for working with BoneAttachment3D object instances.
package BoneAttachment3D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/classdb/Skeleton3D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This node selects a bone in a [Skeleton3D] and attaches to it. This means that the [BoneAttachment3D] node will either dynamically copy or override the 3D transform of the selected bone.
*/
type Instance [1]gdclass.BoneAttachment3D

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_skeleton              gdextension.MethodForClass `hash:"1814733083"`
	set_bone_name             gdextension.MethodForClass `hash:"83702148"`
	get_bone_name             gdextension.MethodForClass `hash:"201670096"`
	set_bone_idx              gdextension.MethodForClass `hash:"1286410249"`
	get_bone_idx              gdextension.MethodForClass `hash:"3905245786"`
	on_skeleton_update        gdextension.MethodForClass `hash:"3218959716"`
	set_override_pose         gdextension.MethodForClass `hash:"2586408642"`
	get_override_pose         gdextension.MethodForClass `hash:"36873697"`
	set_use_external_skeleton gdextension.MethodForClass `hash:"2586408642"`
	get_use_external_skeleton gdextension.MethodForClass `hash:"36873697"`
	set_external_skeleton     gdextension.MethodForClass `hash:"1348162250"`
	get_external_skeleton     gdextension.MethodForClass `hash:"4075236667"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("BoneAttachment3D")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsBoneAttachment3D() Instance
}

/*
Get parent or external [Skeleton3D] node if found.
*/
func (self Instance) GetSkeleton() Skeleton3D.Instance { //gd:BoneAttachment3D.get_skeleton
	return Skeleton3D.Instance(Advanced(self).GetSkeleton())
}

/*
A function that is called automatically when the [Skeleton3D] is updated. This function is where the [BoneAttachment3D] node updates its position so it is correctly bound when it is [i]not[/i] set to override the bone pose.
*/
func (self Instance) OnSkeletonUpdate() { //gd:BoneAttachment3D.on_skeleton_update
	Advanced(self).OnSkeletonUpdate()
}

/*
Sets whether the BoneAttachment3D node will use an external [Skeleton3D] node rather than attempting to use its parent node as the [Skeleton3D]. When set to [code]true[/code], the BoneAttachment3D node will use the external [Skeleton3D] node set in [method set_external_skeleton].
*/
func (self Instance) SetUseExternalSkeleton(use_external_skeleton bool) { //gd:BoneAttachment3D.set_use_external_skeleton
	Advanced(self).SetUseExternalSkeleton(use_external_skeleton)
}

/*
Returns whether the BoneAttachment3D node is using an external [Skeleton3D] rather than attempting to use its parent node as the [Skeleton3D].
*/
func (self Instance) GetUseExternalSkeleton() bool { //gd:BoneAttachment3D.get_use_external_skeleton
	return bool(Advanced(self).GetUseExternalSkeleton())
}

/*
Sets the [NodePath] to the external skeleton that the BoneAttachment3D node should use. See [method set_use_external_skeleton] to enable the external [Skeleton3D] node.
*/
func (self Instance) SetExternalSkeleton(external_skeleton string) { //gd:BoneAttachment3D.set_external_skeleton
	Advanced(self).SetExternalSkeleton(Path.ToNode(String.New(external_skeleton)))
}

/*
Returns the [NodePath] to the external [Skeleton3D] node, if one has been set.
*/
func (self Instance) GetExternalSkeleton() string { //gd:BoneAttachment3D.get_external_skeleton
	return string(Advanced(self).GetExternalSkeleton().String())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.BoneAttachment3D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.BoneAttachment3D)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.BoneAttachment3D)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.BoneAttachment3D)(unsafe.Pointer(&object))}
	object[0].Notification(0, false)
	return casted
}

func (self Instance) BoneName() string {
	return string(class(self).GetBoneName().String())
}

func (self Instance) SetBoneName(value string) {
	class(self).SetBoneName(String.New(value))
}

func (self Instance) BoneIdx() int {
	return int(int(class(self).GetBoneIdx()))
}

func (self Instance) SetBoneIdx(value int) {
	class(self).SetBoneIdx(int64(value))
}

func (self Instance) OverridePose() bool {
	return bool(class(self).GetOverridePose())
}

func (self Instance) SetOverridePose(value bool) {
	class(self).SetOverridePose(value)
}

/*
Get parent or external [Skeleton3D] node if found.
*/
//go:nosplit
func (self class) GetSkeleton() [1]gdclass.Skeleton3D { //gd:BoneAttachment3D.get_skeleton
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_skeleton, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Skeleton3D{gd.PointerMustAssertInstanceID[gdclass.Skeleton3D](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetBoneName(bone_name String.Readable) { //gd:BoneAttachment3D.set_bone_name
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bone_name, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ bone_name gdextension.String }{pointers.Get(gd.InternalString(bone_name))}))
}

//go:nosplit
func (self class) GetBoneName() String.Readable { //gd:BoneAttachment3D.get_bone_name
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_bone_name, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetBoneIdx(bone_idx int64) { //gd:BoneAttachment3D.set_bone_idx
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bone_idx, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ bone_idx int64 }{bone_idx}))
}

//go:nosplit
func (self class) GetBoneIdx() int64 { //gd:BoneAttachment3D.get_bone_idx
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_bone_idx, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
A function that is called automatically when the [Skeleton3D] is updated. This function is where the [BoneAttachment3D] node updates its position so it is correctly bound when it is [i]not[/i] set to override the bone pose.
*/
//go:nosplit
func (self class) OnSkeletonUpdate() { //gd:BoneAttachment3D.on_skeleton_update
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.on_skeleton_update, 0, unsafe.Pointer(&struct{}{}))
}

//go:nosplit
func (self class) SetOverridePose(override_pose bool) { //gd:BoneAttachment3D.set_override_pose
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_override_pose, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ override_pose bool }{override_pose}))
}

//go:nosplit
func (self class) GetOverridePose() bool { //gd:BoneAttachment3D.get_override_pose
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_override_pose, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets whether the BoneAttachment3D node will use an external [Skeleton3D] node rather than attempting to use its parent node as the [Skeleton3D]. When set to [code]true[/code], the BoneAttachment3D node will use the external [Skeleton3D] node set in [method set_external_skeleton].
*/
//go:nosplit
func (self class) SetUseExternalSkeleton(use_external_skeleton bool) { //gd:BoneAttachment3D.set_use_external_skeleton
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_use_external_skeleton, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ use_external_skeleton bool }{use_external_skeleton}))
}

/*
Returns whether the BoneAttachment3D node is using an external [Skeleton3D] rather than attempting to use its parent node as the [Skeleton3D].
*/
//go:nosplit
func (self class) GetUseExternalSkeleton() bool { //gd:BoneAttachment3D.get_use_external_skeleton
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_use_external_skeleton, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets the [NodePath] to the external skeleton that the BoneAttachment3D node should use. See [method set_use_external_skeleton] to enable the external [Skeleton3D] node.
*/
//go:nosplit
func (self class) SetExternalSkeleton(external_skeleton Path.ToNode) { //gd:BoneAttachment3D.set_external_skeleton
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_external_skeleton, 0|(gdextension.SizeNodePath<<4), unsafe.Pointer(&struct{ external_skeleton gdextension.NodePath }{pointers.Get(gd.InternalNodePath(external_skeleton))}))
}

/*
Returns the [NodePath] to the external [Skeleton3D] node, if one has been set.
*/
//go:nosplit
func (self class) GetExternalSkeleton() Path.ToNode { //gd:BoneAttachment3D.get_external_skeleton
	var r_ret = gdextension.Call[gdextension.NodePath](gd.ObjectChecked(self.AsObject()), methods.get_external_skeleton, gdextension.SizeNodePath, unsafe.Pointer(&struct{}{}))
	var ret = Path.ToNode(String.Via(gd.NodePathProxy{}, pointers.Pack(pointers.New[gd.NodePath](r_ret))))
	return ret
}
func (self class) AsBoneAttachment3D() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsBoneAttachment3D() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsBoneAttachment3D() Instance { return self.Super().AsBoneAttachment3D() }
func (self class) AsNode3D() Node3D.Advanced            { return *((*Node3D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode3D() Node3D.Instance    { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance         { return *((*Node3D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsNode() Node.Advanced                { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance        { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance             { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node3D.Advanced(self.AsNode3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node3D.Instance(self.AsNode3D()), name)
	}
}
func init() {
	gdclass.Register("BoneAttachment3D", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
