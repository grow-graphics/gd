// Code generated by the generate package DO NOT EDIT

// Package GPUParticlesAttractor3D provides methods for working with GPUParticlesAttractor3D object instances.
package GPUParticlesAttractor3D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/classdb/VisualInstance3D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Particle attractors can be used to attract particles towards the attractor's origin, or to push them away from the attractor's origin.
Particle attractors work in real-time and can be moved, rotated and scaled during gameplay. Unlike collision shapes, non-uniform scaling of attractors is also supported.
Attractors can be temporarily disabled by hiding them, or by setting their [member strength] to [code]0.0[/code].
[b]Note:[/b] Particle attractors only affect [GPUParticles3D], not [CPUParticles3D].
*/
type Instance [1]gdclass.GPUParticlesAttractor3D

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsGPUParticlesAttractor3D() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.GPUParticlesAttractor3D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("GPUParticlesAttractor3D"))
	casted := Instance{*(*gdclass.GPUParticlesAttractor3D)(unsafe.Pointer(&object))}
	return casted
}

func (self Instance) Strength() Float.X {
	return Float.X(Float.X(class(self).GetStrength()))
}

func (self Instance) SetStrength(value Float.X) {
	class(self).SetStrength(float64(value))
}

func (self Instance) Attenuation() Float.X {
	return Float.X(Float.X(class(self).GetAttenuation()))
}

func (self Instance) SetAttenuation(value Float.X) {
	class(self).SetAttenuation(float64(value))
}

func (self Instance) Directionality() Float.X {
	return Float.X(Float.X(class(self).GetDirectionality()))
}

func (self Instance) SetDirectionality(value Float.X) {
	class(self).SetDirectionality(float64(value))
}

func (self Instance) CullMask() int {
	return int(int(class(self).GetCullMask()))
}

func (self Instance) SetCullMask(value int) {
	class(self).SetCullMask(int64(value))
}

//go:nosplit
func (self class) SetCullMask(mask int64) { //gd:GPUParticlesAttractor3D.set_cull_mask
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GPUParticlesAttractor3D.Bind_set_cull_mask, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mask int64 }{mask}))
}

//go:nosplit
func (self class) GetCullMask() int64 { //gd:GPUParticlesAttractor3D.get_cull_mask
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.GPUParticlesAttractor3D.Bind_get_cull_mask, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetStrength(strength float64) { //gd:GPUParticlesAttractor3D.set_strength
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GPUParticlesAttractor3D.Bind_set_strength, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ strength float64 }{strength}))
}

//go:nosplit
func (self class) GetStrength() float64 { //gd:GPUParticlesAttractor3D.get_strength
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.GPUParticlesAttractor3D.Bind_get_strength, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAttenuation(attenuation float64) { //gd:GPUParticlesAttractor3D.set_attenuation
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GPUParticlesAttractor3D.Bind_set_attenuation, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ attenuation float64 }{attenuation}))
}

//go:nosplit
func (self class) GetAttenuation() float64 { //gd:GPUParticlesAttractor3D.get_attenuation
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.GPUParticlesAttractor3D.Bind_get_attenuation, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDirectionality(amount float64) { //gd:GPUParticlesAttractor3D.set_directionality
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GPUParticlesAttractor3D.Bind_set_directionality, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetDirectionality() float64 { //gd:GPUParticlesAttractor3D.get_directionality
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.GPUParticlesAttractor3D.Bind_get_directionality, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsGPUParticlesAttractor3D() Advanced { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsGPUParticlesAttractor3D() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsGPUParticlesAttractor3D() Instance {
	return self.Super().AsGPUParticlesAttractor3D()
}
func (self class) AsVisualInstance3D() VisualInstance3D.Advanced {
	return *((*VisualInstance3D.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisualInstance3D() VisualInstance3D.Instance {
	return self.Super().AsVisualInstance3D()
}
func (self Instance) AsVisualInstance3D() VisualInstance3D.Instance {
	return *((*VisualInstance3D.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode3D() Node3D.Advanced         { return *((*Node3D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode3D() Node3D.Instance { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance      { return *((*Node3D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsNode() Node.Advanced             { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance     { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance          { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualInstance3D.Advanced(self.AsVisualInstance3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualInstance3D.Instance(self.AsVisualInstance3D()), name)
	}
}
func init() {
	gdclass.Register("GPUParticlesAttractor3D", func(ptr gd.Object) any {
		return [1]gdclass.GPUParticlesAttractor3D{*(*gdclass.GPUParticlesAttractor3D)(unsafe.Pointer(&ptr))}
	})
}
