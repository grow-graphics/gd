// Code generated by the generate package DO NOT EDIT

// Package GPUParticles2D provides methods for working with GPUParticles2D object instances.
package GPUParticles2D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Material"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node2D"
import "graphics.gd/classdb/Texture2D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/Rect2"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Transform2D"
import "graphics.gd/variant/Vector2"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
2D particle node used to create a variety of particle systems and effects. [GPUParticles2D] features an emitter that generates some number of particles at a given rate.
Use the [member process_material] property to add a [ParticleProcessMaterial] to configure particle appearance and behavior. Alternatively, you can add a [ShaderMaterial] which will be applied to all particles.
2D particles can optionally collide with [LightOccluder2D], but they don't collide with [PhysicsBody2D] nodes.
*/
type Instance [1]gdclass.GPUParticles2D

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_emitting                   gdextension.MethodForClass `hash:"2586408642"`
	set_amount                     gdextension.MethodForClass `hash:"1286410249"`
	set_lifetime                   gdextension.MethodForClass `hash:"373806689"`
	set_one_shot                   gdextension.MethodForClass `hash:"2586408642"`
	set_pre_process_time           gdextension.MethodForClass `hash:"373806689"`
	set_explosiveness_ratio        gdextension.MethodForClass `hash:"373806689"`
	set_randomness_ratio           gdextension.MethodForClass `hash:"373806689"`
	set_visibility_rect            gdextension.MethodForClass `hash:"2046264180"`
	set_use_local_coordinates      gdextension.MethodForClass `hash:"2586408642"`
	set_fixed_fps                  gdextension.MethodForClass `hash:"1286410249"`
	set_fractional_delta           gdextension.MethodForClass `hash:"2586408642"`
	set_interpolate                gdextension.MethodForClass `hash:"2586408642"`
	set_process_material           gdextension.MethodForClass `hash:"2757459619"`
	set_speed_scale                gdextension.MethodForClass `hash:"373806689"`
	set_collision_base_size        gdextension.MethodForClass `hash:"373806689"`
	set_interp_to_end              gdextension.MethodForClass `hash:"373806689"`
	request_particles_process      gdextension.MethodForClass `hash:"373806689"`
	is_emitting                    gdextension.MethodForClass `hash:"36873697"`
	get_amount                     gdextension.MethodForClass `hash:"3905245786"`
	get_lifetime                   gdextension.MethodForClass `hash:"1740695150"`
	get_one_shot                   gdextension.MethodForClass `hash:"36873697"`
	get_pre_process_time           gdextension.MethodForClass `hash:"1740695150"`
	get_explosiveness_ratio        gdextension.MethodForClass `hash:"1740695150"`
	get_randomness_ratio           gdextension.MethodForClass `hash:"1740695150"`
	get_visibility_rect            gdextension.MethodForClass `hash:"1639390495"`
	get_use_local_coordinates      gdextension.MethodForClass `hash:"36873697"`
	get_fixed_fps                  gdextension.MethodForClass `hash:"3905245786"`
	get_fractional_delta           gdextension.MethodForClass `hash:"36873697"`
	get_interpolate                gdextension.MethodForClass `hash:"36873697"`
	get_process_material           gdextension.MethodForClass `hash:"5934680"`
	get_speed_scale                gdextension.MethodForClass `hash:"1740695150"`
	get_collision_base_size        gdextension.MethodForClass `hash:"1740695150"`
	get_interp_to_end              gdextension.MethodForClass `hash:"1740695150"`
	set_draw_order                 gdextension.MethodForClass `hash:"1939677959"`
	get_draw_order                 gdextension.MethodForClass `hash:"941479095"`
	set_texture                    gdextension.MethodForClass `hash:"4051416890"`
	get_texture                    gdextension.MethodForClass `hash:"3635182373"`
	capture_rect                   gdextension.MethodForClass `hash:"1639390495"`
	restart                        gdextension.MethodForClass `hash:"107499316"`
	set_sub_emitter                gdextension.MethodForClass `hash:"1348162250"`
	get_sub_emitter                gdextension.MethodForClass `hash:"4075236667"`
	emit_particle                  gdextension.MethodForClass `hash:"2179202058"`
	set_trail_enabled              gdextension.MethodForClass `hash:"2586408642"`
	set_trail_lifetime             gdextension.MethodForClass `hash:"373806689"`
	is_trail_enabled               gdextension.MethodForClass `hash:"36873697"`
	get_trail_lifetime             gdextension.MethodForClass `hash:"1740695150"`
	set_trail_sections             gdextension.MethodForClass `hash:"1286410249"`
	get_trail_sections             gdextension.MethodForClass `hash:"3905245786"`
	set_trail_section_subdivisions gdextension.MethodForClass `hash:"1286410249"`
	get_trail_section_subdivisions gdextension.MethodForClass `hash:"3905245786"`
	convert_from_particles         gdextension.MethodForClass `hash:"1078189570"`
	set_amount_ratio               gdextension.MethodForClass `hash:"373806689"`
	get_amount_ratio               gdextension.MethodForClass `hash:"1740695150"`
	set_use_fixed_seed             gdextension.MethodForClass `hash:"2586408642"`
	get_use_fixed_seed             gdextension.MethodForClass `hash:"36873697"`
	set_seed                       gdextension.MethodForClass `hash:"1286410249"`
	get_seed                       gdextension.MethodForClass `hash:"3905245786"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("GPUParticles2D")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.GPUParticles2D

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsGPUParticles2D() Instance
}

/*
Requests the particles to process for extra process time during a single frame.
Useful for particle playback, if used in combination with [member use_fixed_seed] or by calling [method restart] with parameter [code]keep_seed[/code] set to [code]true[/code].
*/
func (self Instance) RequestParticlesProcess(process_time Float.X) { //gd:GPUParticles2D.request_particles_process
	Advanced(self).RequestParticlesProcess(float64(process_time))
}

/*
Returns a rectangle containing the positions of all existing particles.
[b]Note:[/b] When using threaded rendering this method synchronizes the rendering thread. Calling it often may have a negative impact on performance.
*/
func (self Instance) CaptureRect() Rect2.PositionSize { //gd:GPUParticles2D.capture_rect
	return Rect2.PositionSize(Advanced(self).CaptureRect())
}

/*
Restarts the particle emission cycle, clearing existing particles. To avoid particles vanishing from the viewport, wait for the [signal finished] signal before calling.
[b]Note:[/b] The [signal finished] signal is only emitted by [member one_shot] emitters.
If [param keep_seed] is [code]true[/code], the current random seed will be preserved. Useful for seeking and playback.
*/
func (self Instance) Restart() { //gd:GPUParticles2D.restart
	Advanced(self).Restart(false)
}

/*
Restarts the particle emission cycle, clearing existing particles. To avoid particles vanishing from the viewport, wait for the [signal finished] signal before calling.
[b]Note:[/b] The [signal finished] signal is only emitted by [member one_shot] emitters.
If [param keep_seed] is [code]true[/code], the current random seed will be preserved. Useful for seeking and playback.
*/
func (self Expanded) Restart(keep_seed bool) { //gd:GPUParticles2D.restart
	Advanced(self).Restart(keep_seed)
}

/*
Emits a single particle. Whether [param xform], [param velocity], [param color] and [param custom] are applied depends on the value of [param flags]. See [enum EmitFlags].
The default ParticleProcessMaterial will overwrite [param color] and use the contents of [param custom] as [code](rotation, age, animation, lifetime)[/code].
[b]Note:[/b] [method emit_particle] is only supported on the Forward+ and Mobile rendering methods, not Compatibility.
*/
func (self Instance) EmitParticle(xform Transform2D.OriginXY, velocity Vector2.XY, color Color.RGBA, custom Color.RGBA, flags int) { //gd:GPUParticles2D.emit_particle
	Advanced(self).EmitParticle(Transform2D.OriginXY(xform), Vector2.XY(velocity), Color.RGBA(color), Color.RGBA(custom), int64(flags))
}

/*
Sets this node's properties to match a given [CPUParticles2D] node.
*/
func (self Instance) ConvertFromParticles(particles Node.Instance) { //gd:GPUParticles2D.convert_from_particles
	Advanced(self).ConvertFromParticles(particles)
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.GPUParticles2D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.GPUParticles2D](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.GPUParticles2D](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.GPUParticles2D{pointers.Add[gdclass.GPUParticles2D]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.GPUParticles2D{pointers.New[gdclass.GPUParticles2D]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Emitting() bool {
	return bool(class(self).IsEmitting())
}

func (self Instance) SetEmitting(value bool) {
	class(self).SetEmitting(value)
}

func (self Instance) Amount() int {
	return int(int(class(self).GetAmount()))
}

func (self Instance) SetAmount(value int) {
	class(self).SetAmount(int64(value))
}

func (self Instance) AmountRatio() Float.X {
	return Float.X(Float.X(class(self).GetAmountRatio()))
}

func (self Instance) SetAmountRatio(value Float.X) {
	class(self).SetAmountRatio(float64(value))
}

func (self Instance) SubEmitter() string {
	return string(class(self).GetSubEmitter().String())
}

func (self Instance) SetSubEmitter(value string) {
	class(self).SetSubEmitter(Path.ToNode(String.New(value)))
}

func (self Instance) Texture() Texture2D.Instance {
	return Texture2D.Instance(class(self).GetTexture())
}

func (self Instance) SetTexture(value Texture2D.Instance) {
	class(self).SetTexture(value)
}

func (self Instance) Lifetime() Float.X {
	return Float.X(Float.X(class(self).GetLifetime()))
}

func (self Instance) SetLifetime(value Float.X) {
	class(self).SetLifetime(float64(value))
}

func (self Instance) InterpToEnd() Float.X {
	return Float.X(Float.X(class(self).GetInterpToEnd()))
}

func (self Instance) SetInterpToEnd(value Float.X) {
	class(self).SetInterpToEnd(float64(value))
}

func (self Instance) OneShot() bool {
	return bool(class(self).GetOneShot())
}

func (self Instance) SetOneShot(value bool) {
	class(self).SetOneShot(value)
}

func (self Instance) Preprocess() Float.X {
	return Float.X(Float.X(class(self).GetPreProcessTime()))
}

func (self Instance) SetPreprocess(value Float.X) {
	class(self).SetPreProcessTime(float64(value))
}

func (self Instance) SpeedScale() Float.X {
	return Float.X(Float.X(class(self).GetSpeedScale()))
}

func (self Instance) SetSpeedScale(value Float.X) {
	class(self).SetSpeedScale(float64(value))
}

func (self Instance) Explosiveness() Float.X {
	return Float.X(Float.X(class(self).GetExplosivenessRatio()))
}

func (self Instance) SetExplosiveness(value Float.X) {
	class(self).SetExplosivenessRatio(float64(value))
}

func (self Instance) Randomness() Float.X {
	return Float.X(Float.X(class(self).GetRandomnessRatio()))
}

func (self Instance) SetRandomness(value Float.X) {
	class(self).SetRandomnessRatio(float64(value))
}

func (self Instance) UseFixedSeed() bool {
	return bool(class(self).GetUseFixedSeed())
}

func (self Instance) SetUseFixedSeed(value bool) {
	class(self).SetUseFixedSeed(value)
}

func (self Instance) Seed() int {
	return int(int(class(self).GetSeed()))
}

func (self Instance) SetSeed(value int) {
	class(self).SetSeed(int64(value))
}

func (self Instance) FixedFps() int {
	return int(int(class(self).GetFixedFps()))
}

func (self Instance) SetFixedFps(value int) {
	class(self).SetFixedFps(int64(value))
}

func (self Instance) Interpolate() bool {
	return bool(class(self).GetInterpolate())
}

func (self Instance) SetInterpolate(value bool) {
	class(self).SetInterpolate(value)
}

func (self Instance) FractDelta() bool {
	return bool(class(self).GetFractionalDelta())
}

func (self Instance) SetFractDelta(value bool) {
	class(self).SetFractionalDelta(value)
}

func (self Instance) CollisionBaseSize() Float.X {
	return Float.X(Float.X(class(self).GetCollisionBaseSize()))
}

func (self Instance) SetCollisionBaseSize(value Float.X) {
	class(self).SetCollisionBaseSize(float64(value))
}

func (self Instance) VisibilityRect() Rect2.PositionSize {
	return Rect2.PositionSize(class(self).GetVisibilityRect())
}

func (self Instance) SetVisibilityRect(value Rect2.PositionSize) {
	class(self).SetVisibilityRect(Rect2.PositionSize(value))
}

func (self Instance) LocalCoords() bool {
	return bool(class(self).GetUseLocalCoordinates())
}

func (self Instance) SetLocalCoords(value bool) {
	class(self).SetUseLocalCoordinates(value)
}

func (self Instance) DrawOrder() DrawOrder {
	return DrawOrder(class(self).GetDrawOrder())
}

func (self Instance) SetDrawOrder(value DrawOrder) {
	class(self).SetDrawOrder(value)
}

func (self Instance) TrailEnabled() bool {
	return bool(class(self).IsTrailEnabled())
}

func (self Instance) SetTrailEnabled(value bool) {
	class(self).SetTrailEnabled(value)
}

func (self Instance) TrailLifetime() Float.X {
	return Float.X(Float.X(class(self).GetTrailLifetime()))
}

func (self Instance) SetTrailLifetime(value Float.X) {
	class(self).SetTrailLifetime(float64(value))
}

func (self Instance) TrailSections() int {
	return int(int(class(self).GetTrailSections()))
}

func (self Instance) SetTrailSections(value int) {
	class(self).SetTrailSections(int64(value))
}

func (self Instance) TrailSectionSubdivisions() int {
	return int(int(class(self).GetTrailSectionSubdivisions()))
}

func (self Instance) SetTrailSectionSubdivisions(value int) {
	class(self).SetTrailSectionSubdivisions(int64(value))
}

func (self Instance) ProcessMaterial() Material.Instance {
	return Material.Instance(class(self).GetProcessMaterial())
}

func (self Instance) SetProcessMaterial(value Material.Instance) {
	class(self).SetProcessMaterial(value)
}

//go:nosplit
func (self class) SetEmitting(emitting bool) { //gd:GPUParticles2D.set_emitting
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_emitting, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ emitting bool }{emitting}))
}

//go:nosplit
func (self class) SetAmount(amount int64) { //gd:GPUParticles2D.set_amount
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_amount, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ amount int64 }{amount}))
}

//go:nosplit
func (self class) SetLifetime(secs float64) { //gd:GPUParticles2D.set_lifetime
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_lifetime, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ secs float64 }{secs}))
}

//go:nosplit
func (self class) SetOneShot(secs bool) { //gd:GPUParticles2D.set_one_shot
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_one_shot, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ secs bool }{secs}))
}

//go:nosplit
func (self class) SetPreProcessTime(secs float64) { //gd:GPUParticles2D.set_pre_process_time
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pre_process_time, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ secs float64 }{secs}))
}

//go:nosplit
func (self class) SetExplosivenessRatio(ratio float64) { //gd:GPUParticles2D.set_explosiveness_ratio
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_explosiveness_ratio, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ ratio float64 }{ratio}))
}

//go:nosplit
func (self class) SetRandomnessRatio(ratio float64) { //gd:GPUParticles2D.set_randomness_ratio
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_randomness_ratio, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ ratio float64 }{ratio}))
}

//go:nosplit
func (self class) SetVisibilityRect(visibility_rect Rect2.PositionSize) { //gd:GPUParticles2D.set_visibility_rect
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_visibility_rect, 0|(gdextension.SizeRect2<<4), unsafe.Pointer(&struct{ visibility_rect Rect2.PositionSize }{visibility_rect}))
}

//go:nosplit
func (self class) SetUseLocalCoordinates(enable bool) { //gd:GPUParticles2D.set_use_local_coordinates
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_use_local_coordinates, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) SetFixedFps(fps int64) { //gd:GPUParticles2D.set_fixed_fps
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_fixed_fps, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ fps int64 }{fps}))
}

//go:nosplit
func (self class) SetFractionalDelta(enable bool) { //gd:GPUParticles2D.set_fractional_delta
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_fractional_delta, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) SetInterpolate(enable bool) { //gd:GPUParticles2D.set_interpolate
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_interpolate, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) SetProcessMaterial(material [1]gdclass.Material) { //gd:GPUParticles2D.set_process_material
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_process_material, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ material gdextension.Object }{gdextension.Object(gd.ObjectChecked(material[0].AsObject()))}))
}

//go:nosplit
func (self class) SetSpeedScale(scale float64) { //gd:GPUParticles2D.set_speed_scale
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_speed_scale, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ scale float64 }{scale}))
}

//go:nosplit
func (self class) SetCollisionBaseSize(size float64) { //gd:GPUParticles2D.set_collision_base_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_collision_base_size, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ size float64 }{size}))
}

//go:nosplit
func (self class) SetInterpToEnd(interp float64) { //gd:GPUParticles2D.set_interp_to_end
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_interp_to_end, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ interp float64 }{interp}))
}

/*
Requests the particles to process for extra process time during a single frame.
Useful for particle playback, if used in combination with [member use_fixed_seed] or by calling [method restart] with parameter [code]keep_seed[/code] set to [code]true[/code].
*/
//go:nosplit
func (self class) RequestParticlesProcess(process_time float64) { //gd:GPUParticles2D.request_particles_process
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.request_particles_process, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ process_time float64 }{process_time}))
}

//go:nosplit
func (self class) IsEmitting() bool { //gd:GPUParticles2D.is_emitting
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_emitting, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetAmount() int64 { //gd:GPUParticles2D.get_amount
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_amount, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetLifetime() float64 { //gd:GPUParticles2D.get_lifetime
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_lifetime, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetOneShot() bool { //gd:GPUParticles2D.get_one_shot
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_one_shot, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetPreProcessTime() float64 { //gd:GPUParticles2D.get_pre_process_time
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_pre_process_time, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetExplosivenessRatio() float64 { //gd:GPUParticles2D.get_explosiveness_ratio
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_explosiveness_ratio, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetRandomnessRatio() float64 { //gd:GPUParticles2D.get_randomness_ratio
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_randomness_ratio, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetVisibilityRect() Rect2.PositionSize { //gd:GPUParticles2D.get_visibility_rect
	var r_ret = gdextension.Call[Rect2.PositionSize](gd.ObjectChecked(self.AsObject()), methods.get_visibility_rect, gdextension.SizeRect2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetUseLocalCoordinates() bool { //gd:GPUParticles2D.get_use_local_coordinates
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_use_local_coordinates, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetFixedFps() int64 { //gd:GPUParticles2D.get_fixed_fps
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_fixed_fps, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetFractionalDelta() bool { //gd:GPUParticles2D.get_fractional_delta
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_fractional_delta, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetInterpolate() bool { //gd:GPUParticles2D.get_interpolate
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_interpolate, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetProcessMaterial() [1]gdclass.Material { //gd:GPUParticles2D.get_process_material
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_process_material, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Material{gd.PointerWithOwnershipTransferredToGo[gdclass.Material](r_ret)}
	return ret
}

//go:nosplit
func (self class) GetSpeedScale() float64 { //gd:GPUParticles2D.get_speed_scale
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_speed_scale, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetCollisionBaseSize() float64 { //gd:GPUParticles2D.get_collision_base_size
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_collision_base_size, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetInterpToEnd() float64 { //gd:GPUParticles2D.get_interp_to_end
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_interp_to_end, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDrawOrder(order DrawOrder) { //gd:GPUParticles2D.set_draw_order
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_draw_order, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ order DrawOrder }{order}))
}

//go:nosplit
func (self class) GetDrawOrder() DrawOrder { //gd:GPUParticles2D.get_draw_order
	var r_ret = gdextension.Call[DrawOrder](gd.ObjectChecked(self.AsObject()), methods.get_draw_order, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTexture(texture [1]gdclass.Texture2D) { //gd:GPUParticles2D.set_texture
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_texture, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ texture gdextension.Object }{gdextension.Object(gd.ObjectChecked(texture[0].AsObject()))}))
}

//go:nosplit
func (self class) GetTexture() [1]gdclass.Texture2D { //gd:GPUParticles2D.get_texture
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_texture, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Texture2D{gd.PointerWithOwnershipTransferredToGo[gdclass.Texture2D](r_ret)}
	return ret
}

/*
Returns a rectangle containing the positions of all existing particles.
[b]Note:[/b] When using threaded rendering this method synchronizes the rendering thread. Calling it often may have a negative impact on performance.
*/
//go:nosplit
func (self class) CaptureRect() Rect2.PositionSize { //gd:GPUParticles2D.capture_rect
	var r_ret = gdextension.Call[Rect2.PositionSize](gd.ObjectChecked(self.AsObject()), methods.capture_rect, gdextension.SizeRect2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Restarts the particle emission cycle, clearing existing particles. To avoid particles vanishing from the viewport, wait for the [signal finished] signal before calling.
[b]Note:[/b] The [signal finished] signal is only emitted by [member one_shot] emitters.
If [param keep_seed] is [code]true[/code], the current random seed will be preserved. Useful for seeking and playback.
*/
//go:nosplit
func (self class) Restart(keep_seed bool) { //gd:GPUParticles2D.restart
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.restart, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ keep_seed bool }{keep_seed}))
}

//go:nosplit
func (self class) SetSubEmitter(path Path.ToNode) { //gd:GPUParticles2D.set_sub_emitter
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_sub_emitter, 0|(gdextension.SizeNodePath<<4), unsafe.Pointer(&struct{ path gdextension.NodePath }{pointers.Get(gd.InternalNodePath(path))}))
}

//go:nosplit
func (self class) GetSubEmitter() Path.ToNode { //gd:GPUParticles2D.get_sub_emitter
	var r_ret = gdextension.Call[gdextension.NodePath](gd.ObjectChecked(self.AsObject()), methods.get_sub_emitter, gdextension.SizeNodePath, unsafe.Pointer(&struct{}{}))
	var ret = Path.ToNode(String.Via(gd.NodePathProxy{}, pointers.Pack(pointers.New[gd.NodePath](r_ret))))
	return ret
}

/*
Emits a single particle. Whether [param xform], [param velocity], [param color] and [param custom] are applied depends on the value of [param flags]. See [enum EmitFlags].
The default ParticleProcessMaterial will overwrite [param color] and use the contents of [param custom] as [code](rotation, age, animation, lifetime)[/code].
[b]Note:[/b] [method emit_particle] is only supported on the Forward+ and Mobile rendering methods, not Compatibility.
*/
//go:nosplit
func (self class) EmitParticle(xform Transform2D.OriginXY, velocity Vector2.XY, color Color.RGBA, custom Color.RGBA, flags int64) { //gd:GPUParticles2D.emit_particle
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.emit_particle, 0|(gdextension.SizeTransform2D<<4)|(gdextension.SizeVector2<<8)|(gdextension.SizeColor<<12)|(gdextension.SizeColor<<16)|(gdextension.SizeInt<<20), unsafe.Pointer(&struct {
		xform    Transform2D.OriginXY
		velocity Vector2.XY
		color    Color.RGBA
		custom   Color.RGBA
		flags    int64
	}{xform, velocity, color, custom, flags}))
}

//go:nosplit
func (self class) SetTrailEnabled(enabled bool) { //gd:GPUParticles2D.set_trail_enabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_trail_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) SetTrailLifetime(secs float64) { //gd:GPUParticles2D.set_trail_lifetime
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_trail_lifetime, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ secs float64 }{secs}))
}

//go:nosplit
func (self class) IsTrailEnabled() bool { //gd:GPUParticles2D.is_trail_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_trail_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetTrailLifetime() float64 { //gd:GPUParticles2D.get_trail_lifetime
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_trail_lifetime, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTrailSections(sections int64) { //gd:GPUParticles2D.set_trail_sections
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_trail_sections, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ sections int64 }{sections}))
}

//go:nosplit
func (self class) GetTrailSections() int64 { //gd:GPUParticles2D.get_trail_sections
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_trail_sections, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTrailSectionSubdivisions(subdivisions int64) { //gd:GPUParticles2D.set_trail_section_subdivisions
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_trail_section_subdivisions, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ subdivisions int64 }{subdivisions}))
}

//go:nosplit
func (self class) GetTrailSectionSubdivisions() int64 { //gd:GPUParticles2D.get_trail_section_subdivisions
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_trail_section_subdivisions, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets this node's properties to match a given [CPUParticles2D] node.
*/
//go:nosplit
func (self class) ConvertFromParticles(particles [1]gdclass.Node) { //gd:GPUParticles2D.convert_from_particles
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.convert_from_particles, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ particles gdextension.Object }{gdextension.Object(gd.ObjectChecked(particles[0].AsObject()))}))
}

//go:nosplit
func (self class) SetAmountRatio(ratio float64) { //gd:GPUParticles2D.set_amount_ratio
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_amount_ratio, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ ratio float64 }{ratio}))
}

//go:nosplit
func (self class) GetAmountRatio() float64 { //gd:GPUParticles2D.get_amount_ratio
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_amount_ratio, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetUseFixedSeed(use_fixed_seed bool) { //gd:GPUParticles2D.set_use_fixed_seed
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_use_fixed_seed, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ use_fixed_seed bool }{use_fixed_seed}))
}

//go:nosplit
func (self class) GetUseFixedSeed() bool { //gd:GPUParticles2D.get_use_fixed_seed
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_use_fixed_seed, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSeed(seed int64) { //gd:GPUParticles2D.set_seed
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_seed, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ seed int64 }{seed}))
}

//go:nosplit
func (self class) GetSeed() int64 { //gd:GPUParticles2D.get_seed
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_seed, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self Instance) OnFinished(cb func(), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("finished"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) Finished() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`Finished`))))
}

func (self class) AsGPUParticles2D() Advanced {
	return Advanced{pointers.AsA[gdclass.GPUParticles2D](self[0])}
}
func (self Instance) AsGPUParticles2D() Instance {
	return Instance{pointers.AsA[gdclass.GPUParticles2D](self[0])}
}
func (self *Extension[T]) AsGPUParticles2D() Instance { return self.Super().AsGPUParticles2D() }
func (self class) AsNode2D() Node2D.Advanced {
	return Node2D.Advanced{pointers.AsA[gdclass.Node2D](self[0])}
}
func (self *Extension[T]) AsNode2D() Node2D.Instance { return self.Super().AsNode2D() }
func (self Instance) AsNode2D() Node2D.Instance {
	return Node2D.Instance{pointers.AsA[gdclass.Node2D](self[0])}
}
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return CanvasItem.Advanced{pointers.AsA[gdclass.CanvasItem](self[0])}
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return CanvasItem.Instance{pointers.AsA[gdclass.CanvasItem](self[0])}
}
func (self class) AsNode() Node.Advanced         { return Node.Advanced{pointers.AsA[gdclass.Node](self[0])} }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance {
	return Node.Instance{pointers.AsA[gdclass.Node](self[0])}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node2D.Advanced(self.AsNode2D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node2D.Instance(self.AsNode2D()), name)
	}
}
func init() {
	gdclass.Register("GPUParticles2D", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.GPUParticles2D](ptr)} })
}

type DrawOrder int //gd:GPUParticles2D.DrawOrder

const (
	/*Particles are drawn in the order emitted.*/
	DrawOrderIndex DrawOrder = 0
	/*Particles are drawn in order of remaining lifetime. In other words, the particle with the highest lifetime is drawn at the front.*/
	DrawOrderLifetime DrawOrder = 1
	/*Particles are drawn in reverse order of remaining lifetime. In other words, the particle with the lowest lifetime is drawn at the front.*/
	DrawOrderReverseLifetime DrawOrder = 2
)

type EmitFlags int //gd:GPUParticles2D.EmitFlags

const (
	/*Particle starts at the specified position.*/
	EmitFlagPosition EmitFlags = 1
	/*Particle starts with specified rotation and scale.*/
	EmitFlagRotationScale EmitFlags = 2
	/*Particle starts with the specified velocity vector, which defines the emission direction and speed.*/
	EmitFlagVelocity EmitFlags = 4
	/*Particle starts with specified color.*/
	EmitFlagColor EmitFlags = 8
	/*Particle starts with specified [code]CUSTOM[/code] data.*/
	EmitFlagCustom EmitFlags = 16
)
