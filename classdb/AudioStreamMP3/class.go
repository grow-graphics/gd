// Code generated by the generate package DO NOT EDIT

// Package AudioStreamMP3 provides methods for working with AudioStreamMP3 object instances.
package AudioStreamMP3

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/AudioStream"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
MP3 audio stream driver. See [member data] if you want to load an MP3 file at run-time.
[b]Note:[/b] This class can optionally support legacy MP1 and MP2 formats, provided that the engine is compiled with the [code]minimp3_extra_formats=yes[/code] SCons option. These extra formats are not enabled by default.
*/
type Instance [1]gdclass.AudioStreamMP3

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAudioStreamMP3() Instance
}

/*
Creates a new [AudioStreamMP3] instance from the given buffer. The buffer must contain MP3 data.
*/
func LoadFromBuffer(stream_data []byte) Instance { //gd:AudioStreamMP3.load_from_buffer
	self := Instance{}
	return Instance(Advanced(self).LoadFromBuffer(Packed.Bytes(Packed.New(stream_data...))))
}

/*
Creates a new [AudioStreamMP3] instance from the given file path. The file must be in MP3 format.
*/
func LoadFromFile(path string) Instance { //gd:AudioStreamMP3.load_from_file
	self := Instance{}
	return Instance(Advanced(self).LoadFromFile(String.New(path)))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AudioStreamMP3

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("AudioStreamMP3"))
	casted := Instance{*(*gdclass.AudioStreamMP3)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) Data() []byte {
	return []byte(class(self).GetData().Bytes())
}

func (self Instance) SetData(value []byte) {
	class(self).SetData(Packed.Bytes(Packed.New(value...)))
}

func (self Instance) Bpm() Float.X {
	return Float.X(Float.X(class(self).GetBpm()))
}

func (self Instance) SetBpm(value Float.X) {
	class(self).SetBpm(float64(value))
}

func (self Instance) BeatCount() int {
	return int(int(class(self).GetBeatCount()))
}

func (self Instance) SetBeatCount(value int) {
	class(self).SetBeatCount(int64(value))
}

func (self Instance) BarBeats() int {
	return int(int(class(self).GetBarBeats()))
}

func (self Instance) SetBarBeats(value int) {
	class(self).SetBarBeats(int64(value))
}

func (self Instance) Loop() bool {
	return bool(class(self).HasLoop())
}

func (self Instance) SetLoop(value bool) {
	class(self).SetLoop(value)
}

func (self Instance) LoopOffset() Float.X {
	return Float.X(Float.X(class(self).GetLoopOffset()))
}

func (self Instance) SetLoopOffset(value Float.X) {
	class(self).SetLoopOffset(float64(value))
}

/*
Creates a new [AudioStreamMP3] instance from the given buffer. The buffer must contain MP3 data.
*/
//go:nosplit
func (self class) LoadFromBuffer(stream_data Packed.Bytes) [1]gdclass.AudioStreamMP3 { //gd:AudioStreamMP3.load_from_buffer
	var r_ret = gdunsafe.CallStatic[gd.EnginePointer](gd.Global.Methods.AudioStreamMP3.Bind_load_from_buffer, gdextension.SizeObject|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ stream_data gdextension.PackedArray }{gdextension.ToPackedArray(pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](stream_data))))}))
	var ret = [1]gdclass.AudioStreamMP3{gd.PointerWithOwnershipTransferredToGo[gdclass.AudioStreamMP3](r_ret)}
	return ret
}

/*
Creates a new [AudioStreamMP3] instance from the given file path. The file must be in MP3 format.
*/
//go:nosplit
func (self class) LoadFromFile(path String.Readable) [1]gdclass.AudioStreamMP3 { //gd:AudioStreamMP3.load_from_file
	var r_ret = gdunsafe.CallStatic[gd.EnginePointer](gd.Global.Methods.AudioStreamMP3.Bind_load_from_file, gdextension.SizeObject|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ path gdextension.String }{gdextension.String(pointers.Get(gd.InternalString(path))[0])}))
	var ret = [1]gdclass.AudioStreamMP3{gd.PointerWithOwnershipTransferredToGo[gdclass.AudioStreamMP3](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetData(data Packed.Bytes) { //gd:AudioStreamMP3.set_data
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamMP3.Bind_set_data, 0|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ data gdextension.PackedArray }{gdextension.ToPackedArray(pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](data))))}))
}

//go:nosplit
func (self class) GetData() Packed.Bytes { //gd:AudioStreamMP3.get_data
	var r_ret = gdunsafe.Call[gd.PackedPointers](self.AsObject(), gd.Global.Methods.AudioStreamMP3.Bind_get_data, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetLoop(enable bool) { //gd:AudioStreamMP3.set_loop
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamMP3.Bind_set_loop, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) HasLoop() bool { //gd:AudioStreamMP3.has_loop
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.AudioStreamMP3.Bind_has_loop, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetLoopOffset(seconds float64) { //gd:AudioStreamMP3.set_loop_offset
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamMP3.Bind_set_loop_offset, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ seconds float64 }{seconds}))
}

//go:nosplit
func (self class) GetLoopOffset() float64 { //gd:AudioStreamMP3.get_loop_offset
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.AudioStreamMP3.Bind_get_loop_offset, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBpm(bpm float64) { //gd:AudioStreamMP3.set_bpm
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamMP3.Bind_set_bpm, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ bpm float64 }{bpm}))
}

//go:nosplit
func (self class) GetBpm() float64 { //gd:AudioStreamMP3.get_bpm
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.AudioStreamMP3.Bind_get_bpm, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBeatCount(count int64) { //gd:AudioStreamMP3.set_beat_count
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamMP3.Bind_set_beat_count, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ count int64 }{count}))
}

//go:nosplit
func (self class) GetBeatCount() int64 { //gd:AudioStreamMP3.get_beat_count
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.AudioStreamMP3.Bind_get_beat_count, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBarBeats(count int64) { //gd:AudioStreamMP3.set_bar_beats
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamMP3.Bind_set_bar_beats, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ count int64 }{count}))
}

//go:nosplit
func (self class) GetBarBeats() int64 { //gd:AudioStreamMP3.get_bar_beats
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.AudioStreamMP3.Bind_get_bar_beats, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsAudioStreamMP3() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsAudioStreamMP3() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsAudioStreamMP3() Instance { return self.Super().AsAudioStreamMP3() }
func (self class) AsAudioStream() AudioStream.Advanced {
	return *((*AudioStream.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAudioStream() AudioStream.Instance { return self.Super().AsAudioStream() }
func (self Instance) AsAudioStream() AudioStream.Instance {
	return *((*AudioStream.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioStream.Advanced(self.AsAudioStream()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioStream.Instance(self.AsAudioStream()), name)
	}
}
func init() {
	gdclass.Register("AudioStreamMP3", func(ptr gd.Object) any {
		return [1]gdclass.AudioStreamMP3{*(*gdclass.AudioStreamMP3)(unsafe.Pointer(&ptr))}
	})
}
