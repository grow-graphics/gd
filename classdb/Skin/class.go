// Code generated by the generate package DO NOT EDIT

// Package Skin provides methods for working with Skin object instances.
package Skin

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Transform3D"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }
type Instance [1]gdclass.Skin

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_bind_count gdextension.MethodForClass `hash:"1286410249"`
	get_bind_count gdextension.MethodForClass `hash:"3905245786"`
	add_bind       gdextension.MethodForClass `hash:"3616898986"`
	add_named_bind gdextension.MethodForClass `hash:"3154712474"`
	set_bind_pose  gdextension.MethodForClass `hash:"3616898986"`
	get_bind_pose  gdextension.MethodForClass `hash:"1965739696"`
	set_bind_name  gdextension.MethodForClass `hash:"3780747571"`
	get_bind_name  gdextension.MethodForClass `hash:"659327637"`
	set_bind_bone  gdextension.MethodForClass `hash:"3937882851"`
	get_bind_bone  gdextension.MethodForClass `hash:"923996154"`
	clear_binds    gdextension.MethodForClass `hash:"3218959716"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("Skin")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsSkin() Instance
}

func (self Instance) SetBindCount(bind_count int) { //gd:Skin.set_bind_count
	Advanced(self).SetBindCount(int64(bind_count))
}
func (self Instance) GetBindCount() int { //gd:Skin.get_bind_count
	return int(int(Advanced(self).GetBindCount()))
}
func (self Instance) AddBind(bone int, pose Transform3D.BasisOrigin) { //gd:Skin.add_bind
	Advanced(self).AddBind(int64(bone), Transform3D.BasisOrigin(pose))
}
func (self Instance) AddNamedBind(name string, pose Transform3D.BasisOrigin) { //gd:Skin.add_named_bind
	Advanced(self).AddNamedBind(String.New(name), Transform3D.BasisOrigin(pose))
}
func (self Instance) SetBindPose(bind_index int, pose Transform3D.BasisOrigin) { //gd:Skin.set_bind_pose
	Advanced(self).SetBindPose(int64(bind_index), Transform3D.BasisOrigin(pose))
}
func (self Instance) GetBindPose(bind_index int) Transform3D.BasisOrigin { //gd:Skin.get_bind_pose
	return Transform3D.BasisOrigin(Advanced(self).GetBindPose(int64(bind_index)))
}
func (self Instance) SetBindName(bind_index int, name string) { //gd:Skin.set_bind_name
	Advanced(self).SetBindName(int64(bind_index), String.Name(String.New(name)))
}
func (self Instance) GetBindName(bind_index int) string { //gd:Skin.get_bind_name
	return string(Advanced(self).GetBindName(int64(bind_index)).String())
}
func (self Instance) SetBindBone(bind_index int, bone int) { //gd:Skin.set_bind_bone
	Advanced(self).SetBindBone(int64(bind_index), int64(bone))
}
func (self Instance) GetBindBone(bind_index int) int { //gd:Skin.get_bind_bone
	return int(int(Advanced(self).GetBindBone(int64(bind_index))))
}
func (self Instance) ClearBinds() { //gd:Skin.clear_binds
	Advanced(self).ClearBinds()
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.Skin

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.Skin)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.Skin)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.Skin)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].InitRef()
	object[0].Notification(0, false)
	return casted
}

//go:nosplit
func (self class) SetBindCount(bind_count int64) { //gd:Skin.set_bind_count
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bind_count, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ bind_count int64 }{bind_count}))
}

//go:nosplit
func (self class) GetBindCount() int64 { //gd:Skin.get_bind_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_bind_count, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) AddBind(bone int64, pose Transform3D.BasisOrigin) { //gd:Skin.add_bind
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.add_bind, 0|(gdextension.SizeInt<<4)|(gdextension.SizeTransform3D<<8), unsafe.Pointer(&struct {
		bone int64
		pose Transform3D.BasisOrigin
	}{bone, gd.Transposed(pose)}))
}

//go:nosplit
func (self class) AddNamedBind(name String.Readable, pose Transform3D.BasisOrigin) { //gd:Skin.add_named_bind
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.add_named_bind, 0|(gdextension.SizeString<<4)|(gdextension.SizeTransform3D<<8), unsafe.Pointer(&struct {
		name gdextension.String
		pose Transform3D.BasisOrigin
	}{pointers.Get(gd.InternalString(name)), gd.Transposed(pose)}))
}

//go:nosplit
func (self class) SetBindPose(bind_index int64, pose Transform3D.BasisOrigin) { //gd:Skin.set_bind_pose
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bind_pose, 0|(gdextension.SizeInt<<4)|(gdextension.SizeTransform3D<<8), unsafe.Pointer(&struct {
		bind_index int64
		pose       Transform3D.BasisOrigin
	}{bind_index, gd.Transposed(pose)}))
}

//go:nosplit
func (self class) GetBindPose(bind_index int64) Transform3D.BasisOrigin { //gd:Skin.get_bind_pose
	var r_ret = gdextension.Call[Transform3D.BasisOrigin](gd.ObjectChecked(self.AsObject()), methods.get_bind_pose, gdextension.SizeTransform3D|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ bind_index int64 }{bind_index}))
	var ret = gd.Transposed(r_ret)
	return ret
}

//go:nosplit
func (self class) SetBindName(bind_index int64, name String.Name) { //gd:Skin.set_bind_name
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bind_name, 0|(gdextension.SizeInt<<4)|(gdextension.SizeStringName<<8), unsafe.Pointer(&struct {
		bind_index int64
		name       gdextension.StringName
	}{bind_index, pointers.Get(gd.InternalStringName(name))}))
}

//go:nosplit
func (self class) GetBindName(bind_index int64) String.Name { //gd:Skin.get_bind_name
	var r_ret = gdextension.Call[gdextension.StringName](gd.ObjectChecked(self.AsObject()), methods.get_bind_name, gdextension.SizeStringName|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ bind_index int64 }{bind_index}))
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetBindBone(bind_index int64, bone int64) { //gd:Skin.set_bind_bone
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bind_bone, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		bind_index int64
		bone       int64
	}{bind_index, bone}))
}

//go:nosplit
func (self class) GetBindBone(bind_index int64) int64 { //gd:Skin.get_bind_bone
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_bind_bone, gdextension.SizeInt|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ bind_index int64 }{bind_index}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) ClearBinds() { //gd:Skin.clear_binds
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear_binds, 0, unsafe.Pointer(&struct{}{}))
}
func (self class) AsSkin() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsSkin() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsSkin() Instance { return self.Super().AsSkin() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("Skin", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
