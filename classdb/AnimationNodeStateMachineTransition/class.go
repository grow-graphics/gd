// Code generated by the generate package DO NOT EDIT

// Package AnimationNodeStateMachineTransition provides methods for working with AnimationNodeStateMachineTransition object instances.
package AnimationNodeStateMachineTransition

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Curve"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
The path generated when using [method AnimationNodeStateMachinePlayback.travel] is limited to the nodes connected by [AnimationNodeStateMachineTransition].
You can set the timing and conditions of the transition in detail.
*/
type Instance [1]gdclass.AnimationNodeStateMachineTransition

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_switch_mode        gdextension.MethodForClass `hash:"2074906633"`
	get_switch_mode        gdextension.MethodForClass `hash:"2138562085"`
	set_advance_mode       gdextension.MethodForClass `hash:"1210869868"`
	get_advance_mode       gdextension.MethodForClass `hash:"61101689"`
	set_advance_condition  gdextension.MethodForClass `hash:"3304788590"`
	get_advance_condition  gdextension.MethodForClass `hash:"2002593661"`
	set_xfade_time         gdextension.MethodForClass `hash:"373806689"`
	get_xfade_time         gdextension.MethodForClass `hash:"1740695150"`
	set_xfade_curve        gdextension.MethodForClass `hash:"270443179"`
	get_xfade_curve        gdextension.MethodForClass `hash:"2460114913"`
	set_break_loop_at_end  gdextension.MethodForClass `hash:"2586408642"`
	is_loop_broken_at_end  gdextension.MethodForClass `hash:"36873697"`
	set_reset              gdextension.MethodForClass `hash:"2586408642"`
	is_reset               gdextension.MethodForClass `hash:"36873697"`
	set_priority           gdextension.MethodForClass `hash:"1286410249"`
	get_priority           gdextension.MethodForClass `hash:"3905245786"`
	set_advance_expression gdextension.MethodForClass `hash:"83702148"`
	get_advance_expression gdextension.MethodForClass `hash:"201670096"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("AnimationNodeStateMachineTransition")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAnimationNodeStateMachineTransition() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AnimationNodeStateMachineTransition

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AnimationNodeStateMachineTransition)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AnimationNodeStateMachineTransition)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.AnimationNodeStateMachineTransition)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) XfadeTime() Float.X {
	return Float.X(Float.X(class(self).GetXfadeTime()))
}

func (self Instance) SetXfadeTime(value Float.X) {
	class(self).SetXfadeTime(float64(value))
}

func (self Instance) XfadeCurve() Curve.Instance {
	return Curve.Instance(class(self).GetXfadeCurve())
}

func (self Instance) SetXfadeCurve(value Curve.Instance) {
	class(self).SetXfadeCurve(value)
}

func (self Instance) BreakLoopAtEnd() bool {
	return bool(class(self).IsLoopBrokenAtEnd())
}

func (self Instance) SetBreakLoopAtEnd(value bool) {
	class(self).SetBreakLoopAtEnd(value)
}

func (self Instance) Reset() bool {
	return bool(class(self).IsReset())
}

func (self Instance) SetReset(value bool) {
	class(self).SetReset(value)
}

func (self Instance) Priority() int {
	return int(int(class(self).GetPriority()))
}

func (self Instance) SetPriority(value int) {
	class(self).SetPriority(int64(value))
}

func (self Instance) SwitchMode() SwitchMode {
	return SwitchMode(class(self).GetSwitchMode())
}

func (self Instance) SetSwitchMode(value SwitchMode) {
	class(self).SetSwitchMode(value)
}

func (self Instance) AdvanceMode() AdvanceMode {
	return AdvanceMode(class(self).GetAdvanceMode())
}

func (self Instance) SetAdvanceMode(value AdvanceMode) {
	class(self).SetAdvanceMode(value)
}

func (self Instance) AdvanceCondition() string {
	return string(class(self).GetAdvanceCondition().String())
}

func (self Instance) SetAdvanceCondition(value string) {
	class(self).SetAdvanceCondition(String.Name(String.New(value)))
}

func (self Instance) AdvanceExpression() string {
	return string(class(self).GetAdvanceExpression().String())
}

func (self Instance) SetAdvanceExpression(value string) {
	class(self).SetAdvanceExpression(String.New(value))
}

//go:nosplit
func (self class) SetSwitchMode(mode SwitchMode) { //gd:AnimationNodeStateMachineTransition.set_switch_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_switch_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode SwitchMode }{mode}))
}

//go:nosplit
func (self class) GetSwitchMode() SwitchMode { //gd:AnimationNodeStateMachineTransition.get_switch_mode
	var r_ret = gdextension.Call[SwitchMode](gd.ObjectChecked(self.AsObject()), methods.get_switch_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAdvanceMode(mode AdvanceMode) { //gd:AnimationNodeStateMachineTransition.set_advance_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_advance_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode AdvanceMode }{mode}))
}

//go:nosplit
func (self class) GetAdvanceMode() AdvanceMode { //gd:AnimationNodeStateMachineTransition.get_advance_mode
	var r_ret = gdextension.Call[AdvanceMode](gd.ObjectChecked(self.AsObject()), methods.get_advance_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAdvanceCondition(name String.Name) { //gd:AnimationNodeStateMachineTransition.set_advance_condition
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_advance_condition, 0|(gdextension.SizeStringName<<4), unsafe.Pointer(&struct{ name gdextension.StringName }{pointers.Get(gd.InternalStringName(name))}))
}

//go:nosplit
func (self class) GetAdvanceCondition() String.Name { //gd:AnimationNodeStateMachineTransition.get_advance_condition
	var r_ret = gdextension.Call[gdextension.StringName](gd.ObjectChecked(self.AsObject()), methods.get_advance_condition, gdextension.SizeStringName, unsafe.Pointer(&struct{}{}))
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetXfadeTime(secs float64) { //gd:AnimationNodeStateMachineTransition.set_xfade_time
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_xfade_time, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ secs float64 }{secs}))
}

//go:nosplit
func (self class) GetXfadeTime() float64 { //gd:AnimationNodeStateMachineTransition.get_xfade_time
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_xfade_time, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetXfadeCurve(curve [1]gdclass.Curve) { //gd:AnimationNodeStateMachineTransition.set_xfade_curve
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_xfade_curve, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ curve gdextension.Object }{gdextension.Object(gd.ObjectChecked(curve[0].AsObject()))}))
}

//go:nosplit
func (self class) GetXfadeCurve() [1]gdclass.Curve { //gd:AnimationNodeStateMachineTransition.get_xfade_curve
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_xfade_curve, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Curve{gd.PointerWithOwnershipTransferredToGo[gdclass.Curve](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetBreakLoopAtEnd(enable bool) { //gd:AnimationNodeStateMachineTransition.set_break_loop_at_end
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_break_loop_at_end, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) IsLoopBrokenAtEnd() bool { //gd:AnimationNodeStateMachineTransition.is_loop_broken_at_end
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_loop_broken_at_end, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetReset(reset bool) { //gd:AnimationNodeStateMachineTransition.set_reset
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_reset, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ reset bool }{reset}))
}

//go:nosplit
func (self class) IsReset() bool { //gd:AnimationNodeStateMachineTransition.is_reset
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_reset, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPriority(priority int64) { //gd:AnimationNodeStateMachineTransition.set_priority
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_priority, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ priority int64 }{priority}))
}

//go:nosplit
func (self class) GetPriority() int64 { //gd:AnimationNodeStateMachineTransition.get_priority
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_priority, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAdvanceExpression(text String.Readable) { //gd:AnimationNodeStateMachineTransition.set_advance_expression
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_advance_expression, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ text gdextension.String }{pointers.Get(gd.InternalString(text))}))
}

//go:nosplit
func (self class) GetAdvanceExpression() String.Readable { //gd:AnimationNodeStateMachineTransition.get_advance_expression
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_advance_expression, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}
func (self Instance) OnAdvanceConditionChanged(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("advance_condition_changed"), gd.NewCallable(cb), 0)
}

func (self class) AsAnimationNodeStateMachineTransition() Advanced {
	return *((*Advanced)(unsafe.Pointer(&self)))
}
func (self Instance) AsAnimationNodeStateMachineTransition() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAnimationNodeStateMachineTransition() Instance {
	return self.Super().AsAnimationNodeStateMachineTransition()
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("AnimationNodeStateMachineTransition", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type SwitchMode int //gd:AnimationNodeStateMachineTransition.SwitchMode

const (
	/*Switch to the next state immediately. The current state will end and blend into the beginning of the new one.*/
	SwitchModeImmediate SwitchMode = 0
	/*Switch to the next state immediately, but will seek the new state to the playback position of the old state.*/
	SwitchModeSync SwitchMode = 1
	/*Wait for the current state playback to end, then switch to the beginning of the next state animation.*/
	SwitchModeAtEnd SwitchMode = 2
)

type AdvanceMode int //gd:AnimationNodeStateMachineTransition.AdvanceMode

const (
	/*Don't use this transition.*/
	AdvanceModeDisabled AdvanceMode = 0
	/*Only use this transition during [method AnimationNodeStateMachinePlayback.travel].*/
	AdvanceModeEnabled AdvanceMode = 1
	/*Automatically use this transition if the [member advance_condition] and [member advance_expression] checks are [code]true[/code] (if assigned).*/
	AdvanceModeAuto AdvanceMode = 2
)
