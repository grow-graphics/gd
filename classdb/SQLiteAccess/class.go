// Code generated by the generate package DO NOT EDIT

// Package SQLiteAccess provides methods for working with SQLiteAccess object instances.
package SQLiteAccess

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/SQLiteQuery"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A wrapper class that lets you perform SQL statements on an SQLite database file.
For queries that involve arbitrary user input, you should use methods that end in [code]*_with_args[/code], as these protect against SQL injection.
*/
type Instance [1]gdclass.SQLiteAccess

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.SQLiteAccess

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsSQLiteAccess() Instance
}

/*
Opens the database file at the given path. Returns [code]true[/code] if the database was successfully opened, [code]false[/code] otherwise.
If the path starts with "res://", it will use [method open_buffered] implicitly.
*/
func (self Instance) Open(database string) bool { //gd:SQLiteAccess.open
	return bool(Advanced(self).Open(String.New(database)))
}

/*
Opens an in-memory database.
*/
func (self Instance) OpenInMemory() bool { //gd:SQLiteAccess.open_in_memory
	return bool(Advanced(self).OpenInMemory())
}

/*
Opens a temporary database with the data in [code]buffer[/code]. Used for opening databases stored in res:// or compressed databases. Returns [code]true[/code] if the database was opened successfully.
Can be written to, but the changes are NOT saved!
*/
func (self Instance) OpenBuffered(path string, buffers []byte, size int) bool { //gd:SQLiteAccess.open_buffered
	return bool(Advanced(self).OpenBuffered(String.New(path), Packed.Bytes(Packed.New(buffers...)), int64(size)))
}

/*
Creates a backup of the database at the given path.
*/
func (self Instance) Backup(path string) bool { //gd:SQLiteAccess.backup
	return bool(Advanced(self).Backup(String.New(path)))
}

/*
Gets the last error message.
*/
func (self Instance) GetLastErrorMessage() string { //gd:SQLiteAccess.get_last_error_message
	return string(Advanced(self).GetLastErrorMessage().String())
}

/*
Gets the last error code.
*/
func (self Instance) GetLastErrorCode() int { //gd:SQLiteAccess.get_last_error_code
	return int(int(Advanced(self).GetLastErrorCode()))
}

/*
Closes the database handle.
*/
func (self Instance) Close() bool { //gd:SQLiteAccess.close
	return bool(Advanced(self).Close())
}

/*
Creates a new query object.
*/
func (self Instance) CreateQuery(statement string) SQLiteQuery.Instance { //gd:SQLiteAccess.create_query
	return SQLiteQuery.Instance(Advanced(self).CreateQuery(String.New(statement), Array.Nil))
}

/*
Creates a new query object.
*/
func (self Expanded) CreateQuery(statement string, arguments []any) SQLiteQuery.Instance { //gd:SQLiteAccess.create_query
	return SQLiteQuery.Instance(Advanced(self).CreateQuery(String.New(statement), gd.EngineArrayFromSlice(arguments)))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.SQLiteAccess

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("SQLiteAccess"))
	casted := Instance{*(*gdclass.SQLiteAccess)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

/*
Opens the database file at the given path. Returns [code]true[/code] if the database was successfully opened, [code]false[/code] otherwise.
If the path starts with "res://", it will use [method open_buffered] implicitly.
*/
//go:nosplit
func (self class) Open(database String.Readable) bool { //gd:SQLiteAccess.open
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(database)))
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteAccess.Bind_open, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Opens an in-memory database.
*/
//go:nosplit
func (self class) OpenInMemory() bool { //gd:SQLiteAccess.open_in_memory
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteAccess.Bind_open_in_memory, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Opens a temporary database with the data in [code]buffer[/code]. Used for opening databases stored in res:// or compressed databases. Returns [code]true[/code] if the database was opened successfully.
Can be written to, but the changes are NOT saved!
*/
//go:nosplit
func (self class) OpenBuffered(path String.Readable, buffers Packed.Bytes, size int64) bool { //gd:SQLiteAccess.open_buffered
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(path)))
	callframe.Arg(frame, pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](buffers))))
	callframe.Arg(frame, size)
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteAccess.Bind_open_buffered, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Creates a backup of the database at the given path.
*/
//go:nosplit
func (self class) Backup(path String.Readable) bool { //gd:SQLiteAccess.backup
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(path)))
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteAccess.Bind_backup, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Gets the last error message.
*/
//go:nosplit
func (self class) GetLastErrorMessage() String.Readable { //gd:SQLiteAccess.get_last_error_message
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteAccess.Bind_get_last_error_message, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Gets the last error code.
*/
//go:nosplit
func (self class) GetLastErrorCode() int64 { //gd:SQLiteAccess.get_last_error_code
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteAccess.Bind_get_last_error_code, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Closes the database handle.
*/
//go:nosplit
func (self class) Close() bool { //gd:SQLiteAccess.close
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteAccess.Bind_close, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Creates a new query object.
*/
//go:nosplit
func (self class) CreateQuery(statement String.Readable, arguments Array.Any) [1]gdclass.SQLiteQuery { //gd:SQLiteAccess.create_query
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(statement)))
	callframe.Arg(frame, pointers.Get(gd.InternalArray(arguments)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteAccess.Bind_create_query, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.SQLiteQuery{gd.PointerWithOwnershipTransferredToGo[gdclass.SQLiteQuery](r_ret.Get())}
	frame.Free()
	return ret
}
func (self class) AsSQLiteAccess() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsSQLiteAccess() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsSQLiteAccess() Instance { return self.Super().AsSQLiteAccess() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("SQLiteAccess", func(ptr gd.Object) any {
		return [1]gdclass.SQLiteAccess{*(*gdclass.SQLiteAccess)(unsafe.Pointer(&ptr))}
	})
}
