// Code generated by the generate package DO NOT EDIT

// Package RDFramebufferPass provides methods for working with RDFramebufferPass object instances.
package RDFramebufferPass

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This class contains the list of attachment descriptions for a framebuffer pass. Each points with an index to a previously supplied list of texture attachments.
Multipass framebuffers can optimize some configurations in mobile. On desktop, they provide little to no advantage.
This object is used by [RenderingDevice].
*/
type Instance [1]gdclass.RDFramebufferPass

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_color_attachments    gdextension.MethodForClass `hash:"3614634198"`
	get_color_attachments    gdextension.MethodForClass `hash:"1930428628"`
	set_input_attachments    gdextension.MethodForClass `hash:"3614634198"`
	get_input_attachments    gdextension.MethodForClass `hash:"1930428628"`
	set_resolve_attachments  gdextension.MethodForClass `hash:"3614634198"`
	get_resolve_attachments  gdextension.MethodForClass `hash:"1930428628"`
	set_preserve_attachments gdextension.MethodForClass `hash:"3614634198"`
	get_preserve_attachments gdextension.MethodForClass `hash:"1930428628"`
	set_depth_attachment     gdextension.MethodForClass `hash:"1286410249"`
	get_depth_attachment     gdextension.MethodForClass `hash:"3905245786"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("RDFramebufferPass")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsRDFramebufferPass() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.RDFramebufferPass

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.RDFramebufferPass)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.RDFramebufferPass)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.RDFramebufferPass)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) ColorAttachments() []int32 {
	return []int32(slices.Collect(class(self).GetColorAttachments().Values()))
}

func (self Instance) SetColorAttachments(value []int32) {
	class(self).SetColorAttachments(Packed.New(value...))
}

func (self Instance) InputAttachments() []int32 {
	return []int32(slices.Collect(class(self).GetInputAttachments().Values()))
}

func (self Instance) SetInputAttachments(value []int32) {
	class(self).SetInputAttachments(Packed.New(value...))
}

func (self Instance) ResolveAttachments() []int32 {
	return []int32(slices.Collect(class(self).GetResolveAttachments().Values()))
}

func (self Instance) SetResolveAttachments(value []int32) {
	class(self).SetResolveAttachments(Packed.New(value...))
}

func (self Instance) PreserveAttachments() []int32 {
	return []int32(slices.Collect(class(self).GetPreserveAttachments().Values()))
}

func (self Instance) SetPreserveAttachments(value []int32) {
	class(self).SetPreserveAttachments(Packed.New(value...))
}

func (self Instance) DepthAttachment() int {
	return int(int(class(self).GetDepthAttachment()))
}

func (self Instance) SetDepthAttachment(value int) {
	class(self).SetDepthAttachment(int64(value))
}

//go:nosplit
func (self class) SetColorAttachments(p_member Packed.Array[int32]) { //gd:RDFramebufferPass.set_color_attachments
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_color_attachments, 0|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct {
		p_member gdextension.PackedArray[int32]
	}{pointers.Get(gd.InternalPacked[gd.PackedInt32Array, int32](p_member))}))
}

//go:nosplit
func (self class) GetColorAttachments() Packed.Array[int32] { //gd:RDFramebufferPass.get_color_attachments
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_color_attachments, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Array[int32](Array.Through(gd.PackedProxy[gd.PackedInt32Array, int32]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetInputAttachments(p_member Packed.Array[int32]) { //gd:RDFramebufferPass.set_input_attachments
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_input_attachments, 0|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct {
		p_member gdextension.PackedArray[int32]
	}{pointers.Get(gd.InternalPacked[gd.PackedInt32Array, int32](p_member))}))
}

//go:nosplit
func (self class) GetInputAttachments() Packed.Array[int32] { //gd:RDFramebufferPass.get_input_attachments
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_input_attachments, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Array[int32](Array.Through(gd.PackedProxy[gd.PackedInt32Array, int32]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetResolveAttachments(p_member Packed.Array[int32]) { //gd:RDFramebufferPass.set_resolve_attachments
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_resolve_attachments, 0|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct {
		p_member gdextension.PackedArray[int32]
	}{pointers.Get(gd.InternalPacked[gd.PackedInt32Array, int32](p_member))}))
}

//go:nosplit
func (self class) GetResolveAttachments() Packed.Array[int32] { //gd:RDFramebufferPass.get_resolve_attachments
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_resolve_attachments, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Array[int32](Array.Through(gd.PackedProxy[gd.PackedInt32Array, int32]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetPreserveAttachments(p_member Packed.Array[int32]) { //gd:RDFramebufferPass.set_preserve_attachments
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_preserve_attachments, 0|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct {
		p_member gdextension.PackedArray[int32]
	}{pointers.Get(gd.InternalPacked[gd.PackedInt32Array, int32](p_member))}))
}

//go:nosplit
func (self class) GetPreserveAttachments() Packed.Array[int32] { //gd:RDFramebufferPass.get_preserve_attachments
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_preserve_attachments, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Array[int32](Array.Through(gd.PackedProxy[gd.PackedInt32Array, int32]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetDepthAttachment(p_member int64) { //gd:RDFramebufferPass.set_depth_attachment
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_depth_attachment, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member int64 }{p_member}))
}

//go:nosplit
func (self class) GetDepthAttachment() int64 { //gd:RDFramebufferPass.get_depth_attachment
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_depth_attachment, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsRDFramebufferPass() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsRDFramebufferPass() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsRDFramebufferPass() Instance { return self.Super().AsRDFramebufferPass() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("RDFramebufferPass", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

const AttachmentUnused = -1 //gd:RDFramebufferPass.ATTACHMENT_UNUSED
