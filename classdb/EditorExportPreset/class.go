// Code generated by the generate package DO NOT EDIT

// Package EditorExportPreset provides methods for working with EditorExportPreset object instances.
package EditorExportPreset

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Export preset configuration. Instances of [EditorExportPreset] by editor UI and intended to be used a read-only configuration passed to the [EditorExportPlatform] methods when exporting the project.
*/
type Instance [1]gdclass.EditorExportPreset

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	has                          gdextension.MethodForClass `hash:"2619796661"`
	get_files_to_export          gdextension.MethodForClass `hash:"1139954409"`
	get_customized_files         gdextension.MethodForClass `hash:"3102165223"`
	get_customized_files_count   gdextension.MethodForClass `hash:"3905245786"`
	has_export_file              gdextension.MethodForClass `hash:"2323990056"`
	get_file_export_mode         gdextension.MethodForClass `hash:"407825436"`
	get_preset_name              gdextension.MethodForClass `hash:"201670096"`
	is_runnable                  gdextension.MethodForClass `hash:"36873697"`
	are_advanced_options_enabled gdextension.MethodForClass `hash:"36873697"`
	is_dedicated_server          gdextension.MethodForClass `hash:"36873697"`
	get_export_filter            gdextension.MethodForClass `hash:"4227045696"`
	get_include_filter           gdextension.MethodForClass `hash:"201670096"`
	get_exclude_filter           gdextension.MethodForClass `hash:"201670096"`
	get_custom_features          gdextension.MethodForClass `hash:"201670096"`
	get_patches                  gdextension.MethodForClass `hash:"1139954409"`
	get_export_path              gdextension.MethodForClass `hash:"201670096"`
	get_encryption_in_filter     gdextension.MethodForClass `hash:"201670096"`
	get_encryption_ex_filter     gdextension.MethodForClass `hash:"201670096"`
	get_encrypt_pck              gdextension.MethodForClass `hash:"36873697"`
	get_encrypt_directory        gdextension.MethodForClass `hash:"36873697"`
	get_encryption_key           gdextension.MethodForClass `hash:"201670096"`
	get_script_export_mode       gdextension.MethodForClass `hash:"3905245786"`
	get_or_env                   gdextension.MethodForClass `hash:"389838787"`
	get_version                  gdextension.MethodForClass `hash:"1132184663"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("EditorExportPreset")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, true)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.EditorExportPreset

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsEditorExportPreset() Instance
}

/*
Returns [code]true[/code] if preset has specified property.
*/
func (self Instance) Has(property string) bool { //gd:EditorExportPreset.has
	return bool(Advanced(self).Has(String.Name(String.New(property))))
}

/*
Returns array of files to export.
*/
func (self Instance) GetFilesToExport() []string { //gd:EditorExportPreset.get_files_to_export
	return []string(Advanced(self).GetFilesToExport().Strings())
}

/*
Returns [Dictionary] of files selected in the "Resources" tab of the export dialog. Dictionary keys are file names and values are export mode - [code]"strip"[/code], [code]"keep"[/code], or [code]"remove"[/code]. See also [method get_file_export_mode].
*/
func (self Instance) GetCustomizedFiles() map[string]string { //gd:EditorExportPreset.get_customized_files
	return map[string]string(gd.DictionaryAs[map[string]string](Advanced(self).GetCustomizedFiles()))
}

/*
Returns number of files selected in the "Resources" tab of the export dialog.
*/
func (self Instance) GetCustomizedFilesCount() int { //gd:EditorExportPreset.get_customized_files_count
	return int(int(Advanced(self).GetCustomizedFilesCount()))
}

/*
Returns [code]true[/code] if specified file is exported.
*/
func (self Instance) HasExportFile(path string) bool { //gd:EditorExportPreset.has_export_file
	return bool(Advanced(self).HasExportFile(String.New(path)))
}

/*
Returns file export mode for the specified file.
*/
func (self Instance) GetFileExportMode(path string) FileExportMode { //gd:EditorExportPreset.get_file_export_mode
	return FileExportMode(Advanced(self).GetFileExportMode(String.New(path), 0))
}

/*
Returns file export mode for the specified file.
*/
func (self Expanded) GetFileExportMode(path string, def FileExportMode) FileExportMode { //gd:EditorExportPreset.get_file_export_mode
	return FileExportMode(Advanced(self).GetFileExportMode(String.New(path), def))
}

/*
Returns export preset name.
*/
func (self Instance) GetPresetName() string { //gd:EditorExportPreset.get_preset_name
	return string(Advanced(self).GetPresetName().String())
}

/*
Returns [code]true[/code] if "Runnable" toggle is enabled in the export dialog.
*/
func (self Instance) IsRunnable() bool { //gd:EditorExportPreset.is_runnable
	return bool(Advanced(self).IsRunnable())
}

/*
Returns [code]true[/code] if "Advanced" toggle is enabled in the export dialog.
*/
func (self Instance) AreAdvancedOptionsEnabled() bool { //gd:EditorExportPreset.are_advanced_options_enabled
	return bool(Advanced(self).AreAdvancedOptionsEnabled())
}

/*
Returns [code]true[/code] if dedicated server export mode is selected in the export dialog.
*/
func (self Instance) IsDedicatedServer() bool { //gd:EditorExportPreset.is_dedicated_server
	return bool(Advanced(self).IsDedicatedServer())
}

/*
Returns export file filter mode selected in the "Resources" tab of the export dialog.
*/
func (self Instance) GetExportFilter() ExportFilter { //gd:EditorExportPreset.get_export_filter
	return ExportFilter(Advanced(self).GetExportFilter())
}

/*
Returns file filters to include during export.
*/
func (self Instance) GetIncludeFilter() string { //gd:EditorExportPreset.get_include_filter
	return string(Advanced(self).GetIncludeFilter().String())
}

/*
Returns file filters to exclude during export.
*/
func (self Instance) GetExcludeFilter() string { //gd:EditorExportPreset.get_exclude_filter
	return string(Advanced(self).GetExcludeFilter().String())
}

/*
Returns string with a comma separated list of custom features.
*/
func (self Instance) GetCustomFeatures() string { //gd:EditorExportPreset.get_custom_features
	return string(Advanced(self).GetCustomFeatures().String())
}

/*
Returns the list of packs on which to base a patch export on.
*/
func (self Instance) GetPatches() []string { //gd:EditorExportPreset.get_patches
	return []string(Advanced(self).GetPatches().Strings())
}

/*
Returns export target path.
*/
func (self Instance) GetExportPath() string { //gd:EditorExportPreset.get_export_path
	return string(Advanced(self).GetExportPath().String())
}

/*
Returns file filters to include during PCK encryption.
*/
func (self Instance) GetEncryptionInFilter() string { //gd:EditorExportPreset.get_encryption_in_filter
	return string(Advanced(self).GetEncryptionInFilter().String())
}

/*
Returns file filters to exclude during PCK encryption.
*/
func (self Instance) GetEncryptionExFilter() string { //gd:EditorExportPreset.get_encryption_ex_filter
	return string(Advanced(self).GetEncryptionExFilter().String())
}

/*
Returns [code]true[/code], PCK encryption is enabled in the export dialog.
*/
func (self Instance) GetEncryptPck() bool { //gd:EditorExportPreset.get_encrypt_pck
	return bool(Advanced(self).GetEncryptPck())
}

/*
Returns [code]true[/code], PCK directory encryption is enabled in the export dialog.
*/
func (self Instance) GetEncryptDirectory() bool { //gd:EditorExportPreset.get_encrypt_directory
	return bool(Advanced(self).GetEncryptDirectory())
}

/*
Returns PCK encryption key.
*/
func (self Instance) GetEncryptionKey() string { //gd:EditorExportPreset.get_encryption_key
	return string(Advanced(self).GetEncryptionKey().String())
}

/*
Returns script export mode.
*/
func (self Instance) GetScriptExportMode() int { //gd:EditorExportPreset.get_script_export_mode
	return int(int(Advanced(self).GetScriptExportMode()))
}

/*
Returns export option value or value of environment variable if it is set.
*/
func (self Instance) GetOrEnv(name string, env_var string) any { //gd:EditorExportPreset.get_or_env
	return any(Advanced(self).GetOrEnv(String.Name(String.New(name)), String.New(env_var)).Interface())
}

/*
Returns the preset's version number, or fall back to the [member ProjectSettings.application/config/version] project setting if set to an empty string.
If [param windows_version] is [code]true[/code], formats the returned version number to be compatible with Windows executable metadata.
*/
func (self Instance) GetVersion(name string, windows_version bool) string { //gd:EditorExportPreset.get_version
	return string(Advanced(self).GetVersion(String.Name(String.New(name)), windows_version).String())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.EditorExportPreset

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.EditorExportPreset)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.EditorExportPreset)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.EditorExportPreset)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].InitRef()
	object[0].Notification(0, false)
	return casted
}

/*
Returns [code]true[/code] if preset has specified property.
*/
//go:nosplit
func (self class) Has(property String.Name) bool { //gd:EditorExportPreset.has
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.has, gdextension.SizeBool|(gdextension.SizeStringName<<4), unsafe.Pointer(&struct{ property gdextension.StringName }{pointers.Get(gd.InternalStringName(property))}))
	var ret = r_ret
	return ret
}

/*
Returns array of files to export.
*/
//go:nosplit
func (self class) GetFilesToExport() Packed.Strings { //gd:EditorExportPreset.get_files_to_export
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_files_to_export, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Strings(Array.Through(gd.PackedStringArrayProxy{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

/*
Returns [Dictionary] of files selected in the "Resources" tab of the export dialog. Dictionary keys are file names and values are export mode - [code]"strip"[/code], [code]"keep"[/code], or [code]"remove"[/code]. See also [method get_file_export_mode].
*/
//go:nosplit
func (self class) GetCustomizedFiles() Dictionary.Any { //gd:EditorExportPreset.get_customized_files
	var r_ret = gdextension.Call[gdextension.Dictionary](gd.ObjectChecked(self.AsObject()), methods.get_customized_files, gdextension.SizeDictionary, unsafe.Pointer(&struct{}{}))
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret)))
	return ret
}

/*
Returns number of files selected in the "Resources" tab of the export dialog.
*/
//go:nosplit
func (self class) GetCustomizedFilesCount() int64 { //gd:EditorExportPreset.get_customized_files_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_customized_files_count, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if specified file is exported.
*/
//go:nosplit
func (self class) HasExportFile(path String.Readable) bool { //gd:EditorExportPreset.has_export_file
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.has_export_file, gdextension.SizeBool|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ path gdextension.String }{pointers.Get(gd.InternalString(path))}))
	var ret = r_ret
	return ret
}

/*
Returns file export mode for the specified file.
*/
//go:nosplit
func (self class) GetFileExportMode(path String.Readable, def FileExportMode) FileExportMode { //gd:EditorExportPreset.get_file_export_mode
	var r_ret = gdextension.Call[FileExportMode](gd.ObjectChecked(self.AsObject()), methods.get_file_export_mode, gdextension.SizeInt|(gdextension.SizeString<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		path gdextension.String
		def  FileExportMode
	}{pointers.Get(gd.InternalString(path)), def}))
	var ret = r_ret
	return ret
}

/*
Returns export preset name.
*/
//go:nosplit
func (self class) GetPresetName() String.Readable { //gd:EditorExportPreset.get_preset_name
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_preset_name, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns [code]true[/code] if "Runnable" toggle is enabled in the export dialog.
*/
//go:nosplit
func (self class) IsRunnable() bool { //gd:EditorExportPreset.is_runnable
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_runnable, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if "Advanced" toggle is enabled in the export dialog.
*/
//go:nosplit
func (self class) AreAdvancedOptionsEnabled() bool { //gd:EditorExportPreset.are_advanced_options_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.are_advanced_options_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if dedicated server export mode is selected in the export dialog.
*/
//go:nosplit
func (self class) IsDedicatedServer() bool { //gd:EditorExportPreset.is_dedicated_server
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_dedicated_server, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns export file filter mode selected in the "Resources" tab of the export dialog.
*/
//go:nosplit
func (self class) GetExportFilter() ExportFilter { //gd:EditorExportPreset.get_export_filter
	var r_ret = gdextension.Call[ExportFilter](gd.ObjectChecked(self.AsObject()), methods.get_export_filter, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns file filters to include during export.
*/
//go:nosplit
func (self class) GetIncludeFilter() String.Readable { //gd:EditorExportPreset.get_include_filter
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_include_filter, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns file filters to exclude during export.
*/
//go:nosplit
func (self class) GetExcludeFilter() String.Readable { //gd:EditorExportPreset.get_exclude_filter
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_exclude_filter, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns string with a comma separated list of custom features.
*/
//go:nosplit
func (self class) GetCustomFeatures() String.Readable { //gd:EditorExportPreset.get_custom_features
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_custom_features, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns the list of packs on which to base a patch export on.
*/
//go:nosplit
func (self class) GetPatches() Packed.Strings { //gd:EditorExportPreset.get_patches
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_patches, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Strings(Array.Through(gd.PackedStringArrayProxy{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

/*
Returns export target path.
*/
//go:nosplit
func (self class) GetExportPath() String.Readable { //gd:EditorExportPreset.get_export_path
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_export_path, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns file filters to include during PCK encryption.
*/
//go:nosplit
func (self class) GetEncryptionInFilter() String.Readable { //gd:EditorExportPreset.get_encryption_in_filter
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_encryption_in_filter, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns file filters to exclude during PCK encryption.
*/
//go:nosplit
func (self class) GetEncryptionExFilter() String.Readable { //gd:EditorExportPreset.get_encryption_ex_filter
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_encryption_ex_filter, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns [code]true[/code], PCK encryption is enabled in the export dialog.
*/
//go:nosplit
func (self class) GetEncryptPck() bool { //gd:EditorExportPreset.get_encrypt_pck
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_encrypt_pck, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code], PCK directory encryption is enabled in the export dialog.
*/
//go:nosplit
func (self class) GetEncryptDirectory() bool { //gd:EditorExportPreset.get_encrypt_directory
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_encrypt_directory, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns PCK encryption key.
*/
//go:nosplit
func (self class) GetEncryptionKey() String.Readable { //gd:EditorExportPreset.get_encryption_key
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_encryption_key, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns script export mode.
*/
//go:nosplit
func (self class) GetScriptExportMode() int64 { //gd:EditorExportPreset.get_script_export_mode
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_script_export_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns export option value or value of environment variable if it is set.
*/
//go:nosplit
func (self class) GetOrEnv(name String.Name, env_var String.Readable) variant.Any { //gd:EditorExportPreset.get_or_env
	var r_ret = gdextension.Call[gdextension.Variant](gd.ObjectChecked(self.AsObject()), methods.get_or_env, gdextension.SizeVariant|(gdextension.SizeStringName<<4)|(gdextension.SizeString<<8), unsafe.Pointer(&struct {
		name    gdextension.StringName
		env_var gdextension.String
	}{pointers.Get(gd.InternalStringName(name)), pointers.Get(gd.InternalString(env_var))}))
	var ret = variant.Implementation(gd.VariantProxy{}, pointers.Pack(pointers.New[gd.Variant](r_ret)))
	return ret
}

/*
Returns the preset's version number, or fall back to the [member ProjectSettings.application/config/version] project setting if set to an empty string.
If [param windows_version] is [code]true[/code], formats the returned version number to be compatible with Windows executable metadata.
*/
//go:nosplit
func (self class) GetVersion(name String.Name, windows_version bool) String.Readable { //gd:EditorExportPreset.get_version
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_version, gdextension.SizeString|(gdextension.SizeStringName<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		name            gdextension.StringName
		windows_version bool
	}{pointers.Get(gd.InternalStringName(name)), windows_version}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}
func (self class) AsEditorExportPreset() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsEditorExportPreset() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsEditorExportPreset() Instance { return self.Super().AsEditorExportPreset() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("EditorExportPreset", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type ExportFilter int //gd:EditorExportPreset.ExportFilter

const (
	ExportAllResources       ExportFilter = 0
	ExportSelectedScenes     ExportFilter = 1
	ExportSelectedResources  ExportFilter = 2
	ExcludeSelectedResources ExportFilter = 3
	ExportCustomized         ExportFilter = 4
)

type FileExportMode int //gd:EditorExportPreset.FileExportMode

const (
	ModeFileNotCustomized FileExportMode = 0
	ModeFileStrip         FileExportMode = 1
	ModeFileKeep          FileExportMode = 2
	ModeFileRemove        FileExportMode = 3
)

type ScriptExportMode int //gd:EditorExportPreset.ScriptExportMode

const (
	ModeScriptText                   ScriptExportMode = 0
	ModeScriptBinaryTokens           ScriptExportMode = 1
	ModeScriptBinaryTokensCompressed ScriptExportMode = 2
)
