// Code generated by the generate package DO NOT EDIT

// Package Marshalls provides methods for working with Marshalls object instances.
package Marshalls

import "unsafe"
import "sync"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Provides data transformation and encoding utility functions.
*/
type Instance [1]gdclass.Marshalls

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	variant_to_base64 gdextension.MethodForClass `hash:"3876248563"`
	base64_to_variant gdextension.MethodForClass `hash:"218087648"`
	raw_to_base64     gdextension.MethodForClass `hash:"3999417757"`
	base64_to_raw     gdextension.MethodForClass `hash:"659035735"`
	utf8_to_base64    gdextension.MethodForClass `hash:"1703090593"`
	base64_to_utf8    gdextension.MethodForClass `hash:"1703090593"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("Marshalls")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

var self [1]gdclass.Marshalls
var once sync.Once

func singleton() {
	self[0] = pointers.Raw[gdclass.Marshalls]([3]uint64{uint64(gdextension.Host.Objects.Global(sname))})
}

/*
Returns a Base64-encoded string of the [Variant] [param variant]. If [param full_objects] is [code]true[/code], encoding objects is allowed (and can potentially include code).
Internally, this uses the same encoding mechanism as the [method @GlobalScope.var_to_bytes] method.
*/
func VariantToBase64(v any, full_objects bool) string { //gd:Marshalls.variant_to_base64
	once.Do(singleton)
	return string(Advanced().VariantToBase64(variant.New(v), full_objects).String())
}

/*
Returns a Base64-encoded string of the [Variant] [param variant]. If [param full_objects] is [code]true[/code], encoding objects is allowed (and can potentially include code).
Internally, this uses the same encoding mechanism as the [method @GlobalScope.var_to_bytes] method.
*/
func VariantToBase64Options(v any, full_objects bool) string { //gd:Marshalls.variant_to_base64
	once.Do(singleton)
	return string(Advanced().VariantToBase64(variant.New(v), full_objects).String())
}

/*
Returns a decoded [Variant] corresponding to the Base64-encoded string [param base64_str]. If [param allow_objects] is [code]true[/code], decoding objects is allowed.
Internally, this uses the same decoding mechanism as the [method @GlobalScope.bytes_to_var] method.
[b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
*/
func Base64ToVariant(base64_str string, allow_objects bool) any { //gd:Marshalls.base64_to_variant
	once.Do(singleton)
	return any(Advanced().Base64ToVariant(String.New(base64_str), allow_objects).Interface())
}

/*
Returns a decoded [Variant] corresponding to the Base64-encoded string [param base64_str]. If [param allow_objects] is [code]true[/code], decoding objects is allowed.
Internally, this uses the same decoding mechanism as the [method @GlobalScope.bytes_to_var] method.
[b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
*/
func Base64ToVariantOptions(base64_str string, allow_objects bool) any { //gd:Marshalls.base64_to_variant
	once.Do(singleton)
	return any(Advanced().Base64ToVariant(String.New(base64_str), allow_objects).Interface())
}

/*
Returns a Base64-encoded string of a given [PackedByteArray].
*/
func RawToBase64(array []byte) string { //gd:Marshalls.raw_to_base64
	once.Do(singleton)
	return string(Advanced().RawToBase64(Packed.Bytes(Packed.New(array...))).String())
}

/*
Returns a decoded [PackedByteArray] corresponding to the Base64-encoded string [param base64_str].
*/
func Base64ToRaw(base64_str string) []byte { //gd:Marshalls.base64_to_raw
	once.Do(singleton)
	return []byte(Advanced().Base64ToRaw(String.New(base64_str)).Bytes())
}

/*
Returns a Base64-encoded string of the UTF-8 string [param utf8_str].
*/
func Utf8ToBase64(utf8_str string) string { //gd:Marshalls.utf8_to_base64
	once.Do(singleton)
	return string(Advanced().Utf8ToBase64(String.New(utf8_str)).String())
}

/*
Returns a decoded string corresponding to the Base64-encoded string [param base64_str].
*/
func Base64ToUtf8(base64_str string) string { //gd:Marshalls.base64_to_utf8
	once.Do(singleton)
	return string(Advanced().Base64ToUtf8(String.New(base64_str)).String())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
func Advanced() class { once.Do(singleton); return self }

type class [1]gdclass.Marshalls

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.Marshalls](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.Marshalls](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }

/*
Returns a Base64-encoded string of the [Variant] [param variant]. If [param full_objects] is [code]true[/code], encoding objects is allowed (and can potentially include code).
Internally, this uses the same encoding mechanism as the [method @GlobalScope.var_to_bytes] method.
*/
//go:nosplit
func (self class) VariantToBase64(v variant.Any, full_objects bool) String.Readable { //gd:Marshalls.variant_to_base64
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.variant_to_base64, gdextension.SizeString|(gdextension.SizeVariant<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		v            gdextension.Variant
		full_objects bool
	}{gdextension.Variant(pointers.Get(gd.InternalVariant(v))), full_objects}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns a decoded [Variant] corresponding to the Base64-encoded string [param base64_str]. If [param allow_objects] is [code]true[/code], decoding objects is allowed.
Internally, this uses the same decoding mechanism as the [method @GlobalScope.bytes_to_var] method.
[b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
*/
//go:nosplit
func (self class) Base64ToVariant(base64_str String.Readable, allow_objects bool) variant.Any { //gd:Marshalls.base64_to_variant
	var r_ret = gdextension.Call[gdextension.Variant](gd.ObjectChecked(self.AsObject()), methods.base64_to_variant, gdextension.SizeVariant|(gdextension.SizeString<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		base64_str    gdextension.String
		allow_objects bool
	}{pointers.Get(gd.InternalString(base64_str)), allow_objects}))
	var ret = variant.Implementation(gd.VariantProxy{}, pointers.Pack(pointers.New[gd.Variant](r_ret)))
	return ret
}

/*
Returns a Base64-encoded string of a given [PackedByteArray].
*/
//go:nosplit
func (self class) RawToBase64(array Packed.Bytes) String.Readable { //gd:Marshalls.raw_to_base64
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.raw_to_base64, gdextension.SizeString|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ array gdextension.PackedArray[byte] }{pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](array)))}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns a decoded [PackedByteArray] corresponding to the Base64-encoded string [param base64_str].
*/
//go:nosplit
func (self class) Base64ToRaw(base64_str String.Readable) Packed.Bytes { //gd:Marshalls.base64_to_raw
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.base64_to_raw, gdextension.SizePackedArray|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ base64_str gdextension.String }{pointers.Get(gd.InternalString(base64_str))}))
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret))))
	return ret
}

/*
Returns a Base64-encoded string of the UTF-8 string [param utf8_str].
*/
//go:nosplit
func (self class) Utf8ToBase64(utf8_str String.Readable) String.Readable { //gd:Marshalls.utf8_to_base64
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.utf8_to_base64, gdextension.SizeString|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ utf8_str gdextension.String }{pointers.Get(gd.InternalString(utf8_str))}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns a decoded string corresponding to the Base64-encoded string [param base64_str].
*/
//go:nosplit
func (self class) Base64ToUtf8(base64_str String.Readable) String.Readable { //gd:Marshalls.base64_to_utf8
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.base64_to_utf8, gdextension.SizeString|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ base64_str gdextension.String }{pointers.Get(gd.InternalString(base64_str))}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}
func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Object.Advanced(self.AsObject()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Object.Instance(self.AsObject()), name)
	}
}
func init() {
	gdclass.Register("Marshalls", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.Marshalls](ptr)} })
}
