// Code generated by the generate package DO NOT EDIT

// Package GLTFTextureSampler provides methods for working with GLTFTextureSampler object instances.
package GLTFTextureSampler

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Represents a texture sampler as defined by the base glTF spec. Texture samplers in glTF specify how to sample data from the texture's base image, when rendering the texture on an object.
*/
type Instance [1]gdclass.GLTFTextureSampler

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_mag_filter gdextension.MethodForClass `hash:"3905245786"`
	set_mag_filter gdextension.MethodForClass `hash:"1286410249"`
	get_min_filter gdextension.MethodForClass `hash:"3905245786"`
	set_min_filter gdextension.MethodForClass `hash:"1286410249"`
	get_wrap_s     gdextension.MethodForClass `hash:"3905245786"`
	set_wrap_s     gdextension.MethodForClass `hash:"1286410249"`
	get_wrap_t     gdextension.MethodForClass `hash:"3905245786"`
	set_wrap_t     gdextension.MethodForClass `hash:"1286410249"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("GLTFTextureSampler")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsGLTFTextureSampler() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.GLTFTextureSampler

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.GLTFTextureSampler](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.GLTFTextureSampler](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.GLTFTextureSampler{pointers.Add[gdclass.GLTFTextureSampler]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.GLTFTextureSampler{pointers.New[gdclass.GLTFTextureSampler]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) MagFilter() int {
	return int(int(class(self).GetMagFilter()))
}

func (self Instance) SetMagFilter(value int) {
	class(self).SetMagFilter(int64(value))
}

func (self Instance) MinFilter() int {
	return int(int(class(self).GetMinFilter()))
}

func (self Instance) SetMinFilter(value int) {
	class(self).SetMinFilter(int64(value))
}

func (self Instance) WrapS() int {
	return int(int(class(self).GetWrapS()))
}

func (self Instance) SetWrapS(value int) {
	class(self).SetWrapS(int64(value))
}

func (self Instance) WrapT() int {
	return int(int(class(self).GetWrapT()))
}

func (self Instance) SetWrapT(value int) {
	class(self).SetWrapT(int64(value))
}

//go:nosplit
func (self class) GetMagFilter() int64 { //gd:GLTFTextureSampler.get_mag_filter
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_mag_filter, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMagFilter(filter_mode int64) { //gd:GLTFTextureSampler.set_mag_filter
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_mag_filter, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ filter_mode int64 }{filter_mode}))
}

//go:nosplit
func (self class) GetMinFilter() int64 { //gd:GLTFTextureSampler.get_min_filter
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_min_filter, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMinFilter(filter_mode int64) { //gd:GLTFTextureSampler.set_min_filter
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_min_filter, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ filter_mode int64 }{filter_mode}))
}

//go:nosplit
func (self class) GetWrapS() int64 { //gd:GLTFTextureSampler.get_wrap_s
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_wrap_s, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWrapS(wrap_mode int64) { //gd:GLTFTextureSampler.set_wrap_s
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_wrap_s, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ wrap_mode int64 }{wrap_mode}))
}

//go:nosplit
func (self class) GetWrapT() int64 { //gd:GLTFTextureSampler.get_wrap_t
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_wrap_t, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWrapT(wrap_mode int64) { //gd:GLTFTextureSampler.set_wrap_t
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_wrap_t, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ wrap_mode int64 }{wrap_mode}))
}
func (self class) AsGLTFTextureSampler() Advanced {
	return Advanced{pointers.AsA[gdclass.GLTFTextureSampler](self[0])}
}
func (self Instance) AsGLTFTextureSampler() Instance {
	return Instance{pointers.AsA[gdclass.GLTFTextureSampler](self[0])}
}
func (self *Extension[T]) AsGLTFTextureSampler() Instance { return self.Super().AsGLTFTextureSampler() }
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("GLTFTextureSampler", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.GLTFTextureSampler](ptr)} })
}
