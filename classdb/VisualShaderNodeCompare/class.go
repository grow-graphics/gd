// Code generated by the generate package DO NOT EDIT

// Package VisualShaderNodeCompare provides methods for working with VisualShaderNodeCompare object instances.
package VisualShaderNodeCompare

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/VisualShaderNode"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Compares [code]a[/code] and [code]b[/code] of [member type] by [member function]. Returns a boolean scalar. Translates to [code]if[/code] instruction in shader code.
*/
type Instance [1]gdclass.VisualShaderNodeCompare

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsVisualShaderNodeCompare() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.VisualShaderNodeCompare

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("VisualShaderNodeCompare"))
	casted := Instance{*(*gdclass.VisualShaderNodeCompare)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) Type() ComparisonType {
	return ComparisonType(class(self).GetComparisonType())
}

func (self Instance) SetType(value ComparisonType) {
	class(self).SetComparisonType(value)
}

func (self Instance) Function() Function {
	return Function(class(self).GetFunction())
}

func (self Instance) SetFunction(value Function) {
	class(self).SetFunction(value)
}

func (self Instance) Condition() Condition {
	return Condition(class(self).GetCondition())
}

func (self Instance) SetCondition(value Condition) {
	class(self).SetCondition(value)
}

//go:nosplit
func (self class) SetComparisonType(atype ComparisonType) { //gd:VisualShaderNodeCompare.set_comparison_type
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeCompare.Bind_set_comparison_type), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ atype ComparisonType }{atype}))
}

//go:nosplit
func (self class) GetComparisonType() ComparisonType { //gd:VisualShaderNodeCompare.get_comparison_type
	var r_ret = gdextension.Call[ComparisonType](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeCompare.Bind_get_comparison_type), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFunction(fn Function) { //gd:VisualShaderNodeCompare.set_function
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeCompare.Bind_set_function), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ fn Function }{fn}))
}

//go:nosplit
func (self class) GetFunction() Function { //gd:VisualShaderNodeCompare.get_function
	var r_ret = gdextension.Call[Function](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeCompare.Bind_get_function), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCondition(condition Condition) { //gd:VisualShaderNodeCompare.set_condition
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeCompare.Bind_set_condition), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ condition Condition }{condition}))
}

//go:nosplit
func (self class) GetCondition() Condition { //gd:VisualShaderNodeCompare.get_condition
	var r_ret = gdextension.Call[Condition](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeCompare.Bind_get_condition), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsVisualShaderNodeCompare() Advanced { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsVisualShaderNodeCompare() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisualShaderNodeCompare() Instance {
	return self.Super().AsVisualShaderNodeCompare()
}
func (self class) AsVisualShaderNode() VisualShaderNode.Advanced {
	return *((*VisualShaderNode.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisualShaderNode() VisualShaderNode.Instance {
	return self.Super().AsVisualShaderNode()
}
func (self Instance) AsVisualShaderNode() VisualShaderNode.Instance {
	return *((*VisualShaderNode.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualShaderNode.Advanced(self.AsVisualShaderNode()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualShaderNode.Instance(self.AsVisualShaderNode()), name)
	}
}
func init() {
	gdclass.Register("VisualShaderNodeCompare", func(ptr gd.Object) any {
		return [1]gdclass.VisualShaderNodeCompare{*(*gdclass.VisualShaderNodeCompare)(unsafe.Pointer(&ptr))}
	})
}

type ComparisonType int //gd:VisualShaderNodeCompare.ComparisonType

const (
	/*A floating-point scalar.*/
	CtypeScalar ComparisonType = 0
	/*An integer scalar.*/
	CtypeScalarInt ComparisonType = 1
	/*An unsigned integer scalar.*/
	CtypeScalarUint ComparisonType = 2
	/*A 2D vector type.*/
	CtypeVector2d ComparisonType = 3
	/*A 3D vector type.*/
	CtypeVector3d ComparisonType = 4
	/*A 4D vector type.*/
	CtypeVector4d ComparisonType = 5
	/*A boolean type.*/
	CtypeBoolean ComparisonType = 6
	/*A transform ([code]mat4[/code]) type.*/
	CtypeTransform ComparisonType = 7
	/*Represents the size of the [enum ComparisonType] enum.*/
	CtypeMax ComparisonType = 8
)

type Function int //gd:VisualShaderNodeCompare.Function

const (
	/*Comparison for equality ([code]a == b[/code]).*/
	FuncEqual Function = 0
	/*Comparison for inequality ([code]a != b[/code]).*/
	FuncNotEqual Function = 1
	/*Comparison for greater than ([code]a > b[/code]). Cannot be used if [member type] set to [constant CTYPE_BOOLEAN] or [constant CTYPE_TRANSFORM].*/
	FuncGreaterThan Function = 2
	/*Comparison for greater than or equal ([code]a >= b[/code]). Cannot be used if [member type] set to [constant CTYPE_BOOLEAN] or [constant CTYPE_TRANSFORM].*/
	FuncGreaterThanEqual Function = 3
	/*Comparison for less than ([code]a < b[/code]). Cannot be used if [member type] set to [constant CTYPE_BOOLEAN] or [constant CTYPE_TRANSFORM].*/
	FuncLessThan Function = 4
	/*Comparison for less than or equal ([code]a <= b[/code]). Cannot be used if [member type] set to [constant CTYPE_BOOLEAN] or [constant CTYPE_TRANSFORM].*/
	FuncLessThanEqual Function = 5
	/*Represents the size of the [enum Function] enum.*/
	FuncMax Function = 6
)

type Condition int //gd:VisualShaderNodeCompare.Condition

const (
	/*The result will be [code]true[/code] if all components in the vector satisfy the comparison condition.*/
	CondAll Condition = 0
	/*The result will be [code]true[/code] if any component in the vector satisfies the comparison condition.*/
	CondAny Condition = 1
	/*Represents the size of the [enum Condition] enum.*/
	CondMax Condition = 2
)
