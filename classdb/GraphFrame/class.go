// Code generated by the generate package DO NOT EDIT

// Package GraphFrame provides methods for working with GraphFrame object instances.
package GraphFrame

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Container"
import "graphics.gd/classdb/Control"
import "graphics.gd/classdb/GraphElement"
import "graphics.gd/classdb/HBoxContainer"
import "graphics.gd/classdb/Node"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
GraphFrame is a special [GraphElement] to which other [GraphElement]s can be attached. It can be configured to automatically resize to enclose all attached [GraphElement]s. If the frame is moved, all the attached [GraphElement]s inside it will be moved as well.
A GraphFrame is always kept behind the connection layer and other [GraphElement]s inside a [GraphEdit].
*/
type Instance [1]gdclass.GraphFrame

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsGraphFrame() Instance
}

/*
Returns the [HBoxContainer] used for the title bar, only containing a [Label] for displaying the title by default.
This can be used to add custom controls to the title bar such as option or close buttons.
*/
func (self Instance) GetTitlebarHbox() HBoxContainer.Instance { //gd:GraphFrame.get_titlebar_hbox
	return HBoxContainer.Instance(Advanced(self).GetTitlebarHbox())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.GraphFrame

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("GraphFrame"))
	casted := Instance{*(*gdclass.GraphFrame)(unsafe.Pointer(&object))}
	return casted
}

func (self Instance) Title() string {
	return string(class(self).GetTitle().String())
}

func (self Instance) SetTitle(value string) {
	class(self).SetTitle(String.New(value))
}

func (self Instance) AutoshrinkEnabled() bool {
	return bool(class(self).IsAutoshrinkEnabled())
}

func (self Instance) SetAutoshrinkEnabled(value bool) {
	class(self).SetAutoshrinkEnabled(value)
}

func (self Instance) AutoshrinkMargin() int {
	return int(int(class(self).GetAutoshrinkMargin()))
}

func (self Instance) SetAutoshrinkMargin(value int) {
	class(self).SetAutoshrinkMargin(int64(value))
}

func (self Instance) DragMargin() int {
	return int(int(class(self).GetDragMargin()))
}

func (self Instance) SetDragMargin(value int) {
	class(self).SetDragMargin(int64(value))
}

func (self Instance) TintColorEnabled() bool {
	return bool(class(self).IsTintColorEnabled())
}

func (self Instance) SetTintColorEnabled(value bool) {
	class(self).SetTintColorEnabled(value)
}

func (self Instance) TintColor() Color.RGBA {
	return Color.RGBA(class(self).GetTintColor())
}

func (self Instance) SetTintColor(value Color.RGBA) {
	class(self).SetTintColor(Color.RGBA(value))
}

//go:nosplit
func (self class) SetTitle(title String.Readable) { //gd:GraphFrame.set_title
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GraphFrame.Bind_set_title, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ title gdextension.String }{gdextension.String(pointers.Get(gd.InternalString(title))[0])}))
}

//go:nosplit
func (self class) GetTitle() String.Readable { //gd:GraphFrame.get_title
	var r_ret = gdunsafe.Call[[1]gd.EnginePointer](self.AsObject(), gd.Global.Methods.GraphFrame.Bind_get_title, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns the [HBoxContainer] used for the title bar, only containing a [Label] for displaying the title by default.
This can be used to add custom controls to the title bar such as option or close buttons.
*/
//go:nosplit
func (self class) GetTitlebarHbox() [1]gdclass.HBoxContainer { //gd:GraphFrame.get_titlebar_hbox
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.GraphFrame.Bind_get_titlebar_hbox, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.HBoxContainer{gd.PointerLifetimeBoundTo[gdclass.HBoxContainer](self.AsObject(), r_ret)}
	return ret
}

//go:nosplit
func (self class) SetAutoshrinkEnabled(shrink bool) { //gd:GraphFrame.set_autoshrink_enabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GraphFrame.Bind_set_autoshrink_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ shrink bool }{shrink}))
}

//go:nosplit
func (self class) IsAutoshrinkEnabled() bool { //gd:GraphFrame.is_autoshrink_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.GraphFrame.Bind_is_autoshrink_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAutoshrinkMargin(autoshrink_margin int64) { //gd:GraphFrame.set_autoshrink_margin
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GraphFrame.Bind_set_autoshrink_margin, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ autoshrink_margin int64 }{autoshrink_margin}))
}

//go:nosplit
func (self class) GetAutoshrinkMargin() int64 { //gd:GraphFrame.get_autoshrink_margin
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.GraphFrame.Bind_get_autoshrink_margin, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDragMargin(drag_margin int64) { //gd:GraphFrame.set_drag_margin
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GraphFrame.Bind_set_drag_margin, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ drag_margin int64 }{drag_margin}))
}

//go:nosplit
func (self class) GetDragMargin() int64 { //gd:GraphFrame.get_drag_margin
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.GraphFrame.Bind_get_drag_margin, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTintColorEnabled(enable bool) { //gd:GraphFrame.set_tint_color_enabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GraphFrame.Bind_set_tint_color_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) IsTintColorEnabled() bool { //gd:GraphFrame.is_tint_color_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.GraphFrame.Bind_is_tint_color_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTintColor(color Color.RGBA) { //gd:GraphFrame.set_tint_color
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GraphFrame.Bind_set_tint_color, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

//go:nosplit
func (self class) GetTintColor() Color.RGBA { //gd:GraphFrame.get_tint_color
	var r_ret = gdunsafe.Call[Color.RGBA](self.AsObject(), gd.Global.Methods.GraphFrame.Bind_get_tint_color, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self Instance) OnAutoshrinkChanged(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("autoshrink_changed"), gd.NewCallable(cb), 0)
}

func (self class) AsGraphFrame() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsGraphFrame() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsGraphFrame() Instance { return self.Super().AsGraphFrame() }
func (self class) AsGraphElement() GraphElement.Advanced {
	return *((*GraphElement.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsGraphElement() GraphElement.Instance {
	return self.Super().AsGraphElement()
}
func (self Instance) AsGraphElement() GraphElement.Instance {
	return *((*GraphElement.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsContainer() Container.Advanced {
	return *((*Container.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsContainer() Container.Instance { return self.Super().AsContainer() }
func (self Instance) AsContainer() Container.Instance {
	return *((*Container.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsControl() Control.Advanced         { return *((*Control.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsControl() Control.Instance { return self.Super().AsControl() }
func (self Instance) AsControl() Control.Instance {
	return *((*Control.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return *((*CanvasItem.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return *((*CanvasItem.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(GraphElement.Advanced(self.AsGraphElement()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(GraphElement.Instance(self.AsGraphElement()), name)
	}
}
func init() {
	gdclass.Register("GraphFrame", func(ptr gd.Object) any { return [1]gdclass.GraphFrame{*(*gdclass.GraphFrame)(unsafe.Pointer(&ptr))} })
}
