// Code generated by the generate package DO NOT EDIT

// Package HingeJoint3D provides methods for working with HingeJoint3D object instances.
package HingeJoint3D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/classdb/Joint3D"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A physics joint that restricts the rotation of a 3D physics body around an axis relative to another physics body. For example, Body A can be a [StaticBody3D] representing a door hinge that a [RigidBody3D] rotates around.
*/
type Instance [1]gdclass.HingeJoint3D

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsHingeJoint3D() Instance
}

/*
Sets the value of the specified parameter.
*/
func (self Instance) SetParam(param Param, value Float.X) { //gd:HingeJoint3D.set_param
	Advanced(self).SetParam(param, float64(value))
}

/*
Returns the value of the specified parameter.
*/
func (self Instance) GetParam(param Param) Float.X { //gd:HingeJoint3D.get_param
	return Float.X(Float.X(Advanced(self).GetParam(param)))
}

/*
If [code]true[/code], enables the specified flag.
*/
func (self Instance) SetFlag(flag Flag, enabled bool) { //gd:HingeJoint3D.set_flag
	Advanced(self).SetFlag(flag, enabled)
}

/*
Returns the value of the specified flag.
*/
func (self Instance) GetFlag(flag Flag) bool { //gd:HingeJoint3D.get_flag
	return bool(Advanced(self).GetFlag(flag))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.HingeJoint3D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("HingeJoint3D"))
	casted := Instance{*(*gdclass.HingeJoint3D)(unsafe.Pointer(&object))}
	return casted
}

/*
Sets the value of the specified parameter.
*/
//go:nosplit
func (self class) SetParam(param Param, value float64) { //gd:HingeJoint3D.set_param
	var frame = callframe.New()
	callframe.Arg(frame, param)
	callframe.Arg(frame, value)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.HingeJoint3D.Bind_set_param, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the value of the specified parameter.
*/
//go:nosplit
func (self class) GetParam(param Param) float64 { //gd:HingeJoint3D.get_param
	var frame = callframe.New()
	callframe.Arg(frame, param)
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.HingeJoint3D.Bind_get_param, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
If [code]true[/code], enables the specified flag.
*/
//go:nosplit
func (self class) SetFlag(flag Flag, enabled bool) { //gd:HingeJoint3D.set_flag
	var frame = callframe.New()
	callframe.Arg(frame, flag)
	callframe.Arg(frame, enabled)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.HingeJoint3D.Bind_set_flag, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the value of the specified flag.
*/
//go:nosplit
func (self class) GetFlag(flag Flag) bool { //gd:HingeJoint3D.get_flag
	var frame = callframe.New()
	callframe.Arg(frame, flag)
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.HingeJoint3D.Bind_get_flag, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}
func (self class) AsHingeJoint3D() Advanced            { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsHingeJoint3D() Instance         { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsHingeJoint3D() Instance    { return self.Super().AsHingeJoint3D() }
func (self class) AsJoint3D() Joint3D.Advanced         { return *((*Joint3D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsJoint3D() Joint3D.Instance { return self.Super().AsJoint3D() }
func (self Instance) AsJoint3D() Joint3D.Instance {
	return *((*Joint3D.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode3D() Node3D.Advanced         { return *((*Node3D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode3D() Node3D.Instance { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance      { return *((*Node3D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsNode() Node.Advanced             { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance     { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance          { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Joint3D.Advanced(self.AsJoint3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Joint3D.Instance(self.AsJoint3D()), name)
	}
}
func init() {
	gdclass.Register("HingeJoint3D", func(ptr gd.Object) any {
		return [1]gdclass.HingeJoint3D{*(*gdclass.HingeJoint3D)(unsafe.Pointer(&ptr))}
	})
}

type Param int //gd:HingeJoint3D.Param

const (
	/*The speed with which the two bodies get pulled together when they move in different directions.*/
	ParamBias Param = 0
	/*The maximum rotation. Only active if [member angular_limit/enable] is [code]true[/code].*/
	ParamLimitUpper Param = 1
	/*The minimum rotation. Only active if [member angular_limit/enable] is [code]true[/code].*/
	ParamLimitLower Param = 2
	/*The speed with which the rotation across the axis perpendicular to the hinge gets corrected.*/
	ParamLimitBias     Param = 3
	ParamLimitSoftness Param = 4
	/*The lower this value, the more the rotation gets slowed down.*/
	ParamLimitRelaxation Param = 5
	/*Target speed for the motor.*/
	ParamMotorTargetVelocity Param = 6
	/*Maximum acceleration for the motor.*/
	ParamMotorMaxImpulse Param = 7
	/*Represents the size of the [enum Param] enum.*/
	ParamMax Param = 8
)

type Flag int //gd:HingeJoint3D.Flag

const (
	/*If [code]true[/code], the hinges maximum and minimum rotation, defined by [member angular_limit/lower] and [member angular_limit/upper] has effects.*/
	FlagUseLimit Flag = 0
	/*When activated, a motor turns the hinge.*/
	FlagEnableMotor Flag = 1
	/*Represents the size of the [enum Flag] enum.*/
	FlagMax Flag = 2
)
