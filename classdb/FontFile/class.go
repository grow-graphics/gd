// Code generated by the generate package DO NOT EDIT

// Package FontFile provides methods for working with FontFile object instances.
package FontFile

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Font"
import "graphics.gd/classdb/Image"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/TextServer"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/Rect2"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Transform2D"
import "graphics.gd/variant/Vector2"
import "graphics.gd/variant/Vector2i"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[FontFile] contains a set of glyphs to represent Unicode characters imported from a font file, as well as a cache of rasterized glyphs, and a set of fallback [Font]s to use.
Use [FontVariation] to access specific OpenType variation of the font, create simulated bold / slanted version, and draw lines of text.
For more complex text processing, use [FontVariation] in conjunction with [TextLine] or [TextParagraph].
Supported font formats:
- Dynamic font importer: TrueType (.ttf), TrueType collection (.ttc), OpenType (.otf), OpenType collection (.otc), WOFF (.woff), WOFF2 (.woff2), Type 1 (.pfb, .pfm).
- Bitmap font importer: AngelCode BMFont (.fnt, .font), text and binary (version 3) format variants.
- Monospace image font importer: All supported image formats.
[b]Note:[/b] A character is a symbol that represents an item (letter, digit etc.) in an abstract way.
[b]Note:[/b] A glyph is a bitmap or a shape used to draw one or more characters in a context-dependent manner. Glyph indices are bound to the specific font data source.
[b]Note:[/b] If none of the font data sources contain glyphs for a character used in a string, the character in question will be replaced with a box displaying its hexadecimal code.
[codeblocks]
[gdscript]
var f = load("res://BarlowCondensed-Bold.ttf")
$Label.add_theme_font_override("font", f)
$Label.add_theme_font_size_override("font_size", 64)
[/gdscript]
[csharp]
var f = ResourceLoader.Load<FontFile>("res://BarlowCondensed-Bold.ttf");
GetNode("Label").AddThemeFontOverride("font", f);
GetNode("Label").AddThemeFontSizeOverride("font_size", 64);
[/csharp]
[/codeblocks]
*/
type Instance [1]gdclass.FontFile

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	load_bitmap_font                       gdextension.MethodForClass `hash:"166001499"`
	load_dynamic_font                      gdextension.MethodForClass `hash:"166001499"`
	set_data                               gdextension.MethodForClass `hash:"2971499966"`
	get_data                               gdextension.MethodForClass `hash:"2362200018"`
	set_font_name                          gdextension.MethodForClass `hash:"83702148"`
	set_font_style_name                    gdextension.MethodForClass `hash:"83702148"`
	set_font_style                         gdextension.MethodForClass `hash:"918070724"`
	set_font_weight                        gdextension.MethodForClass `hash:"1286410249"`
	set_font_stretch                       gdextension.MethodForClass `hash:"1286410249"`
	set_antialiasing                       gdextension.MethodForClass `hash:"1669900"`
	get_antialiasing                       gdextension.MethodForClass `hash:"4262718649"`
	set_disable_embedded_bitmaps           gdextension.MethodForClass `hash:"2586408642"`
	get_disable_embedded_bitmaps           gdextension.MethodForClass `hash:"36873697"`
	set_generate_mipmaps                   gdextension.MethodForClass `hash:"2586408642"`
	get_generate_mipmaps                   gdextension.MethodForClass `hash:"36873697"`
	set_multichannel_signed_distance_field gdextension.MethodForClass `hash:"2586408642"`
	is_multichannel_signed_distance_field  gdextension.MethodForClass `hash:"36873697"`
	set_msdf_pixel_range                   gdextension.MethodForClass `hash:"1286410249"`
	get_msdf_pixel_range                   gdextension.MethodForClass `hash:"3905245786"`
	set_msdf_size                          gdextension.MethodForClass `hash:"1286410249"`
	get_msdf_size                          gdextension.MethodForClass `hash:"3905245786"`
	set_fixed_size                         gdextension.MethodForClass `hash:"1286410249"`
	get_fixed_size                         gdextension.MethodForClass `hash:"3905245786"`
	set_fixed_size_scale_mode              gdextension.MethodForClass `hash:"1660989956"`
	get_fixed_size_scale_mode              gdextension.MethodForClass `hash:"753873478"`
	set_allow_system_fallback              gdextension.MethodForClass `hash:"2586408642"`
	is_allow_system_fallback               gdextension.MethodForClass `hash:"36873697"`
	set_force_autohinter                   gdextension.MethodForClass `hash:"2586408642"`
	is_force_autohinter                    gdextension.MethodForClass `hash:"36873697"`
	set_hinting                            gdextension.MethodForClass `hash:"1827459492"`
	get_hinting                            gdextension.MethodForClass `hash:"3683214614"`
	set_subpixel_positioning               gdextension.MethodForClass `hash:"4225742182"`
	get_subpixel_positioning               gdextension.MethodForClass `hash:"1069238588"`
	set_keep_rounding_remainders           gdextension.MethodForClass `hash:"2586408642"`
	get_keep_rounding_remainders           gdextension.MethodForClass `hash:"36873697"`
	set_oversampling                       gdextension.MethodForClass `hash:"373806689"`
	get_oversampling                       gdextension.MethodForClass `hash:"1740695150"`
	get_cache_count                        gdextension.MethodForClass `hash:"3905245786"`
	clear_cache                            gdextension.MethodForClass `hash:"3218959716"`
	remove_cache                           gdextension.MethodForClass `hash:"1286410249"`
	get_size_cache_list                    gdextension.MethodForClass `hash:"663333327"`
	clear_size_cache                       gdextension.MethodForClass `hash:"1286410249"`
	remove_size_cache                      gdextension.MethodForClass `hash:"2311374912"`
	set_variation_coordinates              gdextension.MethodForClass `hash:"64545446"`
	get_variation_coordinates              gdextension.MethodForClass `hash:"3485342025"`
	set_embolden                           gdextension.MethodForClass `hash:"1602489585"`
	get_embolden                           gdextension.MethodForClass `hash:"2339986948"`
	set_transform                          gdextension.MethodForClass `hash:"30160968"`
	get_transform                          gdextension.MethodForClass `hash:"3836996910"`
	set_extra_spacing                      gdextension.MethodForClass `hash:"62942285"`
	get_extra_spacing                      gdextension.MethodForClass `hash:"1924257185"`
	set_extra_baseline_offset              gdextension.MethodForClass `hash:"1602489585"`
	get_extra_baseline_offset              gdextension.MethodForClass `hash:"2339986948"`
	set_face_index                         gdextension.MethodForClass `hash:"3937882851"`
	get_face_index                         gdextension.MethodForClass `hash:"923996154"`
	set_cache_ascent                       gdextension.MethodForClass `hash:"3506521499"`
	get_cache_ascent                       gdextension.MethodForClass `hash:"3085491603"`
	set_cache_descent                      gdextension.MethodForClass `hash:"3506521499"`
	get_cache_descent                      gdextension.MethodForClass `hash:"3085491603"`
	set_cache_underline_position           gdextension.MethodForClass `hash:"3506521499"`
	get_cache_underline_position           gdextension.MethodForClass `hash:"3085491603"`
	set_cache_underline_thickness          gdextension.MethodForClass `hash:"3506521499"`
	get_cache_underline_thickness          gdextension.MethodForClass `hash:"3085491603"`
	set_cache_scale                        gdextension.MethodForClass `hash:"3506521499"`
	get_cache_scale                        gdextension.MethodForClass `hash:"3085491603"`
	get_texture_count                      gdextension.MethodForClass `hash:"1987661582"`
	clear_textures                         gdextension.MethodForClass `hash:"2311374912"`
	remove_texture                         gdextension.MethodForClass `hash:"2328951467"`
	set_texture_image                      gdextension.MethodForClass `hash:"4157974066"`
	get_texture_image                      gdextension.MethodForClass `hash:"3878418953"`
	set_texture_offsets                    gdextension.MethodForClass `hash:"2849993437"`
	get_texture_offsets                    gdextension.MethodForClass `hash:"3703444828"`
	get_glyph_list                         gdextension.MethodForClass `hash:"681709689"`
	clear_glyphs                           gdextension.MethodForClass `hash:"2311374912"`
	remove_glyph                           gdextension.MethodForClass `hash:"2328951467"`
	set_glyph_advance                      gdextension.MethodForClass `hash:"947991729"`
	get_glyph_advance                      gdextension.MethodForClass `hash:"1601573536"`
	set_glyph_offset                       gdextension.MethodForClass `hash:"921719850"`
	get_glyph_offset                       gdextension.MethodForClass `hash:"3205412300"`
	set_glyph_size                         gdextension.MethodForClass `hash:"921719850"`
	get_glyph_size                         gdextension.MethodForClass `hash:"3205412300"`
	set_glyph_uv_rect                      gdextension.MethodForClass `hash:"3821620992"`
	get_glyph_uv_rect                      gdextension.MethodForClass `hash:"3927917900"`
	set_glyph_texture_idx                  gdextension.MethodForClass `hash:"355564111"`
	get_glyph_texture_idx                  gdextension.MethodForClass `hash:"1629411054"`
	get_kerning_list                       gdextension.MethodForClass `hash:"2345056839"`
	clear_kerning_map                      gdextension.MethodForClass `hash:"3937882851"`
	remove_kerning                         gdextension.MethodForClass `hash:"3930204747"`
	set_kerning                            gdextension.MethodForClass `hash:"3182200918"`
	get_kerning                            gdextension.MethodForClass `hash:"1611912865"`
	render_range                           gdextension.MethodForClass `hash:"355564111"`
	render_glyph                           gdextension.MethodForClass `hash:"2328951467"`
	set_language_support_override          gdextension.MethodForClass `hash:"2678287736"`
	get_language_support_override          gdextension.MethodForClass `hash:"3927539163"`
	remove_language_support_override       gdextension.MethodForClass `hash:"83702148"`
	get_language_support_overrides         gdextension.MethodForClass `hash:"1139954409"`
	set_script_support_override            gdextension.MethodForClass `hash:"2678287736"`
	get_script_support_override            gdextension.MethodForClass `hash:"3927539163"`
	remove_script_support_override         gdextension.MethodForClass `hash:"83702148"`
	get_script_support_overrides           gdextension.MethodForClass `hash:"1139954409"`
	set_opentype_feature_overrides         gdextension.MethodForClass `hash:"4155329257"`
	get_opentype_feature_overrides         gdextension.MethodForClass `hash:"3102165223"`
	get_glyph_index                        gdextension.MethodForClass `hash:"864943070"`
	get_char_from_glyph_index              gdextension.MethodForClass `hash:"3175239445"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("FontFile")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsFontFile() Instance
}

/*
Loads an AngelCode BMFont (.fnt, .font) bitmap font from file [param path].
[b]Warning:[/b] This method should only be used in the editor or in cases when you need to load external fonts at run-time, such as fonts located at the [code]user://[/code] directory.
*/
func (self Instance) LoadBitmapFont(path string) error { //gd:FontFile.load_bitmap_font
	return error(gd.ToError(Advanced(self).LoadBitmapFont(String.New(path))))
}

/*
Loads a TrueType (.ttf), OpenType (.otf), WOFF (.woff), WOFF2 (.woff2) or Type 1 (.pfb, .pfm) dynamic font from file [param path].
[b]Warning:[/b] This method should only be used in the editor or in cases when you need to load external fonts at run-time, such as fonts located at the [code]user://[/code] directory.
*/
func (self Instance) LoadDynamicFont(path string) error { //gd:FontFile.load_dynamic_font
	return error(gd.ToError(Advanced(self).LoadDynamicFont(String.New(path))))
}

/*
Returns number of the font cache entries.
*/
func (self Instance) GetCacheCount() int { //gd:FontFile.get_cache_count
	return int(int(Advanced(self).GetCacheCount()))
}

/*
Removes all font cache entries.
*/
func (self Instance) ClearCache() { //gd:FontFile.clear_cache
	Advanced(self).ClearCache()
}

/*
Removes specified font cache entry.
*/
func (self Instance) RemoveCache(cache_index int) { //gd:FontFile.remove_cache
	Advanced(self).RemoveCache(int64(cache_index))
}

/*
Returns list of the font sizes in the cache. Each size is [Vector2i] with font size and outline size.
*/
func (self Instance) GetSizeCacheList(cache_index int) []Vector2i.XY { //gd:FontFile.get_size_cache_list
	return []Vector2i.XY(gd.ArrayAs[[]Vector2i.XY](gd.InternalArray(Advanced(self).GetSizeCacheList(int64(cache_index)))))
}

/*
Removes all font sizes from the cache entry.
*/
func (self Instance) ClearSizeCache(cache_index int) { //gd:FontFile.clear_size_cache
	Advanced(self).ClearSizeCache(int64(cache_index))
}

/*
Removes specified font size from the cache entry.
*/
func (self Instance) RemoveSizeCache(cache_index int, size Vector2i.XY) { //gd:FontFile.remove_size_cache
	Advanced(self).RemoveSizeCache(int64(cache_index), Vector2i.XY(size))
}

/*
Sets variation coordinates for the specified font cache entry. See [method Font.get_supported_variation_list] for more info.
*/
func (self Instance) SetVariationCoordinates(cache_index int, variation_coordinates map[string]float32) { //gd:FontFile.set_variation_coordinates
	Advanced(self).SetVariationCoordinates(int64(cache_index), gd.DictionaryFromMap(variation_coordinates))
}

/*
Returns variation coordinates for the specified font cache entry. See [method Font.get_supported_variation_list] for more info.
*/
func (self Instance) GetVariationCoordinates(cache_index int) map[string]float32 { //gd:FontFile.get_variation_coordinates
	return map[string]float32(gd.DictionaryAs[map[string]float32](Advanced(self).GetVariationCoordinates(int64(cache_index))))
}

/*
Sets embolden strength, if is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness.
*/
func (self Instance) SetEmbolden(cache_index int, strength Float.X) { //gd:FontFile.set_embolden
	Advanced(self).SetEmbolden(int64(cache_index), float64(strength))
}

/*
Returns embolden strength, if is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness.
*/
func (self Instance) GetEmbolden(cache_index int) Float.X { //gd:FontFile.get_embolden
	return Float.X(Float.X(Advanced(self).GetEmbolden(int64(cache_index))))
}

/*
Sets 2D transform, applied to the font outlines, can be used for slanting, flipping, and rotating glyphs.
*/
func (self Instance) SetTransform(cache_index int, transform Transform2D.OriginXY) { //gd:FontFile.set_transform
	Advanced(self).SetTransform(int64(cache_index), Transform2D.OriginXY(transform))
}

/*
Returns 2D transform, applied to the font outlines, can be used for slanting, flipping and rotating glyphs.
*/
func (self Instance) GetTransform(cache_index int) Transform2D.OriginXY { //gd:FontFile.get_transform
	return Transform2D.OriginXY(Advanced(self).GetTransform(int64(cache_index)))
}

/*
Sets the spacing for [param spacing] (see [enum TextServer.SpacingType]) to [param value] in pixels (not relative to the font size).
*/
func (self Instance) SetExtraSpacing(cache_index int, spacing TextServer.SpacingType, value int) { //gd:FontFile.set_extra_spacing
	Advanced(self).SetExtraSpacing(int64(cache_index), spacing, int64(value))
}

/*
Returns spacing for [param spacing] (see [enum TextServer.SpacingType]) in pixels (not relative to the font size).
*/
func (self Instance) GetExtraSpacing(cache_index int, spacing TextServer.SpacingType) int { //gd:FontFile.get_extra_spacing
	return int(int(Advanced(self).GetExtraSpacing(int64(cache_index), spacing)))
}

/*
Sets extra baseline offset (as a fraction of font height).
*/
func (self Instance) SetExtraBaselineOffset(cache_index int, baseline_offset Float.X) { //gd:FontFile.set_extra_baseline_offset
	Advanced(self).SetExtraBaselineOffset(int64(cache_index), float64(baseline_offset))
}

/*
Returns extra baseline offset (as a fraction of font height).
*/
func (self Instance) GetExtraBaselineOffset(cache_index int) Float.X { //gd:FontFile.get_extra_baseline_offset
	return Float.X(Float.X(Advanced(self).GetExtraBaselineOffset(int64(cache_index))))
}

/*
Sets an active face index in the TrueType / OpenType collection.
*/
func (self Instance) SetFaceIndex(cache_index int, face_index int) { //gd:FontFile.set_face_index
	Advanced(self).SetFaceIndex(int64(cache_index), int64(face_index))
}

/*
Returns an active face index in the TrueType / OpenType collection.
*/
func (self Instance) GetFaceIndex(cache_index int) int { //gd:FontFile.get_face_index
	return int(int(Advanced(self).GetFaceIndex(int64(cache_index))))
}

/*
Sets the font ascent (number of pixels above the baseline).
*/
func (self Instance) SetCacheAscent(cache_index int, size int, ascent Float.X) { //gd:FontFile.set_cache_ascent
	Advanced(self).SetCacheAscent(int64(cache_index), int64(size), float64(ascent))
}

/*
Returns the font ascent (number of pixels above the baseline).
*/
func (self Instance) GetCacheAscent(cache_index int, size int) Float.X { //gd:FontFile.get_cache_ascent
	return Float.X(Float.X(Advanced(self).GetCacheAscent(int64(cache_index), int64(size))))
}

/*
Sets the font descent (number of pixels below the baseline).
*/
func (self Instance) SetCacheDescent(cache_index int, size int, descent Float.X) { //gd:FontFile.set_cache_descent
	Advanced(self).SetCacheDescent(int64(cache_index), int64(size), float64(descent))
}

/*
Returns the font descent (number of pixels below the baseline).
*/
func (self Instance) GetCacheDescent(cache_index int, size int) Float.X { //gd:FontFile.get_cache_descent
	return Float.X(Float.X(Advanced(self).GetCacheDescent(int64(cache_index), int64(size))))
}

/*
Sets pixel offset of the underline below the baseline.
*/
func (self Instance) SetCacheUnderlinePosition(cache_index int, size int, underline_position Float.X) { //gd:FontFile.set_cache_underline_position
	Advanced(self).SetCacheUnderlinePosition(int64(cache_index), int64(size), float64(underline_position))
}

/*
Returns pixel offset of the underline below the baseline.
*/
func (self Instance) GetCacheUnderlinePosition(cache_index int, size int) Float.X { //gd:FontFile.get_cache_underline_position
	return Float.X(Float.X(Advanced(self).GetCacheUnderlinePosition(int64(cache_index), int64(size))))
}

/*
Sets thickness of the underline in pixels.
*/
func (self Instance) SetCacheUnderlineThickness(cache_index int, size int, underline_thickness Float.X) { //gd:FontFile.set_cache_underline_thickness
	Advanced(self).SetCacheUnderlineThickness(int64(cache_index), int64(size), float64(underline_thickness))
}

/*
Returns thickness of the underline in pixels.
*/
func (self Instance) GetCacheUnderlineThickness(cache_index int, size int) Float.X { //gd:FontFile.get_cache_underline_thickness
	return Float.X(Float.X(Advanced(self).GetCacheUnderlineThickness(int64(cache_index), int64(size))))
}

/*
Sets scaling factor of the color bitmap font.
*/
func (self Instance) SetCacheScale(cache_index int, size int, scale Float.X) { //gd:FontFile.set_cache_scale
	Advanced(self).SetCacheScale(int64(cache_index), int64(size), float64(scale))
}

/*
Returns scaling factor of the color bitmap font.
*/
func (self Instance) GetCacheScale(cache_index int, size int) Float.X { //gd:FontFile.get_cache_scale
	return Float.X(Float.X(Advanced(self).GetCacheScale(int64(cache_index), int64(size))))
}

/*
Returns number of textures used by font cache entry.
*/
func (self Instance) GetTextureCount(cache_index int, size Vector2i.XY) int { //gd:FontFile.get_texture_count
	return int(int(Advanced(self).GetTextureCount(int64(cache_index), Vector2i.XY(size))))
}

/*
Removes all textures from font cache entry.
[b]Note:[/b] This function will not remove glyphs associated with the texture, use [method remove_glyph] to remove them manually.
*/
func (self Instance) ClearTextures(cache_index int, size Vector2i.XY) { //gd:FontFile.clear_textures
	Advanced(self).ClearTextures(int64(cache_index), Vector2i.XY(size))
}

/*
Removes specified texture from the cache entry.
[b]Note:[/b] This function will not remove glyphs associated with the texture. Remove them manually using [method remove_glyph].
*/
func (self Instance) RemoveTexture(cache_index int, size Vector2i.XY, texture_index int) { //gd:FontFile.remove_texture
	Advanced(self).RemoveTexture(int64(cache_index), Vector2i.XY(size), int64(texture_index))
}

/*
Sets font cache texture image.
*/
func (self Instance) SetTextureImage(cache_index int, size Vector2i.XY, texture_index int, image Image.Instance) { //gd:FontFile.set_texture_image
	Advanced(self).SetTextureImage(int64(cache_index), Vector2i.XY(size), int64(texture_index), image)
}

/*
Returns a copy of the font cache texture image.
*/
func (self Instance) GetTextureImage(cache_index int, size Vector2i.XY, texture_index int) Image.Instance { //gd:FontFile.get_texture_image
	return Image.Instance(Advanced(self).GetTextureImage(int64(cache_index), Vector2i.XY(size), int64(texture_index)))
}

/*
Sets array containing glyph packing data.
*/
func (self Instance) SetTextureOffsets(cache_index int, size Vector2i.XY, texture_index int, offset []int32) { //gd:FontFile.set_texture_offsets
	Advanced(self).SetTextureOffsets(int64(cache_index), Vector2i.XY(size), int64(texture_index), Packed.New(offset...))
}

/*
Returns a copy of the array containing glyph packing data.
*/
func (self Instance) GetTextureOffsets(cache_index int, size Vector2i.XY, texture_index int) []int32 { //gd:FontFile.get_texture_offsets
	return []int32(slices.Collect(Advanced(self).GetTextureOffsets(int64(cache_index), Vector2i.XY(size), int64(texture_index)).Values()))
}

/*
Returns list of rendered glyphs in the cache entry.
*/
func (self Instance) GetGlyphList(cache_index int, size Vector2i.XY) []int32 { //gd:FontFile.get_glyph_list
	return []int32(slices.Collect(Advanced(self).GetGlyphList(int64(cache_index), Vector2i.XY(size)).Values()))
}

/*
Removes all rendered glyph information from the cache entry.
[b]Note:[/b] This function will not remove textures associated with the glyphs, use [method remove_texture] to remove them manually.
*/
func (self Instance) ClearGlyphs(cache_index int, size Vector2i.XY) { //gd:FontFile.clear_glyphs
	Advanced(self).ClearGlyphs(int64(cache_index), Vector2i.XY(size))
}

/*
Removes specified rendered glyph information from the cache entry.
[b]Note:[/b] This function will not remove textures associated with the glyphs, use [method remove_texture] to remove them manually.
*/
func (self Instance) RemoveGlyph(cache_index int, size Vector2i.XY, glyph int) { //gd:FontFile.remove_glyph
	Advanced(self).RemoveGlyph(int64(cache_index), Vector2i.XY(size), int64(glyph))
}

/*
Sets glyph advance (offset of the next glyph).
[b]Note:[/b] Advance for glyphs outlines is the same as the base glyph advance and is not saved.
*/
func (self Instance) SetGlyphAdvance(cache_index int, size int, glyph int, advance Vector2.XY) { //gd:FontFile.set_glyph_advance
	Advanced(self).SetGlyphAdvance(int64(cache_index), int64(size), int64(glyph), Vector2.XY(advance))
}

/*
Returns glyph advance (offset of the next glyph).
[b]Note:[/b] Advance for glyphs outlines is the same as the base glyph advance and is not saved.
*/
func (self Instance) GetGlyphAdvance(cache_index int, size int, glyph int) Vector2.XY { //gd:FontFile.get_glyph_advance
	return Vector2.XY(Advanced(self).GetGlyphAdvance(int64(cache_index), int64(size), int64(glyph)))
}

/*
Sets glyph offset from the baseline.
*/
func (self Instance) SetGlyphOffset(cache_index int, size Vector2i.XY, glyph int, offset Vector2.XY) { //gd:FontFile.set_glyph_offset
	Advanced(self).SetGlyphOffset(int64(cache_index), Vector2i.XY(size), int64(glyph), Vector2.XY(offset))
}

/*
Returns glyph offset from the baseline.
*/
func (self Instance) GetGlyphOffset(cache_index int, size Vector2i.XY, glyph int) Vector2.XY { //gd:FontFile.get_glyph_offset
	return Vector2.XY(Advanced(self).GetGlyphOffset(int64(cache_index), Vector2i.XY(size), int64(glyph)))
}

/*
Sets glyph size.
*/
func (self Instance) SetGlyphSize(cache_index int, size Vector2i.XY, glyph int, gl_size Vector2.XY) { //gd:FontFile.set_glyph_size
	Advanced(self).SetGlyphSize(int64(cache_index), Vector2i.XY(size), int64(glyph), Vector2.XY(gl_size))
}

/*
Returns glyph size.
*/
func (self Instance) GetGlyphSize(cache_index int, size Vector2i.XY, glyph int) Vector2.XY { //gd:FontFile.get_glyph_size
	return Vector2.XY(Advanced(self).GetGlyphSize(int64(cache_index), Vector2i.XY(size), int64(glyph)))
}

/*
Sets rectangle in the cache texture containing the glyph.
*/
func (self Instance) SetGlyphUvRect(cache_index int, size Vector2i.XY, glyph int, uv_rect Rect2.PositionSize) { //gd:FontFile.set_glyph_uv_rect
	Advanced(self).SetGlyphUvRect(int64(cache_index), Vector2i.XY(size), int64(glyph), Rect2.PositionSize(uv_rect))
}

/*
Returns rectangle in the cache texture containing the glyph.
*/
func (self Instance) GetGlyphUvRect(cache_index int, size Vector2i.XY, glyph int) Rect2.PositionSize { //gd:FontFile.get_glyph_uv_rect
	return Rect2.PositionSize(Advanced(self).GetGlyphUvRect(int64(cache_index), Vector2i.XY(size), int64(glyph)))
}

/*
Sets index of the cache texture containing the glyph.
*/
func (self Instance) SetGlyphTextureIdx(cache_index int, size Vector2i.XY, glyph int, texture_idx int) { //gd:FontFile.set_glyph_texture_idx
	Advanced(self).SetGlyphTextureIdx(int64(cache_index), Vector2i.XY(size), int64(glyph), int64(texture_idx))
}

/*
Returns index of the cache texture containing the glyph.
*/
func (self Instance) GetGlyphTextureIdx(cache_index int, size Vector2i.XY, glyph int) int { //gd:FontFile.get_glyph_texture_idx
	return int(int(Advanced(self).GetGlyphTextureIdx(int64(cache_index), Vector2i.XY(size), int64(glyph))))
}

/*
Returns list of the kerning overrides.
*/
func (self Instance) GetKerningList(cache_index int, size int) []Vector2i.XY { //gd:FontFile.get_kerning_list
	return []Vector2i.XY(gd.ArrayAs[[]Vector2i.XY](gd.InternalArray(Advanced(self).GetKerningList(int64(cache_index), int64(size)))))
}

/*
Removes all kerning overrides.
*/
func (self Instance) ClearKerningMap(cache_index int, size int) { //gd:FontFile.clear_kerning_map
	Advanced(self).ClearKerningMap(int64(cache_index), int64(size))
}

/*
Removes kerning override for the pair of glyphs.
*/
func (self Instance) RemoveKerning(cache_index int, size int, glyph_pair Vector2i.XY) { //gd:FontFile.remove_kerning
	Advanced(self).RemoveKerning(int64(cache_index), int64(size), Vector2i.XY(glyph_pair))
}

/*
Sets kerning for the pair of glyphs.
*/
func (self Instance) SetKerning(cache_index int, size int, glyph_pair Vector2i.XY, kerning Vector2.XY) { //gd:FontFile.set_kerning
	Advanced(self).SetKerning(int64(cache_index), int64(size), Vector2i.XY(glyph_pair), Vector2.XY(kerning))
}

/*
Returns kerning for the pair of glyphs.
*/
func (self Instance) GetKerning(cache_index int, size int, glyph_pair Vector2i.XY) Vector2.XY { //gd:FontFile.get_kerning
	return Vector2.XY(Advanced(self).GetKerning(int64(cache_index), int64(size), Vector2i.XY(glyph_pair)))
}

/*
Renders the range of characters to the font cache texture.
*/
func (self Instance) RenderRange(cache_index int, size Vector2i.XY, start int, end int) { //gd:FontFile.render_range
	Advanced(self).RenderRange(int64(cache_index), Vector2i.XY(size), int64(start), int64(end))
}

/*
Renders specified glyph to the font cache texture.
*/
func (self Instance) RenderGlyph(cache_index int, size Vector2i.XY, index int) { //gd:FontFile.render_glyph
	Advanced(self).RenderGlyph(int64(cache_index), Vector2i.XY(size), int64(index))
}

/*
Adds override for [method Font.is_language_supported].
*/
func (self Instance) SetLanguageSupportOverride(language string, supported bool) { //gd:FontFile.set_language_support_override
	Advanced(self).SetLanguageSupportOverride(String.New(language), supported)
}

/*
Returns [code]true[/code] if support override is enabled for the [param language].
*/
func (self Instance) GetLanguageSupportOverride(language string) bool { //gd:FontFile.get_language_support_override
	return bool(Advanced(self).GetLanguageSupportOverride(String.New(language)))
}

/*
Remove language support override.
*/
func (self Instance) RemoveLanguageSupportOverride(language string) { //gd:FontFile.remove_language_support_override
	Advanced(self).RemoveLanguageSupportOverride(String.New(language))
}

/*
Returns list of language support overrides.
*/
func (self Instance) GetLanguageSupportOverrides() []string { //gd:FontFile.get_language_support_overrides
	return []string(Advanced(self).GetLanguageSupportOverrides().Strings())
}

/*
Adds override for [method Font.is_script_supported].
*/
func (self Instance) SetScriptSupportOverride(script string, supported bool) { //gd:FontFile.set_script_support_override
	Advanced(self).SetScriptSupportOverride(String.New(script), supported)
}

/*
Returns [code]true[/code] if support override is enabled for the [param script].
*/
func (self Instance) GetScriptSupportOverride(script string) bool { //gd:FontFile.get_script_support_override
	return bool(Advanced(self).GetScriptSupportOverride(String.New(script)))
}

/*
Removes script support override.
*/
func (self Instance) RemoveScriptSupportOverride(script string) { //gd:FontFile.remove_script_support_override
	Advanced(self).RemoveScriptSupportOverride(String.New(script))
}

/*
Returns list of script support overrides.
*/
func (self Instance) GetScriptSupportOverrides() []string { //gd:FontFile.get_script_support_overrides
	return []string(Advanced(self).GetScriptSupportOverrides().Strings())
}

/*
Returns the glyph index of a [param char], optionally modified by the [param variation_selector].
*/
func (self Instance) GetGlyphIndex(size int, char int, variation_selector int) int { //gd:FontFile.get_glyph_index
	return int(int(Advanced(self).GetGlyphIndex(int64(size), int64(char), int64(variation_selector))))
}

/*
Returns character code associated with [param glyph_index], or [code]0[/code] if [param glyph_index] is invalid. See [method get_glyph_index].
*/
func (self Instance) GetCharFromGlyphIndex(size int, glyph_index int) int { //gd:FontFile.get_char_from_glyph_index
	return int(int(Advanced(self).GetCharFromGlyphIndex(int64(size), int64(glyph_index))))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.FontFile

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.FontFile](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.FontFile](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.FontFile{pointers.Add[gdclass.FontFile]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.FontFile{pointers.New[gdclass.FontFile]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Data() []byte {
	return []byte(class(self).GetData().Bytes())
}

func (self Instance) SetData(value []byte) {
	class(self).SetData(Packed.Bytes(Packed.New(value...)))
}

func (self Instance) GenerateMipmaps() bool {
	return bool(class(self).GetGenerateMipmaps())
}

func (self Instance) SetGenerateMipmaps(value bool) {
	class(self).SetGenerateMipmaps(value)
}

func (self Instance) DisableEmbeddedBitmaps() bool {
	return bool(class(self).GetDisableEmbeddedBitmaps())
}

func (self Instance) SetDisableEmbeddedBitmaps(value bool) {
	class(self).SetDisableEmbeddedBitmaps(value)
}

func (self Instance) Antialiasing() TextServer.FontAntialiasing {
	return TextServer.FontAntialiasing(class(self).GetAntialiasing())
}

func (self Instance) SetAntialiasing(value TextServer.FontAntialiasing) {
	class(self).SetAntialiasing(value)
}

func (self Instance) SetFontName(value string) {
	class(self).SetFontName(String.New(value))
}

func (self Instance) SetStyleName(value string) {
	class(self).SetFontStyleName(String.New(value))
}

func (self Instance) SetFontStyle(value TextServer.FontStyle) {
	class(self).SetFontStyle(value)
}

func (self Instance) SetFontWeight(value int) {
	class(self).SetFontWeight(int64(value))
}

func (self Instance) SetFontStretch(value int) {
	class(self).SetFontStretch(int64(value))
}

func (self Instance) SubpixelPositioning() TextServer.SubpixelPositioning {
	return TextServer.SubpixelPositioning(class(self).GetSubpixelPositioning())
}

func (self Instance) SetSubpixelPositioning(value TextServer.SubpixelPositioning) {
	class(self).SetSubpixelPositioning(value)
}

func (self Instance) KeepRoundingRemainders() bool {
	return bool(class(self).GetKeepRoundingRemainders())
}

func (self Instance) SetKeepRoundingRemainders(value bool) {
	class(self).SetKeepRoundingRemainders(value)
}

func (self Instance) MultichannelSignedDistanceField() bool {
	return bool(class(self).IsMultichannelSignedDistanceField())
}

func (self Instance) SetMultichannelSignedDistanceField(value bool) {
	class(self).SetMultichannelSignedDistanceField(value)
}

func (self Instance) MsdfPixelRange() int {
	return int(int(class(self).GetMsdfPixelRange()))
}

func (self Instance) SetMsdfPixelRange(value int) {
	class(self).SetMsdfPixelRange(int64(value))
}

func (self Instance) MsdfSize() int {
	return int(int(class(self).GetMsdfSize()))
}

func (self Instance) SetMsdfSize(value int) {
	class(self).SetMsdfSize(int64(value))
}

func (self Instance) AllowSystemFallback() bool {
	return bool(class(self).IsAllowSystemFallback())
}

func (self Instance) SetAllowSystemFallback(value bool) {
	class(self).SetAllowSystemFallback(value)
}

func (self Instance) ForceAutohinter() bool {
	return bool(class(self).IsForceAutohinter())
}

func (self Instance) SetForceAutohinter(value bool) {
	class(self).SetForceAutohinter(value)
}

func (self Instance) Hinting() TextServer.Hinting {
	return TextServer.Hinting(class(self).GetHinting())
}

func (self Instance) SetHinting(value TextServer.Hinting) {
	class(self).SetHinting(value)
}

func (self Instance) Oversampling() Float.X {
	return Float.X(Float.X(class(self).GetOversampling()))
}

func (self Instance) SetOversampling(value Float.X) {
	class(self).SetOversampling(float64(value))
}

func (self Instance) FixedSize() int {
	return int(int(class(self).GetFixedSize()))
}

func (self Instance) SetFixedSize(value int) {
	class(self).SetFixedSize(int64(value))
}

func (self Instance) FixedSizeScaleMode() TextServer.FixedSizeScaleMode {
	return TextServer.FixedSizeScaleMode(class(self).GetFixedSizeScaleMode())
}

func (self Instance) SetFixedSizeScaleMode(value TextServer.FixedSizeScaleMode) {
	class(self).SetFixedSizeScaleMode(value)
}

func (self Instance) OpentypeFeatureOverrides() map[any]any {
	return map[any]any(gd.DictionaryAs[map[any]any](class(self).GetOpentypeFeatureOverrides()))
}

func (self Instance) SetOpentypeFeatureOverrides(value map[any]any) {
	class(self).SetOpentypeFeatureOverrides(gd.DictionaryFromMap(value))
}

/*
Loads an AngelCode BMFont (.fnt, .font) bitmap font from file [param path].
[b]Warning:[/b] This method should only be used in the editor or in cases when you need to load external fonts at run-time, such as fonts located at the [code]user://[/code] directory.
*/
//go:nosplit
func (self class) LoadBitmapFont(path String.Readable) Error.Code { //gd:FontFile.load_bitmap_font
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.load_bitmap_font, gdextension.SizeInt|(gdextension.SizeString<<4), &struct{ path gdextension.String }{pointers.Get(gd.InternalString(path))})
	var ret = Error.Code(r_ret)
	return ret
}

/*
Loads a TrueType (.ttf), OpenType (.otf), WOFF (.woff), WOFF2 (.woff2) or Type 1 (.pfb, .pfm) dynamic font from file [param path].
[b]Warning:[/b] This method should only be used in the editor or in cases when you need to load external fonts at run-time, such as fonts located at the [code]user://[/code] directory.
*/
//go:nosplit
func (self class) LoadDynamicFont(path String.Readable) Error.Code { //gd:FontFile.load_dynamic_font
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.load_dynamic_font, gdextension.SizeInt|(gdextension.SizeString<<4), &struct{ path gdextension.String }{pointers.Get(gd.InternalString(path))})
	var ret = Error.Code(r_ret)
	return ret
}

//go:nosplit
func (self class) SetData(data Packed.Bytes) { //gd:FontFile.set_data
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_data, 0|(gdextension.SizePackedArray<<4), &struct{ data gdextension.PackedArray[byte] }{pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](data)))})
}

//go:nosplit
func (self class) GetData() Packed.Bytes { //gd:FontFile.get_data
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_data, gdextension.SizePackedArray, &struct{}{})
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetFontName(name String.Readable) { //gd:FontFile.set_font_name
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_font_name, 0|(gdextension.SizeString<<4), &struct{ name gdextension.String }{pointers.Get(gd.InternalString(name))})
}

//go:nosplit
func (self class) SetFontStyleName(name String.Readable) { //gd:FontFile.set_font_style_name
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_font_style_name, 0|(gdextension.SizeString<<4), &struct{ name gdextension.String }{pointers.Get(gd.InternalString(name))})
}

//go:nosplit
func (self class) SetFontStyle(style TextServer.FontStyle) { //gd:FontFile.set_font_style
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_font_style, 0|(gdextension.SizeInt<<4), &struct{ style TextServer.FontStyle }{style})
}

//go:nosplit
func (self class) SetFontWeight(weight int64) { //gd:FontFile.set_font_weight
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_font_weight, 0|(gdextension.SizeInt<<4), &struct{ weight int64 }{weight})
}

//go:nosplit
func (self class) SetFontStretch(stretch int64) { //gd:FontFile.set_font_stretch
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_font_stretch, 0|(gdextension.SizeInt<<4), &struct{ stretch int64 }{stretch})
}

//go:nosplit
func (self class) SetAntialiasing(antialiasing TextServer.FontAntialiasing) { //gd:FontFile.set_antialiasing
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_antialiasing, 0|(gdextension.SizeInt<<4), &struct{ antialiasing TextServer.FontAntialiasing }{antialiasing})
}

//go:nosplit
func (self class) GetAntialiasing() TextServer.FontAntialiasing { //gd:FontFile.get_antialiasing
	var r_ret = gdextension.Call[TextServer.FontAntialiasing](gd.ObjectChecked(self.AsObject()), methods.get_antialiasing, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDisableEmbeddedBitmaps(disable_embedded_bitmaps bool) { //gd:FontFile.set_disable_embedded_bitmaps
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_disable_embedded_bitmaps, 0|(gdextension.SizeBool<<4), &struct{ disable_embedded_bitmaps bool }{disable_embedded_bitmaps})
}

//go:nosplit
func (self class) GetDisableEmbeddedBitmaps() bool { //gd:FontFile.get_disable_embedded_bitmaps
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_disable_embedded_bitmaps, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGenerateMipmaps(generate_mipmaps bool) { //gd:FontFile.set_generate_mipmaps
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_generate_mipmaps, 0|(gdextension.SizeBool<<4), &struct{ generate_mipmaps bool }{generate_mipmaps})
}

//go:nosplit
func (self class) GetGenerateMipmaps() bool { //gd:FontFile.get_generate_mipmaps
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_generate_mipmaps, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMultichannelSignedDistanceField(msdf bool) { //gd:FontFile.set_multichannel_signed_distance_field
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_multichannel_signed_distance_field, 0|(gdextension.SizeBool<<4), &struct{ msdf bool }{msdf})
}

//go:nosplit
func (self class) IsMultichannelSignedDistanceField() bool { //gd:FontFile.is_multichannel_signed_distance_field
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_multichannel_signed_distance_field, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMsdfPixelRange(msdf_pixel_range int64) { //gd:FontFile.set_msdf_pixel_range
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_msdf_pixel_range, 0|(gdextension.SizeInt<<4), &struct{ msdf_pixel_range int64 }{msdf_pixel_range})
}

//go:nosplit
func (self class) GetMsdfPixelRange() int64 { //gd:FontFile.get_msdf_pixel_range
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_msdf_pixel_range, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMsdfSize(msdf_size int64) { //gd:FontFile.set_msdf_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_msdf_size, 0|(gdextension.SizeInt<<4), &struct{ msdf_size int64 }{msdf_size})
}

//go:nosplit
func (self class) GetMsdfSize() int64 { //gd:FontFile.get_msdf_size
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_msdf_size, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFixedSize(fixed_size int64) { //gd:FontFile.set_fixed_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_fixed_size, 0|(gdextension.SizeInt<<4), &struct{ fixed_size int64 }{fixed_size})
}

//go:nosplit
func (self class) GetFixedSize() int64 { //gd:FontFile.get_fixed_size
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_fixed_size, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFixedSizeScaleMode(fixed_size_scale_mode TextServer.FixedSizeScaleMode) { //gd:FontFile.set_fixed_size_scale_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_fixed_size_scale_mode, 0|(gdextension.SizeInt<<4), &struct{ fixed_size_scale_mode TextServer.FixedSizeScaleMode }{fixed_size_scale_mode})
}

//go:nosplit
func (self class) GetFixedSizeScaleMode() TextServer.FixedSizeScaleMode { //gd:FontFile.get_fixed_size_scale_mode
	var r_ret = gdextension.Call[TextServer.FixedSizeScaleMode](gd.ObjectChecked(self.AsObject()), methods.get_fixed_size_scale_mode, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAllowSystemFallback(allow_system_fallback bool) { //gd:FontFile.set_allow_system_fallback
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_allow_system_fallback, 0|(gdextension.SizeBool<<4), &struct{ allow_system_fallback bool }{allow_system_fallback})
}

//go:nosplit
func (self class) IsAllowSystemFallback() bool { //gd:FontFile.is_allow_system_fallback
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_allow_system_fallback, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetForceAutohinter(force_autohinter bool) { //gd:FontFile.set_force_autohinter
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_force_autohinter, 0|(gdextension.SizeBool<<4), &struct{ force_autohinter bool }{force_autohinter})
}

//go:nosplit
func (self class) IsForceAutohinter() bool { //gd:FontFile.is_force_autohinter
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_force_autohinter, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHinting(hinting TextServer.Hinting) { //gd:FontFile.set_hinting
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_hinting, 0|(gdextension.SizeInt<<4), &struct{ hinting TextServer.Hinting }{hinting})
}

//go:nosplit
func (self class) GetHinting() TextServer.Hinting { //gd:FontFile.get_hinting
	var r_ret = gdextension.Call[TextServer.Hinting](gd.ObjectChecked(self.AsObject()), methods.get_hinting, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSubpixelPositioning(subpixel_positioning TextServer.SubpixelPositioning) { //gd:FontFile.set_subpixel_positioning
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_subpixel_positioning, 0|(gdextension.SizeInt<<4), &struct {
		subpixel_positioning TextServer.SubpixelPositioning
	}{subpixel_positioning})
}

//go:nosplit
func (self class) GetSubpixelPositioning() TextServer.SubpixelPositioning { //gd:FontFile.get_subpixel_positioning
	var r_ret = gdextension.Call[TextServer.SubpixelPositioning](gd.ObjectChecked(self.AsObject()), methods.get_subpixel_positioning, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetKeepRoundingRemainders(keep_rounding_remainders bool) { //gd:FontFile.set_keep_rounding_remainders
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_keep_rounding_remainders, 0|(gdextension.SizeBool<<4), &struct{ keep_rounding_remainders bool }{keep_rounding_remainders})
}

//go:nosplit
func (self class) GetKeepRoundingRemainders() bool { //gd:FontFile.get_keep_rounding_remainders
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_keep_rounding_remainders, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetOversampling(oversampling float64) { //gd:FontFile.set_oversampling
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_oversampling, 0|(gdextension.SizeFloat<<4), &struct{ oversampling float64 }{oversampling})
}

//go:nosplit
func (self class) GetOversampling() float64 { //gd:FontFile.get_oversampling
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_oversampling, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Returns number of the font cache entries.
*/
//go:nosplit
func (self class) GetCacheCount() int64 { //gd:FontFile.get_cache_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_cache_count, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Removes all font cache entries.
*/
//go:nosplit
func (self class) ClearCache() { //gd:FontFile.clear_cache
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear_cache, 0, &struct{}{})
}

/*
Removes specified font cache entry.
*/
//go:nosplit
func (self class) RemoveCache(cache_index int64) { //gd:FontFile.remove_cache
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_cache, 0|(gdextension.SizeInt<<4), &struct{ cache_index int64 }{cache_index})
}

/*
Returns list of the font sizes in the cache. Each size is [Vector2i] with font size and outline size.
*/
//go:nosplit
func (self class) GetSizeCacheList(cache_index int64) Array.Contains[Vector2i.XY] { //gd:FontFile.get_size_cache_list
	var r_ret = gdextension.Call[gdextension.Array](gd.ObjectChecked(self.AsObject()), methods.get_size_cache_list, gdextension.SizeArray|(gdextension.SizeInt<<4), &struct{ cache_index int64 }{cache_index})
	var ret = Array.Through(gd.ArrayProxy[Vector2i.XY]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

/*
Removes all font sizes from the cache entry.
*/
//go:nosplit
func (self class) ClearSizeCache(cache_index int64) { //gd:FontFile.clear_size_cache
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear_size_cache, 0|(gdextension.SizeInt<<4), &struct{ cache_index int64 }{cache_index})
}

/*
Removes specified font size from the cache entry.
*/
//go:nosplit
func (self class) RemoveSizeCache(cache_index int64, size Vector2i.XY) { //gd:FontFile.remove_size_cache
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_size_cache, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8), &struct {
		cache_index int64
		size        Vector2i.XY
	}{cache_index, size})
}

/*
Sets variation coordinates for the specified font cache entry. See [method Font.get_supported_variation_list] for more info.
*/
//go:nosplit
func (self class) SetVariationCoordinates(cache_index int64, variation_coordinates Dictionary.Any) { //gd:FontFile.set_variation_coordinates
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_variation_coordinates, 0|(gdextension.SizeInt<<4)|(gdextension.SizeDictionary<<8), &struct {
		cache_index           int64
		variation_coordinates gdextension.Dictionary
	}{cache_index, pointers.Get(gd.InternalDictionary(variation_coordinates))})
}

/*
Returns variation coordinates for the specified font cache entry. See [method Font.get_supported_variation_list] for more info.
*/
//go:nosplit
func (self class) GetVariationCoordinates(cache_index int64) Dictionary.Any { //gd:FontFile.get_variation_coordinates
	var r_ret = gdextension.Call[gdextension.Dictionary](gd.ObjectChecked(self.AsObject()), methods.get_variation_coordinates, gdextension.SizeDictionary|(gdextension.SizeInt<<4), &struct{ cache_index int64 }{cache_index})
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret)))
	return ret
}

/*
Sets embolden strength, if is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness.
*/
//go:nosplit
func (self class) SetEmbolden(cache_index int64, strength float64) { //gd:FontFile.set_embolden
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_embolden, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), &struct {
		cache_index int64
		strength    float64
	}{cache_index, strength})
}

/*
Returns embolden strength, if is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness.
*/
//go:nosplit
func (self class) GetEmbolden(cache_index int64) float64 { //gd:FontFile.get_embolden
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_embolden, gdextension.SizeFloat|(gdextension.SizeInt<<4), &struct{ cache_index int64 }{cache_index})
	var ret = r_ret
	return ret
}

/*
Sets 2D transform, applied to the font outlines, can be used for slanting, flipping, and rotating glyphs.
*/
//go:nosplit
func (self class) SetTransform(cache_index int64, transform Transform2D.OriginXY) { //gd:FontFile.set_transform
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_transform, 0|(gdextension.SizeInt<<4)|(gdextension.SizeTransform2D<<8), &struct {
		cache_index int64
		transform   Transform2D.OriginXY
	}{cache_index, transform})
}

/*
Returns 2D transform, applied to the font outlines, can be used for slanting, flipping and rotating glyphs.
*/
//go:nosplit
func (self class) GetTransform(cache_index int64) Transform2D.OriginXY { //gd:FontFile.get_transform
	var r_ret = gdextension.Call[Transform2D.OriginXY](gd.ObjectChecked(self.AsObject()), methods.get_transform, gdextension.SizeTransform2D|(gdextension.SizeInt<<4), &struct{ cache_index int64 }{cache_index})
	var ret = r_ret
	return ret
}

/*
Sets the spacing for [param spacing] (see [enum TextServer.SpacingType]) to [param value] in pixels (not relative to the font size).
*/
//go:nosplit
func (self class) SetExtraSpacing(cache_index int64, spacing TextServer.SpacingType, value int64) { //gd:FontFile.set_extra_spacing
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_extra_spacing, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeInt<<12), &struct {
		cache_index int64
		spacing     TextServer.SpacingType
		value       int64
	}{cache_index, spacing, value})
}

/*
Returns spacing for [param spacing] (see [enum TextServer.SpacingType]) in pixels (not relative to the font size).
*/
//go:nosplit
func (self class) GetExtraSpacing(cache_index int64, spacing TextServer.SpacingType) int64 { //gd:FontFile.get_extra_spacing
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_extra_spacing, gdextension.SizeInt|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), &struct {
		cache_index int64
		spacing     TextServer.SpacingType
	}{cache_index, spacing})
	var ret = r_ret
	return ret
}

/*
Sets extra baseline offset (as a fraction of font height).
*/
//go:nosplit
func (self class) SetExtraBaselineOffset(cache_index int64, baseline_offset float64) { //gd:FontFile.set_extra_baseline_offset
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_extra_baseline_offset, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), &struct {
		cache_index     int64
		baseline_offset float64
	}{cache_index, baseline_offset})
}

/*
Returns extra baseline offset (as a fraction of font height).
*/
//go:nosplit
func (self class) GetExtraBaselineOffset(cache_index int64) float64 { //gd:FontFile.get_extra_baseline_offset
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_extra_baseline_offset, gdextension.SizeFloat|(gdextension.SizeInt<<4), &struct{ cache_index int64 }{cache_index})
	var ret = r_ret
	return ret
}

/*
Sets an active face index in the TrueType / OpenType collection.
*/
//go:nosplit
func (self class) SetFaceIndex(cache_index int64, face_index int64) { //gd:FontFile.set_face_index
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_face_index, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), &struct {
		cache_index int64
		face_index  int64
	}{cache_index, face_index})
}

/*
Returns an active face index in the TrueType / OpenType collection.
*/
//go:nosplit
func (self class) GetFaceIndex(cache_index int64) int64 { //gd:FontFile.get_face_index
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_face_index, gdextension.SizeInt|(gdextension.SizeInt<<4), &struct{ cache_index int64 }{cache_index})
	var ret = r_ret
	return ret
}

/*
Sets the font ascent (number of pixels above the baseline).
*/
//go:nosplit
func (self class) SetCacheAscent(cache_index int64, size int64, ascent float64) { //gd:FontFile.set_cache_ascent
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_cache_ascent, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeFloat<<12), &struct {
		cache_index int64
		size        int64
		ascent      float64
	}{cache_index, size, ascent})
}

/*
Returns the font ascent (number of pixels above the baseline).
*/
//go:nosplit
func (self class) GetCacheAscent(cache_index int64, size int64) float64 { //gd:FontFile.get_cache_ascent
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_cache_ascent, gdextension.SizeFloat|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), &struct {
		cache_index int64
		size        int64
	}{cache_index, size})
	var ret = r_ret
	return ret
}

/*
Sets the font descent (number of pixels below the baseline).
*/
//go:nosplit
func (self class) SetCacheDescent(cache_index int64, size int64, descent float64) { //gd:FontFile.set_cache_descent
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_cache_descent, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeFloat<<12), &struct {
		cache_index int64
		size        int64
		descent     float64
	}{cache_index, size, descent})
}

/*
Returns the font descent (number of pixels below the baseline).
*/
//go:nosplit
func (self class) GetCacheDescent(cache_index int64, size int64) float64 { //gd:FontFile.get_cache_descent
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_cache_descent, gdextension.SizeFloat|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), &struct {
		cache_index int64
		size        int64
	}{cache_index, size})
	var ret = r_ret
	return ret
}

/*
Sets pixel offset of the underline below the baseline.
*/
//go:nosplit
func (self class) SetCacheUnderlinePosition(cache_index int64, size int64, underline_position float64) { //gd:FontFile.set_cache_underline_position
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_cache_underline_position, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeFloat<<12), &struct {
		cache_index        int64
		size               int64
		underline_position float64
	}{cache_index, size, underline_position})
}

/*
Returns pixel offset of the underline below the baseline.
*/
//go:nosplit
func (self class) GetCacheUnderlinePosition(cache_index int64, size int64) float64 { //gd:FontFile.get_cache_underline_position
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_cache_underline_position, gdextension.SizeFloat|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), &struct {
		cache_index int64
		size        int64
	}{cache_index, size})
	var ret = r_ret
	return ret
}

/*
Sets thickness of the underline in pixels.
*/
//go:nosplit
func (self class) SetCacheUnderlineThickness(cache_index int64, size int64, underline_thickness float64) { //gd:FontFile.set_cache_underline_thickness
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_cache_underline_thickness, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeFloat<<12), &struct {
		cache_index         int64
		size                int64
		underline_thickness float64
	}{cache_index, size, underline_thickness})
}

/*
Returns thickness of the underline in pixels.
*/
//go:nosplit
func (self class) GetCacheUnderlineThickness(cache_index int64, size int64) float64 { //gd:FontFile.get_cache_underline_thickness
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_cache_underline_thickness, gdextension.SizeFloat|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), &struct {
		cache_index int64
		size        int64
	}{cache_index, size})
	var ret = r_ret
	return ret
}

/*
Sets scaling factor of the color bitmap font.
*/
//go:nosplit
func (self class) SetCacheScale(cache_index int64, size int64, scale float64) { //gd:FontFile.set_cache_scale
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_cache_scale, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeFloat<<12), &struct {
		cache_index int64
		size        int64
		scale       float64
	}{cache_index, size, scale})
}

/*
Returns scaling factor of the color bitmap font.
*/
//go:nosplit
func (self class) GetCacheScale(cache_index int64, size int64) float64 { //gd:FontFile.get_cache_scale
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_cache_scale, gdextension.SizeFloat|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), &struct {
		cache_index int64
		size        int64
	}{cache_index, size})
	var ret = r_ret
	return ret
}

/*
Returns number of textures used by font cache entry.
*/
//go:nosplit
func (self class) GetTextureCount(cache_index int64, size Vector2i.XY) int64 { //gd:FontFile.get_texture_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_texture_count, gdextension.SizeInt|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8), &struct {
		cache_index int64
		size        Vector2i.XY
	}{cache_index, size})
	var ret = r_ret
	return ret
}

/*
Removes all textures from font cache entry.
[b]Note:[/b] This function will not remove glyphs associated with the texture, use [method remove_glyph] to remove them manually.
*/
//go:nosplit
func (self class) ClearTextures(cache_index int64, size Vector2i.XY) { //gd:FontFile.clear_textures
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear_textures, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8), &struct {
		cache_index int64
		size        Vector2i.XY
	}{cache_index, size})
}

/*
Removes specified texture from the cache entry.
[b]Note:[/b] This function will not remove glyphs associated with the texture. Remove them manually using [method remove_glyph].
*/
//go:nosplit
func (self class) RemoveTexture(cache_index int64, size Vector2i.XY, texture_index int64) { //gd:FontFile.remove_texture
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_texture, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12), &struct {
		cache_index   int64
		size          Vector2i.XY
		texture_index int64
	}{cache_index, size, texture_index})
}

/*
Sets font cache texture image.
*/
//go:nosplit
func (self class) SetTextureImage(cache_index int64, size Vector2i.XY, texture_index int64, image [1]gdclass.Image) { //gd:FontFile.set_texture_image
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_texture_image, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeObject<<16), &struct {
		cache_index   int64
		size          Vector2i.XY
		texture_index int64
		image         gdextension.Object
	}{cache_index, size, texture_index, gdextension.Object(gd.ObjectChecked(image[0].AsObject()))})
}

/*
Returns a copy of the font cache texture image.
*/
//go:nosplit
func (self class) GetTextureImage(cache_index int64, size Vector2i.XY, texture_index int64) [1]gdclass.Image { //gd:FontFile.get_texture_image
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_texture_image, gdextension.SizeObject|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12), &struct {
		cache_index   int64
		size          Vector2i.XY
		texture_index int64
	}{cache_index, size, texture_index})
	var ret = [1]gdclass.Image{gd.PointerWithOwnershipTransferredToGo[gdclass.Image](r_ret)}
	return ret
}

/*
Sets array containing glyph packing data.
*/
//go:nosplit
func (self class) SetTextureOffsets(cache_index int64, size Vector2i.XY, texture_index int64, offset Packed.Array[int32]) { //gd:FontFile.set_texture_offsets
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_texture_offsets, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12)|(gdextension.SizePackedArray<<16), &struct {
		cache_index   int64
		size          Vector2i.XY
		texture_index int64
		offset        gdextension.PackedArray[int32]
	}{cache_index, size, texture_index, pointers.Get(gd.InternalPacked[gd.PackedInt32Array, int32](offset))})
}

/*
Returns a copy of the array containing glyph packing data.
*/
//go:nosplit
func (self class) GetTextureOffsets(cache_index int64, size Vector2i.XY, texture_index int64) Packed.Array[int32] { //gd:FontFile.get_texture_offsets
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_texture_offsets, gdextension.SizePackedArray|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12), &struct {
		cache_index   int64
		size          Vector2i.XY
		texture_index int64
	}{cache_index, size, texture_index})
	var ret = Packed.Array[int32](Array.Through(gd.PackedProxy[gd.PackedInt32Array, int32]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

/*
Returns list of rendered glyphs in the cache entry.
*/
//go:nosplit
func (self class) GetGlyphList(cache_index int64, size Vector2i.XY) Packed.Array[int32] { //gd:FontFile.get_glyph_list
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_glyph_list, gdextension.SizePackedArray|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8), &struct {
		cache_index int64
		size        Vector2i.XY
	}{cache_index, size})
	var ret = Packed.Array[int32](Array.Through(gd.PackedProxy[gd.PackedInt32Array, int32]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

/*
Removes all rendered glyph information from the cache entry.
[b]Note:[/b] This function will not remove textures associated with the glyphs, use [method remove_texture] to remove them manually.
*/
//go:nosplit
func (self class) ClearGlyphs(cache_index int64, size Vector2i.XY) { //gd:FontFile.clear_glyphs
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear_glyphs, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8), &struct {
		cache_index int64
		size        Vector2i.XY
	}{cache_index, size})
}

/*
Removes specified rendered glyph information from the cache entry.
[b]Note:[/b] This function will not remove textures associated with the glyphs, use [method remove_texture] to remove them manually.
*/
//go:nosplit
func (self class) RemoveGlyph(cache_index int64, size Vector2i.XY, glyph int64) { //gd:FontFile.remove_glyph
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_glyph, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12), &struct {
		cache_index int64
		size        Vector2i.XY
		glyph       int64
	}{cache_index, size, glyph})
}

/*
Sets glyph advance (offset of the next glyph).
[b]Note:[/b] Advance for glyphs outlines is the same as the base glyph advance and is not saved.
*/
//go:nosplit
func (self class) SetGlyphAdvance(cache_index int64, size int64, glyph int64, advance Vector2.XY) { //gd:FontFile.set_glyph_advance
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_glyph_advance, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeVector2<<16), &struct {
		cache_index int64
		size        int64
		glyph       int64
		advance     Vector2.XY
	}{cache_index, size, glyph, advance})
}

/*
Returns glyph advance (offset of the next glyph).
[b]Note:[/b] Advance for glyphs outlines is the same as the base glyph advance and is not saved.
*/
//go:nosplit
func (self class) GetGlyphAdvance(cache_index int64, size int64, glyph int64) Vector2.XY { //gd:FontFile.get_glyph_advance
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_glyph_advance, gdextension.SizeVector2|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeInt<<12), &struct {
		cache_index int64
		size        int64
		glyph       int64
	}{cache_index, size, glyph})
	var ret = r_ret
	return ret
}

/*
Sets glyph offset from the baseline.
*/
//go:nosplit
func (self class) SetGlyphOffset(cache_index int64, size Vector2i.XY, glyph int64, offset Vector2.XY) { //gd:FontFile.set_glyph_offset
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_glyph_offset, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeVector2<<16), &struct {
		cache_index int64
		size        Vector2i.XY
		glyph       int64
		offset      Vector2.XY
	}{cache_index, size, glyph, offset})
}

/*
Returns glyph offset from the baseline.
*/
//go:nosplit
func (self class) GetGlyphOffset(cache_index int64, size Vector2i.XY, glyph int64) Vector2.XY { //gd:FontFile.get_glyph_offset
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_glyph_offset, gdextension.SizeVector2|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12), &struct {
		cache_index int64
		size        Vector2i.XY
		glyph       int64
	}{cache_index, size, glyph})
	var ret = r_ret
	return ret
}

/*
Sets glyph size.
*/
//go:nosplit
func (self class) SetGlyphSize(cache_index int64, size Vector2i.XY, glyph int64, gl_size Vector2.XY) { //gd:FontFile.set_glyph_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_glyph_size, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeVector2<<16), &struct {
		cache_index int64
		size        Vector2i.XY
		glyph       int64
		gl_size     Vector2.XY
	}{cache_index, size, glyph, gl_size})
}

/*
Returns glyph size.
*/
//go:nosplit
func (self class) GetGlyphSize(cache_index int64, size Vector2i.XY, glyph int64) Vector2.XY { //gd:FontFile.get_glyph_size
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_glyph_size, gdextension.SizeVector2|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12), &struct {
		cache_index int64
		size        Vector2i.XY
		glyph       int64
	}{cache_index, size, glyph})
	var ret = r_ret
	return ret
}

/*
Sets rectangle in the cache texture containing the glyph.
*/
//go:nosplit
func (self class) SetGlyphUvRect(cache_index int64, size Vector2i.XY, glyph int64, uv_rect Rect2.PositionSize) { //gd:FontFile.set_glyph_uv_rect
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_glyph_uv_rect, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeRect2<<16), &struct {
		cache_index int64
		size        Vector2i.XY
		glyph       int64
		uv_rect     Rect2.PositionSize
	}{cache_index, size, glyph, uv_rect})
}

/*
Returns rectangle in the cache texture containing the glyph.
*/
//go:nosplit
func (self class) GetGlyphUvRect(cache_index int64, size Vector2i.XY, glyph int64) Rect2.PositionSize { //gd:FontFile.get_glyph_uv_rect
	var r_ret = gdextension.Call[Rect2.PositionSize](gd.ObjectChecked(self.AsObject()), methods.get_glyph_uv_rect, gdextension.SizeRect2|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12), &struct {
		cache_index int64
		size        Vector2i.XY
		glyph       int64
	}{cache_index, size, glyph})
	var ret = r_ret
	return ret
}

/*
Sets index of the cache texture containing the glyph.
*/
//go:nosplit
func (self class) SetGlyphTextureIdx(cache_index int64, size Vector2i.XY, glyph int64, texture_idx int64) { //gd:FontFile.set_glyph_texture_idx
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_glyph_texture_idx, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeInt<<16), &struct {
		cache_index int64
		size        Vector2i.XY
		glyph       int64
		texture_idx int64
	}{cache_index, size, glyph, texture_idx})
}

/*
Returns index of the cache texture containing the glyph.
*/
//go:nosplit
func (self class) GetGlyphTextureIdx(cache_index int64, size Vector2i.XY, glyph int64) int64 { //gd:FontFile.get_glyph_texture_idx
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_glyph_texture_idx, gdextension.SizeInt|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12), &struct {
		cache_index int64
		size        Vector2i.XY
		glyph       int64
	}{cache_index, size, glyph})
	var ret = r_ret
	return ret
}

/*
Returns list of the kerning overrides.
*/
//go:nosplit
func (self class) GetKerningList(cache_index int64, size int64) Array.Contains[Vector2i.XY] { //gd:FontFile.get_kerning_list
	var r_ret = gdextension.Call[gdextension.Array](gd.ObjectChecked(self.AsObject()), methods.get_kerning_list, gdextension.SizeArray|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), &struct {
		cache_index int64
		size        int64
	}{cache_index, size})
	var ret = Array.Through(gd.ArrayProxy[Vector2i.XY]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

/*
Removes all kerning overrides.
*/
//go:nosplit
func (self class) ClearKerningMap(cache_index int64, size int64) { //gd:FontFile.clear_kerning_map
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear_kerning_map, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), &struct {
		cache_index int64
		size        int64
	}{cache_index, size})
}

/*
Removes kerning override for the pair of glyphs.
*/
//go:nosplit
func (self class) RemoveKerning(cache_index int64, size int64, glyph_pair Vector2i.XY) { //gd:FontFile.remove_kerning
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_kerning, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeVector2i<<12), &struct {
		cache_index int64
		size        int64
		glyph_pair  Vector2i.XY
	}{cache_index, size, glyph_pair})
}

/*
Sets kerning for the pair of glyphs.
*/
//go:nosplit
func (self class) SetKerning(cache_index int64, size int64, glyph_pair Vector2i.XY, kerning Vector2.XY) { //gd:FontFile.set_kerning
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_kerning, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeVector2i<<12)|(gdextension.SizeVector2<<16), &struct {
		cache_index int64
		size        int64
		glyph_pair  Vector2i.XY
		kerning     Vector2.XY
	}{cache_index, size, glyph_pair, kerning})
}

/*
Returns kerning for the pair of glyphs.
*/
//go:nosplit
func (self class) GetKerning(cache_index int64, size int64, glyph_pair Vector2i.XY) Vector2.XY { //gd:FontFile.get_kerning
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_kerning, gdextension.SizeVector2|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeVector2i<<12), &struct {
		cache_index int64
		size        int64
		glyph_pair  Vector2i.XY
	}{cache_index, size, glyph_pair})
	var ret = r_ret
	return ret
}

/*
Renders the range of characters to the font cache texture.
*/
//go:nosplit
func (self class) RenderRange(cache_index int64, size Vector2i.XY, start int64, end int64) { //gd:FontFile.render_range
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.render_range, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeInt<<16), &struct {
		cache_index int64
		size        Vector2i.XY
		start       int64
		end         int64
	}{cache_index, size, start, end})
}

/*
Renders specified glyph to the font cache texture.
*/
//go:nosplit
func (self class) RenderGlyph(cache_index int64, size Vector2i.XY, index int64) { //gd:FontFile.render_glyph
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.render_glyph, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVector2i<<8)|(gdextension.SizeInt<<12), &struct {
		cache_index int64
		size        Vector2i.XY
		index       int64
	}{cache_index, size, index})
}

/*
Adds override for [method Font.is_language_supported].
*/
//go:nosplit
func (self class) SetLanguageSupportOverride(language String.Readable, supported bool) { //gd:FontFile.set_language_support_override
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_language_support_override, 0|(gdextension.SizeString<<4)|(gdextension.SizeBool<<8), &struct {
		language  gdextension.String
		supported bool
	}{pointers.Get(gd.InternalString(language)), supported})
}

/*
Returns [code]true[/code] if support override is enabled for the [param language].
*/
//go:nosplit
func (self class) GetLanguageSupportOverride(language String.Readable) bool { //gd:FontFile.get_language_support_override
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_language_support_override, gdextension.SizeBool|(gdextension.SizeString<<4), &struct{ language gdextension.String }{pointers.Get(gd.InternalString(language))})
	var ret = r_ret
	return ret
}

/*
Remove language support override.
*/
//go:nosplit
func (self class) RemoveLanguageSupportOverride(language String.Readable) { //gd:FontFile.remove_language_support_override
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_language_support_override, 0|(gdextension.SizeString<<4), &struct{ language gdextension.String }{pointers.Get(gd.InternalString(language))})
}

/*
Returns list of language support overrides.
*/
//go:nosplit
func (self class) GetLanguageSupportOverrides() Packed.Strings { //gd:FontFile.get_language_support_overrides
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_language_support_overrides, gdextension.SizePackedArray, &struct{}{})
	var ret = Packed.Strings(Array.Through(gd.PackedStringArrayProxy{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

/*
Adds override for [method Font.is_script_supported].
*/
//go:nosplit
func (self class) SetScriptSupportOverride(script String.Readable, supported bool) { //gd:FontFile.set_script_support_override
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_script_support_override, 0|(gdextension.SizeString<<4)|(gdextension.SizeBool<<8), &struct {
		script    gdextension.String
		supported bool
	}{pointers.Get(gd.InternalString(script)), supported})
}

/*
Returns [code]true[/code] if support override is enabled for the [param script].
*/
//go:nosplit
func (self class) GetScriptSupportOverride(script String.Readable) bool { //gd:FontFile.get_script_support_override
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_script_support_override, gdextension.SizeBool|(gdextension.SizeString<<4), &struct{ script gdextension.String }{pointers.Get(gd.InternalString(script))})
	var ret = r_ret
	return ret
}

/*
Removes script support override.
*/
//go:nosplit
func (self class) RemoveScriptSupportOverride(script String.Readable) { //gd:FontFile.remove_script_support_override
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_script_support_override, 0|(gdextension.SizeString<<4), &struct{ script gdextension.String }{pointers.Get(gd.InternalString(script))})
}

/*
Returns list of script support overrides.
*/
//go:nosplit
func (self class) GetScriptSupportOverrides() Packed.Strings { //gd:FontFile.get_script_support_overrides
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_script_support_overrides, gdextension.SizePackedArray, &struct{}{})
	var ret = Packed.Strings(Array.Through(gd.PackedStringArrayProxy{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetOpentypeFeatureOverrides(overrides Dictionary.Any) { //gd:FontFile.set_opentype_feature_overrides
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_opentype_feature_overrides, 0|(gdextension.SizeDictionary<<4), &struct{ overrides gdextension.Dictionary }{pointers.Get(gd.InternalDictionary(overrides))})
}

//go:nosplit
func (self class) GetOpentypeFeatureOverrides() Dictionary.Any { //gd:FontFile.get_opentype_feature_overrides
	var r_ret = gdextension.Call[gdextension.Dictionary](gd.ObjectChecked(self.AsObject()), methods.get_opentype_feature_overrides, gdextension.SizeDictionary, &struct{}{})
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret)))
	return ret
}

/*
Returns the glyph index of a [param char], optionally modified by the [param variation_selector].
*/
//go:nosplit
func (self class) GetGlyphIndex(size int64, char int64, variation_selector int64) int64 { //gd:FontFile.get_glyph_index
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_glyph_index, gdextension.SizeInt|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeInt<<12), &struct {
		size               int64
		char               int64
		variation_selector int64
	}{size, char, variation_selector})
	var ret = r_ret
	return ret
}

/*
Returns character code associated with [param glyph_index], or [code]0[/code] if [param glyph_index] is invalid. See [method get_glyph_index].
*/
//go:nosplit
func (self class) GetCharFromGlyphIndex(size int64, glyph_index int64) int64 { //gd:FontFile.get_char_from_glyph_index
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_char_from_glyph_index, gdextension.SizeInt|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), &struct {
		size        int64
		glyph_index int64
	}{size, glyph_index})
	var ret = r_ret
	return ret
}
func (self class) AsFontFile() Advanced          { return Advanced{pointers.AsA[gdclass.FontFile](self[0])} }
func (self Instance) AsFontFile() Instance       { return Instance{pointers.AsA[gdclass.FontFile](self[0])} }
func (self *Extension[T]) AsFontFile() Instance  { return self.Super().AsFontFile() }
func (self class) AsFont() Font.Advanced         { return Font.Advanced{pointers.AsA[gdclass.Font](self[0])} }
func (self *Extension[T]) AsFont() Font.Instance { return self.Super().AsFont() }
func (self Instance) AsFont() Font.Instance {
	return Font.Instance{pointers.AsA[gdclass.Font](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Font.Advanced(self.AsFont()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Font.Instance(self.AsFont()), name)
	}
}
func init() {
	gdclass.Register("FontFile", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.FontFile](ptr)} })
}
