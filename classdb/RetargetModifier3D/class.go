// Code generated by the generate package DO NOT EDIT

// Package RetargetModifier3D provides methods for working with RetargetModifier3D object instances.
package RetargetModifier3D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/classdb/SkeletonModifier3D"
import "graphics.gd/classdb/SkeletonProfile"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Retrieves the pose (or global pose) relative to the parent Skeleton's rest in model space and transfers it to the child Skeleton.
This modifier rewrites the pose of the child skeleton directly in the parent skeleton's update process. This means that it overwrites the mapped bone pose set in the normal process on the target skeleton. If you want to set the target skeleton bone pose after retargeting, you will need to add a [SkeletonModifier3D] child to the target skeleton and thereby modify the pose.
[b]Note:[/b] When the [member use_global_pose] is enabled, even if it is an unmapped bone, it can cause visual problems because the global pose is applied ignoring the parent bone's pose [b]if it has mapped bone children[/b]. See also [member use_global_pose].
*/
type Instance [1]gdclass.RetargetModifier3D

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsRetargetModifier3D() Instance
}

/*
Sets [constant TRANSFORM_FLAG_POSITION] into [member enable].
*/
func (self Instance) SetPositionEnabled(enabled bool) { //gd:RetargetModifier3D.set_position_enabled
	Advanced(self).SetPositionEnabled(enabled)
}

/*
Returns [code]true[/code] if [member enable] has [constant TRANSFORM_FLAG_POSITION].
*/
func (self Instance) IsPositionEnabled() bool { //gd:RetargetModifier3D.is_position_enabled
	return bool(Advanced(self).IsPositionEnabled())
}

/*
Sets [constant TRANSFORM_FLAG_ROTATION] into [member enable].
*/
func (self Instance) SetRotationEnabled(enabled bool) { //gd:RetargetModifier3D.set_rotation_enabled
	Advanced(self).SetRotationEnabled(enabled)
}

/*
Returns [code]true[/code] if [member enable] has [constant TRANSFORM_FLAG_ROTATION].
*/
func (self Instance) IsRotationEnabled() bool { //gd:RetargetModifier3D.is_rotation_enabled
	return bool(Advanced(self).IsRotationEnabled())
}

/*
Sets [constant TRANSFORM_FLAG_SCALE] into [member enable].
*/
func (self Instance) SetScaleEnabled(enabled bool) { //gd:RetargetModifier3D.set_scale_enabled
	Advanced(self).SetScaleEnabled(enabled)
}

/*
Returns [code]true[/code] if [member enable] has [constant TRANSFORM_FLAG_SCALE].
*/
func (self Instance) IsScaleEnabled() bool { //gd:RetargetModifier3D.is_scale_enabled
	return bool(Advanced(self).IsScaleEnabled())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.RetargetModifier3D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("RetargetModifier3D"))
	casted := Instance{*(*gdclass.RetargetModifier3D)(unsafe.Pointer(&object))}
	return casted
}

func (self Instance) Profile() SkeletonProfile.Instance {
	return SkeletonProfile.Instance(class(self).GetProfile())
}

func (self Instance) SetProfile(value SkeletonProfile.Instance) {
	class(self).SetProfile(value)
}

func (self Instance) UseGlobalPose() bool {
	return bool(class(self).IsUsingGlobalPose())
}

func (self Instance) SetUseGlobalPose(value bool) {
	class(self).SetUseGlobalPose(value)
}

func (self Instance) Enable() TransformFlag {
	return TransformFlag(class(self).GetEnableFlags())
}

func (self Instance) SetEnable(value TransformFlag) {
	class(self).SetEnableFlags(value)
}

//go:nosplit
func (self class) SetProfile(profile [1]gdclass.SkeletonProfile) { //gd:RetargetModifier3D.set_profile
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RetargetModifier3D.Bind_set_profile), 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ profile gdextension.Object }{gdextension.Object(gd.ObjectChecked(profile[0].AsObject()))}))
}

//go:nosplit
func (self class) GetProfile() [1]gdclass.SkeletonProfile { //gd:RetargetModifier3D.get_profile
	var r_ret = gdextension.Call[gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RetargetModifier3D.Bind_get_profile), gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.SkeletonProfile{gd.PointerWithOwnershipTransferredToGo[gdclass.SkeletonProfile](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetUseGlobalPose(use_global_pose bool) { //gd:RetargetModifier3D.set_use_global_pose
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RetargetModifier3D.Bind_set_use_global_pose), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ use_global_pose bool }{use_global_pose}))
}

//go:nosplit
func (self class) IsUsingGlobalPose() bool { //gd:RetargetModifier3D.is_using_global_pose
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RetargetModifier3D.Bind_is_using_global_pose), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEnableFlags(enable_flags TransformFlag) { //gd:RetargetModifier3D.set_enable_flags
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RetargetModifier3D.Bind_set_enable_flags), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ enable_flags TransformFlag }{enable_flags}))
}

//go:nosplit
func (self class) GetEnableFlags() TransformFlag { //gd:RetargetModifier3D.get_enable_flags
	var r_ret = gdextension.Call[TransformFlag](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RetargetModifier3D.Bind_get_enable_flags), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets [constant TRANSFORM_FLAG_POSITION] into [member enable].
*/
//go:nosplit
func (self class) SetPositionEnabled(enabled bool) { //gd:RetargetModifier3D.set_position_enabled
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RetargetModifier3D.Bind_set_position_enabled), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

/*
Returns [code]true[/code] if [member enable] has [constant TRANSFORM_FLAG_POSITION].
*/
//go:nosplit
func (self class) IsPositionEnabled() bool { //gd:RetargetModifier3D.is_position_enabled
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RetargetModifier3D.Bind_is_position_enabled), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets [constant TRANSFORM_FLAG_ROTATION] into [member enable].
*/
//go:nosplit
func (self class) SetRotationEnabled(enabled bool) { //gd:RetargetModifier3D.set_rotation_enabled
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RetargetModifier3D.Bind_set_rotation_enabled), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

/*
Returns [code]true[/code] if [member enable] has [constant TRANSFORM_FLAG_ROTATION].
*/
//go:nosplit
func (self class) IsRotationEnabled() bool { //gd:RetargetModifier3D.is_rotation_enabled
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RetargetModifier3D.Bind_is_rotation_enabled), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets [constant TRANSFORM_FLAG_SCALE] into [member enable].
*/
//go:nosplit
func (self class) SetScaleEnabled(enabled bool) { //gd:RetargetModifier3D.set_scale_enabled
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RetargetModifier3D.Bind_set_scale_enabled), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

/*
Returns [code]true[/code] if [member enable] has [constant TRANSFORM_FLAG_SCALE].
*/
//go:nosplit
func (self class) IsScaleEnabled() bool { //gd:RetargetModifier3D.is_scale_enabled
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RetargetModifier3D.Bind_is_scale_enabled), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsRetargetModifier3D() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsRetargetModifier3D() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsRetargetModifier3D() Instance { return self.Super().AsRetargetModifier3D() }
func (self class) AsSkeletonModifier3D() SkeletonModifier3D.Advanced {
	return *((*SkeletonModifier3D.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsSkeletonModifier3D() SkeletonModifier3D.Instance {
	return self.Super().AsSkeletonModifier3D()
}
func (self Instance) AsSkeletonModifier3D() SkeletonModifier3D.Instance {
	return *((*SkeletonModifier3D.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode3D() Node3D.Advanced         { return *((*Node3D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode3D() Node3D.Instance { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance      { return *((*Node3D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsNode() Node.Advanced             { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance     { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance          { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(SkeletonModifier3D.Advanced(self.AsSkeletonModifier3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(SkeletonModifier3D.Instance(self.AsSkeletonModifier3D()), name)
	}
}
func init() {
	gdclass.Register("RetargetModifier3D", func(ptr gd.Object) any {
		return [1]gdclass.RetargetModifier3D{*(*gdclass.RetargetModifier3D)(unsafe.Pointer(&ptr))}
	})
}

type TransformFlag int //gd:RetargetModifier3D.TransformFlag

const (
	/*If set, allows to retarget the position.*/
	TransformFlagPosition TransformFlag = 1
	/*If set, allows to retarget the rotation.*/
	TransformFlagRotation TransformFlag = 2
	/*If set, allows to retarget the scale.*/
	TransformFlagScale TransformFlag = 4
	/*If set, allows to retarget the position/rotation/scale.*/
	TransformFlagAll TransformFlag = 7
)
