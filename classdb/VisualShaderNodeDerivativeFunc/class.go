// Code generated by the generate package DO NOT EDIT

// Package VisualShaderNodeDerivativeFunc provides methods for working with VisualShaderNodeDerivativeFunc object instances.
package VisualShaderNodeDerivativeFunc

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/VisualShaderNode"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This node is only available in [code]Fragment[/code] and [code]Light[/code] visual shaders.
*/
type Instance [1]gdclass.VisualShaderNodeDerivativeFunc

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_op_type   gdextension.MethodForClass `hash:"377800221"`
	get_op_type   gdextension.MethodForClass `hash:"3997800514"`
	set_function  gdextension.MethodForClass `hash:"1944704156"`
	get_function  gdextension.MethodForClass `hash:"2389093396"`
	set_precision gdextension.MethodForClass `hash:"797270566"`
	get_precision gdextension.MethodForClass `hash:"3822547323"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("VisualShaderNodeDerivativeFunc")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsVisualShaderNodeDerivativeFunc() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.VisualShaderNodeDerivativeFunc

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.VisualShaderNodeDerivativeFunc](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.VisualShaderNodeDerivativeFunc](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.VisualShaderNodeDerivativeFunc{pointers.Add[gdclass.VisualShaderNodeDerivativeFunc]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.VisualShaderNodeDerivativeFunc{pointers.New[gdclass.VisualShaderNodeDerivativeFunc]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) OpType() OpType {
	return OpType(class(self).GetOpType())
}

func (self Instance) SetOpType(value OpType) {
	class(self).SetOpType(value)
}

func (self Instance) Function() Function {
	return Function(class(self).GetFunction())
}

func (self Instance) SetFunction(value Function) {
	class(self).SetFunction(value)
}

func (self Instance) Precision() Precision {
	return Precision(class(self).GetPrecision())
}

func (self Instance) SetPrecision(value Precision) {
	class(self).SetPrecision(value)
}

//go:nosplit
func (self class) SetOpType(atype OpType) { //gd:VisualShaderNodeDerivativeFunc.set_op_type
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_op_type, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ atype OpType }{atype}))
}

//go:nosplit
func (self class) GetOpType() OpType { //gd:VisualShaderNodeDerivativeFunc.get_op_type
	var r_ret = gdextension.Call[OpType](gd.ObjectChecked(self.AsObject()), methods.get_op_type, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFunction(fn Function) { //gd:VisualShaderNodeDerivativeFunc.set_function
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_function, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ fn Function }{fn}))
}

//go:nosplit
func (self class) GetFunction() Function { //gd:VisualShaderNodeDerivativeFunc.get_function
	var r_ret = gdextension.Call[Function](gd.ObjectChecked(self.AsObject()), methods.get_function, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPrecision(precision Precision) { //gd:VisualShaderNodeDerivativeFunc.set_precision
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_precision, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ precision Precision }{precision}))
}

//go:nosplit
func (self class) GetPrecision() Precision { //gd:VisualShaderNodeDerivativeFunc.get_precision
	var r_ret = gdextension.Call[Precision](gd.ObjectChecked(self.AsObject()), methods.get_precision, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsVisualShaderNodeDerivativeFunc() Advanced {
	return Advanced{pointers.AsA[gdclass.VisualShaderNodeDerivativeFunc](self[0])}
}
func (self Instance) AsVisualShaderNodeDerivativeFunc() Instance {
	return Instance{pointers.AsA[gdclass.VisualShaderNodeDerivativeFunc](self[0])}
}
func (self *Extension[T]) AsVisualShaderNodeDerivativeFunc() Instance {
	return self.Super().AsVisualShaderNodeDerivativeFunc()
}
func (self class) AsVisualShaderNode() VisualShaderNode.Advanced {
	return VisualShaderNode.Advanced{pointers.AsA[gdclass.VisualShaderNode](self[0])}
}
func (self *Extension[T]) AsVisualShaderNode() VisualShaderNode.Instance {
	return self.Super().AsVisualShaderNode()
}
func (self Instance) AsVisualShaderNode() VisualShaderNode.Instance {
	return VisualShaderNode.Instance{pointers.AsA[gdclass.VisualShaderNode](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualShaderNode.Advanced(self.AsVisualShaderNode()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualShaderNode.Instance(self.AsVisualShaderNode()), name)
	}
}
func init() {
	gdclass.Register("VisualShaderNodeDerivativeFunc", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.VisualShaderNodeDerivativeFunc](ptr)} })
}

type OpType int //gd:VisualShaderNodeDerivativeFunc.OpType

const (
	/*A floating-point scalar.*/
	OpTypeScalar OpType = 0
	/*A 2D vector type.*/
	OpTypeVector2d OpType = 1
	/*A 3D vector type.*/
	OpTypeVector3d OpType = 2
	/*A 4D vector type.*/
	OpTypeVector4d OpType = 3
	/*Represents the size of the [enum OpType] enum.*/
	OpTypeMax OpType = 4
)

type Function int //gd:VisualShaderNodeDerivativeFunc.Function

const (
	/*Sum of absolute derivative in [code]x[/code] and [code]y[/code].*/
	FuncSum Function = 0
	/*Derivative in [code]x[/code] using local differencing.*/
	FuncX Function = 1
	/*Derivative in [code]y[/code] using local differencing.*/
	FuncY Function = 2
	/*Represents the size of the [enum Function] enum.*/
	FuncMax Function = 3
)

type Precision int //gd:VisualShaderNodeDerivativeFunc.Precision

const (
	/*No precision is specified, the GPU driver is allowed to use whatever level of precision it chooses. This is the default option and is equivalent to using [code]dFdx()[/code] or [code]dFdy()[/code] in text shaders.*/
	PrecisionNone Precision = 0
	/*The derivative will be calculated using the current fragment's neighbors (which may not include the current fragment). This tends to be faster than using [constant PRECISION_FINE], but may not be suitable when more precision is needed. This is equivalent to using [code]dFdxCoarse()[/code] or [code]dFdyCoarse()[/code] in text shaders.*/
	PrecisionCoarse Precision = 1
	/*The derivative will be calculated using the current fragment and its immediate neighbors. This tends to be slower than using [constant PRECISION_COARSE], but may be necessary when more precision is needed. This is equivalent to using [code]dFdxFine()[/code] or [code]dFdyFine()[/code] in text shaders.*/
	PrecisionFine Precision = 2
	/*Represents the size of the [enum Precision] enum.*/
	PrecisionMax Precision = 3
)
