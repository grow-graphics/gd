// Code generated by the generate package DO NOT EDIT

// Package EditorProperty provides methods for working with EditorProperty object instances.
package EditorProperty

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Container"
import "graphics.gd/classdb/Control"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A custom control for editing properties that can be added to the [EditorInspector]. It is added via [EditorInspectorPlugin].

	See [Interface] for methods that can be overridden by a [Class] that extends it.
*/
type Instance [1]gdclass.EditorProperty

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_label               gdextension.MethodForClass `hash:"83702148"`
	get_label               gdextension.MethodForClass `hash:"201670096"`
	set_read_only           gdextension.MethodForClass `hash:"2586408642"`
	is_read_only            gdextension.MethodForClass `hash:"36873697"`
	set_draw_label          gdextension.MethodForClass `hash:"2586408642"`
	is_draw_label           gdextension.MethodForClass `hash:"36873697"`
	set_draw_background     gdextension.MethodForClass `hash:"2586408642"`
	is_draw_background      gdextension.MethodForClass `hash:"36873697"`
	set_checkable           gdextension.MethodForClass `hash:"2586408642"`
	is_checkable            gdextension.MethodForClass `hash:"36873697"`
	set_checked             gdextension.MethodForClass `hash:"2586408642"`
	is_checked              gdextension.MethodForClass `hash:"36873697"`
	set_draw_warning        gdextension.MethodForClass `hash:"2586408642"`
	is_draw_warning         gdextension.MethodForClass `hash:"36873697"`
	set_keying              gdextension.MethodForClass `hash:"2586408642"`
	is_keying               gdextension.MethodForClass `hash:"36873697"`
	set_deletable           gdextension.MethodForClass `hash:"2586408642"`
	is_deletable            gdextension.MethodForClass `hash:"36873697"`
	get_edited_property     gdextension.MethodForClass `hash:"2002593661"`
	get_edited_object       gdextension.MethodForClass `hash:"2050059866"`
	update_property         gdextension.MethodForClass `hash:"3218959716"`
	add_focusable           gdextension.MethodForClass `hash:"1496901182"`
	set_bottom_editor       gdextension.MethodForClass `hash:"1496901182"`
	set_selectable          gdextension.MethodForClass `hash:"2586408642"`
	is_selectable           gdextension.MethodForClass `hash:"36873697"`
	set_use_folding         gdextension.MethodForClass `hash:"2586408642"`
	is_using_folding        gdextension.MethodForClass `hash:"36873697"`
	set_name_split_ratio    gdextension.MethodForClass `hash:"373806689"`
	get_name_split_ratio    gdextension.MethodForClass `hash:"1740695150"`
	deselect                gdextension.MethodForClass `hash:"3218959716"`
	is_selected             gdextension.MethodForClass `hash:"36873697"`
	select_                 gdextension.MethodForClass `hash:"1025054187"`
	set_object_and_property gdextension.MethodForClass `hash:"4157606280"`
	set_label_reference     gdextension.MethodForClass `hash:"1496901182"`
	emit_changed            gdextension.MethodForClass `hash:"1822500399"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("EditorProperty")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, true)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.EditorProperty

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsEditorProperty() Instance
}
type Interface interface {
	//When this virtual function is called, you must update your editor.
	UpdateProperty()
	//Called when the read-only status of the property is changed. It may be used to change custom controls into a read-only or modifiable state.
	SetReadOnly(read_only bool)
}

// Implementation implements [Interface] with empty methods.
type Implementation = implementation

type implementation struct{}

func (self implementation) UpdateProperty()            { return }
func (self implementation) SetReadOnly(read_only bool) { return }

/*
When this virtual function is called, you must update your editor.
*/
func (Instance) _update_property(impl func(ptr gdclass.Receiver)) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args gd.Address, p_back gd.Address) {
		self := gdclass.Receiver(reflect.ValueOf(class).UnsafePointer())
		impl(self)
	}
}

/*
Called when the read-only status of the property is changed. It may be used to change custom controls into a read-only or modifiable state.
*/
func (Instance) _set_read_only(impl func(ptr gdclass.Receiver, read_only bool)) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args gd.Address, p_back gd.Address) {
		var read_only = gd.UnsafeGet[bool](p_args, 0)
		self := gdclass.Receiver(reflect.ValueOf(class).UnsafePointer())
		impl(self, read_only)
	}
}

/*
Gets the edited property. If your editor is for a single property (added via [method EditorInspectorPlugin._parse_property]), then this will return the property.
*/
func (self Instance) GetEditedProperty() string { //gd:EditorProperty.get_edited_property
	return string(Advanced(self).GetEditedProperty().String())
}

/*
Gets the edited object.
*/
func (self Instance) GetEditedObject() Object.Instance { //gd:EditorProperty.get_edited_object
	return Object.Instance(Advanced(self).GetEditedObject())
}

/*
Forces refresh of the property display.
*/
func (self Instance) UpdateProperty() { //gd:EditorProperty.update_property
	Advanced(self).UpdateProperty()
}

/*
If any of the controls added can gain keyboard focus, add it here. This ensures that focus will be restored if the inspector is refreshed.
*/
func (self Instance) AddFocusable(control Control.Instance) { //gd:EditorProperty.add_focusable
	Advanced(self).AddFocusable(control)
}

/*
Puts the [param editor] control below the property label. The control must be previously added using [method Node.add_child].
*/
func (self Instance) SetBottomEditor(editor Control.Instance) { //gd:EditorProperty.set_bottom_editor
	Advanced(self).SetBottomEditor(editor)
}

/*
Draw property as not selected. Used by the inspector.
*/
func (self Instance) Deselect() { //gd:EditorProperty.deselect
	Advanced(self).Deselect()
}

/*
Returns [code]true[/code] if property is drawn as selected. Used by the inspector.
*/
func (self Instance) IsSelected() bool { //gd:EditorProperty.is_selected
	return bool(Advanced(self).IsSelected())
}

/*
Draw property as selected. Used by the inspector.
*/
func (self Instance) Select() { //gd:EditorProperty.select
	Advanced(self).Select(int64(-1))
}

/*
Draw property as selected. Used by the inspector.
*/
func (self Expanded) Select(focusable int) { //gd:EditorProperty.select
	Advanced(self).Select(int64(focusable))
}

/*
Assigns object and property to edit.
*/
func (self Instance) SetObjectAndProperty(obj Object.Instance, property string) { //gd:EditorProperty.set_object_and_property
	Advanced(self).SetObjectAndProperty(obj, String.Name(String.New(property)))
}

/*
Used by the inspector, set to a control that will be used as a reference to calculate the size of the label.
*/
func (self Instance) SetLabelReference(control Control.Instance) { //gd:EditorProperty.set_label_reference
	Advanced(self).SetLabelReference(control)
}

/*
If one or several properties have changed, this must be called. [param field] is used in case your editor can modify fields separately (as an example, Vector3.x). The [param changing] argument avoids the editor requesting this property to be refreshed (leave as [code]false[/code] if unsure).
*/
func (self Instance) EmitChanged(property string, value any) { //gd:EditorProperty.emit_changed
	Advanced(self).EmitChanged(String.Name(String.New(property)), variant.New(value), String.Name(String.New("")), false)
}

/*
If one or several properties have changed, this must be called. [param field] is used in case your editor can modify fields separately (as an example, Vector3.x). The [param changing] argument avoids the editor requesting this property to be refreshed (leave as [code]false[/code] if unsure).
*/
func (self Expanded) EmitChanged(property string, value any, field string, changing bool) { //gd:EditorProperty.emit_changed
	Advanced(self).EmitChanged(String.Name(String.New(property)), variant.New(value), String.Name(String.New(field)), changing)
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.EditorProperty

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.EditorProperty](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.EditorProperty](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.EditorProperty{pointers.Add[gdclass.EditorProperty]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.EditorProperty{pointers.New[gdclass.EditorProperty]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Label() string {
	return string(class(self).GetLabel().String())
}

func (self Instance) SetLabel(value string) {
	class(self).SetLabel(String.New(value))
}

func (self Instance) ReadOnly() bool {
	return bool(class(self).IsReadOnly())
}

func (self Instance) DrawLabel() bool {
	return bool(class(self).IsDrawLabel())
}

func (self Instance) SetDrawLabel(value bool) {
	class(self).SetDrawLabel(value)
}

func (self Instance) DrawBackground() bool {
	return bool(class(self).IsDrawBackground())
}

func (self Instance) SetDrawBackground(value bool) {
	class(self).SetDrawBackground(value)
}

func (self Instance) Checkable() bool {
	return bool(class(self).IsCheckable())
}

func (self Instance) SetCheckable(value bool) {
	class(self).SetCheckable(value)
}

func (self Instance) Checked() bool {
	return bool(class(self).IsChecked())
}

func (self Instance) SetChecked(value bool) {
	class(self).SetChecked(value)
}

func (self Instance) DrawWarning() bool {
	return bool(class(self).IsDrawWarning())
}

func (self Instance) SetDrawWarning(value bool) {
	class(self).SetDrawWarning(value)
}

func (self Instance) Keying() bool {
	return bool(class(self).IsKeying())
}

func (self Instance) SetKeying(value bool) {
	class(self).SetKeying(value)
}

func (self Instance) Deletable() bool {
	return bool(class(self).IsDeletable())
}

func (self Instance) SetDeletable(value bool) {
	class(self).SetDeletable(value)
}

func (self Instance) Selectable() bool {
	return bool(class(self).IsSelectable())
}

func (self Instance) SetSelectable(value bool) {
	class(self).SetSelectable(value)
}

func (self Instance) UseFolding() bool {
	return bool(class(self).IsUsingFolding())
}

func (self Instance) SetUseFolding(value bool) {
	class(self).SetUseFolding(value)
}

func (self Instance) NameSplitRatio() Float.X {
	return Float.X(Float.X(class(self).GetNameSplitRatio()))
}

func (self Instance) SetNameSplitRatio(value Float.X) {
	class(self).SetNameSplitRatio(float64(value))
}

/*
When this virtual function is called, you must update your editor.
*/
func (class) _update_property(impl func(ptr gdclass.Receiver)) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args gd.Address, p_back gd.Address) {
		self := gdclass.Receiver(reflect.ValueOf(class).UnsafePointer())
		impl(self)
	}
}

/*
Called when the read-only status of the property is changed. It may be used to change custom controls into a read-only or modifiable state.
*/
func (class) _set_read_only(impl func(ptr gdclass.Receiver, read_only bool)) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args gd.Address, p_back gd.Address) {
		var read_only = gd.UnsafeGet[bool](p_args, 0)
		self := gdclass.Receiver(reflect.ValueOf(class).UnsafePointer())
		impl(self, read_only)
	}
}

//go:nosplit
func (self class) SetLabel(text String.Readable) { //gd:EditorProperty.set_label
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_label, 0|(gdextension.SizeString<<4), &struct{ text gdextension.String }{pointers.Get(gd.InternalString(text))})
}

//go:nosplit
func (self class) GetLabel() String.Readable { //gd:EditorProperty.get_label
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_label, gdextension.SizeString, &struct{}{})
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetReadOnly(read_only bool) { //gd:EditorProperty.set_read_only
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_read_only, 0|(gdextension.SizeBool<<4), &struct{ read_only bool }{read_only})
}

//go:nosplit
func (self class) IsReadOnly() bool { //gd:EditorProperty.is_read_only
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_read_only, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDrawLabel(draw_label bool) { //gd:EditorProperty.set_draw_label
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_draw_label, 0|(gdextension.SizeBool<<4), &struct{ draw_label bool }{draw_label})
}

//go:nosplit
func (self class) IsDrawLabel() bool { //gd:EditorProperty.is_draw_label
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_draw_label, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDrawBackground(draw_background bool) { //gd:EditorProperty.set_draw_background
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_draw_background, 0|(gdextension.SizeBool<<4), &struct{ draw_background bool }{draw_background})
}

//go:nosplit
func (self class) IsDrawBackground() bool { //gd:EditorProperty.is_draw_background
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_draw_background, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCheckable(checkable bool) { //gd:EditorProperty.set_checkable
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_checkable, 0|(gdextension.SizeBool<<4), &struct{ checkable bool }{checkable})
}

//go:nosplit
func (self class) IsCheckable() bool { //gd:EditorProperty.is_checkable
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_checkable, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetChecked(checked bool) { //gd:EditorProperty.set_checked
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_checked, 0|(gdextension.SizeBool<<4), &struct{ checked bool }{checked})
}

//go:nosplit
func (self class) IsChecked() bool { //gd:EditorProperty.is_checked
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_checked, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDrawWarning(draw_warning bool) { //gd:EditorProperty.set_draw_warning
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_draw_warning, 0|(gdextension.SizeBool<<4), &struct{ draw_warning bool }{draw_warning})
}

//go:nosplit
func (self class) IsDrawWarning() bool { //gd:EditorProperty.is_draw_warning
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_draw_warning, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetKeying(keying bool) { //gd:EditorProperty.set_keying
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_keying, 0|(gdextension.SizeBool<<4), &struct{ keying bool }{keying})
}

//go:nosplit
func (self class) IsKeying() bool { //gd:EditorProperty.is_keying
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_keying, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDeletable(deletable bool) { //gd:EditorProperty.set_deletable
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_deletable, 0|(gdextension.SizeBool<<4), &struct{ deletable bool }{deletable})
}

//go:nosplit
func (self class) IsDeletable() bool { //gd:EditorProperty.is_deletable
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_deletable, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Gets the edited property. If your editor is for a single property (added via [method EditorInspectorPlugin._parse_property]), then this will return the property.
*/
//go:nosplit
func (self class) GetEditedProperty() String.Name { //gd:EditorProperty.get_edited_property
	var r_ret = gdextension.Call[gdextension.StringName](gd.ObjectChecked(self.AsObject()), methods.get_edited_property, gdextension.SizeStringName, &struct{}{})
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret))))
	return ret
}

/*
Gets the edited object.
*/
//go:nosplit
func (self class) GetEditedObject() [1]gd.Object { //gd:EditorProperty.get_edited_object
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_edited_object, gdextension.SizeObject, &struct{}{})
	var ret = [1]gd.Object{gd.PointerMustAssertInstanceID[gd.Object](r_ret)}
	return ret
}

/*
Forces refresh of the property display.
*/
//go:nosplit
func (self class) UpdateProperty() { //gd:EditorProperty.update_property
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.update_property, 0, &struct{}{})
}

/*
If any of the controls added can gain keyboard focus, add it here. This ensures that focus will be restored if the inspector is refreshed.
*/
//go:nosplit
func (self class) AddFocusable(control [1]gdclass.Control) { //gd:EditorProperty.add_focusable
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.add_focusable, 0|(gdextension.SizeObject<<4), &struct{ control gdextension.Object }{gdextension.Object(gd.PointerWithOwnershipTransferredToGodot(control[0].AsObject()[0]))})
}

/*
Puts the [param editor] control below the property label. The control must be previously added using [method Node.add_child].
*/
//go:nosplit
func (self class) SetBottomEditor(editor [1]gdclass.Control) { //gd:EditorProperty.set_bottom_editor
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bottom_editor, 0|(gdextension.SizeObject<<4), &struct{ editor gdextension.Object }{gdextension.Object(gd.PointerWithOwnershipTransferredToGodot(editor[0].AsObject()[0]))})
}

//go:nosplit
func (self class) SetSelectable(selectable bool) { //gd:EditorProperty.set_selectable
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_selectable, 0|(gdextension.SizeBool<<4), &struct{ selectable bool }{selectable})
}

//go:nosplit
func (self class) IsSelectable() bool { //gd:EditorProperty.is_selectable
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_selectable, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetUseFolding(use_folding bool) { //gd:EditorProperty.set_use_folding
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_use_folding, 0|(gdextension.SizeBool<<4), &struct{ use_folding bool }{use_folding})
}

//go:nosplit
func (self class) IsUsingFolding() bool { //gd:EditorProperty.is_using_folding
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_using_folding, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetNameSplitRatio(ratio float64) { //gd:EditorProperty.set_name_split_ratio
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_name_split_ratio, 0|(gdextension.SizeFloat<<4), &struct{ ratio float64 }{ratio})
}

//go:nosplit
func (self class) GetNameSplitRatio() float64 { //gd:EditorProperty.get_name_split_ratio
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_name_split_ratio, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Draw property as not selected. Used by the inspector.
*/
//go:nosplit
func (self class) Deselect() { //gd:EditorProperty.deselect
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.deselect, 0, &struct{}{})
}

/*
Returns [code]true[/code] if property is drawn as selected. Used by the inspector.
*/
//go:nosplit
func (self class) IsSelected() bool { //gd:EditorProperty.is_selected
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_selected, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Draw property as selected. Used by the inspector.
*/
//go:nosplit
func (self class) Select(focusable int64) { //gd:EditorProperty.select_
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.select_, 0|(gdextension.SizeInt<<4), &struct{ focusable int64 }{focusable})
}

/*
Assigns object and property to edit.
*/
//go:nosplit
func (self class) SetObjectAndProperty(obj [1]gd.Object, property String.Name) { //gd:EditorProperty.set_object_and_property
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_object_and_property, 0|(gdextension.SizeObject<<4)|(gdextension.SizeStringName<<8), &struct {
		obj      gdextension.Object
		property gdextension.StringName
	}{gdextension.Object(gd.ObjectChecked(obj[0].AsObject())), pointers.Get(gd.InternalStringName(property))})
}

/*
Used by the inspector, set to a control that will be used as a reference to calculate the size of the label.
*/
//go:nosplit
func (self class) SetLabelReference(control [1]gdclass.Control) { //gd:EditorProperty.set_label_reference
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_label_reference, 0|(gdextension.SizeObject<<4), &struct{ control gdextension.Object }{gdextension.Object(gd.ObjectChecked(control[0].AsObject()))})
}

/*
If one or several properties have changed, this must be called. [param field] is used in case your editor can modify fields separately (as an example, Vector3.x). The [param changing] argument avoids the editor requesting this property to be refreshed (leave as [code]false[/code] if unsure).
*/
//go:nosplit
func (self class) EmitChanged(property String.Name, value variant.Any, field String.Name, changing bool) { //gd:EditorProperty.emit_changed
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.emit_changed, 0|(gdextension.SizeStringName<<4)|(gdextension.SizeVariant<<8)|(gdextension.SizeStringName<<12)|(gdextension.SizeBool<<16), &struct {
		property gdextension.StringName
		value    gdextension.Variant
		field    gdextension.StringName
		changing bool
	}{pointers.Get(gd.InternalStringName(property)), gdextension.Variant(pointers.Get(gd.InternalVariant(value))), pointers.Get(gd.InternalStringName(field)), changing})
}
func (self Instance) OnPropertyChanged(cb func(property string, value any, field string, changing bool), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("property_changed"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) PropertyChanged() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`PropertyChanged`))))
}

func (self Instance) OnMultiplePropertiesChanged(cb func(properties []string, value []any), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("multiple_properties_changed"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) MultiplePropertiesChanged() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`MultiplePropertiesChanged`))))
}

func (self Instance) OnPropertyKeyed(cb func(property string), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("property_keyed"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) PropertyKeyed() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`PropertyKeyed`))))
}

func (self Instance) OnPropertyDeleted(cb func(property string), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("property_deleted"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) PropertyDeleted() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`PropertyDeleted`))))
}

func (self Instance) OnPropertyKeyedWithValue(cb func(property string, value any), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("property_keyed_with_value"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) PropertyKeyedWithValue() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`PropertyKeyedWithValue`))))
}

func (self Instance) OnPropertyChecked(cb func(property string, checked bool), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("property_checked"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) PropertyChecked() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`PropertyChecked`))))
}

func (self Instance) OnPropertyFavorited(cb func(property string, favorited bool), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("property_favorited"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) PropertyFavorited() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`PropertyFavorited`))))
}

func (self Instance) OnPropertyPinned(cb func(property string, pinned bool), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("property_pinned"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) PropertyPinned() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`PropertyPinned`))))
}

func (self Instance) OnPropertyCanRevertChanged(cb func(property string, can_revert bool), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("property_can_revert_changed"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) PropertyCanRevertChanged() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`PropertyCanRevertChanged`))))
}

func (self Instance) OnResourceSelected(cb func(path string, resource Resource.Instance), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("resource_selected"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) ResourceSelected() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`ResourceSelected`))))
}

func (self Instance) OnObjectIdSelected(cb func(property string, id int), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("object_id_selected"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) ObjectIdSelected() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`ObjectIdSelected`))))
}

func (self Instance) OnSelected(cb func(path string, focusable_idx int), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("selected"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) Selected() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`Selected`))))
}

func (self class) AsEditorProperty() Advanced {
	return Advanced{pointers.AsA[gdclass.EditorProperty](self[0])}
}
func (self Instance) AsEditorProperty() Instance {
	return Instance{pointers.AsA[gdclass.EditorProperty](self[0])}
}
func (self *Extension[T]) AsEditorProperty() Instance { return self.Super().AsEditorProperty() }
func (self class) AsContainer() Container.Advanced {
	return Container.Advanced{pointers.AsA[gdclass.Container](self[0])}
}
func (self *Extension[T]) AsContainer() Container.Instance { return self.Super().AsContainer() }
func (self Instance) AsContainer() Container.Instance {
	return Container.Instance{pointers.AsA[gdclass.Container](self[0])}
}
func (self class) AsControl() Control.Advanced {
	return Control.Advanced{pointers.AsA[gdclass.Control](self[0])}
}
func (self *Extension[T]) AsControl() Control.Instance { return self.Super().AsControl() }
func (self Instance) AsControl() Control.Instance {
	return Control.Instance{pointers.AsA[gdclass.Control](self[0])}
}
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return CanvasItem.Advanced{pointers.AsA[gdclass.CanvasItem](self[0])}
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return CanvasItem.Instance{pointers.AsA[gdclass.CanvasItem](self[0])}
}
func (self class) AsNode() Node.Advanced         { return Node.Advanced{pointers.AsA[gdclass.Node](self[0])} }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance {
	return Node.Instance{pointers.AsA[gdclass.Node](self[0])}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	case "_update_property":
		return reflect.ValueOf(self._update_property)
	case "_set_read_only":
		return reflect.ValueOf(self._set_read_only)
	default:
		return gd.VirtualByName(Container.Advanced(self.AsContainer()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	case "_update_property":
		return reflect.ValueOf(self._update_property)
	case "_set_read_only":
		return reflect.ValueOf(self._set_read_only)
	default:
		return gd.VirtualByName(Container.Instance(self.AsContainer()), name)
	}
}
func init() {
	gdclass.Register("EditorProperty", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.EditorProperty](ptr)} })
}
