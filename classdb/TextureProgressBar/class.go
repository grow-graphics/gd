// Code generated by the generate package DO NOT EDIT

// Package TextureProgressBar provides methods for working with TextureProgressBar object instances.
package TextureProgressBar

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Control"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Range"
import "graphics.gd/classdb/Texture2D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/Rect2"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
TextureProgressBar works like [ProgressBar], but uses up to 3 textures instead of Godot's [Theme] resource. It can be used to create horizontal, vertical and radial progress bars.
*/
type Instance [1]gdclass.TextureProgressBar

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsTextureProgressBar() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.TextureProgressBar

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("TextureProgressBar"))
	casted := Instance{*(*gdclass.TextureProgressBar)(unsafe.Pointer(&object))}
	return casted
}

func (self Instance) FillMode() int {
	return int(int(class(self).GetFillMode()))
}

func (self Instance) SetFillMode(value int) {
	class(self).SetFillMode(int64(value))
}

func (self Instance) RadialInitialAngle() Angle.Radians {
	return Angle.Radians(Float.X(class(self).GetRadialInitialAngle()))
}

func (self Instance) SetRadialInitialAngle(value Angle.Radians) {
	class(self).SetRadialInitialAngle(float64(value))
}

func (self Instance) RadialFillDegrees() Float.X {
	return Float.X(Float.X(class(self).GetFillDegrees()))
}

func (self Instance) SetRadialFillDegrees(value Float.X) {
	class(self).SetFillDegrees(float64(value))
}

func (self Instance) RadialCenterOffset() Vector2.XY {
	return Vector2.XY(class(self).GetRadialCenterOffset())
}

func (self Instance) SetRadialCenterOffset(value Vector2.XY) {
	class(self).SetRadialCenterOffset(Vector2.XY(value))
}

func (self Instance) NinePatchStretch() bool {
	return bool(class(self).GetNinePatchStretch())
}

func (self Instance) SetNinePatchStretch(value bool) {
	class(self).SetNinePatchStretch(value)
}

func (self Instance) StretchMarginLeft() int {
	return int(int(class(self).GetStretchMargin(0)))
}

func (self Instance) SetStretchMarginLeft(value int) {
	class(self).SetStretchMargin(0, int64(value))
}

func (self Instance) StretchMarginTop() int {
	return int(int(class(self).GetStretchMargin(1)))
}

func (self Instance) SetStretchMarginTop(value int) {
	class(self).SetStretchMargin(1, int64(value))
}

func (self Instance) StretchMarginRight() int {
	return int(int(class(self).GetStretchMargin(2)))
}

func (self Instance) SetStretchMarginRight(value int) {
	class(self).SetStretchMargin(2, int64(value))
}

func (self Instance) StretchMarginBottom() int {
	return int(int(class(self).GetStretchMargin(3)))
}

func (self Instance) SetStretchMarginBottom(value int) {
	class(self).SetStretchMargin(3, int64(value))
}

func (self Instance) TextureUnder() Texture2D.Instance {
	return Texture2D.Instance(class(self).GetUnderTexture())
}

func (self Instance) SetTextureUnder(value Texture2D.Instance) {
	class(self).SetUnderTexture(value)
}

func (self Instance) TextureOver() Texture2D.Instance {
	return Texture2D.Instance(class(self).GetOverTexture())
}

func (self Instance) SetTextureOver(value Texture2D.Instance) {
	class(self).SetOverTexture(value)
}

func (self Instance) TextureProgress() Texture2D.Instance {
	return Texture2D.Instance(class(self).GetProgressTexture())
}

func (self Instance) SetTextureProgress(value Texture2D.Instance) {
	class(self).SetProgressTexture(value)
}

func (self Instance) TextureProgressOffset() Vector2.XY {
	return Vector2.XY(class(self).GetTextureProgressOffset())
}

func (self Instance) SetTextureProgressOffset(value Vector2.XY) {
	class(self).SetTextureProgressOffset(Vector2.XY(value))
}

func (self Instance) TintUnder() Color.RGBA {
	return Color.RGBA(class(self).GetTintUnder())
}

func (self Instance) SetTintUnder(value Color.RGBA) {
	class(self).SetTintUnder(Color.RGBA(value))
}

func (self Instance) TintOver() Color.RGBA {
	return Color.RGBA(class(self).GetTintOver())
}

func (self Instance) SetTintOver(value Color.RGBA) {
	class(self).SetTintOver(Color.RGBA(value))
}

func (self Instance) TintProgress() Color.RGBA {
	return Color.RGBA(class(self).GetTintProgress())
}

func (self Instance) SetTintProgress(value Color.RGBA) {
	class(self).SetTintProgress(Color.RGBA(value))
}

//go:nosplit
func (self class) SetUnderTexture(tex [1]gdclass.Texture2D) { //gd:TextureProgressBar.set_under_texture
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_set_under_texture), 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ tex gdextension.Object }{gdextension.Object(gd.ObjectChecked(tex[0].AsObject()))}))
}

//go:nosplit
func (self class) GetUnderTexture() [1]gdclass.Texture2D { //gd:TextureProgressBar.get_under_texture
	var r_ret = gdextension.Call[gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_get_under_texture), gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Texture2D{gd.PointerWithOwnershipTransferredToGo[gdclass.Texture2D](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetProgressTexture(tex [1]gdclass.Texture2D) { //gd:TextureProgressBar.set_progress_texture
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_set_progress_texture), 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ tex gdextension.Object }{gdextension.Object(gd.ObjectChecked(tex[0].AsObject()))}))
}

//go:nosplit
func (self class) GetProgressTexture() [1]gdclass.Texture2D { //gd:TextureProgressBar.get_progress_texture
	var r_ret = gdextension.Call[gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_get_progress_texture), gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Texture2D{gd.PointerWithOwnershipTransferredToGo[gdclass.Texture2D](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetOverTexture(tex [1]gdclass.Texture2D) { //gd:TextureProgressBar.set_over_texture
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_set_over_texture), 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ tex gdextension.Object }{gdextension.Object(gd.ObjectChecked(tex[0].AsObject()))}))
}

//go:nosplit
func (self class) GetOverTexture() [1]gdclass.Texture2D { //gd:TextureProgressBar.get_over_texture
	var r_ret = gdextension.Call[gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_get_over_texture), gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Texture2D{gd.PointerWithOwnershipTransferredToGo[gdclass.Texture2D](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetFillMode(mode int64) { //gd:TextureProgressBar.set_fill_mode
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_set_fill_mode), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode int64 }{mode}))
}

//go:nosplit
func (self class) GetFillMode() int64 { //gd:TextureProgressBar.get_fill_mode
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_get_fill_mode), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTintUnder(tint Color.RGBA) { //gd:TextureProgressBar.set_tint_under
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_set_tint_under), 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ tint Color.RGBA }{tint}))
}

//go:nosplit
func (self class) GetTintUnder() Color.RGBA { //gd:TextureProgressBar.get_tint_under
	var r_ret = gdextension.Call[Color.RGBA](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_get_tint_under), gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTintProgress(tint Color.RGBA) { //gd:TextureProgressBar.set_tint_progress
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_set_tint_progress), 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ tint Color.RGBA }{tint}))
}

//go:nosplit
func (self class) GetTintProgress() Color.RGBA { //gd:TextureProgressBar.get_tint_progress
	var r_ret = gdextension.Call[Color.RGBA](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_get_tint_progress), gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTintOver(tint Color.RGBA) { //gd:TextureProgressBar.set_tint_over
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_set_tint_over), 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ tint Color.RGBA }{tint}))
}

//go:nosplit
func (self class) GetTintOver() Color.RGBA { //gd:TextureProgressBar.get_tint_over
	var r_ret = gdextension.Call[Color.RGBA](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_get_tint_over), gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTextureProgressOffset(offset Vector2.XY) { //gd:TextureProgressBar.set_texture_progress_offset
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_set_texture_progress_offset), 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ offset Vector2.XY }{offset}))
}

//go:nosplit
func (self class) GetTextureProgressOffset() Vector2.XY { //gd:TextureProgressBar.get_texture_progress_offset
	var r_ret = gdextension.Call[Vector2.XY](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_get_texture_progress_offset), gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRadialInitialAngle(mode float64) { //gd:TextureProgressBar.set_radial_initial_angle
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_set_radial_initial_angle), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ mode float64 }{mode}))
}

//go:nosplit
func (self class) GetRadialInitialAngle() float64 { //gd:TextureProgressBar.get_radial_initial_angle
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_get_radial_initial_angle), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRadialCenterOffset(mode Vector2.XY) { //gd:TextureProgressBar.set_radial_center_offset
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_set_radial_center_offset), 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ mode Vector2.XY }{mode}))
}

//go:nosplit
func (self class) GetRadialCenterOffset() Vector2.XY { //gd:TextureProgressBar.get_radial_center_offset
	var r_ret = gdextension.Call[Vector2.XY](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_get_radial_center_offset), gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFillDegrees(mode float64) { //gd:TextureProgressBar.set_fill_degrees
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_set_fill_degrees), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ mode float64 }{mode}))
}

//go:nosplit
func (self class) GetFillDegrees() float64 { //gd:TextureProgressBar.get_fill_degrees
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_get_fill_degrees), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets the stretch margin with the specified index. See [member stretch_margin_bottom] and related properties.
*/
//go:nosplit
func (self class) SetStretchMargin(margin Rect2.Side, value int64) { //gd:TextureProgressBar.set_stretch_margin
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_set_stretch_margin), 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		margin Rect2.Side
		value  int64
	}{margin, value}))
}

/*
Returns the stretch margin with the specified index. See [member stretch_margin_bottom] and related properties.
*/
//go:nosplit
func (self class) GetStretchMargin(margin Rect2.Side) int64 { //gd:TextureProgressBar.get_stretch_margin
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_get_stretch_margin), gdextension.SizeInt|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ margin Rect2.Side }{margin}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetNinePatchStretch(stretch bool) { //gd:TextureProgressBar.set_nine_patch_stretch
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_set_nine_patch_stretch), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ stretch bool }{stretch}))
}

//go:nosplit
func (self class) GetNinePatchStretch() bool { //gd:TextureProgressBar.get_nine_patch_stretch
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.TextureProgressBar.Bind_get_nine_patch_stretch), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsTextureProgressBar() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsTextureProgressBar() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsTextureProgressBar() Instance { return self.Super().AsTextureProgressBar() }
func (self class) AsRange() Range.Advanced                { return *((*Range.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsRange() Range.Instance        { return self.Super().AsRange() }
func (self Instance) AsRange() Range.Instance             { return *((*Range.Instance)(unsafe.Pointer(&self))) }
func (self class) AsControl() Control.Advanced            { return *((*Control.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsControl() Control.Instance    { return self.Super().AsControl() }
func (self Instance) AsControl() Control.Instance {
	return *((*Control.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return *((*CanvasItem.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return *((*CanvasItem.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Range.Advanced(self.AsRange()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Range.Instance(self.AsRange()), name)
	}
}
func init() {
	gdclass.Register("TextureProgressBar", func(ptr gd.Object) any {
		return [1]gdclass.TextureProgressBar{*(*gdclass.TextureProgressBar)(unsafe.Pointer(&ptr))}
	})
}

type FillMode int //gd:TextureProgressBar.FillMode

const (
	/*The [member texture_progress] fills from left to right.*/
	FillLeftToRight FillMode = 0
	/*The [member texture_progress] fills from right to left.*/
	FillRightToLeft FillMode = 1
	/*The [member texture_progress] fills from top to bottom.*/
	FillTopToBottom FillMode = 2
	/*The [member texture_progress] fills from bottom to top.*/
	FillBottomToTop FillMode = 3
	/*Turns the node into a radial bar. The [member texture_progress] fills clockwise. See [member radial_center_offset], [member radial_initial_angle] and [member radial_fill_degrees] to control the way the bar fills up.*/
	FillClockwise FillMode = 4
	/*Turns the node into a radial bar. The [member texture_progress] fills counterclockwise. See [member radial_center_offset], [member radial_initial_angle] and [member radial_fill_degrees] to control the way the bar fills up.*/
	FillCounterClockwise FillMode = 5
	/*The [member texture_progress] fills from the center, expanding both towards the left and the right.*/
	FillBilinearLeftAndRight FillMode = 6
	/*The [member texture_progress] fills from the center, expanding both towards the top and the bottom.*/
	FillBilinearTopAndBottom FillMode = 7
	/*Turns the node into a radial bar. The [member texture_progress] fills radially from the center, expanding both clockwise and counterclockwise. See [member radial_center_offset], [member radial_initial_angle] and [member radial_fill_degrees] to control the way the bar fills up.*/
	FillClockwiseAndCounterClockwise FillMode = 8
)
