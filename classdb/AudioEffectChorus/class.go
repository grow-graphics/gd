// Code generated by the generate package DO NOT EDIT

// Package AudioEffectChorus provides methods for working with AudioEffectChorus object instances.
package AudioEffectChorus

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/AudioEffect"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Adds a chorus audio effect. The effect applies a filter with voices to duplicate the audio source and manipulate it through the filter.
*/
type Instance [1]gdclass.AudioEffectChorus

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_voice_count     gdextension.MethodForClass `hash:"1286410249"`
	get_voice_count     gdextension.MethodForClass `hash:"3905245786"`
	set_voice_delay_ms  gdextension.MethodForClass `hash:"1602489585"`
	get_voice_delay_ms  gdextension.MethodForClass `hash:"2339986948"`
	set_voice_rate_hz   gdextension.MethodForClass `hash:"1602489585"`
	get_voice_rate_hz   gdextension.MethodForClass `hash:"2339986948"`
	set_voice_depth_ms  gdextension.MethodForClass `hash:"1602489585"`
	get_voice_depth_ms  gdextension.MethodForClass `hash:"2339986948"`
	set_voice_level_db  gdextension.MethodForClass `hash:"1602489585"`
	get_voice_level_db  gdextension.MethodForClass `hash:"2339986948"`
	set_voice_cutoff_hz gdextension.MethodForClass `hash:"1602489585"`
	get_voice_cutoff_hz gdextension.MethodForClass `hash:"2339986948"`
	set_voice_pan       gdextension.MethodForClass `hash:"1602489585"`
	get_voice_pan       gdextension.MethodForClass `hash:"2339986948"`
	set_wet             gdextension.MethodForClass `hash:"373806689"`
	get_wet             gdextension.MethodForClass `hash:"1740695150"`
	set_dry             gdextension.MethodForClass `hash:"373806689"`
	get_dry             gdextension.MethodForClass `hash:"1740695150"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("AudioEffectChorus")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAudioEffectChorus() Instance
}

func (self Instance) SetVoiceDelayMs(voice_idx int, delay_ms Float.X) { //gd:AudioEffectChorus.set_voice_delay_ms
	Advanced(self).SetVoiceDelayMs(int64(voice_idx), float64(delay_ms))
}
func (self Instance) GetVoiceDelayMs(voice_idx int) Float.X { //gd:AudioEffectChorus.get_voice_delay_ms
	return Float.X(Float.X(Advanced(self).GetVoiceDelayMs(int64(voice_idx))))
}
func (self Instance) SetVoiceRateHz(voice_idx int, rate_hz Float.X) { //gd:AudioEffectChorus.set_voice_rate_hz
	Advanced(self).SetVoiceRateHz(int64(voice_idx), float64(rate_hz))
}
func (self Instance) GetVoiceRateHz(voice_idx int) Float.X { //gd:AudioEffectChorus.get_voice_rate_hz
	return Float.X(Float.X(Advanced(self).GetVoiceRateHz(int64(voice_idx))))
}
func (self Instance) SetVoiceDepthMs(voice_idx int, depth_ms Float.X) { //gd:AudioEffectChorus.set_voice_depth_ms
	Advanced(self).SetVoiceDepthMs(int64(voice_idx), float64(depth_ms))
}
func (self Instance) GetVoiceDepthMs(voice_idx int) Float.X { //gd:AudioEffectChorus.get_voice_depth_ms
	return Float.X(Float.X(Advanced(self).GetVoiceDepthMs(int64(voice_idx))))
}
func (self Instance) SetVoiceLevelDb(voice_idx int, level_db Float.X) { //gd:AudioEffectChorus.set_voice_level_db
	Advanced(self).SetVoiceLevelDb(int64(voice_idx), float64(level_db))
}
func (self Instance) GetVoiceLevelDb(voice_idx int) Float.X { //gd:AudioEffectChorus.get_voice_level_db
	return Float.X(Float.X(Advanced(self).GetVoiceLevelDb(int64(voice_idx))))
}
func (self Instance) SetVoiceCutoffHz(voice_idx int, cutoff_hz Float.X) { //gd:AudioEffectChorus.set_voice_cutoff_hz
	Advanced(self).SetVoiceCutoffHz(int64(voice_idx), float64(cutoff_hz))
}
func (self Instance) GetVoiceCutoffHz(voice_idx int) Float.X { //gd:AudioEffectChorus.get_voice_cutoff_hz
	return Float.X(Float.X(Advanced(self).GetVoiceCutoffHz(int64(voice_idx))))
}
func (self Instance) SetVoicePan(voice_idx int, pan Float.X) { //gd:AudioEffectChorus.set_voice_pan
	Advanced(self).SetVoicePan(int64(voice_idx), float64(pan))
}
func (self Instance) GetVoicePan(voice_idx int) Float.X { //gd:AudioEffectChorus.get_voice_pan
	return Float.X(Float.X(Advanced(self).GetVoicePan(int64(voice_idx))))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AudioEffectChorus

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AudioEffectChorus)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AudioEffectChorus)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.AudioEffectChorus)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) VoiceCount() int {
	return int(int(class(self).GetVoiceCount()))
}

func (self Instance) SetVoiceCount(value int) {
	class(self).SetVoiceCount(int64(value))
}

func (self Instance) Dry() Float.X {
	return Float.X(Float.X(class(self).GetDry()))
}

func (self Instance) SetDry(value Float.X) {
	class(self).SetDry(float64(value))
}

func (self Instance) Wet() Float.X {
	return Float.X(Float.X(class(self).GetWet()))
}

func (self Instance) SetWet(value Float.X) {
	class(self).SetWet(float64(value))
}

//go:nosplit
func (self class) SetVoiceCount(voices int64) { //gd:AudioEffectChorus.set_voice_count
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_voice_count, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ voices int64 }{voices}))
}

//go:nosplit
func (self class) GetVoiceCount() int64 { //gd:AudioEffectChorus.get_voice_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_voice_count, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVoiceDelayMs(voice_idx int64, delay_ms float64) { //gd:AudioEffectChorus.set_voice_delay_ms
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_voice_delay_ms, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		voice_idx int64
		delay_ms  float64
	}{voice_idx, delay_ms}))
}

//go:nosplit
func (self class) GetVoiceDelayMs(voice_idx int64) float64 { //gd:AudioEffectChorus.get_voice_delay_ms
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_voice_delay_ms, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ voice_idx int64 }{voice_idx}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVoiceRateHz(voice_idx int64, rate_hz float64) { //gd:AudioEffectChorus.set_voice_rate_hz
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_voice_rate_hz, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		voice_idx int64
		rate_hz   float64
	}{voice_idx, rate_hz}))
}

//go:nosplit
func (self class) GetVoiceRateHz(voice_idx int64) float64 { //gd:AudioEffectChorus.get_voice_rate_hz
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_voice_rate_hz, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ voice_idx int64 }{voice_idx}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVoiceDepthMs(voice_idx int64, depth_ms float64) { //gd:AudioEffectChorus.set_voice_depth_ms
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_voice_depth_ms, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		voice_idx int64
		depth_ms  float64
	}{voice_idx, depth_ms}))
}

//go:nosplit
func (self class) GetVoiceDepthMs(voice_idx int64) float64 { //gd:AudioEffectChorus.get_voice_depth_ms
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_voice_depth_ms, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ voice_idx int64 }{voice_idx}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVoiceLevelDb(voice_idx int64, level_db float64) { //gd:AudioEffectChorus.set_voice_level_db
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_voice_level_db, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		voice_idx int64
		level_db  float64
	}{voice_idx, level_db}))
}

//go:nosplit
func (self class) GetVoiceLevelDb(voice_idx int64) float64 { //gd:AudioEffectChorus.get_voice_level_db
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_voice_level_db, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ voice_idx int64 }{voice_idx}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVoiceCutoffHz(voice_idx int64, cutoff_hz float64) { //gd:AudioEffectChorus.set_voice_cutoff_hz
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_voice_cutoff_hz, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		voice_idx int64
		cutoff_hz float64
	}{voice_idx, cutoff_hz}))
}

//go:nosplit
func (self class) GetVoiceCutoffHz(voice_idx int64) float64 { //gd:AudioEffectChorus.get_voice_cutoff_hz
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_voice_cutoff_hz, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ voice_idx int64 }{voice_idx}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVoicePan(voice_idx int64, pan float64) { //gd:AudioEffectChorus.set_voice_pan
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_voice_pan, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		voice_idx int64
		pan       float64
	}{voice_idx, pan}))
}

//go:nosplit
func (self class) GetVoicePan(voice_idx int64) float64 { //gd:AudioEffectChorus.get_voice_pan
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_voice_pan, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ voice_idx int64 }{voice_idx}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWet(amount float64) { //gd:AudioEffectChorus.set_wet
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_wet, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetWet() float64 { //gd:AudioEffectChorus.get_wet
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_wet, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDry(amount float64) { //gd:AudioEffectChorus.set_dry
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_dry, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetDry() float64 { //gd:AudioEffectChorus.get_dry
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_dry, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsAudioEffectChorus() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsAudioEffectChorus() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsAudioEffectChorus() Instance { return self.Super().AsAudioEffectChorus() }
func (self class) AsAudioEffect() AudioEffect.Advanced {
	return *((*AudioEffect.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAudioEffect() AudioEffect.Instance { return self.Super().AsAudioEffect() }
func (self Instance) AsAudioEffect() AudioEffect.Instance {
	return *((*AudioEffect.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioEffect.Advanced(self.AsAudioEffect()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioEffect.Instance(self.AsAudioEffect()), name)
	}
}
func init() {
	gdclass.Register("AudioEffectChorus", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
