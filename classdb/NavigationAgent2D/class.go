// Code generated by the generate package DO NOT EDIT

// Package NavigationAgent2D provides methods for working with NavigationAgent2D object instances.
package NavigationAgent2D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/NavigationPathQueryParameters2D"
import "graphics.gd/classdb/NavigationPathQueryResult2D"
import "graphics.gd/classdb/Node"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A 2D agent used to pathfind to a position while avoiding static and dynamic obstacles. The calculation can be used by the parent node to dynamically move it along the path. Requires navigation data to work correctly.
Dynamic obstacles are avoided using RVO collision avoidance. Avoidance is computed before physics, so the pathfinding information can be used safely in the physics step.
[b]Note:[/b] After setting the [member target_position] property, the [method get_next_path_position] method must be used once every physics frame to update the internal path logic of the navigation agent. The vector position it returns should be used as the next movement position for the agent's parent node.
*/
type Instance [1]gdclass.NavigationAgent2D

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsNavigationAgent2D() Instance
}

/*
Returns the [RID] of this agent on the [NavigationServer2D].
*/
func (self Instance) GetRid() RID.NavigationAgent2D { //gd:NavigationAgent2D.get_rid
	return RID.NavigationAgent2D(Advanced(self).GetRid())
}

/*
Based on [param value], enables or disables the specified layer in the [member navigation_layers] bitmask, given a [param layer_number] between 1 and 32.
*/
func (self Instance) SetNavigationLayerValue(layer_number int, value bool) { //gd:NavigationAgent2D.set_navigation_layer_value
	Advanced(self).SetNavigationLayerValue(int64(layer_number), value)
}

/*
Returns whether or not the specified layer of the [member navigation_layers] bitmask is enabled, given a [param layer_number] between 1 and 32.
*/
func (self Instance) GetNavigationLayerValue(layer_number int) bool { //gd:NavigationAgent2D.get_navigation_layer_value
	return bool(Advanced(self).GetNavigationLayerValue(int64(layer_number)))
}

/*
Sets the [RID] of the navigation map this NavigationAgent node should use and also updates the [code]agent[/code] on the NavigationServer.
*/
func (self Instance) SetNavigationMap(navigation_map RID.NavigationMap2D) { //gd:NavigationAgent2D.set_navigation_map
	Advanced(self).SetNavigationMap(RID.Any(navigation_map))
}

/*
Returns the [RID] of the navigation map for this NavigationAgent node. This function returns always the map set on the NavigationAgent node and not the map of the abstract agent on the NavigationServer. If the agent map is changed directly with the NavigationServer API the NavigationAgent node will not be aware of the map change. Use [method set_navigation_map] to change the navigation map for the NavigationAgent and also update the agent on the NavigationServer.
*/
func (self Instance) GetNavigationMap() RID.NavigationMap2D { //gd:NavigationAgent2D.get_navigation_map
	return RID.NavigationMap2D(Advanced(self).GetNavigationMap())
}

/*
Returns the next position in global coordinates that can be moved to, making sure that there are no static objects in the way. If the agent does not have a navigation path, it will return the position of the agent's parent. The use of this function once every physics frame is required to update the internal path logic of the NavigationAgent.
*/
func (self Instance) GetNextPathPosition() Vector2.XY { //gd:NavigationAgent2D.get_next_path_position
	return Vector2.XY(Advanced(self).GetNextPathPosition())
}

/*
Replaces the internal velocity in the collision avoidance simulation with [param velocity]. When an agent is teleported to a new position this function should be used in the same frame. If called frequently this function can get agents stuck.
*/
func (self Instance) SetVelocityForced(velocity Vector2.XY) { //gd:NavigationAgent2D.set_velocity_forced
	Advanced(self).SetVelocityForced(Vector2.XY(velocity))
}

/*
Returns the distance to the target position, using the agent's global position. The user must set [member target_position] in order for this to be accurate.
*/
func (self Instance) DistanceToTarget() Float.X { //gd:NavigationAgent2D.distance_to_target
	return Float.X(Float.X(Advanced(self).DistanceToTarget()))
}

/*
Returns the path query result for the path the agent is currently following.
*/
func (self Instance) GetCurrentNavigationResult() NavigationPathQueryResult2D.Instance { //gd:NavigationAgent2D.get_current_navigation_result
	return NavigationPathQueryResult2D.Instance(Advanced(self).GetCurrentNavigationResult())
}

/*
Returns this agent's current path from start to finish in global coordinates. The path only updates when the target position is changed or the agent requires a repath. The path array is not intended to be used in direct path movement as the agent has its own internal path logic that would get corrupted by changing the path array manually. Use the intended [method get_next_path_position] once every physics frame to receive the next path point for the agents movement as this function also updates the internal path logic.
*/
func (self Instance) GetCurrentNavigationPath() []Vector2.XY { //gd:NavigationAgent2D.get_current_navigation_path
	return []Vector2.XY(slices.Collect(Advanced(self).GetCurrentNavigationPath().Values()))
}

/*
Returns which index the agent is currently on in the navigation path's [PackedVector2Array].
*/
func (self Instance) GetCurrentNavigationPathIndex() int { //gd:NavigationAgent2D.get_current_navigation_path_index
	return int(int(Advanced(self).GetCurrentNavigationPathIndex()))
}

/*
Returns [code]true[/code] if the agent reached the target, i.e. the agent moved within [member target_desired_distance] of the [member target_position]. It may not always be possible to reach the target but it should always be possible to reach the final position. See [method get_final_position].
*/
func (self Instance) IsTargetReached() bool { //gd:NavigationAgent2D.is_target_reached
	return bool(Advanced(self).IsTargetReached())
}

/*
Returns [code]true[/code] if [method get_final_position] is within [member target_desired_distance] of the [member target_position].
*/
func (self Instance) IsTargetReachable() bool { //gd:NavigationAgent2D.is_target_reachable
	return bool(Advanced(self).IsTargetReachable())
}

/*
Returns [code]true[/code] if the agent's navigation has finished. If the target is reachable, navigation ends when the target is reached. If the target is unreachable, navigation ends when the last waypoint of the path is reached.
[b]Note:[/b] While [code]true[/code] prefer to stop calling update functions like [method get_next_path_position]. This avoids jittering the standing agent due to calling repeated path updates.
*/
func (self Instance) IsNavigationFinished() bool { //gd:NavigationAgent2D.is_navigation_finished
	return bool(Advanced(self).IsNavigationFinished())
}

/*
Returns the reachable final position of the current navigation path in global coordinates. This position can change if the agent needs to update the navigation path which makes the agent emit the [signal path_changed] signal.
*/
func (self Instance) GetFinalPosition() Vector2.XY { //gd:NavigationAgent2D.get_final_position
	return Vector2.XY(Advanced(self).GetFinalPosition())
}

/*
Based on [param value], enables or disables the specified layer in the [member avoidance_layers] bitmask, given a [param layer_number] between 1 and 32.
*/
func (self Instance) SetAvoidanceLayerValue(layer_number int, value bool) { //gd:NavigationAgent2D.set_avoidance_layer_value
	Advanced(self).SetAvoidanceLayerValue(int64(layer_number), value)
}

/*
Returns whether or not the specified layer of the [member avoidance_layers] bitmask is enabled, given a [param layer_number] between 1 and 32.
*/
func (self Instance) GetAvoidanceLayerValue(layer_number int) bool { //gd:NavigationAgent2D.get_avoidance_layer_value
	return bool(Advanced(self).GetAvoidanceLayerValue(int64(layer_number)))
}

/*
Based on [param value], enables or disables the specified mask in the [member avoidance_mask] bitmask, given a [param mask_number] between 1 and 32.
*/
func (self Instance) SetAvoidanceMaskValue(mask_number int, value bool) { //gd:NavigationAgent2D.set_avoidance_mask_value
	Advanced(self).SetAvoidanceMaskValue(int64(mask_number), value)
}

/*
Returns whether or not the specified mask of the [member avoidance_mask] bitmask is enabled, given a [param mask_number] between 1 and 32.
*/
func (self Instance) GetAvoidanceMaskValue(mask_number int) bool { //gd:NavigationAgent2D.get_avoidance_mask_value
	return bool(Advanced(self).GetAvoidanceMaskValue(int64(mask_number)))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.NavigationAgent2D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("NavigationAgent2D"))
	casted := Instance{*(*gdclass.NavigationAgent2D)(unsafe.Pointer(&object))}
	return casted
}

func (self Instance) TargetPosition() Vector2.XY {
	return Vector2.XY(class(self).GetTargetPosition())
}

func (self Instance) SetTargetPosition(value Vector2.XY) {
	class(self).SetTargetPosition(Vector2.XY(value))
}

func (self Instance) PathDesiredDistance() Float.X {
	return Float.X(Float.X(class(self).GetPathDesiredDistance()))
}

func (self Instance) SetPathDesiredDistance(value Float.X) {
	class(self).SetPathDesiredDistance(float64(value))
}

func (self Instance) TargetDesiredDistance() Float.X {
	return Float.X(Float.X(class(self).GetTargetDesiredDistance()))
}

func (self Instance) SetTargetDesiredDistance(value Float.X) {
	class(self).SetTargetDesiredDistance(float64(value))
}

func (self Instance) PathMaxDistance() Float.X {
	return Float.X(Float.X(class(self).GetPathMaxDistance()))
}

func (self Instance) SetPathMaxDistance(value Float.X) {
	class(self).SetPathMaxDistance(float64(value))
}

func (self Instance) NavigationLayers() int {
	return int(int(class(self).GetNavigationLayers()))
}

func (self Instance) SetNavigationLayers(value int) {
	class(self).SetNavigationLayers(int64(value))
}

func (self Instance) PathfindingAlgorithm() NavigationPathQueryParameters2D.PathfindingAlgorithm {
	return NavigationPathQueryParameters2D.PathfindingAlgorithm(class(self).GetPathfindingAlgorithm())
}

func (self Instance) SetPathfindingAlgorithm(value NavigationPathQueryParameters2D.PathfindingAlgorithm) {
	class(self).SetPathfindingAlgorithm(value)
}

func (self Instance) PathPostprocessing() NavigationPathQueryParameters2D.PathPostProcessing {
	return NavigationPathQueryParameters2D.PathPostProcessing(class(self).GetPathPostprocessing())
}

func (self Instance) SetPathPostprocessing(value NavigationPathQueryParameters2D.PathPostProcessing) {
	class(self).SetPathPostprocessing(value)
}

func (self Instance) PathMetadataFlags() NavigationPathQueryParameters2D.PathMetadataFlags {
	return NavigationPathQueryParameters2D.PathMetadataFlags(class(self).GetPathMetadataFlags())
}

func (self Instance) SetPathMetadataFlags(value NavigationPathQueryParameters2D.PathMetadataFlags) {
	class(self).SetPathMetadataFlags(value)
}

func (self Instance) SimplifyPath() bool {
	return bool(class(self).GetSimplifyPath())
}

func (self Instance) SetSimplifyPath(value bool) {
	class(self).SetSimplifyPath(value)
}

func (self Instance) SimplifyEpsilon() Float.X {
	return Float.X(Float.X(class(self).GetSimplifyEpsilon()))
}

func (self Instance) SetSimplifyEpsilon(value Float.X) {
	class(self).SetSimplifyEpsilon(float64(value))
}

func (self Instance) AvoidanceEnabled() bool {
	return bool(class(self).GetAvoidanceEnabled())
}

func (self Instance) SetAvoidanceEnabled(value bool) {
	class(self).SetAvoidanceEnabled(value)
}

func (self Instance) Velocity() Vector2.XY {
	return Vector2.XY(class(self).GetVelocity())
}

func (self Instance) SetVelocity(value Vector2.XY) {
	class(self).SetVelocity(Vector2.XY(value))
}

func (self Instance) Radius() Float.X {
	return Float.X(Float.X(class(self).GetRadius()))
}

func (self Instance) SetRadius(value Float.X) {
	class(self).SetRadius(float64(value))
}

func (self Instance) NeighborDistance() Float.X {
	return Float.X(Float.X(class(self).GetNeighborDistance()))
}

func (self Instance) SetNeighborDistance(value Float.X) {
	class(self).SetNeighborDistance(float64(value))
}

func (self Instance) MaxNeighbors() int {
	return int(int(class(self).GetMaxNeighbors()))
}

func (self Instance) SetMaxNeighbors(value int) {
	class(self).SetMaxNeighbors(int64(value))
}

func (self Instance) TimeHorizonAgents() Float.X {
	return Float.X(Float.X(class(self).GetTimeHorizonAgents()))
}

func (self Instance) SetTimeHorizonAgents(value Float.X) {
	class(self).SetTimeHorizonAgents(float64(value))
}

func (self Instance) TimeHorizonObstacles() Float.X {
	return Float.X(Float.X(class(self).GetTimeHorizonObstacles()))
}

func (self Instance) SetTimeHorizonObstacles(value Float.X) {
	class(self).SetTimeHorizonObstacles(float64(value))
}

func (self Instance) MaxSpeed() Float.X {
	return Float.X(Float.X(class(self).GetMaxSpeed()))
}

func (self Instance) SetMaxSpeed(value Float.X) {
	class(self).SetMaxSpeed(float64(value))
}

func (self Instance) AvoidanceLayers() int {
	return int(int(class(self).GetAvoidanceLayers()))
}

func (self Instance) SetAvoidanceLayers(value int) {
	class(self).SetAvoidanceLayers(int64(value))
}

func (self Instance) AvoidanceMask() int {
	return int(int(class(self).GetAvoidanceMask()))
}

func (self Instance) SetAvoidanceMask(value int) {
	class(self).SetAvoidanceMask(int64(value))
}

func (self Instance) AvoidancePriority() Float.X {
	return Float.X(Float.X(class(self).GetAvoidancePriority()))
}

func (self Instance) SetAvoidancePriority(value Float.X) {
	class(self).SetAvoidancePriority(float64(value))
}

func (self Instance) DebugEnabled() bool {
	return bool(class(self).GetDebugEnabled())
}

func (self Instance) SetDebugEnabled(value bool) {
	class(self).SetDebugEnabled(value)
}

func (self Instance) DebugUseCustom() bool {
	return bool(class(self).GetDebugUseCustom())
}

func (self Instance) SetDebugUseCustom(value bool) {
	class(self).SetDebugUseCustom(value)
}

func (self Instance) DebugPathCustomColor() Color.RGBA {
	return Color.RGBA(class(self).GetDebugPathCustomColor())
}

func (self Instance) SetDebugPathCustomColor(value Color.RGBA) {
	class(self).SetDebugPathCustomColor(Color.RGBA(value))
}

func (self Instance) DebugPathCustomPointSize() Float.X {
	return Float.X(Float.X(class(self).GetDebugPathCustomPointSize()))
}

func (self Instance) SetDebugPathCustomPointSize(value Float.X) {
	class(self).SetDebugPathCustomPointSize(float64(value))
}

func (self Instance) DebugPathCustomLineWidth() Float.X {
	return Float.X(Float.X(class(self).GetDebugPathCustomLineWidth()))
}

func (self Instance) SetDebugPathCustomLineWidth(value Float.X) {
	class(self).SetDebugPathCustomLineWidth(float64(value))
}

/*
Returns the [RID] of this agent on the [NavigationServer2D].
*/
//go:nosplit
func (self class) GetRid() RID.Any { //gd:NavigationAgent2D.get_rid
	var r_ret = gdextension.Call[RID.Any](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_rid), gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAvoidanceEnabled(enabled bool) { //gd:NavigationAgent2D.set_avoidance_enabled
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_avoidance_enabled), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) GetAvoidanceEnabled() bool { //gd:NavigationAgent2D.get_avoidance_enabled
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_avoidance_enabled), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPathDesiredDistance(desired_distance float64) { //gd:NavigationAgent2D.set_path_desired_distance
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_path_desired_distance), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ desired_distance float64 }{desired_distance}))
}

//go:nosplit
func (self class) GetPathDesiredDistance() float64 { //gd:NavigationAgent2D.get_path_desired_distance
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_path_desired_distance), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTargetDesiredDistance(desired_distance float64) { //gd:NavigationAgent2D.set_target_desired_distance
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_target_desired_distance), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ desired_distance float64 }{desired_distance}))
}

//go:nosplit
func (self class) GetTargetDesiredDistance() float64 { //gd:NavigationAgent2D.get_target_desired_distance
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_target_desired_distance), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRadius(radius float64) { //gd:NavigationAgent2D.set_radius
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_radius), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ radius float64 }{radius}))
}

//go:nosplit
func (self class) GetRadius() float64 { //gd:NavigationAgent2D.get_radius
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_radius), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetNeighborDistance(neighbor_distance float64) { //gd:NavigationAgent2D.set_neighbor_distance
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_neighbor_distance), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ neighbor_distance float64 }{neighbor_distance}))
}

//go:nosplit
func (self class) GetNeighborDistance() float64 { //gd:NavigationAgent2D.get_neighbor_distance
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_neighbor_distance), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMaxNeighbors(max_neighbors int64) { //gd:NavigationAgent2D.set_max_neighbors
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_max_neighbors), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ max_neighbors int64 }{max_neighbors}))
}

//go:nosplit
func (self class) GetMaxNeighbors() int64 { //gd:NavigationAgent2D.get_max_neighbors
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_max_neighbors), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTimeHorizonAgents(time_horizon float64) { //gd:NavigationAgent2D.set_time_horizon_agents
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_time_horizon_agents), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ time_horizon float64 }{time_horizon}))
}

//go:nosplit
func (self class) GetTimeHorizonAgents() float64 { //gd:NavigationAgent2D.get_time_horizon_agents
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_time_horizon_agents), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTimeHorizonObstacles(time_horizon float64) { //gd:NavigationAgent2D.set_time_horizon_obstacles
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_time_horizon_obstacles), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ time_horizon float64 }{time_horizon}))
}

//go:nosplit
func (self class) GetTimeHorizonObstacles() float64 { //gd:NavigationAgent2D.get_time_horizon_obstacles
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_time_horizon_obstacles), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMaxSpeed(max_speed float64) { //gd:NavigationAgent2D.set_max_speed
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_max_speed), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ max_speed float64 }{max_speed}))
}

//go:nosplit
func (self class) GetMaxSpeed() float64 { //gd:NavigationAgent2D.get_max_speed
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_max_speed), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPathMaxDistance(max_speed float64) { //gd:NavigationAgent2D.set_path_max_distance
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_path_max_distance), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ max_speed float64 }{max_speed}))
}

//go:nosplit
func (self class) GetPathMaxDistance() float64 { //gd:NavigationAgent2D.get_path_max_distance
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_path_max_distance), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetNavigationLayers(navigation_layers int64) { //gd:NavigationAgent2D.set_navigation_layers
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_navigation_layers), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ navigation_layers int64 }{navigation_layers}))
}

//go:nosplit
func (self class) GetNavigationLayers() int64 { //gd:NavigationAgent2D.get_navigation_layers
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_navigation_layers), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Based on [param value], enables or disables the specified layer in the [member navigation_layers] bitmask, given a [param layer_number] between 1 and 32.
*/
//go:nosplit
func (self class) SetNavigationLayerValue(layer_number int64, value bool) { //gd:NavigationAgent2D.set_navigation_layer_value
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_navigation_layer_value), 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		layer_number int64
		value        bool
	}{layer_number, value}))
}

/*
Returns whether or not the specified layer of the [member navigation_layers] bitmask is enabled, given a [param layer_number] between 1 and 32.
*/
//go:nosplit
func (self class) GetNavigationLayerValue(layer_number int64) bool { //gd:NavigationAgent2D.get_navigation_layer_value
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_navigation_layer_value), gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ layer_number int64 }{layer_number}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPathfindingAlgorithm(pathfinding_algorithm NavigationPathQueryParameters2D.PathfindingAlgorithm) { //gd:NavigationAgent2D.set_pathfinding_algorithm
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_pathfinding_algorithm), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct {
		pathfinding_algorithm NavigationPathQueryParameters2D.PathfindingAlgorithm
	}{pathfinding_algorithm}))
}

//go:nosplit
func (self class) GetPathfindingAlgorithm() NavigationPathQueryParameters2D.PathfindingAlgorithm { //gd:NavigationAgent2D.get_pathfinding_algorithm
	var r_ret = gdextension.Call[NavigationPathQueryParameters2D.PathfindingAlgorithm](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_pathfinding_algorithm), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPathPostprocessing(path_postprocessing NavigationPathQueryParameters2D.PathPostProcessing) { //gd:NavigationAgent2D.set_path_postprocessing
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_path_postprocessing), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct {
		path_postprocessing NavigationPathQueryParameters2D.PathPostProcessing
	}{path_postprocessing}))
}

//go:nosplit
func (self class) GetPathPostprocessing() NavigationPathQueryParameters2D.PathPostProcessing { //gd:NavigationAgent2D.get_path_postprocessing
	var r_ret = gdextension.Call[NavigationPathQueryParameters2D.PathPostProcessing](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_path_postprocessing), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPathMetadataFlags(flags NavigationPathQueryParameters2D.PathMetadataFlags) { //gd:NavigationAgent2D.set_path_metadata_flags
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_path_metadata_flags), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct {
		flags NavigationPathQueryParameters2D.PathMetadataFlags
	}{flags}))
}

//go:nosplit
func (self class) GetPathMetadataFlags() NavigationPathQueryParameters2D.PathMetadataFlags { //gd:NavigationAgent2D.get_path_metadata_flags
	var r_ret = gdextension.Call[NavigationPathQueryParameters2D.PathMetadataFlags](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_path_metadata_flags), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets the [RID] of the navigation map this NavigationAgent node should use and also updates the [code]agent[/code] on the NavigationServer.
*/
//go:nosplit
func (self class) SetNavigationMap(navigation_map RID.Any) { //gd:NavigationAgent2D.set_navigation_map
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_navigation_map), 0|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ navigation_map RID.Any }{navigation_map}))
}

/*
Returns the [RID] of the navigation map for this NavigationAgent node. This function returns always the map set on the NavigationAgent node and not the map of the abstract agent on the NavigationServer. If the agent map is changed directly with the NavigationServer API the NavigationAgent node will not be aware of the map change. Use [method set_navigation_map] to change the navigation map for the NavigationAgent and also update the agent on the NavigationServer.
*/
//go:nosplit
func (self class) GetNavigationMap() RID.Any { //gd:NavigationAgent2D.get_navigation_map
	var r_ret = gdextension.Call[RID.Any](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_navigation_map), gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTargetPosition(position Vector2.XY) { //gd:NavigationAgent2D.set_target_position
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_target_position), 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ position Vector2.XY }{position}))
}

//go:nosplit
func (self class) GetTargetPosition() Vector2.XY { //gd:NavigationAgent2D.get_target_position
	var r_ret = gdextension.Call[Vector2.XY](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_target_position), gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSimplifyPath(enabled bool) { //gd:NavigationAgent2D.set_simplify_path
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_simplify_path), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) GetSimplifyPath() bool { //gd:NavigationAgent2D.get_simplify_path
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_simplify_path), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSimplifyEpsilon(epsilon float64) { //gd:NavigationAgent2D.set_simplify_epsilon
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_simplify_epsilon), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ epsilon float64 }{epsilon}))
}

//go:nosplit
func (self class) GetSimplifyEpsilon() float64 { //gd:NavigationAgent2D.get_simplify_epsilon
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_simplify_epsilon), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the next position in global coordinates that can be moved to, making sure that there are no static objects in the way. If the agent does not have a navigation path, it will return the position of the agent's parent. The use of this function once every physics frame is required to update the internal path logic of the NavigationAgent.
*/
//go:nosplit
func (self class) GetNextPathPosition() Vector2.XY { //gd:NavigationAgent2D.get_next_path_position
	var r_ret = gdextension.Call[Vector2.XY](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_next_path_position), gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Replaces the internal velocity in the collision avoidance simulation with [param velocity]. When an agent is teleported to a new position this function should be used in the same frame. If called frequently this function can get agents stuck.
*/
//go:nosplit
func (self class) SetVelocityForced(velocity Vector2.XY) { //gd:NavigationAgent2D.set_velocity_forced
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_velocity_forced), 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ velocity Vector2.XY }{velocity}))
}

//go:nosplit
func (self class) SetVelocity(velocity Vector2.XY) { //gd:NavigationAgent2D.set_velocity
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_velocity), 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ velocity Vector2.XY }{velocity}))
}

//go:nosplit
func (self class) GetVelocity() Vector2.XY { //gd:NavigationAgent2D.get_velocity
	var r_ret = gdextension.Call[Vector2.XY](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_velocity), gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the distance to the target position, using the agent's global position. The user must set [member target_position] in order for this to be accurate.
*/
//go:nosplit
func (self class) DistanceToTarget() float64 { //gd:NavigationAgent2D.distance_to_target
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_distance_to_target), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the path query result for the path the agent is currently following.
*/
//go:nosplit
func (self class) GetCurrentNavigationResult() [1]gdclass.NavigationPathQueryResult2D { //gd:NavigationAgent2D.get_current_navigation_result
	var r_ret = gdextension.Call[gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_current_navigation_result), gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.NavigationPathQueryResult2D{gd.PointerWithOwnershipTransferredToGo[gdclass.NavigationPathQueryResult2D](r_ret)}
	return ret
}

/*
Returns this agent's current path from start to finish in global coordinates. The path only updates when the target position is changed or the agent requires a repath. The path array is not intended to be used in direct path movement as the agent has its own internal path logic that would get corrupted by changing the path array manually. Use the intended [method get_next_path_position] once every physics frame to receive the next path point for the agents movement as this function also updates the internal path logic.
*/
//go:nosplit
func (self class) GetCurrentNavigationPath() Packed.Array[Vector2.XY] { //gd:NavigationAgent2D.get_current_navigation_path
	var r_ret = gdextension.Call[gd.PackedPointers](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_current_navigation_path), gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Array[Vector2.XY](Array.Through(gd.PackedProxy[gd.PackedVector2Array, Vector2.XY]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

/*
Returns which index the agent is currently on in the navigation path's [PackedVector2Array].
*/
//go:nosplit
func (self class) GetCurrentNavigationPathIndex() int64 { //gd:NavigationAgent2D.get_current_navigation_path_index
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_current_navigation_path_index), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if the agent reached the target, i.e. the agent moved within [member target_desired_distance] of the [member target_position]. It may not always be possible to reach the target but it should always be possible to reach the final position. See [method get_final_position].
*/
//go:nosplit
func (self class) IsTargetReached() bool { //gd:NavigationAgent2D.is_target_reached
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_is_target_reached), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if [method get_final_position] is within [member target_desired_distance] of the [member target_position].
*/
//go:nosplit
func (self class) IsTargetReachable() bool { //gd:NavigationAgent2D.is_target_reachable
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_is_target_reachable), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if the agent's navigation has finished. If the target is reachable, navigation ends when the target is reached. If the target is unreachable, navigation ends when the last waypoint of the path is reached.
[b]Note:[/b] While [code]true[/code] prefer to stop calling update functions like [method get_next_path_position]. This avoids jittering the standing agent due to calling repeated path updates.
*/
//go:nosplit
func (self class) IsNavigationFinished() bool { //gd:NavigationAgent2D.is_navigation_finished
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_is_navigation_finished), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the reachable final position of the current navigation path in global coordinates. This position can change if the agent needs to update the navigation path which makes the agent emit the [signal path_changed] signal.
*/
//go:nosplit
func (self class) GetFinalPosition() Vector2.XY { //gd:NavigationAgent2D.get_final_position
	var r_ret = gdextension.Call[Vector2.XY](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_final_position), gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAvoidanceLayers(layers int64) { //gd:NavigationAgent2D.set_avoidance_layers
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_avoidance_layers), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ layers int64 }{layers}))
}

//go:nosplit
func (self class) GetAvoidanceLayers() int64 { //gd:NavigationAgent2D.get_avoidance_layers
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_avoidance_layers), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAvoidanceMask(mask int64) { //gd:NavigationAgent2D.set_avoidance_mask
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_avoidance_mask), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mask int64 }{mask}))
}

//go:nosplit
func (self class) GetAvoidanceMask() int64 { //gd:NavigationAgent2D.get_avoidance_mask
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_avoidance_mask), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Based on [param value], enables or disables the specified layer in the [member avoidance_layers] bitmask, given a [param layer_number] between 1 and 32.
*/
//go:nosplit
func (self class) SetAvoidanceLayerValue(layer_number int64, value bool) { //gd:NavigationAgent2D.set_avoidance_layer_value
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_avoidance_layer_value), 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		layer_number int64
		value        bool
	}{layer_number, value}))
}

/*
Returns whether or not the specified layer of the [member avoidance_layers] bitmask is enabled, given a [param layer_number] between 1 and 32.
*/
//go:nosplit
func (self class) GetAvoidanceLayerValue(layer_number int64) bool { //gd:NavigationAgent2D.get_avoidance_layer_value
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_avoidance_layer_value), gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ layer_number int64 }{layer_number}))
	var ret = r_ret
	return ret
}

/*
Based on [param value], enables or disables the specified mask in the [member avoidance_mask] bitmask, given a [param mask_number] between 1 and 32.
*/
//go:nosplit
func (self class) SetAvoidanceMaskValue(mask_number int64, value bool) { //gd:NavigationAgent2D.set_avoidance_mask_value
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_avoidance_mask_value), 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		mask_number int64
		value       bool
	}{mask_number, value}))
}

/*
Returns whether or not the specified mask of the [member avoidance_mask] bitmask is enabled, given a [param mask_number] between 1 and 32.
*/
//go:nosplit
func (self class) GetAvoidanceMaskValue(mask_number int64) bool { //gd:NavigationAgent2D.get_avoidance_mask_value
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_avoidance_mask_value), gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mask_number int64 }{mask_number}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAvoidancePriority(priority float64) { //gd:NavigationAgent2D.set_avoidance_priority
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_avoidance_priority), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ priority float64 }{priority}))
}

//go:nosplit
func (self class) GetAvoidancePriority() float64 { //gd:NavigationAgent2D.get_avoidance_priority
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_avoidance_priority), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDebugEnabled(enabled bool) { //gd:NavigationAgent2D.set_debug_enabled
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_debug_enabled), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) GetDebugEnabled() bool { //gd:NavigationAgent2D.get_debug_enabled
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_debug_enabled), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDebugUseCustom(enabled bool) { //gd:NavigationAgent2D.set_debug_use_custom
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_debug_use_custom), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) GetDebugUseCustom() bool { //gd:NavigationAgent2D.get_debug_use_custom
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_debug_use_custom), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDebugPathCustomColor(color Color.RGBA) { //gd:NavigationAgent2D.set_debug_path_custom_color
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_debug_path_custom_color), 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

//go:nosplit
func (self class) GetDebugPathCustomColor() Color.RGBA { //gd:NavigationAgent2D.get_debug_path_custom_color
	var r_ret = gdextension.Call[Color.RGBA](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_debug_path_custom_color), gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDebugPathCustomPointSize(point_size float64) { //gd:NavigationAgent2D.set_debug_path_custom_point_size
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_debug_path_custom_point_size), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ point_size float64 }{point_size}))
}

//go:nosplit
func (self class) GetDebugPathCustomPointSize() float64 { //gd:NavigationAgent2D.get_debug_path_custom_point_size
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_debug_path_custom_point_size), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDebugPathCustomLineWidth(line_width float64) { //gd:NavigationAgent2D.set_debug_path_custom_line_width
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_set_debug_path_custom_line_width), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ line_width float64 }{line_width}))
}

//go:nosplit
func (self class) GetDebugPathCustomLineWidth() float64 { //gd:NavigationAgent2D.get_debug_path_custom_line_width
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.NavigationAgent2D.Bind_get_debug_path_custom_line_width), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self Instance) OnPathChanged(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("path_changed"), gd.NewCallable(cb), 0)
}

func (self Instance) OnTargetReached(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("target_reached"), gd.NewCallable(cb), 0)
}

func (self Instance) OnWaypointReached(cb func(details map[any]any)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("waypoint_reached"), gd.NewCallable(cb), 0)
}

func (self Instance) OnLinkReached(cb func(details map[any]any)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("link_reached"), gd.NewCallable(cb), 0)
}

func (self Instance) OnNavigationFinished(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("navigation_finished"), gd.NewCallable(cb), 0)
}

func (self Instance) OnVelocityComputed(cb func(safe_velocity Vector2.XY)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("velocity_computed"), gd.NewCallable(cb), 0)
}

func (self class) AsNavigationAgent2D() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsNavigationAgent2D() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNavigationAgent2D() Instance { return self.Super().AsNavigationAgent2D() }
func (self class) AsNode() Node.Advanced                 { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance         { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance              { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node.Advanced(self.AsNode()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node.Instance(self.AsNode()), name)
	}
}
func init() {
	gdclass.Register("NavigationAgent2D", func(ptr gd.Object) any {
		return [1]gdclass.NavigationAgent2D{*(*gdclass.NavigationAgent2D)(unsafe.Pointer(&ptr))}
	})
}
