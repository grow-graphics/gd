// Code generated by the generate package DO NOT EDIT

// Package WebRTCDataChannel provides methods for working with WebRTCDataChannel object instances.
package WebRTCDataChannel

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/classdb/PacketPeer"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }
type Instance [1]gdclass.WebRTCDataChannel

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsWebRTCDataChannel() Instance
}

/*
Reserved, but not used for now.
*/
func (self Instance) Poll() error { //gd:WebRTCDataChannel.poll
	return error(gd.ToError(Advanced(self).Poll()))
}

/*
Closes this data channel, notifying the other peer.
*/
func (self Instance) Close() { //gd:WebRTCDataChannel.close
	Advanced(self).Close()
}

/*
Returns [code]true[/code] if the last received packet was transferred as text. See [member write_mode].
*/
func (self Instance) WasStringPacket() bool { //gd:WebRTCDataChannel.was_string_packet
	return bool(Advanced(self).WasStringPacket())
}

/*
Returns the current state of this channel, see [enum ChannelState].
*/
func (self Instance) GetReadyState() ChannelState { //gd:WebRTCDataChannel.get_ready_state
	return ChannelState(Advanced(self).GetReadyState())
}

/*
Returns the label assigned to this channel during creation.
*/
func (self Instance) GetLabel() string { //gd:WebRTCDataChannel.get_label
	return string(Advanced(self).GetLabel().String())
}

/*
Returns [code]true[/code] if this channel was created with ordering enabled (default).
*/
func (self Instance) IsOrdered() bool { //gd:WebRTCDataChannel.is_ordered
	return bool(Advanced(self).IsOrdered())
}

/*
Returns the ID assigned to this channel during creation (or auto-assigned during negotiation).
If the channel is not negotiated out-of-band the ID will only be available after the connection is established (will return [code]65535[/code] until then).
*/
func (self Instance) GetId() int { //gd:WebRTCDataChannel.get_id
	return int(int(Advanced(self).GetId()))
}

/*
Returns the [code]maxPacketLifeTime[/code] value assigned to this channel during creation.
Will be [code]65535[/code] if not specified.
*/
func (self Instance) GetMaxPacketLifeTime() int { //gd:WebRTCDataChannel.get_max_packet_life_time
	return int(int(Advanced(self).GetMaxPacketLifeTime()))
}

/*
Returns the [code]maxRetransmits[/code] value assigned to this channel during creation.
Will be [code]65535[/code] if not specified.
*/
func (self Instance) GetMaxRetransmits() int { //gd:WebRTCDataChannel.get_max_retransmits
	return int(int(Advanced(self).GetMaxRetransmits()))
}

/*
Returns the sub-protocol assigned to this channel during creation. An empty string if not specified.
*/
func (self Instance) GetProtocol() string { //gd:WebRTCDataChannel.get_protocol
	return string(Advanced(self).GetProtocol().String())
}

/*
Returns [code]true[/code] if this channel was created with out-of-band configuration.
*/
func (self Instance) IsNegotiated() bool { //gd:WebRTCDataChannel.is_negotiated
	return bool(Advanced(self).IsNegotiated())
}

/*
Returns the number of bytes currently queued to be sent over this channel.
*/
func (self Instance) GetBufferedAmount() int { //gd:WebRTCDataChannel.get_buffered_amount
	return int(int(Advanced(self).GetBufferedAmount()))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.WebRTCDataChannel

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("WebRTCDataChannel"))
	casted := Instance{*(*gdclass.WebRTCDataChannel)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) WriteMode() WriteMode {
	return WriteMode(class(self).GetWriteMode())
}

func (self Instance) SetWriteMode(value WriteMode) {
	class(self).SetWriteMode(value)
}

/*
Reserved, but not used for now.
*/
//go:nosplit
func (self class) Poll() Error.Code { //gd:WebRTCDataChannel.poll
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.WebRTCDataChannel.Bind_poll, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Error.Code(r_ret.Get())
	frame.Free()
	return ret
}

/*
Closes this data channel, notifying the other peer.
*/
//go:nosplit
func (self class) Close() { //gd:WebRTCDataChannel.close
	var frame = callframe.New()
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.WebRTCDataChannel.Bind_close, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns [code]true[/code] if the last received packet was transferred as text. See [member write_mode].
*/
//go:nosplit
func (self class) WasStringPacket() bool { //gd:WebRTCDataChannel.was_string_packet
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.WebRTCDataChannel.Bind_was_string_packet, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetWriteMode(write_mode WriteMode) { //gd:WebRTCDataChannel.set_write_mode
	var frame = callframe.New()
	callframe.Arg(frame, write_mode)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.WebRTCDataChannel.Bind_set_write_mode, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetWriteMode() WriteMode { //gd:WebRTCDataChannel.get_write_mode
	var frame = callframe.New()
	var r_ret = callframe.Ret[WriteMode](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.WebRTCDataChannel.Bind_get_write_mode, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the current state of this channel, see [enum ChannelState].
*/
//go:nosplit
func (self class) GetReadyState() ChannelState { //gd:WebRTCDataChannel.get_ready_state
	var frame = callframe.New()
	var r_ret = callframe.Ret[ChannelState](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.WebRTCDataChannel.Bind_get_ready_state, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the label assigned to this channel during creation.
*/
//go:nosplit
func (self class) GetLabel() String.Readable { //gd:WebRTCDataChannel.get_label
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.WebRTCDataChannel.Bind_get_label, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Returns [code]true[/code] if this channel was created with ordering enabled (default).
*/
//go:nosplit
func (self class) IsOrdered() bool { //gd:WebRTCDataChannel.is_ordered
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.WebRTCDataChannel.Bind_is_ordered, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the ID assigned to this channel during creation (or auto-assigned during negotiation).
If the channel is not negotiated out-of-band the ID will only be available after the connection is established (will return [code]65535[/code] until then).
*/
//go:nosplit
func (self class) GetId() int64 { //gd:WebRTCDataChannel.get_id
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.WebRTCDataChannel.Bind_get_id, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the [code]maxPacketLifeTime[/code] value assigned to this channel during creation.
Will be [code]65535[/code] if not specified.
*/
//go:nosplit
func (self class) GetMaxPacketLifeTime() int64 { //gd:WebRTCDataChannel.get_max_packet_life_time
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.WebRTCDataChannel.Bind_get_max_packet_life_time, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the [code]maxRetransmits[/code] value assigned to this channel during creation.
Will be [code]65535[/code] if not specified.
*/
//go:nosplit
func (self class) GetMaxRetransmits() int64 { //gd:WebRTCDataChannel.get_max_retransmits
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.WebRTCDataChannel.Bind_get_max_retransmits, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the sub-protocol assigned to this channel during creation. An empty string if not specified.
*/
//go:nosplit
func (self class) GetProtocol() String.Readable { //gd:WebRTCDataChannel.get_protocol
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.WebRTCDataChannel.Bind_get_protocol, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Returns [code]true[/code] if this channel was created with out-of-band configuration.
*/
//go:nosplit
func (self class) IsNegotiated() bool { //gd:WebRTCDataChannel.is_negotiated
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.WebRTCDataChannel.Bind_is_negotiated, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the number of bytes currently queued to be sent over this channel.
*/
//go:nosplit
func (self class) GetBufferedAmount() int64 { //gd:WebRTCDataChannel.get_buffered_amount
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.WebRTCDataChannel.Bind_get_buffered_amount, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}
func (self class) AsWebRTCDataChannel() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsWebRTCDataChannel() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsWebRTCDataChannel() Instance { return self.Super().AsWebRTCDataChannel() }
func (self class) AsPacketPeer() PacketPeer.Advanced {
	return *((*PacketPeer.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsPacketPeer() PacketPeer.Instance { return self.Super().AsPacketPeer() }
func (self Instance) AsPacketPeer() PacketPeer.Instance {
	return *((*PacketPeer.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(PacketPeer.Advanced(self.AsPacketPeer()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(PacketPeer.Instance(self.AsPacketPeer()), name)
	}
}
func init() {
	gdclass.Register("WebRTCDataChannel", func(ptr gd.Object) any {
		return [1]gdclass.WebRTCDataChannel{*(*gdclass.WebRTCDataChannel)(unsafe.Pointer(&ptr))}
	})
}

type WriteMode int //gd:WebRTCDataChannel.WriteMode

const (
	/*Tells the channel to send data over this channel as text. An external peer (non-Godot) would receive this as a string.*/
	WriteModeText WriteMode = 0
	/*Tells the channel to send data over this channel as binary. An external peer (non-Godot) would receive this as array buffer or blob.*/
	WriteModeBinary WriteMode = 1
)

type ChannelState int //gd:WebRTCDataChannel.ChannelState

const (
	/*The channel was created, but it's still trying to connect.*/
	StateConnecting ChannelState = 0
	/*The channel is currently open, and data can flow over it.*/
	StateOpen ChannelState = 1
	/*The channel is being closed, no new messages will be accepted, but those already in queue will be flushed.*/
	StateClosing ChannelState = 2
	/*The channel was closed, or connection failed.*/
	StateClosed ChannelState = 3
)
