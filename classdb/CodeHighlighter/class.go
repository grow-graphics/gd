// Code generated by the generate package DO NOT EDIT

// Package CodeHighlighter provides methods for working with CodeHighlighter object instances.
package CodeHighlighter

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/SyntaxHighlighter"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
By adjusting various properties of this resource, you can change the colors of strings, comments, numbers, and other text patterns inside a [TextEdit] control.
*/
type Instance [1]gdclass.CodeHighlighter

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.CodeHighlighter

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsCodeHighlighter() Instance
}

/*
Sets the color for a keyword.
The keyword cannot contain any symbols except '_'.
*/
func (self Instance) AddKeywordColor(keyword string, color Color.RGBA) { //gd:CodeHighlighter.add_keyword_color
	Advanced(self).AddKeywordColor(String.New(keyword), Color.RGBA(color))
}

/*
Removes the keyword.
*/
func (self Instance) RemoveKeywordColor(keyword string) { //gd:CodeHighlighter.remove_keyword_color
	Advanced(self).RemoveKeywordColor(String.New(keyword))
}

/*
Returns [code]true[/code] if the keyword exists, else [code]false[/code].
*/
func (self Instance) HasKeywordColor(keyword string) bool { //gd:CodeHighlighter.has_keyword_color
	return bool(Advanced(self).HasKeywordColor(String.New(keyword)))
}

/*
Returns the color for a keyword.
*/
func (self Instance) GetKeywordColor(keyword string) Color.RGBA { //gd:CodeHighlighter.get_keyword_color
	return Color.RGBA(Advanced(self).GetKeywordColor(String.New(keyword)))
}

/*
Removes all keywords.
*/
func (self Instance) ClearKeywordColors() { //gd:CodeHighlighter.clear_keyword_colors
	Advanced(self).ClearKeywordColors()
}

/*
Sets the color for a member keyword.
The member keyword cannot contain any symbols except '_'.
It will not be highlighted if preceded by a '.'.
*/
func (self Instance) AddMemberKeywordColor(member_keyword string, color Color.RGBA) { //gd:CodeHighlighter.add_member_keyword_color
	Advanced(self).AddMemberKeywordColor(String.New(member_keyword), Color.RGBA(color))
}

/*
Removes the member keyword.
*/
func (self Instance) RemoveMemberKeywordColor(member_keyword string) { //gd:CodeHighlighter.remove_member_keyword_color
	Advanced(self).RemoveMemberKeywordColor(String.New(member_keyword))
}

/*
Returns [code]true[/code] if the member keyword exists, else [code]false[/code].
*/
func (self Instance) HasMemberKeywordColor(member_keyword string) bool { //gd:CodeHighlighter.has_member_keyword_color
	return bool(Advanced(self).HasMemberKeywordColor(String.New(member_keyword)))
}

/*
Returns the color for a member keyword.
*/
func (self Instance) GetMemberKeywordColor(member_keyword string) Color.RGBA { //gd:CodeHighlighter.get_member_keyword_color
	return Color.RGBA(Advanced(self).GetMemberKeywordColor(String.New(member_keyword)))
}

/*
Removes all member keywords.
*/
func (self Instance) ClearMemberKeywordColors() { //gd:CodeHighlighter.clear_member_keyword_colors
	Advanced(self).ClearMemberKeywordColors()
}

/*
Adds a color region (such as for comments or strings) from [param start_key] to [param end_key]. Both keys should be symbols, and [param start_key] must not be shared with other delimiters.
If [param line_only] is [code]true[/code] or [param end_key] is an empty [String], the region does not carry over to the next line.
*/
func (self Instance) AddColorRegion(start_key string, end_key string, color Color.RGBA) { //gd:CodeHighlighter.add_color_region
	Advanced(self).AddColorRegion(String.New(start_key), String.New(end_key), Color.RGBA(color), false)
}

/*
Adds a color region (such as for comments or strings) from [param start_key] to [param end_key]. Both keys should be symbols, and [param start_key] must not be shared with other delimiters.
If [param line_only] is [code]true[/code] or [param end_key] is an empty [String], the region does not carry over to the next line.
*/
func (self Expanded) AddColorRegion(start_key string, end_key string, color Color.RGBA, line_only bool) { //gd:CodeHighlighter.add_color_region
	Advanced(self).AddColorRegion(String.New(start_key), String.New(end_key), Color.RGBA(color), line_only)
}

/*
Removes the color region that uses that start key.
*/
func (self Instance) RemoveColorRegion(start_key string) { //gd:CodeHighlighter.remove_color_region
	Advanced(self).RemoveColorRegion(String.New(start_key))
}

/*
Returns [code]true[/code] if the start key exists, else [code]false[/code].
*/
func (self Instance) HasColorRegion(start_key string) bool { //gd:CodeHighlighter.has_color_region
	return bool(Advanced(self).HasColorRegion(String.New(start_key)))
}

/*
Removes all color regions.
*/
func (self Instance) ClearColorRegions() { //gd:CodeHighlighter.clear_color_regions
	Advanced(self).ClearColorRegions()
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.CodeHighlighter

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("CodeHighlighter"))
	casted := Instance{*(*gdclass.CodeHighlighter)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) NumberColor() Color.RGBA {
	return Color.RGBA(class(self).GetNumberColor())
}

func (self Instance) SetNumberColor(value Color.RGBA) {
	class(self).SetNumberColor(Color.RGBA(value))
}

func (self Instance) SymbolColor() Color.RGBA {
	return Color.RGBA(class(self).GetSymbolColor())
}

func (self Instance) SetSymbolColor(value Color.RGBA) {
	class(self).SetSymbolColor(Color.RGBA(value))
}

func (self Instance) FunctionColor() Color.RGBA {
	return Color.RGBA(class(self).GetFunctionColor())
}

func (self Instance) SetFunctionColor(value Color.RGBA) {
	class(self).SetFunctionColor(Color.RGBA(value))
}

func (self Instance) MemberVariableColor() Color.RGBA {
	return Color.RGBA(class(self).GetMemberVariableColor())
}

func (self Instance) SetMemberVariableColor(value Color.RGBA) {
	class(self).SetMemberVariableColor(Color.RGBA(value))
}

func (self Instance) KeywordColors() map[any]any {
	return map[any]any(gd.DictionaryAs[map[any]any](class(self).GetKeywordColors()))
}

func (self Instance) SetKeywordColors(value map[any]any) {
	class(self).SetKeywordColors(gd.DictionaryFromMap(value))
}

func (self Instance) MemberKeywordColors() map[any]any {
	return map[any]any(gd.DictionaryAs[map[any]any](class(self).GetMemberKeywordColors()))
}

func (self Instance) SetMemberKeywordColors(value map[any]any) {
	class(self).SetMemberKeywordColors(gd.DictionaryFromMap(value))
}

func (self Instance) ColorRegions() map[any]any {
	return map[any]any(gd.DictionaryAs[map[any]any](class(self).GetColorRegions()))
}

func (self Instance) SetColorRegions(value map[any]any) {
	class(self).SetColorRegions(gd.DictionaryFromMap(value))
}

/*
Sets the color for a keyword.
The keyword cannot contain any symbols except '_'.
*/
//go:nosplit
func (self class) AddKeywordColor(keyword String.Readable, color Color.RGBA) { //gd:CodeHighlighter.add_keyword_color
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(keyword)))
	callframe.Arg(frame, color)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_add_keyword_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Removes the keyword.
*/
//go:nosplit
func (self class) RemoveKeywordColor(keyword String.Readable) { //gd:CodeHighlighter.remove_keyword_color
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(keyword)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_remove_keyword_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns [code]true[/code] if the keyword exists, else [code]false[/code].
*/
//go:nosplit
func (self class) HasKeywordColor(keyword String.Readable) bool { //gd:CodeHighlighter.has_keyword_color
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(keyword)))
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_has_keyword_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the color for a keyword.
*/
//go:nosplit
func (self class) GetKeywordColor(keyword String.Readable) Color.RGBA { //gd:CodeHighlighter.get_keyword_color
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(keyword)))
	var r_ret = callframe.Ret[Color.RGBA](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_get_keyword_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetKeywordColors(keywords Dictionary.Any) { //gd:CodeHighlighter.set_keyword_colors
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalDictionary(keywords)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_set_keyword_colors, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Removes all keywords.
*/
//go:nosplit
func (self class) ClearKeywordColors() { //gd:CodeHighlighter.clear_keyword_colors
	var frame = callframe.New()
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_clear_keyword_colors, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetKeywordColors() Dictionary.Any { //gd:CodeHighlighter.get_keyword_colors
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_get_keyword_colors, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Sets the color for a member keyword.
The member keyword cannot contain any symbols except '_'.
It will not be highlighted if preceded by a '.'.
*/
//go:nosplit
func (self class) AddMemberKeywordColor(member_keyword String.Readable, color Color.RGBA) { //gd:CodeHighlighter.add_member_keyword_color
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(member_keyword)))
	callframe.Arg(frame, color)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_add_member_keyword_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Removes the member keyword.
*/
//go:nosplit
func (self class) RemoveMemberKeywordColor(member_keyword String.Readable) { //gd:CodeHighlighter.remove_member_keyword_color
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(member_keyword)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_remove_member_keyword_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns [code]true[/code] if the member keyword exists, else [code]false[/code].
*/
//go:nosplit
func (self class) HasMemberKeywordColor(member_keyword String.Readable) bool { //gd:CodeHighlighter.has_member_keyword_color
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(member_keyword)))
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_has_member_keyword_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the color for a member keyword.
*/
//go:nosplit
func (self class) GetMemberKeywordColor(member_keyword String.Readable) Color.RGBA { //gd:CodeHighlighter.get_member_keyword_color
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(member_keyword)))
	var r_ret = callframe.Ret[Color.RGBA](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_get_member_keyword_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetMemberKeywordColors(member_keyword Dictionary.Any) { //gd:CodeHighlighter.set_member_keyword_colors
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalDictionary(member_keyword)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_set_member_keyword_colors, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Removes all member keywords.
*/
//go:nosplit
func (self class) ClearMemberKeywordColors() { //gd:CodeHighlighter.clear_member_keyword_colors
	var frame = callframe.New()
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_clear_member_keyword_colors, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetMemberKeywordColors() Dictionary.Any { //gd:CodeHighlighter.get_member_keyword_colors
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_get_member_keyword_colors, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Adds a color region (such as for comments or strings) from [param start_key] to [param end_key]. Both keys should be symbols, and [param start_key] must not be shared with other delimiters.
If [param line_only] is [code]true[/code] or [param end_key] is an empty [String], the region does not carry over to the next line.
*/
//go:nosplit
func (self class) AddColorRegion(start_key String.Readable, end_key String.Readable, color Color.RGBA, line_only bool) { //gd:CodeHighlighter.add_color_region
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(start_key)))
	callframe.Arg(frame, pointers.Get(gd.InternalString(end_key)))
	callframe.Arg(frame, color)
	callframe.Arg(frame, line_only)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_add_color_region, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Removes the color region that uses that start key.
*/
//go:nosplit
func (self class) RemoveColorRegion(start_key String.Readable) { //gd:CodeHighlighter.remove_color_region
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(start_key)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_remove_color_region, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns [code]true[/code] if the start key exists, else [code]false[/code].
*/
//go:nosplit
func (self class) HasColorRegion(start_key String.Readable) bool { //gd:CodeHighlighter.has_color_region
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(start_key)))
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_has_color_region, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetColorRegions(color_regions Dictionary.Any) { //gd:CodeHighlighter.set_color_regions
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalDictionary(color_regions)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_set_color_regions, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Removes all color regions.
*/
//go:nosplit
func (self class) ClearColorRegions() { //gd:CodeHighlighter.clear_color_regions
	var frame = callframe.New()
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_clear_color_regions, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetColorRegions() Dictionary.Any { //gd:CodeHighlighter.get_color_regions
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_get_color_regions, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetFunctionColor(color Color.RGBA) { //gd:CodeHighlighter.set_function_color
	var frame = callframe.New()
	callframe.Arg(frame, color)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_set_function_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetFunctionColor() Color.RGBA { //gd:CodeHighlighter.get_function_color
	var frame = callframe.New()
	var r_ret = callframe.Ret[Color.RGBA](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_get_function_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetNumberColor(color Color.RGBA) { //gd:CodeHighlighter.set_number_color
	var frame = callframe.New()
	callframe.Arg(frame, color)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_set_number_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetNumberColor() Color.RGBA { //gd:CodeHighlighter.get_number_color
	var frame = callframe.New()
	var r_ret = callframe.Ret[Color.RGBA](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_get_number_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetSymbolColor(color Color.RGBA) { //gd:CodeHighlighter.set_symbol_color
	var frame = callframe.New()
	callframe.Arg(frame, color)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_set_symbol_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetSymbolColor() Color.RGBA { //gd:CodeHighlighter.get_symbol_color
	var frame = callframe.New()
	var r_ret = callframe.Ret[Color.RGBA](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_get_symbol_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetMemberVariableColor(color Color.RGBA) { //gd:CodeHighlighter.set_member_variable_color
	var frame = callframe.New()
	callframe.Arg(frame, color)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_set_member_variable_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetMemberVariableColor() Color.RGBA { //gd:CodeHighlighter.get_member_variable_color
	var frame = callframe.New()
	var r_ret = callframe.Ret[Color.RGBA](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CodeHighlighter.Bind_get_member_variable_color, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}
func (self class) AsCodeHighlighter() Advanced    { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsCodeHighlighter() Instance { return *((*Instance)(unsafe.Pointer(&self))) }
func (self class) AsSyntaxHighlighter() SyntaxHighlighter.Advanced {
	return *((*SyntaxHighlighter.Advanced)(unsafe.Pointer(&self)))
}
func (self Instance) AsSyntaxHighlighter() SyntaxHighlighter.Instance {
	return *((*SyntaxHighlighter.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(SyntaxHighlighter.Advanced(self.AsSyntaxHighlighter()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(SyntaxHighlighter.Instance(self.AsSyntaxHighlighter()), name)
	}
}
func init() {
	gdclass.Register("CodeHighlighter", func(ptr gd.Object) any {
		return [1]gdclass.CodeHighlighter{*(*gdclass.CodeHighlighter)(unsafe.Pointer(&ptr))}
	})
}
