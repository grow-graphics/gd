// Code generated by the generate package DO NOT EDIT

// Package GLTFBufferView provides methods for working with GLTFBufferView object instances.
package GLTFBufferView

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
GLTFBufferView is a data structure representing a glTF [code]bufferView[/code] that would be found in the [code]"bufferViews"[/code] array. A buffer is a blob of binary data. A buffer view is a slice of a buffer that can be used to identify and extract data from the buffer.
Most custom uses of buffers only need to use the [member buffer], [member byte_length], and [member byte_offset]. The [member byte_stride] and [member indices] properties are for more advanced use cases such as interleaved mesh data encoded for the GPU.
*/
type Instance [1]gdclass.GLTFBufferView

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	load_buffer_view_data gdextension.MethodForClass `hash:"3945446907"`
	get_buffer            gdextension.MethodForClass `hash:"3905245786"`
	set_buffer            gdextension.MethodForClass `hash:"1286410249"`
	get_byte_offset       gdextension.MethodForClass `hash:"3905245786"`
	set_byte_offset       gdextension.MethodForClass `hash:"1286410249"`
	get_byte_length       gdextension.MethodForClass `hash:"3905245786"`
	set_byte_length       gdextension.MethodForClass `hash:"1286410249"`
	get_byte_stride       gdextension.MethodForClass `hash:"3905245786"`
	set_byte_stride       gdextension.MethodForClass `hash:"1286410249"`
	get_indices           gdextension.MethodForClass `hash:"36873697"`
	set_indices           gdextension.MethodForClass `hash:"2586408642"`
	get_vertex_attributes gdextension.MethodForClass `hash:"36873697"`
	set_vertex_attributes gdextension.MethodForClass `hash:"2586408642"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("GLTFBufferView")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsGLTFBufferView() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.GLTFBufferView

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.GLTFBufferView)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.GLTFBufferView)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.GLTFBufferView)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].InitRef()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) Buffer() int {
	return int(int(class(self).GetBuffer()))
}

func (self Instance) SetBuffer(value int) {
	class(self).SetBuffer(int64(value))
}

func (self Instance) ByteOffset() int {
	return int(int(class(self).GetByteOffset()))
}

func (self Instance) SetByteOffset(value int) {
	class(self).SetByteOffset(int64(value))
}

func (self Instance) ByteLength() int {
	return int(int(class(self).GetByteLength()))
}

func (self Instance) SetByteLength(value int) {
	class(self).SetByteLength(int64(value))
}

func (self Instance) ByteStride() int {
	return int(int(class(self).GetByteStride()))
}

func (self Instance) SetByteStride(value int) {
	class(self).SetByteStride(int64(value))
}

func (self Instance) Indices() bool {
	return bool(class(self).GetIndices())
}

func (self Instance) SetIndices(value bool) {
	class(self).SetIndices(value)
}

func (self Instance) VertexAttributes() bool {
	return bool(class(self).GetVertexAttributes())
}

func (self Instance) SetVertexAttributes(value bool) {
	class(self).SetVertexAttributes(value)
}

/*
Loads the buffer view data from the buffer referenced by this buffer view in the given [GLTFState]. Interleaved data with a byte stride is not yet supported by this method. The data is returned as a [PackedByteArray].
*/
//go:nosplit
func (self class) LoadBufferViewData(state [1]gdclass.GLTFState) Packed.Bytes { //gd:GLTFBufferView.load_buffer_view_data
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.load_buffer_view_data, gdextension.SizePackedArray|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ state gdextension.Object }{gdextension.Object(gd.ObjectChecked(state[0].AsObject()))}))
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) GetBuffer() int64 { //gd:GLTFBufferView.get_buffer
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_buffer, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBuffer(buffer int64) { //gd:GLTFBufferView.set_buffer
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_buffer, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ buffer int64 }{buffer}))
}

//go:nosplit
func (self class) GetByteOffset() int64 { //gd:GLTFBufferView.get_byte_offset
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_byte_offset, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetByteOffset(byte_offset int64) { //gd:GLTFBufferView.set_byte_offset
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_byte_offset, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ byte_offset int64 }{byte_offset}))
}

//go:nosplit
func (self class) GetByteLength() int64 { //gd:GLTFBufferView.get_byte_length
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_byte_length, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetByteLength(byte_length int64) { //gd:GLTFBufferView.set_byte_length
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_byte_length, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ byte_length int64 }{byte_length}))
}

//go:nosplit
func (self class) GetByteStride() int64 { //gd:GLTFBufferView.get_byte_stride
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_byte_stride, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetByteStride(byte_stride int64) { //gd:GLTFBufferView.set_byte_stride
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_byte_stride, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ byte_stride int64 }{byte_stride}))
}

//go:nosplit
func (self class) GetIndices() bool { //gd:GLTFBufferView.get_indices
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_indices, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetIndices(indices bool) { //gd:GLTFBufferView.set_indices
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_indices, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ indices bool }{indices}))
}

//go:nosplit
func (self class) GetVertexAttributes() bool { //gd:GLTFBufferView.get_vertex_attributes
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_vertex_attributes, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVertexAttributes(is_attributes bool) { //gd:GLTFBufferView.set_vertex_attributes
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_vertex_attributes, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ is_attributes bool }{is_attributes}))
}
func (self class) AsGLTFBufferView() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsGLTFBufferView() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsGLTFBufferView() Instance { return self.Super().AsGLTFBufferView() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("GLTFBufferView", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
