// Code generated by the generate package DO NOT EDIT

// Package AudioEffectDistortion provides methods for working with AudioEffectDistortion object instances.
package AudioEffectDistortion

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/AudioEffect"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Different types are available: clip, tan, lo-fi (bit crushing), overdrive, or waveshape.
By distorting the waveform the frequency content changes, which will often make the sound "crunchy" or "abrasive". For games, it can simulate sound coming from some saturated device or speaker very efficiently.
*/
type Instance [1]gdclass.AudioEffectDistortion

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_mode       gdextension.MethodForClass `hash:"1314744793"`
	get_mode       gdextension.MethodForClass `hash:"809118343"`
	set_pre_gain   gdextension.MethodForClass `hash:"373806689"`
	get_pre_gain   gdextension.MethodForClass `hash:"1740695150"`
	set_keep_hf_hz gdextension.MethodForClass `hash:"373806689"`
	get_keep_hf_hz gdextension.MethodForClass `hash:"1740695150"`
	set_drive      gdextension.MethodForClass `hash:"373806689"`
	get_drive      gdextension.MethodForClass `hash:"1740695150"`
	set_post_gain  gdextension.MethodForClass `hash:"373806689"`
	get_post_gain  gdextension.MethodForClass `hash:"1740695150"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("AudioEffectDistortion")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAudioEffectDistortion() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AudioEffectDistortion

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.AudioEffectDistortion](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.AudioEffectDistortion](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.AudioEffectDistortion{pointers.Add[gdclass.AudioEffectDistortion]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.AudioEffectDistortion{pointers.New[gdclass.AudioEffectDistortion]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Mode() Mode {
	return Mode(class(self).GetMode())
}

func (self Instance) SetMode(value Mode) {
	class(self).SetMode(value)
}

func (self Instance) PreGain() Float.X {
	return Float.X(Float.X(class(self).GetPreGain()))
}

func (self Instance) SetPreGain(value Float.X) {
	class(self).SetPreGain(float64(value))
}

func (self Instance) KeepHfHz() Float.X {
	return Float.X(Float.X(class(self).GetKeepHfHz()))
}

func (self Instance) SetKeepHfHz(value Float.X) {
	class(self).SetKeepHfHz(float64(value))
}

func (self Instance) Drive() Float.X {
	return Float.X(Float.X(class(self).GetDrive()))
}

func (self Instance) SetDrive(value Float.X) {
	class(self).SetDrive(float64(value))
}

func (self Instance) PostGain() Float.X {
	return Float.X(Float.X(class(self).GetPostGain()))
}

func (self Instance) SetPostGain(value Float.X) {
	class(self).SetPostGain(float64(value))
}

//go:nosplit
func (self class) SetMode(mode Mode) { //gd:AudioEffectDistortion.set_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode Mode }{mode}))
}

//go:nosplit
func (self class) GetMode() Mode { //gd:AudioEffectDistortion.get_mode
	var r_ret = gdextension.Call[Mode](gd.ObjectChecked(self.AsObject()), methods.get_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPreGain(pre_gain float64) { //gd:AudioEffectDistortion.set_pre_gain
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pre_gain, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ pre_gain float64 }{pre_gain}))
}

//go:nosplit
func (self class) GetPreGain() float64 { //gd:AudioEffectDistortion.get_pre_gain
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_pre_gain, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetKeepHfHz(keep_hf_hz float64) { //gd:AudioEffectDistortion.set_keep_hf_hz
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_keep_hf_hz, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ keep_hf_hz float64 }{keep_hf_hz}))
}

//go:nosplit
func (self class) GetKeepHfHz() float64 { //gd:AudioEffectDistortion.get_keep_hf_hz
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_keep_hf_hz, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDrive(drive float64) { //gd:AudioEffectDistortion.set_drive
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_drive, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ drive float64 }{drive}))
}

//go:nosplit
func (self class) GetDrive() float64 { //gd:AudioEffectDistortion.get_drive
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_drive, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPostGain(post_gain float64) { //gd:AudioEffectDistortion.set_post_gain
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_post_gain, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ post_gain float64 }{post_gain}))
}

//go:nosplit
func (self class) GetPostGain() float64 { //gd:AudioEffectDistortion.get_post_gain
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_post_gain, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsAudioEffectDistortion() Advanced {
	return Advanced{pointers.AsA[gdclass.AudioEffectDistortion](self[0])}
}
func (self Instance) AsAudioEffectDistortion() Instance {
	return Instance{pointers.AsA[gdclass.AudioEffectDistortion](self[0])}
}
func (self *Extension[T]) AsAudioEffectDistortion() Instance {
	return self.Super().AsAudioEffectDistortion()
}
func (self class) AsAudioEffect() AudioEffect.Advanced {
	return AudioEffect.Advanced{pointers.AsA[gdclass.AudioEffect](self[0])}
}
func (self *Extension[T]) AsAudioEffect() AudioEffect.Instance { return self.Super().AsAudioEffect() }
func (self Instance) AsAudioEffect() AudioEffect.Instance {
	return AudioEffect.Instance{pointers.AsA[gdclass.AudioEffect](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioEffect.Advanced(self.AsAudioEffect()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioEffect.Instance(self.AsAudioEffect()), name)
	}
}
func init() {
	gdclass.Register("AudioEffectDistortion", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.AudioEffectDistortion](ptr)} })
}

type Mode int //gd:AudioEffectDistortion.Mode

const (
	/*Digital distortion effect which cuts off peaks at the top and bottom of the waveform.*/
	ModeClip Mode = 0
	ModeAtan Mode = 1
	/*Low-resolution digital distortion effect (bit depth reduction). You can use it to emulate the sound of early digital audio devices.*/
	ModeLofi Mode = 2
	/*Emulates the warm distortion produced by a field effect transistor, which is commonly used in solid-state musical instrument amplifiers. The [member drive] property has no effect in this mode.*/
	ModeOverdrive Mode = 3
	/*Waveshaper distortions are used mainly by electronic musicians to achieve an extra-abrasive sound.*/
	ModeWaveshape Mode = 4
)
