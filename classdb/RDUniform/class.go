// Code generated by the generate package DO NOT EDIT

// Package RDUniform provides methods for working with RDUniform object instances.
package RDUniform

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Rendering"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This object is used by [RenderingDevice].
*/
type Instance [1]gdclass.RDUniform

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsRDUniform() Instance
}

/*
Binds the given id to the uniform. The data associated with the id is then used when the uniform is passed to a shader.
*/
func (self Instance) AddId(id RID.Any) { //gd:RDUniform.add_id
	Advanced(self).AddId(RID.Any(id))
}

/*
Unbinds all ids currently bound to the uniform.
*/
func (self Instance) ClearIds() { //gd:RDUniform.clear_ids
	Advanced(self).ClearIds()
}

/*
Returns an array of all ids currently bound to the uniform.
*/
func (self Instance) GetIds() [][]RID.Any { //gd:RDUniform.get_ids
	return [][]RID.Any(gd.ArrayAs[[][]RID.Any](gd.InternalArray(Advanced(self).GetIds())))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.RDUniform

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("RDUniform"))
	casted := Instance{*(*gdclass.RDUniform)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) UniformType() Rendering.UniformType {
	return Rendering.UniformType(class(self).GetUniformType())
}

func (self Instance) SetUniformType(value Rendering.UniformType) {
	class(self).SetUniformType(value)
}

func (self Instance) Binding() int {
	return int(int(class(self).GetBinding()))
}

func (self Instance) SetBinding(value int) {
	class(self).SetBinding(int64(value))
}

//go:nosplit
func (self class) SetUniformType(p_member Rendering.UniformType) { //gd:RDUniform.set_uniform_type
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDUniform.Bind_set_uniform_type), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.UniformType }{p_member}))
}

//go:nosplit
func (self class) GetUniformType() Rendering.UniformType { //gd:RDUniform.get_uniform_type
	var r_ret = gdextension.Call[Rendering.UniformType](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDUniform.Bind_get_uniform_type), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBinding(p_member int64) { //gd:RDUniform.set_binding
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDUniform.Bind_set_binding), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member int64 }{p_member}))
}

//go:nosplit
func (self class) GetBinding() int64 { //gd:RDUniform.get_binding
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDUniform.Bind_get_binding), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Binds the given id to the uniform. The data associated with the id is then used when the uniform is passed to a shader.
*/
//go:nosplit
func (self class) AddId(id RID.Any) { //gd:RDUniform.add_id
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDUniform.Bind_add_id), 0|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ id RID.Any }{id}))
}

/*
Unbinds all ids currently bound to the uniform.
*/
//go:nosplit
func (self class) ClearIds() { //gd:RDUniform.clear_ids
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDUniform.Bind_clear_ids), 0, unsafe.Pointer(&struct{}{}))
}

/*
Returns an array of all ids currently bound to the uniform.
*/
//go:nosplit
func (self class) GetIds() Array.Contains[RID.Any] { //gd:RDUniform.get_ids
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDUniform.Bind_get_ids), gdextension.SizeArray, unsafe.Pointer(&struct{}{}))
	var ret = Array.Through(gd.ArrayProxy[RID.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}
func (self class) AsRDUniform() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsRDUniform() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsRDUniform() Instance { return self.Super().AsRDUniform() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("RDUniform", func(ptr gd.Object) any { return [1]gdclass.RDUniform{*(*gdclass.RDUniform)(unsafe.Pointer(&ptr))} })
}
