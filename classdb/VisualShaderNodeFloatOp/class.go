// Code generated by the generate package DO NOT EDIT

// Package VisualShaderNodeFloatOp provides methods for working with VisualShaderNodeFloatOp object instances.
package VisualShaderNodeFloatOp

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/VisualShaderNode"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Applies [member operator] to two floating-point inputs: [code]a[/code] and [code]b[/code].
*/
type Instance [1]gdclass.VisualShaderNodeFloatOp

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_operator gdextension.MethodForClass `hash:"2488468047"`
	get_operator gdextension.MethodForClass `hash:"1867979390"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("VisualShaderNodeFloatOp")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsVisualShaderNodeFloatOp() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.VisualShaderNodeFloatOp

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.VisualShaderNodeFloatOp](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.VisualShaderNodeFloatOp](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.VisualShaderNodeFloatOp{pointers.Add[gdclass.VisualShaderNodeFloatOp]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.VisualShaderNodeFloatOp{pointers.New[gdclass.VisualShaderNodeFloatOp]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Operator() Operator {
	return Operator(class(self).GetOperator())
}

func (self Instance) SetOperator(value Operator) {
	class(self).SetOperator(value)
}

//go:nosplit
func (self class) SetOperator(op Operator) { //gd:VisualShaderNodeFloatOp.set_operator
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_operator, 0|(gdextension.SizeInt<<4), &struct{ op Operator }{op})
}

//go:nosplit
func (self class) GetOperator() Operator { //gd:VisualShaderNodeFloatOp.get_operator
	var r_ret = gdextension.Call[Operator](gd.ObjectChecked(self.AsObject()), methods.get_operator, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsVisualShaderNodeFloatOp() Advanced {
	return Advanced{pointers.AsA[gdclass.VisualShaderNodeFloatOp](self[0])}
}
func (self Instance) AsVisualShaderNodeFloatOp() Instance {
	return Instance{pointers.AsA[gdclass.VisualShaderNodeFloatOp](self[0])}
}
func (self *Extension[T]) AsVisualShaderNodeFloatOp() Instance {
	return self.Super().AsVisualShaderNodeFloatOp()
}
func (self class) AsVisualShaderNode() VisualShaderNode.Advanced {
	return VisualShaderNode.Advanced{pointers.AsA[gdclass.VisualShaderNode](self[0])}
}
func (self *Extension[T]) AsVisualShaderNode() VisualShaderNode.Instance {
	return self.Super().AsVisualShaderNode()
}
func (self Instance) AsVisualShaderNode() VisualShaderNode.Instance {
	return VisualShaderNode.Instance{pointers.AsA[gdclass.VisualShaderNode](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualShaderNode.Advanced(self.AsVisualShaderNode()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualShaderNode.Instance(self.AsVisualShaderNode()), name)
	}
}
func init() {
	gdclass.Register("VisualShaderNodeFloatOp", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.VisualShaderNodeFloatOp](ptr)} })
}

type Operator int //gd:VisualShaderNodeFloatOp.Operator

const (
	/*Sums two numbers using [code]a + b[/code].*/
	OpAdd Operator = 0
	/*Subtracts two numbers using [code]a - b[/code].*/
	OpSub Operator = 1
	/*Multiplies two numbers using [code]a * b[/code].*/
	OpMul Operator = 2
	/*Divides two numbers using [code]a / b[/code].*/
	OpDiv Operator = 3
	/*Calculates the remainder of two numbers. Translates to [code]mod(a, b)[/code] in the Godot Shader Language.*/
	OpMod Operator = 4
	/*Raises the [code]a[/code] to the power of [code]b[/code]. Translates to [code]pow(a, b)[/code] in the Godot Shader Language.*/
	OpPow Operator = 5
	/*Returns the greater of two numbers. Translates to [code]max(a, b)[/code] in the Godot Shader Language.*/
	OpMax Operator = 6
	/*Returns the lesser of two numbers. Translates to [code]min(a, b)[/code] in the Godot Shader Language.*/
	OpMin Operator = 7
	/*Returns the arc-tangent of the parameters. Translates to [code]atan(a, b)[/code] in the Godot Shader Language.*/
	OpAtan2 Operator = 8
	/*Generates a step function by comparing [code]b[/code](x) to [code]a[/code](edge). Returns 0.0 if [code]x[/code] is smaller than [code]edge[/code] and otherwise 1.0. Translates to [code]step(a, b)[/code] in the Godot Shader Language.*/
	OpStep Operator = 9
	/*Represents the size of the [enum Operator] enum.*/
	OpEnumSize Operator = 10
)
