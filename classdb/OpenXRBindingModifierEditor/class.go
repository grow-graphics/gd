// Code generated by the generate package DO NOT EDIT

// Package OpenXRBindingModifierEditor provides methods for working with OpenXRBindingModifierEditor object instances.
package OpenXRBindingModifierEditor

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Container"
import "graphics.gd/classdb/Control"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/OpenXRActionMap"
import "graphics.gd/classdb/OpenXRBindingModifier"
import "graphics.gd/classdb/PanelContainer"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This is the default binding modifier editor used in the OpenXR action map.
*/
type Instance [1]gdclass.OpenXRBindingModifierEditor

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_binding_modifier gdextension.MethodForClass `hash:"2930765082"`
	setup                gdextension.MethodForClass `hash:"1284787389"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("OpenXRBindingModifierEditor")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsOpenXRBindingModifierEditor() Instance
}

/*
Returns the [OpenXRBindingModifier] currently being edited.
*/
func (self Instance) GetBindingModifier() OpenXRBindingModifier.Instance { //gd:OpenXRBindingModifierEditor.get_binding_modifier
	return OpenXRBindingModifier.Instance(Advanced(self).GetBindingModifier())
}

/*
Setup this editor for the provided [param action_map] and [param binding_modifier].
*/
func (self Instance) Setup(action_map OpenXRActionMap.Instance, binding_modifier OpenXRBindingModifier.Instance) { //gd:OpenXRBindingModifierEditor.setup
	Advanced(self).Setup(action_map, binding_modifier)
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.OpenXRBindingModifierEditor

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.OpenXRBindingModifierEditor](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.OpenXRBindingModifierEditor](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.OpenXRBindingModifierEditor{pointers.Add[gdclass.OpenXRBindingModifierEditor]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.OpenXRBindingModifierEditor{pointers.New[gdclass.OpenXRBindingModifierEditor]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsObject()[0].Notification(0, false)
	return casted
}

/*
Returns the [OpenXRBindingModifier] currently being edited.
*/
//go:nosplit
func (self class) GetBindingModifier() [1]gdclass.OpenXRBindingModifier { //gd:OpenXRBindingModifierEditor.get_binding_modifier
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_binding_modifier, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.OpenXRBindingModifier{gd.PointerWithOwnershipTransferredToGo[gdclass.OpenXRBindingModifier](r_ret)}
	return ret
}

/*
Setup this editor for the provided [param action_map] and [param binding_modifier].
*/
//go:nosplit
func (self class) Setup(action_map [1]gdclass.OpenXRActionMap, binding_modifier [1]gdclass.OpenXRBindingModifier) { //gd:OpenXRBindingModifierEditor.setup
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.setup, 0|(gdextension.SizeObject<<4)|(gdextension.SizeObject<<8), unsafe.Pointer(&struct {
		action_map       gdextension.Object
		binding_modifier gdextension.Object
	}{gdextension.Object(gd.ObjectChecked(action_map[0].AsObject())), gdextension.Object(gd.ObjectChecked(binding_modifier[0].AsObject()))}))
}
func (self Instance) OnBindingModifierRemoved(cb func(binding_modifier_editor Object.Instance), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("binding_modifier_removed"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) BindingModifierRemoved() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`BindingModifierRemoved`))))
}

func (self class) AsOpenXRBindingModifierEditor() Advanced {
	return Advanced{pointers.AsA[gdclass.OpenXRBindingModifierEditor](self[0])}
}
func (self Instance) AsOpenXRBindingModifierEditor() Instance {
	return Instance{pointers.AsA[gdclass.OpenXRBindingModifierEditor](self[0])}
}
func (self *Extension[T]) AsOpenXRBindingModifierEditor() Instance {
	return self.Super().AsOpenXRBindingModifierEditor()
}
func (self class) AsPanelContainer() PanelContainer.Advanced {
	return PanelContainer.Advanced{pointers.AsA[gdclass.PanelContainer](self[0])}
}
func (self *Extension[T]) AsPanelContainer() PanelContainer.Instance {
	return self.Super().AsPanelContainer()
}
func (self Instance) AsPanelContainer() PanelContainer.Instance {
	return PanelContainer.Instance{pointers.AsA[gdclass.PanelContainer](self[0])}
}
func (self class) AsContainer() Container.Advanced {
	return Container.Advanced{pointers.AsA[gdclass.Container](self[0])}
}
func (self *Extension[T]) AsContainer() Container.Instance { return self.Super().AsContainer() }
func (self Instance) AsContainer() Container.Instance {
	return Container.Instance{pointers.AsA[gdclass.Container](self[0])}
}
func (self class) AsControl() Control.Advanced {
	return Control.Advanced{pointers.AsA[gdclass.Control](self[0])}
}
func (self *Extension[T]) AsControl() Control.Instance { return self.Super().AsControl() }
func (self Instance) AsControl() Control.Instance {
	return Control.Instance{pointers.AsA[gdclass.Control](self[0])}
}
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return CanvasItem.Advanced{pointers.AsA[gdclass.CanvasItem](self[0])}
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return CanvasItem.Instance{pointers.AsA[gdclass.CanvasItem](self[0])}
}
func (self class) AsNode() Node.Advanced         { return Node.Advanced{pointers.AsA[gdclass.Node](self[0])} }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance {
	return Node.Instance{pointers.AsA[gdclass.Node](self[0])}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(PanelContainer.Advanced(self.AsPanelContainer()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(PanelContainer.Instance(self.AsPanelContainer()), name)
	}
}
func init() {
	gdclass.Register("OpenXRBindingModifierEditor", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.OpenXRBindingModifierEditor](ptr)} })
}
