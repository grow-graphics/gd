// Code generated by the generate package DO NOT EDIT

// Package PathFollow2D provides methods for working with PathFollow2D object instances.
package PathFollow2D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node2D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This node takes its parent [Path2D], and returns the coordinates of a point within it, given a distance from the first vertex.
It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be children of this node. The descendant nodes will then move accordingly when setting the [member progress] in this node.
*/
type Instance [1]gdclass.PathFollow2D

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsPathFollow2D() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.PathFollow2D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("PathFollow2D"))
	casted := Instance{*(*gdclass.PathFollow2D)(unsafe.Pointer(&object))}
	return casted
}

func (self Instance) Progress() Float.X {
	return Float.X(Float.X(class(self).GetProgress()))
}

func (self Instance) SetProgress(value Float.X) {
	class(self).SetProgress(float64(value))
}

func (self Instance) ProgressRatio() Float.X {
	return Float.X(Float.X(class(self).GetProgressRatio()))
}

func (self Instance) SetProgressRatio(value Float.X) {
	class(self).SetProgressRatio(float64(value))
}

func (self Instance) HOffset() Float.X {
	return Float.X(Float.X(class(self).GetHOffset()))
}

func (self Instance) SetHOffset(value Float.X) {
	class(self).SetHOffset(float64(value))
}

func (self Instance) VOffset() Float.X {
	return Float.X(Float.X(class(self).GetVOffset()))
}

func (self Instance) SetVOffset(value Float.X) {
	class(self).SetVOffset(float64(value))
}

func (self Instance) Rotates() bool {
	return bool(class(self).IsRotating())
}

func (self Instance) SetRotates(value bool) {
	class(self).SetRotates(value)
}

func (self Instance) CubicInterp() bool {
	return bool(class(self).GetCubicInterpolation())
}

func (self Instance) SetCubicInterp(value bool) {
	class(self).SetCubicInterpolation(value)
}

func (self Instance) Loop() bool {
	return bool(class(self).HasLoop())
}

func (self Instance) SetLoop(value bool) {
	class(self).SetLoop(value)
}

//go:nosplit
func (self class) SetProgress(progress float64) { //gd:PathFollow2D.set_progress
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PathFollow2D.Bind_set_progress, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ progress float64 }{progress}))
}

//go:nosplit
func (self class) GetProgress() float64 { //gd:PathFollow2D.get_progress
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PathFollow2D.Bind_get_progress, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHOffset(h_offset float64) { //gd:PathFollow2D.set_h_offset
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PathFollow2D.Bind_set_h_offset, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ h_offset float64 }{h_offset}))
}

//go:nosplit
func (self class) GetHOffset() float64 { //gd:PathFollow2D.get_h_offset
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PathFollow2D.Bind_get_h_offset, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVOffset(v_offset float64) { //gd:PathFollow2D.set_v_offset
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PathFollow2D.Bind_set_v_offset, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ v_offset float64 }{v_offset}))
}

//go:nosplit
func (self class) GetVOffset() float64 { //gd:PathFollow2D.get_v_offset
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PathFollow2D.Bind_get_v_offset, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetProgressRatio(ratio float64) { //gd:PathFollow2D.set_progress_ratio
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PathFollow2D.Bind_set_progress_ratio, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ ratio float64 }{ratio}))
}

//go:nosplit
func (self class) GetProgressRatio() float64 { //gd:PathFollow2D.get_progress_ratio
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PathFollow2D.Bind_get_progress_ratio, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRotates(enabled bool) { //gd:PathFollow2D.set_rotates
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PathFollow2D.Bind_set_rotates, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsRotating() bool { //gd:PathFollow2D.is_rotating
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.PathFollow2D.Bind_is_rotating, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCubicInterpolation(enabled bool) { //gd:PathFollow2D.set_cubic_interpolation
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PathFollow2D.Bind_set_cubic_interpolation, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) GetCubicInterpolation() bool { //gd:PathFollow2D.get_cubic_interpolation
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.PathFollow2D.Bind_get_cubic_interpolation, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetLoop(loop bool) { //gd:PathFollow2D.set_loop
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PathFollow2D.Bind_set_loop, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ loop bool }{loop}))
}

//go:nosplit
func (self class) HasLoop() bool { //gd:PathFollow2D.has_loop
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.PathFollow2D.Bind_has_loop, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsPathFollow2D() Advanced          { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsPathFollow2D() Instance       { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsPathFollow2D() Instance  { return self.Super().AsPathFollow2D() }
func (self class) AsNode2D() Node2D.Advanced         { return *((*Node2D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode2D() Node2D.Instance { return self.Super().AsNode2D() }
func (self Instance) AsNode2D() Node2D.Instance      { return *((*Node2D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return *((*CanvasItem.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return *((*CanvasItem.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node2D.Advanced(self.AsNode2D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node2D.Instance(self.AsNode2D()), name)
	}
}
func init() {
	gdclass.Register("PathFollow2D", func(ptr gd.Object) any {
		return [1]gdclass.PathFollow2D{*(*gdclass.PathFollow2D)(unsafe.Pointer(&ptr))}
	})
}
