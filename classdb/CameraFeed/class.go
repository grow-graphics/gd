// Code generated by the generate package DO NOT EDIT

// Package CameraFeed provides methods for working with CameraFeed object instances.
package CameraFeed

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Image"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Transform2D"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A camera feed gives you access to a single physical camera attached to your device. When enabled, Godot will start capturing frames from the camera which can then be used. See also [CameraServer].
[b]Note:[/b] Many cameras will return YCbCr images which are split into two textures and need to be combined in a shader. Godot does this automatically for you if you set the environment to show the camera image in the background.
[b]Note:[/b] This class is currently only implemented on Linux, macOS, and iOS. On other platforms no [CameraFeed]s will be available. To get a [CameraFeed] on iOS, the camera plugin from [url=https://github.com/godotengine/godot-ios-plugins]godot-ios-plugins[/url] is required.

	See [Interface] for methods that can be overridden by a [Class] that extends it.
*/
type Instance [1]gdclass.CameraFeed

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsCameraFeed() Instance
}
type Interface interface {
	//Called when the camera feed is activated.
	ActivateFeed() bool
	//Called when the camera feed is deactivated.
	DeactivateFeed()
}

// Implementation implements [Interface] with empty methods.
type Implementation = implementation

type implementation struct{}

func (self implementation) ActivateFeed() (_ bool) { return }
func (self implementation) DeactivateFeed()        { return }

/*
Called when the camera feed is activated.
*/
func (Instance) _activate_feed(impl func(ptr unsafe.Pointer) bool) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args gd.Address, p_back gd.Address) {
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
	}
}

/*
Called when the camera feed is deactivated.
*/
func (Instance) _deactivate_feed(impl func(ptr unsafe.Pointer)) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args gd.Address, p_back gd.Address) {
		self := reflect.ValueOf(class).UnsafePointer()
		impl(self)
	}
}

/*
Returns the unique ID for this feed.
*/
func (self Instance) GetId() int { //gd:CameraFeed.get_id
	return int(int(Advanced(self).GetId()))
}

/*
Returns the camera's name.
*/
func (self Instance) GetName() string { //gd:CameraFeed.get_name
	return string(Advanced(self).GetName().String())
}

/*
Sets the camera's name.
*/
func (self Instance) SetName(name string) { //gd:CameraFeed.set_name
	Advanced(self).SetName(String.New(name))
}

/*
Returns the position of camera on the device.
*/
func (self Instance) GetPosition() FeedPosition { //gd:CameraFeed.get_position
	return FeedPosition(Advanced(self).GetPosition())
}

/*
Sets the position of this camera.
*/
func (self Instance) SetPosition(position FeedPosition) { //gd:CameraFeed.set_position
	Advanced(self).SetPosition(position)
}

/*
Sets RGB image for this feed.
*/
func (self Instance) SetRgbImage(rgb_image Image.Instance) { //gd:CameraFeed.set_rgb_image
	Advanced(self).SetRgbImage(rgb_image)
}

/*
Sets YCbCr image for this feed.
*/
func (self Instance) SetYcbcrImage(ycbcr_image Image.Instance) { //gd:CameraFeed.set_ycbcr_image
	Advanced(self).SetYcbcrImage(ycbcr_image)
}

/*
Sets the feed as external feed provided by another library.
*/
func (self Instance) SetExternal(width int, height int) { //gd:CameraFeed.set_external
	Advanced(self).SetExternal(int64(width), int64(height))
}

/*
Returns the texture backend ID (usable by some external libraries that need a handle to a texture to write data).
*/
func (self Instance) GetTextureTexId(feed_image_type ImageType) int { //gd:CameraFeed.get_texture_tex_id
	return int(int(Advanced(self).GetTextureTexId(feed_image_type)))
}

/*
Returns feed image data type.
*/
func (self Instance) GetDatatype() FeedDataType { //gd:CameraFeed.get_datatype
	return FeedDataType(Advanced(self).GetDatatype())
}

/*
Sets the feed format parameters for the given index in the [member formats] array. Returns [code]true[/code] on success. By default YUYV encoded stream is transformed to FEED_RGB. YUYV encoded stream output format can be changed with [param parameters].output value:
[code]separate[/code] will result in FEED_YCBCR_SEP
[code]grayscale[/code] will result in desaturated FEED_RGB
[code]copy[/code] will result in FEED_YCBCR
*/
func (self Instance) SetFormat(index int, parameters FormatParameters) bool { //gd:CameraFeed.set_format
	return bool(Advanced(self).SetFormat(int64(index), gd.DictionaryFromMap(parameters)))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.CameraFeed

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("CameraFeed"))
	casted := Instance{*(*gdclass.CameraFeed)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) FeedIsActive() bool {
	return bool(class(self).IsActive())
}

func (self Instance) SetFeedIsActive(value bool) {
	class(self).SetActive(value)
}

func (self Instance) FeedTransform() Transform2D.OriginXY {
	return Transform2D.OriginXY(class(self).GetTransform())
}

func (self Instance) SetFeedTransform(value Transform2D.OriginXY) {
	class(self).SetTransform(Transform2D.OriginXY(value))
}

func (self Instance) Formats() []any {
	return []any(gd.ArrayAs[[]any](gd.InternalArray(class(self).GetFormats())))
}

/*
Called when the camera feed is activated.
*/
func (class) _activate_feed(impl func(ptr unsafe.Pointer) bool) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args gd.Address, p_back gd.Address) {
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self)
		gd.UnsafeSet(p_back, ret)
	}
}

/*
Called when the camera feed is deactivated.
*/
func (class) _deactivate_feed(impl func(ptr unsafe.Pointer)) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args gd.Address, p_back gd.Address) {
		self := reflect.ValueOf(class).UnsafePointer()
		impl(self)
	}
}

/*
Returns the unique ID for this feed.
*/
//go:nosplit
func (self class) GetId() int64 { //gd:CameraFeed.get_id
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_get_id, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) IsActive() bool { //gd:CameraFeed.is_active
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_is_active, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetActive(active bool) { //gd:CameraFeed.set_active
	var frame = callframe.New()
	callframe.Arg(frame, active)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_set_active, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the camera's name.
*/
//go:nosplit
func (self class) GetName() String.Readable { //gd:CameraFeed.get_name
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_get_name, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Sets the camera's name.
*/
//go:nosplit
func (self class) SetName(name String.Readable) { //gd:CameraFeed.set_name
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(name)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_set_name, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the position of camera on the device.
*/
//go:nosplit
func (self class) GetPosition() FeedPosition { //gd:CameraFeed.get_position
	var frame = callframe.New()
	var r_ret = callframe.Ret[FeedPosition](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_get_position, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Sets the position of this camera.
*/
//go:nosplit
func (self class) SetPosition(position FeedPosition) { //gd:CameraFeed.set_position
	var frame = callframe.New()
	callframe.Arg(frame, position)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_set_position, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetTransform() Transform2D.OriginXY { //gd:CameraFeed.get_transform
	var frame = callframe.New()
	var r_ret = callframe.Ret[Transform2D.OriginXY](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_get_transform, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetTransform(transform Transform2D.OriginXY) { //gd:CameraFeed.set_transform
	var frame = callframe.New()
	callframe.Arg(frame, transform)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_set_transform, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Sets RGB image for this feed.
*/
//go:nosplit
func (self class) SetRgbImage(rgb_image [1]gdclass.Image) { //gd:CameraFeed.set_rgb_image
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(rgb_image[0])[0])
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_set_rgb_image, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Sets YCbCr image for this feed.
*/
//go:nosplit
func (self class) SetYcbcrImage(ycbcr_image [1]gdclass.Image) { //gd:CameraFeed.set_ycbcr_image
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(ycbcr_image[0])[0])
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_set_ycbcr_image, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Sets the feed as external feed provided by another library.
*/
//go:nosplit
func (self class) SetExternal(width int64, height int64) { //gd:CameraFeed.set_external
	var frame = callframe.New()
	callframe.Arg(frame, width)
	callframe.Arg(frame, height)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_set_external, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the texture backend ID (usable by some external libraries that need a handle to a texture to write data).
*/
//go:nosplit
func (self class) GetTextureTexId(feed_image_type ImageType) int64 { //gd:CameraFeed.get_texture_tex_id
	var frame = callframe.New()
	callframe.Arg(frame, feed_image_type)
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_get_texture_tex_id, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns feed image data type.
*/
//go:nosplit
func (self class) GetDatatype() FeedDataType { //gd:CameraFeed.get_datatype
	var frame = callframe.New()
	var r_ret = callframe.Ret[FeedDataType](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_get_datatype, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetFormats() Array.Any { //gd:CameraFeed.get_formats
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_get_formats, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Array.Through(gd.ArrayProxy[variant.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Sets the feed format parameters for the given index in the [member formats] array. Returns [code]true[/code] on success. By default YUYV encoded stream is transformed to FEED_RGB. YUYV encoded stream output format can be changed with [param parameters].output value:
[code]separate[/code] will result in FEED_YCBCR_SEP
[code]grayscale[/code] will result in desaturated FEED_RGB
[code]copy[/code] will result in FEED_YCBCR
*/
//go:nosplit
func (self class) SetFormat(index int64, parameters Dictionary.Any) bool { //gd:CameraFeed.set_format
	var frame = callframe.New()
	callframe.Arg(frame, index)
	callframe.Arg(frame, pointers.Get(gd.InternalDictionary(parameters)))
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.CameraFeed.Bind_set_format, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}
func (self Instance) OnFrameChanged(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("frame_changed"), gd.NewCallable(cb), 0)
}

func (self Instance) OnFormatChanged(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("format_changed"), gd.NewCallable(cb), 0)
}

func (self class) AsCameraFeed() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsCameraFeed() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsCameraFeed() Instance { return self.Super().AsCameraFeed() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	case "_activate_feed":
		return reflect.ValueOf(self._activate_feed)
	case "_deactivate_feed":
		return reflect.ValueOf(self._deactivate_feed)
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	case "_activate_feed":
		return reflect.ValueOf(self._activate_feed)
	case "_deactivate_feed":
		return reflect.ValueOf(self._deactivate_feed)
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("CameraFeed", func(ptr gd.Object) any { return [1]gdclass.CameraFeed{*(*gdclass.CameraFeed)(unsafe.Pointer(&ptr))} })
}

type FeedDataType int //gd:CameraFeed.FeedDataType

const (
	/*No image set for the feed.*/
	FeedNoimage FeedDataType = 0
	/*Feed supplies RGB images.*/
	FeedRgb FeedDataType = 1
	/*Feed supplies YCbCr images that need to be converted to RGB.*/
	FeedYcbcr FeedDataType = 2
	/*Feed supplies separate Y and CbCr images that need to be combined and converted to RGB.*/
	FeedYcbcrSep FeedDataType = 3
	/*Feed supplies external image.*/
	FeedExternal FeedDataType = 4
)

type FeedPosition int //gd:CameraFeed.FeedPosition

const (
	/*Unspecified position.*/
	FeedUnspecified FeedPosition = 0
	/*Camera is mounted at the front of the device.*/
	FeedFront FeedPosition = 1
	/*Camera is mounted at the back of the device.*/
	FeedBack FeedPosition = 2
)

type ImageType int //gd:CameraServer.FeedImage

const (
	/*The RGBA camera image.*/
	FeedRgbaImage ImageType = 0
	/*The [url=https://en.wikipedia.org/wiki/YCbCr]YCbCr[/url] camera image.*/
	FeedYcbcrImage ImageType = 0
	/*The Y component camera image.*/
	FeedYImage ImageType = 0
	/*The CbCr component camera image.*/
	FeedCbcrImage ImageType = 1
)

type FormatParameters struct {
	Output string `gd:"output"`
}
