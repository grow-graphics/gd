// Code generated by the generate package DO NOT EDIT

// Package ENV provides methods for working with ENV object instances.
package ENV

import "unsafe"
import "sync"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This class provides access to environment variables file.
*/
type Instance [1]gdclass.ENV

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

var self [1]gdclass.ENV
var once sync.Once

func singleton() {
	obj := gd.Global.Object.GetSingleton(gd.Global.Singletons.ENV)
	self = *(*[1]gdclass.ENV)(unsafe.Pointer(&obj))
}

/*
Loads environment variables from [param file].
*/
func Config(file string, override bool) map[any]any { //gd:ENV.config
	once.Do(singleton)
	return map[any]any(gd.DictionaryAs[map[any]any](Advanced().Config(String.New(file), override)))
}

/*
Loads environment variables from [param file].
*/
func ConfigOptions(file string, override bool) map[any]any { //gd:ENV.config
	once.Do(singleton)
	return map[any]any(gd.DictionaryAs[map[any]any](Advanced().Config(String.New(file), override)))
}

/*
Parses the [param data] into a dictionary.
*/
func Parse(data string) map[any]any { //gd:ENV.parse
	once.Do(singleton)
	return map[any]any(gd.DictionaryAs[map[any]any](Advanced().Parse(String.New(data))))
}

/*
Populates environment variables from [param env].
Override existing variables if [param override] is [code]true[/code].
*/
func Populate(env map[any]any, override bool) map[any]any { //gd:ENV.populate
	once.Do(singleton)
	return map[any]any(gd.DictionaryAs[map[any]any](Advanced().Populate(gd.DictionaryFromMap(env), override)))
}

/*
Populates environment variables from [param env].
Override existing variables if [param override] is [code]true[/code].
*/
func PopulateOptions(env map[any]any, override bool) map[any]any { //gd:ENV.populate
	once.Do(singleton)
	return map[any]any(gd.DictionaryAs[map[any]any](Advanced().Populate(gd.DictionaryFromMap(env), override)))
}

/*
Refreshes environment variables.
Override existing variables if [param override] is [code]true[/code].
*/
func Refresh(override bool) map[any]any { //gd:ENV.refresh
	once.Do(singleton)
	return map[any]any(gd.DictionaryAs[map[any]any](Advanced().Refresh(override)))
}

/*
Refreshes environment variables.
Override existing variables if [param override] is [code]true[/code].
*/
func RefreshOptions(override bool) map[any]any { //gd:ENV.refresh
	once.Do(singleton)
	return map[any]any(gd.DictionaryAs[map[any]any](Advanced().Refresh(override)))
}

/*
Clears all environment variables
*/
func Clear() { //gd:ENV.clear
	once.Do(singleton)
	Advanced().Clear()
}

/*
Returns the value of the environment variable [param key].
*/
func GetEnv(key string) any { //gd:ENV.get_env
	once.Do(singleton)
	return any(Advanced().GetEnv(String.New(key)).Interface())
}

/*
Sets the value of the environment variable [param key] to [param value].
*/
func SetEnv(key string, value any) { //gd:ENV.set_env
	once.Do(singleton)
	Advanced().SetEnv(String.New(key), variant.New(value))
}

/*
Returns [code]true[/code] if the environment variable [param key] exists.
*/
func HasEnv(key string) bool { //gd:ENV.has_env
	once.Do(singleton)
	return bool(Advanced().HasEnv(String.New(key)))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
func Advanced() class { once.Do(singleton); return self }

type class [1]gdclass.ENV

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }

func Debug() bool {
	once.Do(singleton)
	return bool(class(self).GetDebug())
}

func SetDebug(value bool) {
	once.Do(singleton)
	class(self).SetDebug(value)
}

/*
Loads environment variables from [param file].
*/
//go:nosplit
func (self class) Config(file String.Readable, override bool) Dictionary.Any { //gd:ENV.config
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(file)))
	callframe.Arg(frame, override)
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ENV.Bind_config, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Parses the [param data] into a dictionary.
*/
//go:nosplit
func (self class) Parse(data String.Readable) Dictionary.Any { //gd:ENV.parse
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(data)))
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ENV.Bind_parse, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Populates environment variables from [param env].
Override existing variables if [param override] is [code]true[/code].
*/
//go:nosplit
func (self class) Populate(env Dictionary.Any, override bool) Dictionary.Any { //gd:ENV.populate
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalDictionary(env)))
	callframe.Arg(frame, override)
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ENV.Bind_populate, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Refreshes environment variables.
Override existing variables if [param override] is [code]true[/code].
*/
//go:nosplit
func (self class) Refresh(override bool) Dictionary.Any { //gd:ENV.refresh
	var frame = callframe.New()
	callframe.Arg(frame, override)
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ENV.Bind_refresh, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Clears all environment variables
*/
//go:nosplit
func (self class) Clear() { //gd:ENV.clear
	var frame = callframe.New()
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ENV.Bind_clear, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the value of the environment variable [param key].
*/
//go:nosplit
func (self class) GetEnv(key String.Readable) variant.Any { //gd:ENV.get_env
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(key)))
	var r_ret = callframe.Ret[[3]uint64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ENV.Bind_get_env, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = variant.Implementation(gd.VariantProxy{}, pointers.Pack(pointers.New[gd.Variant](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Sets the value of the environment variable [param key] to [param value].
*/
//go:nosplit
func (self class) SetEnv(key String.Readable, value variant.Any) { //gd:ENV.set_env
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(key)))
	callframe.Arg(frame, pointers.Get(gd.InternalVariant(value)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ENV.Bind_set_env, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns [code]true[/code] if the environment variable [param key] exists.
*/
//go:nosplit
func (self class) HasEnv(key String.Readable) bool { //gd:ENV.has_env
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(key)))
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ENV.Bind_has_env, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetDebug() bool { //gd:ENV.get_debug
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ENV.Bind_get_debug, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetDebug(debug bool) { //gd:ENV.set_debug
	var frame = callframe.New()
	callframe.Arg(frame, debug)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ENV.Bind_set_debug, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}
func OnFileLoaded(cb func(file string, env map[any]any)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("file_loaded"), gd.NewCallable(cb), 0)
}

func OnCleared(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("cleared"), gd.NewCallable(cb), 0)
}

func OnRefreshed(cb func(env map[any]any)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("refreshed"), gd.NewCallable(cb), 0)
}

func OnUpdated(cb func(key string, value string)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("updated"), gd.NewCallable(cb), 0)
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Object.Advanced(self.AsObject()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Object.Instance(self.AsObject()), name)
	}
}
func init() {
	gdclass.Register("ENV", func(ptr gd.Object) any { return [1]gdclass.ENV{*(*gdclass.ENV)(unsafe.Pointer(&ptr))} })
}
