// Code generated by the generate package DO NOT EDIT

// Package VisualShaderNodeGlobalExpression provides methods for working with VisualShaderNodeGlobalExpression object instances.
package VisualShaderNodeGlobalExpression

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/VisualShaderNode"
import "graphics.gd/classdb/VisualShaderNodeExpression"
import "graphics.gd/classdb/VisualShaderNodeGroupBase"
import "graphics.gd/classdb/VisualShaderNodeResizableBase"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Custom Godot Shader Language expression, which is placed on top of the generated shader. You can place various function definitions inside to call later in [VisualShaderNodeExpression]s (which are injected in the main shader functions). You can also declare varyings, uniforms and global constants.
*/
type Instance [1]gdclass.VisualShaderNodeGlobalExpression

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("VisualShaderNodeGlobalExpression")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsVisualShaderNodeGlobalExpression() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.VisualShaderNodeGlobalExpression

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.VisualShaderNodeGlobalExpression](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.VisualShaderNodeGlobalExpression](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.VisualShaderNodeGlobalExpression{pointers.Add[gdclass.VisualShaderNodeGlobalExpression]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.VisualShaderNodeGlobalExpression{pointers.New[gdclass.VisualShaderNodeGlobalExpression]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self class) AsVisualShaderNodeGlobalExpression() Advanced {
	return Advanced{pointers.AsA[gdclass.VisualShaderNodeGlobalExpression](self[0])}
}
func (self Instance) AsVisualShaderNodeGlobalExpression() Instance {
	return Instance{pointers.AsA[gdclass.VisualShaderNodeGlobalExpression](self[0])}
}
func (self *Extension[T]) AsVisualShaderNodeGlobalExpression() Instance {
	return self.Super().AsVisualShaderNodeGlobalExpression()
}
func (self class) AsVisualShaderNodeExpression() VisualShaderNodeExpression.Advanced {
	return VisualShaderNodeExpression.Advanced{pointers.AsA[gdclass.VisualShaderNodeExpression](self[0])}
}
func (self *Extension[T]) AsVisualShaderNodeExpression() VisualShaderNodeExpression.Instance {
	return self.Super().AsVisualShaderNodeExpression()
}
func (self Instance) AsVisualShaderNodeExpression() VisualShaderNodeExpression.Instance {
	return VisualShaderNodeExpression.Instance{pointers.AsA[gdclass.VisualShaderNodeExpression](self[0])}
}
func (self class) AsVisualShaderNodeGroupBase() VisualShaderNodeGroupBase.Advanced {
	return VisualShaderNodeGroupBase.Advanced{pointers.AsA[gdclass.VisualShaderNodeGroupBase](self[0])}
}
func (self *Extension[T]) AsVisualShaderNodeGroupBase() VisualShaderNodeGroupBase.Instance {
	return self.Super().AsVisualShaderNodeGroupBase()
}
func (self Instance) AsVisualShaderNodeGroupBase() VisualShaderNodeGroupBase.Instance {
	return VisualShaderNodeGroupBase.Instance{pointers.AsA[gdclass.VisualShaderNodeGroupBase](self[0])}
}
func (self class) AsVisualShaderNodeResizableBase() VisualShaderNodeResizableBase.Advanced {
	return VisualShaderNodeResizableBase.Advanced{pointers.AsA[gdclass.VisualShaderNodeResizableBase](self[0])}
}
func (self *Extension[T]) AsVisualShaderNodeResizableBase() VisualShaderNodeResizableBase.Instance {
	return self.Super().AsVisualShaderNodeResizableBase()
}
func (self Instance) AsVisualShaderNodeResizableBase() VisualShaderNodeResizableBase.Instance {
	return VisualShaderNodeResizableBase.Instance{pointers.AsA[gdclass.VisualShaderNodeResizableBase](self[0])}
}
func (self class) AsVisualShaderNode() VisualShaderNode.Advanced {
	return VisualShaderNode.Advanced{pointers.AsA[gdclass.VisualShaderNode](self[0])}
}
func (self *Extension[T]) AsVisualShaderNode() VisualShaderNode.Instance {
	return self.Super().AsVisualShaderNode()
}
func (self Instance) AsVisualShaderNode() VisualShaderNode.Instance {
	return VisualShaderNode.Instance{pointers.AsA[gdclass.VisualShaderNode](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualShaderNodeExpression.Advanced(self.AsVisualShaderNodeExpression()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualShaderNodeExpression.Instance(self.AsVisualShaderNodeExpression()), name)
	}
}
func init() {
	gdclass.Register("VisualShaderNodeGlobalExpression", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.VisualShaderNodeGlobalExpression](ptr)} })
}
