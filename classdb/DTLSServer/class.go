// Code generated by the generate package DO NOT EDIT

// Package DTLSServer provides methods for working with DTLSServer object instances.
package DTLSServer

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/classdb/PacketPeerDTLS"
import "graphics.gd/classdb/PacketPeerUDP"
import "graphics.gd/classdb/TLSOptions"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
This class is used to store the state of a DTLS server. Upon [method setup] it converts connected [PacketPeerUDP] to [PacketPeerDTLS] accepting them via [method take_connection] as DTLS clients. Under the hood, this class is used to store the DTLS state and cookies of the server. The reason of why the state and cookies are needed is outside of the scope of this documentation.
Below a small example of how to use it:
[codeblocks]
[gdscript]
# server_node.gd
extends Node

var dtls = DTLSServer.new()
var server = UDPServer.new()
var peers = []

func _ready():

	server.listen(4242)
	var key = load("key.key") # Your private key.
	var cert = load("cert.crt") # Your X509 certificate.
	dtls.setup(TlsOptions.server(key, cert))

func _process(delta):

	while server.is_connection_available():
	    var peer = server.take_connection()
	    var dtls_peer = dtls.take_connection(peer)
	    if dtls_peer.get_status() != PacketPeerDTLS.STATUS_HANDSHAKING:
	        continue # It is normal that 50% of the connections fails due to cookie exchange.
	    print("Peer connected!")
	    peers.append(dtls_peer)

	for p in peers:
	    p.poll() # Must poll to update the state.
	    if p.get_status() == PacketPeerDTLS.STATUS_CONNECTED:
	        while p.get_available_packet_count() > 0:
	            print("Received message from client: %s" % p.get_packet().get_string_from_utf8())
	            p.put_packet("Hello DTLS client".to_utf8_buffer())

[/gdscript]
[csharp]
// ServerNode.cs
using Godot;

public partial class ServerNode : Node

	{
	    private DtlsServer _dtls = new DtlsServer();
	    private UdpServer _server = new UdpServer();
	    private Godot.Collections.Array<PacketPeerDtls> _peers = [];

	    public override void _Ready()
	    {
	        _server.Listen(4242);
	        var key = GD.Load<CryptoKey>("key.key"); // Your private key.
	        var cert = GD.Load<X509Certificate>("cert.crt"); // Your X509 certificate.
	        _dtls.Setup(TlsOptions.Server(key, cert));
	    }

	    public override void _Process(double delta)
	    {
	        while (_server.IsConnectionAvailable())
	        {
	            PacketPeerUdp peer = _server.TakeConnection();
	            PacketPeerDtls dtlsPeer = _dtls.TakeConnection(peer);
	            if (dtlsPeer.GetStatus() != PacketPeerDtls.Status.Handshaking)
	            {
	                continue; // It is normal that 50% of the connections fails due to cookie exchange.
	            }
	            GD.Print("Peer connected!");
	            _peers.Add(dtlsPeer);
	        }

	        foreach (var p in _peers)
	        {
	            p.Poll(); // Must poll to update the state.
	            if (p.GetStatus() == PacketPeerDtls.Status.Connected)
	            {
	                while (p.GetAvailablePacketCount() > 0)
	                {
	                    GD.Print($"Received Message From Client: {p.GetPacket().GetStringFromUtf8()}");
	                    p.PutPacket("Hello DTLS Client".ToUtf8Buffer());
	                }
	            }
	        }
	    }
	}

[/csharp]
[/codeblocks]
[codeblocks]
[gdscript]
# client_node.gd
extends Node

var dtls = PacketPeerDTLS.new()
var udp = PacketPeerUDP.new()
var connected = false

func _ready():

	udp.connect_to_host("127.0.0.1", 4242)
	dtls.connect_to_peer(udp, false) # Use true in production for certificate validation!

func _process(delta):

	dtls.poll()
	if dtls.get_status() == PacketPeerDTLS.STATUS_CONNECTED:
	    if !connected:
	        # Try to contact server
	        dtls.put_packet("The answer is... 42!".to_utf8_buffer())
	    while dtls.get_available_packet_count() > 0:
	        print("Connected: %s" % dtls.get_packet().get_string_from_utf8())
	        connected = true

[/gdscript]
[csharp]
// ClientNode.cs
using Godot;
using System.Text;

public partial class ClientNode : Node

	{
	    private PacketPeerDtls _dtls = new PacketPeerDtls();
	    private PacketPeerUdp _udp = new PacketPeerUdp();
	    private bool _connected = false;

	    public override void _Ready()
	    {
	        _udp.ConnectToHost("127.0.0.1", 4242);
	        _dtls.ConnectToPeer(_udp, validateCerts: false); // Use true in production for certificate validation!
	    }

	    public override void _Process(double delta)
	    {
	        _dtls.Poll();
	        if (_dtls.GetStatus() == PacketPeerDtls.Status.Connected)
	        {
	            if (!_connected)
	            {
	                // Try to contact server
	                _dtls.PutPacket("The Answer Is..42!".ToUtf8Buffer());
	            }
	            while (_dtls.GetAvailablePacketCount() > 0)
	            {
	                GD.Print($"Connected: {_dtls.GetPacket().GetStringFromUtf8()}");
	                _connected = true;
	            }
	        }
	    }
	}

[/csharp]
[/codeblocks]
*/
type Instance [1]gdclass.DTLSServer

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsDTLSServer() Instance
}

/*
Setup the DTLS server to use the given [param server_options]. See [method TLSOptions.server].
*/
func (self Instance) Setup(server_options TLSOptions.Instance) error { //gd:DTLSServer.setup
	return error(gd.ToError(Advanced(self).Setup(server_options)))
}

/*
Try to initiate the DTLS handshake with the given [param udp_peer] which must be already connected (see [method PacketPeerUDP.connect_to_host]).
[b]Note:[/b] You must check that the state of the return PacketPeerUDP is [constant PacketPeerDTLS.STATUS_HANDSHAKING], as it is normal that 50% of the new connections will be invalid due to cookie exchange.
*/
func (self Instance) TakeConnection(udp_peer PacketPeerUDP.Instance) PacketPeerDTLS.Instance { //gd:DTLSServer.take_connection
	return PacketPeerDTLS.Instance(Advanced(self).TakeConnection(udp_peer))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.DTLSServer

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("DTLSServer"))
	casted := Instance{*(*gdclass.DTLSServer)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

/*
Setup the DTLS server to use the given [param server_options]. See [method TLSOptions.server].
*/
//go:nosplit
func (self class) Setup(server_options [1]gdclass.TLSOptions) Error.Code { //gd:DTLSServer.setup
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(server_options[0])[0])
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.DTLSServer.Bind_setup, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Error.Code(r_ret.Get())
	frame.Free()
	return ret
}

/*
Try to initiate the DTLS handshake with the given [param udp_peer] which must be already connected (see [method PacketPeerUDP.connect_to_host]).
[b]Note:[/b] You must check that the state of the return PacketPeerUDP is [constant PacketPeerDTLS.STATUS_HANDSHAKING], as it is normal that 50% of the new connections will be invalid due to cookie exchange.
*/
//go:nosplit
func (self class) TakeConnection(udp_peer [1]gdclass.PacketPeerUDP) [1]gdclass.PacketPeerDTLS { //gd:DTLSServer.take_connection
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(udp_peer[0])[0])
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.DTLSServer.Bind_take_connection, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.PacketPeerDTLS{gd.PointerWithOwnershipTransferredToGo[gdclass.PacketPeerDTLS](r_ret.Get())}
	frame.Free()
	return ret
}
func (self class) AsDTLSServer() Advanced    { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsDTLSServer() Instance { return *((*Instance)(unsafe.Pointer(&self))) }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("DTLSServer", func(ptr gd.Object) any { return [1]gdclass.DTLSServer{*(*gdclass.DTLSServer)(unsafe.Pointer(&ptr))} })
}
