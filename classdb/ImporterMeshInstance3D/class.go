// Code generated by the generate package DO NOT EDIT

// Package ImporterMeshInstance3D provides methods for working with ImporterMeshInstance3D object instances.
package ImporterMeshInstance3D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/GeometryInstance3D"
import "graphics.gd/classdb/ImporterMesh"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/classdb/Skin"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }
type Instance [1]gdclass.ImporterMeshInstance3D

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsImporterMeshInstance3D() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.ImporterMeshInstance3D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("ImporterMeshInstance3D"))
	casted := Instance{*(*gdclass.ImporterMeshInstance3D)(unsafe.Pointer(&object))}
	return casted
}

func (self Instance) Mesh() ImporterMesh.Instance {
	return ImporterMesh.Instance(class(self).GetMesh())
}

func (self Instance) SetMesh(value ImporterMesh.Instance) {
	class(self).SetMesh(value)
}

func (self Instance) Skin() Skin.Instance {
	return Skin.Instance(class(self).GetSkin())
}

func (self Instance) SetSkin(value Skin.Instance) {
	class(self).SetSkin(value)
}

func (self Instance) SkeletonPath() string {
	return string(class(self).GetSkeletonPath().String())
}

func (self Instance) SetSkeletonPath(value string) {
	class(self).SetSkeletonPath(Path.ToNode(String.New(value)))
}

func (self Instance) LayerMask() int {
	return int(int(class(self).GetLayerMask()))
}

func (self Instance) SetLayerMask(value int) {
	class(self).SetLayerMask(int64(value))
}

func (self Instance) CastShadow() GeometryInstance3D.ShadowCastingSetting {
	return GeometryInstance3D.ShadowCastingSetting(class(self).GetCastShadowsSetting())
}

func (self Instance) SetCastShadow(value GeometryInstance3D.ShadowCastingSetting) {
	class(self).SetCastShadowsSetting(value)
}

func (self Instance) VisibilityRangeBegin() Float.X {
	return Float.X(Float.X(class(self).GetVisibilityRangeBegin()))
}

func (self Instance) SetVisibilityRangeBegin(value Float.X) {
	class(self).SetVisibilityRangeBegin(float64(value))
}

func (self Instance) VisibilityRangeBeginMargin() Float.X {
	return Float.X(Float.X(class(self).GetVisibilityRangeBeginMargin()))
}

func (self Instance) SetVisibilityRangeBeginMargin(value Float.X) {
	class(self).SetVisibilityRangeBeginMargin(float64(value))
}

func (self Instance) VisibilityRangeEnd() Float.X {
	return Float.X(Float.X(class(self).GetVisibilityRangeEnd()))
}

func (self Instance) SetVisibilityRangeEnd(value Float.X) {
	class(self).SetVisibilityRangeEnd(float64(value))
}

func (self Instance) VisibilityRangeEndMargin() Float.X {
	return Float.X(Float.X(class(self).GetVisibilityRangeEndMargin()))
}

func (self Instance) SetVisibilityRangeEndMargin(value Float.X) {
	class(self).SetVisibilityRangeEndMargin(float64(value))
}

func (self Instance) VisibilityRangeFadeMode() GeometryInstance3D.VisibilityRangeFadeMode {
	return GeometryInstance3D.VisibilityRangeFadeMode(class(self).GetVisibilityRangeFadeMode())
}

func (self Instance) SetVisibilityRangeFadeMode(value GeometryInstance3D.VisibilityRangeFadeMode) {
	class(self).SetVisibilityRangeFadeMode(value)
}

//go:nosplit
func (self class) SetMesh(mesh [1]gdclass.ImporterMesh) { //gd:ImporterMeshInstance3D.set_mesh
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_set_mesh, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ mesh gdextension.Object }{gdextension.Object(gd.ObjectChecked(mesh[0].AsObject()))}))
}

//go:nosplit
func (self class) GetMesh() [1]gdclass.ImporterMesh { //gd:ImporterMeshInstance3D.get_mesh
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_get_mesh, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.ImporterMesh{gd.PointerWithOwnershipTransferredToGo[gdclass.ImporterMesh](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetSkin(skin [1]gdclass.Skin) { //gd:ImporterMeshInstance3D.set_skin
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_set_skin, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ skin gdextension.Object }{gdextension.Object(gd.ObjectChecked(skin[0].AsObject()))}))
}

//go:nosplit
func (self class) GetSkin() [1]gdclass.Skin { //gd:ImporterMeshInstance3D.get_skin
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_get_skin, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Skin{gd.PointerWithOwnershipTransferredToGo[gdclass.Skin](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetSkeletonPath(skeleton_path Path.ToNode) { //gd:ImporterMeshInstance3D.set_skeleton_path
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_set_skeleton_path, 0|(gdextension.SizeNodePath<<4), unsafe.Pointer(&struct{ skeleton_path gdextension.NodePath }{gdextension.NodePath(pointers.Get(gd.InternalNodePath(skeleton_path))[0])}))
}

//go:nosplit
func (self class) GetSkeletonPath() Path.ToNode { //gd:ImporterMeshInstance3D.get_skeleton_path
	var r_ret = gdunsafe.Call[[1]gd.EnginePointer](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_get_skeleton_path, gdextension.SizeNodePath, unsafe.Pointer(&struct{}{}))
	var ret = Path.ToNode(String.Via(gd.NodePathProxy{}, pointers.Pack(pointers.New[gd.NodePath](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetLayerMask(layer_mask int64) { //gd:ImporterMeshInstance3D.set_layer_mask
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_set_layer_mask, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ layer_mask int64 }{layer_mask}))
}

//go:nosplit
func (self class) GetLayerMask() int64 { //gd:ImporterMeshInstance3D.get_layer_mask
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_get_layer_mask, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCastShadowsSetting(shadow_casting_setting GeometryInstance3D.ShadowCastingSetting) { //gd:ImporterMeshInstance3D.set_cast_shadows_setting
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_set_cast_shadows_setting, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct {
		shadow_casting_setting GeometryInstance3D.ShadowCastingSetting
	}{shadow_casting_setting}))
}

//go:nosplit
func (self class) GetCastShadowsSetting() GeometryInstance3D.ShadowCastingSetting { //gd:ImporterMeshInstance3D.get_cast_shadows_setting
	var r_ret = gdunsafe.Call[GeometryInstance3D.ShadowCastingSetting](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_get_cast_shadows_setting, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVisibilityRangeEndMargin(distance float64) { //gd:ImporterMeshInstance3D.set_visibility_range_end_margin
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_set_visibility_range_end_margin, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ distance float64 }{distance}))
}

//go:nosplit
func (self class) GetVisibilityRangeEndMargin() float64 { //gd:ImporterMeshInstance3D.get_visibility_range_end_margin
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_get_visibility_range_end_margin, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVisibilityRangeEnd(distance float64) { //gd:ImporterMeshInstance3D.set_visibility_range_end
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_set_visibility_range_end, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ distance float64 }{distance}))
}

//go:nosplit
func (self class) GetVisibilityRangeEnd() float64 { //gd:ImporterMeshInstance3D.get_visibility_range_end
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_get_visibility_range_end, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVisibilityRangeBeginMargin(distance float64) { //gd:ImporterMeshInstance3D.set_visibility_range_begin_margin
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_set_visibility_range_begin_margin, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ distance float64 }{distance}))
}

//go:nosplit
func (self class) GetVisibilityRangeBeginMargin() float64 { //gd:ImporterMeshInstance3D.get_visibility_range_begin_margin
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_get_visibility_range_begin_margin, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVisibilityRangeBegin(distance float64) { //gd:ImporterMeshInstance3D.set_visibility_range_begin
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_set_visibility_range_begin, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ distance float64 }{distance}))
}

//go:nosplit
func (self class) GetVisibilityRangeBegin() float64 { //gd:ImporterMeshInstance3D.get_visibility_range_begin
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_get_visibility_range_begin, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVisibilityRangeFadeMode(mode GeometryInstance3D.VisibilityRangeFadeMode) { //gd:ImporterMeshInstance3D.set_visibility_range_fade_mode
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_set_visibility_range_fade_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct {
		mode GeometryInstance3D.VisibilityRangeFadeMode
	}{mode}))
}

//go:nosplit
func (self class) GetVisibilityRangeFadeMode() GeometryInstance3D.VisibilityRangeFadeMode { //gd:ImporterMeshInstance3D.get_visibility_range_fade_mode
	var r_ret = gdunsafe.Call[GeometryInstance3D.VisibilityRangeFadeMode](self.AsObject(), gd.Global.Methods.ImporterMeshInstance3D.Bind_get_visibility_range_fade_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsImporterMeshInstance3D() Advanced { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsImporterMeshInstance3D() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsImporterMeshInstance3D() Instance {
	return self.Super().AsImporterMeshInstance3D()
}
func (self class) AsNode3D() Node3D.Advanced         { return *((*Node3D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode3D() Node3D.Instance { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance      { return *((*Node3D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsNode() Node.Advanced             { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance     { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance          { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node3D.Advanced(self.AsNode3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node3D.Instance(self.AsNode3D()), name)
	}
}
func init() {
	gdclass.Register("ImporterMeshInstance3D", func(ptr gd.Object) any {
		return [1]gdclass.ImporterMeshInstance3D{*(*gdclass.ImporterMeshInstance3D)(unsafe.Pointer(&ptr))}
	})
}
