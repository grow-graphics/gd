// Code generated by the generate package DO NOT EDIT

// Package LoginClient provides methods for working with LoginClient object instances.
package LoginClient

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/BlaziumClient"
import "graphics.gd/classdb/LoginAccessTokenResponse"
import "graphics.gd/classdb/LoginConnectResponse"
import "graphics.gd/classdb/LoginIDResponse"
import "graphics.gd/classdb/LoginRefreshTokenResponse"
import "graphics.gd/classdb/LoginURLResponse"
import "graphics.gd/classdb/LoginVerifyTokenResponse"
import "graphics.gd/classdb/Node"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
The [LoginClient] node provides an interface for connecting to the Blazium Login service. There is a free instance hosted on the [url=https://blazium.app]blazium.app[/url] domain that is used by default.
The authentication flow is as follows:
1. Listen to all the signals you are interested in.
2. Connect to the server using the [method connect_to_server] method.
3. Then you can request login info using the [method request_login_info] method.
4. Open the resulting login url received after awaiting on the [signal LoginURLResponse.finished] signal.
5. Obtain the jwt from the [signal received_jwt] signal.
[b]Note:[/b] Some methods are non blocking and can be awaited in order to get the result.
*/
type Instance [1]gdclass.LoginClient

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsLoginClient() Instance
}

/*
Request login info using the login type specified.
Needs [method connect_to_server] to be called first.
Returns a [LoginURLResponse] object that has a [signal LoginURLResponse.finished] signal that is emitted when finished.
*/
func (self Instance) RequestLoginInfo(login_type string) LoginURLResponse.Instance { //gd:LoginClient.request_login_info
	return LoginURLResponse.Instance(Advanced(self).RequestLoginInfo(String.New(login_type)))
}

/*
Request login auth id using the login type specified.
Needs [method connect_to_server] to be called first.
Returns a [LoginIDResponse] object that has a [signal LoginIDResponse.finished] signal that is emitted when finished.
*/
func (self Instance) RequestAuthId(login_type string) LoginIDResponse.Instance { //gd:LoginClient.request_auth_id
	return LoginIDResponse.Instance(Advanced(self).RequestAuthId(String.New(login_type)))
}

/*
Request login auth id using the login type specified, auth_id and access code.
Needs [method connect_to_server] to be called first.
Returns a [LoginAccessTokenResponse] object that has a [signal LoginAccessTokenResponse.finished] signal that is emitted when finished.
*/
func (self Instance) RequestAccessToken(login_type string, auth_id string, code string) LoginAccessTokenResponse.Instance { //gd:LoginClient.request_access_token
	return LoginAccessTokenResponse.Instance(Advanced(self).RequestAccessToken(String.New(login_type), String.New(auth_id), String.New(code)))
}

/*
Refresh the jwt token using the refresh token.
Needs [method connect_to_server] to be called first.
Returns a [LoginRefreshTokenResponse] object that has a [signal LoginRefreshTokenResponse.finished] signal that is emitted when finished.
*/
func (self Instance) RefreshJwtToken(refresh_token string) LoginRefreshTokenResponse.Instance { //gd:LoginClient.refresh_jwt_token
	return LoginRefreshTokenResponse.Instance(Advanced(self).RefreshJwtToken(String.New(refresh_token)))
}

/*
Verify the jwt token is still valid.
Needs [method connect_to_server] to be called first.
Returns a [LoginVerifyTokenResponse] object that has a [signal LoginVerifyTokenResponse.finished] signal that is emitted when finished.
*/
func (self Instance) VerifyJwtToken(jwt_token string) LoginVerifyTokenResponse.Instance { //gd:LoginClient.verify_jwt_token
	return LoginVerifyTokenResponse.Instance(Advanced(self).VerifyJwtToken(String.New(jwt_token)))
}
func (self Instance) SetOverrideDiscordPath(override_discord_path string) { //gd:LoginClient.set_override_discord_path
	Advanced(self).SetOverrideDiscordPath(String.New(override_discord_path))
}
func (self Instance) GetOverrideDiscordPath() string { //gd:LoginClient.get_override_discord_path
	return string(Advanced(self).GetOverrideDiscordPath().String())
}

/*
Connects to the server specified in [member server_url] using the game id specified in [member game_id]. Must be done before requesting login info.
Generates [signal connected_to_server] when connected.
Returns a [LoginConnectResponse] object that has a [signal LoginConnectResponse.finished] signal that is emitted when finished.
*/
func (self Instance) ConnectToServer() LoginConnectResponse.Instance { //gd:LoginClient.connect_to_server
	return LoginConnectResponse.Instance(Advanced(self).ConnectToServer())
}

/*
Disconnect from the server.
Needs [method connect_to_server] to be called first.
Generates [signal disconnected_from_server] when disconnected.
*/
func (self Instance) DisconnectFromServer() { //gd:LoginClient.disconnect_from_server
	Advanced(self).DisconnectFromServer()
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.LoginClient

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("LoginClient"))
	casted := Instance{*(*gdclass.LoginClient)(unsafe.Pointer(&object))}
	return casted
}

func (self Instance) ServerUrl() string {
	return string(class(self).GetServerUrl().String())
}

func (self Instance) SetServerUrl(value string) {
	class(self).SetServerUrl(String.New(value))
}

func (self Instance) GameId() string {
	return string(class(self).GetGameId().String())
}

func (self Instance) SetGameId(value string) {
	class(self).SetGameId(String.New(value))
}

func (self Instance) HttpPrefix() string {
	return string(class(self).GetHttpPrefix().String())
}

func (self Instance) SetHttpPrefix(value string) {
	class(self).SetHttpPrefix(String.New(value))
}

func (self Instance) WebsocketPrefix() string {
	return string(class(self).GetWebsocketPrefix().String())
}

func (self Instance) SetWebsocketPrefix(value string) {
	class(self).SetWebsocketPrefix(String.New(value))
}

func (self Instance) Connected() bool {
	return bool(class(self).GetConnected())
}

/*
Request login info using the login type specified.
Needs [method connect_to_server] to be called first.
Returns a [LoginURLResponse] object that has a [signal LoginURLResponse.finished] signal that is emitted when finished.
*/
//go:nosplit
func (self class) RequestLoginInfo(login_type String.Readable) [1]gdclass.LoginURLResponse { //gd:LoginClient.request_login_info
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(login_type)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_request_login_info, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.LoginURLResponse{gd.PointerWithOwnershipTransferredToGo[gdclass.LoginURLResponse](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Request login auth id using the login type specified.
Needs [method connect_to_server] to be called first.
Returns a [LoginIDResponse] object that has a [signal LoginIDResponse.finished] signal that is emitted when finished.
*/
//go:nosplit
func (self class) RequestAuthId(login_type String.Readable) [1]gdclass.LoginIDResponse { //gd:LoginClient.request_auth_id
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(login_type)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_request_auth_id, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.LoginIDResponse{gd.PointerWithOwnershipTransferredToGo[gdclass.LoginIDResponse](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Request login auth id using the login type specified, auth_id and access code.
Needs [method connect_to_server] to be called first.
Returns a [LoginAccessTokenResponse] object that has a [signal LoginAccessTokenResponse.finished] signal that is emitted when finished.
*/
//go:nosplit
func (self class) RequestAccessToken(login_type String.Readable, auth_id String.Readable, code String.Readable) [1]gdclass.LoginAccessTokenResponse { //gd:LoginClient.request_access_token
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(login_type)))
	callframe.Arg(frame, pointers.Get(gd.InternalString(auth_id)))
	callframe.Arg(frame, pointers.Get(gd.InternalString(code)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_request_access_token, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.LoginAccessTokenResponse{gd.PointerWithOwnershipTransferredToGo[gdclass.LoginAccessTokenResponse](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Refresh the jwt token using the refresh token.
Needs [method connect_to_server] to be called first.
Returns a [LoginRefreshTokenResponse] object that has a [signal LoginRefreshTokenResponse.finished] signal that is emitted when finished.
*/
//go:nosplit
func (self class) RefreshJwtToken(refresh_token String.Readable) [1]gdclass.LoginRefreshTokenResponse { //gd:LoginClient.refresh_jwt_token
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(refresh_token)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_refresh_jwt_token, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.LoginRefreshTokenResponse{gd.PointerWithOwnershipTransferredToGo[gdclass.LoginRefreshTokenResponse](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Verify the jwt token is still valid.
Needs [method connect_to_server] to be called first.
Returns a [LoginVerifyTokenResponse] object that has a [signal LoginVerifyTokenResponse.finished] signal that is emitted when finished.
*/
//go:nosplit
func (self class) VerifyJwtToken(jwt_token String.Readable) [1]gdclass.LoginVerifyTokenResponse { //gd:LoginClient.verify_jwt_token
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(jwt_token)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_verify_jwt_token, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.LoginVerifyTokenResponse{gd.PointerWithOwnershipTransferredToGo[gdclass.LoginVerifyTokenResponse](r_ret.Get())}
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetServerUrl(server_url String.Readable) { //gd:LoginClient.set_server_url
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(server_url)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_set_server_url, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetServerUrl() String.Readable { //gd:LoginClient.get_server_url
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_get_server_url, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetGameId(game_id String.Readable) { //gd:LoginClient.set_game_id
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(game_id)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_set_game_id, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetGameId() String.Readable { //gd:LoginClient.get_game_id
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_get_game_id, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetWebsocketPrefix(websocket_prefix String.Readable) { //gd:LoginClient.set_websocket_prefix
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(websocket_prefix)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_set_websocket_prefix, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetWebsocketPrefix() String.Readable { //gd:LoginClient.get_websocket_prefix
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_get_websocket_prefix, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetHttpPrefix(http_prefix String.Readable) { //gd:LoginClient.set_http_prefix
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(http_prefix)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_set_http_prefix, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetHttpPrefix() String.Readable { //gd:LoginClient.get_http_prefix
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_get_http_prefix, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetConnected() bool { //gd:LoginClient.get_connected
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_get_connected, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetOverrideDiscordPath(override_discord_path String.Readable) { //gd:LoginClient.set_override_discord_path
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(override_discord_path)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_set_override_discord_path, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetOverrideDiscordPath() String.Readable { //gd:LoginClient.get_override_discord_path
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_get_override_discord_path, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Connects to the server specified in [member server_url] using the game id specified in [member game_id]. Must be done before requesting login info.
Generates [signal connected_to_server] when connected.
Returns a [LoginConnectResponse] object that has a [signal LoginConnectResponse.finished] signal that is emitted when finished.
*/
//go:nosplit
func (self class) ConnectToServer() [1]gdclass.LoginConnectResponse { //gd:LoginClient.connect_to_server
	var frame = callframe.New()
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_connect_to_server, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.LoginConnectResponse{gd.PointerWithOwnershipTransferredToGo[gdclass.LoginConnectResponse](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Disconnect from the server.
Needs [method connect_to_server] to be called first.
Generates [signal disconnected_from_server] when disconnected.
*/
//go:nosplit
func (self class) DisconnectFromServer() { //gd:LoginClient.disconnect_from_server
	var frame = callframe.New()
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.LoginClient.Bind_disconnect_from_server, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}
func (self Instance) OnLogUpdated(cb func(command string, logs string)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("log_updated"), gd.NewCallable(cb), 0)
}

func (self Instance) OnDisconnectedFromServer(cb func(reason string)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("disconnected_from_server"), gd.NewCallable(cb), 0)
}

func (self Instance) OnConnectedToServer(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("connected_to_server"), gd.NewCallable(cb), 0)
}

func (self Instance) OnReceivedJwt(cb func(jwt string, atype string, access_token string)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("received_jwt"), gd.NewCallable(cb), 0)
}

func (self class) AsLoginClient() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsLoginClient() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsLoginClient() Instance { return self.Super().AsLoginClient() }
func (self class) AsBlaziumClient() BlaziumClient.Advanced {
	return *((*BlaziumClient.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsBlaziumClient() BlaziumClient.Instance {
	return self.Super().AsBlaziumClient()
}
func (self Instance) AsBlaziumClient() BlaziumClient.Instance {
	return *((*BlaziumClient.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(BlaziumClient.Advanced(self.AsBlaziumClient()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(BlaziumClient.Instance(self.AsBlaziumClient()), name)
	}
}
func init() {
	gdclass.Register("LoginClient", func(ptr gd.Object) any { return [1]gdclass.LoginClient{*(*gdclass.LoginClient)(unsafe.Pointer(&ptr))} })
}
