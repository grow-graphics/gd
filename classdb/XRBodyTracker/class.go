// Code generated by the generate package DO NOT EDIT

// Package XRBodyTracker provides methods for working with XRBodyTracker object instances.
package XRBodyTracker

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/XRPositionalTracker"
import "graphics.gd/classdb/XRTracker"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Transform3D"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A body tracking system will create an instance of this object and add it to the [XRServer]. This tracking system will then obtain skeleton data, convert it to the Godot Humanoid skeleton and store this data on the [XRBodyTracker] object.
Use [XRBodyModifier3D] to animate a body mesh using body tracking data.
*/
type Instance [1]gdclass.XRBodyTracker

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_has_tracking_data gdextension.MethodForClass `hash:"2586408642"`
	get_has_tracking_data gdextension.MethodForClass `hash:"36873697"`
	set_body_flags        gdextension.MethodForClass `hash:"2103235750"`
	get_body_flags        gdextension.MethodForClass `hash:"3543166366"`
	set_joint_flags       gdextension.MethodForClass `hash:"592144999"`
	get_joint_flags       gdextension.MethodForClass `hash:"1030162609"`
	set_joint_transform   gdextension.MethodForClass `hash:"2635424328"`
	get_joint_transform   gdextension.MethodForClass `hash:"3474811534"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("XRBodyTracker")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsXRBodyTracker() Instance
}

/*
Sets flags about the validity of the tracking data for the given body joint.
*/
func (self Instance) SetJointFlags(joint Joint, flags JointFlags) { //gd:XRBodyTracker.set_joint_flags
	Advanced(self).SetJointFlags(joint, flags)
}

/*
Returns flags about the validity of the tracking data for the given body joint (see [enum XRBodyTracker.JointFlags]).
*/
func (self Instance) GetJointFlags(joint Joint) JointFlags { //gd:XRBodyTracker.get_joint_flags
	return JointFlags(Advanced(self).GetJointFlags(joint))
}

/*
Sets the transform for the given body joint.
*/
func (self Instance) SetJointTransform(joint Joint, transform Transform3D.BasisOrigin) { //gd:XRBodyTracker.set_joint_transform
	Advanced(self).SetJointTransform(joint, Transform3D.BasisOrigin(transform))
}

/*
Returns the transform for the given body joint.
*/
func (self Instance) GetJointTransform(joint Joint) Transform3D.BasisOrigin { //gd:XRBodyTracker.get_joint_transform
	return Transform3D.BasisOrigin(Advanced(self).GetJointTransform(joint))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.XRBodyTracker

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.XRBodyTracker)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.XRBodyTracker)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.XRBodyTracker)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) HasTrackingData() bool {
	return bool(class(self).GetHasTrackingData())
}

func (self Instance) SetHasTrackingData(value bool) {
	class(self).SetHasTrackingData(value)
}

func (self Instance) BodyFlags() BodyFlags {
	return BodyFlags(class(self).GetBodyFlags())
}

func (self Instance) SetBodyFlags(value BodyFlags) {
	class(self).SetBodyFlags(value)
}

//go:nosplit
func (self class) SetHasTrackingData(has_data bool) { //gd:XRBodyTracker.set_has_tracking_data
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_has_tracking_data, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ has_data bool }{has_data}))
}

//go:nosplit
func (self class) GetHasTrackingData() bool { //gd:XRBodyTracker.get_has_tracking_data
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_has_tracking_data, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBodyFlags(flags BodyFlags) { //gd:XRBodyTracker.set_body_flags
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_body_flags, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ flags BodyFlags }{flags}))
}

//go:nosplit
func (self class) GetBodyFlags() BodyFlags { //gd:XRBodyTracker.get_body_flags
	var r_ret = gdextension.Call[BodyFlags](gd.ObjectChecked(self.AsObject()), methods.get_body_flags, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets flags about the validity of the tracking data for the given body joint.
*/
//go:nosplit
func (self class) SetJointFlags(joint Joint, flags JointFlags) { //gd:XRBodyTracker.set_joint_flags
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_joint_flags, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		joint Joint
		flags JointFlags
	}{joint, flags}))
}

/*
Returns flags about the validity of the tracking data for the given body joint (see [enum XRBodyTracker.JointFlags]).
*/
//go:nosplit
func (self class) GetJointFlags(joint Joint) JointFlags { //gd:XRBodyTracker.get_joint_flags
	var r_ret = gdextension.Call[JointFlags](gd.ObjectChecked(self.AsObject()), methods.get_joint_flags, gdextension.SizeInt|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ joint Joint }{joint}))
	var ret = r_ret
	return ret
}

/*
Sets the transform for the given body joint.
*/
//go:nosplit
func (self class) SetJointTransform(joint Joint, transform Transform3D.BasisOrigin) { //gd:XRBodyTracker.set_joint_transform
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_joint_transform, 0|(gdextension.SizeInt<<4)|(gdextension.SizeTransform3D<<8), unsafe.Pointer(&struct {
		joint     Joint
		transform Transform3D.BasisOrigin
	}{joint, gd.Transposed(transform)}))
}

/*
Returns the transform for the given body joint.
*/
//go:nosplit
func (self class) GetJointTransform(joint Joint) Transform3D.BasisOrigin { //gd:XRBodyTracker.get_joint_transform
	var r_ret = gdextension.Call[Transform3D.BasisOrigin](gd.ObjectChecked(self.AsObject()), methods.get_joint_transform, gdextension.SizeTransform3D|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ joint Joint }{joint}))
	var ret = gd.Transposed(r_ret)
	return ret
}
func (self class) AsXRBodyTracker() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsXRBodyTracker() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsXRBodyTracker() Instance { return self.Super().AsXRBodyTracker() }
func (self class) AsXRPositionalTracker() XRPositionalTracker.Advanced {
	return *((*XRPositionalTracker.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsXRPositionalTracker() XRPositionalTracker.Instance {
	return self.Super().AsXRPositionalTracker()
}
func (self Instance) AsXRPositionalTracker() XRPositionalTracker.Instance {
	return *((*XRPositionalTracker.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsXRTracker() XRTracker.Advanced {
	return *((*XRTracker.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsXRTracker() XRTracker.Instance { return self.Super().AsXRTracker() }
func (self Instance) AsXRTracker() XRTracker.Instance {
	return *((*XRTracker.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(XRPositionalTracker.Advanced(self.AsXRPositionalTracker()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(XRPositionalTracker.Instance(self.AsXRPositionalTracker()), name)
	}
}
func init() {
	gdclass.Register("XRBodyTracker", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type BodyFlags int //gd:XRBodyTracker.BodyFlags

const (
	/*Upper body tracking supported.*/
	BodyFlagUpperBodySupported BodyFlags = 1
	/*Lower body tracking supported.*/
	BodyFlagLowerBodySupported BodyFlags = 2
	/*Hand tracking supported.*/
	BodyFlagHandsSupported BodyFlags = 4
)

type Joint int //gd:XRBodyTracker.Joint

const (
	/*Root joint.*/
	JointRoot Joint = 0
	/*Hips joint.*/
	JointHips Joint = 1
	/*Spine joint.*/
	JointSpine Joint = 2
	/*Chest joint.*/
	JointChest Joint = 3
	/*Upper chest joint.*/
	JointUpperChest Joint = 4
	/*Neck joint.*/
	JointNeck Joint = 5
	/*Head joint.*/
	JointHead Joint = 6
	/*Head tip joint.*/
	JointHeadTip Joint = 7
	/*Left shoulder joint.*/
	JointLeftShoulder Joint = 8
	/*Left upper arm joint.*/
	JointLeftUpperArm Joint = 9
	/*Left lower arm joint.*/
	JointLeftLowerArm Joint = 10
	/*Right shoulder joint.*/
	JointRightShoulder Joint = 11
	/*Right upper arm joint.*/
	JointRightUpperArm Joint = 12
	/*Right lower arm joint.*/
	JointRightLowerArm Joint = 13
	/*Left upper leg joint.*/
	JointLeftUpperLeg Joint = 14
	/*Left lower leg joint.*/
	JointLeftLowerLeg Joint = 15
	/*Left foot joint.*/
	JointLeftFoot Joint = 16
	/*Left toes joint.*/
	JointLeftToes Joint = 17
	/*Right upper leg joint.*/
	JointRightUpperLeg Joint = 18
	/*Right lower leg joint.*/
	JointRightLowerLeg Joint = 19
	/*Right foot joint.*/
	JointRightFoot Joint = 20
	/*Right toes joint.*/
	JointRightToes Joint = 21
	/*Left hand joint.*/
	JointLeftHand Joint = 22
	/*Left palm joint.*/
	JointLeftPalm Joint = 23
	/*Left wrist joint.*/
	JointLeftWrist Joint = 24
	/*Left thumb metacarpal joint.*/
	JointLeftThumbMetacarpal Joint = 25
	/*Left thumb phalanx proximal joint.*/
	JointLeftThumbPhalanxProximal Joint = 26
	/*Left thumb phalanx distal joint.*/
	JointLeftThumbPhalanxDistal Joint = 27
	/*Left thumb tip joint.*/
	JointLeftThumbTip Joint = 28
	/*Left index finger metacarpal joint.*/
	JointLeftIndexFingerMetacarpal Joint = 29
	/*Left index finger phalanx proximal joint.*/
	JointLeftIndexFingerPhalanxProximal Joint = 30
	/*Left index finger phalanx intermediate joint.*/
	JointLeftIndexFingerPhalanxIntermediate Joint = 31
	/*Left index finger phalanx distal joint.*/
	JointLeftIndexFingerPhalanxDistal Joint = 32
	/*Left index finger tip joint.*/
	JointLeftIndexFingerTip Joint = 33
	/*Left middle finger metacarpal joint.*/
	JointLeftMiddleFingerMetacarpal Joint = 34
	/*Left middle finger phalanx proximal joint.*/
	JointLeftMiddleFingerPhalanxProximal Joint = 35
	/*Left middle finger phalanx intermediate joint.*/
	JointLeftMiddleFingerPhalanxIntermediate Joint = 36
	/*Left middle finger phalanx distal joint.*/
	JointLeftMiddleFingerPhalanxDistal Joint = 37
	/*Left middle finger tip joint.*/
	JointLeftMiddleFingerTip Joint = 38
	/*Left ring finger metacarpal joint.*/
	JointLeftRingFingerMetacarpal Joint = 39
	/*Left ring finger phalanx proximal joint.*/
	JointLeftRingFingerPhalanxProximal Joint = 40
	/*Left ring finger phalanx intermediate joint.*/
	JointLeftRingFingerPhalanxIntermediate Joint = 41
	/*Left ring finger phalanx distal joint.*/
	JointLeftRingFingerPhalanxDistal Joint = 42
	/*Left ring finger tip joint.*/
	JointLeftRingFingerTip Joint = 43
	/*Left pinky finger metacarpal joint.*/
	JointLeftPinkyFingerMetacarpal Joint = 44
	/*Left pinky finger phalanx proximal joint.*/
	JointLeftPinkyFingerPhalanxProximal Joint = 45
	/*Left pinky finger phalanx intermediate joint.*/
	JointLeftPinkyFingerPhalanxIntermediate Joint = 46
	/*Left pinky finger phalanx distal joint.*/
	JointLeftPinkyFingerPhalanxDistal Joint = 47
	/*Left pinky finger tip joint.*/
	JointLeftPinkyFingerTip Joint = 48
	/*Right hand joint.*/
	JointRightHand Joint = 49
	/*Right palm joint.*/
	JointRightPalm Joint = 50
	/*Right wrist joint.*/
	JointRightWrist Joint = 51
	/*Right thumb metacarpal joint.*/
	JointRightThumbMetacarpal Joint = 52
	/*Right thumb phalanx proximal joint.*/
	JointRightThumbPhalanxProximal Joint = 53
	/*Right thumb phalanx distal joint.*/
	JointRightThumbPhalanxDistal Joint = 54
	/*Right thumb tip joint.*/
	JointRightThumbTip Joint = 55
	/*Right index finger metacarpal joint.*/
	JointRightIndexFingerMetacarpal Joint = 56
	/*Right index finger phalanx proximal joint.*/
	JointRightIndexFingerPhalanxProximal Joint = 57
	/*Right index finger phalanx intermediate joint.*/
	JointRightIndexFingerPhalanxIntermediate Joint = 58
	/*Right index finger phalanx distal joint.*/
	JointRightIndexFingerPhalanxDistal Joint = 59
	/*Right index finger tip joint.*/
	JointRightIndexFingerTip Joint = 60
	/*Right middle finger metacarpal joint.*/
	JointRightMiddleFingerMetacarpal Joint = 61
	/*Right middle finger phalanx proximal joint.*/
	JointRightMiddleFingerPhalanxProximal Joint = 62
	/*Right middle finger phalanx intermediate joint.*/
	JointRightMiddleFingerPhalanxIntermediate Joint = 63
	/*Right middle finger phalanx distal joint.*/
	JointRightMiddleFingerPhalanxDistal Joint = 64
	/*Right middle finger tip joint.*/
	JointRightMiddleFingerTip Joint = 65
	/*Right ring finger metacarpal joint.*/
	JointRightRingFingerMetacarpal Joint = 66
	/*Right ring finger phalanx proximal joint.*/
	JointRightRingFingerPhalanxProximal Joint = 67
	/*Right ring finger phalanx intermediate joint.*/
	JointRightRingFingerPhalanxIntermediate Joint = 68
	/*Right ring finger phalanx distal joint.*/
	JointRightRingFingerPhalanxDistal Joint = 69
	/*Right ring finger tip joint.*/
	JointRightRingFingerTip Joint = 70
	/*Right pinky finger metacarpal joint.*/
	JointRightPinkyFingerMetacarpal Joint = 71
	/*Right pinky finger phalanx proximal joint.*/
	JointRightPinkyFingerPhalanxProximal Joint = 72
	/*Right pinky finger phalanx intermediate joint.*/
	JointRightPinkyFingerPhalanxIntermediate Joint = 73
	/*Right pinky finger phalanx distal joint.*/
	JointRightPinkyFingerPhalanxDistal Joint = 74
	/*Right pinky finger tip joint.*/
	JointRightPinkyFingerTip Joint = 75
	/*Represents the size of the [enum Joint] enum.*/
	JointMax Joint = 76
)

type JointFlags int //gd:XRBodyTracker.JointFlags

const (
	/*The joint's orientation data is valid.*/
	JointFlagOrientationValid JointFlags = 1
	/*The joint's orientation is actively tracked. May not be set if tracking has been temporarily lost.*/
	JointFlagOrientationTracked JointFlags = 2
	/*The joint's position data is valid.*/
	JointFlagPositionValid JointFlags = 4
	/*The joint's position is actively tracked. May not be set if tracking has been temporarily lost.*/
	JointFlagPositionTracked JointFlags = 8
)
