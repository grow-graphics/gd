// Code generated by the generate package DO NOT EDIT

// Package XRServer provides methods for working with XRServer object instances.
package XRServer

import "unsafe"
import "sync"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/XRInterface"
import "graphics.gd/classdb/XRTracker"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Transform3D"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
The AR/VR server is the heart of our Advanced and Virtual Reality solution and handles all the processing.
*/
type Instance [1]gdclass.XRServer

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_world_scale             gdextension.MethodForClass `hash:"1740695150"`
	set_world_scale             gdextension.MethodForClass `hash:"373806689"`
	get_world_origin            gdextension.MethodForClass `hash:"3229777777"`
	set_world_origin            gdextension.MethodForClass `hash:"2952846383"`
	get_reference_frame         gdextension.MethodForClass `hash:"3229777777"`
	clear_reference_frame       gdextension.MethodForClass `hash:"3218959716"`
	center_on_hmd               gdextension.MethodForClass `hash:"1450904707"`
	get_hmd_transform           gdextension.MethodForClass `hash:"4183770049"`
	set_camera_locked_to_origin gdextension.MethodForClass `hash:"2586408642"`
	is_camera_locked_to_origin  gdextension.MethodForClass `hash:"36873697"`
	add_interface               gdextension.MethodForClass `hash:"1898711491"`
	get_interface_count         gdextension.MethodForClass `hash:"3905245786"`
	remove_interface            gdextension.MethodForClass `hash:"1898711491"`
	get_interface               gdextension.MethodForClass `hash:"4237347919"`
	get_interfaces              gdextension.MethodForClass `hash:"3995934104"`
	find_interface              gdextension.MethodForClass `hash:"1395192955"`
	add_tracker                 gdextension.MethodForClass `hash:"684804553"`
	remove_tracker              gdextension.MethodForClass `hash:"684804553"`
	get_trackers                gdextension.MethodForClass `hash:"3554694381"`
	get_tracker                 gdextension.MethodForClass `hash:"147382240"`
	get_primary_interface       gdextension.MethodForClass `hash:"2143545064"`
	set_primary_interface       gdextension.MethodForClass `hash:"1898711491"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("XRServer")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

var self [1]gdclass.XRServer
var once sync.Once

func singleton() {
	self[0] = pointers.Raw[gdclass.XRServer]([3]uint64{uint64(gdextension.Host.Objects.Global(sname))})
}

/*
Returns the reference frame transform. Mostly used internally and exposed for GDExtension build interfaces.
*/
func GetReferenceFrame() Transform3D.BasisOrigin { //gd:XRServer.get_reference_frame
	once.Do(singleton)
	return Transform3D.BasisOrigin(Advanced().GetReferenceFrame())
}

/*
Clears the reference frame that was set by previous calls to [method center_on_hmd].
*/
func ClearReferenceFrame() { //gd:XRServer.clear_reference_frame
	once.Do(singleton)
	Advanced().ClearReferenceFrame()
}

/*
This is an important function to understand correctly. AR and VR platforms all handle positioning slightly differently.
For platforms that do not offer spatial tracking, our origin point (0, 0, 0) is the location of our HMD, but you have little control over the direction the player is facing in the real world.
For platforms that do offer spatial tracking, our origin point depends very much on the system. For OpenVR, our origin point is usually the center of the tracking space, on the ground. For other platforms, it's often the location of the tracking camera.
This method allows you to center your tracker on the location of the HMD. It will take the current location of the HMD and use that to adjust all your tracking data; in essence, realigning the real world to your player's current position in the game world.
For this method to produce usable results, tracking information must be available. This often takes a few frames after starting your game.
You should call this method after a few seconds have passed. For example, when the user requests a realignment of the display holding a designated button on a controller for a short period of time, or when implementing a teleport mechanism.
*/
func CenterOnHmd(rotation_mode RotationMode, keep_height bool) { //gd:XRServer.center_on_hmd
	once.Do(singleton)
	Advanced().CenterOnHmd(rotation_mode, keep_height)
}

/*
Returns the primary interface's transformation.
*/
func GetHmdTransform() Transform3D.BasisOrigin { //gd:XRServer.get_hmd_transform
	once.Do(singleton)
	return Transform3D.BasisOrigin(Advanced().GetHmdTransform())
}

/*
Registers an [XRInterface] object.
*/
func AddInterface(intf XRInterface.Instance) { //gd:XRServer.add_interface
	once.Do(singleton)
	Advanced().AddInterface(intf)
}

/*
Returns the number of interfaces currently registered with the AR/VR server. If your project supports multiple AR/VR platforms, you can look through the available interface, and either present the user with a selection or simply try to initialize each interface and use the first one that returns [code]true[/code].
*/
func GetInterfaceCount() int { //gd:XRServer.get_interface_count
	once.Do(singleton)
	return int(int(Advanced().GetInterfaceCount()))
}

/*
Removes this [param interface].
*/
func RemoveInterface(intf XRInterface.Instance) { //gd:XRServer.remove_interface
	once.Do(singleton)
	Advanced().RemoveInterface(intf)
}

/*
Returns the interface registered at the given [param idx] index in the list of interfaces.
*/
func GetInterface(idx int) XRInterface.Instance { //gd:XRServer.get_interface
	once.Do(singleton)
	return XRInterface.Instance(Advanced().GetInterface(int64(idx)))
}

/*
Returns a list of available interfaces the ID and name of each interface.
*/
func GetInterfaces() []map[int]string { //gd:XRServer.get_interfaces
	once.Do(singleton)
	return []map[int]string(gd.ArrayAs[[]map[int]string](gd.InternalArray(Advanced().GetInterfaces())))
}

/*
Finds an interface by its [param name]. For example, if your project uses capabilities of an AR/VR platform, you can find the interface for that platform by name and initialize it.
*/
func FindInterface(name string) XRInterface.Instance { //gd:XRServer.find_interface
	once.Do(singleton)
	return XRInterface.Instance(Advanced().FindInterface(String.New(name)))
}

/*
Registers a new [XRTracker] that tracks a physical object.
*/
func AddTracker(tracker XRTracker.Instance) { //gd:XRServer.add_tracker
	once.Do(singleton)
	Advanced().AddTracker(tracker)
}

/*
Removes this [param tracker].
*/
func RemoveTracker(tracker XRTracker.Instance) { //gd:XRServer.remove_tracker
	once.Do(singleton)
	Advanced().RemoveTracker(tracker)
}

/*
Returns a dictionary of trackers for [param tracker_types].
*/
func GetTrackers(tracker_types int) map[interface{}]interface{} { //gd:XRServer.get_trackers
	once.Do(singleton)
	return map[interface{}]interface{}(gd.DictionaryAs[map[interface{}]interface{}](Advanced().GetTrackers(int64(tracker_types))))
}

/*
Returns the positional tracker with the given [param tracker_name].
*/
func GetTracker(tracker_name string) XRTracker.Instance { //gd:XRServer.get_tracker
	once.Do(singleton)
	return XRTracker.Instance(Advanced().GetTracker(String.Name(String.New(tracker_name))))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
func Advanced() class { once.Do(singleton); return self }

type class [1]gdclass.XRServer

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.XRServer](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.XRServer](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }

func WorldScale() Float.X {
	once.Do(singleton)
	return Float.X(Float.X(class(self).GetWorldScale()))
}

func SetWorldScale(value Float.X) {
	once.Do(singleton)
	class(self).SetWorldScale(float64(value))
}

func WorldOrigin() Transform3D.BasisOrigin {
	once.Do(singleton)
	return Transform3D.BasisOrigin(class(self).GetWorldOrigin())
}

func SetWorldOrigin(value Transform3D.BasisOrigin) {
	once.Do(singleton)
	class(self).SetWorldOrigin(Transform3D.BasisOrigin(value))
}

func CameraLockedToOrigin() bool {
	once.Do(singleton)
	return bool(class(self).IsCameraLockedToOrigin())
}

func SetCameraLockedToOrigin(value bool) {
	once.Do(singleton)
	class(self).SetCameraLockedToOrigin(value)
}

func PrimaryInterface() XRInterface.Instance {
	once.Do(singleton)
	return XRInterface.Instance(class(self).GetPrimaryInterface())
}

func SetPrimaryInterface(value XRInterface.Instance) {
	once.Do(singleton)
	class(self).SetPrimaryInterface(value)
}

//go:nosplit
func (self class) GetWorldScale() float64 { //gd:XRServer.get_world_scale
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_world_scale, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWorldScale(scale float64) { //gd:XRServer.set_world_scale
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_world_scale, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ scale float64 }{scale}))
}

//go:nosplit
func (self class) GetWorldOrigin() Transform3D.BasisOrigin { //gd:XRServer.get_world_origin
	var r_ret = gdextension.Call[Transform3D.BasisOrigin](gd.ObjectChecked(self.AsObject()), methods.get_world_origin, gdextension.SizeTransform3D, unsafe.Pointer(&struct{}{}))
	var ret = gd.Transposed(r_ret)
	return ret
}

//go:nosplit
func (self class) SetWorldOrigin(world_origin Transform3D.BasisOrigin) { //gd:XRServer.set_world_origin
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_world_origin, 0|(gdextension.SizeTransform3D<<4), unsafe.Pointer(&struct{ world_origin Transform3D.BasisOrigin }{gd.Transposed(world_origin)}))
}

/*
Returns the reference frame transform. Mostly used internally and exposed for GDExtension build interfaces.
*/
//go:nosplit
func (self class) GetReferenceFrame() Transform3D.BasisOrigin { //gd:XRServer.get_reference_frame
	var r_ret = gdextension.Call[Transform3D.BasisOrigin](gd.ObjectChecked(self.AsObject()), methods.get_reference_frame, gdextension.SizeTransform3D, unsafe.Pointer(&struct{}{}))
	var ret = gd.Transposed(r_ret)
	return ret
}

/*
Clears the reference frame that was set by previous calls to [method center_on_hmd].
*/
//go:nosplit
func (self class) ClearReferenceFrame() { //gd:XRServer.clear_reference_frame
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear_reference_frame, 0, unsafe.Pointer(&struct{}{}))
}

/*
This is an important function to understand correctly. AR and VR platforms all handle positioning slightly differently.
For platforms that do not offer spatial tracking, our origin point (0, 0, 0) is the location of our HMD, but you have little control over the direction the player is facing in the real world.
For platforms that do offer spatial tracking, our origin point depends very much on the system. For OpenVR, our origin point is usually the center of the tracking space, on the ground. For other platforms, it's often the location of the tracking camera.
This method allows you to center your tracker on the location of the HMD. It will take the current location of the HMD and use that to adjust all your tracking data; in essence, realigning the real world to your player's current position in the game world.
For this method to produce usable results, tracking information must be available. This often takes a few frames after starting your game.
You should call this method after a few seconds have passed. For example, when the user requests a realignment of the display holding a designated button on a controller for a short period of time, or when implementing a teleport mechanism.
*/
//go:nosplit
func (self class) CenterOnHmd(rotation_mode RotationMode, keep_height bool) { //gd:XRServer.center_on_hmd
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.center_on_hmd, 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		rotation_mode RotationMode
		keep_height   bool
	}{rotation_mode, keep_height}))
}

/*
Returns the primary interface's transformation.
*/
//go:nosplit
func (self class) GetHmdTransform() Transform3D.BasisOrigin { //gd:XRServer.get_hmd_transform
	var r_ret = gdextension.Call[Transform3D.BasisOrigin](gd.ObjectChecked(self.AsObject()), methods.get_hmd_transform, gdextension.SizeTransform3D, unsafe.Pointer(&struct{}{}))
	var ret = gd.Transposed(r_ret)
	return ret
}

//go:nosplit
func (self class) SetCameraLockedToOrigin(enabled bool) { //gd:XRServer.set_camera_locked_to_origin
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_camera_locked_to_origin, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsCameraLockedToOrigin() bool { //gd:XRServer.is_camera_locked_to_origin
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_camera_locked_to_origin, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Registers an [XRInterface] object.
*/
//go:nosplit
func (self class) AddInterface(intf [1]gdclass.XRInterface) { //gd:XRServer.add_interface
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.add_interface, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ intf gdextension.Object }{gdextension.Object(gd.ObjectChecked(intf[0].AsObject()))}))
}

/*
Returns the number of interfaces currently registered with the AR/VR server. If your project supports multiple AR/VR platforms, you can look through the available interface, and either present the user with a selection or simply try to initialize each interface and use the first one that returns [code]true[/code].
*/
//go:nosplit
func (self class) GetInterfaceCount() int64 { //gd:XRServer.get_interface_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_interface_count, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Removes this [param interface].
*/
//go:nosplit
func (self class) RemoveInterface(intf [1]gdclass.XRInterface) { //gd:XRServer.remove_interface
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_interface, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ intf gdextension.Object }{gdextension.Object(gd.ObjectChecked(intf[0].AsObject()))}))
}

/*
Returns the interface registered at the given [param idx] index in the list of interfaces.
*/
//go:nosplit
func (self class) GetInterface(idx int64) [1]gdclass.XRInterface { //gd:XRServer.get_interface
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_interface, gdextension.SizeObject|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ idx int64 }{idx}))
	var ret = [1]gdclass.XRInterface{gd.PointerWithOwnershipTransferredToGo[gdclass.XRInterface](r_ret)}
	return ret
}

/*
Returns a list of available interfaces the ID and name of each interface.
*/
//go:nosplit
func (self class) GetInterfaces() Array.Contains[Dictionary.Any] { //gd:XRServer.get_interfaces
	var r_ret = gdextension.Call[gdextension.Array](gd.ObjectChecked(self.AsObject()), methods.get_interfaces, gdextension.SizeArray, unsafe.Pointer(&struct{}{}))
	var ret = Array.Through(gd.ArrayProxy[Dictionary.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

/*
Finds an interface by its [param name]. For example, if your project uses capabilities of an AR/VR platform, you can find the interface for that platform by name and initialize it.
*/
//go:nosplit
func (self class) FindInterface(name String.Readable) [1]gdclass.XRInterface { //gd:XRServer.find_interface
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.find_interface, gdextension.SizeObject|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ name gdextension.String }{pointers.Get(gd.InternalString(name))}))
	var ret = [1]gdclass.XRInterface{gd.PointerWithOwnershipTransferredToGo[gdclass.XRInterface](r_ret)}
	return ret
}

/*
Registers a new [XRTracker] that tracks a physical object.
*/
//go:nosplit
func (self class) AddTracker(tracker [1]gdclass.XRTracker) { //gd:XRServer.add_tracker
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.add_tracker, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ tracker gdextension.Object }{gdextension.Object(gd.ObjectChecked(tracker[0].AsObject()))}))
}

/*
Removes this [param tracker].
*/
//go:nosplit
func (self class) RemoveTracker(tracker [1]gdclass.XRTracker) { //gd:XRServer.remove_tracker
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_tracker, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ tracker gdextension.Object }{gdextension.Object(gd.ObjectChecked(tracker[0].AsObject()))}))
}

/*
Returns a dictionary of trackers for [param tracker_types].
*/
//go:nosplit
func (self class) GetTrackers(tracker_types int64) Dictionary.Any { //gd:XRServer.get_trackers
	var r_ret = gdextension.Call[gdextension.Dictionary](gd.ObjectChecked(self.AsObject()), methods.get_trackers, gdextension.SizeDictionary|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ tracker_types int64 }{tracker_types}))
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret)))
	return ret
}

/*
Returns the positional tracker with the given [param tracker_name].
*/
//go:nosplit
func (self class) GetTracker(tracker_name String.Name) [1]gdclass.XRTracker { //gd:XRServer.get_tracker
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_tracker, gdextension.SizeObject|(gdextension.SizeStringName<<4), unsafe.Pointer(&struct{ tracker_name gdextension.StringName }{pointers.Get(gd.InternalStringName(tracker_name))}))
	var ret = [1]gdclass.XRTracker{gd.PointerWithOwnershipTransferredToGo[gdclass.XRTracker](r_ret)}
	return ret
}

//go:nosplit
func (self class) GetPrimaryInterface() [1]gdclass.XRInterface { //gd:XRServer.get_primary_interface
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_primary_interface, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.XRInterface{gd.PointerWithOwnershipTransferredToGo[gdclass.XRInterface](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetPrimaryInterface(intf [1]gdclass.XRInterface) { //gd:XRServer.set_primary_interface
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_primary_interface, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ intf gdextension.Object }{gdextension.Object(gd.ObjectChecked(intf[0].AsObject()))}))
}
func OnReferenceFrameChanged(cb func(), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("reference_frame_changed"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) ReferenceFrameChanged() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`ReferenceFrameChanged`))))
}

func OnInterfaceAdded(cb func(interface_name string), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("interface_added"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) InterfaceAdded() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`InterfaceAdded`))))
}

func OnInterfaceRemoved(cb func(interface_name string), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("interface_removed"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) InterfaceRemoved() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`InterfaceRemoved`))))
}

func OnTrackerAdded(cb func(tracker_name string, atype int), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("tracker_added"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) TrackerAdded() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`TrackerAdded`))))
}

func OnTrackerUpdated(cb func(tracker_name string, atype int), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("tracker_updated"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) TrackerUpdated() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`TrackerUpdated`))))
}

func OnTrackerRemoved(cb func(tracker_name string, atype int), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("tracker_removed"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) TrackerRemoved() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`TrackerRemoved`))))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Object.Advanced(self.AsObject()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Object.Instance(self.AsObject()), name)
	}
}
func init() {
	gdclass.Register("XRServer", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.XRServer](ptr)} })
}

type RotationMode int //gd:XRServer.RotationMode

const (
	/*Fully reset the orientation of the HMD. Regardless of what direction the user is looking to in the real world. The user will look dead ahead in the virtual world.*/
	ResetFullRotation RotationMode = 0
	/*Resets the orientation but keeps the tilt of the device. So if we're looking down, we keep looking down but heading will be reset.*/
	ResetButKeepTilt RotationMode = 1
	/*Does not reset the orientation of the HMD, only the position of the player gets centered.*/
	DontResetRotation RotationMode = 2
)
