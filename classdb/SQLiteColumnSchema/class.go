// Code generated by the generate package DO NOT EDIT

// Package SQLiteColumnSchema provides methods for working with SQLiteColumnSchema object instances.
package SQLiteColumnSchema

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }
type Instance [1]gdclass.SQLiteColumnSchema

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsSQLiteColumnSchema() Instance
}

func Create(name string, default_value any, primary_key bool, auto_increment bool, not_null bool, unique bool) Instance { //gd:SQLiteColumnSchema.create
	self := Instance{}
	return Instance(Advanced(self).Create(String.New(name), 4, variant.New(default_value), primary_key, auto_increment, not_null, unique))
}
func CreateOptions(name string, atype variant.Type, default_value any, primary_key bool, auto_increment bool, not_null bool, unique bool) Instance { //gd:SQLiteColumnSchema.create
	self := Instance{}
	return Instance(Advanced(self).Create(String.New(name), atype, variant.New(default_value), primary_key, auto_increment, not_null, unique))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.SQLiteColumnSchema

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("SQLiteColumnSchema"))
	casted := Instance{*(*gdclass.SQLiteColumnSchema)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) Name() string {
	return string(class(self).GetName().String())
}

func (self Instance) SetName(value string) {
	class(self).SetName(String.New(value))
}

func (self Instance) Type() variant.Type {
	return variant.Type(class(self).GetType())
}

func (self Instance) SetType(value variant.Type) {
	class(self).SetType(value)
}

func (self Instance) DefaultValue() any {
	return any(class(self).GetDefaultValue().Interface())
}

func (self Instance) SetDefaultValue(value any) {
	class(self).SetDefaultValue(variant.New(value))
}

func (self Instance) PrimaryKey() bool {
	return bool(class(self).IsPrimaryKey())
}

func (self Instance) SetPrimaryKey(value bool) {
	class(self).SetPrimaryKey(value)
}

func (self Instance) AutoIncrement() bool {
	return bool(class(self).IsAutoIncrement())
}

func (self Instance) SetAutoIncrement(value bool) {
	class(self).SetAutoIncrement(value)
}

func (self Instance) NotNull() bool {
	return bool(class(self).IsNotNull())
}

func (self Instance) SetNotNull(value bool) {
	class(self).SetNotNull(value)
}

func (self Instance) Unique() bool {
	return bool(class(self).IsUnique())
}

func (self Instance) SetUnique(value bool) {
	class(self).SetUnique(value)
}

//go:nosplit
func (self class) GetName() String.Readable { //gd:SQLiteColumnSchema.get_name
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteColumnSchema.Bind_get_name, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetType() variant.Type { //gd:SQLiteColumnSchema.get_type
	var frame = callframe.New()
	var r_ret = callframe.Ret[variant.Type](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteColumnSchema.Bind_get_type, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetDefaultValue() variant.Any { //gd:SQLiteColumnSchema.get_default_value
	var frame = callframe.New()
	var r_ret = callframe.Ret[[3]uint64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteColumnSchema.Bind_get_default_value, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = variant.Implementation(gd.VariantProxy{}, pointers.Pack(pointers.New[gd.Variant](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) IsPrimaryKey() bool { //gd:SQLiteColumnSchema.is_primary_key
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteColumnSchema.Bind_is_primary_key, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) IsAutoIncrement() bool { //gd:SQLiteColumnSchema.is_auto_increment
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteColumnSchema.Bind_is_auto_increment, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) IsNotNull() bool { //gd:SQLiteColumnSchema.is_not_null
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteColumnSchema.Bind_is_not_null, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) IsUnique() bool { //gd:SQLiteColumnSchema.is_unique
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteColumnSchema.Bind_is_unique, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetName(name String.Readable) { //gd:SQLiteColumnSchema.set_name
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(name)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteColumnSchema.Bind_set_name, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SetType(atype variant.Type) { //gd:SQLiteColumnSchema.set_type
	var frame = callframe.New()
	callframe.Arg(frame, atype)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteColumnSchema.Bind_set_type, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SetDefaultValue(default_value variant.Any) { //gd:SQLiteColumnSchema.set_default_value
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalVariant(default_value)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteColumnSchema.Bind_set_default_value, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SetPrimaryKey(primary_key bool) { //gd:SQLiteColumnSchema.set_primary_key
	var frame = callframe.New()
	callframe.Arg(frame, primary_key)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteColumnSchema.Bind_set_primary_key, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SetAutoIncrement(auto_increment bool) { //gd:SQLiteColumnSchema.set_auto_increment
	var frame = callframe.New()
	callframe.Arg(frame, auto_increment)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteColumnSchema.Bind_set_auto_increment, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SetNotNull(not_null bool) { //gd:SQLiteColumnSchema.set_not_null
	var frame = callframe.New()
	callframe.Arg(frame, not_null)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteColumnSchema.Bind_set_not_null, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SetUnique(unique bool) { //gd:SQLiteColumnSchema.set_unique
	var frame = callframe.New()
	callframe.Arg(frame, unique)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteColumnSchema.Bind_set_unique, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) Create(name String.Readable, atype variant.Type, default_value variant.Any, primary_key bool, auto_increment bool, not_null bool, unique bool) [1]gdclass.SQLiteColumnSchema { //gd:SQLiteColumnSchema.create
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(name)))
	callframe.Arg(frame, atype)
	callframe.Arg(frame, pointers.Get(gd.InternalVariant(default_value)))
	callframe.Arg(frame, primary_key)
	callframe.Arg(frame, auto_increment)
	callframe.Arg(frame, not_null)
	callframe.Arg(frame, unique)
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCallStatic(gd.Global.Methods.SQLiteColumnSchema.Bind_create, frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.SQLiteColumnSchema{gd.PointerWithOwnershipTransferredToGo[gdclass.SQLiteColumnSchema](r_ret.Get())}
	frame.Free()
	return ret
}
func (self class) AsSQLiteColumnSchema() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsSQLiteColumnSchema() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsSQLiteColumnSchema() Instance { return self.Super().AsSQLiteColumnSchema() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("SQLiteColumnSchema", func(ptr gd.Object) any {
		return [1]gdclass.SQLiteColumnSchema{*(*gdclass.SQLiteColumnSchema)(unsafe.Pointer(&ptr))}
	})
}
