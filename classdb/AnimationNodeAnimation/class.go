// Code generated by the generate package DO NOT EDIT

// Package AnimationNodeAnimation provides methods for working with AnimationNodeAnimation object instances.
package AnimationNodeAnimation

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Animation"
import "graphics.gd/classdb/AnimationNode"
import "graphics.gd/classdb/AnimationRootNode"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A resource to add to an [AnimationNodeBlendTree]. Only has one output port using the [member animation] property. Used as an input for [AnimationNode]s that blend animations together.
*/
type Instance [1]gdclass.AnimationNodeAnimation

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAnimationNodeAnimation() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AnimationNodeAnimation

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("AnimationNodeAnimation"))
	casted := Instance{*(*gdclass.AnimationNodeAnimation)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) Animation() string {
	return string(class(self).GetAnimation().String())
}

func (self Instance) SetAnimation(value string) {
	class(self).SetAnimation(String.Name(String.New(value)))
}

func (self Instance) PlayMode() PlayMode {
	return PlayMode(class(self).GetPlayMode())
}

func (self Instance) SetPlayMode(value PlayMode) {
	class(self).SetPlayMode(value)
}

func (self Instance) AdvanceOnStart() bool {
	return bool(class(self).IsAdvanceOnStart())
}

func (self Instance) SetAdvanceOnStart(value bool) {
	class(self).SetAdvanceOnStart(value)
}

func (self Instance) UseCustomTimeline() bool {
	return bool(class(self).IsUsingCustomTimeline())
}

func (self Instance) SetUseCustomTimeline(value bool) {
	class(self).SetUseCustomTimeline(value)
}

func (self Instance) TimelineLength() Float.X {
	return Float.X(Float.X(class(self).GetTimelineLength()))
}

func (self Instance) SetTimelineLength(value Float.X) {
	class(self).SetTimelineLength(float64(value))
}

func (self Instance) StretchTimeScale() bool {
	return bool(class(self).IsStretchingTimeScale())
}

func (self Instance) SetStretchTimeScale(value bool) {
	class(self).SetStretchTimeScale(value)
}

func (self Instance) StartOffset() Float.X {
	return Float.X(Float.X(class(self).GetStartOffset()))
}

func (self Instance) SetStartOffset(value Float.X) {
	class(self).SetStartOffset(float64(value))
}

func (self Instance) LoopMode() Animation.LoopMode {
	return Animation.LoopMode(class(self).GetLoopMode())
}

func (self Instance) SetLoopMode(value Animation.LoopMode) {
	class(self).SetLoopMode(value)
}

//go:nosplit
func (self class) SetAnimation(name String.Name) { //gd:AnimationNodeAnimation.set_animation
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_set_animation), 0|(gdextension.SizeStringName<<4), unsafe.Pointer(&struct{ name gdextension.StringName }{gdextension.StringName(pointers.Get(gd.InternalStringName(name))[0])}))
}

//go:nosplit
func (self class) GetAnimation() String.Name { //gd:AnimationNodeAnimation.get_animation
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_get_animation), gdextension.SizeStringName, unsafe.Pointer(&struct{}{}))
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetPlayMode(mode PlayMode) { //gd:AnimationNodeAnimation.set_play_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_set_play_mode), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode PlayMode }{mode}))
}

//go:nosplit
func (self class) GetPlayMode() PlayMode { //gd:AnimationNodeAnimation.get_play_mode
	var r_ret = gdextension.Call[PlayMode](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_get_play_mode), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAdvanceOnStart(advance_on_start bool) { //gd:AnimationNodeAnimation.set_advance_on_start
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_set_advance_on_start), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ advance_on_start bool }{advance_on_start}))
}

//go:nosplit
func (self class) IsAdvanceOnStart() bool { //gd:AnimationNodeAnimation.is_advance_on_start
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_is_advance_on_start), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetUseCustomTimeline(use_custom_timeline bool) { //gd:AnimationNodeAnimation.set_use_custom_timeline
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_set_use_custom_timeline), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ use_custom_timeline bool }{use_custom_timeline}))
}

//go:nosplit
func (self class) IsUsingCustomTimeline() bool { //gd:AnimationNodeAnimation.is_using_custom_timeline
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_is_using_custom_timeline), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTimelineLength(timeline_length float64) { //gd:AnimationNodeAnimation.set_timeline_length
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_set_timeline_length), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ timeline_length float64 }{timeline_length}))
}

//go:nosplit
func (self class) GetTimelineLength() float64 { //gd:AnimationNodeAnimation.get_timeline_length
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_get_timeline_length), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetStretchTimeScale(stretch_time_scale bool) { //gd:AnimationNodeAnimation.set_stretch_time_scale
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_set_stretch_time_scale), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ stretch_time_scale bool }{stretch_time_scale}))
}

//go:nosplit
func (self class) IsStretchingTimeScale() bool { //gd:AnimationNodeAnimation.is_stretching_time_scale
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_is_stretching_time_scale), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetStartOffset(start_offset float64) { //gd:AnimationNodeAnimation.set_start_offset
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_set_start_offset), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ start_offset float64 }{start_offset}))
}

//go:nosplit
func (self class) GetStartOffset() float64 { //gd:AnimationNodeAnimation.get_start_offset
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_get_start_offset), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetLoopMode(loop_mode Animation.LoopMode) { //gd:AnimationNodeAnimation.set_loop_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_set_loop_mode), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ loop_mode Animation.LoopMode }{loop_mode}))
}

//go:nosplit
func (self class) GetLoopMode() Animation.LoopMode { //gd:AnimationNodeAnimation.get_loop_mode
	var r_ret = gdextension.Call[Animation.LoopMode](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.AnimationNodeAnimation.Bind_get_loop_mode), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsAnimationNodeAnimation() Advanced { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsAnimationNodeAnimation() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAnimationNodeAnimation() Instance {
	return self.Super().AsAnimationNodeAnimation()
}
func (self class) AsAnimationRootNode() AnimationRootNode.Advanced {
	return *((*AnimationRootNode.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAnimationRootNode() AnimationRootNode.Instance {
	return self.Super().AsAnimationRootNode()
}
func (self Instance) AsAnimationRootNode() AnimationRootNode.Instance {
	return *((*AnimationRootNode.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsAnimationNode() AnimationNode.Advanced {
	return *((*AnimationNode.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAnimationNode() AnimationNode.Instance {
	return self.Super().AsAnimationNode()
}
func (self Instance) AsAnimationNode() AnimationNode.Instance {
	return *((*AnimationNode.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AnimationRootNode.Advanced(self.AsAnimationRootNode()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AnimationRootNode.Instance(self.AsAnimationRootNode()), name)
	}
}
func init() {
	gdclass.Register("AnimationNodeAnimation", func(ptr gd.Object) any {
		return [1]gdclass.AnimationNodeAnimation{*(*gdclass.AnimationNodeAnimation)(unsafe.Pointer(&ptr))}
	})
}

type PlayMode int //gd:AnimationNodeAnimation.PlayMode

const (
	/*Plays animation in forward direction.*/
	PlayModeForward PlayMode = 0
	/*Plays animation in backward direction.*/
	PlayModeBackward PlayMode = 1
)
