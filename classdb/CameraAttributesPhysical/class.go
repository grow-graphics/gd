// Code generated by the generate package DO NOT EDIT

// Package CameraAttributesPhysical provides methods for working with CameraAttributesPhysical object instances.
package CameraAttributesPhysical

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/CameraAttributes"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[CameraAttributesPhysical] is used to set rendering settings based on a physically-based camera's settings. It is responsible for exposure, auto-exposure, and depth of field.
When used in a [WorldEnvironment] it provides default settings for exposure, auto-exposure, and depth of field that will be used by all cameras without their own [CameraAttributes], including the editor camera. When used in a [Camera3D] it will override any [CameraAttributes] set in the [WorldEnvironment] and will override the [Camera3D]s [member Camera3D.far], [member Camera3D.near], [member Camera3D.fov], and [member Camera3D.keep_aspect] properties. When used in [VoxelGI] or [LightmapGI], only the exposure settings will be used.
The default settings are intended for use in an outdoor environment, tips for settings for use in an indoor environment can be found in each setting's documentation.
[b]Note:[/b] Depth of field blur is only supported in the Forward+ and Mobile rendering methods, not Compatibility.
*/
type Instance [1]gdclass.CameraAttributesPhysical

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_aperture                         gdextension.MethodForClass `hash:"373806689"`
	get_aperture                         gdextension.MethodForClass `hash:"1740695150"`
	set_shutter_speed                    gdextension.MethodForClass `hash:"373806689"`
	get_shutter_speed                    gdextension.MethodForClass `hash:"1740695150"`
	set_focal_length                     gdextension.MethodForClass `hash:"373806689"`
	get_focal_length                     gdextension.MethodForClass `hash:"1740695150"`
	set_focus_distance                   gdextension.MethodForClass `hash:"373806689"`
	get_focus_distance                   gdextension.MethodForClass `hash:"1740695150"`
	set_near                             gdextension.MethodForClass `hash:"373806689"`
	get_near                             gdextension.MethodForClass `hash:"1740695150"`
	set_far                              gdextension.MethodForClass `hash:"373806689"`
	get_far                              gdextension.MethodForClass `hash:"1740695150"`
	get_fov                              gdextension.MethodForClass `hash:"1740695150"`
	set_auto_exposure_max_exposure_value gdextension.MethodForClass `hash:"373806689"`
	get_auto_exposure_max_exposure_value gdextension.MethodForClass `hash:"1740695150"`
	set_auto_exposure_min_exposure_value gdextension.MethodForClass `hash:"373806689"`
	get_auto_exposure_min_exposure_value gdextension.MethodForClass `hash:"1740695150"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("CameraAttributesPhysical")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsCameraAttributesPhysical() Instance
}

/*
Returns the vertical field of view that corresponds to the [member frustum_focal_length]. This value is calculated internally whenever [member frustum_focal_length] is changed.
*/
func (self Instance) GetFov() Float.X { //gd:CameraAttributesPhysical.get_fov
	return Float.X(Float.X(Advanced(self).GetFov()))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.CameraAttributesPhysical

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.CameraAttributesPhysical)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.CameraAttributesPhysical)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.CameraAttributesPhysical)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) FrustumFocusDistance() Float.X {
	return Float.X(Float.X(class(self).GetFocusDistance()))
}

func (self Instance) SetFrustumFocusDistance(value Float.X) {
	class(self).SetFocusDistance(float64(value))
}

func (self Instance) FrustumFocalLength() Float.X {
	return Float.X(Float.X(class(self).GetFocalLength()))
}

func (self Instance) SetFrustumFocalLength(value Float.X) {
	class(self).SetFocalLength(float64(value))
}

func (self Instance) FrustumNear() Float.X {
	return Float.X(Float.X(class(self).GetNear()))
}

func (self Instance) SetFrustumNear(value Float.X) {
	class(self).SetNear(float64(value))
}

func (self Instance) FrustumFar() Float.X {
	return Float.X(Float.X(class(self).GetFar()))
}

func (self Instance) SetFrustumFar(value Float.X) {
	class(self).SetFar(float64(value))
}

func (self Instance) ExposureAperture() Float.X {
	return Float.X(Float.X(class(self).GetAperture()))
}

func (self Instance) SetExposureAperture(value Float.X) {
	class(self).SetAperture(float64(value))
}

func (self Instance) ExposureShutterSpeed() Float.X {
	return Float.X(Float.X(class(self).GetShutterSpeed()))
}

func (self Instance) SetExposureShutterSpeed(value Float.X) {
	class(self).SetShutterSpeed(float64(value))
}

func (self Instance) AutoExposureMinExposureValue() Float.X {
	return Float.X(Float.X(class(self).GetAutoExposureMinExposureValue()))
}

func (self Instance) SetAutoExposureMinExposureValue(value Float.X) {
	class(self).SetAutoExposureMinExposureValue(float64(value))
}

func (self Instance) AutoExposureMaxExposureValue() Float.X {
	return Float.X(Float.X(class(self).GetAutoExposureMaxExposureValue()))
}

func (self Instance) SetAutoExposureMaxExposureValue(value Float.X) {
	class(self).SetAutoExposureMaxExposureValue(float64(value))
}

//go:nosplit
func (self class) SetAperture(aperture float64) { //gd:CameraAttributesPhysical.set_aperture
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_aperture, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ aperture float64 }{aperture}))
}

//go:nosplit
func (self class) GetAperture() float64 { //gd:CameraAttributesPhysical.get_aperture
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_aperture, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetShutterSpeed(shutter_speed float64) { //gd:CameraAttributesPhysical.set_shutter_speed
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_shutter_speed, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ shutter_speed float64 }{shutter_speed}))
}

//go:nosplit
func (self class) GetShutterSpeed() float64 { //gd:CameraAttributesPhysical.get_shutter_speed
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_shutter_speed, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFocalLength(focal_length float64) { //gd:CameraAttributesPhysical.set_focal_length
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_focal_length, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ focal_length float64 }{focal_length}))
}

//go:nosplit
func (self class) GetFocalLength() float64 { //gd:CameraAttributesPhysical.get_focal_length
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_focal_length, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFocusDistance(focus_distance float64) { //gd:CameraAttributesPhysical.set_focus_distance
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_focus_distance, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ focus_distance float64 }{focus_distance}))
}

//go:nosplit
func (self class) GetFocusDistance() float64 { //gd:CameraAttributesPhysical.get_focus_distance
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_focus_distance, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetNear(near float64) { //gd:CameraAttributesPhysical.set_near
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_near, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ near float64 }{near}))
}

//go:nosplit
func (self class) GetNear() float64 { //gd:CameraAttributesPhysical.get_near
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_near, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFar(far float64) { //gd:CameraAttributesPhysical.set_far
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_far, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ far float64 }{far}))
}

//go:nosplit
func (self class) GetFar() float64 { //gd:CameraAttributesPhysical.get_far
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_far, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the vertical field of view that corresponds to the [member frustum_focal_length]. This value is calculated internally whenever [member frustum_focal_length] is changed.
*/
//go:nosplit
func (self class) GetFov() float64 { //gd:CameraAttributesPhysical.get_fov
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_fov, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAutoExposureMaxExposureValue(exposure_value_max float64) { //gd:CameraAttributesPhysical.set_auto_exposure_max_exposure_value
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_auto_exposure_max_exposure_value, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ exposure_value_max float64 }{exposure_value_max}))
}

//go:nosplit
func (self class) GetAutoExposureMaxExposureValue() float64 { //gd:CameraAttributesPhysical.get_auto_exposure_max_exposure_value
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_auto_exposure_max_exposure_value, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAutoExposureMinExposureValue(exposure_value_min float64) { //gd:CameraAttributesPhysical.set_auto_exposure_min_exposure_value
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_auto_exposure_min_exposure_value, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ exposure_value_min float64 }{exposure_value_min}))
}

//go:nosplit
func (self class) GetAutoExposureMinExposureValue() float64 { //gd:CameraAttributesPhysical.get_auto_exposure_min_exposure_value
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_auto_exposure_min_exposure_value, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsCameraAttributesPhysical() Advanced { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsCameraAttributesPhysical() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsCameraAttributesPhysical() Instance {
	return self.Super().AsCameraAttributesPhysical()
}
func (self class) AsCameraAttributes() CameraAttributes.Advanced {
	return *((*CameraAttributes.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsCameraAttributes() CameraAttributes.Instance {
	return self.Super().AsCameraAttributes()
}
func (self Instance) AsCameraAttributes() CameraAttributes.Instance {
	return *((*CameraAttributes.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(CameraAttributes.Advanced(self.AsCameraAttributes()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(CameraAttributes.Instance(self.AsCameraAttributes()), name)
	}
}
func init() {
	gdclass.Register("CameraAttributesPhysical", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
