// Code generated by the generate package DO NOT EDIT

// Package VisualShaderNodeFloatParameter provides methods for working with VisualShaderNodeFloatParameter object instances.
package VisualShaderNodeFloatParameter

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/VisualShaderNode"
import "graphics.gd/classdb/VisualShaderNodeParameter"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Translated to [code]uniform float[/code] in the shader language.
*/
type Instance [1]gdclass.VisualShaderNodeFloatParameter

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsVisualShaderNodeFloatParameter() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.VisualShaderNodeFloatParameter

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("VisualShaderNodeFloatParameter"))
	casted := Instance{*(*gdclass.VisualShaderNodeFloatParameter)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) Hint() Hint {
	return Hint(class(self).GetHint())
}

func (self Instance) SetHint(value Hint) {
	class(self).SetHint(value)
}

func (self Instance) Min() Float.X {
	return Float.X(Float.X(class(self).GetMin()))
}

func (self Instance) SetMin(value Float.X) {
	class(self).SetMin(float64(value))
}

func (self Instance) Max() Float.X {
	return Float.X(Float.X(class(self).GetMax()))
}

func (self Instance) SetMax(value Float.X) {
	class(self).SetMax(float64(value))
}

func (self Instance) Step() Float.X {
	return Float.X(Float.X(class(self).GetStep()))
}

func (self Instance) SetStep(value Float.X) {
	class(self).SetStep(float64(value))
}

func (self Instance) DefaultValueEnabled() bool {
	return bool(class(self).IsDefaultValueEnabled())
}

func (self Instance) SetDefaultValueEnabled(value bool) {
	class(self).SetDefaultValueEnabled(value)
}

func (self Instance) DefaultValue() Float.X {
	return Float.X(Float.X(class(self).GetDefaultValue()))
}

func (self Instance) SetDefaultValue(value Float.X) {
	class(self).SetDefaultValue(float64(value))
}

//go:nosplit
func (self class) SetHint(hint Hint) { //gd:VisualShaderNodeFloatParameter.set_hint
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.VisualShaderNodeFloatParameter.Bind_set_hint, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ hint Hint }{hint}))
}

//go:nosplit
func (self class) GetHint() Hint { //gd:VisualShaderNodeFloatParameter.get_hint
	var r_ret = gdunsafe.Call[Hint](self.AsObject(), gd.Global.Methods.VisualShaderNodeFloatParameter.Bind_get_hint, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMin(value float64) { //gd:VisualShaderNodeFloatParameter.set_min
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.VisualShaderNodeFloatParameter.Bind_set_min, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ value float64 }{value}))
}

//go:nosplit
func (self class) GetMin() float64 { //gd:VisualShaderNodeFloatParameter.get_min
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.VisualShaderNodeFloatParameter.Bind_get_min, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMax(value float64) { //gd:VisualShaderNodeFloatParameter.set_max
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.VisualShaderNodeFloatParameter.Bind_set_max, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ value float64 }{value}))
}

//go:nosplit
func (self class) GetMax() float64 { //gd:VisualShaderNodeFloatParameter.get_max
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.VisualShaderNodeFloatParameter.Bind_get_max, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetStep(value float64) { //gd:VisualShaderNodeFloatParameter.set_step
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.VisualShaderNodeFloatParameter.Bind_set_step, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ value float64 }{value}))
}

//go:nosplit
func (self class) GetStep() float64 { //gd:VisualShaderNodeFloatParameter.get_step
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.VisualShaderNodeFloatParameter.Bind_get_step, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDefaultValueEnabled(enabled bool) { //gd:VisualShaderNodeFloatParameter.set_default_value_enabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.VisualShaderNodeFloatParameter.Bind_set_default_value_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsDefaultValueEnabled() bool { //gd:VisualShaderNodeFloatParameter.is_default_value_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.VisualShaderNodeFloatParameter.Bind_is_default_value_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDefaultValue(value float64) { //gd:VisualShaderNodeFloatParameter.set_default_value
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.VisualShaderNodeFloatParameter.Bind_set_default_value, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ value float64 }{value}))
}

//go:nosplit
func (self class) GetDefaultValue() float64 { //gd:VisualShaderNodeFloatParameter.get_default_value
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.VisualShaderNodeFloatParameter.Bind_get_default_value, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsVisualShaderNodeFloatParameter() Advanced {
	return *((*Advanced)(unsafe.Pointer(&self)))
}
func (self Instance) AsVisualShaderNodeFloatParameter() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisualShaderNodeFloatParameter() Instance {
	return self.Super().AsVisualShaderNodeFloatParameter()
}
func (self class) AsVisualShaderNodeParameter() VisualShaderNodeParameter.Advanced {
	return *((*VisualShaderNodeParameter.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisualShaderNodeParameter() VisualShaderNodeParameter.Instance {
	return self.Super().AsVisualShaderNodeParameter()
}
func (self Instance) AsVisualShaderNodeParameter() VisualShaderNodeParameter.Instance {
	return *((*VisualShaderNodeParameter.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsVisualShaderNode() VisualShaderNode.Advanced {
	return *((*VisualShaderNode.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisualShaderNode() VisualShaderNode.Instance {
	return self.Super().AsVisualShaderNode()
}
func (self Instance) AsVisualShaderNode() VisualShaderNode.Instance {
	return *((*VisualShaderNode.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualShaderNodeParameter.Advanced(self.AsVisualShaderNodeParameter()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualShaderNodeParameter.Instance(self.AsVisualShaderNodeParameter()), name)
	}
}
func init() {
	gdclass.Register("VisualShaderNodeFloatParameter", func(ptr gd.Object) any {
		return [1]gdclass.VisualShaderNodeFloatParameter{*(*gdclass.VisualShaderNodeFloatParameter)(unsafe.Pointer(&ptr))}
	})
}

type Hint int //gd:VisualShaderNodeFloatParameter.Hint

const (
	/*No hint used.*/
	HintNone Hint = 0
	/*A range hint for scalar value, which limits possible input values between [member min] and [member max]. Translated to [code]hint_range(min, max)[/code] in shader code.*/
	HintRange Hint = 1
	/*A range hint for scalar value with step, which limits possible input values between [member min] and [member max], with a step (increment) of [member step]). Translated to [code]hint_range(min, max, step)[/code] in shader code.*/
	HintRangeStep Hint = 2
	/*Represents the size of the [enum Hint] enum.*/
	HintMax Hint = 3
)
