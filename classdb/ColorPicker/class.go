// Code generated by the generate package DO NOT EDIT

// Package ColorPicker provides methods for working with ColorPicker object instances.
package ColorPicker

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/BoxContainer"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Container"
import "graphics.gd/classdb/Control"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/VBoxContainer"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A widget that provides an interface for selecting or modifying a color. It can optionally provide functionalities like a color sampler (eyedropper), color modes, and presets.
[b]Note:[/b] This control is the color picker widget itself. You can use a [ColorPickerButton] instead if you need a button that brings up a [ColorPicker] in a popup.
*/
type Instance [1]gdclass.ColorPicker

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_pick_color       gdextension.MethodForClass `hash:"2920490490"`
	get_pick_color       gdextension.MethodForClass `hash:"3444240500"`
	set_deferred_mode    gdextension.MethodForClass `hash:"2586408642"`
	is_deferred_mode     gdextension.MethodForClass `hash:"36873697"`
	set_color_mode       gdextension.MethodForClass `hash:"1579114136"`
	get_color_mode       gdextension.MethodForClass `hash:"392907674"`
	set_edit_alpha       gdextension.MethodForClass `hash:"2586408642"`
	is_editing_alpha     gdextension.MethodForClass `hash:"36873697"`
	set_can_add_swatches gdextension.MethodForClass `hash:"2586408642"`
	are_swatches_enabled gdextension.MethodForClass `hash:"36873697"`
	set_presets_visible  gdextension.MethodForClass `hash:"2586408642"`
	are_presets_visible  gdextension.MethodForClass `hash:"36873697"`
	set_modes_visible    gdextension.MethodForClass `hash:"2586408642"`
	are_modes_visible    gdextension.MethodForClass `hash:"36873697"`
	set_sampler_visible  gdextension.MethodForClass `hash:"2586408642"`
	is_sampler_visible   gdextension.MethodForClass `hash:"36873697"`
	set_sliders_visible  gdextension.MethodForClass `hash:"2586408642"`
	are_sliders_visible  gdextension.MethodForClass `hash:"36873697"`
	set_hex_visible      gdextension.MethodForClass `hash:"2586408642"`
	is_hex_visible       gdextension.MethodForClass `hash:"36873697"`
	add_preset           gdextension.MethodForClass `hash:"2920490490"`
	erase_preset         gdextension.MethodForClass `hash:"2920490490"`
	get_presets          gdextension.MethodForClass `hash:"1392750486"`
	add_recent_preset    gdextension.MethodForClass `hash:"2920490490"`
	erase_recent_preset  gdextension.MethodForClass `hash:"2920490490"`
	get_recent_presets   gdextension.MethodForClass `hash:"1392750486"`
	set_picker_shape     gdextension.MethodForClass `hash:"3981373861"`
	get_picker_shape     gdextension.MethodForClass `hash:"1143229889"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("ColorPicker")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsColorPicker() Instance
}

/*
Adds the given color to a list of color presets. The presets are displayed in the color picker and the user will be able to select them.
[b]Note:[/b] The presets list is only for [i]this[/i] color picker.
*/
func (self Instance) AddPreset(color Color.RGBA) { //gd:ColorPicker.add_preset
	Advanced(self).AddPreset(Color.RGBA(color))
}

/*
Removes the given color from the list of color presets of this color picker.
*/
func (self Instance) ErasePreset(color Color.RGBA) { //gd:ColorPicker.erase_preset
	Advanced(self).ErasePreset(Color.RGBA(color))
}

/*
Returns the list of colors in the presets of the color picker.
*/
func (self Instance) GetPresets() []Color.RGBA { //gd:ColorPicker.get_presets
	return []Color.RGBA(slices.Collect(Advanced(self).GetPresets().Values()))
}

/*
Adds the given color to a list of color recent presets so that it can be picked later. Recent presets are the colors that were picked recently, a new preset is automatically created and added to recent presets when you pick a new color.
[b]Note:[/b] The recent presets list is only for [i]this[/i] color picker.
*/
func (self Instance) AddRecentPreset(color Color.RGBA) { //gd:ColorPicker.add_recent_preset
	Advanced(self).AddRecentPreset(Color.RGBA(color))
}

/*
Removes the given color from the list of color recent presets of this color picker.
*/
func (self Instance) EraseRecentPreset(color Color.RGBA) { //gd:ColorPicker.erase_recent_preset
	Advanced(self).EraseRecentPreset(Color.RGBA(color))
}

/*
Returns the list of colors in the recent presets of the color picker.
*/
func (self Instance) GetRecentPresets() []Color.RGBA { //gd:ColorPicker.get_recent_presets
	return []Color.RGBA(slices.Collect(Advanced(self).GetRecentPresets().Values()))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.ColorPicker

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.ColorPicker)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.ColorPicker)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.ColorPicker)(unsafe.Pointer(&object))}
	object[0].Notification(0, false)
	return casted
}

func (self Instance) Color() Color.RGBA {
	return Color.RGBA(class(self).GetPickColor())
}

func (self Instance) SetColor(value Color.RGBA) {
	class(self).SetPickColor(Color.RGBA(value))
}

func (self Instance) EditAlpha() bool {
	return bool(class(self).IsEditingAlpha())
}

func (self Instance) SetEditAlpha(value bool) {
	class(self).SetEditAlpha(value)
}

func (self Instance) ColorMode() ColorModeType {
	return ColorModeType(class(self).GetColorMode())
}

func (self Instance) SetColorMode(value ColorModeType) {
	class(self).SetColorMode(value)
}

func (self Instance) DeferredMode() bool {
	return bool(class(self).IsDeferredMode())
}

func (self Instance) SetDeferredMode(value bool) {
	class(self).SetDeferredMode(value)
}

func (self Instance) PickerShape() PickerShapeType {
	return PickerShapeType(class(self).GetPickerShape())
}

func (self Instance) SetPickerShape(value PickerShapeType) {
	class(self).SetPickerShape(value)
}

func (self Instance) CanAddSwatches() bool {
	return bool(class(self).AreSwatchesEnabled())
}

func (self Instance) SetCanAddSwatches(value bool) {
	class(self).SetCanAddSwatches(value)
}

func (self Instance) SamplerVisible() bool {
	return bool(class(self).IsSamplerVisible())
}

func (self Instance) SetSamplerVisible(value bool) {
	class(self).SetSamplerVisible(value)
}

func (self Instance) ColorModesVisible() bool {
	return bool(class(self).AreModesVisible())
}

func (self Instance) SetColorModesVisible(value bool) {
	class(self).SetModesVisible(value)
}

func (self Instance) SlidersVisible() bool {
	return bool(class(self).AreSlidersVisible())
}

func (self Instance) SetSlidersVisible(value bool) {
	class(self).SetSlidersVisible(value)
}

func (self Instance) HexVisible() bool {
	return bool(class(self).IsHexVisible())
}

func (self Instance) SetHexVisible(value bool) {
	class(self).SetHexVisible(value)
}

func (self Instance) PresetsVisible() bool {
	return bool(class(self).ArePresetsVisible())
}

func (self Instance) SetPresetsVisible(value bool) {
	class(self).SetPresetsVisible(value)
}

//go:nosplit
func (self class) SetPickColor(color Color.RGBA) { //gd:ColorPicker.set_pick_color
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pick_color, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

//go:nosplit
func (self class) GetPickColor() Color.RGBA { //gd:ColorPicker.get_pick_color
	var r_ret = gdextension.Call[Color.RGBA](gd.ObjectChecked(self.AsObject()), methods.get_pick_color, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDeferredMode(mode bool) { //gd:ColorPicker.set_deferred_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_deferred_mode, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ mode bool }{mode}))
}

//go:nosplit
func (self class) IsDeferredMode() bool { //gd:ColorPicker.is_deferred_mode
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_deferred_mode, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetColorMode(color_mode ColorModeType) { //gd:ColorPicker.set_color_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_color_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ color_mode ColorModeType }{color_mode}))
}

//go:nosplit
func (self class) GetColorMode() ColorModeType { //gd:ColorPicker.get_color_mode
	var r_ret = gdextension.Call[ColorModeType](gd.ObjectChecked(self.AsObject()), methods.get_color_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEditAlpha(show bool) { //gd:ColorPicker.set_edit_alpha
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_edit_alpha, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ show bool }{show}))
}

//go:nosplit
func (self class) IsEditingAlpha() bool { //gd:ColorPicker.is_editing_alpha
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_editing_alpha, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCanAddSwatches(enabled bool) { //gd:ColorPicker.set_can_add_swatches
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_can_add_swatches, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) AreSwatchesEnabled() bool { //gd:ColorPicker.are_swatches_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.are_swatches_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPresetsVisible(visible bool) { //gd:ColorPicker.set_presets_visible
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_presets_visible, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ visible bool }{visible}))
}

//go:nosplit
func (self class) ArePresetsVisible() bool { //gd:ColorPicker.are_presets_visible
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.are_presets_visible, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetModesVisible(visible bool) { //gd:ColorPicker.set_modes_visible
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_modes_visible, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ visible bool }{visible}))
}

//go:nosplit
func (self class) AreModesVisible() bool { //gd:ColorPicker.are_modes_visible
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.are_modes_visible, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSamplerVisible(visible bool) { //gd:ColorPicker.set_sampler_visible
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_sampler_visible, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ visible bool }{visible}))
}

//go:nosplit
func (self class) IsSamplerVisible() bool { //gd:ColorPicker.is_sampler_visible
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_sampler_visible, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSlidersVisible(visible bool) { //gd:ColorPicker.set_sliders_visible
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_sliders_visible, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ visible bool }{visible}))
}

//go:nosplit
func (self class) AreSlidersVisible() bool { //gd:ColorPicker.are_sliders_visible
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.are_sliders_visible, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHexVisible(visible bool) { //gd:ColorPicker.set_hex_visible
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_hex_visible, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ visible bool }{visible}))
}

//go:nosplit
func (self class) IsHexVisible() bool { //gd:ColorPicker.is_hex_visible
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_hex_visible, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Adds the given color to a list of color presets. The presets are displayed in the color picker and the user will be able to select them.
[b]Note:[/b] The presets list is only for [i]this[/i] color picker.
*/
//go:nosplit
func (self class) AddPreset(color Color.RGBA) { //gd:ColorPicker.add_preset
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.add_preset, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

/*
Removes the given color from the list of color presets of this color picker.
*/
//go:nosplit
func (self class) ErasePreset(color Color.RGBA) { //gd:ColorPicker.erase_preset
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.erase_preset, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

/*
Returns the list of colors in the presets of the color picker.
*/
//go:nosplit
func (self class) GetPresets() Packed.Array[Color.RGBA] { //gd:ColorPicker.get_presets
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_presets, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Array[Color.RGBA](Array.Through(gd.PackedProxy[gd.PackedColorArray, Color.RGBA]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

/*
Adds the given color to a list of color recent presets so that it can be picked later. Recent presets are the colors that were picked recently, a new preset is automatically created and added to recent presets when you pick a new color.
[b]Note:[/b] The recent presets list is only for [i]this[/i] color picker.
*/
//go:nosplit
func (self class) AddRecentPreset(color Color.RGBA) { //gd:ColorPicker.add_recent_preset
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.add_recent_preset, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

/*
Removes the given color from the list of color recent presets of this color picker.
*/
//go:nosplit
func (self class) EraseRecentPreset(color Color.RGBA) { //gd:ColorPicker.erase_recent_preset
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.erase_recent_preset, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

/*
Returns the list of colors in the recent presets of the color picker.
*/
//go:nosplit
func (self class) GetRecentPresets() Packed.Array[Color.RGBA] { //gd:ColorPicker.get_recent_presets
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_recent_presets, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Array[Color.RGBA](Array.Through(gd.PackedProxy[gd.PackedColorArray, Color.RGBA]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetPickerShape(shape PickerShapeType) { //gd:ColorPicker.set_picker_shape
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_picker_shape, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ shape PickerShapeType }{shape}))
}

//go:nosplit
func (self class) GetPickerShape() PickerShapeType { //gd:ColorPicker.get_picker_shape
	var r_ret = gdextension.Call[PickerShapeType](gd.ObjectChecked(self.AsObject()), methods.get_picker_shape, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self Instance) OnColorChanged(cb func(color Color.RGBA)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("color_changed"), gd.NewCallable(cb), 0)
}

func (self Instance) OnPresetAdded(cb func(color Color.RGBA)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("preset_added"), gd.NewCallable(cb), 0)
}

func (self Instance) OnPresetRemoved(cb func(color Color.RGBA)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("preset_removed"), gd.NewCallable(cb), 0)
}

func (self class) AsColorPicker() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsColorPicker() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsColorPicker() Instance { return self.Super().AsColorPicker() }
func (self class) AsVBoxContainer() VBoxContainer.Advanced {
	return *((*VBoxContainer.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVBoxContainer() VBoxContainer.Instance {
	return self.Super().AsVBoxContainer()
}
func (self Instance) AsVBoxContainer() VBoxContainer.Instance {
	return *((*VBoxContainer.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsBoxContainer() BoxContainer.Advanced {
	return *((*BoxContainer.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsBoxContainer() BoxContainer.Instance {
	return self.Super().AsBoxContainer()
}
func (self Instance) AsBoxContainer() BoxContainer.Instance {
	return *((*BoxContainer.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsContainer() Container.Advanced {
	return *((*Container.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsContainer() Container.Instance { return self.Super().AsContainer() }
func (self Instance) AsContainer() Container.Instance {
	return *((*Container.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsControl() Control.Advanced         { return *((*Control.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsControl() Control.Instance { return self.Super().AsControl() }
func (self Instance) AsControl() Control.Instance {
	return *((*Control.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return *((*CanvasItem.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return *((*CanvasItem.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VBoxContainer.Advanced(self.AsVBoxContainer()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VBoxContainer.Instance(self.AsVBoxContainer()), name)
	}
}
func init() {
	gdclass.Register("ColorPicker", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type ColorModeType int //gd:ColorPicker.ColorModeType

const (
	/*Allows editing the color with Red/Green/Blue sliders.*/
	ModeRgb ColorModeType = 0
	/*Allows editing the color with Hue/Saturation/Value sliders.*/
	ModeHsv ColorModeType = 1
	/*Allows the color R, G, B component values to go beyond 1.0, which can be used for certain special operations that require it (like tinting without darkening or rendering sprites in HDR).*/
	ModeRaw ColorModeType = 2
	/*Allows editing the color with Hue/Saturation/Lightness sliders.
	  OKHSL is a new color space similar to HSL but that better match perception by leveraging the Oklab color space which is designed to be simple to use, while doing a good job at predicting perceived lightness, chroma and hue.
	  [url=https://bottosson.github.io/posts/colorpicker/]Okhsv and Okhsl color spaces[/url]*/
	ModeOkhsl ColorModeType = 3
)

type PickerShapeType int //gd:ColorPicker.PickerShapeType

const (
	/*HSV Color Model rectangle color space.*/
	ShapeHsvRectangle PickerShapeType = 0
	/*HSV Color Model rectangle color space with a wheel.*/
	ShapeHsvWheel PickerShapeType = 1
	/*HSV Color Model circle color space. Use Saturation as a radius.*/
	ShapeVhsCircle PickerShapeType = 2
	/*HSL OK Color Model circle color space.*/
	ShapeOkhslCircle PickerShapeType = 3
	/*The color space shape and the shape select button are hidden. Can't be selected from the shapes popup.*/
	ShapeNone PickerShapeType = 4
)
