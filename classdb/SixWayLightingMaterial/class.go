// Code generated by the generate package DO NOT EDIT

// Package SixWayLightingMaterial provides methods for working with SixWayLightingMaterial object instances.
package SixWayLightingMaterial

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Material"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A [b]Volumetric Lighting Shader[/b] using a Six-Directional Lighting Model (SDLM) designed to simulate realistic light interaction within semi-transparent volumes like cloud, smoke, fog and fire.
[b]Parameters :[/b]
[color=#03c2fc][b]Six Way Map RTB[/b][/color] (Type: Texture2D): Right-Top-Back lighting texture (RGB channels contain lighting data for positive X, Y, and negative Z directions).
[color=#03c2fc][b]Six Way Map LBF[/b][/color] (Type: Texture2D): Left-Bottom-Front lighting texture (RGB channels contain lighting data for negative X, negative Y, and positive Z directions).
[color=#03c2fc][b]Six Way Map TEA[/b][/color] (Type: Texture2D): Transparency-Emission-AO texture (R channel for Alpha, G for Emission, B for Ambient Occlusion).
[color=#03c2fc][b]Normal Map[/b][/color] (Type: Texture2D): Normal map for simulating surface details.
[color=#03c2fc][b]Emission Ramp[/b][/color] (Type: Texture2D): Color ramp texture for emission effects. Blackbody can be used as well.
[color=#fcba03][b]Absorption[/b][/color] (Type: Color): Light absorption color, Defines how much light is absorbed by the volume.
[color=#fcba03][b]Thickness[/b][/color] (Type: float): Volume thickness multiplier (Affects light absorption).
[color=#fcba03][b]Density[/b][/color] (Type: float): Density of the volume (Affects overall opacity).
[color=#fcba03][b]Scattering[/b][/color] (Type: float): Light scattering amount, Defines how much light diffuses through the volume.
[color=#fcba03][b]Normal Power[/b][/color] (Type: float): Strength of normal mapping effect.
[color=#fcba03][b]Normal Blend[/b][/color] (Type: float): Blend factor between directional lighting and normal-mapped lighting.
[color=#fcba03][b]AO Power[/b][/color] (Type: float): Ambient occlusion strength from the TEA texture's B channel.
[color=#fcba03][b]emission_power[/b][/color] (Type: float): Emission strength multiplier.
[color=#fcba03][b]Billboard Mode[/b][/color] (Type: bool): Enables billboarding (face towards camera).
[color=#fcba03][b]Billboard y-Axis Only[/b][/color] (Type: bool): Billboard only around Y-axis (for trees/vertical objects).
[color=#fcba03][b]billboard Keep Scale[/b][/color] (Type: bool): Maintain object scale when billboarding.
[color=#fcba03][b]Animate[/b][/color] (Type: bool): Enables flipbook animation.
[color=#fcba03][b]Animate Speed[/b][/color] (Type: float): Flipbook animation speed in frames per second.
[color=#fcba03][b]Animate Offset[/b][/color] (Type: float): Time offset for animation start.
[color=#fcba03][b]Flipbook Dimensions[/b][/color] (Type: Vector2): Grid dimensions for flipbook animation (columns, rows).
[color=#03fc84][b]Developed By Hamid.Memar[/b][/color]
*/
type Instance [1]gdclass.SixWayLightingMaterial

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsSixWayLightingMaterial() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.SixWayLightingMaterial

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("SixWayLightingMaterial"))
	casted := Instance{*(*gdclass.SixWayLightingMaterial)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self class) AsSixWayLightingMaterial() Advanced { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsSixWayLightingMaterial() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsSixWayLightingMaterial() Instance {
	return self.Super().AsSixWayLightingMaterial()
}
func (self class) AsMaterial() Material.Advanced {
	return *((*Material.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsMaterial() Material.Instance { return self.Super().AsMaterial() }
func (self Instance) AsMaterial() Material.Instance {
	return *((*Material.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Material.Advanced(self.AsMaterial()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Material.Instance(self.AsMaterial()), name)
	}
}
func init() {
	gdclass.Register("SixWayLightingMaterial", func(ptr gd.Object) any {
		return [1]gdclass.SixWayLightingMaterial{*(*gdclass.SixWayLightingMaterial)(unsafe.Pointer(&ptr))}
	})
}
