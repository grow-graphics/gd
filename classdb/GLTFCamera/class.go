// Code generated by the generate package DO NOT EDIT

// Package GLTFCamera provides methods for working with GLTFCamera object instances.
package GLTFCamera

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Camera3D"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Represents a camera as defined by the base glTF spec.
*/
type Instance [1]gdclass.GLTFCamera

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsGLTFCamera() Instance
}

/*
Create a new GLTFCamera instance from the given Godot [Camera3D] node.
*/
func FromNode(camera_node Camera3D.Instance) Instance { //gd:GLTFCamera.from_node
	self := Instance{}
	return Instance(Advanced(self).FromNode(camera_node))
}

/*
Converts this GLTFCamera instance into a Godot [Camera3D] node.
*/
func (self Instance) ToNode() Camera3D.Instance { //gd:GLTFCamera.to_node
	return Camera3D.Instance(Advanced(self).ToNode())
}

/*
Creates a new GLTFCamera instance by parsing the given [Dictionary].
*/
func FromDictionary(dictionary Structure) Instance { //gd:GLTFCamera.from_dictionary
	self := Instance{}
	return Instance(Advanced(self).FromDictionary(gd.DictionaryFromMap(dictionary)))
}

/*
Serializes this GLTFCamera instance into a [Dictionary].
*/
func (self Instance) ToDictionary() Structure { //gd:GLTFCamera.to_dictionary
	return Structure(gd.DictionaryAs[Structure](Advanced(self).ToDictionary()))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.GLTFCamera

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("GLTFCamera"))
	casted := Instance{*(*gdclass.GLTFCamera)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) Perspective() bool {
	return bool(class(self).GetPerspective())
}

func (self Instance) SetPerspective(value bool) {
	class(self).SetPerspective(value)
}

func (self Instance) Fov() Float.X {
	return Float.X(Float.X(class(self).GetFov()))
}

func (self Instance) SetFov(value Float.X) {
	class(self).SetFov(float64(value))
}

func (self Instance) SizeMag() Float.X {
	return Float.X(Float.X(class(self).GetSizeMag()))
}

func (self Instance) SetSizeMag(value Float.X) {
	class(self).SetSizeMag(float64(value))
}

func (self Instance) DepthFar() Float.X {
	return Float.X(Float.X(class(self).GetDepthFar()))
}

func (self Instance) SetDepthFar(value Float.X) {
	class(self).SetDepthFar(float64(value))
}

func (self Instance) DepthNear() Float.X {
	return Float.X(Float.X(class(self).GetDepthNear()))
}

func (self Instance) SetDepthNear(value Float.X) {
	class(self).SetDepthNear(float64(value))
}

/*
Create a new GLTFCamera instance from the given Godot [Camera3D] node.
*/
//go:nosplit
func (self class) FromNode(camera_node [1]gdclass.Camera3D) [1]gdclass.GLTFCamera { //gd:GLTFCamera.from_node
	var r_ret = gdunsafe.CallStatic[gd.EnginePointer](gd.Global.Methods.GLTFCamera.Bind_from_node, gdextension.SizeObject|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ camera_node gdextension.Object }{gdextension.Object(pointers.Get(camera_node[0])[0])}))
	var ret = [1]gdclass.GLTFCamera{gd.PointerWithOwnershipTransferredToGo[gdclass.GLTFCamera](r_ret)}
	return ret
}

/*
Converts this GLTFCamera instance into a Godot [Camera3D] node.
*/
//go:nosplit
func (self class) ToNode() [1]gdclass.Camera3D { //gd:GLTFCamera.to_node
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.GLTFCamera.Bind_to_node, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Camera3D{gd.PointerWithOwnershipTransferredToGo[gdclass.Camera3D](r_ret)}
	return ret
}

/*
Creates a new GLTFCamera instance by parsing the given [Dictionary].
*/
//go:nosplit
func (self class) FromDictionary(dictionary Dictionary.Any) [1]gdclass.GLTFCamera { //gd:GLTFCamera.from_dictionary
	var r_ret = gdunsafe.CallStatic[gd.EnginePointer](gd.Global.Methods.GLTFCamera.Bind_from_dictionary, gdextension.SizeObject|(gdextension.SizeDictionary<<4), unsafe.Pointer(&struct{ dictionary gdextension.Dictionary }{gdextension.Dictionary(pointers.Get(gd.InternalDictionary(dictionary))[0])}))
	var ret = [1]gdclass.GLTFCamera{gd.PointerWithOwnershipTransferredToGo[gdclass.GLTFCamera](r_ret)}
	return ret
}

/*
Serializes this GLTFCamera instance into a [Dictionary].
*/
//go:nosplit
func (self class) ToDictionary() Dictionary.Any { //gd:GLTFCamera.to_dictionary
	var r_ret = gdunsafe.Call[[1]gd.EnginePointer](self.AsObject(), gd.Global.Methods.GLTFCamera.Bind_to_dictionary, gdextension.SizeDictionary, unsafe.Pointer(&struct{}{}))
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret)))
	return ret
}

//go:nosplit
func (self class) GetPerspective() bool { //gd:GLTFCamera.get_perspective
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.GLTFCamera.Bind_get_perspective, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPerspective(perspective bool) { //gd:GLTFCamera.set_perspective
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GLTFCamera.Bind_set_perspective, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ perspective bool }{perspective}))
}

//go:nosplit
func (self class) GetFov() float64 { //gd:GLTFCamera.get_fov
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.GLTFCamera.Bind_get_fov, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFov(fov float64) { //gd:GLTFCamera.set_fov
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GLTFCamera.Bind_set_fov, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ fov float64 }{fov}))
}

//go:nosplit
func (self class) GetSizeMag() float64 { //gd:GLTFCamera.get_size_mag
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.GLTFCamera.Bind_get_size_mag, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSizeMag(size_mag float64) { //gd:GLTFCamera.set_size_mag
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GLTFCamera.Bind_set_size_mag, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ size_mag float64 }{size_mag}))
}

//go:nosplit
func (self class) GetDepthFar() float64 { //gd:GLTFCamera.get_depth_far
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.GLTFCamera.Bind_get_depth_far, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDepthFar(zdepth_far float64) { //gd:GLTFCamera.set_depth_far
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GLTFCamera.Bind_set_depth_far, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ zdepth_far float64 }{zdepth_far}))
}

//go:nosplit
func (self class) GetDepthNear() float64 { //gd:GLTFCamera.get_depth_near
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.GLTFCamera.Bind_get_depth_near, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDepthNear(zdepth_near float64) { //gd:GLTFCamera.set_depth_near
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.GLTFCamera.Bind_set_depth_near, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ zdepth_near float64 }{zdepth_near}))
}
func (self class) AsGLTFCamera() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsGLTFCamera() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsGLTFCamera() Instance { return self.Super().AsGLTFCamera() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("GLTFCamera", func(ptr gd.Object) any { return [1]gdclass.GLTFCamera{*(*gdclass.GLTFCamera)(unsafe.Pointer(&ptr))} })
}

type Structure map[interface{}]interface{}
