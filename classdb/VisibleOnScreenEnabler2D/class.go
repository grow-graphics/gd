// Code generated by the generate package DO NOT EDIT

// Package VisibleOnScreenEnabler2D provides methods for working with VisibleOnScreenEnabler2D object instances.
package VisibleOnScreenEnabler2D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node2D"
import "graphics.gd/classdb/VisibleOnScreenNotifier2D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[VisibleOnScreenEnabler2D] contains a rectangular region of 2D space and a target node. The target node will be automatically enabled (via its [member Node.process_mode] property) when any part of this region becomes visible on the screen, and automatically disabled otherwise. This can for example be used to activate enemies only when the player approaches them.
See [VisibleOnScreenNotifier2D] if you only want to be notified when the region is visible on screen.
[b]Note:[/b] [VisibleOnScreenEnabler2D] uses the render culling code to determine whether it's visible on screen, so it won't function unless [member CanvasItem.visible] is set to [code]true[/code].
*/
type Instance [1]gdclass.VisibleOnScreenEnabler2D

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsVisibleOnScreenEnabler2D() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.VisibleOnScreenEnabler2D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("VisibleOnScreenEnabler2D"))
	casted := Instance{*(*gdclass.VisibleOnScreenEnabler2D)(unsafe.Pointer(&object))}
	return casted
}

func (self Instance) EnableMode() EnableMode {
	return EnableMode(class(self).GetEnableMode())
}

func (self Instance) SetEnableMode(value EnableMode) {
	class(self).SetEnableMode(value)
}

func (self Instance) EnableNodePath() string {
	return string(class(self).GetEnableNodePath().String())
}

func (self Instance) SetEnableNodePath(value string) {
	class(self).SetEnableNodePath(Path.ToNode(String.New(value)))
}

//go:nosplit
func (self class) SetEnableMode(mode EnableMode) { //gd:VisibleOnScreenEnabler2D.set_enable_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisibleOnScreenEnabler2D.Bind_set_enable_mode), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode EnableMode }{mode}))
}

//go:nosplit
func (self class) GetEnableMode() EnableMode { //gd:VisibleOnScreenEnabler2D.get_enable_mode
	var r_ret = gdextension.Call[EnableMode](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisibleOnScreenEnabler2D.Bind_get_enable_mode), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEnableNodePath(path Path.ToNode) { //gd:VisibleOnScreenEnabler2D.set_enable_node_path
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisibleOnScreenEnabler2D.Bind_set_enable_node_path), 0|(gdextension.SizeNodePath<<4), unsafe.Pointer(&struct{ path gdextension.NodePath }{gdextension.NodePath(pointers.Get(gd.InternalNodePath(path))[0])}))
}

//go:nosplit
func (self class) GetEnableNodePath() Path.ToNode { //gd:VisibleOnScreenEnabler2D.get_enable_node_path
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisibleOnScreenEnabler2D.Bind_get_enable_node_path), gdextension.SizeNodePath, unsafe.Pointer(&struct{}{}))
	var ret = Path.ToNode(String.Via(gd.NodePathProxy{}, pointers.Pack(pointers.New[gd.NodePath](r_ret))))
	return ret
}
func (self class) AsVisibleOnScreenEnabler2D() Advanced { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsVisibleOnScreenEnabler2D() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisibleOnScreenEnabler2D() Instance {
	return self.Super().AsVisibleOnScreenEnabler2D()
}
func (self class) AsVisibleOnScreenNotifier2D() VisibleOnScreenNotifier2D.Advanced {
	return *((*VisibleOnScreenNotifier2D.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisibleOnScreenNotifier2D() VisibleOnScreenNotifier2D.Instance {
	return self.Super().AsVisibleOnScreenNotifier2D()
}
func (self Instance) AsVisibleOnScreenNotifier2D() VisibleOnScreenNotifier2D.Instance {
	return *((*VisibleOnScreenNotifier2D.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode2D() Node2D.Advanced         { return *((*Node2D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode2D() Node2D.Instance { return self.Super().AsNode2D() }
func (self Instance) AsNode2D() Node2D.Instance      { return *((*Node2D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return *((*CanvasItem.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return *((*CanvasItem.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisibleOnScreenNotifier2D.Advanced(self.AsVisibleOnScreenNotifier2D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisibleOnScreenNotifier2D.Instance(self.AsVisibleOnScreenNotifier2D()), name)
	}
}
func init() {
	gdclass.Register("VisibleOnScreenEnabler2D", func(ptr gd.Object) any {
		return [1]gdclass.VisibleOnScreenEnabler2D{*(*gdclass.VisibleOnScreenEnabler2D)(unsafe.Pointer(&ptr))}
	})
}

type EnableMode int //gd:VisibleOnScreenEnabler2D.EnableMode

const (
	/*Corresponds to [constant Node.PROCESS_MODE_INHERIT].*/
	EnableModeInherit EnableMode = 0
	/*Corresponds to [constant Node.PROCESS_MODE_ALWAYS].*/
	EnableModeAlways EnableMode = 1
	/*Corresponds to [constant Node.PROCESS_MODE_WHEN_PAUSED].*/
	EnableModeWhenPaused EnableMode = 2
)
