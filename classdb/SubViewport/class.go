// Code generated by the generate package DO NOT EDIT

// Package SubViewport provides methods for working with SubViewport object instances.
package SubViewport

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Viewport"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2i"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[SubViewport] Isolates a rectangular region of a scene to be displayed independently. This can be used, for example, to display UI in 3D space.
[b]Note:[/b] [SubViewport] is a [Viewport] that isn't a [Window], i.e. it doesn't draw anything by itself. To display anything, [SubViewport] must have a non-zero size and be either put inside a [SubViewportContainer] or assigned to a [ViewportTexture].
[b]Note:[/b] [InputEvent]s are not passed to a standalone [SubViewport] by default. To ensure [InputEvent] propagation, a [SubViewport] can be placed inside of a [SubViewportContainer].
*/
type Instance [1]gdclass.SubViewport

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_size                            gdextension.MethodForClass `hash:"1130785943"`
	get_size                            gdextension.MethodForClass `hash:"3690982128"`
	set_size_2d_override                gdextension.MethodForClass `hash:"1130785943"`
	get_size_2d_override                gdextension.MethodForClass `hash:"3690982128"`
	set_size_2d_override_stretch        gdextension.MethodForClass `hash:"2586408642"`
	is_size_2d_override_stretch_enabled gdextension.MethodForClass `hash:"36873697"`
	set_update_mode                     gdextension.MethodForClass `hash:"1295690030"`
	get_update_mode                     gdextension.MethodForClass `hash:"2980171553"`
	set_clear_mode                      gdextension.MethodForClass `hash:"2834454712"`
	get_clear_mode                      gdextension.MethodForClass `hash:"331324495"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("SubViewport")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsSubViewport() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.SubViewport

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.SubViewport](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.SubViewport](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.SubViewport{pointers.Add[gdclass.SubViewport]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.SubViewport{pointers.New[gdclass.SubViewport]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Size() Vector2i.XY {
	return Vector2i.XY(class(self).GetSize())
}

func (self Instance) SetSize(value Vector2i.XY) {
	class(self).SetSize(Vector2i.XY(value))
}

func (self Instance) Size2dOverride() Vector2i.XY {
	return Vector2i.XY(class(self).GetSize2dOverride())
}

func (self Instance) SetSize2dOverride(value Vector2i.XY) {
	class(self).SetSize2dOverride(Vector2i.XY(value))
}

func (self Instance) Size2dOverrideStretch() bool {
	return bool(class(self).IsSize2dOverrideStretchEnabled())
}

func (self Instance) SetSize2dOverrideStretch(value bool) {
	class(self).SetSize2dOverrideStretch(value)
}

func (self Instance) RenderTargetClearMode() ClearMode {
	return ClearMode(class(self).GetClearMode())
}

func (self Instance) SetRenderTargetClearMode(value ClearMode) {
	class(self).SetClearMode(value)
}

func (self Instance) RenderTargetUpdateMode() UpdateMode {
	return UpdateMode(class(self).GetUpdateMode())
}

func (self Instance) SetRenderTargetUpdateMode(value UpdateMode) {
	class(self).SetUpdateMode(value)
}

//go:nosplit
func (self class) SetSize(size Vector2i.XY) { //gd:SubViewport.set_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_size, 0|(gdextension.SizeVector2i<<4), &struct{ size Vector2i.XY }{size})
}

//go:nosplit
func (self class) GetSize() Vector2i.XY { //gd:SubViewport.get_size
	var r_ret = gdextension.Call[Vector2i.XY](gd.ObjectChecked(self.AsObject()), methods.get_size, gdextension.SizeVector2i, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSize2dOverride(size Vector2i.XY) { //gd:SubViewport.set_size_2d_override
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_size_2d_override, 0|(gdextension.SizeVector2i<<4), &struct{ size Vector2i.XY }{size})
}

//go:nosplit
func (self class) GetSize2dOverride() Vector2i.XY { //gd:SubViewport.get_size_2d_override
	var r_ret = gdextension.Call[Vector2i.XY](gd.ObjectChecked(self.AsObject()), methods.get_size_2d_override, gdextension.SizeVector2i, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSize2dOverrideStretch(enable bool) { //gd:SubViewport.set_size_2d_override_stretch
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_size_2d_override_stretch, 0|(gdextension.SizeBool<<4), &struct{ enable bool }{enable})
}

//go:nosplit
func (self class) IsSize2dOverrideStretchEnabled() bool { //gd:SubViewport.is_size_2d_override_stretch_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_size_2d_override_stretch_enabled, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetUpdateMode(mode UpdateMode) { //gd:SubViewport.set_update_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_update_mode, 0|(gdextension.SizeInt<<4), &struct{ mode UpdateMode }{mode})
}

//go:nosplit
func (self class) GetUpdateMode() UpdateMode { //gd:SubViewport.get_update_mode
	var r_ret = gdextension.Call[UpdateMode](gd.ObjectChecked(self.AsObject()), methods.get_update_mode, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetClearMode(mode ClearMode) { //gd:SubViewport.set_clear_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_clear_mode, 0|(gdextension.SizeInt<<4), &struct{ mode ClearMode }{mode})
}

//go:nosplit
func (self class) GetClearMode() ClearMode { //gd:SubViewport.get_clear_mode
	var r_ret = gdextension.Call[ClearMode](gd.ObjectChecked(self.AsObject()), methods.get_clear_mode, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsSubViewport() Advanced {
	return Advanced{pointers.AsA[gdclass.SubViewport](self[0])}
}
func (self Instance) AsSubViewport() Instance {
	return Instance{pointers.AsA[gdclass.SubViewport](self[0])}
}
func (self *Extension[T]) AsSubViewport() Instance { return self.Super().AsSubViewport() }
func (self class) AsViewport() Viewport.Advanced {
	return Viewport.Advanced{pointers.AsA[gdclass.Viewport](self[0])}
}
func (self *Extension[T]) AsViewport() Viewport.Instance { return self.Super().AsViewport() }
func (self Instance) AsViewport() Viewport.Instance {
	return Viewport.Instance{pointers.AsA[gdclass.Viewport](self[0])}
}
func (self class) AsNode() Node.Advanced         { return Node.Advanced{pointers.AsA[gdclass.Node](self[0])} }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance {
	return Node.Instance{pointers.AsA[gdclass.Node](self[0])}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Viewport.Advanced(self.AsViewport()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Viewport.Instance(self.AsViewport()), name)
	}
}
func init() {
	gdclass.Register("SubViewport", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.SubViewport](ptr)} })
}

type ClearMode int //gd:SubViewport.ClearMode

const (
	/*Always clear the render target before drawing.*/
	ClearModeAlways ClearMode = 0
	/*Never clear the render target.*/
	ClearModeNever ClearMode = 1
	/*Clear the render target on the next frame, then switch to [constant CLEAR_MODE_NEVER].*/
	ClearModeOnce ClearMode = 2
)

type UpdateMode int //gd:SubViewport.UpdateMode

const (
	/*Do not update the render target.*/
	UpdateDisabled UpdateMode = 0
	/*Update the render target once, then switch to [constant UPDATE_DISABLED].*/
	UpdateOnce UpdateMode = 1
	/*Update the render target only when it is visible. This is the default value.*/
	UpdateWhenVisible UpdateMode = 2
	/*Update the render target only when its parent is visible.*/
	UpdateWhenParentVisible UpdateMode = 3
	/*Always update the render target.*/
	UpdateAlways UpdateMode = 4
)
