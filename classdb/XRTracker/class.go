// Code generated by the generate package DO NOT EDIT

// Package XRTracker provides methods for working with XRTracker object instances.
package XRTracker

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This object is the base of all XR trackers.
*/
type Instance [1]gdclass.XRTracker

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_tracker_type gdextension.MethodForClass `hash:"2784508102"`
	set_tracker_type gdextension.MethodForClass `hash:"3055763575"`
	get_tracker_name gdextension.MethodForClass `hash:"2002593661"`
	set_tracker_name gdextension.MethodForClass `hash:"3304788590"`
	get_tracker_desc gdextension.MethodForClass `hash:"201670096"`
	set_tracker_desc gdextension.MethodForClass `hash:"83702148"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("XRTracker")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsXRTracker() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.XRTracker

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.XRTracker)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.XRTracker)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.XRTracker)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) Type() Type {
	return Type(class(self).GetTrackerType())
}

func (self Instance) SetType(value Type) {
	class(self).SetTrackerType(value)
}

func (self Instance) Name() string {
	return string(class(self).GetTrackerName().String())
}

func (self Instance) SetName(value string) {
	class(self).SetTrackerName(String.Name(String.New(value)))
}

func (self Instance) Description() string {
	return string(class(self).GetTrackerDesc().String())
}

func (self Instance) SetDescription(value string) {
	class(self).SetTrackerDesc(String.New(value))
}

//go:nosplit
func (self class) GetTrackerType() Type { //gd:XRTracker.get_tracker_type
	var r_ret = gdextension.Call[Type](gd.ObjectChecked(self.AsObject()), methods.get_tracker_type, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTrackerType(atype Type) { //gd:XRTracker.set_tracker_type
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_tracker_type, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ atype Type }{atype}))
}

//go:nosplit
func (self class) GetTrackerName() String.Name { //gd:XRTracker.get_tracker_name
	var r_ret = gdextension.Call[gdextension.StringName](gd.ObjectChecked(self.AsObject()), methods.get_tracker_name, gdextension.SizeStringName, unsafe.Pointer(&struct{}{}))
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetTrackerName(name String.Name) { //gd:XRTracker.set_tracker_name
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_tracker_name, 0|(gdextension.SizeStringName<<4), unsafe.Pointer(&struct{ name gdextension.StringName }{pointers.Get(gd.InternalStringName(name))}))
}

//go:nosplit
func (self class) GetTrackerDesc() String.Readable { //gd:XRTracker.get_tracker_desc
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_tracker_desc, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetTrackerDesc(description String.Readable) { //gd:XRTracker.set_tracker_desc
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_tracker_desc, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ description gdextension.String }{pointers.Get(gd.InternalString(description))}))
}
func (self class) AsXRTracker() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsXRTracker() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsXRTracker() Instance { return self.Super().AsXRTracker() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("XRTracker", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type Type int //gd:XRServer.TrackerType

const (
	/*The tracker tracks the location of the players head. This is usually a location centered between the players eyes. Note that for handheld AR devices this can be the current location of the device.*/
	TrackerHead Type = 1
	/*The tracker tracks the location of a controller.*/
	TrackerController Type = 2
	/*The tracker tracks the location of a base station.*/
	TrackerBasestation Type = 4
	/*The tracker tracks the location and size of an AR anchor.*/
	TrackerAnchor Type = 8
	/*The tracker tracks the location and joints of a hand.*/
	TrackerHand Type = 16
	/*The tracker tracks the location and joints of a body.*/
	TrackerBody Type = 32
	/*The tracker tracks the expressions of a face.*/
	TrackerFace Type = 64
	/*Used internally to filter trackers of any known type.*/
	TrackerAnyKnown Type = 127
	/*Used internally if we haven't set the tracker type yet.*/
	TrackerUnknown Type = 128
	/*Used internally to select all trackers.*/
	TrackerAny Type = 255
)
