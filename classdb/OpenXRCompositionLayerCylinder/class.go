// Code generated by the generate package DO NOT EDIT

// Package OpenXRCompositionLayerCylinder provides methods for working with OpenXRCompositionLayerCylinder object instances.
package OpenXRCompositionLayerCylinder

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/classdb/OpenXRCompositionLayer"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
An OpenXR composition layer that allows rendering a [SubViewport] on an internal slice of a cylinder.
*/
type Instance [1]gdclass.OpenXRCompositionLayerCylinder

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_radius            gdextension.MethodForClass `hash:"373806689"`
	get_radius            gdextension.MethodForClass `hash:"1740695150"`
	set_aspect_ratio      gdextension.MethodForClass `hash:"373806689"`
	get_aspect_ratio      gdextension.MethodForClass `hash:"1740695150"`
	set_central_angle     gdextension.MethodForClass `hash:"373806689"`
	get_central_angle     gdextension.MethodForClass `hash:"1740695150"`
	set_fallback_segments gdextension.MethodForClass `hash:"1286410249"`
	get_fallback_segments gdextension.MethodForClass `hash:"3905245786"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("OpenXRCompositionLayerCylinder")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsOpenXRCompositionLayerCylinder() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.OpenXRCompositionLayerCylinder

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.OpenXRCompositionLayerCylinder](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.OpenXRCompositionLayerCylinder](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.OpenXRCompositionLayerCylinder{pointers.Add[gdclass.OpenXRCompositionLayerCylinder]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.OpenXRCompositionLayerCylinder{pointers.New[gdclass.OpenXRCompositionLayerCylinder]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Radius() Float.X {
	return Float.X(Float.X(class(self).GetRadius()))
}

func (self Instance) SetRadius(value Float.X) {
	class(self).SetRadius(float64(value))
}

func (self Instance) AspectRatio() Float.X {
	return Float.X(Float.X(class(self).GetAspectRatio()))
}

func (self Instance) SetAspectRatio(value Float.X) {
	class(self).SetAspectRatio(float64(value))
}

func (self Instance) CentralAngle() Angle.Radians {
	return Angle.Radians(Float.X(class(self).GetCentralAngle()))
}

func (self Instance) SetCentralAngle(value Angle.Radians) {
	class(self).SetCentralAngle(float64(value))
}

func (self Instance) FallbackSegments() int {
	return int(int(class(self).GetFallbackSegments()))
}

func (self Instance) SetFallbackSegments(value int) {
	class(self).SetFallbackSegments(int64(value))
}

//go:nosplit
func (self class) SetRadius(radius float64) { //gd:OpenXRCompositionLayerCylinder.set_radius
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_radius, 0|(gdextension.SizeFloat<<4), &struct{ radius float64 }{radius})
}

//go:nosplit
func (self class) GetRadius() float64 { //gd:OpenXRCompositionLayerCylinder.get_radius
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_radius, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAspectRatio(aspect_ratio float64) { //gd:OpenXRCompositionLayerCylinder.set_aspect_ratio
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_aspect_ratio, 0|(gdextension.SizeFloat<<4), &struct{ aspect_ratio float64 }{aspect_ratio})
}

//go:nosplit
func (self class) GetAspectRatio() float64 { //gd:OpenXRCompositionLayerCylinder.get_aspect_ratio
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_aspect_ratio, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCentralAngle(angle float64) { //gd:OpenXRCompositionLayerCylinder.set_central_angle
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_central_angle, 0|(gdextension.SizeFloat<<4), &struct{ angle float64 }{angle})
}

//go:nosplit
func (self class) GetCentralAngle() float64 { //gd:OpenXRCompositionLayerCylinder.get_central_angle
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_central_angle, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFallbackSegments(segments int64) { //gd:OpenXRCompositionLayerCylinder.set_fallback_segments
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_fallback_segments, 0|(gdextension.SizeInt<<4), &struct{ segments int64 }{segments})
}

//go:nosplit
func (self class) GetFallbackSegments() int64 { //gd:OpenXRCompositionLayerCylinder.get_fallback_segments
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_fallback_segments, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsOpenXRCompositionLayerCylinder() Advanced {
	return Advanced{pointers.AsA[gdclass.OpenXRCompositionLayerCylinder](self[0])}
}
func (self Instance) AsOpenXRCompositionLayerCylinder() Instance {
	return Instance{pointers.AsA[gdclass.OpenXRCompositionLayerCylinder](self[0])}
}
func (self *Extension[T]) AsOpenXRCompositionLayerCylinder() Instance {
	return self.Super().AsOpenXRCompositionLayerCylinder()
}
func (self class) AsOpenXRCompositionLayer() OpenXRCompositionLayer.Advanced {
	return OpenXRCompositionLayer.Advanced{pointers.AsA[gdclass.OpenXRCompositionLayer](self[0])}
}
func (self *Extension[T]) AsOpenXRCompositionLayer() OpenXRCompositionLayer.Instance {
	return self.Super().AsOpenXRCompositionLayer()
}
func (self Instance) AsOpenXRCompositionLayer() OpenXRCompositionLayer.Instance {
	return OpenXRCompositionLayer.Instance{pointers.AsA[gdclass.OpenXRCompositionLayer](self[0])}
}
func (self class) AsNode3D() Node3D.Advanced {
	return Node3D.Advanced{pointers.AsA[gdclass.Node3D](self[0])}
}
func (self *Extension[T]) AsNode3D() Node3D.Instance { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance {
	return Node3D.Instance{pointers.AsA[gdclass.Node3D](self[0])}
}
func (self class) AsNode() Node.Advanced         { return Node.Advanced{pointers.AsA[gdclass.Node](self[0])} }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance {
	return Node.Instance{pointers.AsA[gdclass.Node](self[0])}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(OpenXRCompositionLayer.Advanced(self.AsOpenXRCompositionLayer()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(OpenXRCompositionLayer.Instance(self.AsOpenXRCompositionLayer()), name)
	}
}
func init() {
	gdclass.Register("OpenXRCompositionLayerCylinder", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.OpenXRCompositionLayerCylinder](ptr)} })
}
