// Code generated by the generate package DO NOT EDIT

// Package InputEventPanGesture provides methods for working with InputEventPanGesture object instances.
package InputEventPanGesture

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/InputEvent"
import "graphics.gd/classdb/InputEventFromWindow"
import "graphics.gd/classdb/InputEventGesture"
import "graphics.gd/classdb/InputEventWithModifiers"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Stores information about pan gestures. A pan gesture is performed when the user swipes the touch screen with two fingers. It's typically used for panning/scrolling.
[b]Note:[/b] On Android, this requires the [member ProjectSettings.input_devices/pointing/android/enable_pan_and_scale_gestures] project setting to be enabled.
*/
type Instance [1]gdclass.InputEventPanGesture

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_delta gdextension.MethodForClass `hash:"743155724"`
	get_delta gdextension.MethodForClass `hash:"3341600327"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("InputEventPanGesture")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsInputEventPanGesture() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.InputEventPanGesture

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.InputEventPanGesture](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.InputEventPanGesture](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.InputEventPanGesture{pointers.Add[gdclass.InputEventPanGesture]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.InputEventPanGesture{pointers.New[gdclass.InputEventPanGesture]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Delta() Vector2.XY {
	return Vector2.XY(class(self).GetDelta())
}

func (self Instance) SetDelta(value Vector2.XY) {
	class(self).SetDelta(Vector2.XY(value))
}

//go:nosplit
func (self class) SetDelta(delta Vector2.XY) { //gd:InputEventPanGesture.set_delta
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_delta, 0|(gdextension.SizeVector2<<4), &struct{ delta Vector2.XY }{delta})
}

//go:nosplit
func (self class) GetDelta() Vector2.XY { //gd:InputEventPanGesture.get_delta
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_delta, gdextension.SizeVector2, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsInputEventPanGesture() Advanced {
	return Advanced{pointers.AsA[gdclass.InputEventPanGesture](self[0])}
}
func (self Instance) AsInputEventPanGesture() Instance {
	return Instance{pointers.AsA[gdclass.InputEventPanGesture](self[0])}
}
func (self *Extension[T]) AsInputEventPanGesture() Instance {
	return self.Super().AsInputEventPanGesture()
}
func (self class) AsInputEventGesture() InputEventGesture.Advanced {
	return InputEventGesture.Advanced{pointers.AsA[gdclass.InputEventGesture](self[0])}
}
func (self *Extension[T]) AsInputEventGesture() InputEventGesture.Instance {
	return self.Super().AsInputEventGesture()
}
func (self Instance) AsInputEventGesture() InputEventGesture.Instance {
	return InputEventGesture.Instance{pointers.AsA[gdclass.InputEventGesture](self[0])}
}
func (self class) AsInputEventWithModifiers() InputEventWithModifiers.Advanced {
	return InputEventWithModifiers.Advanced{pointers.AsA[gdclass.InputEventWithModifiers](self[0])}
}
func (self *Extension[T]) AsInputEventWithModifiers() InputEventWithModifiers.Instance {
	return self.Super().AsInputEventWithModifiers()
}
func (self Instance) AsInputEventWithModifiers() InputEventWithModifiers.Instance {
	return InputEventWithModifiers.Instance{pointers.AsA[gdclass.InputEventWithModifiers](self[0])}
}
func (self class) AsInputEventFromWindow() InputEventFromWindow.Advanced {
	return InputEventFromWindow.Advanced{pointers.AsA[gdclass.InputEventFromWindow](self[0])}
}
func (self *Extension[T]) AsInputEventFromWindow() InputEventFromWindow.Instance {
	return self.Super().AsInputEventFromWindow()
}
func (self Instance) AsInputEventFromWindow() InputEventFromWindow.Instance {
	return InputEventFromWindow.Instance{pointers.AsA[gdclass.InputEventFromWindow](self[0])}
}
func (self class) AsInputEvent() InputEvent.Advanced {
	return InputEvent.Advanced{pointers.AsA[gdclass.InputEvent](self[0])}
}
func (self *Extension[T]) AsInputEvent() InputEvent.Instance { return self.Super().AsInputEvent() }
func (self Instance) AsInputEvent() InputEvent.Instance {
	return InputEvent.Instance{pointers.AsA[gdclass.InputEvent](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(InputEventGesture.Advanced(self.AsInputEventGesture()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(InputEventGesture.Instance(self.AsInputEventGesture()), name)
	}
}
func init() {
	gdclass.Register("InputEventPanGesture", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.InputEventPanGesture](ptr)} })
}
