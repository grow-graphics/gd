// Code generated by the generate package DO NOT EDIT

// Package GLTFSkin provides methods for working with GLTFSkin object instances.
package GLTFSkin

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/Skin"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Transform3D"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }
type Instance [1]gdclass.GLTFSkin

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsGLTFSkin() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.GLTFSkin

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("GLTFSkin"))
	casted := Instance{*(*gdclass.GLTFSkin)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) SkinRoot() int {
	return int(int(class(self).GetSkinRoot()))
}

func (self Instance) SetSkinRoot(value int) {
	class(self).SetSkinRoot(int64(value))
}

func (self Instance) JointsOriginal() []int32 {
	return []int32(slices.Collect(class(self).GetJointsOriginal().Values()))
}

func (self Instance) SetJointsOriginal(value []int32) {
	class(self).SetJointsOriginal(Packed.New(value...))
}

func (self Instance) InverseBinds() []Transform3D.BasisOrigin {
	return []Transform3D.BasisOrigin(gd.ArrayAs[[]Transform3D.BasisOrigin](gd.InternalArray(class(self).GetInverseBinds())))
}

func (self Instance) SetInverseBinds(value []Transform3D.BasisOrigin) {
	class(self).SetInverseBinds(gd.ArrayFromSlice[Array.Contains[Transform3D.BasisOrigin]](value))
}

func (self Instance) Joints() []int32 {
	return []int32(slices.Collect(class(self).GetJoints().Values()))
}

func (self Instance) SetJoints(value []int32) {
	class(self).SetJoints(Packed.New(value...))
}

func (self Instance) NonJoints() []int32 {
	return []int32(slices.Collect(class(self).GetNonJoints().Values()))
}

func (self Instance) SetNonJoints(value []int32) {
	class(self).SetNonJoints(Packed.New(value...))
}

func (self Instance) Roots() []int32 {
	return []int32(slices.Collect(class(self).GetRoots().Values()))
}

func (self Instance) SetRoots(value []int32) {
	class(self).SetRoots(Packed.New(value...))
}

func (self Instance) Skeleton() int {
	return int(int(class(self).GetSkeleton()))
}

func (self Instance) SetSkeleton(value int) {
	class(self).SetSkeleton(int64(value))
}

func (self Instance) JointIToBoneI() map[any]any {
	return map[any]any(gd.DictionaryAs[map[any]any](class(self).GetJointIToBoneI()))
}

func (self Instance) SetJointIToBoneI(value map[any]any) {
	class(self).SetJointIToBoneI(gd.DictionaryFromMap(value))
}

func (self Instance) JointIToName() map[any]any {
	return map[any]any(gd.DictionaryAs[map[any]any](class(self).GetJointIToName()))
}

func (self Instance) SetJointIToName(value map[any]any) {
	class(self).SetJointIToName(gd.DictionaryFromMap(value))
}

func (self Instance) GodotSkin() Skin.Instance {
	return Skin.Instance(class(self).GetGodotSkin())
}

func (self Instance) SetGodotSkin(value Skin.Instance) {
	class(self).SetGodotSkin(value)
}

//go:nosplit
func (self class) GetSkinRoot() int64 { //gd:GLTFSkin.get_skin_root
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_get_skin_root), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSkinRoot(skin_root int64) { //gd:GLTFSkin.set_skin_root
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_set_skin_root), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ skin_root int64 }{skin_root}))
}

//go:nosplit
func (self class) GetJointsOriginal() Packed.Array[int32] { //gd:GLTFSkin.get_joints_original
	var r_ret = gdextension.Call[gd.PackedPointers](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_get_joints_original), gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Array[int32](Array.Through(gd.PackedProxy[gd.PackedInt32Array, int32]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetJointsOriginal(joints_original Packed.Array[int32]) { //gd:GLTFSkin.set_joints_original
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_set_joints_original), 0|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ joints_original gdextension.PackedArray }{gdextension.ToPackedArray(pointers.Get(gd.InternalPacked[gd.PackedInt32Array, int32](joints_original)))}))
}

//go:nosplit
func (self class) GetInverseBinds() Array.Contains[Transform3D.BasisOrigin] { //gd:GLTFSkin.get_inverse_binds
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_get_inverse_binds), gdextension.SizeArray, unsafe.Pointer(&struct{}{}))
	var ret = Array.Through(gd.ArrayProxy[Transform3D.BasisOrigin]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetInverseBinds(inverse_binds Array.Contains[Transform3D.BasisOrigin]) { //gd:GLTFSkin.set_inverse_binds
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_set_inverse_binds), 0|(gdextension.SizeArray<<4), unsafe.Pointer(&struct{ inverse_binds gdextension.Array }{gdextension.Array(pointers.Get(gd.InternalArray(inverse_binds))[0])}))
}

//go:nosplit
func (self class) GetJoints() Packed.Array[int32] { //gd:GLTFSkin.get_joints
	var r_ret = gdextension.Call[gd.PackedPointers](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_get_joints), gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Array[int32](Array.Through(gd.PackedProxy[gd.PackedInt32Array, int32]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetJoints(joints Packed.Array[int32]) { //gd:GLTFSkin.set_joints
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_set_joints), 0|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ joints gdextension.PackedArray }{gdextension.ToPackedArray(pointers.Get(gd.InternalPacked[gd.PackedInt32Array, int32](joints)))}))
}

//go:nosplit
func (self class) GetNonJoints() Packed.Array[int32] { //gd:GLTFSkin.get_non_joints
	var r_ret = gdextension.Call[gd.PackedPointers](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_get_non_joints), gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Array[int32](Array.Through(gd.PackedProxy[gd.PackedInt32Array, int32]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetNonJoints(non_joints Packed.Array[int32]) { //gd:GLTFSkin.set_non_joints
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_set_non_joints), 0|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ non_joints gdextension.PackedArray }{gdextension.ToPackedArray(pointers.Get(gd.InternalPacked[gd.PackedInt32Array, int32](non_joints)))}))
}

//go:nosplit
func (self class) GetRoots() Packed.Array[int32] { //gd:GLTFSkin.get_roots
	var r_ret = gdextension.Call[gd.PackedPointers](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_get_roots), gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Array[int32](Array.Through(gd.PackedProxy[gd.PackedInt32Array, int32]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetRoots(roots Packed.Array[int32]) { //gd:GLTFSkin.set_roots
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_set_roots), 0|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ roots gdextension.PackedArray }{gdextension.ToPackedArray(pointers.Get(gd.InternalPacked[gd.PackedInt32Array, int32](roots)))}))
}

//go:nosplit
func (self class) GetSkeleton() int64 { //gd:GLTFSkin.get_skeleton
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_get_skeleton), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSkeleton(skeleton int64) { //gd:GLTFSkin.set_skeleton
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_set_skeleton), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ skeleton int64 }{skeleton}))
}

//go:nosplit
func (self class) GetJointIToBoneI() Dictionary.Any { //gd:GLTFSkin.get_joint_i_to_bone_i
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_get_joint_i_to_bone_i), gdextension.SizeDictionary, unsafe.Pointer(&struct{}{}))
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetJointIToBoneI(joint_i_to_bone_i Dictionary.Any) { //gd:GLTFSkin.set_joint_i_to_bone_i
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_set_joint_i_to_bone_i), 0|(gdextension.SizeDictionary<<4), unsafe.Pointer(&struct{ joint_i_to_bone_i gdextension.Dictionary }{gdextension.Dictionary(pointers.Get(gd.InternalDictionary(joint_i_to_bone_i))[0])}))
}

//go:nosplit
func (self class) GetJointIToName() Dictionary.Any { //gd:GLTFSkin.get_joint_i_to_name
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_get_joint_i_to_name), gdextension.SizeDictionary, unsafe.Pointer(&struct{}{}))
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetJointIToName(joint_i_to_name Dictionary.Any) { //gd:GLTFSkin.set_joint_i_to_name
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_set_joint_i_to_name), 0|(gdextension.SizeDictionary<<4), unsafe.Pointer(&struct{ joint_i_to_name gdextension.Dictionary }{gdextension.Dictionary(pointers.Get(gd.InternalDictionary(joint_i_to_name))[0])}))
}

//go:nosplit
func (self class) GetGodotSkin() [1]gdclass.Skin { //gd:GLTFSkin.get_godot_skin
	var r_ret = gdextension.Call[gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_get_godot_skin), gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Skin{gd.PointerWithOwnershipTransferredToGo[gdclass.Skin](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetGodotSkin(godot_skin [1]gdclass.Skin) { //gd:GLTFSkin.set_godot_skin
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.GLTFSkin.Bind_set_godot_skin), 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ godot_skin gdextension.Object }{gdextension.Object(gd.ObjectChecked(godot_skin[0].AsObject()))}))
}
func (self class) AsGLTFSkin() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsGLTFSkin() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsGLTFSkin() Instance { return self.Super().AsGLTFSkin() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("GLTFSkin", func(ptr gd.Object) any { return [1]gdclass.GLTFSkin{*(*gdclass.GLTFSkin)(unsafe.Pointer(&ptr))} })
}
