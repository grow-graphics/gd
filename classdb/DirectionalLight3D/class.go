// Code generated by the generate package DO NOT EDIT

// Package DirectionalLight3D provides methods for working with DirectionalLight3D object instances.
package DirectionalLight3D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Light3D"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/classdb/VisualInstance3D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A directional light is a type of [Light3D] node that models an infinite number of parallel rays covering the entire scene. It is used for lights with strong intensity that are located far away from the scene to model sunlight or moonlight. The worldspace location of the DirectionalLight3D transform (origin) is ignored. Only the basis is used to determine light direction.
*/
type Instance [1]gdclass.DirectionalLight3D

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_shadow_mode         gdextension.MethodForClass `hash:"1261211726"`
	get_shadow_mode         gdextension.MethodForClass `hash:"2765228544"`
	set_blend_splits        gdextension.MethodForClass `hash:"2586408642"`
	is_blend_splits_enabled gdextension.MethodForClass `hash:"36873697"`
	set_sky_mode            gdextension.MethodForClass `hash:"2691194817"`
	get_sky_mode            gdextension.MethodForClass `hash:"3819982774"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("DirectionalLight3D")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsDirectionalLight3D() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.DirectionalLight3D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.DirectionalLight3D](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.DirectionalLight3D](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.DirectionalLight3D{pointers.Add[gdclass.DirectionalLight3D]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.DirectionalLight3D{pointers.New[gdclass.DirectionalLight3D]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) DirectionalShadowMode() ShadowMode {
	return ShadowMode(class(self).GetShadowMode())
}

func (self Instance) SetDirectionalShadowMode(value ShadowMode) {
	class(self).SetShadowMode(value)
}

func (self Instance) DirectionalShadowBlendSplits() bool {
	return bool(class(self).IsBlendSplitsEnabled())
}

func (self Instance) SetDirectionalShadowBlendSplits(value bool) {
	class(self).SetBlendSplits(value)
}

func (self Instance) SkyMode() SkyMode {
	return SkyMode(class(self).GetSkyMode())
}

func (self Instance) SetSkyMode(value SkyMode) {
	class(self).SetSkyMode(value)
}

//go:nosplit
func (self class) SetShadowMode(mode ShadowMode) { //gd:DirectionalLight3D.set_shadow_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_shadow_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode ShadowMode }{mode}))
}

//go:nosplit
func (self class) GetShadowMode() ShadowMode { //gd:DirectionalLight3D.get_shadow_mode
	var r_ret = gdextension.Call[ShadowMode](gd.ObjectChecked(self.AsObject()), methods.get_shadow_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBlendSplits(enabled bool) { //gd:DirectionalLight3D.set_blend_splits
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_blend_splits, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsBlendSplitsEnabled() bool { //gd:DirectionalLight3D.is_blend_splits_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_blend_splits_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSkyMode(mode SkyMode) { //gd:DirectionalLight3D.set_sky_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_sky_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode SkyMode }{mode}))
}

//go:nosplit
func (self class) GetSkyMode() SkyMode { //gd:DirectionalLight3D.get_sky_mode
	var r_ret = gdextension.Call[SkyMode](gd.ObjectChecked(self.AsObject()), methods.get_sky_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsDirectionalLight3D() Advanced {
	return Advanced{pointers.AsA[gdclass.DirectionalLight3D](self[0])}
}
func (self Instance) AsDirectionalLight3D() Instance {
	return Instance{pointers.AsA[gdclass.DirectionalLight3D](self[0])}
}
func (self *Extension[T]) AsDirectionalLight3D() Instance { return self.Super().AsDirectionalLight3D() }
func (self class) AsLight3D() Light3D.Advanced {
	return Light3D.Advanced{pointers.AsA[gdclass.Light3D](self[0])}
}
func (self *Extension[T]) AsLight3D() Light3D.Instance { return self.Super().AsLight3D() }
func (self Instance) AsLight3D() Light3D.Instance {
	return Light3D.Instance{pointers.AsA[gdclass.Light3D](self[0])}
}
func (self class) AsVisualInstance3D() VisualInstance3D.Advanced {
	return VisualInstance3D.Advanced{pointers.AsA[gdclass.VisualInstance3D](self[0])}
}
func (self *Extension[T]) AsVisualInstance3D() VisualInstance3D.Instance {
	return self.Super().AsVisualInstance3D()
}
func (self Instance) AsVisualInstance3D() VisualInstance3D.Instance {
	return VisualInstance3D.Instance{pointers.AsA[gdclass.VisualInstance3D](self[0])}
}
func (self class) AsNode3D() Node3D.Advanced {
	return Node3D.Advanced{pointers.AsA[gdclass.Node3D](self[0])}
}
func (self *Extension[T]) AsNode3D() Node3D.Instance { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance {
	return Node3D.Instance{pointers.AsA[gdclass.Node3D](self[0])}
}
func (self class) AsNode() Node.Advanced         { return Node.Advanced{pointers.AsA[gdclass.Node](self[0])} }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance {
	return Node.Instance{pointers.AsA[gdclass.Node](self[0])}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Light3D.Advanced(self.AsLight3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Light3D.Instance(self.AsLight3D()), name)
	}
}
func init() {
	gdclass.Register("DirectionalLight3D", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.DirectionalLight3D](ptr)} })
}

type ShadowMode int //gd:DirectionalLight3D.ShadowMode

const (
	/*Renders the entire scene's shadow map from an orthogonal point of view. This is the fastest directional shadow mode. May result in blurrier shadows on close objects.*/
	ShadowOrthogonal ShadowMode = 0
	/*Splits the view frustum in 2 areas, each with its own shadow map. This shadow mode is a compromise between [constant SHADOW_ORTHOGONAL] and [constant SHADOW_PARALLEL_4_SPLITS] in terms of performance.*/
	ShadowParallel2Splits ShadowMode = 1
	/*Splits the view frustum in 4 areas, each with its own shadow map. This is the slowest directional shadow mode.*/
	ShadowParallel4Splits ShadowMode = 2
)

type SkyMode int //gd:DirectionalLight3D.SkyMode

const (
	/*Makes the light visible in both scene lighting and sky rendering.*/
	SkyModeLightAndSky SkyMode = 0
	/*Makes the light visible in scene lighting only (including direct lighting and global illumination). When using this mode, the light will not be visible from sky shaders.*/
	SkyModeLightOnly SkyMode = 1
	/*Makes the light visible to sky shaders only. When using this mode the light will not cast light into the scene (either through direct lighting or through global illumination), but can be accessed through sky shaders. This can be useful, for example, when you want to control sky effects without illuminating the scene (during a night cycle, for example).*/
	SkyModeSkyOnly SkyMode = 2
)
