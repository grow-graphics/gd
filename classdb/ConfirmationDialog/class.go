// Code generated by the generate package DO NOT EDIT

// Package ConfirmationDialog provides methods for working with ConfirmationDialog object instances.
package ConfirmationDialog

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/AcceptDialog"
import "graphics.gd/classdb/Button"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Viewport"
import "graphics.gd/classdb/Window"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A dialog used for confirmation of actions. This window is similar to [AcceptDialog], but pressing its Cancel button can have a different outcome from pressing the OK button. The order of the two buttons varies depending on the host OS.
To get cancel action, you can use:
[codeblocks]
[gdscript]
get_cancel_button().pressed.connect(_on_canceled)
[/gdscript]
[csharp]
GetCancelButton().Pressed += OnCanceled;
[/csharp]
[/codeblocks]
*/
type Instance [1]gdclass.ConfirmationDialog

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_cancel_button      gdextension.MethodForClass `hash:"1856205918"`
	set_cancel_button_text gdextension.MethodForClass `hash:"83702148"`
	get_cancel_button_text gdextension.MethodForClass `hash:"201670096"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("ConfirmationDialog")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsConfirmationDialog() Instance
}

/*
Returns the cancel button.
[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their [member CanvasItem.visible] property.
*/
func (self Instance) GetCancelButton() Button.Instance { //gd:ConfirmationDialog.get_cancel_button
	return Button.Instance(Advanced(self).GetCancelButton())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.ConfirmationDialog

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.ConfirmationDialog](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.ConfirmationDialog](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.ConfirmationDialog{pointers.Add[gdclass.ConfirmationDialog]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.ConfirmationDialog{pointers.New[gdclass.ConfirmationDialog]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) CancelButtonText() string {
	return string(class(self).GetCancelButtonText().String())
}

func (self Instance) SetCancelButtonText(value string) {
	class(self).SetCancelButtonText(String.New(value))
}

/*
Returns the cancel button.
[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their [member CanvasItem.visible] property.
*/
//go:nosplit
func (self class) GetCancelButton() [1]gdclass.Button { //gd:ConfirmationDialog.get_cancel_button
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_cancel_button, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Button{gd.PointerLifetimeBoundTo[gdclass.Button](self.AsObject(), r_ret)}
	return ret
}

//go:nosplit
func (self class) SetCancelButtonText(text String.Readable) { //gd:ConfirmationDialog.set_cancel_button_text
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_cancel_button_text, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ text gdextension.String }{pointers.Get(gd.InternalString(text))}))
}

//go:nosplit
func (self class) GetCancelButtonText() String.Readable { //gd:ConfirmationDialog.get_cancel_button_text
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_cancel_button_text, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}
func (self class) AsConfirmationDialog() Advanced {
	return Advanced{pointers.AsA[gdclass.ConfirmationDialog](self[0])}
}
func (self Instance) AsConfirmationDialog() Instance {
	return Instance{pointers.AsA[gdclass.ConfirmationDialog](self[0])}
}
func (self *Extension[T]) AsConfirmationDialog() Instance { return self.Super().AsConfirmationDialog() }
func (self class) AsAcceptDialog() AcceptDialog.Advanced {
	return AcceptDialog.Advanced{pointers.AsA[gdclass.AcceptDialog](self[0])}
}
func (self *Extension[T]) AsAcceptDialog() AcceptDialog.Instance {
	return self.Super().AsAcceptDialog()
}
func (self Instance) AsAcceptDialog() AcceptDialog.Instance {
	return AcceptDialog.Instance{pointers.AsA[gdclass.AcceptDialog](self[0])}
}
func (self class) AsWindow() Window.Advanced {
	return Window.Advanced{pointers.AsA[gdclass.Window](self[0])}
}
func (self *Extension[T]) AsWindow() Window.Instance { return self.Super().AsWindow() }
func (self Instance) AsWindow() Window.Instance {
	return Window.Instance{pointers.AsA[gdclass.Window](self[0])}
}
func (self class) AsViewport() Viewport.Advanced {
	return Viewport.Advanced{pointers.AsA[gdclass.Viewport](self[0])}
}
func (self *Extension[T]) AsViewport() Viewport.Instance { return self.Super().AsViewport() }
func (self Instance) AsViewport() Viewport.Instance {
	return Viewport.Instance{pointers.AsA[gdclass.Viewport](self[0])}
}
func (self class) AsNode() Node.Advanced         { return Node.Advanced{pointers.AsA[gdclass.Node](self[0])} }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance {
	return Node.Instance{pointers.AsA[gdclass.Node](self[0])}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AcceptDialog.Advanced(self.AsAcceptDialog()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AcceptDialog.Instance(self.AsAcceptDialog()), name)
	}
}
func init() {
	gdclass.Register("ConfirmationDialog", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.ConfirmationDialog](ptr)} })
}
