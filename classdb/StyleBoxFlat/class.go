// Code generated by the generate package DO NOT EDIT

// Package StyleBoxFlat provides methods for working with StyleBoxFlat object instances.
package StyleBoxFlat

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/StyleBox"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/Rect2"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
By configuring various properties of this style box, you can achieve many common looks without the need of a texture. This includes optionally rounded borders, antialiasing, shadows, and skew.
Setting corner radius to high values is allowed. As soon as corners overlap, the stylebox will switch to a relative system:
[codeblock lang=text]
height = 30
corner_radius_top_left = 50
corner_radius_bottom_left = 100
[/codeblock]
The relative system now would take the 1:2 ratio of the two left corners to calculate the actual corner width. Both corners added will [b]never[/b] be more than the height. Result:
[codeblock lang=text]
corner_radius_top_left: 10
corner_radius_bottom_left: 20
[/codeblock]
*/
type Instance [1]gdclass.StyleBoxFlat

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_bg_color           gdextension.MethodForClass `hash:"2920490490"`
	get_bg_color           gdextension.MethodForClass `hash:"3444240500"`
	set_border_color       gdextension.MethodForClass `hash:"2920490490"`
	get_border_color       gdextension.MethodForClass `hash:"3444240500"`
	set_border_width_all   gdextension.MethodForClass `hash:"1286410249"`
	get_border_width_min   gdextension.MethodForClass `hash:"3905245786"`
	set_border_width       gdextension.MethodForClass `hash:"437707142"`
	get_border_width       gdextension.MethodForClass `hash:"1983885014"`
	set_border_blend       gdextension.MethodForClass `hash:"2586408642"`
	get_border_blend       gdextension.MethodForClass `hash:"36873697"`
	set_corner_radius_all  gdextension.MethodForClass `hash:"1286410249"`
	set_corner_radius      gdextension.MethodForClass `hash:"2696158768"`
	get_corner_radius      gdextension.MethodForClass `hash:"3982397690"`
	set_expand_margin      gdextension.MethodForClass `hash:"4290182280"`
	set_expand_margin_all  gdextension.MethodForClass `hash:"373806689"`
	get_expand_margin      gdextension.MethodForClass `hash:"2869120046"`
	set_draw_center        gdextension.MethodForClass `hash:"2586408642"`
	is_draw_center_enabled gdextension.MethodForClass `hash:"36873697"`
	set_skew               gdextension.MethodForClass `hash:"743155724"`
	get_skew               gdextension.MethodForClass `hash:"3341600327"`
	set_shadow_color       gdextension.MethodForClass `hash:"2920490490"`
	get_shadow_color       gdextension.MethodForClass `hash:"3444240500"`
	set_shadow_size        gdextension.MethodForClass `hash:"1286410249"`
	get_shadow_size        gdextension.MethodForClass `hash:"3905245786"`
	set_shadow_offset      gdextension.MethodForClass `hash:"743155724"`
	get_shadow_offset      gdextension.MethodForClass `hash:"3341600327"`
	set_anti_aliased       gdextension.MethodForClass `hash:"2586408642"`
	is_anti_aliased        gdextension.MethodForClass `hash:"36873697"`
	set_aa_size            gdextension.MethodForClass `hash:"373806689"`
	get_aa_size            gdextension.MethodForClass `hash:"1740695150"`
	set_corner_detail      gdextension.MethodForClass `hash:"1286410249"`
	get_corner_detail      gdextension.MethodForClass `hash:"3905245786"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("StyleBoxFlat")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsStyleBoxFlat() Instance
}

/*
Sets the border width to [param width] pixels for all sides.
*/
func (self Instance) SetBorderWidthAll(width int) { //gd:StyleBoxFlat.set_border_width_all
	Advanced(self).SetBorderWidthAll(int64(width))
}

/*
Returns the smallest border width out of all four borders.
*/
func (self Instance) GetBorderWidthMin() int { //gd:StyleBoxFlat.get_border_width_min
	return int(int(Advanced(self).GetBorderWidthMin()))
}

/*
Sets the corner radius to [param radius] pixels for all corners.
*/
func (self Instance) SetCornerRadiusAll(radius int) { //gd:StyleBoxFlat.set_corner_radius_all
	Advanced(self).SetCornerRadiusAll(int64(radius))
}

/*
Sets the expand margin to [param size] pixels for all sides.
*/
func (self Instance) SetExpandMarginAll(size Float.X) { //gd:StyleBoxFlat.set_expand_margin_all
	Advanced(self).SetExpandMarginAll(float64(size))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.StyleBoxFlat

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.StyleBoxFlat)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.StyleBoxFlat)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.StyleBoxFlat)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].InitRef()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) BgColor() Color.RGBA {
	return Color.RGBA(class(self).GetBgColor())
}

func (self Instance) SetBgColor(value Color.RGBA) {
	class(self).SetBgColor(Color.RGBA(value))
}

func (self Instance) DrawCenter() bool {
	return bool(class(self).IsDrawCenterEnabled())
}

func (self Instance) SetDrawCenter(value bool) {
	class(self).SetDrawCenter(value)
}

func (self Instance) Skew() Vector2.XY {
	return Vector2.XY(class(self).GetSkew())
}

func (self Instance) SetSkew(value Vector2.XY) {
	class(self).SetSkew(Vector2.XY(value))
}

func (self Instance) BorderWidthLeft() int {
	return int(int(class(self).GetBorderWidth(0)))
}

func (self Instance) SetBorderWidthLeft(value int) {
	class(self).SetBorderWidth(0, int64(value))
}

func (self Instance) BorderWidthTop() int {
	return int(int(class(self).GetBorderWidth(1)))
}

func (self Instance) SetBorderWidthTop(value int) {
	class(self).SetBorderWidth(1, int64(value))
}

func (self Instance) BorderWidthRight() int {
	return int(int(class(self).GetBorderWidth(2)))
}

func (self Instance) SetBorderWidthRight(value int) {
	class(self).SetBorderWidth(2, int64(value))
}

func (self Instance) BorderWidthBottom() int {
	return int(int(class(self).GetBorderWidth(3)))
}

func (self Instance) SetBorderWidthBottom(value int) {
	class(self).SetBorderWidth(3, int64(value))
}

func (self Instance) BorderColor() Color.RGBA {
	return Color.RGBA(class(self).GetBorderColor())
}

func (self Instance) SetBorderColor(value Color.RGBA) {
	class(self).SetBorderColor(Color.RGBA(value))
}

func (self Instance) BorderBlend() bool {
	return bool(class(self).GetBorderBlend())
}

func (self Instance) SetBorderBlend(value bool) {
	class(self).SetBorderBlend(value)
}

func (self Instance) CornerRadiusTopLeft() int {
	return int(int(class(self).GetCornerRadius(0)))
}

func (self Instance) SetCornerRadiusTopLeft(value int) {
	class(self).SetCornerRadius(0, int64(value))
}

func (self Instance) CornerRadiusTopRight() int {
	return int(int(class(self).GetCornerRadius(1)))
}

func (self Instance) SetCornerRadiusTopRight(value int) {
	class(self).SetCornerRadius(1, int64(value))
}

func (self Instance) CornerRadiusBottomRight() int {
	return int(int(class(self).GetCornerRadius(2)))
}

func (self Instance) SetCornerRadiusBottomRight(value int) {
	class(self).SetCornerRadius(2, int64(value))
}

func (self Instance) CornerRadiusBottomLeft() int {
	return int(int(class(self).GetCornerRadius(3)))
}

func (self Instance) SetCornerRadiusBottomLeft(value int) {
	class(self).SetCornerRadius(3, int64(value))
}

func (self Instance) CornerDetail() int {
	return int(int(class(self).GetCornerDetail()))
}

func (self Instance) SetCornerDetail(value int) {
	class(self).SetCornerDetail(int64(value))
}

func (self Instance) ExpandMarginLeft() Float.X {
	return Float.X(Float.X(class(self).GetExpandMargin(0)))
}

func (self Instance) SetExpandMarginLeft(value Float.X) {
	class(self).SetExpandMargin(0, float64(value))
}

func (self Instance) ExpandMarginTop() Float.X {
	return Float.X(Float.X(class(self).GetExpandMargin(1)))
}

func (self Instance) SetExpandMarginTop(value Float.X) {
	class(self).SetExpandMargin(1, float64(value))
}

func (self Instance) ExpandMarginRight() Float.X {
	return Float.X(Float.X(class(self).GetExpandMargin(2)))
}

func (self Instance) SetExpandMarginRight(value Float.X) {
	class(self).SetExpandMargin(2, float64(value))
}

func (self Instance) ExpandMarginBottom() Float.X {
	return Float.X(Float.X(class(self).GetExpandMargin(3)))
}

func (self Instance) SetExpandMarginBottom(value Float.X) {
	class(self).SetExpandMargin(3, float64(value))
}

func (self Instance) ShadowColor() Color.RGBA {
	return Color.RGBA(class(self).GetShadowColor())
}

func (self Instance) SetShadowColor(value Color.RGBA) {
	class(self).SetShadowColor(Color.RGBA(value))
}

func (self Instance) ShadowSize() int {
	return int(int(class(self).GetShadowSize()))
}

func (self Instance) SetShadowSize(value int) {
	class(self).SetShadowSize(int64(value))
}

func (self Instance) ShadowOffset() Vector2.XY {
	return Vector2.XY(class(self).GetShadowOffset())
}

func (self Instance) SetShadowOffset(value Vector2.XY) {
	class(self).SetShadowOffset(Vector2.XY(value))
}

func (self Instance) AntiAliasing() bool {
	return bool(class(self).IsAntiAliased())
}

func (self Instance) SetAntiAliasing(value bool) {
	class(self).SetAntiAliased(value)
}

func (self Instance) AntiAliasingSize() Float.X {
	return Float.X(Float.X(class(self).GetAaSize()))
}

func (self Instance) SetAntiAliasingSize(value Float.X) {
	class(self).SetAaSize(float64(value))
}

//go:nosplit
func (self class) SetBgColor(color Color.RGBA) { //gd:StyleBoxFlat.set_bg_color
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bg_color, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

//go:nosplit
func (self class) GetBgColor() Color.RGBA { //gd:StyleBoxFlat.get_bg_color
	var r_ret = gdextension.Call[Color.RGBA](gd.ObjectChecked(self.AsObject()), methods.get_bg_color, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBorderColor(color Color.RGBA) { //gd:StyleBoxFlat.set_border_color
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_border_color, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

//go:nosplit
func (self class) GetBorderColor() Color.RGBA { //gd:StyleBoxFlat.get_border_color
	var r_ret = gdextension.Call[Color.RGBA](gd.ObjectChecked(self.AsObject()), methods.get_border_color, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets the border width to [param width] pixels for all sides.
*/
//go:nosplit
func (self class) SetBorderWidthAll(width int64) { //gd:StyleBoxFlat.set_border_width_all
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_border_width_all, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ width int64 }{width}))
}

/*
Returns the smallest border width out of all four borders.
*/
//go:nosplit
func (self class) GetBorderWidthMin() int64 { //gd:StyleBoxFlat.get_border_width_min
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_border_width_min, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets the specified [enum Side]'s border width to [param width] pixels.
*/
//go:nosplit
func (self class) SetBorderWidth(margin Rect2.Side, width int64) { //gd:StyleBoxFlat.set_border_width
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_border_width, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		margin Rect2.Side
		width  int64
	}{margin, width}))
}

/*
Returns the specified [enum Side]'s border width.
*/
//go:nosplit
func (self class) GetBorderWidth(margin Rect2.Side) int64 { //gd:StyleBoxFlat.get_border_width
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_border_width, gdextension.SizeInt|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ margin Rect2.Side }{margin}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBorderBlend(blend bool) { //gd:StyleBoxFlat.set_border_blend
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_border_blend, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ blend bool }{blend}))
}

//go:nosplit
func (self class) GetBorderBlend() bool { //gd:StyleBoxFlat.get_border_blend
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_border_blend, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets the corner radius to [param radius] pixels for all corners.
*/
//go:nosplit
func (self class) SetCornerRadiusAll(radius int64) { //gd:StyleBoxFlat.set_corner_radius_all
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_corner_radius_all, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ radius int64 }{radius}))
}

/*
Sets the corner radius to [param radius] pixels for the given [param corner]. See [enum Corner] for possible values.
*/
//go:nosplit
func (self class) SetCornerRadius(corner Rect2.Corner, radius int64) { //gd:StyleBoxFlat.set_corner_radius
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_corner_radius, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		corner Rect2.Corner
		radius int64
	}{corner, radius}))
}

/*
Returns the given [param corner]'s radius. See [enum Corner] for possible values.
*/
//go:nosplit
func (self class) GetCornerRadius(corner Rect2.Corner) int64 { //gd:StyleBoxFlat.get_corner_radius
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_corner_radius, gdextension.SizeInt|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ corner Rect2.Corner }{corner}))
	var ret = r_ret
	return ret
}

/*
Sets the expand margin to [param size] pixels for the specified [enum Side].
*/
//go:nosplit
func (self class) SetExpandMargin(margin Rect2.Side, size float64) { //gd:StyleBoxFlat.set_expand_margin
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_expand_margin, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		margin Rect2.Side
		size   float64
	}{margin, size}))
}

/*
Sets the expand margin to [param size] pixels for all sides.
*/
//go:nosplit
func (self class) SetExpandMarginAll(size float64) { //gd:StyleBoxFlat.set_expand_margin_all
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_expand_margin_all, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ size float64 }{size}))
}

/*
Returns the size of the specified [enum Side]'s expand margin.
*/
//go:nosplit
func (self class) GetExpandMargin(margin Rect2.Side) float64 { //gd:StyleBoxFlat.get_expand_margin
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_expand_margin, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ margin Rect2.Side }{margin}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDrawCenter(draw_center bool) { //gd:StyleBoxFlat.set_draw_center
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_draw_center, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ draw_center bool }{draw_center}))
}

//go:nosplit
func (self class) IsDrawCenterEnabled() bool { //gd:StyleBoxFlat.is_draw_center_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_draw_center_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSkew(skew Vector2.XY) { //gd:StyleBoxFlat.set_skew
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_skew, 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ skew Vector2.XY }{skew}))
}

//go:nosplit
func (self class) GetSkew() Vector2.XY { //gd:StyleBoxFlat.get_skew
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_skew, gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetShadowColor(color Color.RGBA) { //gd:StyleBoxFlat.set_shadow_color
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_shadow_color, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

//go:nosplit
func (self class) GetShadowColor() Color.RGBA { //gd:StyleBoxFlat.get_shadow_color
	var r_ret = gdextension.Call[Color.RGBA](gd.ObjectChecked(self.AsObject()), methods.get_shadow_color, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetShadowSize(size int64) { //gd:StyleBoxFlat.set_shadow_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_shadow_size, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ size int64 }{size}))
}

//go:nosplit
func (self class) GetShadowSize() int64 { //gd:StyleBoxFlat.get_shadow_size
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_shadow_size, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetShadowOffset(offset Vector2.XY) { //gd:StyleBoxFlat.set_shadow_offset
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_shadow_offset, 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ offset Vector2.XY }{offset}))
}

//go:nosplit
func (self class) GetShadowOffset() Vector2.XY { //gd:StyleBoxFlat.get_shadow_offset
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_shadow_offset, gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAntiAliased(anti_aliased bool) { //gd:StyleBoxFlat.set_anti_aliased
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_anti_aliased, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ anti_aliased bool }{anti_aliased}))
}

//go:nosplit
func (self class) IsAntiAliased() bool { //gd:StyleBoxFlat.is_anti_aliased
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_anti_aliased, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAaSize(size float64) { //gd:StyleBoxFlat.set_aa_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_aa_size, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ size float64 }{size}))
}

//go:nosplit
func (self class) GetAaSize() float64 { //gd:StyleBoxFlat.get_aa_size
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_aa_size, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCornerDetail(detail int64) { //gd:StyleBoxFlat.set_corner_detail
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_corner_detail, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ detail int64 }{detail}))
}

//go:nosplit
func (self class) GetCornerDetail() int64 { //gd:StyleBoxFlat.get_corner_detail
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_corner_detail, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsStyleBoxFlat() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsStyleBoxFlat() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsStyleBoxFlat() Instance { return self.Super().AsStyleBoxFlat() }
func (self class) AsStyleBox() StyleBox.Advanced {
	return *((*StyleBox.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsStyleBox() StyleBox.Instance { return self.Super().AsStyleBox() }
func (self Instance) AsStyleBox() StyleBox.Instance {
	return *((*StyleBox.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(StyleBox.Advanced(self.AsStyleBox()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(StyleBox.Instance(self.AsStyleBox()), name)
	}
}
func init() {
	gdclass.Register("StyleBoxFlat", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
