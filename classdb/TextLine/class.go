// Code generated by the generate package DO NOT EDIT

// Package TextLine provides methods for working with TextLine object instances.
package TextLine

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Font"
import "graphics.gd/classdb/GUI"
import "graphics.gd/classdb/TextServer"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/Rect2"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Abstraction over [TextServer] for handling a single line of text.
*/
type Instance [1]gdclass.TextLine

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.TextLine

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsTextLine() Instance
}

/*
Clears text line (removes text and inline objects).
*/
func (self Instance) Clear() { //gd:TextLine.clear
	Advanced(self).Clear()
}

/*
Overrides BiDi for the structured text.
Override ranges should cover full source text without overlaps. BiDi algorithm will be used on each range separately.
*/
func (self Instance) SetBidiOverride(override []any) { //gd:TextLine.set_bidi_override
	Advanced(self).SetBidiOverride(gd.EngineArrayFromSlice(override))
}

/*
Adds text span and font to draw it.
*/
func (self Instance) AddString(text string, font Font.Instance, font_size int) bool { //gd:TextLine.add_string
	return bool(Advanced(self).AddString(String.New(text), font, int64(font_size), String.New(""), variant.New([1]any{}[0])))
}

/*
Adds text span and font to draw it.
*/
func (self Expanded) AddString(text string, font Font.Instance, font_size int, language string, meta any) bool { //gd:TextLine.add_string
	return bool(Advanced(self).AddString(String.New(text), font, int64(font_size), String.New(language), variant.New(meta)))
}

/*
Adds inline object to the text buffer, [param key] must be unique. In the text, object is represented as [param length] object replacement characters.
*/
func (self Instance) AddObject(key any, size Vector2.XY) bool { //gd:TextLine.add_object
	return bool(Advanced(self).AddObject(variant.New(key), Vector2.XY(size), 5, int64(1), float64(0.0)))
}

/*
Adds inline object to the text buffer, [param key] must be unique. In the text, object is represented as [param length] object replacement characters.
*/
func (self Expanded) AddObject(key any, size Vector2.XY, inline_align GUI.InlineAlignment, length int, baseline Float.X) bool { //gd:TextLine.add_object
	return bool(Advanced(self).AddObject(variant.New(key), Vector2.XY(size), inline_align, int64(length), float64(baseline)))
}

/*
Sets new size and alignment of embedded object.
*/
func (self Instance) ResizeObject(key any, size Vector2.XY) bool { //gd:TextLine.resize_object
	return bool(Advanced(self).ResizeObject(variant.New(key), Vector2.XY(size), 5, float64(0.0)))
}

/*
Sets new size and alignment of embedded object.
*/
func (self Expanded) ResizeObject(key any, size Vector2.XY, inline_align GUI.InlineAlignment, baseline Float.X) bool { //gd:TextLine.resize_object
	return bool(Advanced(self).ResizeObject(variant.New(key), Vector2.XY(size), inline_align, float64(baseline)))
}

/*
Aligns text to the given tab-stops.
*/
func (self Instance) TabAlign(tab_stops []float32) { //gd:TextLine.tab_align
	Advanced(self).TabAlign(Packed.New(tab_stops...))
}

/*
Returns array of inline objects.
*/
func (self Instance) GetObjects() []any { //gd:TextLine.get_objects
	return []any(gd.ArrayAs[[]any](gd.InternalArray(Advanced(self).GetObjects())))
}

/*
Returns bounding rectangle of the inline object.
*/
func (self Instance) GetObjectRect(key any) Rect2.PositionSize { //gd:TextLine.get_object_rect
	return Rect2.PositionSize(Advanced(self).GetObjectRect(variant.New(key)))
}

/*
Returns size of the bounding box of the text.
*/
func (self Instance) GetSize() Vector2.XY { //gd:TextLine.get_size
	return Vector2.XY(Advanced(self).GetSize())
}

/*
Returns TextServer buffer RID.
*/
func (self Instance) GetRid() RID.TextBuffer { //gd:TextLine.get_rid
	return RID.TextBuffer(Advanced(self).GetRid())
}

/*
Returns the text ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).
*/
func (self Instance) GetLineAscent() Float.X { //gd:TextLine.get_line_ascent
	return Float.X(Float.X(Advanced(self).GetLineAscent()))
}

/*
Returns the text descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).
*/
func (self Instance) GetLineDescent() Float.X { //gd:TextLine.get_line_descent
	return Float.X(Float.X(Advanced(self).GetLineDescent()))
}

/*
Returns width (for horizontal layout) or height (for vertical) of the text.
*/
func (self Instance) GetLineWidth() Float.X { //gd:TextLine.get_line_width
	return Float.X(Float.X(Advanced(self).GetLineWidth()))
}

/*
Returns pixel offset of the underline below the baseline.
*/
func (self Instance) GetLineUnderlinePosition() Float.X { //gd:TextLine.get_line_underline_position
	return Float.X(Float.X(Advanced(self).GetLineUnderlinePosition()))
}

/*
Returns thickness of the underline.
*/
func (self Instance) GetLineUnderlineThickness() Float.X { //gd:TextLine.get_line_underline_thickness
	return Float.X(Float.X(Advanced(self).GetLineUnderlineThickness()))
}

/*
Draw text into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Instance) Draw(canvas RID.Canvas, pos Vector2.XY) { //gd:TextLine.draw
	Advanced(self).Draw(RID.Any(canvas), Vector2.XY(pos), Color.RGBA(gd.Color{1, 1, 1, 1}))
}

/*
Draw text into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Expanded) Draw(canvas RID.Canvas, pos Vector2.XY, color Color.RGBA) { //gd:TextLine.draw
	Advanced(self).Draw(RID.Any(canvas), Vector2.XY(pos), Color.RGBA(color))
}

/*
Draw text into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Instance) DrawOutline(canvas RID.Canvas, pos Vector2.XY) { //gd:TextLine.draw_outline
	Advanced(self).DrawOutline(RID.Any(canvas), Vector2.XY(pos), int64(1), Color.RGBA(gd.Color{1, 1, 1, 1}))
}

/*
Draw text into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Expanded) DrawOutline(canvas RID.Canvas, pos Vector2.XY, outline_size int, color Color.RGBA) { //gd:TextLine.draw_outline
	Advanced(self).DrawOutline(RID.Any(canvas), Vector2.XY(pos), int64(outline_size), Color.RGBA(color))
}

/*
Returns caret character offset at the specified pixel offset at the baseline. This function always returns a valid position.
*/
func (self Instance) HitTest(coords Float.X) int { //gd:TextLine.hit_test
	return int(int(Advanced(self).HitTest(float64(coords))))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.TextLine

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("TextLine"))
	casted := Instance{*(*gdclass.TextLine)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) Direction() TextServer.Direction {
	return TextServer.Direction(class(self).GetDirection())
}

func (self Instance) SetDirection(value TextServer.Direction) {
	class(self).SetDirection(value)
}

func (self Instance) Orientation() TextServer.Orientation {
	return TextServer.Orientation(class(self).GetOrientation())
}

func (self Instance) SetOrientation(value TextServer.Orientation) {
	class(self).SetOrientation(value)
}

func (self Instance) PreserveInvalid() bool {
	return bool(class(self).GetPreserveInvalid())
}

func (self Instance) SetPreserveInvalid(value bool) {
	class(self).SetPreserveInvalid(value)
}

func (self Instance) PreserveControl() bool {
	return bool(class(self).GetPreserveControl())
}

func (self Instance) SetPreserveControl(value bool) {
	class(self).SetPreserveControl(value)
}

func (self Instance) Width() Float.X {
	return Float.X(Float.X(class(self).GetWidth()))
}

func (self Instance) SetWidth(value Float.X) {
	class(self).SetWidth(float64(value))
}

func (self Instance) Alignment() GUI.HorizontalAlignment {
	return GUI.HorizontalAlignment(class(self).GetHorizontalAlignment())
}

func (self Instance) SetAlignment(value GUI.HorizontalAlignment) {
	class(self).SetHorizontalAlignment(value)
}

func (self Instance) Flags() TextServer.JustificationFlag {
	return TextServer.JustificationFlag(class(self).GetFlags())
}

func (self Instance) SetFlags(value TextServer.JustificationFlag) {
	class(self).SetFlags(value)
}

func (self Instance) TextOverrunBehavior() TextServer.OverrunBehavior {
	return TextServer.OverrunBehavior(class(self).GetTextOverrunBehavior())
}

func (self Instance) SetTextOverrunBehavior(value TextServer.OverrunBehavior) {
	class(self).SetTextOverrunBehavior(value)
}

func (self Instance) EllipsisChar() string {
	return string(class(self).GetEllipsisChar().String())
}

func (self Instance) SetEllipsisChar(value string) {
	class(self).SetEllipsisChar(String.New(value))
}

/*
Clears text line (removes text and inline objects).
*/
//go:nosplit
func (self class) Clear() { //gd:TextLine.clear
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_clear), 0, unsafe.Pointer(&struct{}{}))
}

//go:nosplit
func (self class) SetDirection(direction TextServer.Direction) { //gd:TextLine.set_direction
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_set_direction), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ direction TextServer.Direction }{direction}))
}

//go:nosplit
func (self class) GetDirection() TextServer.Direction { //gd:TextLine.get_direction
	var r_ret = gdextension.Call[TextServer.Direction](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_direction), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetOrientation(orientation TextServer.Orientation) { //gd:TextLine.set_orientation
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_set_orientation), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ orientation TextServer.Orientation }{orientation}))
}

//go:nosplit
func (self class) GetOrientation() TextServer.Orientation { //gd:TextLine.get_orientation
	var r_ret = gdextension.Call[TextServer.Orientation](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_orientation), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPreserveInvalid(enabled bool) { //gd:TextLine.set_preserve_invalid
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_set_preserve_invalid), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) GetPreserveInvalid() bool { //gd:TextLine.get_preserve_invalid
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_preserve_invalid), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPreserveControl(enabled bool) { //gd:TextLine.set_preserve_control
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_set_preserve_control), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) GetPreserveControl() bool { //gd:TextLine.get_preserve_control
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_preserve_control), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Overrides BiDi for the structured text.
Override ranges should cover full source text without overlaps. BiDi algorithm will be used on each range separately.
*/
//go:nosplit
func (self class) SetBidiOverride(override Array.Any) { //gd:TextLine.set_bidi_override
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_set_bidi_override), 0|(gdextension.SizeArray<<4), unsafe.Pointer(&struct{ override gdextension.Array }{gdextension.Array(pointers.Get(gd.InternalArray(override))[0])}))
}

/*
Adds text span and font to draw it.
*/
//go:nosplit
func (self class) AddString(text String.Readable, font [1]gdclass.Font, font_size int64, language String.Readable, meta variant.Any) bool { //gd:TextLine.add_string
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_add_string), gdextension.SizeBool|(gdextension.SizeString<<4)|(gdextension.SizeObject<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeString<<16)|(gdextension.SizeVariant<<20), unsafe.Pointer(&struct {
		text      gdextension.String
		font      gdextension.Object
		font_size int64
		language  gdextension.String
		meta      gdextension.Variant
	}{gdextension.String(pointers.Get(gd.InternalString(text))[0]), gdextension.Object(gd.ObjectChecked(font[0].AsObject())), font_size, gdextension.String(pointers.Get(gd.InternalString(language))[0]), gdextension.Variant(pointers.Get(gd.InternalVariant(meta)))}))
	var ret = r_ret
	return ret
}

/*
Adds inline object to the text buffer, [param key] must be unique. In the text, object is represented as [param length] object replacement characters.
*/
//go:nosplit
func (self class) AddObject(key variant.Any, size Vector2.XY, inline_align GUI.InlineAlignment, length int64, baseline float64) bool { //gd:TextLine.add_object
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_add_object), gdextension.SizeBool|(gdextension.SizeVariant<<4)|(gdextension.SizeVector2<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeInt<<16)|(gdextension.SizeFloat<<20), unsafe.Pointer(&struct {
		key          gdextension.Variant
		size         Vector2.XY
		inline_align GUI.InlineAlignment
		length       int64
		baseline     float64
	}{gdextension.Variant(pointers.Get(gd.InternalVariant(key))), size, inline_align, length, baseline}))
	var ret = r_ret
	return ret
}

/*
Sets new size and alignment of embedded object.
*/
//go:nosplit
func (self class) ResizeObject(key variant.Any, size Vector2.XY, inline_align GUI.InlineAlignment, baseline float64) bool { //gd:TextLine.resize_object
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_resize_object), gdextension.SizeBool|(gdextension.SizeVariant<<4)|(gdextension.SizeVector2<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeFloat<<16), unsafe.Pointer(&struct {
		key          gdextension.Variant
		size         Vector2.XY
		inline_align GUI.InlineAlignment
		baseline     float64
	}{gdextension.Variant(pointers.Get(gd.InternalVariant(key))), size, inline_align, baseline}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWidth(width float64) { //gd:TextLine.set_width
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_set_width), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ width float64 }{width}))
}

//go:nosplit
func (self class) GetWidth() float64 { //gd:TextLine.get_width
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_width), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHorizontalAlignment(alignment GUI.HorizontalAlignment) { //gd:TextLine.set_horizontal_alignment
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_set_horizontal_alignment), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ alignment GUI.HorizontalAlignment }{alignment}))
}

//go:nosplit
func (self class) GetHorizontalAlignment() GUI.HorizontalAlignment { //gd:TextLine.get_horizontal_alignment
	var r_ret = gdextension.Call[GUI.HorizontalAlignment](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_horizontal_alignment), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Aligns text to the given tab-stops.
*/
//go:nosplit
func (self class) TabAlign(tab_stops Packed.Array[float32]) { //gd:TextLine.tab_align
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_tab_align), 0|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ tab_stops gdextension.PackedArray }{gdextension.ToPackedArray(pointers.Get(gd.InternalPacked[gd.PackedFloat32Array, float32](tab_stops)))}))
}

//go:nosplit
func (self class) SetFlags(flags TextServer.JustificationFlag) { //gd:TextLine.set_flags
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_set_flags), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ flags TextServer.JustificationFlag }{flags}))
}

//go:nosplit
func (self class) GetFlags() TextServer.JustificationFlag { //gd:TextLine.get_flags
	var r_ret = gdextension.Call[TextServer.JustificationFlag](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_flags), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTextOverrunBehavior(overrun_behavior TextServer.OverrunBehavior) { //gd:TextLine.set_text_overrun_behavior
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_set_text_overrun_behavior), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ overrun_behavior TextServer.OverrunBehavior }{overrun_behavior}))
}

//go:nosplit
func (self class) GetTextOverrunBehavior() TextServer.OverrunBehavior { //gd:TextLine.get_text_overrun_behavior
	var r_ret = gdextension.Call[TextServer.OverrunBehavior](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_text_overrun_behavior), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEllipsisChar(char String.Readable) { //gd:TextLine.set_ellipsis_char
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_set_ellipsis_char), 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ char gdextension.String }{gdextension.String(pointers.Get(gd.InternalString(char))[0])}))
}

//go:nosplit
func (self class) GetEllipsisChar() String.Readable { //gd:TextLine.get_ellipsis_char
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_ellipsis_char), gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns array of inline objects.
*/
//go:nosplit
func (self class) GetObjects() Array.Any { //gd:TextLine.get_objects
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_objects), gdextension.SizeArray, unsafe.Pointer(&struct{}{}))
	var ret = Array.Through(gd.ArrayProxy[variant.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

/*
Returns bounding rectangle of the inline object.
*/
//go:nosplit
func (self class) GetObjectRect(key variant.Any) Rect2.PositionSize { //gd:TextLine.get_object_rect
	var r_ret = gdextension.Call[Rect2.PositionSize](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_object_rect), gdextension.SizeRect2|(gdextension.SizeVariant<<4), unsafe.Pointer(&struct{ key gdextension.Variant }{gdextension.Variant(pointers.Get(gd.InternalVariant(key)))}))
	var ret = r_ret
	return ret
}

/*
Returns size of the bounding box of the text.
*/
//go:nosplit
func (self class) GetSize() Vector2.XY { //gd:TextLine.get_size
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_size), gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns TextServer buffer RID.
*/
//go:nosplit
func (self class) GetRid() RID.Any { //gd:TextLine.get_rid
	var r_ret = gdextension.Call[RID.Any](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_rid), gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the text ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).
*/
//go:nosplit
func (self class) GetLineAscent() float64 { //gd:TextLine.get_line_ascent
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_line_ascent), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the text descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).
*/
//go:nosplit
func (self class) GetLineDescent() float64 { //gd:TextLine.get_line_descent
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_line_descent), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns width (for horizontal layout) or height (for vertical) of the text.
*/
//go:nosplit
func (self class) GetLineWidth() float64 { //gd:TextLine.get_line_width
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_line_width), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns pixel offset of the underline below the baseline.
*/
//go:nosplit
func (self class) GetLineUnderlinePosition() float64 { //gd:TextLine.get_line_underline_position
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_line_underline_position), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns thickness of the underline.
*/
//go:nosplit
func (self class) GetLineUnderlineThickness() float64 { //gd:TextLine.get_line_underline_thickness
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_get_line_underline_thickness), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Draw text into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
//go:nosplit
func (self class) Draw(canvas RID.Any, pos Vector2.XY, color Color.RGBA) { //gd:TextLine.draw
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_draw), 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector2<<8)|(gdextension.SizeColor<<12), unsafe.Pointer(&struct {
		canvas RID.Any
		pos    Vector2.XY
		color  Color.RGBA
	}{canvas, pos, color}))
}

/*
Draw text into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
//go:nosplit
func (self class) DrawOutline(canvas RID.Any, pos Vector2.XY, outline_size int64, color Color.RGBA) { //gd:TextLine.draw_outline
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_draw_outline), 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector2<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeColor<<16), unsafe.Pointer(&struct {
		canvas       RID.Any
		pos          Vector2.XY
		outline_size int64
		color        Color.RGBA
	}{canvas, pos, outline_size, color}))
}

/*
Returns caret character offset at the specified pixel offset at the baseline. This function always returns a valid position.
*/
//go:nosplit
func (self class) HitTest(coords float64) int64 { //gd:TextLine.hit_test
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.TextLine.Bind_hit_test), gdextension.SizeInt|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ coords float64 }{coords}))
	var ret = r_ret
	return ret
}
func (self class) AsTextLine() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsTextLine() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsTextLine() Instance { return self.Super().AsTextLine() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("TextLine", func(ptr gd.Object) any { return [1]gdclass.TextLine{*(*gdclass.TextLine)(unsafe.Pointer(&ptr))} })
}
