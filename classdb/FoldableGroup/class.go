// Code generated by the generate package DO NOT EDIT

// Package FoldableGroup provides methods for working with FoldableGroup object instances.
package FoldableGroup

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/FoldableContainer"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A group of [FoldableContainer]-derived nodes. Only one container can be expanded at a time.
*/
type Instance [1]gdclass.FoldableGroup

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsFoldableGroup() Instance
}

/*
Returns the current expanded container.
*/
func (self Instance) GetExpandedContainer() FoldableContainer.Instance { //gd:FoldableGroup.get_expanded_container
	return FoldableContainer.Instance(Advanced(self).GetExpandedContainer())
}

/*
Returns an [Array] of [FoldableContainer]s that have this as their FoldableGroup (see [member FoldableContainer.foldable_group]). This is equivalent to [ButtonGroup] but for FoldableContainers.
*/
func (self Instance) GetContainers() []FoldableContainer.Instance { //gd:FoldableGroup.get_containers
	return []FoldableContainer.Instance(gd.ArrayAs[[]FoldableContainer.Instance](gd.InternalArray(Advanced(self).GetContainers())))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.FoldableGroup

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("FoldableGroup"))
	casted := Instance{*(*gdclass.FoldableGroup)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) AllowFoldingAll() bool {
	return bool(class(self).IsAllowFoldingAll())
}

func (self Instance) SetAllowFoldingAll(value bool) {
	class(self).SetAllowFoldingAll(value)
}

/*
Returns the current expanded container.
*/
//go:nosplit
func (self class) GetExpandedContainer() [1]gdclass.FoldableContainer { //gd:FoldableGroup.get_expanded_container
	var frame = callframe.New()
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FoldableGroup.Bind_get_expanded_container, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.FoldableContainer{gd.PointerWithOwnershipTransferredToGo[gdclass.FoldableContainer](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Returns an [Array] of [FoldableContainer]s that have this as their FoldableGroup (see [member FoldableContainer.foldable_group]). This is equivalent to [ButtonGroup] but for FoldableContainers.
*/
//go:nosplit
func (self class) GetContainers() Array.Contains[[1]gdclass.FoldableContainer] { //gd:FoldableGroup.get_containers
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FoldableGroup.Bind_get_containers, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Array.Through(gd.ArrayProxy[[1]gdclass.FoldableContainer]{}, pointers.Pack(pointers.New[gd.Array](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetAllowFoldingAll(enabled bool) { //gd:FoldableGroup.set_allow_folding_all
	var frame = callframe.New()
	callframe.Arg(frame, enabled)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FoldableGroup.Bind_set_allow_folding_all, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) IsAllowFoldingAll() bool { //gd:FoldableGroup.is_allow_folding_all
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FoldableGroup.Bind_is_allow_folding_all, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}
func (self Instance) OnExpanded(cb func(container FoldableContainer.Instance)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("expanded"), gd.NewCallable(cb), 0)
}

func (self class) AsFoldableGroup() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsFoldableGroup() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsFoldableGroup() Instance { return self.Super().AsFoldableGroup() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("FoldableGroup", func(ptr gd.Object) any {
		return [1]gdclass.FoldableGroup{*(*gdclass.FoldableGroup)(unsafe.Pointer(&ptr))}
	})
}
