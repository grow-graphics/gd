// Code generated by the generate package DO NOT EDIT

// Package TranslationDomain provides methods for working with TranslationDomain object instances.
package TranslationDomain

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Translation"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[TranslationDomain] is a self-contained collection of [Translation] resources. Translations can be added to or removed from it.
If you're working with the main translation domain, it is more convenient to use the wrap methods on [TranslationServer].
*/
type Instance [1]gdclass.TranslationDomain

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_translation_object                           gdextension.MethodForClass `hash:"606768082"`
	add_translation                                  gdextension.MethodForClass `hash:"1466479800"`
	remove_translation                               gdextension.MethodForClass `hash:"1466479800"`
	clear                                            gdextension.MethodForClass `hash:"3218959716"`
	translate                                        gdextension.MethodForClass `hash:"1829228469"`
	translate_plural                                 gdextension.MethodForClass `hash:"229954002"`
	is_pseudolocalization_enabled                    gdextension.MethodForClass `hash:"36873697"`
	set_pseudolocalization_enabled                   gdextension.MethodForClass `hash:"2586408642"`
	is_pseudolocalization_accents_enabled            gdextension.MethodForClass `hash:"36873697"`
	set_pseudolocalization_accents_enabled           gdextension.MethodForClass `hash:"2586408642"`
	is_pseudolocalization_double_vowels_enabled      gdextension.MethodForClass `hash:"36873697"`
	set_pseudolocalization_double_vowels_enabled     gdextension.MethodForClass `hash:"2586408642"`
	is_pseudolocalization_fake_bidi_enabled          gdextension.MethodForClass `hash:"36873697"`
	set_pseudolocalization_fake_bidi_enabled         gdextension.MethodForClass `hash:"2586408642"`
	is_pseudolocalization_override_enabled           gdextension.MethodForClass `hash:"36873697"`
	set_pseudolocalization_override_enabled          gdextension.MethodForClass `hash:"2586408642"`
	is_pseudolocalization_skip_placeholders_enabled  gdextension.MethodForClass `hash:"36873697"`
	set_pseudolocalization_skip_placeholders_enabled gdextension.MethodForClass `hash:"2586408642"`
	get_pseudolocalization_expansion_ratio           gdextension.MethodForClass `hash:"1740695150"`
	set_pseudolocalization_expansion_ratio           gdextension.MethodForClass `hash:"373806689"`
	get_pseudolocalization_prefix                    gdextension.MethodForClass `hash:"201670096"`
	set_pseudolocalization_prefix                    gdextension.MethodForClass `hash:"83702148"`
	get_pseudolocalization_suffix                    gdextension.MethodForClass `hash:"201670096"`
	set_pseudolocalization_suffix                    gdextension.MethodForClass `hash:"83702148"`
	pseudolocalize                                   gdextension.MethodForClass `hash:"1965194235"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("TranslationDomain")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.TranslationDomain

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsTranslationDomain() Instance
}

/*
Returns the [Translation] instance that best matches [param locale]. Returns [code]null[/code] if there are no matches.
*/
func (self Instance) GetTranslationObject(locale string) Translation.Instance { //gd:TranslationDomain.get_translation_object
	return Translation.Instance(Advanced(self).GetTranslationObject(String.New(locale)))
}

/*
Adds a translation.
*/
func (self Instance) AddTranslation(translation Translation.Instance) { //gd:TranslationDomain.add_translation
	Advanced(self).AddTranslation(translation)
}

/*
Removes the given translation.
*/
func (self Instance) RemoveTranslation(translation Translation.Instance) { //gd:TranslationDomain.remove_translation
	Advanced(self).RemoveTranslation(translation)
}

/*
Removes all translations.
*/
func (self Instance) Clear() { //gd:TranslationDomain.clear
	Advanced(self).Clear()
}

/*
Returns the current locale's translation for the given message and context.
*/
func (self Instance) Translate(message string) string { //gd:TranslationDomain.translate
	return string(Advanced(self).Translate(String.Name(String.New(message)), String.Name(String.New(""))).String())
}

/*
Returns the current locale's translation for the given message and context.
*/
func (self Expanded) Translate(message string, context string) string { //gd:TranslationDomain.translate
	return string(Advanced(self).Translate(String.Name(String.New(message)), String.Name(String.New(context))).String())
}

/*
Returns the current locale's translation for the given message, plural message and context.
The number [param n] is the number or quantity of the plural object. It will be used to guide the translation system to fetch the correct plural form for the selected language.
*/
func (self Instance) TranslatePlural(message string, message_plural string, n int) string { //gd:TranslationDomain.translate_plural
	return string(Advanced(self).TranslatePlural(String.Name(String.New(message)), String.Name(String.New(message_plural)), int64(n), String.Name(String.New(""))).String())
}

/*
Returns the current locale's translation for the given message, plural message and context.
The number [param n] is the number or quantity of the plural object. It will be used to guide the translation system to fetch the correct plural form for the selected language.
*/
func (self Expanded) TranslatePlural(message string, message_plural string, n int, context string) string { //gd:TranslationDomain.translate_plural
	return string(Advanced(self).TranslatePlural(String.Name(String.New(message)), String.Name(String.New(message_plural)), int64(n), String.Name(String.New(context))).String())
}

/*
Returns the pseudolocalized string based on the [param message] passed in.
*/
func (self Instance) Pseudolocalize(message string) string { //gd:TranslationDomain.pseudolocalize
	return string(Advanced(self).Pseudolocalize(String.Name(String.New(message))).String())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.TranslationDomain

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.TranslationDomain)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.TranslationDomain)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.TranslationDomain)(unsafe.Pointer(&object))}
	object[0].Notification(0, false)
	return casted
}

func (self Instance) PseudolocalizationEnabled() bool {
	return bool(class(self).IsPseudolocalizationEnabled())
}

func (self Instance) SetPseudolocalizationEnabled(value bool) {
	class(self).SetPseudolocalizationEnabled(value)
}

func (self Instance) PseudolocalizationAccentsEnabled() bool {
	return bool(class(self).IsPseudolocalizationAccentsEnabled())
}

func (self Instance) SetPseudolocalizationAccentsEnabled(value bool) {
	class(self).SetPseudolocalizationAccentsEnabled(value)
}

func (self Instance) PseudolocalizationDoubleVowelsEnabled() bool {
	return bool(class(self).IsPseudolocalizationDoubleVowelsEnabled())
}

func (self Instance) SetPseudolocalizationDoubleVowelsEnabled(value bool) {
	class(self).SetPseudolocalizationDoubleVowelsEnabled(value)
}

func (self Instance) PseudolocalizationFakeBidiEnabled() bool {
	return bool(class(self).IsPseudolocalizationFakeBidiEnabled())
}

func (self Instance) SetPseudolocalizationFakeBidiEnabled(value bool) {
	class(self).SetPseudolocalizationFakeBidiEnabled(value)
}

func (self Instance) PseudolocalizationOverrideEnabled() bool {
	return bool(class(self).IsPseudolocalizationOverrideEnabled())
}

func (self Instance) SetPseudolocalizationOverrideEnabled(value bool) {
	class(self).SetPseudolocalizationOverrideEnabled(value)
}

func (self Instance) PseudolocalizationSkipPlaceholdersEnabled() bool {
	return bool(class(self).IsPseudolocalizationSkipPlaceholdersEnabled())
}

func (self Instance) SetPseudolocalizationSkipPlaceholdersEnabled(value bool) {
	class(self).SetPseudolocalizationSkipPlaceholdersEnabled(value)
}

func (self Instance) PseudolocalizationExpansionRatio() Float.X {
	return Float.X(Float.X(class(self).GetPseudolocalizationExpansionRatio()))
}

func (self Instance) SetPseudolocalizationExpansionRatio(value Float.X) {
	class(self).SetPseudolocalizationExpansionRatio(float64(value))
}

func (self Instance) PseudolocalizationPrefix() string {
	return string(class(self).GetPseudolocalizationPrefix().String())
}

func (self Instance) SetPseudolocalizationPrefix(value string) {
	class(self).SetPseudolocalizationPrefix(String.New(value))
}

func (self Instance) PseudolocalizationSuffix() string {
	return string(class(self).GetPseudolocalizationSuffix().String())
}

func (self Instance) SetPseudolocalizationSuffix(value string) {
	class(self).SetPseudolocalizationSuffix(String.New(value))
}

/*
Returns the [Translation] instance that best matches [param locale]. Returns [code]null[/code] if there are no matches.
*/
//go:nosplit
func (self class) GetTranslationObject(locale String.Readable) [1]gdclass.Translation { //gd:TranslationDomain.get_translation_object
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_translation_object, gdextension.SizeObject|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ locale gdextension.String }{pointers.Get(gd.InternalString(locale))}))
	var ret = [1]gdclass.Translation{gd.PointerWithOwnershipTransferredToGo[gdclass.Translation](r_ret)}
	return ret
}

/*
Adds a translation.
*/
//go:nosplit
func (self class) AddTranslation(translation [1]gdclass.Translation) { //gd:TranslationDomain.add_translation
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.add_translation, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ translation gdextension.Object }{gdextension.Object(gd.ObjectChecked(translation[0].AsObject()))}))
}

/*
Removes the given translation.
*/
//go:nosplit
func (self class) RemoveTranslation(translation [1]gdclass.Translation) { //gd:TranslationDomain.remove_translation
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_translation, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ translation gdextension.Object }{gdextension.Object(gd.ObjectChecked(translation[0].AsObject()))}))
}

/*
Removes all translations.
*/
//go:nosplit
func (self class) Clear() { //gd:TranslationDomain.clear
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear, 0, unsafe.Pointer(&struct{}{}))
}

/*
Returns the current locale's translation for the given message and context.
*/
//go:nosplit
func (self class) Translate(message String.Name, context String.Name) String.Name { //gd:TranslationDomain.translate
	var r_ret = gdextension.Call[gdextension.StringName](gd.ObjectChecked(self.AsObject()), methods.translate, gdextension.SizeStringName|(gdextension.SizeStringName<<4)|(gdextension.SizeStringName<<8), unsafe.Pointer(&struct {
		message gdextension.StringName
		context gdextension.StringName
	}{pointers.Get(gd.InternalStringName(message)), pointers.Get(gd.InternalStringName(context))}))
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret))))
	return ret
}

/*
Returns the current locale's translation for the given message, plural message and context.
The number [param n] is the number or quantity of the plural object. It will be used to guide the translation system to fetch the correct plural form for the selected language.
*/
//go:nosplit
func (self class) TranslatePlural(message String.Name, message_plural String.Name, n int64, context String.Name) String.Name { //gd:TranslationDomain.translate_plural
	var r_ret = gdextension.Call[gdextension.StringName](gd.ObjectChecked(self.AsObject()), methods.translate_plural, gdextension.SizeStringName|(gdextension.SizeStringName<<4)|(gdextension.SizeStringName<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeStringName<<16), unsafe.Pointer(&struct {
		message        gdextension.StringName
		message_plural gdextension.StringName
		n              int64
		context        gdextension.StringName
	}{pointers.Get(gd.InternalStringName(message)), pointers.Get(gd.InternalStringName(message_plural)), n, pointers.Get(gd.InternalStringName(context))}))
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret))))
	return ret
}

//go:nosplit
func (self class) IsPseudolocalizationEnabled() bool { //gd:TranslationDomain.is_pseudolocalization_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_pseudolocalization_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPseudolocalizationEnabled(enabled bool) { //gd:TranslationDomain.set_pseudolocalization_enabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pseudolocalization_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsPseudolocalizationAccentsEnabled() bool { //gd:TranslationDomain.is_pseudolocalization_accents_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_pseudolocalization_accents_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPseudolocalizationAccentsEnabled(enabled bool) { //gd:TranslationDomain.set_pseudolocalization_accents_enabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pseudolocalization_accents_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsPseudolocalizationDoubleVowelsEnabled() bool { //gd:TranslationDomain.is_pseudolocalization_double_vowels_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_pseudolocalization_double_vowels_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPseudolocalizationDoubleVowelsEnabled(enabled bool) { //gd:TranslationDomain.set_pseudolocalization_double_vowels_enabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pseudolocalization_double_vowels_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsPseudolocalizationFakeBidiEnabled() bool { //gd:TranslationDomain.is_pseudolocalization_fake_bidi_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_pseudolocalization_fake_bidi_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPseudolocalizationFakeBidiEnabled(enabled bool) { //gd:TranslationDomain.set_pseudolocalization_fake_bidi_enabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pseudolocalization_fake_bidi_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsPseudolocalizationOverrideEnabled() bool { //gd:TranslationDomain.is_pseudolocalization_override_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_pseudolocalization_override_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPseudolocalizationOverrideEnabled(enabled bool) { //gd:TranslationDomain.set_pseudolocalization_override_enabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pseudolocalization_override_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsPseudolocalizationSkipPlaceholdersEnabled() bool { //gd:TranslationDomain.is_pseudolocalization_skip_placeholders_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_pseudolocalization_skip_placeholders_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPseudolocalizationSkipPlaceholdersEnabled(enabled bool) { //gd:TranslationDomain.set_pseudolocalization_skip_placeholders_enabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pseudolocalization_skip_placeholders_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) GetPseudolocalizationExpansionRatio() float64 { //gd:TranslationDomain.get_pseudolocalization_expansion_ratio
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_pseudolocalization_expansion_ratio, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPseudolocalizationExpansionRatio(ratio float64) { //gd:TranslationDomain.set_pseudolocalization_expansion_ratio
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pseudolocalization_expansion_ratio, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ ratio float64 }{ratio}))
}

//go:nosplit
func (self class) GetPseudolocalizationPrefix() String.Readable { //gd:TranslationDomain.get_pseudolocalization_prefix
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_pseudolocalization_prefix, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetPseudolocalizationPrefix(prefix String.Readable) { //gd:TranslationDomain.set_pseudolocalization_prefix
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pseudolocalization_prefix, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ prefix gdextension.String }{pointers.Get(gd.InternalString(prefix))}))
}

//go:nosplit
func (self class) GetPseudolocalizationSuffix() String.Readable { //gd:TranslationDomain.get_pseudolocalization_suffix
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_pseudolocalization_suffix, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetPseudolocalizationSuffix(suffix String.Readable) { //gd:TranslationDomain.set_pseudolocalization_suffix
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_pseudolocalization_suffix, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ suffix gdextension.String }{pointers.Get(gd.InternalString(suffix))}))
}

/*
Returns the pseudolocalized string based on the [param message] passed in.
*/
//go:nosplit
func (self class) Pseudolocalize(message String.Name) String.Name { //gd:TranslationDomain.pseudolocalize
	var r_ret = gdextension.Call[gdextension.StringName](gd.ObjectChecked(self.AsObject()), methods.pseudolocalize, gdextension.SizeStringName|(gdextension.SizeStringName<<4), unsafe.Pointer(&struct{ message gdextension.StringName }{pointers.Get(gd.InternalStringName(message))}))
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret))))
	return ret
}
func (self class) AsTranslationDomain() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsTranslationDomain() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsTranslationDomain() Instance { return self.Super().AsTranslationDomain() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("TranslationDomain", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
