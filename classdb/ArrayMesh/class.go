// Code generated by the generate package DO NOT EDIT

// Package ArrayMesh provides methods for working with ArrayMesh object instances.
package ArrayMesh

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/classdb/Mesh"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/Shape3D"
import "graphics.gd/variant/AABB"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Transform3D"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
The [ArrayMesh] is used to construct a [Mesh] by specifying the attributes as arrays.
The most basic example is the creation of a single triangle:
[codeblocks]
[gdscript]
var vertices = PackedVector3Array()
vertices.push_back(Vector3(0, 1, 0))
vertices.push_back(Vector3(1, 0, 0))
vertices.push_back(Vector3(0, 0, 1))

# Initialize the ArrayMesh.
var arr_mesh = ArrayMesh.new()
var arrays = []
arrays.resize(Mesh.ARRAY_MAX)
arrays[Mesh.ARRAY_VERTEX] = vertices

# Create the Mesh.
arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)
var m = MeshInstance3D.new()
m.mesh = arr_mesh
[/gdscript]
[csharp]
Vector3[] vertices =
[

	new Vector3(0, 1, 0),
	new Vector3(1, 0, 0),
	new Vector3(0, 0, 1),

];

// Initialize the ArrayMesh.
var arrMesh = new ArrayMesh();
Godot.Collections.Array arrays = [];
arrays.Resize((int)Mesh.ArrayType.Max);
arrays[(int)Mesh.ArrayType.Vertex] = vertices;

// Create the Mesh.
arrMesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, arrays);
var m = new MeshInstance3D();
m.Mesh = arrMesh;
[/csharp]
[/codeblocks]
The [MeshInstance3D] is ready to be added to the [SceneTree] to be shown.
See also [ImmediateMesh], [MeshDataTool] and [SurfaceTool] for procedural geometry generation.
[b]Note:[/b] Godot uses clockwise [url=https://learnopengl.com/Advanced-OpenGL/Face-culling]winding order[/url] for front faces of triangle primitive modes.
*/
type Instance [1]gdclass.ArrayMesh

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.ArrayMesh

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsArrayMesh() Instance
}

/*
Adds name for a blend shape that will be added with [method add_surface_from_arrays]. Must be called before surface is added.
*/
func (self Instance) AddBlendShape(name string) { //gd:ArrayMesh.add_blend_shape
	Advanced(self).AddBlendShape(String.Name(String.New(name)))
}

/*
Returns the number of blend shapes that the [ArrayMesh] holds.
*/
func (self Instance) GetBlendShapeCount() int { //gd:ArrayMesh.get_blend_shape_count
	return int(int(Advanced(self).GetBlendShapeCount()))
}

/*
Returns the name of the blend shape at this index.
*/
func (self Instance) GetBlendShapeName(index int) string { //gd:ArrayMesh.get_blend_shape_name
	return string(Advanced(self).GetBlendShapeName(int64(index)).String())
}

/*
Sets the name of the blend shape at this index.
*/
func (self Instance) SetBlendShapeName(index int, name string) { //gd:ArrayMesh.set_blend_shape_name
	Advanced(self).SetBlendShapeName(int64(index), String.Name(String.New(name)))
}

/*
Removes all blend shapes from this [ArrayMesh].
*/
func (self Instance) ClearBlendShapes() { //gd:ArrayMesh.clear_blend_shapes
	Advanced(self).ClearBlendShapes()
}

/*
Creates a new surface. [method Mesh.get_surface_count] will become the [code]surf_idx[/code] for this new surface.
Surfaces are created to be rendered using a [param primitive], which may be any of the values defined in [enum Mesh.PrimitiveType].
The [param arrays] argument is an array of arrays. Each of the [constant Mesh.ARRAY_MAX] elements contains an array with some of the mesh data for this surface as described by the corresponding member of [enum Mesh.ArrayType] or [code]null[/code] if it is not used by the surface. For example, [code]arrays[0][/code] is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this surface into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array (or be an exact multiple of the vertex array's length, when multiple elements of a sub-array correspond to a single vertex) or be empty, except for [constant Mesh.ARRAY_INDEX] if it is used.
The [param blend_shapes] argument is an array of vertex data for each blend shape. Each element is an array of the same structure as [param arrays], but [constant Mesh.ARRAY_VERTEX], [constant Mesh.ARRAY_NORMAL], and [constant Mesh.ARRAY_TANGENT] are set if and only if they are set in [param arrays] and all other entries are [code]null[/code].
The [param lods] argument is a dictionary with [float] keys and [PackedInt32Array] values. Each entry in the dictionary represents an LOD level of the surface, where the value is the [constant Mesh.ARRAY_INDEX] array to use for the LOD level and the key is roughly proportional to the distance at which the LOD stats being used. I.e., increasing the key of an LOD also increases the distance that the objects has to be from the camera before the LOD is used.
The [param flags] argument is the bitwise OR of, as required: One value of [enum Mesh.ArrayCustomFormat] left shifted by [code]ARRAY_FORMAT_CUSTOMn_SHIFT[/code] for each custom channel in use, [constant Mesh.ARRAY_FLAG_USE_DYNAMIC_UPDATE], [constant Mesh.ARRAY_FLAG_USE_8_BONE_WEIGHTS], or [constant Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY].
[b]Note:[/b] When using indices, it is recommended to only use points, lines, or triangles.
*/
func (self Instance) AddSurfaceFromArrays(primitive Mesh.PrimitiveType, arrays []any) { //gd:ArrayMesh.add_surface_from_arrays
	Advanced(self).AddSurfaceFromArrays(primitive, gd.EngineArrayFromSlice(arrays), gd.ArrayFromSlice[Array.Contains[Array.Any]]([1][][]any{}[0]), Dictionary.Nil, 0)
}

/*
Creates a new surface. [method Mesh.get_surface_count] will become the [code]surf_idx[/code] for this new surface.
Surfaces are created to be rendered using a [param primitive], which may be any of the values defined in [enum Mesh.PrimitiveType].
The [param arrays] argument is an array of arrays. Each of the [constant Mesh.ARRAY_MAX] elements contains an array with some of the mesh data for this surface as described by the corresponding member of [enum Mesh.ArrayType] or [code]null[/code] if it is not used by the surface. For example, [code]arrays[0][/code] is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this surface into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array (or be an exact multiple of the vertex array's length, when multiple elements of a sub-array correspond to a single vertex) or be empty, except for [constant Mesh.ARRAY_INDEX] if it is used.
The [param blend_shapes] argument is an array of vertex data for each blend shape. Each element is an array of the same structure as [param arrays], but [constant Mesh.ARRAY_VERTEX], [constant Mesh.ARRAY_NORMAL], and [constant Mesh.ARRAY_TANGENT] are set if and only if they are set in [param arrays] and all other entries are [code]null[/code].
The [param lods] argument is a dictionary with [float] keys and [PackedInt32Array] values. Each entry in the dictionary represents an LOD level of the surface, where the value is the [constant Mesh.ARRAY_INDEX] array to use for the LOD level and the key is roughly proportional to the distance at which the LOD stats being used. I.e., increasing the key of an LOD also increases the distance that the objects has to be from the camera before the LOD is used.
The [param flags] argument is the bitwise OR of, as required: One value of [enum Mesh.ArrayCustomFormat] left shifted by [code]ARRAY_FORMAT_CUSTOMn_SHIFT[/code] for each custom channel in use, [constant Mesh.ARRAY_FLAG_USE_DYNAMIC_UPDATE], [constant Mesh.ARRAY_FLAG_USE_8_BONE_WEIGHTS], or [constant Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY].
[b]Note:[/b] When using indices, it is recommended to only use points, lines, or triangles.
*/
func (self Expanded) AddSurfaceFromArrays(primitive Mesh.PrimitiveType, arrays []any, blend_shapes [][]any, lods map[float32][]int32, flags Mesh.ArrayFormat) { //gd:ArrayMesh.add_surface_from_arrays
	Advanced(self).AddSurfaceFromArrays(primitive, gd.EngineArrayFromSlice(arrays), gd.ArrayFromSlice[Array.Contains[Array.Any]](blend_shapes), gd.DictionaryFromMap(lods), flags)
}

/*
Removes all surfaces from this [ArrayMesh].
*/
func (self Instance) ClearSurfaces() { //gd:ArrayMesh.clear_surfaces
	Advanced(self).ClearSurfaces()
}

/*
Removes the surface at the given index from the Mesh, shifting surfaces with higher index down by one.
*/
func (self Instance) SurfaceRemove(surf_idx int) { //gd:ArrayMesh.surface_remove
	Advanced(self).SurfaceRemove(int64(surf_idx))
}
func (self Instance) SurfaceUpdateVertexRegion(surf_idx int, offset int, data []byte) { //gd:ArrayMesh.surface_update_vertex_region
	Advanced(self).SurfaceUpdateVertexRegion(int64(surf_idx), int64(offset), Packed.Bytes(Packed.New(data...)))
}
func (self Instance) SurfaceUpdateAttributeRegion(surf_idx int, offset int, data []byte) { //gd:ArrayMesh.surface_update_attribute_region
	Advanced(self).SurfaceUpdateAttributeRegion(int64(surf_idx), int64(offset), Packed.Bytes(Packed.New(data...)))
}
func (self Instance) SurfaceUpdateSkinRegion(surf_idx int, offset int, data []byte) { //gd:ArrayMesh.surface_update_skin_region
	Advanced(self).SurfaceUpdateSkinRegion(int64(surf_idx), int64(offset), Packed.Bytes(Packed.New(data...)))
}

/*
Returns the length in vertices of the vertex array in the requested surface (see [method add_surface_from_arrays]).
*/
func (self Instance) SurfaceGetArrayLen(surf_idx int) int { //gd:ArrayMesh.surface_get_array_len
	return int(int(Advanced(self).SurfaceGetArrayLen(int64(surf_idx))))
}

/*
Returns the length in indices of the index array in the requested surface (see [method add_surface_from_arrays]).
*/
func (self Instance) SurfaceGetArrayIndexLen(surf_idx int) int { //gd:ArrayMesh.surface_get_array_index_len
	return int(int(Advanced(self).SurfaceGetArrayIndexLen(int64(surf_idx))))
}

/*
Returns the format mask of the requested surface (see [method add_surface_from_arrays]).
*/
func (self Instance) SurfaceGetFormat(surf_idx int) Mesh.ArrayFormat { //gd:ArrayMesh.surface_get_format
	return Mesh.ArrayFormat(Advanced(self).SurfaceGetFormat(int64(surf_idx)))
}

/*
Returns the primitive type of the requested surface (see [method add_surface_from_arrays]).
*/
func (self Instance) SurfaceGetPrimitiveType(surf_idx int) Mesh.PrimitiveType { //gd:ArrayMesh.surface_get_primitive_type
	return Mesh.PrimitiveType(Advanced(self).SurfaceGetPrimitiveType(int64(surf_idx)))
}

/*
Returns the index of the first surface with this name held within this [ArrayMesh]. If none are found, -1 is returned.
*/
func (self Instance) SurfaceFindByName(name string) int { //gd:ArrayMesh.surface_find_by_name
	return int(int(Advanced(self).SurfaceFindByName(String.New(name))))
}

/*
Sets a name for a given surface.
*/
func (self Instance) SurfaceSetName(surf_idx int, name string) { //gd:ArrayMesh.surface_set_name
	Advanced(self).SurfaceSetName(int64(surf_idx), String.New(name))
}

/*
Gets the name assigned to this surface.
*/
func (self Instance) SurfaceGetName(surf_idx int) string { //gd:ArrayMesh.surface_get_name
	return string(Advanced(self).SurfaceGetName(int64(surf_idx)).String())
}

/*
Regenerates tangents for each of the [ArrayMesh]'s surfaces.
*/
func (self Instance) RegenNormalMaps() { //gd:ArrayMesh.regen_normal_maps
	Advanced(self).RegenNormalMaps()
}

/*
Performs a UV unwrap on the [ArrayMesh] to prepare the mesh for lightmapping.
*/
func (self Instance) LightmapUnwrap(transform Transform3D.BasisOrigin, texel_size Float.X) error { //gd:ArrayMesh.lightmap_unwrap
	return error(gd.ToError(Advanced(self).LightmapUnwrap(Transform3D.BasisOrigin(transform), float64(texel_size))))
}

/*
Returns the [ArrayMesh] used to draw the debug collision for this [Shape3D].
*/
func GetDebug(peer Shape3D.Instance) Instance { //gd:Shape3D.get_debug_mesh
	return Instance(Shape3D.Advanced(peer).GetDebugMesh())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.ArrayMesh

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Extension[T]) AsObject() [1]gd.Object     { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("ArrayMesh"))
	casted := Instance{*(*gdclass.ArrayMesh)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) BlendShapeMode() Mesh.BlendShapeMode {
	return Mesh.BlendShapeMode(class(self).GetBlendShapeMode())
}

func (self Instance) SetBlendShapeMode(value Mesh.BlendShapeMode) {
	class(self).SetBlendShapeMode(value)
}

func (self Instance) CustomAabb() AABB.PositionSize {
	return AABB.PositionSize(class(self).GetCustomAabb())
}

func (self Instance) SetCustomAabb(value AABB.PositionSize) {
	class(self).SetCustomAabb(AABB.PositionSize(value))
}

func (self Instance) ShadowMesh() Instance {
	return Instance(class(self).GetShadowMesh())
}

func (self Instance) SetShadowMesh(value Instance) {
	class(self).SetShadowMesh(value)
}

/*
Adds name for a blend shape that will be added with [method add_surface_from_arrays]. Must be called before surface is added.
*/
//go:nosplit
func (self class) AddBlendShape(name String.Name) { //gd:ArrayMesh.add_blend_shape
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalStringName(name)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_add_blend_shape, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the number of blend shapes that the [ArrayMesh] holds.
*/
//go:nosplit
func (self class) GetBlendShapeCount() int64 { //gd:ArrayMesh.get_blend_shape_count
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_get_blend_shape_count, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the name of the blend shape at this index.
*/
//go:nosplit
func (self class) GetBlendShapeName(index int64) String.Name { //gd:ArrayMesh.get_blend_shape_name
	var frame = callframe.New()
	callframe.Arg(frame, index)
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_get_blend_shape_name, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret.Get()))))
	frame.Free()
	return ret
}

/*
Sets the name of the blend shape at this index.
*/
//go:nosplit
func (self class) SetBlendShapeName(index int64, name String.Name) { //gd:ArrayMesh.set_blend_shape_name
	var frame = callframe.New()
	callframe.Arg(frame, index)
	callframe.Arg(frame, pointers.Get(gd.InternalStringName(name)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_set_blend_shape_name, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Removes all blend shapes from this [ArrayMesh].
*/
//go:nosplit
func (self class) ClearBlendShapes() { //gd:ArrayMesh.clear_blend_shapes
	var frame = callframe.New()
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_clear_blend_shapes, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SetBlendShapeMode(mode Mesh.BlendShapeMode) { //gd:ArrayMesh.set_blend_shape_mode
	var frame = callframe.New()
	callframe.Arg(frame, mode)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_set_blend_shape_mode, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetBlendShapeMode() Mesh.BlendShapeMode { //gd:ArrayMesh.get_blend_shape_mode
	var frame = callframe.New()
	var r_ret = callframe.Ret[Mesh.BlendShapeMode](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_get_blend_shape_mode, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Creates a new surface. [method Mesh.get_surface_count] will become the [code]surf_idx[/code] for this new surface.
Surfaces are created to be rendered using a [param primitive], which may be any of the values defined in [enum Mesh.PrimitiveType].
The [param arrays] argument is an array of arrays. Each of the [constant Mesh.ARRAY_MAX] elements contains an array with some of the mesh data for this surface as described by the corresponding member of [enum Mesh.ArrayType] or [code]null[/code] if it is not used by the surface. For example, [code]arrays[0][/code] is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this surface into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array (or be an exact multiple of the vertex array's length, when multiple elements of a sub-array correspond to a single vertex) or be empty, except for [constant Mesh.ARRAY_INDEX] if it is used.
The [param blend_shapes] argument is an array of vertex data for each blend shape. Each element is an array of the same structure as [param arrays], but [constant Mesh.ARRAY_VERTEX], [constant Mesh.ARRAY_NORMAL], and [constant Mesh.ARRAY_TANGENT] are set if and only if they are set in [param arrays] and all other entries are [code]null[/code].
The [param lods] argument is a dictionary with [float] keys and [PackedInt32Array] values. Each entry in the dictionary represents an LOD level of the surface, where the value is the [constant Mesh.ARRAY_INDEX] array to use for the LOD level and the key is roughly proportional to the distance at which the LOD stats being used. I.e., increasing the key of an LOD also increases the distance that the objects has to be from the camera before the LOD is used.
The [param flags] argument is the bitwise OR of, as required: One value of [enum Mesh.ArrayCustomFormat] left shifted by [code]ARRAY_FORMAT_CUSTOMn_SHIFT[/code] for each custom channel in use, [constant Mesh.ARRAY_FLAG_USE_DYNAMIC_UPDATE], [constant Mesh.ARRAY_FLAG_USE_8_BONE_WEIGHTS], or [constant Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY].
[b]Note:[/b] When using indices, it is recommended to only use points, lines, or triangles.
*/
//go:nosplit
func (self class) AddSurfaceFromArrays(primitive Mesh.PrimitiveType, arrays Array.Any, blend_shapes Array.Contains[Array.Any], lods Dictionary.Any, flags Mesh.ArrayFormat) { //gd:ArrayMesh.add_surface_from_arrays
	var frame = callframe.New()
	callframe.Arg(frame, primitive)
	callframe.Arg(frame, pointers.Get(gd.InternalArray(arrays)))
	callframe.Arg(frame, pointers.Get(gd.InternalArray(blend_shapes)))
	callframe.Arg(frame, pointers.Get(gd.InternalDictionary(lods)))
	callframe.Arg(frame, flags)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_add_surface_from_arrays, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Removes all surfaces from this [ArrayMesh].
*/
//go:nosplit
func (self class) ClearSurfaces() { //gd:ArrayMesh.clear_surfaces
	var frame = callframe.New()
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_clear_surfaces, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Removes the surface at the given index from the Mesh, shifting surfaces with higher index down by one.
*/
//go:nosplit
func (self class) SurfaceRemove(surf_idx int64) { //gd:ArrayMesh.surface_remove
	var frame = callframe.New()
	callframe.Arg(frame, surf_idx)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_surface_remove, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SurfaceUpdateVertexRegion(surf_idx int64, offset int64, data Packed.Bytes) { //gd:ArrayMesh.surface_update_vertex_region
	var frame = callframe.New()
	callframe.Arg(frame, surf_idx)
	callframe.Arg(frame, offset)
	callframe.Arg(frame, pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](data))))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_surface_update_vertex_region, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SurfaceUpdateAttributeRegion(surf_idx int64, offset int64, data Packed.Bytes) { //gd:ArrayMesh.surface_update_attribute_region
	var frame = callframe.New()
	callframe.Arg(frame, surf_idx)
	callframe.Arg(frame, offset)
	callframe.Arg(frame, pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](data))))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_surface_update_attribute_region, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SurfaceUpdateSkinRegion(surf_idx int64, offset int64, data Packed.Bytes) { //gd:ArrayMesh.surface_update_skin_region
	var frame = callframe.New()
	callframe.Arg(frame, surf_idx)
	callframe.Arg(frame, offset)
	callframe.Arg(frame, pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](data))))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_surface_update_skin_region, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the length in vertices of the vertex array in the requested surface (see [method add_surface_from_arrays]).
*/
//go:nosplit
func (self class) SurfaceGetArrayLen(surf_idx int64) int64 { //gd:ArrayMesh.surface_get_array_len
	var frame = callframe.New()
	callframe.Arg(frame, surf_idx)
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_surface_get_array_len, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the length in indices of the index array in the requested surface (see [method add_surface_from_arrays]).
*/
//go:nosplit
func (self class) SurfaceGetArrayIndexLen(surf_idx int64) int64 { //gd:ArrayMesh.surface_get_array_index_len
	var frame = callframe.New()
	callframe.Arg(frame, surf_idx)
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_surface_get_array_index_len, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the format mask of the requested surface (see [method add_surface_from_arrays]).
*/
//go:nosplit
func (self class) SurfaceGetFormat(surf_idx int64) Mesh.ArrayFormat { //gd:ArrayMesh.surface_get_format
	var frame = callframe.New()
	callframe.Arg(frame, surf_idx)
	var r_ret = callframe.Ret[Mesh.ArrayFormat](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_surface_get_format, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the primitive type of the requested surface (see [method add_surface_from_arrays]).
*/
//go:nosplit
func (self class) SurfaceGetPrimitiveType(surf_idx int64) Mesh.PrimitiveType { //gd:ArrayMesh.surface_get_primitive_type
	var frame = callframe.New()
	callframe.Arg(frame, surf_idx)
	var r_ret = callframe.Ret[Mesh.PrimitiveType](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_surface_get_primitive_type, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the index of the first surface with this name held within this [ArrayMesh]. If none are found, -1 is returned.
*/
//go:nosplit
func (self class) SurfaceFindByName(name String.Readable) int64 { //gd:ArrayMesh.surface_find_by_name
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(name)))
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_surface_find_by_name, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Sets a name for a given surface.
*/
//go:nosplit
func (self class) SurfaceSetName(surf_idx int64, name String.Readable) { //gd:ArrayMesh.surface_set_name
	var frame = callframe.New()
	callframe.Arg(frame, surf_idx)
	callframe.Arg(frame, pointers.Get(gd.InternalString(name)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_surface_set_name, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Gets the name assigned to this surface.
*/
//go:nosplit
func (self class) SurfaceGetName(surf_idx int64) String.Readable { //gd:ArrayMesh.surface_get_name
	var frame = callframe.New()
	callframe.Arg(frame, surf_idx)
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_surface_get_name, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Regenerates tangents for each of the [ArrayMesh]'s surfaces.
*/
//go:nosplit
func (self class) RegenNormalMaps() { //gd:ArrayMesh.regen_normal_maps
	var frame = callframe.New()
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_regen_normal_maps, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Performs a UV unwrap on the [ArrayMesh] to prepare the mesh for lightmapping.
*/
//go:nosplit
func (self class) LightmapUnwrap(transform Transform3D.BasisOrigin, texel_size float64) Error.Code { //gd:ArrayMesh.lightmap_unwrap
	var frame = callframe.New()
	callframe.Arg(frame, gd.Transposed(transform))
	callframe.Arg(frame, texel_size)
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_lightmap_unwrap, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Error.Code(r_ret.Get())
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetCustomAabb(aabb AABB.PositionSize) { //gd:ArrayMesh.set_custom_aabb
	var frame = callframe.New()
	callframe.Arg(frame, aabb)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_set_custom_aabb, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetCustomAabb() AABB.PositionSize { //gd:ArrayMesh.get_custom_aabb
	var frame = callframe.New()
	var r_ret = callframe.Ret[AABB.PositionSize](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_get_custom_aabb, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetShadowMesh(mesh [1]gdclass.ArrayMesh) { //gd:ArrayMesh.set_shadow_mesh
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(mesh[0])[0])
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_set_shadow_mesh, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetShadowMesh() [1]gdclass.ArrayMesh { //gd:ArrayMesh.get_shadow_mesh
	var frame = callframe.New()
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ArrayMesh.Bind_get_shadow_mesh, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.ArrayMesh{gd.PointerWithOwnershipTransferredToGo[gdclass.ArrayMesh](r_ret.Get())}
	frame.Free()
	return ret
}
func (self class) AsArrayMesh() Advanced        { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsArrayMesh() Instance     { return *((*Instance)(unsafe.Pointer(&self))) }
func (self Extension[T]) AsArrayMesh() Instance { return self.Super().AsArrayMesh() }
func (self class) AsMesh() Mesh.Advanced        { return *((*Mesh.Advanced)(unsafe.Pointer(&self))) }
func (self Extension[T]) AsMesh() Mesh.Instance { return self.Super().AsMesh() }
func (self Instance) AsMesh() Mesh.Instance     { return *((*Mesh.Instance)(unsafe.Pointer(&self))) }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Mesh.Advanced(self.AsMesh()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Mesh.Instance(self.AsMesh()), name)
	}
}
func init() {
	gdclass.Register("ArrayMesh", func(ptr gd.Object) any { return [1]gdclass.ArrayMesh{*(*gdclass.ArrayMesh)(unsafe.Pointer(&ptr))} })
}
