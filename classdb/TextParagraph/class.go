// Code generated by the generate package DO NOT EDIT

// Package TextParagraph provides methods for working with TextParagraph object instances.
package TextParagraph

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Font"
import "graphics.gd/classdb/GUI"
import "graphics.gd/classdb/TextServer"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/Rect2"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2"
import "graphics.gd/variant/Vector2i"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Abstraction over [TextServer] for handling a single paragraph of text.
*/
type Instance [1]gdclass.TextParagraph

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	clear                        gdextension.MethodForClass `hash:"3218959716"`
	set_direction                gdextension.MethodForClass `hash:"1418190634"`
	get_direction                gdextension.MethodForClass `hash:"2516697328"`
	set_custom_punctuation       gdextension.MethodForClass `hash:"83702148"`
	get_custom_punctuation       gdextension.MethodForClass `hash:"201670096"`
	set_orientation              gdextension.MethodForClass `hash:"42823726"`
	get_orientation              gdextension.MethodForClass `hash:"175768116"`
	set_preserve_invalid         gdextension.MethodForClass `hash:"2586408642"`
	get_preserve_invalid         gdextension.MethodForClass `hash:"36873697"`
	set_preserve_control         gdextension.MethodForClass `hash:"2586408642"`
	get_preserve_control         gdextension.MethodForClass `hash:"36873697"`
	set_bidi_override            gdextension.MethodForClass `hash:"381264803"`
	set_dropcap                  gdextension.MethodForClass `hash:"2498990330"`
	clear_dropcap                gdextension.MethodForClass `hash:"3218959716"`
	add_string                   gdextension.MethodForClass `hash:"621426851"`
	add_object                   gdextension.MethodForClass `hash:"1316529304"`
	resize_object                gdextension.MethodForClass `hash:"2095776372"`
	set_alignment                gdextension.MethodForClass `hash:"2312603777"`
	get_alignment                gdextension.MethodForClass `hash:"341400642"`
	tab_align                    gdextension.MethodForClass `hash:"2899603908"`
	set_break_flags              gdextension.MethodForClass `hash:"2809697122"`
	get_break_flags              gdextension.MethodForClass `hash:"2340632602"`
	set_justification_flags      gdextension.MethodForClass `hash:"2877345813"`
	get_justification_flags      gdextension.MethodForClass `hash:"1583363614"`
	set_text_overrun_behavior    gdextension.MethodForClass `hash:"1008890932"`
	get_text_overrun_behavior    gdextension.MethodForClass `hash:"3779142101"`
	set_ellipsis_char            gdextension.MethodForClass `hash:"83702148"`
	get_ellipsis_char            gdextension.MethodForClass `hash:"201670096"`
	set_width                    gdextension.MethodForClass `hash:"373806689"`
	get_width                    gdextension.MethodForClass `hash:"1740695150"`
	get_non_wrapped_size         gdextension.MethodForClass `hash:"3341600327"`
	get_size                     gdextension.MethodForClass `hash:"3341600327"`
	get_rid                      gdextension.MethodForClass `hash:"2944877500"`
	get_line_rid                 gdextension.MethodForClass `hash:"495598643"`
	get_dropcap_rid              gdextension.MethodForClass `hash:"2944877500"`
	get_line_count               gdextension.MethodForClass `hash:"3905245786"`
	set_max_lines_visible        gdextension.MethodForClass `hash:"1286410249"`
	get_max_lines_visible        gdextension.MethodForClass `hash:"3905245786"`
	set_line_spacing             gdextension.MethodForClass `hash:"373806689"`
	get_line_spacing             gdextension.MethodForClass `hash:"1740695150"`
	get_line_objects             gdextension.MethodForClass `hash:"663333327"`
	get_line_object_rect         gdextension.MethodForClass `hash:"204315017"`
	get_line_size                gdextension.MethodForClass `hash:"2299179447"`
	get_line_range               gdextension.MethodForClass `hash:"880721226"`
	get_line_ascent              gdextension.MethodForClass `hash:"2339986948"`
	get_line_descent             gdextension.MethodForClass `hash:"2339986948"`
	get_line_width               gdextension.MethodForClass `hash:"2339986948"`
	get_line_underline_position  gdextension.MethodForClass `hash:"2339986948"`
	get_line_underline_thickness gdextension.MethodForClass `hash:"2339986948"`
	get_dropcap_size             gdextension.MethodForClass `hash:"3341600327"`
	get_dropcap_lines            gdextension.MethodForClass `hash:"3905245786"`
	draw                         gdextension.MethodForClass `hash:"1567802413"`
	draw_outline                 gdextension.MethodForClass `hash:"1893131224"`
	draw_line                    gdextension.MethodForClass `hash:"1242169894"`
	draw_line_outline            gdextension.MethodForClass `hash:"2664926980"`
	draw_dropcap                 gdextension.MethodForClass `hash:"856975658"`
	draw_dropcap_outline         gdextension.MethodForClass `hash:"1343401456"`
	hit_test                     gdextension.MethodForClass `hash:"3820158470"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("TextParagraph")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.TextParagraph

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsTextParagraph() Instance
}

/*
Clears text paragraph (removes text and inline objects).
*/
func (self Instance) Clear() { //gd:TextParagraph.clear
	Advanced(self).Clear()
}

/*
Overrides BiDi for the structured text.
Override ranges should cover full source text without overlaps. BiDi algorithm will be used on each range separately.
*/
func (self Instance) SetBidiOverride(override []any) { //gd:TextParagraph.set_bidi_override
	Advanced(self).SetBidiOverride(gd.EngineArrayFromSlice(override))
}

/*
Sets drop cap, overrides previously set drop cap. Drop cap (dropped capital) is a decorative element at the beginning of a paragraph that is larger than the rest of the text.
*/
func (self Instance) SetDropcap(text string, font Font.Instance, font_size int) bool { //gd:TextParagraph.set_dropcap
	return bool(Advanced(self).SetDropcap(String.New(text), font, int64(font_size), Rect2.PositionSize(gd.NewRect2(0, 0, 0, 0)), String.New("")))
}

/*
Sets drop cap, overrides previously set drop cap. Drop cap (dropped capital) is a decorative element at the beginning of a paragraph that is larger than the rest of the text.
*/
func (self Expanded) SetDropcap(text string, font Font.Instance, font_size int, dropcap_margins Rect2.PositionSize, language string) bool { //gd:TextParagraph.set_dropcap
	return bool(Advanced(self).SetDropcap(String.New(text), font, int64(font_size), Rect2.PositionSize(dropcap_margins), String.New(language)))
}

/*
Removes dropcap.
*/
func (self Instance) ClearDropcap() { //gd:TextParagraph.clear_dropcap
	Advanced(self).ClearDropcap()
}

/*
Adds text span and font to draw it.
*/
func (self Instance) AddString(text string, font Font.Instance, font_size int) bool { //gd:TextParagraph.add_string
	return bool(Advanced(self).AddString(String.New(text), font, int64(font_size), String.New(""), variant.New([1]any{}[0])))
}

/*
Adds text span and font to draw it.
*/
func (self Expanded) AddString(text string, font Font.Instance, font_size int, language string, meta any) bool { //gd:TextParagraph.add_string
	return bool(Advanced(self).AddString(String.New(text), font, int64(font_size), String.New(language), variant.New(meta)))
}

/*
Adds inline object to the text buffer, [param key] must be unique. In the text, object is represented as [param length] object replacement characters.
*/
func (self Instance) AddObject(key any, size Vector2.XY) bool { //gd:TextParagraph.add_object
	return bool(Advanced(self).AddObject(variant.New(key), Vector2.XY(size), 5, int64(1), float64(0.0)))
}

/*
Adds inline object to the text buffer, [param key] must be unique. In the text, object is represented as [param length] object replacement characters.
*/
func (self Expanded) AddObject(key any, size Vector2.XY, inline_align GUI.InlineAlignment, length int, baseline Float.X) bool { //gd:TextParagraph.add_object
	return bool(Advanced(self).AddObject(variant.New(key), Vector2.XY(size), inline_align, int64(length), float64(baseline)))
}

/*
Sets new size and alignment of embedded object.
*/
func (self Instance) ResizeObject(key any, size Vector2.XY) bool { //gd:TextParagraph.resize_object
	return bool(Advanced(self).ResizeObject(variant.New(key), Vector2.XY(size), 5, float64(0.0)))
}

/*
Sets new size and alignment of embedded object.
*/
func (self Expanded) ResizeObject(key any, size Vector2.XY, inline_align GUI.InlineAlignment, baseline Float.X) bool { //gd:TextParagraph.resize_object
	return bool(Advanced(self).ResizeObject(variant.New(key), Vector2.XY(size), inline_align, float64(baseline)))
}

/*
Aligns paragraph to the given tab-stops.
*/
func (self Instance) TabAlign(tab_stops []float32) { //gd:TextParagraph.tab_align
	Advanced(self).TabAlign(Packed.New(tab_stops...))
}

/*
Returns the size of the bounding box of the paragraph, without line breaks.
*/
func (self Instance) GetNonWrappedSize() Vector2.XY { //gd:TextParagraph.get_non_wrapped_size
	return Vector2.XY(Advanced(self).GetNonWrappedSize())
}

/*
Returns the size of the bounding box of the paragraph.
*/
func (self Instance) GetSize() Vector2.XY { //gd:TextParagraph.get_size
	return Vector2.XY(Advanced(self).GetSize())
}

/*
Returns TextServer full string buffer RID.
*/
func (self Instance) GetRid() RID.TextBuffer { //gd:TextParagraph.get_rid
	return RID.TextBuffer(Advanced(self).GetRid())
}

/*
Returns TextServer line buffer RID.
*/
func (self Instance) GetLineRid(line int) RID.TextBuffer { //gd:TextParagraph.get_line_rid
	return RID.TextBuffer(Advanced(self).GetLineRid(int64(line)))
}

/*
Returns drop cap text buffer RID.
*/
func (self Instance) GetDropcapRid() RID.TextBuffer { //gd:TextParagraph.get_dropcap_rid
	return RID.TextBuffer(Advanced(self).GetDropcapRid())
}

/*
Returns number of lines in the paragraph.
*/
func (self Instance) GetLineCount() int { //gd:TextParagraph.get_line_count
	return int(int(Advanced(self).GetLineCount()))
}

/*
Returns array of inline objects in the line.
*/
func (self Instance) GetLineObjects(line int) []any { //gd:TextParagraph.get_line_objects
	return []any(gd.ArrayAs[[]any](gd.InternalArray(Advanced(self).GetLineObjects(int64(line)))))
}

/*
Returns bounding rectangle of the inline object.
*/
func (self Instance) GetLineObjectRect(line int, key any) Rect2.PositionSize { //gd:TextParagraph.get_line_object_rect
	return Rect2.PositionSize(Advanced(self).GetLineObjectRect(int64(line), variant.New(key)))
}

/*
Returns size of the bounding box of the line of text. Returned size is rounded up.
*/
func (self Instance) GetLineSize(line int) Vector2.XY { //gd:TextParagraph.get_line_size
	return Vector2.XY(Advanced(self).GetLineSize(int64(line)))
}

/*
Returns character range of the line.
*/
func (self Instance) GetLineRange(line int) Vector2i.XY { //gd:TextParagraph.get_line_range
	return Vector2i.XY(Advanced(self).GetLineRange(int64(line)))
}

/*
Returns the text line ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).
*/
func (self Instance) GetLineAscent(line int) Float.X { //gd:TextParagraph.get_line_ascent
	return Float.X(Float.X(Advanced(self).GetLineAscent(int64(line))))
}

/*
Returns the text line descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).
*/
func (self Instance) GetLineDescent(line int) Float.X { //gd:TextParagraph.get_line_descent
	return Float.X(Float.X(Advanced(self).GetLineDescent(int64(line))))
}

/*
Returns width (for horizontal layout) or height (for vertical) of the line of text.
*/
func (self Instance) GetLineWidth(line int) Float.X { //gd:TextParagraph.get_line_width
	return Float.X(Float.X(Advanced(self).GetLineWidth(int64(line))))
}

/*
Returns pixel offset of the underline below the baseline.
*/
func (self Instance) GetLineUnderlinePosition(line int) Float.X { //gd:TextParagraph.get_line_underline_position
	return Float.X(Float.X(Advanced(self).GetLineUnderlinePosition(int64(line))))
}

/*
Returns thickness of the underline.
*/
func (self Instance) GetLineUnderlineThickness(line int) Float.X { //gd:TextParagraph.get_line_underline_thickness
	return Float.X(Float.X(Advanced(self).GetLineUnderlineThickness(int64(line))))
}

/*
Returns drop cap bounding box size.
*/
func (self Instance) GetDropcapSize() Vector2.XY { //gd:TextParagraph.get_dropcap_size
	return Vector2.XY(Advanced(self).GetDropcapSize())
}

/*
Returns number of lines used by dropcap.
*/
func (self Instance) GetDropcapLines() int { //gd:TextParagraph.get_dropcap_lines
	return int(int(Advanced(self).GetDropcapLines()))
}

/*
Draw all lines of the text and drop cap into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Instance) Draw(canvas RID.Canvas, pos Vector2.XY) { //gd:TextParagraph.draw
	Advanced(self).Draw(RID.Any(canvas), Vector2.XY(pos), Color.RGBA(gd.Color{1, 1, 1, 1}), Color.RGBA(gd.Color{1, 1, 1, 1}))
}

/*
Draw all lines of the text and drop cap into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Expanded) Draw(canvas RID.Canvas, pos Vector2.XY, color Color.RGBA, dc_color Color.RGBA) { //gd:TextParagraph.draw
	Advanced(self).Draw(RID.Any(canvas), Vector2.XY(pos), Color.RGBA(color), Color.RGBA(dc_color))
}

/*
Draw outlines of all lines of the text and drop cap into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Instance) DrawOutline(canvas RID.Canvas, pos Vector2.XY) { //gd:TextParagraph.draw_outline
	Advanced(self).DrawOutline(RID.Any(canvas), Vector2.XY(pos), int64(1), Color.RGBA(gd.Color{1, 1, 1, 1}), Color.RGBA(gd.Color{1, 1, 1, 1}))
}

/*
Draw outlines of all lines of the text and drop cap into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Expanded) DrawOutline(canvas RID.Canvas, pos Vector2.XY, outline_size int, color Color.RGBA, dc_color Color.RGBA) { //gd:TextParagraph.draw_outline
	Advanced(self).DrawOutline(RID.Any(canvas), Vector2.XY(pos), int64(outline_size), Color.RGBA(color), Color.RGBA(dc_color))
}

/*
Draw single line of text into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Instance) DrawLine(canvas RID.Canvas, pos Vector2.XY, line int) { //gd:TextParagraph.draw_line
	Advanced(self).DrawLine(RID.Any(canvas), Vector2.XY(pos), int64(line), Color.RGBA(gd.Color{1, 1, 1, 1}))
}

/*
Draw single line of text into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Expanded) DrawLine(canvas RID.Canvas, pos Vector2.XY, line int, color Color.RGBA) { //gd:TextParagraph.draw_line
	Advanced(self).DrawLine(RID.Any(canvas), Vector2.XY(pos), int64(line), Color.RGBA(color))
}

/*
Draw outline of the single line of text into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Instance) DrawLineOutline(canvas RID.Canvas, pos Vector2.XY, line int) { //gd:TextParagraph.draw_line_outline
	Advanced(self).DrawLineOutline(RID.Any(canvas), Vector2.XY(pos), int64(line), int64(1), Color.RGBA(gd.Color{1, 1, 1, 1}))
}

/*
Draw outline of the single line of text into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Expanded) DrawLineOutline(canvas RID.Canvas, pos Vector2.XY, line int, outline_size int, color Color.RGBA) { //gd:TextParagraph.draw_line_outline
	Advanced(self).DrawLineOutline(RID.Any(canvas), Vector2.XY(pos), int64(line), int64(outline_size), Color.RGBA(color))
}

/*
Draw drop cap into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Instance) DrawDropcap(canvas RID.Canvas, pos Vector2.XY) { //gd:TextParagraph.draw_dropcap
	Advanced(self).DrawDropcap(RID.Any(canvas), Vector2.XY(pos), Color.RGBA(gd.Color{1, 1, 1, 1}))
}

/*
Draw drop cap into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Expanded) DrawDropcap(canvas RID.Canvas, pos Vector2.XY, color Color.RGBA) { //gd:TextParagraph.draw_dropcap
	Advanced(self).DrawDropcap(RID.Any(canvas), Vector2.XY(pos), Color.RGBA(color))
}

/*
Draw drop cap outline into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Instance) DrawDropcapOutline(canvas RID.Canvas, pos Vector2.XY) { //gd:TextParagraph.draw_dropcap_outline
	Advanced(self).DrawDropcapOutline(RID.Any(canvas), Vector2.XY(pos), int64(1), Color.RGBA(gd.Color{1, 1, 1, 1}))
}

/*
Draw drop cap outline into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
func (self Expanded) DrawDropcapOutline(canvas RID.Canvas, pos Vector2.XY, outline_size int, color Color.RGBA) { //gd:TextParagraph.draw_dropcap_outline
	Advanced(self).DrawDropcapOutline(RID.Any(canvas), Vector2.XY(pos), int64(outline_size), Color.RGBA(color))
}

/*
Returns caret character offset at the specified coordinates. This function always returns a valid position.
*/
func (self Instance) HitTest(coords Vector2.XY) int { //gd:TextParagraph.hit_test
	return int(int(Advanced(self).HitTest(Vector2.XY(coords))))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.TextParagraph

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.TextParagraph](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.TextParagraph](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.TextParagraph{pointers.Add[gdclass.TextParagraph]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.TextParagraph{pointers.New[gdclass.TextParagraph]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Direction() TextServer.Direction {
	return TextServer.Direction(class(self).GetDirection())
}

func (self Instance) SetDirection(value TextServer.Direction) {
	class(self).SetDirection(value)
}

func (self Instance) CustomPunctuation() string {
	return string(class(self).GetCustomPunctuation().String())
}

func (self Instance) SetCustomPunctuation(value string) {
	class(self).SetCustomPunctuation(String.New(value))
}

func (self Instance) Orientation() TextServer.Orientation {
	return TextServer.Orientation(class(self).GetOrientation())
}

func (self Instance) SetOrientation(value TextServer.Orientation) {
	class(self).SetOrientation(value)
}

func (self Instance) PreserveInvalid() bool {
	return bool(class(self).GetPreserveInvalid())
}

func (self Instance) SetPreserveInvalid(value bool) {
	class(self).SetPreserveInvalid(value)
}

func (self Instance) PreserveControl() bool {
	return bool(class(self).GetPreserveControl())
}

func (self Instance) SetPreserveControl(value bool) {
	class(self).SetPreserveControl(value)
}

func (self Instance) Alignment() GUI.HorizontalAlignment {
	return GUI.HorizontalAlignment(class(self).GetAlignment())
}

func (self Instance) SetAlignment(value GUI.HorizontalAlignment) {
	class(self).SetAlignment(value)
}

func (self Instance) BreakFlags() TextServer.LineBreakFlag {
	return TextServer.LineBreakFlag(class(self).GetBreakFlags())
}

func (self Instance) SetBreakFlags(value TextServer.LineBreakFlag) {
	class(self).SetBreakFlags(value)
}

func (self Instance) JustificationFlags() TextServer.JustificationFlag {
	return TextServer.JustificationFlag(class(self).GetJustificationFlags())
}

func (self Instance) SetJustificationFlags(value TextServer.JustificationFlag) {
	class(self).SetJustificationFlags(value)
}

func (self Instance) TextOverrunBehavior() TextServer.OverrunBehavior {
	return TextServer.OverrunBehavior(class(self).GetTextOverrunBehavior())
}

func (self Instance) SetTextOverrunBehavior(value TextServer.OverrunBehavior) {
	class(self).SetTextOverrunBehavior(value)
}

func (self Instance) EllipsisChar() string {
	return string(class(self).GetEllipsisChar().String())
}

func (self Instance) SetEllipsisChar(value string) {
	class(self).SetEllipsisChar(String.New(value))
}

func (self Instance) Width() Float.X {
	return Float.X(Float.X(class(self).GetWidth()))
}

func (self Instance) SetWidth(value Float.X) {
	class(self).SetWidth(float64(value))
}

func (self Instance) MaxLinesVisible() int {
	return int(int(class(self).GetMaxLinesVisible()))
}

func (self Instance) SetMaxLinesVisible(value int) {
	class(self).SetMaxLinesVisible(int64(value))
}

func (self Instance) LineSpacing() Float.X {
	return Float.X(Float.X(class(self).GetLineSpacing()))
}

func (self Instance) SetLineSpacing(value Float.X) {
	class(self).SetLineSpacing(float64(value))
}

/*
Clears text paragraph (removes text and inline objects).
*/
//go:nosplit
func (self class) Clear() { //gd:TextParagraph.clear
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear, 0, &struct{}{})
}

//go:nosplit
func (self class) SetDirection(direction TextServer.Direction) { //gd:TextParagraph.set_direction
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_direction, 0|(gdextension.SizeInt<<4), &struct{ direction TextServer.Direction }{direction})
}

//go:nosplit
func (self class) GetDirection() TextServer.Direction { //gd:TextParagraph.get_direction
	var r_ret = gdextension.Call[TextServer.Direction](gd.ObjectChecked(self.AsObject()), methods.get_direction, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCustomPunctuation(custom_punctuation String.Readable) { //gd:TextParagraph.set_custom_punctuation
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_custom_punctuation, 0|(gdextension.SizeString<<4), &struct{ custom_punctuation gdextension.String }{pointers.Get(gd.InternalString(custom_punctuation))})
}

//go:nosplit
func (self class) GetCustomPunctuation() String.Readable { //gd:TextParagraph.get_custom_punctuation
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_custom_punctuation, gdextension.SizeString, &struct{}{})
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetOrientation(orientation TextServer.Orientation) { //gd:TextParagraph.set_orientation
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_orientation, 0|(gdextension.SizeInt<<4), &struct{ orientation TextServer.Orientation }{orientation})
}

//go:nosplit
func (self class) GetOrientation() TextServer.Orientation { //gd:TextParagraph.get_orientation
	var r_ret = gdextension.Call[TextServer.Orientation](gd.ObjectChecked(self.AsObject()), methods.get_orientation, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPreserveInvalid(enabled bool) { //gd:TextParagraph.set_preserve_invalid
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_preserve_invalid, 0|(gdextension.SizeBool<<4), &struct{ enabled bool }{enabled})
}

//go:nosplit
func (self class) GetPreserveInvalid() bool { //gd:TextParagraph.get_preserve_invalid
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_preserve_invalid, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPreserveControl(enabled bool) { //gd:TextParagraph.set_preserve_control
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_preserve_control, 0|(gdextension.SizeBool<<4), &struct{ enabled bool }{enabled})
}

//go:nosplit
func (self class) GetPreserveControl() bool { //gd:TextParagraph.get_preserve_control
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_preserve_control, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Overrides BiDi for the structured text.
Override ranges should cover full source text without overlaps. BiDi algorithm will be used on each range separately.
*/
//go:nosplit
func (self class) SetBidiOverride(override Array.Any) { //gd:TextParagraph.set_bidi_override
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bidi_override, 0|(gdextension.SizeArray<<4), &struct{ override gdextension.Array }{pointers.Get(gd.InternalArray(override))})
}

/*
Sets drop cap, overrides previously set drop cap. Drop cap (dropped capital) is a decorative element at the beginning of a paragraph that is larger than the rest of the text.
*/
//go:nosplit
func (self class) SetDropcap(text String.Readable, font [1]gdclass.Font, font_size int64, dropcap_margins Rect2.PositionSize, language String.Readable) bool { //gd:TextParagraph.set_dropcap
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.set_dropcap, gdextension.SizeBool|(gdextension.SizeString<<4)|(gdextension.SizeObject<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeRect2<<16)|(gdextension.SizeString<<20), &struct {
		text            gdextension.String
		font            gdextension.Object
		font_size       int64
		dropcap_margins Rect2.PositionSize
		language        gdextension.String
	}{pointers.Get(gd.InternalString(text)), gdextension.Object(gd.ObjectChecked(font[0].AsObject())), font_size, dropcap_margins, pointers.Get(gd.InternalString(language))})
	var ret = r_ret
	return ret
}

/*
Removes dropcap.
*/
//go:nosplit
func (self class) ClearDropcap() { //gd:TextParagraph.clear_dropcap
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear_dropcap, 0, &struct{}{})
}

/*
Adds text span and font to draw it.
*/
//go:nosplit
func (self class) AddString(text String.Readable, font [1]gdclass.Font, font_size int64, language String.Readable, meta variant.Any) bool { //gd:TextParagraph.add_string
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.add_string, gdextension.SizeBool|(gdextension.SizeString<<4)|(gdextension.SizeObject<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeString<<16)|(gdextension.SizeVariant<<20), &struct {
		text      gdextension.String
		font      gdextension.Object
		font_size int64
		language  gdextension.String
		meta      gdextension.Variant
	}{pointers.Get(gd.InternalString(text)), gdextension.Object(gd.ObjectChecked(font[0].AsObject())), font_size, pointers.Get(gd.InternalString(language)), gdextension.Variant(pointers.Get(gd.InternalVariant(meta)))})
	var ret = r_ret
	return ret
}

/*
Adds inline object to the text buffer, [param key] must be unique. In the text, object is represented as [param length] object replacement characters.
*/
//go:nosplit
func (self class) AddObject(key variant.Any, size Vector2.XY, inline_align GUI.InlineAlignment, length int64, baseline float64) bool { //gd:TextParagraph.add_object
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.add_object, gdextension.SizeBool|(gdextension.SizeVariant<<4)|(gdextension.SizeVector2<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeInt<<16)|(gdextension.SizeFloat<<20), &struct {
		key          gdextension.Variant
		size         Vector2.XY
		inline_align GUI.InlineAlignment
		length       int64
		baseline     float64
	}{gdextension.Variant(pointers.Get(gd.InternalVariant(key))), size, inline_align, length, baseline})
	var ret = r_ret
	return ret
}

/*
Sets new size and alignment of embedded object.
*/
//go:nosplit
func (self class) ResizeObject(key variant.Any, size Vector2.XY, inline_align GUI.InlineAlignment, baseline float64) bool { //gd:TextParagraph.resize_object
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.resize_object, gdextension.SizeBool|(gdextension.SizeVariant<<4)|(gdextension.SizeVector2<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeFloat<<16), &struct {
		key          gdextension.Variant
		size         Vector2.XY
		inline_align GUI.InlineAlignment
		baseline     float64
	}{gdextension.Variant(pointers.Get(gd.InternalVariant(key))), size, inline_align, baseline})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAlignment(alignment GUI.HorizontalAlignment) { //gd:TextParagraph.set_alignment
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_alignment, 0|(gdextension.SizeInt<<4), &struct{ alignment GUI.HorizontalAlignment }{alignment})
}

//go:nosplit
func (self class) GetAlignment() GUI.HorizontalAlignment { //gd:TextParagraph.get_alignment
	var r_ret = gdextension.Call[GUI.HorizontalAlignment](gd.ObjectChecked(self.AsObject()), methods.get_alignment, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Aligns paragraph to the given tab-stops.
*/
//go:nosplit
func (self class) TabAlign(tab_stops Packed.Array[float32]) { //gd:TextParagraph.tab_align
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.tab_align, 0|(gdextension.SizePackedArray<<4), &struct {
		tab_stops gdextension.PackedArray[float32]
	}{pointers.Get(gd.InternalPacked[gd.PackedFloat32Array, float32](tab_stops))})
}

//go:nosplit
func (self class) SetBreakFlags(flags TextServer.LineBreakFlag) { //gd:TextParagraph.set_break_flags
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_break_flags, 0|(gdextension.SizeInt<<4), &struct{ flags TextServer.LineBreakFlag }{flags})
}

//go:nosplit
func (self class) GetBreakFlags() TextServer.LineBreakFlag { //gd:TextParagraph.get_break_flags
	var r_ret = gdextension.Call[TextServer.LineBreakFlag](gd.ObjectChecked(self.AsObject()), methods.get_break_flags, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetJustificationFlags(flags TextServer.JustificationFlag) { //gd:TextParagraph.set_justification_flags
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_justification_flags, 0|(gdextension.SizeInt<<4), &struct{ flags TextServer.JustificationFlag }{flags})
}

//go:nosplit
func (self class) GetJustificationFlags() TextServer.JustificationFlag { //gd:TextParagraph.get_justification_flags
	var r_ret = gdextension.Call[TextServer.JustificationFlag](gd.ObjectChecked(self.AsObject()), methods.get_justification_flags, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTextOverrunBehavior(overrun_behavior TextServer.OverrunBehavior) { //gd:TextParagraph.set_text_overrun_behavior
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_text_overrun_behavior, 0|(gdextension.SizeInt<<4), &struct{ overrun_behavior TextServer.OverrunBehavior }{overrun_behavior})
}

//go:nosplit
func (self class) GetTextOverrunBehavior() TextServer.OverrunBehavior { //gd:TextParagraph.get_text_overrun_behavior
	var r_ret = gdextension.Call[TextServer.OverrunBehavior](gd.ObjectChecked(self.AsObject()), methods.get_text_overrun_behavior, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEllipsisChar(char String.Readable) { //gd:TextParagraph.set_ellipsis_char
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_ellipsis_char, 0|(gdextension.SizeString<<4), &struct{ char gdextension.String }{pointers.Get(gd.InternalString(char))})
}

//go:nosplit
func (self class) GetEllipsisChar() String.Readable { //gd:TextParagraph.get_ellipsis_char
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_ellipsis_char, gdextension.SizeString, &struct{}{})
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetWidth(width float64) { //gd:TextParagraph.set_width
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_width, 0|(gdextension.SizeFloat<<4), &struct{ width float64 }{width})
}

//go:nosplit
func (self class) GetWidth() float64 { //gd:TextParagraph.get_width
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_width, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Returns the size of the bounding box of the paragraph, without line breaks.
*/
//go:nosplit
func (self class) GetNonWrappedSize() Vector2.XY { //gd:TextParagraph.get_non_wrapped_size
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_non_wrapped_size, gdextension.SizeVector2, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Returns the size of the bounding box of the paragraph.
*/
//go:nosplit
func (self class) GetSize() Vector2.XY { //gd:TextParagraph.get_size
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_size, gdextension.SizeVector2, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Returns TextServer full string buffer RID.
*/
//go:nosplit
func (self class) GetRid() RID.Any { //gd:TextParagraph.get_rid
	var r_ret = gdextension.Call[RID.Any](gd.ObjectChecked(self.AsObject()), methods.get_rid, gdextension.SizeRID, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Returns TextServer line buffer RID.
*/
//go:nosplit
func (self class) GetLineRid(line int64) RID.Any { //gd:TextParagraph.get_line_rid
	var r_ret = gdextension.Call[RID.Any](gd.ObjectChecked(self.AsObject()), methods.get_line_rid, gdextension.SizeRID|(gdextension.SizeInt<<4), &struct{ line int64 }{line})
	var ret = r_ret
	return ret
}

/*
Returns drop cap text buffer RID.
*/
//go:nosplit
func (self class) GetDropcapRid() RID.Any { //gd:TextParagraph.get_dropcap_rid
	var r_ret = gdextension.Call[RID.Any](gd.ObjectChecked(self.AsObject()), methods.get_dropcap_rid, gdextension.SizeRID, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Returns number of lines in the paragraph.
*/
//go:nosplit
func (self class) GetLineCount() int64 { //gd:TextParagraph.get_line_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_line_count, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMaxLinesVisible(max_lines_visible int64) { //gd:TextParagraph.set_max_lines_visible
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_max_lines_visible, 0|(gdextension.SizeInt<<4), &struct{ max_lines_visible int64 }{max_lines_visible})
}

//go:nosplit
func (self class) GetMaxLinesVisible() int64 { //gd:TextParagraph.get_max_lines_visible
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_max_lines_visible, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetLineSpacing(line_spacing float64) { //gd:TextParagraph.set_line_spacing
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_line_spacing, 0|(gdextension.SizeFloat<<4), &struct{ line_spacing float64 }{line_spacing})
}

//go:nosplit
func (self class) GetLineSpacing() float64 { //gd:TextParagraph.get_line_spacing
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_line_spacing, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Returns array of inline objects in the line.
*/
//go:nosplit
func (self class) GetLineObjects(line int64) Array.Any { //gd:TextParagraph.get_line_objects
	var r_ret = gdextension.Call[gdextension.Array](gd.ObjectChecked(self.AsObject()), methods.get_line_objects, gdextension.SizeArray|(gdextension.SizeInt<<4), &struct{ line int64 }{line})
	var ret = Array.Through(gd.ArrayProxy[variant.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

/*
Returns bounding rectangle of the inline object.
*/
//go:nosplit
func (self class) GetLineObjectRect(line int64, key variant.Any) Rect2.PositionSize { //gd:TextParagraph.get_line_object_rect
	var r_ret = gdextension.Call[Rect2.PositionSize](gd.ObjectChecked(self.AsObject()), methods.get_line_object_rect, gdextension.SizeRect2|(gdextension.SizeInt<<4)|(gdextension.SizeVariant<<8), &struct {
		line int64
		key  gdextension.Variant
	}{line, gdextension.Variant(pointers.Get(gd.InternalVariant(key)))})
	var ret = r_ret
	return ret
}

/*
Returns size of the bounding box of the line of text. Returned size is rounded up.
*/
//go:nosplit
func (self class) GetLineSize(line int64) Vector2.XY { //gd:TextParagraph.get_line_size
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_line_size, gdextension.SizeVector2|(gdextension.SizeInt<<4), &struct{ line int64 }{line})
	var ret = r_ret
	return ret
}

/*
Returns character range of the line.
*/
//go:nosplit
func (self class) GetLineRange(line int64) Vector2i.XY { //gd:TextParagraph.get_line_range
	var r_ret = gdextension.Call[Vector2i.XY](gd.ObjectChecked(self.AsObject()), methods.get_line_range, gdextension.SizeVector2i|(gdextension.SizeInt<<4), &struct{ line int64 }{line})
	var ret = r_ret
	return ret
}

/*
Returns the text line ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).
*/
//go:nosplit
func (self class) GetLineAscent(line int64) float64 { //gd:TextParagraph.get_line_ascent
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_line_ascent, gdextension.SizeFloat|(gdextension.SizeInt<<4), &struct{ line int64 }{line})
	var ret = r_ret
	return ret
}

/*
Returns the text line descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).
*/
//go:nosplit
func (self class) GetLineDescent(line int64) float64 { //gd:TextParagraph.get_line_descent
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_line_descent, gdextension.SizeFloat|(gdextension.SizeInt<<4), &struct{ line int64 }{line})
	var ret = r_ret
	return ret
}

/*
Returns width (for horizontal layout) or height (for vertical) of the line of text.
*/
//go:nosplit
func (self class) GetLineWidth(line int64) float64 { //gd:TextParagraph.get_line_width
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_line_width, gdextension.SizeFloat|(gdextension.SizeInt<<4), &struct{ line int64 }{line})
	var ret = r_ret
	return ret
}

/*
Returns pixel offset of the underline below the baseline.
*/
//go:nosplit
func (self class) GetLineUnderlinePosition(line int64) float64 { //gd:TextParagraph.get_line_underline_position
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_line_underline_position, gdextension.SizeFloat|(gdextension.SizeInt<<4), &struct{ line int64 }{line})
	var ret = r_ret
	return ret
}

/*
Returns thickness of the underline.
*/
//go:nosplit
func (self class) GetLineUnderlineThickness(line int64) float64 { //gd:TextParagraph.get_line_underline_thickness
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_line_underline_thickness, gdextension.SizeFloat|(gdextension.SizeInt<<4), &struct{ line int64 }{line})
	var ret = r_ret
	return ret
}

/*
Returns drop cap bounding box size.
*/
//go:nosplit
func (self class) GetDropcapSize() Vector2.XY { //gd:TextParagraph.get_dropcap_size
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_dropcap_size, gdextension.SizeVector2, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Returns number of lines used by dropcap.
*/
//go:nosplit
func (self class) GetDropcapLines() int64 { //gd:TextParagraph.get_dropcap_lines
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_dropcap_lines, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Draw all lines of the text and drop cap into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
//go:nosplit
func (self class) Draw(canvas RID.Any, pos Vector2.XY, color Color.RGBA, dc_color Color.RGBA) { //gd:TextParagraph.draw
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.draw, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector2<<8)|(gdextension.SizeColor<<12)|(gdextension.SizeColor<<16), &struct {
		canvas   RID.Any
		pos      Vector2.XY
		color    Color.RGBA
		dc_color Color.RGBA
	}{canvas, pos, color, dc_color})
}

/*
Draw outlines of all lines of the text and drop cap into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
//go:nosplit
func (self class) DrawOutline(canvas RID.Any, pos Vector2.XY, outline_size int64, color Color.RGBA, dc_color Color.RGBA) { //gd:TextParagraph.draw_outline
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.draw_outline, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector2<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeColor<<16)|(gdextension.SizeColor<<20), &struct {
		canvas       RID.Any
		pos          Vector2.XY
		outline_size int64
		color        Color.RGBA
		dc_color     Color.RGBA
	}{canvas, pos, outline_size, color, dc_color})
}

/*
Draw single line of text into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
//go:nosplit
func (self class) DrawLine(canvas RID.Any, pos Vector2.XY, line int64, color Color.RGBA) { //gd:TextParagraph.draw_line
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.draw_line, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector2<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeColor<<16), &struct {
		canvas RID.Any
		pos    Vector2.XY
		line   int64
		color  Color.RGBA
	}{canvas, pos, line, color})
}

/*
Draw outline of the single line of text into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
//go:nosplit
func (self class) DrawLineOutline(canvas RID.Any, pos Vector2.XY, line int64, outline_size int64, color Color.RGBA) { //gd:TextParagraph.draw_line_outline
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.draw_line_outline, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector2<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeInt<<16)|(gdextension.SizeColor<<20), &struct {
		canvas       RID.Any
		pos          Vector2.XY
		line         int64
		outline_size int64
		color        Color.RGBA
	}{canvas, pos, line, outline_size, color})
}

/*
Draw drop cap into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
//go:nosplit
func (self class) DrawDropcap(canvas RID.Any, pos Vector2.XY, color Color.RGBA) { //gd:TextParagraph.draw_dropcap
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.draw_dropcap, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector2<<8)|(gdextension.SizeColor<<12), &struct {
		canvas RID.Any
		pos    Vector2.XY
		color  Color.RGBA
	}{canvas, pos, color})
}

/*
Draw drop cap outline into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
*/
//go:nosplit
func (self class) DrawDropcapOutline(canvas RID.Any, pos Vector2.XY, outline_size int64, color Color.RGBA) { //gd:TextParagraph.draw_dropcap_outline
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.draw_dropcap_outline, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector2<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeColor<<16), &struct {
		canvas       RID.Any
		pos          Vector2.XY
		outline_size int64
		color        Color.RGBA
	}{canvas, pos, outline_size, color})
}

/*
Returns caret character offset at the specified coordinates. This function always returns a valid position.
*/
//go:nosplit
func (self class) HitTest(coords Vector2.XY) int64 { //gd:TextParagraph.hit_test
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.hit_test, gdextension.SizeInt|(gdextension.SizeVector2<<4), &struct{ coords Vector2.XY }{coords})
	var ret = r_ret
	return ret
}
func (self class) AsTextParagraph() Advanced {
	return Advanced{pointers.AsA[gdclass.TextParagraph](self[0])}
}
func (self Instance) AsTextParagraph() Instance {
	return Instance{pointers.AsA[gdclass.TextParagraph](self[0])}
}
func (self *Extension[T]) AsTextParagraph() Instance { return self.Super().AsTextParagraph() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("TextParagraph", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.TextParagraph](ptr)} })
}
