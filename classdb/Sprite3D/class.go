// Code generated by the generate package DO NOT EDIT

// Package Sprite3D provides methods for working with Sprite3D object instances.
package Sprite3D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/GeometryInstance3D"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/classdb/SpriteBase3D"
import "graphics.gd/classdb/Texture2D"
import "graphics.gd/classdb/VisualInstance3D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/Rect2"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2i"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A node that displays a 2D texture in a 3D environment. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation. See also [SpriteBase3D] where properties such as the billboard mode are defined.
*/
type Instance [1]gdclass.Sprite3D

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsSprite3D() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.Sprite3D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("Sprite3D"))
	casted := Instance{*(*gdclass.Sprite3D)(unsafe.Pointer(&object))}
	return casted
}

func (self Instance) Texture() Texture2D.Instance {
	return Texture2D.Instance(class(self).GetTexture())
}

func (self Instance) SetTexture(value Texture2D.Instance) {
	class(self).SetTexture(value)
}

func (self Instance) Hframes() int {
	return int(int(class(self).GetHframes()))
}

func (self Instance) SetHframes(value int) {
	class(self).SetHframes(int64(value))
}

func (self Instance) Vframes() int {
	return int(int(class(self).GetVframes()))
}

func (self Instance) SetVframes(value int) {
	class(self).SetVframes(int64(value))
}

func (self Instance) Frame() int {
	return int(int(class(self).GetFrame()))
}

func (self Instance) SetFrame(value int) {
	class(self).SetFrame(int64(value))
}

func (self Instance) FrameCoords() Vector2i.XY {
	return Vector2i.XY(class(self).GetFrameCoords())
}

func (self Instance) SetFrameCoords(value Vector2i.XY) {
	class(self).SetFrameCoords(Vector2i.XY(value))
}

func (self Instance) RegionEnabled() bool {
	return bool(class(self).IsRegionEnabled())
}

func (self Instance) SetRegionEnabled(value bool) {
	class(self).SetRegionEnabled(value)
}

func (self Instance) RegionRect() Rect2.PositionSize {
	return Rect2.PositionSize(class(self).GetRegionRect())
}

func (self Instance) SetRegionRect(value Rect2.PositionSize) {
	class(self).SetRegionRect(Rect2.PositionSize(value))
}

//go:nosplit
func (self class) SetTexture(texture [1]gdclass.Texture2D) { //gd:Sprite3D.set_texture
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Sprite3D.Bind_set_texture, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ texture gdextension.Object }{gdextension.Object(gd.ObjectChecked(texture[0].AsObject()))}))
}

//go:nosplit
func (self class) GetTexture() [1]gdclass.Texture2D { //gd:Sprite3D.get_texture
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.Sprite3D.Bind_get_texture, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Texture2D{gd.PointerWithOwnershipTransferredToGo[gdclass.Texture2D](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetRegionEnabled(enabled bool) { //gd:Sprite3D.set_region_enabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Sprite3D.Bind_set_region_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsRegionEnabled() bool { //gd:Sprite3D.is_region_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Sprite3D.Bind_is_region_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRegionRect(rect Rect2.PositionSize) { //gd:Sprite3D.set_region_rect
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Sprite3D.Bind_set_region_rect, 0|(gdextension.SizeRect2<<4), unsafe.Pointer(&struct{ rect Rect2.PositionSize }{rect}))
}

//go:nosplit
func (self class) GetRegionRect() Rect2.PositionSize { //gd:Sprite3D.get_region_rect
	var r_ret = gdunsafe.Call[Rect2.PositionSize](self.AsObject(), gd.Global.Methods.Sprite3D.Bind_get_region_rect, gdextension.SizeRect2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFrame(frame_ int64) { //gd:Sprite3D.set_frame
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Sprite3D.Bind_set_frame, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ frame_ int64 }{frame_}))
}

//go:nosplit
func (self class) GetFrame() int64 { //gd:Sprite3D.get_frame
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.Sprite3D.Bind_get_frame, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFrameCoords(coords Vector2i.XY) { //gd:Sprite3D.set_frame_coords
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Sprite3D.Bind_set_frame_coords, 0|(gdextension.SizeVector2i<<4), unsafe.Pointer(&struct{ coords Vector2i.XY }{coords}))
}

//go:nosplit
func (self class) GetFrameCoords() Vector2i.XY { //gd:Sprite3D.get_frame_coords
	var r_ret = gdunsafe.Call[Vector2i.XY](self.AsObject(), gd.Global.Methods.Sprite3D.Bind_get_frame_coords, gdextension.SizeVector2i, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVframes(vframes int64) { //gd:Sprite3D.set_vframes
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Sprite3D.Bind_set_vframes, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ vframes int64 }{vframes}))
}

//go:nosplit
func (self class) GetVframes() int64 { //gd:Sprite3D.get_vframes
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.Sprite3D.Bind_get_vframes, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHframes(hframes int64) { //gd:Sprite3D.set_hframes
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Sprite3D.Bind_set_hframes, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ hframes int64 }{hframes}))
}

//go:nosplit
func (self class) GetHframes() int64 { //gd:Sprite3D.get_hframes
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.Sprite3D.Bind_get_hframes, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self Instance) OnFrameChanged(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("frame_changed"), gd.NewCallable(cb), 0)
}

func (self Instance) OnTextureChanged(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("texture_changed"), gd.NewCallable(cb), 0)
}

func (self class) AsSprite3D() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsSprite3D() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsSprite3D() Instance { return self.Super().AsSprite3D() }
func (self class) AsSpriteBase3D() SpriteBase3D.Advanced {
	return *((*SpriteBase3D.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsSpriteBase3D() SpriteBase3D.Instance {
	return self.Super().AsSpriteBase3D()
}
func (self Instance) AsSpriteBase3D() SpriteBase3D.Instance {
	return *((*SpriteBase3D.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsGeometryInstance3D() GeometryInstance3D.Advanced {
	return *((*GeometryInstance3D.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsGeometryInstance3D() GeometryInstance3D.Instance {
	return self.Super().AsGeometryInstance3D()
}
func (self Instance) AsGeometryInstance3D() GeometryInstance3D.Instance {
	return *((*GeometryInstance3D.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsVisualInstance3D() VisualInstance3D.Advanced {
	return *((*VisualInstance3D.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisualInstance3D() VisualInstance3D.Instance {
	return self.Super().AsVisualInstance3D()
}
func (self Instance) AsVisualInstance3D() VisualInstance3D.Instance {
	return *((*VisualInstance3D.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode3D() Node3D.Advanced         { return *((*Node3D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode3D() Node3D.Instance { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance      { return *((*Node3D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsNode() Node.Advanced             { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance     { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance          { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(SpriteBase3D.Advanced(self.AsSpriteBase3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(SpriteBase3D.Instance(self.AsSpriteBase3D()), name)
	}
}
func init() {
	gdclass.Register("Sprite3D", func(ptr gd.Object) any { return [1]gdclass.Sprite3D{*(*gdclass.Sprite3D)(unsafe.Pointer(&ptr))} })
}
