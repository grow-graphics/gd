// Code generated by the generate package DO NOT EDIT

// Package ScriptEditor provides methods for working with ScriptEditor object instances.
package ScriptEditor

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Container"
import "graphics.gd/classdb/Control"
import "graphics.gd/classdb/EditorSyntaxHighlighter"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/PanelContainer"
import "graphics.gd/classdb/Script"
import "graphics.gd/classdb/ScriptEditorBase"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Godot editor's script editor.
[b]Note:[/b] This class shouldn't be instantiated directly. Instead, access the singleton using [method EditorInterface.get_script_editor].
*/
type Instance [1]gdclass.ScriptEditor

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsScriptEditor() Instance
}

/*
Returns the [ScriptEditorBase] object that the user is currently editing.
*/
func (self Instance) GetCurrentEditor() ScriptEditorBase.Instance { //gd:ScriptEditor.get_current_editor
	return ScriptEditorBase.Instance(Advanced(self).GetCurrentEditor())
}

/*
Returns an array with all [ScriptEditorBase] objects which are currently open in editor.
*/
func (self Instance) GetOpenScriptEditors() []ScriptEditorBase.Instance { //gd:ScriptEditor.get_open_script_editors
	return []ScriptEditorBase.Instance(gd.ArrayAs[[]ScriptEditorBase.Instance](gd.InternalArray(Advanced(self).GetOpenScriptEditors())))
}

/*
Returns array of breakpoints.
*/
func (self Instance) GetBreakpoints() []string { //gd:ScriptEditor.get_breakpoints
	return []string(Advanced(self).GetBreakpoints().Strings())
}

/*
Registers the [EditorSyntaxHighlighter] to the editor, the [EditorSyntaxHighlighter] will be available on all open scripts.
[b]Note:[/b] Does not apply to scripts that are already opened.
*/
func (self Instance) RegisterSyntaxHighlighter(syntax_highlighter EditorSyntaxHighlighter.Instance) { //gd:ScriptEditor.register_syntax_highlighter
	Advanced(self).RegisterSyntaxHighlighter(syntax_highlighter)
}

/*
Unregisters the [EditorSyntaxHighlighter] from the editor.
[b]Note:[/b] The [EditorSyntaxHighlighter] will still be applied to scripts that are already opened.
*/
func (self Instance) UnregisterSyntaxHighlighter(syntax_highlighter EditorSyntaxHighlighter.Instance) { //gd:ScriptEditor.unregister_syntax_highlighter
	Advanced(self).UnregisterSyntaxHighlighter(syntax_highlighter)
}

/*
Goes to the specified line in the current script.
*/
func (self Instance) GotoLine(line_number int) { //gd:ScriptEditor.goto_line
	Advanced(self).GotoLine(int64(line_number))
}

/*
Returns a [Script] that is currently active in editor.
*/
func (self Instance) GetCurrentScript() Script.Instance { //gd:ScriptEditor.get_current_script
	return Script.Instance(Advanced(self).GetCurrentScript())
}

/*
Returns an array with all [Script] objects which are currently open in editor.
*/
func (self Instance) GetOpenScripts() []Script.Instance { //gd:ScriptEditor.get_open_scripts
	return []Script.Instance(gd.ArrayAs[[]Script.Instance](gd.InternalArray(Advanced(self).GetOpenScripts())))
}

/*
Opens the script create dialog. The script will extend [param base_name]. The file extension can be omitted from [param base_path]. It will be added based on the selected scripting language.
*/
func (self Instance) OpenScriptCreateDialog(base_name string, base_path string) { //gd:ScriptEditor.open_script_create_dialog
	Advanced(self).OpenScriptCreateDialog(String.New(base_name), String.New(base_path))
}

/*
Opens help for the given topic. The [param topic] is an encoded string that controls which class, method, constant, signal, annotation, property, or theme item should be focused.
The supported [param topic] formats include [code]class_name:class[/code], [code]class_method:class:method[/code], [code]class_constant:class:constant[/code], [code]class_signal:class:signal[/code], [code]class_annotation:class:@annotation[/code], [code]class_property:class:property[/code], and [code]class_theme_item:class:item[/code], where [code]class[/code] is the class name, [code]method[/code] is the method name, [code]constant[/code] is the constant name, [code]signal[/code] is the signal name, [code]annotation[/code] is the annotation name, [code]property[/code] is the property name, and [code]item[/code] is the theme item.
[codeblock]
# Shows help for the Node class.
class_name:Node
# Shows help for the global min function.
# Global objects are accessible in the `@GlobalScope` namespace, shown here.
class_method:@GlobalScope:min
# Shows help for get_viewport in the Node class.
class_method:Node:get_viewport
# Shows help for the Input constant MOUSE_BUTTON_MIDDLE.
class_constant:Input:MOUSE_BUTTON_MIDDLE
# Shows help for the BaseButton signal pressed.
class_signal:BaseButton:pressed
# Shows help for the CanvasItem property visible.
class_property:CanvasItem:visible
# Shows help for the GDScript annotation export.
# Annotations should be prefixed with the `@` symbol in the descriptor, as shown here.
class_annotation:@GDScript:@export
# Shows help for the GraphNode theme item named panel_selected.
class_theme_item:GraphNode:panel_selected
[/codeblock]
*/
func (self Instance) GotoHelp(topic string) { //gd:ScriptEditor.goto_help
	Advanced(self).GotoHelp(String.New(topic))
}

/*
Updates the documentation for the given [param script] if the script's documentation is currently open.
[b]Note:[/b] This should be called whenever the script is changed to keep the open documentation state up to date.
*/
func (self Instance) UpdateDocsFromScript(script Script.Instance) { //gd:ScriptEditor.update_docs_from_script
	Advanced(self).UpdateDocsFromScript(script)
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.ScriptEditor

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("ScriptEditor"))
	casted := Instance{*(*gdclass.ScriptEditor)(unsafe.Pointer(&object))}
	return casted
}

/*
Returns the [ScriptEditorBase] object that the user is currently editing.
*/
//go:nosplit
func (self class) GetCurrentEditor() [1]gdclass.ScriptEditorBase { //gd:ScriptEditor.get_current_editor
	var frame = callframe.New()
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ScriptEditor.Bind_get_current_editor, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.ScriptEditorBase{gd.PointerMustAssertInstanceID[gdclass.ScriptEditorBase](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Returns an array with all [ScriptEditorBase] objects which are currently open in editor.
*/
//go:nosplit
func (self class) GetOpenScriptEditors() Array.Contains[[1]gdclass.ScriptEditorBase] { //gd:ScriptEditor.get_open_script_editors
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ScriptEditor.Bind_get_open_script_editors, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Array.Through(gd.ArrayProxy[[1]gdclass.ScriptEditorBase]{}, pointers.Pack(pointers.New[gd.Array](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Returns array of breakpoints.
*/
//go:nosplit
func (self class) GetBreakpoints() Packed.Strings { //gd:ScriptEditor.get_breakpoints
	var frame = callframe.New()
	var r_ret = callframe.Ret[gd.PackedPointers](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ScriptEditor.Bind_get_breakpoints, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Packed.Strings(Array.Through(gd.PackedStringArrayProxy{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret.Get()))))
	frame.Free()
	return ret
}

/*
Registers the [EditorSyntaxHighlighter] to the editor, the [EditorSyntaxHighlighter] will be available on all open scripts.
[b]Note:[/b] Does not apply to scripts that are already opened.
*/
//go:nosplit
func (self class) RegisterSyntaxHighlighter(syntax_highlighter [1]gdclass.EditorSyntaxHighlighter) { //gd:ScriptEditor.register_syntax_highlighter
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(syntax_highlighter[0])[0])
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ScriptEditor.Bind_register_syntax_highlighter, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Unregisters the [EditorSyntaxHighlighter] from the editor.
[b]Note:[/b] The [EditorSyntaxHighlighter] will still be applied to scripts that are already opened.
*/
//go:nosplit
func (self class) UnregisterSyntaxHighlighter(syntax_highlighter [1]gdclass.EditorSyntaxHighlighter) { //gd:ScriptEditor.unregister_syntax_highlighter
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(syntax_highlighter[0])[0])
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ScriptEditor.Bind_unregister_syntax_highlighter, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Goes to the specified line in the current script.
*/
//go:nosplit
func (self class) GotoLine(line_number int64) { //gd:ScriptEditor.goto_line
	var frame = callframe.New()
	callframe.Arg(frame, line_number)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ScriptEditor.Bind_goto_line, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns a [Script] that is currently active in editor.
*/
//go:nosplit
func (self class) GetCurrentScript() [1]gdclass.Script { //gd:ScriptEditor.get_current_script
	var frame = callframe.New()
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ScriptEditor.Bind_get_current_script, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.Script{gd.PointerWithOwnershipTransferredToGo[gdclass.Script](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Returns an array with all [Script] objects which are currently open in editor.
*/
//go:nosplit
func (self class) GetOpenScripts() Array.Contains[[1]gdclass.Script] { //gd:ScriptEditor.get_open_scripts
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ScriptEditor.Bind_get_open_scripts, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Array.Through(gd.ArrayProxy[[1]gdclass.Script]{}, pointers.Pack(pointers.New[gd.Array](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Opens the script create dialog. The script will extend [param base_name]. The file extension can be omitted from [param base_path]. It will be added based on the selected scripting language.
*/
//go:nosplit
func (self class) OpenScriptCreateDialog(base_name String.Readable, base_path String.Readable) { //gd:ScriptEditor.open_script_create_dialog
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(base_name)))
	callframe.Arg(frame, pointers.Get(gd.InternalString(base_path)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ScriptEditor.Bind_open_script_create_dialog, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Opens help for the given topic. The [param topic] is an encoded string that controls which class, method, constant, signal, annotation, property, or theme item should be focused.
The supported [param topic] formats include [code]class_name:class[/code], [code]class_method:class:method[/code], [code]class_constant:class:constant[/code], [code]class_signal:class:signal[/code], [code]class_annotation:class:@annotation[/code], [code]class_property:class:property[/code], and [code]class_theme_item:class:item[/code], where [code]class[/code] is the class name, [code]method[/code] is the method name, [code]constant[/code] is the constant name, [code]signal[/code] is the signal name, [code]annotation[/code] is the annotation name, [code]property[/code] is the property name, and [code]item[/code] is the theme item.
[codeblock]
# Shows help for the Node class.
class_name:Node
# Shows help for the global min function.
# Global objects are accessible in the `@GlobalScope` namespace, shown here.
class_method:@GlobalScope:min
# Shows help for get_viewport in the Node class.
class_method:Node:get_viewport
# Shows help for the Input constant MOUSE_BUTTON_MIDDLE.
class_constant:Input:MOUSE_BUTTON_MIDDLE
# Shows help for the BaseButton signal pressed.
class_signal:BaseButton:pressed
# Shows help for the CanvasItem property visible.
class_property:CanvasItem:visible
# Shows help for the GDScript annotation export.
# Annotations should be prefixed with the `@` symbol in the descriptor, as shown here.
class_annotation:@GDScript:@export
# Shows help for the GraphNode theme item named panel_selected.
class_theme_item:GraphNode:panel_selected
[/codeblock]
*/
//go:nosplit
func (self class) GotoHelp(topic String.Readable) { //gd:ScriptEditor.goto_help
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(topic)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ScriptEditor.Bind_goto_help, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Updates the documentation for the given [param script] if the script's documentation is currently open.
[b]Note:[/b] This should be called whenever the script is changed to keep the open documentation state up to date.
*/
//go:nosplit
func (self class) UpdateDocsFromScript(script [1]gdclass.Script) { //gd:ScriptEditor.update_docs_from_script
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(script[0])[0])
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.ScriptEditor.Bind_update_docs_from_script, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}
func (self Instance) OnEditorScriptChanged(cb func(script Script.Instance)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("editor_script_changed"), gd.NewCallable(cb), 0)
}

func (self Instance) OnScriptClose(cb func(script Script.Instance)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("script_close"), gd.NewCallable(cb), 0)
}

func (self class) AsScriptEditor() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsScriptEditor() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsScriptEditor() Instance { return self.Super().AsScriptEditor() }
func (self class) AsPanelContainer() PanelContainer.Advanced {
	return *((*PanelContainer.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsPanelContainer() PanelContainer.Instance {
	return self.Super().AsPanelContainer()
}
func (self Instance) AsPanelContainer() PanelContainer.Instance {
	return *((*PanelContainer.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsContainer() Container.Advanced {
	return *((*Container.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsContainer() Container.Instance { return self.Super().AsContainer() }
func (self Instance) AsContainer() Container.Instance {
	return *((*Container.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsControl() Control.Advanced         { return *((*Control.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsControl() Control.Instance { return self.Super().AsControl() }
func (self Instance) AsControl() Control.Instance {
	return *((*Control.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return *((*CanvasItem.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return *((*CanvasItem.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(PanelContainer.Advanced(self.AsPanelContainer()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(PanelContainer.Instance(self.AsPanelContainer()), name)
	}
}
func init() {
	gdclass.Register("ScriptEditor", func(ptr gd.Object) any {
		return [1]gdclass.ScriptEditor{*(*gdclass.ScriptEditor)(unsafe.Pointer(&ptr))}
	})
}
