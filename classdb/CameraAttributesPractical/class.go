// Code generated by the generate package DO NOT EDIT

// Package CameraAttributesPractical provides methods for working with CameraAttributesPractical object instances.
package CameraAttributesPractical

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/CameraAttributes"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Controls camera-specific attributes such as auto-exposure, depth of field, and exposure override.
When used in a [WorldEnvironment] it provides default settings for exposure, auto-exposure, and depth of field that will be used by all cameras without their own [CameraAttributes], including the editor camera. When used in a [Camera3D] it will override any [CameraAttributes] set in the [WorldEnvironment]. When used in [VoxelGI] or [LightmapGI], only the exposure settings will be used.
*/
type Instance [1]gdclass.CameraAttributesPractical

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_dof_blur_far_enabled          gdextension.MethodForClass `hash:"2586408642"`
	is_dof_blur_far_enabled           gdextension.MethodForClass `hash:"36873697"`
	set_dof_blur_far_distance         gdextension.MethodForClass `hash:"373806689"`
	get_dof_blur_far_distance         gdextension.MethodForClass `hash:"1740695150"`
	set_dof_blur_far_transition       gdextension.MethodForClass `hash:"373806689"`
	get_dof_blur_far_transition       gdextension.MethodForClass `hash:"1740695150"`
	set_dof_blur_near_enabled         gdextension.MethodForClass `hash:"2586408642"`
	is_dof_blur_near_enabled          gdextension.MethodForClass `hash:"36873697"`
	set_dof_blur_near_distance        gdextension.MethodForClass `hash:"373806689"`
	get_dof_blur_near_distance        gdextension.MethodForClass `hash:"1740695150"`
	set_dof_blur_near_transition      gdextension.MethodForClass `hash:"373806689"`
	get_dof_blur_near_transition      gdextension.MethodForClass `hash:"1740695150"`
	set_dof_blur_amount               gdextension.MethodForClass `hash:"373806689"`
	get_dof_blur_amount               gdextension.MethodForClass `hash:"1740695150"`
	set_auto_exposure_max_sensitivity gdextension.MethodForClass `hash:"373806689"`
	get_auto_exposure_max_sensitivity gdextension.MethodForClass `hash:"1740695150"`
	set_auto_exposure_min_sensitivity gdextension.MethodForClass `hash:"373806689"`
	get_auto_exposure_min_sensitivity gdextension.MethodForClass `hash:"1740695150"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("CameraAttributesPractical")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsCameraAttributesPractical() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.CameraAttributesPractical

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.CameraAttributesPractical](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.CameraAttributesPractical](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.CameraAttributesPractical{pointers.Add[gdclass.CameraAttributesPractical]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.CameraAttributesPractical{pointers.New[gdclass.CameraAttributesPractical]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) DofBlurFarEnabled() bool {
	return bool(class(self).IsDofBlurFarEnabled())
}

func (self Instance) SetDofBlurFarEnabled(value bool) {
	class(self).SetDofBlurFarEnabled(value)
}

func (self Instance) DofBlurFarDistance() Float.X {
	return Float.X(Float.X(class(self).GetDofBlurFarDistance()))
}

func (self Instance) SetDofBlurFarDistance(value Float.X) {
	class(self).SetDofBlurFarDistance(float64(value))
}

func (self Instance) DofBlurFarTransition() Float.X {
	return Float.X(Float.X(class(self).GetDofBlurFarTransition()))
}

func (self Instance) SetDofBlurFarTransition(value Float.X) {
	class(self).SetDofBlurFarTransition(float64(value))
}

func (self Instance) DofBlurNearEnabled() bool {
	return bool(class(self).IsDofBlurNearEnabled())
}

func (self Instance) SetDofBlurNearEnabled(value bool) {
	class(self).SetDofBlurNearEnabled(value)
}

func (self Instance) DofBlurNearDistance() Float.X {
	return Float.X(Float.X(class(self).GetDofBlurNearDistance()))
}

func (self Instance) SetDofBlurNearDistance(value Float.X) {
	class(self).SetDofBlurNearDistance(float64(value))
}

func (self Instance) DofBlurNearTransition() Float.X {
	return Float.X(Float.X(class(self).GetDofBlurNearTransition()))
}

func (self Instance) SetDofBlurNearTransition(value Float.X) {
	class(self).SetDofBlurNearTransition(float64(value))
}

func (self Instance) DofBlurAmount() Float.X {
	return Float.X(Float.X(class(self).GetDofBlurAmount()))
}

func (self Instance) SetDofBlurAmount(value Float.X) {
	class(self).SetDofBlurAmount(float64(value))
}

func (self Instance) AutoExposureMinSensitivity() Float.X {
	return Float.X(Float.X(class(self).GetAutoExposureMinSensitivity()))
}

func (self Instance) SetAutoExposureMinSensitivity(value Float.X) {
	class(self).SetAutoExposureMinSensitivity(float64(value))
}

func (self Instance) AutoExposureMaxSensitivity() Float.X {
	return Float.X(Float.X(class(self).GetAutoExposureMaxSensitivity()))
}

func (self Instance) SetAutoExposureMaxSensitivity(value Float.X) {
	class(self).SetAutoExposureMaxSensitivity(float64(value))
}

//go:nosplit
func (self class) SetDofBlurFarEnabled(enabled bool) { //gd:CameraAttributesPractical.set_dof_blur_far_enabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_dof_blur_far_enabled, 0|(gdextension.SizeBool<<4), &struct{ enabled bool }{enabled})
}

//go:nosplit
func (self class) IsDofBlurFarEnabled() bool { //gd:CameraAttributesPractical.is_dof_blur_far_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_dof_blur_far_enabled, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDofBlurFarDistance(distance float64) { //gd:CameraAttributesPractical.set_dof_blur_far_distance
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_dof_blur_far_distance, 0|(gdextension.SizeFloat<<4), &struct{ distance float64 }{distance})
}

//go:nosplit
func (self class) GetDofBlurFarDistance() float64 { //gd:CameraAttributesPractical.get_dof_blur_far_distance
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_dof_blur_far_distance, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDofBlurFarTransition(distance float64) { //gd:CameraAttributesPractical.set_dof_blur_far_transition
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_dof_blur_far_transition, 0|(gdextension.SizeFloat<<4), &struct{ distance float64 }{distance})
}

//go:nosplit
func (self class) GetDofBlurFarTransition() float64 { //gd:CameraAttributesPractical.get_dof_blur_far_transition
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_dof_blur_far_transition, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDofBlurNearEnabled(enabled bool) { //gd:CameraAttributesPractical.set_dof_blur_near_enabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_dof_blur_near_enabled, 0|(gdextension.SizeBool<<4), &struct{ enabled bool }{enabled})
}

//go:nosplit
func (self class) IsDofBlurNearEnabled() bool { //gd:CameraAttributesPractical.is_dof_blur_near_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_dof_blur_near_enabled, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDofBlurNearDistance(distance float64) { //gd:CameraAttributesPractical.set_dof_blur_near_distance
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_dof_blur_near_distance, 0|(gdextension.SizeFloat<<4), &struct{ distance float64 }{distance})
}

//go:nosplit
func (self class) GetDofBlurNearDistance() float64 { //gd:CameraAttributesPractical.get_dof_blur_near_distance
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_dof_blur_near_distance, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDofBlurNearTransition(distance float64) { //gd:CameraAttributesPractical.set_dof_blur_near_transition
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_dof_blur_near_transition, 0|(gdextension.SizeFloat<<4), &struct{ distance float64 }{distance})
}

//go:nosplit
func (self class) GetDofBlurNearTransition() float64 { //gd:CameraAttributesPractical.get_dof_blur_near_transition
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_dof_blur_near_transition, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDofBlurAmount(amount float64) { //gd:CameraAttributesPractical.set_dof_blur_amount
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_dof_blur_amount, 0|(gdextension.SizeFloat<<4), &struct{ amount float64 }{amount})
}

//go:nosplit
func (self class) GetDofBlurAmount() float64 { //gd:CameraAttributesPractical.get_dof_blur_amount
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_dof_blur_amount, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAutoExposureMaxSensitivity(max_sensitivity float64) { //gd:CameraAttributesPractical.set_auto_exposure_max_sensitivity
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_auto_exposure_max_sensitivity, 0|(gdextension.SizeFloat<<4), &struct{ max_sensitivity float64 }{max_sensitivity})
}

//go:nosplit
func (self class) GetAutoExposureMaxSensitivity() float64 { //gd:CameraAttributesPractical.get_auto_exposure_max_sensitivity
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_auto_exposure_max_sensitivity, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAutoExposureMinSensitivity(min_sensitivity float64) { //gd:CameraAttributesPractical.set_auto_exposure_min_sensitivity
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_auto_exposure_min_sensitivity, 0|(gdextension.SizeFloat<<4), &struct{ min_sensitivity float64 }{min_sensitivity})
}

//go:nosplit
func (self class) GetAutoExposureMinSensitivity() float64 { //gd:CameraAttributesPractical.get_auto_exposure_min_sensitivity
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_auto_exposure_min_sensitivity, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsCameraAttributesPractical() Advanced {
	return Advanced{pointers.AsA[gdclass.CameraAttributesPractical](self[0])}
}
func (self Instance) AsCameraAttributesPractical() Instance {
	return Instance{pointers.AsA[gdclass.CameraAttributesPractical](self[0])}
}
func (self *Extension[T]) AsCameraAttributesPractical() Instance {
	return self.Super().AsCameraAttributesPractical()
}
func (self class) AsCameraAttributes() CameraAttributes.Advanced {
	return CameraAttributes.Advanced{pointers.AsA[gdclass.CameraAttributes](self[0])}
}
func (self *Extension[T]) AsCameraAttributes() CameraAttributes.Instance {
	return self.Super().AsCameraAttributes()
}
func (self Instance) AsCameraAttributes() CameraAttributes.Instance {
	return CameraAttributes.Instance{pointers.AsA[gdclass.CameraAttributes](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(CameraAttributes.Advanced(self.AsCameraAttributes()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(CameraAttributes.Instance(self.AsCameraAttributes()), name)
	}
}
func init() {
	gdclass.Register("CameraAttributesPractical", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.CameraAttributesPractical](ptr)} })
}
