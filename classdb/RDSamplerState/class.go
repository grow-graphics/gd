// Code generated by the generate package DO NOT EDIT

// Package RDSamplerState provides methods for working with RDSamplerState object instances.
package RDSamplerState

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Rendering"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This object is used by [RenderingDevice].
*/
type Instance [1]gdclass.RDSamplerState

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsRDSamplerState() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.RDSamplerState

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("RDSamplerState"))
	casted := Instance{*(*gdclass.RDSamplerState)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) MagFilter() Rendering.SamplerFilter {
	return Rendering.SamplerFilter(class(self).GetMagFilter())
}

func (self Instance) SetMagFilter(value Rendering.SamplerFilter) {
	class(self).SetMagFilter(value)
}

func (self Instance) MinFilter() Rendering.SamplerFilter {
	return Rendering.SamplerFilter(class(self).GetMinFilter())
}

func (self Instance) SetMinFilter(value Rendering.SamplerFilter) {
	class(self).SetMinFilter(value)
}

func (self Instance) MipFilter() Rendering.SamplerFilter {
	return Rendering.SamplerFilter(class(self).GetMipFilter())
}

func (self Instance) SetMipFilter(value Rendering.SamplerFilter) {
	class(self).SetMipFilter(value)
}

func (self Instance) RepeatU() Rendering.SamplerRepeatMode {
	return Rendering.SamplerRepeatMode(class(self).GetRepeatU())
}

func (self Instance) SetRepeatU(value Rendering.SamplerRepeatMode) {
	class(self).SetRepeatU(value)
}

func (self Instance) RepeatV() Rendering.SamplerRepeatMode {
	return Rendering.SamplerRepeatMode(class(self).GetRepeatV())
}

func (self Instance) SetRepeatV(value Rendering.SamplerRepeatMode) {
	class(self).SetRepeatV(value)
}

func (self Instance) RepeatW() Rendering.SamplerRepeatMode {
	return Rendering.SamplerRepeatMode(class(self).GetRepeatW())
}

func (self Instance) SetRepeatW(value Rendering.SamplerRepeatMode) {
	class(self).SetRepeatW(value)
}

func (self Instance) LodBias() Float.X {
	return Float.X(Float.X(class(self).GetLodBias()))
}

func (self Instance) SetLodBias(value Float.X) {
	class(self).SetLodBias(float64(value))
}

func (self Instance) UseAnisotropy() bool {
	return bool(class(self).GetUseAnisotropy())
}

func (self Instance) SetUseAnisotropy(value bool) {
	class(self).SetUseAnisotropy(value)
}

func (self Instance) AnisotropyMax() Float.X {
	return Float.X(Float.X(class(self).GetAnisotropyMax()))
}

func (self Instance) SetAnisotropyMax(value Float.X) {
	class(self).SetAnisotropyMax(float64(value))
}

func (self Instance) EnableCompare() bool {
	return bool(class(self).GetEnableCompare())
}

func (self Instance) SetEnableCompare(value bool) {
	class(self).SetEnableCompare(value)
}

func (self Instance) CompareOp() Rendering.CompareOperator {
	return Rendering.CompareOperator(class(self).GetCompareOp())
}

func (self Instance) SetCompareOp(value Rendering.CompareOperator) {
	class(self).SetCompareOp(value)
}

func (self Instance) MinLod() Float.X {
	return Float.X(Float.X(class(self).GetMinLod()))
}

func (self Instance) SetMinLod(value Float.X) {
	class(self).SetMinLod(float64(value))
}

func (self Instance) MaxLod() Float.X {
	return Float.X(Float.X(class(self).GetMaxLod()))
}

func (self Instance) SetMaxLod(value Float.X) {
	class(self).SetMaxLod(float64(value))
}

func (self Instance) BorderColor() Rendering.SamplerBorderColor {
	return Rendering.SamplerBorderColor(class(self).GetBorderColor())
}

func (self Instance) SetBorderColor(value Rendering.SamplerBorderColor) {
	class(self).SetBorderColor(value)
}

func (self Instance) UnnormalizedUvw() bool {
	return bool(class(self).GetUnnormalizedUvw())
}

func (self Instance) SetUnnormalizedUvw(value bool) {
	class(self).SetUnnormalizedUvw(value)
}

//go:nosplit
func (self class) SetMagFilter(p_member Rendering.SamplerFilter) { //gd:RDSamplerState.set_mag_filter
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_mag_filter), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.SamplerFilter }{p_member}))
}

//go:nosplit
func (self class) GetMagFilter() Rendering.SamplerFilter { //gd:RDSamplerState.get_mag_filter
	var r_ret = gdextension.Call[Rendering.SamplerFilter](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_mag_filter), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMinFilter(p_member Rendering.SamplerFilter) { //gd:RDSamplerState.set_min_filter
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_min_filter), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.SamplerFilter }{p_member}))
}

//go:nosplit
func (self class) GetMinFilter() Rendering.SamplerFilter { //gd:RDSamplerState.get_min_filter
	var r_ret = gdextension.Call[Rendering.SamplerFilter](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_min_filter), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMipFilter(p_member Rendering.SamplerFilter) { //gd:RDSamplerState.set_mip_filter
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_mip_filter), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.SamplerFilter }{p_member}))
}

//go:nosplit
func (self class) GetMipFilter() Rendering.SamplerFilter { //gd:RDSamplerState.get_mip_filter
	var r_ret = gdextension.Call[Rendering.SamplerFilter](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_mip_filter), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRepeatU(p_member Rendering.SamplerRepeatMode) { //gd:RDSamplerState.set_repeat_u
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_repeat_u), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.SamplerRepeatMode }{p_member}))
}

//go:nosplit
func (self class) GetRepeatU() Rendering.SamplerRepeatMode { //gd:RDSamplerState.get_repeat_u
	var r_ret = gdextension.Call[Rendering.SamplerRepeatMode](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_repeat_u), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRepeatV(p_member Rendering.SamplerRepeatMode) { //gd:RDSamplerState.set_repeat_v
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_repeat_v), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.SamplerRepeatMode }{p_member}))
}

//go:nosplit
func (self class) GetRepeatV() Rendering.SamplerRepeatMode { //gd:RDSamplerState.get_repeat_v
	var r_ret = gdextension.Call[Rendering.SamplerRepeatMode](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_repeat_v), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRepeatW(p_member Rendering.SamplerRepeatMode) { //gd:RDSamplerState.set_repeat_w
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_repeat_w), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.SamplerRepeatMode }{p_member}))
}

//go:nosplit
func (self class) GetRepeatW() Rendering.SamplerRepeatMode { //gd:RDSamplerState.get_repeat_w
	var r_ret = gdextension.Call[Rendering.SamplerRepeatMode](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_repeat_w), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetLodBias(p_member float64) { //gd:RDSamplerState.set_lod_bias
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_lod_bias), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ p_member float64 }{p_member}))
}

//go:nosplit
func (self class) GetLodBias() float64 { //gd:RDSamplerState.get_lod_bias
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_lod_bias), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetUseAnisotropy(p_member bool) { //gd:RDSamplerState.set_use_anisotropy
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_use_anisotropy), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ p_member bool }{p_member}))
}

//go:nosplit
func (self class) GetUseAnisotropy() bool { //gd:RDSamplerState.get_use_anisotropy
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_use_anisotropy), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAnisotropyMax(p_member float64) { //gd:RDSamplerState.set_anisotropy_max
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_anisotropy_max), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ p_member float64 }{p_member}))
}

//go:nosplit
func (self class) GetAnisotropyMax() float64 { //gd:RDSamplerState.get_anisotropy_max
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_anisotropy_max), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEnableCompare(p_member bool) { //gd:RDSamplerState.set_enable_compare
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_enable_compare), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ p_member bool }{p_member}))
}

//go:nosplit
func (self class) GetEnableCompare() bool { //gd:RDSamplerState.get_enable_compare
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_enable_compare), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCompareOp(p_member Rendering.CompareOperator) { //gd:RDSamplerState.set_compare_op
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_compare_op), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.CompareOperator }{p_member}))
}

//go:nosplit
func (self class) GetCompareOp() Rendering.CompareOperator { //gd:RDSamplerState.get_compare_op
	var r_ret = gdextension.Call[Rendering.CompareOperator](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_compare_op), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMinLod(p_member float64) { //gd:RDSamplerState.set_min_lod
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_min_lod), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ p_member float64 }{p_member}))
}

//go:nosplit
func (self class) GetMinLod() float64 { //gd:RDSamplerState.get_min_lod
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_min_lod), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMaxLod(p_member float64) { //gd:RDSamplerState.set_max_lod
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_max_lod), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ p_member float64 }{p_member}))
}

//go:nosplit
func (self class) GetMaxLod() float64 { //gd:RDSamplerState.get_max_lod
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_max_lod), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBorderColor(p_member Rendering.SamplerBorderColor) { //gd:RDSamplerState.set_border_color
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_border_color), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.SamplerBorderColor }{p_member}))
}

//go:nosplit
func (self class) GetBorderColor() Rendering.SamplerBorderColor { //gd:RDSamplerState.get_border_color
	var r_ret = gdextension.Call[Rendering.SamplerBorderColor](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_border_color), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetUnnormalizedUvw(p_member bool) { //gd:RDSamplerState.set_unnormalized_uvw
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_set_unnormalized_uvw), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ p_member bool }{p_member}))
}

//go:nosplit
func (self class) GetUnnormalizedUvw() bool { //gd:RDSamplerState.get_unnormalized_uvw
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDSamplerState.Bind_get_unnormalized_uvw), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsRDSamplerState() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsRDSamplerState() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsRDSamplerState() Instance { return self.Super().AsRDSamplerState() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("RDSamplerState", func(ptr gd.Object) any {
		return [1]gdclass.RDSamplerState{*(*gdclass.RDSamplerState)(unsafe.Pointer(&ptr))}
	})
}
