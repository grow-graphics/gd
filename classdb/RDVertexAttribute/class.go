// Code generated by the generate package DO NOT EDIT

// Package RDVertexAttribute provides methods for working with RDVertexAttribute object instances.
package RDVertexAttribute

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Rendering"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This object is used by [RenderingDevice].
*/
type Instance [1]gdclass.RDVertexAttribute

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsRDVertexAttribute() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.RDVertexAttribute

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("RDVertexAttribute"))
	casted := Instance{*(*gdclass.RDVertexAttribute)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) Location() int {
	return int(int(class(self).GetLocation()))
}

func (self Instance) SetLocation(value int) {
	class(self).SetLocation(int64(value))
}

func (self Instance) Offset() int {
	return int(int(class(self).GetOffset()))
}

func (self Instance) SetOffset(value int) {
	class(self).SetOffset(int64(value))
}

func (self Instance) Format() Rendering.DataFormat {
	return Rendering.DataFormat(class(self).GetFormat())
}

func (self Instance) SetFormat(value Rendering.DataFormat) {
	class(self).SetFormat(value)
}

func (self Instance) Stride() int {
	return int(int(class(self).GetStride()))
}

func (self Instance) SetStride(value int) {
	class(self).SetStride(int64(value))
}

func (self Instance) Frequency() Rendering.VertexFrequency {
	return Rendering.VertexFrequency(class(self).GetFrequency())
}

func (self Instance) SetFrequency(value Rendering.VertexFrequency) {
	class(self).SetFrequency(value)
}

//go:nosplit
func (self class) SetLocation(p_member int64) { //gd:RDVertexAttribute.set_location
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDVertexAttribute.Bind_set_location), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member int64 }{p_member}))
}

//go:nosplit
func (self class) GetLocation() int64 { //gd:RDVertexAttribute.get_location
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDVertexAttribute.Bind_get_location), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetOffset(p_member int64) { //gd:RDVertexAttribute.set_offset
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDVertexAttribute.Bind_set_offset), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member int64 }{p_member}))
}

//go:nosplit
func (self class) GetOffset() int64 { //gd:RDVertexAttribute.get_offset
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDVertexAttribute.Bind_get_offset), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFormat(p_member Rendering.DataFormat) { //gd:RDVertexAttribute.set_format
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDVertexAttribute.Bind_set_format), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.DataFormat }{p_member}))
}

//go:nosplit
func (self class) GetFormat() Rendering.DataFormat { //gd:RDVertexAttribute.get_format
	var r_ret = gdextension.Call[Rendering.DataFormat](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDVertexAttribute.Bind_get_format), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetStride(p_member int64) { //gd:RDVertexAttribute.set_stride
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDVertexAttribute.Bind_set_stride), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member int64 }{p_member}))
}

//go:nosplit
func (self class) GetStride() int64 { //gd:RDVertexAttribute.get_stride
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDVertexAttribute.Bind_get_stride), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFrequency(p_member Rendering.VertexFrequency) { //gd:RDVertexAttribute.set_frequency
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDVertexAttribute.Bind_set_frequency), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.VertexFrequency }{p_member}))
}

//go:nosplit
func (self class) GetFrequency() Rendering.VertexFrequency { //gd:RDVertexAttribute.get_frequency
	var r_ret = gdextension.Call[Rendering.VertexFrequency](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.RDVertexAttribute.Bind_get_frequency), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsRDVertexAttribute() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsRDVertexAttribute() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsRDVertexAttribute() Instance { return self.Super().AsRDVertexAttribute() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("RDVertexAttribute", func(ptr gd.Object) any {
		return [1]gdclass.RDVertexAttribute{*(*gdclass.RDVertexAttribute)(unsafe.Pointer(&ptr))}
	})
}
