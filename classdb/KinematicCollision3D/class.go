// Code generated by the generate package DO NOT EDIT

// Package KinematicCollision3D provides methods for working with KinematicCollision3D object instances.
package KinematicCollision3D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector3"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Holds collision data from the movement of a [PhysicsBody3D], usually from [method PhysicsBody3D.move_and_collide]. When a [PhysicsBody3D] is moved, it stops if it detects a collision with another body. If a collision is detected, a [KinematicCollision3D] object is returned.
The collision data includes the colliding object, the remaining motion, and the collision position. This data can be used to determine a custom response to the collision.
*/
type Instance [1]gdclass.KinematicCollision3D

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_travel               gdextension.MethodForClass `hash:"3360562783"`
	get_remainder            gdextension.MethodForClass `hash:"3360562783"`
	get_depth                gdextension.MethodForClass `hash:"1740695150"`
	get_collision_count      gdextension.MethodForClass `hash:"3905245786"`
	get_position             gdextension.MethodForClass `hash:"1914908202"`
	get_normal               gdextension.MethodForClass `hash:"1914908202"`
	get_angle                gdextension.MethodForClass `hash:"1242741860"`
	get_local_shape          gdextension.MethodForClass `hash:"2639523548"`
	get_collider             gdextension.MethodForClass `hash:"2639523548"`
	get_collider_id          gdextension.MethodForClass `hash:"1591665591"`
	get_collider_rid         gdextension.MethodForClass `hash:"1231817359"`
	get_collider_shape       gdextension.MethodForClass `hash:"2639523548"`
	get_collider_shape_index gdextension.MethodForClass `hash:"1591665591"`
	get_collider_velocity    gdextension.MethodForClass `hash:"1914908202"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("KinematicCollision3D")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.KinematicCollision3D

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsKinematicCollision3D() Instance
}

/*
Returns the moving object's travel before collision.
*/
func (self Instance) GetTravel() Vector3.XYZ { //gd:KinematicCollision3D.get_travel
	return Vector3.XYZ(Advanced(self).GetTravel())
}

/*
Returns the moving object's remaining movement vector.
*/
func (self Instance) GetRemainder() Vector3.XYZ { //gd:KinematicCollision3D.get_remainder
	return Vector3.XYZ(Advanced(self).GetRemainder())
}

/*
Returns the colliding body's length of overlap along the collision normal.
*/
func (self Instance) GetDepth() Float.X { //gd:KinematicCollision3D.get_depth
	return Float.X(Float.X(Advanced(self).GetDepth()))
}

/*
Returns the number of detected collisions.
*/
func (self Instance) GetCollisionCount() int { //gd:KinematicCollision3D.get_collision_count
	return int(int(Advanced(self).GetCollisionCount()))
}

/*
Returns the point of collision in global coordinates given a collision index (the deepest collision by default).
*/
func (self Instance) GetPosition() Vector3.XYZ { //gd:KinematicCollision3D.get_position
	return Vector3.XYZ(Advanced(self).GetPosition(int64(0)))
}

/*
Returns the point of collision in global coordinates given a collision index (the deepest collision by default).
*/
func (self Expanded) GetPosition(collision_index int) Vector3.XYZ { //gd:KinematicCollision3D.get_position
	return Vector3.XYZ(Advanced(self).GetPosition(int64(collision_index)))
}

/*
Returns the colliding body's shape's normal at the point of collision given a collision index (the deepest collision by default).
*/
func (self Instance) GetNormal() Vector3.XYZ { //gd:KinematicCollision3D.get_normal
	return Vector3.XYZ(Advanced(self).GetNormal(int64(0)))
}

/*
Returns the colliding body's shape's normal at the point of collision given a collision index (the deepest collision by default).
*/
func (self Expanded) GetNormal(collision_index int) Vector3.XYZ { //gd:KinematicCollision3D.get_normal
	return Vector3.XYZ(Advanced(self).GetNormal(int64(collision_index)))
}

/*
Returns the collision angle according to [param up_direction], which is [constant Vector3.UP] by default. This value is always positive.
*/
func (self Instance) GetAngle() Angle.Radians { //gd:KinematicCollision3D.get_angle
	return Angle.Radians(Float.X(Advanced(self).GetAngle(int64(0), Vector3.XYZ(gd.Vector3{0, 1, 0}))))
}

/*
Returns the collision angle according to [param up_direction], which is [constant Vector3.UP] by default. This value is always positive.
*/
func (self Expanded) GetAngle(collision_index int, up_direction Vector3.XYZ) Angle.Radians { //gd:KinematicCollision3D.get_angle
	return Angle.Radians(Float.X(Advanced(self).GetAngle(int64(collision_index), Vector3.XYZ(up_direction))))
}

/*
Returns the moving object's colliding shape given a collision index (the deepest collision by default).
*/
func (self Instance) GetLocalShape() Object.Instance { //gd:KinematicCollision3D.get_local_shape
	return Object.Instance(Advanced(self).GetLocalShape(int64(0)))
}

/*
Returns the moving object's colliding shape given a collision index (the deepest collision by default).
*/
func (self Expanded) GetLocalShape(collision_index int) Object.Instance { //gd:KinematicCollision3D.get_local_shape
	return Object.Instance(Advanced(self).GetLocalShape(int64(collision_index)))
}

/*
Returns the colliding body's attached [Object] given a collision index (the deepest collision by default).
*/
func (self Instance) GetCollider() Object.Instance { //gd:KinematicCollision3D.get_collider
	return Object.Instance(Advanced(self).GetCollider(int64(0)))
}

/*
Returns the colliding body's attached [Object] given a collision index (the deepest collision by default).
*/
func (self Expanded) GetCollider(collision_index int) Object.Instance { //gd:KinematicCollision3D.get_collider
	return Object.Instance(Advanced(self).GetCollider(int64(collision_index)))
}

/*
Returns the unique instance ID of the colliding body's attached [Object] given a collision index (the deepest collision by default). See [method Object.get_instance_id].
*/
func (self Instance) GetColliderId() int { //gd:KinematicCollision3D.get_collider_id
	return int(int(Advanced(self).GetColliderId(int64(0))))
}

/*
Returns the unique instance ID of the colliding body's attached [Object] given a collision index (the deepest collision by default). See [method Object.get_instance_id].
*/
func (self Expanded) GetColliderId(collision_index int) int { //gd:KinematicCollision3D.get_collider_id
	return int(int(Advanced(self).GetColliderId(int64(collision_index))))
}

/*
Returns the colliding body's [RID] used by the [PhysicsServer3D] given a collision index (the deepest collision by default).
*/
func (self Instance) GetColliderRid() RID.Body3D { //gd:KinematicCollision3D.get_collider_rid
	return RID.Body3D(Advanced(self).GetColliderRid(int64(0)))
}

/*
Returns the colliding body's [RID] used by the [PhysicsServer3D] given a collision index (the deepest collision by default).
*/
func (self Expanded) GetColliderRid(collision_index int) RID.Body3D { //gd:KinematicCollision3D.get_collider_rid
	return RID.Body3D(Advanced(self).GetColliderRid(int64(collision_index)))
}

/*
Returns the colliding body's shape given a collision index (the deepest collision by default).
*/
func (self Instance) GetColliderShape() Object.Instance { //gd:KinematicCollision3D.get_collider_shape
	return Object.Instance(Advanced(self).GetColliderShape(int64(0)))
}

/*
Returns the colliding body's shape given a collision index (the deepest collision by default).
*/
func (self Expanded) GetColliderShape(collision_index int) Object.Instance { //gd:KinematicCollision3D.get_collider_shape
	return Object.Instance(Advanced(self).GetColliderShape(int64(collision_index)))
}

/*
Returns the colliding body's shape index given a collision index (the deepest collision by default). See [CollisionObject3D].
*/
func (self Instance) GetColliderShapeIndex() int { //gd:KinematicCollision3D.get_collider_shape_index
	return int(int(Advanced(self).GetColliderShapeIndex(int64(0))))
}

/*
Returns the colliding body's shape index given a collision index (the deepest collision by default). See [CollisionObject3D].
*/
func (self Expanded) GetColliderShapeIndex(collision_index int) int { //gd:KinematicCollision3D.get_collider_shape_index
	return int(int(Advanced(self).GetColliderShapeIndex(int64(collision_index))))
}

/*
Returns the colliding body's velocity given a collision index (the deepest collision by default).
*/
func (self Instance) GetColliderVelocity() Vector3.XYZ { //gd:KinematicCollision3D.get_collider_velocity
	return Vector3.XYZ(Advanced(self).GetColliderVelocity(int64(0)))
}

/*
Returns the colliding body's velocity given a collision index (the deepest collision by default).
*/
func (self Expanded) GetColliderVelocity(collision_index int) Vector3.XYZ { //gd:KinematicCollision3D.get_collider_velocity
	return Vector3.XYZ(Advanced(self).GetColliderVelocity(int64(collision_index)))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.KinematicCollision3D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.KinematicCollision3D)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.KinematicCollision3D)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.KinematicCollision3D)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

/*
Returns the moving object's travel before collision.
*/
//go:nosplit
func (self class) GetTravel() Vector3.XYZ { //gd:KinematicCollision3D.get_travel
	var r_ret = gdextension.Call[Vector3.XYZ](gd.ObjectChecked(self.AsObject()), methods.get_travel, gdextension.SizeVector3, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the moving object's remaining movement vector.
*/
//go:nosplit
func (self class) GetRemainder() Vector3.XYZ { //gd:KinematicCollision3D.get_remainder
	var r_ret = gdextension.Call[Vector3.XYZ](gd.ObjectChecked(self.AsObject()), methods.get_remainder, gdextension.SizeVector3, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the colliding body's length of overlap along the collision normal.
*/
//go:nosplit
func (self class) GetDepth() float64 { //gd:KinematicCollision3D.get_depth
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_depth, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the number of detected collisions.
*/
//go:nosplit
func (self class) GetCollisionCount() int64 { //gd:KinematicCollision3D.get_collision_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_collision_count, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the point of collision in global coordinates given a collision index (the deepest collision by default).
*/
//go:nosplit
func (self class) GetPosition(collision_index int64) Vector3.XYZ { //gd:KinematicCollision3D.get_position
	var r_ret = gdextension.Call[Vector3.XYZ](gd.ObjectChecked(self.AsObject()), methods.get_position, gdextension.SizeVector3|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ collision_index int64 }{collision_index}))
	var ret = r_ret
	return ret
}

/*
Returns the colliding body's shape's normal at the point of collision given a collision index (the deepest collision by default).
*/
//go:nosplit
func (self class) GetNormal(collision_index int64) Vector3.XYZ { //gd:KinematicCollision3D.get_normal
	var r_ret = gdextension.Call[Vector3.XYZ](gd.ObjectChecked(self.AsObject()), methods.get_normal, gdextension.SizeVector3|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ collision_index int64 }{collision_index}))
	var ret = r_ret
	return ret
}

/*
Returns the collision angle according to [param up_direction], which is [constant Vector3.UP] by default. This value is always positive.
*/
//go:nosplit
func (self class) GetAngle(collision_index int64, up_direction Vector3.XYZ) float64 { //gd:KinematicCollision3D.get_angle
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_angle, gdextension.SizeFloat|(gdextension.SizeInt<<4)|(gdextension.SizeVector3<<8), unsafe.Pointer(&struct {
		collision_index int64
		up_direction    Vector3.XYZ
	}{collision_index, up_direction}))
	var ret = r_ret
	return ret
}

/*
Returns the moving object's colliding shape given a collision index (the deepest collision by default).
*/
//go:nosplit
func (self class) GetLocalShape(collision_index int64) [1]gd.Object { //gd:KinematicCollision3D.get_local_shape
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_local_shape, gdextension.SizeObject|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ collision_index int64 }{collision_index}))
	var ret = [1]gd.Object{gd.PointerMustAssertInstanceID[gd.Object](r_ret)}
	return ret
}

/*
Returns the colliding body's attached [Object] given a collision index (the deepest collision by default).
*/
//go:nosplit
func (self class) GetCollider(collision_index int64) [1]gd.Object { //gd:KinematicCollision3D.get_collider
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_collider, gdextension.SizeObject|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ collision_index int64 }{collision_index}))
	var ret = [1]gd.Object{gd.PointerMustAssertInstanceID[gd.Object](r_ret)}
	return ret
}

/*
Returns the unique instance ID of the colliding body's attached [Object] given a collision index (the deepest collision by default). See [method Object.get_instance_id].
*/
//go:nosplit
func (self class) GetColliderId(collision_index int64) int64 { //gd:KinematicCollision3D.get_collider_id
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_collider_id, gdextension.SizeInt|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ collision_index int64 }{collision_index}))
	var ret = r_ret
	return ret
}

/*
Returns the colliding body's [RID] used by the [PhysicsServer3D] given a collision index (the deepest collision by default).
*/
//go:nosplit
func (self class) GetColliderRid(collision_index int64) RID.Any { //gd:KinematicCollision3D.get_collider_rid
	var r_ret = gdextension.Call[RID.Any](gd.ObjectChecked(self.AsObject()), methods.get_collider_rid, gdextension.SizeRID|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ collision_index int64 }{collision_index}))
	var ret = r_ret
	return ret
}

/*
Returns the colliding body's shape given a collision index (the deepest collision by default).
*/
//go:nosplit
func (self class) GetColliderShape(collision_index int64) [1]gd.Object { //gd:KinematicCollision3D.get_collider_shape
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_collider_shape, gdextension.SizeObject|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ collision_index int64 }{collision_index}))
	var ret = [1]gd.Object{gd.PointerMustAssertInstanceID[gd.Object](r_ret)}
	return ret
}

/*
Returns the colliding body's shape index given a collision index (the deepest collision by default). See [CollisionObject3D].
*/
//go:nosplit
func (self class) GetColliderShapeIndex(collision_index int64) int64 { //gd:KinematicCollision3D.get_collider_shape_index
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_collider_shape_index, gdextension.SizeInt|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ collision_index int64 }{collision_index}))
	var ret = r_ret
	return ret
}

/*
Returns the colliding body's velocity given a collision index (the deepest collision by default).
*/
//go:nosplit
func (self class) GetColliderVelocity(collision_index int64) Vector3.XYZ { //gd:KinematicCollision3D.get_collider_velocity
	var r_ret = gdextension.Call[Vector3.XYZ](gd.ObjectChecked(self.AsObject()), methods.get_collider_velocity, gdextension.SizeVector3|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ collision_index int64 }{collision_index}))
	var ret = r_ret
	return ret
}
func (self class) AsKinematicCollision3D() Advanced    { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsKinematicCollision3D() Instance { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsKinematicCollision3D() Instance {
	return self.Super().AsKinematicCollision3D()
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("KinematicCollision3D", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
