// Code generated by the generate package DO NOT EDIT

// Package Environment provides methods for working with Environment object instances.
package Environment

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/Sky"
import "graphics.gd/classdb/Texture"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector3"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Resource for environment nodes (like [WorldEnvironment]) that define multiple environment operations (such as background [Sky] or [Color], ambient light, fog, depth-of-field...). These parameters affect the final render of the scene. The order of these operations is:
- Depth of Field Blur
- Glow
- Tonemap (Auto Exposure)
- Adjustments
*/
type Instance [1]gdclass.Environment

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsEnvironment() Instance
}

/*
Sets the intensity of the glow level [param idx]. A value above [code]0.0[/code] enables the level. Each level relies on the previous level. This means that enabling higher glow levels will slow down the glow effect rendering, even if previous levels aren't enabled.
*/
func (self Instance) SetGlowLevel(idx int, intensity Float.X) { //gd:Environment.set_glow_level
	Advanced(self).SetGlowLevel(int64(idx), float64(intensity))
}

/*
Returns the intensity of the glow level [param idx].
*/
func (self Instance) GetGlowLevel(idx int) Float.X { //gd:Environment.get_glow_level
	return Float.X(Float.X(Advanced(self).GetGlowLevel(int64(idx))))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.Environment

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("Environment"))
	casted := Instance{*(*gdclass.Environment)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) BackgroundMode() BGMode {
	return BGMode(class(self).GetBackground())
}

func (self Instance) SetBackgroundMode(value BGMode) {
	class(self).SetBackground(value)
}

func (self Instance) BackgroundColor() Color.RGBA {
	return Color.RGBA(class(self).GetBgColor())
}

func (self Instance) SetBackgroundColor(value Color.RGBA) {
	class(self).SetBgColor(Color.RGBA(value))
}

func (self Instance) BackgroundEnergyMultiplier() Float.X {
	return Float.X(Float.X(class(self).GetBgEnergyMultiplier()))
}

func (self Instance) SetBackgroundEnergyMultiplier(value Float.X) {
	class(self).SetBgEnergyMultiplier(float64(value))
}

func (self Instance) BackgroundIntensity() Float.X {
	return Float.X(Float.X(class(self).GetBgIntensity()))
}

func (self Instance) SetBackgroundIntensity(value Float.X) {
	class(self).SetBgIntensity(float64(value))
}

func (self Instance) BackgroundCanvasMaxLayer() int {
	return int(int(class(self).GetCanvasMaxLayer()))
}

func (self Instance) SetBackgroundCanvasMaxLayer(value int) {
	class(self).SetCanvasMaxLayer(int64(value))
}

func (self Instance) BackgroundCameraFeedId() int {
	return int(int(class(self).GetCameraFeedId()))
}

func (self Instance) SetBackgroundCameraFeedId(value int) {
	class(self).SetCameraFeedId(int64(value))
}

func (self Instance) Sky() Sky.Instance {
	return Sky.Instance(class(self).GetSky())
}

func (self Instance) SetSky(value Sky.Instance) {
	class(self).SetSky(value)
}

func (self Instance) SkyCustomFov() Float.X {
	return Float.X(Float.X(class(self).GetSkyCustomFov()))
}

func (self Instance) SetSkyCustomFov(value Float.X) {
	class(self).SetSkyCustomFov(float64(value))
}

func (self Instance) SkyRotation() Euler.Radians {
	return Euler.Radians(Vector3.EulerRadians(class(self).GetSkyRotation()))
}

func (self Instance) SetSkyRotation(value Euler.Radians) {
	class(self).SetSkyRotation(value.Vector3())
}

func (self Instance) AmbientLightSource() AmbientSource {
	return AmbientSource(class(self).GetAmbientSource())
}

func (self Instance) SetAmbientLightSource(value AmbientSource) {
	class(self).SetAmbientSource(value)
}

func (self Instance) AmbientLightColor() Color.RGBA {
	return Color.RGBA(class(self).GetAmbientLightColor())
}

func (self Instance) SetAmbientLightColor(value Color.RGBA) {
	class(self).SetAmbientLightColor(Color.RGBA(value))
}

func (self Instance) AmbientLightSkyContribution() Float.X {
	return Float.X(Float.X(class(self).GetAmbientLightSkyContribution()))
}

func (self Instance) SetAmbientLightSkyContribution(value Float.X) {
	class(self).SetAmbientLightSkyContribution(float64(value))
}

func (self Instance) AmbientLightEnergy() Float.X {
	return Float.X(Float.X(class(self).GetAmbientLightEnergy()))
}

func (self Instance) SetAmbientLightEnergy(value Float.X) {
	class(self).SetAmbientLightEnergy(float64(value))
}

func (self Instance) ReflectedLightSource() ReflectionSource {
	return ReflectionSource(class(self).GetReflectionSource())
}

func (self Instance) SetReflectedLightSource(value ReflectionSource) {
	class(self).SetReflectionSource(value)
}

func (self Instance) TonemapMode() ToneMapper {
	return ToneMapper(class(self).GetTonemapper())
}

func (self Instance) SetTonemapMode(value ToneMapper) {
	class(self).SetTonemapper(value)
}

func (self Instance) TonemapExposure() Float.X {
	return Float.X(Float.X(class(self).GetTonemapExposure()))
}

func (self Instance) SetTonemapExposure(value Float.X) {
	class(self).SetTonemapExposure(float64(value))
}

func (self Instance) TonemapWhite() Float.X {
	return Float.X(Float.X(class(self).GetTonemapWhite()))
}

func (self Instance) SetTonemapWhite(value Float.X) {
	class(self).SetTonemapWhite(float64(value))
}

func (self Instance) SsrEnabled() bool {
	return bool(class(self).IsSsrEnabled())
}

func (self Instance) SetSsrEnabled(value bool) {
	class(self).SetSsrEnabled(value)
}

func (self Instance) SsrMaxSteps() int {
	return int(int(class(self).GetSsrMaxSteps()))
}

func (self Instance) SetSsrMaxSteps(value int) {
	class(self).SetSsrMaxSteps(int64(value))
}

func (self Instance) SsrFadeIn() Float.X {
	return Float.X(Float.X(class(self).GetSsrFadeIn()))
}

func (self Instance) SetSsrFadeIn(value Float.X) {
	class(self).SetSsrFadeIn(float64(value))
}

func (self Instance) SsrFadeOut() Float.X {
	return Float.X(Float.X(class(self).GetSsrFadeOut()))
}

func (self Instance) SetSsrFadeOut(value Float.X) {
	class(self).SetSsrFadeOut(float64(value))
}

func (self Instance) SsrDepthTolerance() Float.X {
	return Float.X(Float.X(class(self).GetSsrDepthTolerance()))
}

func (self Instance) SetSsrDepthTolerance(value Float.X) {
	class(self).SetSsrDepthTolerance(float64(value))
}

func (self Instance) SsaoEnabled() bool {
	return bool(class(self).IsSsaoEnabled())
}

func (self Instance) SetSsaoEnabled(value bool) {
	class(self).SetSsaoEnabled(value)
}

func (self Instance) SsaoRadius() Float.X {
	return Float.X(Float.X(class(self).GetSsaoRadius()))
}

func (self Instance) SetSsaoRadius(value Float.X) {
	class(self).SetSsaoRadius(float64(value))
}

func (self Instance) SsaoIntensity() Float.X {
	return Float.X(Float.X(class(self).GetSsaoIntensity()))
}

func (self Instance) SetSsaoIntensity(value Float.X) {
	class(self).SetSsaoIntensity(float64(value))
}

func (self Instance) SsaoPower() Float.X {
	return Float.X(Float.X(class(self).GetSsaoPower()))
}

func (self Instance) SetSsaoPower(value Float.X) {
	class(self).SetSsaoPower(float64(value))
}

func (self Instance) SsaoDetail() Float.X {
	return Float.X(Float.X(class(self).GetSsaoDetail()))
}

func (self Instance) SetSsaoDetail(value Float.X) {
	class(self).SetSsaoDetail(float64(value))
}

func (self Instance) SsaoHorizon() Float.X {
	return Float.X(Float.X(class(self).GetSsaoHorizon()))
}

func (self Instance) SetSsaoHorizon(value Float.X) {
	class(self).SetSsaoHorizon(float64(value))
}

func (self Instance) SsaoSharpness() Float.X {
	return Float.X(Float.X(class(self).GetSsaoSharpness()))
}

func (self Instance) SetSsaoSharpness(value Float.X) {
	class(self).SetSsaoSharpness(float64(value))
}

func (self Instance) SsaoLightAffect() Float.X {
	return Float.X(Float.X(class(self).GetSsaoDirectLightAffect()))
}

func (self Instance) SetSsaoLightAffect(value Float.X) {
	class(self).SetSsaoDirectLightAffect(float64(value))
}

func (self Instance) SsaoAoChannelAffect() Float.X {
	return Float.X(Float.X(class(self).GetSsaoAoChannelAffect()))
}

func (self Instance) SetSsaoAoChannelAffect(value Float.X) {
	class(self).SetSsaoAoChannelAffect(float64(value))
}

func (self Instance) SsilEnabled() bool {
	return bool(class(self).IsSsilEnabled())
}

func (self Instance) SetSsilEnabled(value bool) {
	class(self).SetSsilEnabled(value)
}

func (self Instance) SsilRadius() Float.X {
	return Float.X(Float.X(class(self).GetSsilRadius()))
}

func (self Instance) SetSsilRadius(value Float.X) {
	class(self).SetSsilRadius(float64(value))
}

func (self Instance) SsilIntensity() Float.X {
	return Float.X(Float.X(class(self).GetSsilIntensity()))
}

func (self Instance) SetSsilIntensity(value Float.X) {
	class(self).SetSsilIntensity(float64(value))
}

func (self Instance) SsilSharpness() Float.X {
	return Float.X(Float.X(class(self).GetSsilSharpness()))
}

func (self Instance) SetSsilSharpness(value Float.X) {
	class(self).SetSsilSharpness(float64(value))
}

func (self Instance) SsilNormalRejection() Float.X {
	return Float.X(Float.X(class(self).GetSsilNormalRejection()))
}

func (self Instance) SetSsilNormalRejection(value Float.X) {
	class(self).SetSsilNormalRejection(float64(value))
}

func (self Instance) SdfgiEnabled() bool {
	return bool(class(self).IsSdfgiEnabled())
}

func (self Instance) SetSdfgiEnabled(value bool) {
	class(self).SetSdfgiEnabled(value)
}

func (self Instance) SdfgiUseOcclusion() bool {
	return bool(class(self).IsSdfgiUsingOcclusion())
}

func (self Instance) SetSdfgiUseOcclusion(value bool) {
	class(self).SetSdfgiUseOcclusion(value)
}

func (self Instance) SdfgiReadSkyLight() bool {
	return bool(class(self).IsSdfgiReadingSkyLight())
}

func (self Instance) SetSdfgiReadSkyLight(value bool) {
	class(self).SetSdfgiReadSkyLight(value)
}

func (self Instance) SdfgiBounceFeedback() Float.X {
	return Float.X(Float.X(class(self).GetSdfgiBounceFeedback()))
}

func (self Instance) SetSdfgiBounceFeedback(value Float.X) {
	class(self).SetSdfgiBounceFeedback(float64(value))
}

func (self Instance) SdfgiCascades() int {
	return int(int(class(self).GetSdfgiCascades()))
}

func (self Instance) SetSdfgiCascades(value int) {
	class(self).SetSdfgiCascades(int64(value))
}

func (self Instance) SdfgiMinCellSize() Float.X {
	return Float.X(Float.X(class(self).GetSdfgiMinCellSize()))
}

func (self Instance) SetSdfgiMinCellSize(value Float.X) {
	class(self).SetSdfgiMinCellSize(float64(value))
}

func (self Instance) SdfgiCascade0Distance() Float.X {
	return Float.X(Float.X(class(self).GetSdfgiCascade0Distance()))
}

func (self Instance) SetSdfgiCascade0Distance(value Float.X) {
	class(self).SetSdfgiCascade0Distance(float64(value))
}

func (self Instance) SdfgiMaxDistance() Float.X {
	return Float.X(Float.X(class(self).GetSdfgiMaxDistance()))
}

func (self Instance) SetSdfgiMaxDistance(value Float.X) {
	class(self).SetSdfgiMaxDistance(float64(value))
}

func (self Instance) SdfgiYScale() SDFGIYScale {
	return SDFGIYScale(class(self).GetSdfgiYScale())
}

func (self Instance) SetSdfgiYScale(value SDFGIYScale) {
	class(self).SetSdfgiYScale(value)
}

func (self Instance) SdfgiEnergy() Float.X {
	return Float.X(Float.X(class(self).GetSdfgiEnergy()))
}

func (self Instance) SetSdfgiEnergy(value Float.X) {
	class(self).SetSdfgiEnergy(float64(value))
}

func (self Instance) SdfgiNormalBias() Float.X {
	return Float.X(Float.X(class(self).GetSdfgiNormalBias()))
}

func (self Instance) SetSdfgiNormalBias(value Float.X) {
	class(self).SetSdfgiNormalBias(float64(value))
}

func (self Instance) SdfgiProbeBias() Float.X {
	return Float.X(Float.X(class(self).GetSdfgiProbeBias()))
}

func (self Instance) SetSdfgiProbeBias(value Float.X) {
	class(self).SetSdfgiProbeBias(float64(value))
}

func (self Instance) GlowEnabled() bool {
	return bool(class(self).IsGlowEnabled())
}

func (self Instance) SetGlowEnabled(value bool) {
	class(self).SetGlowEnabled(value)
}

func (self Instance) GlowNormalized() bool {
	return bool(class(self).IsGlowNormalized())
}

func (self Instance) SetGlowNormalized(value bool) {
	class(self).SetGlowNormalized(value)
}

func (self Instance) GlowIntensity() Float.X {
	return Float.X(Float.X(class(self).GetGlowIntensity()))
}

func (self Instance) SetGlowIntensity(value Float.X) {
	class(self).SetGlowIntensity(float64(value))
}

func (self Instance) GlowStrength() Float.X {
	return Float.X(Float.X(class(self).GetGlowStrength()))
}

func (self Instance) SetGlowStrength(value Float.X) {
	class(self).SetGlowStrength(float64(value))
}

func (self Instance) GlowMix() Float.X {
	return Float.X(Float.X(class(self).GetGlowMix()))
}

func (self Instance) SetGlowMix(value Float.X) {
	class(self).SetGlowMix(float64(value))
}

func (self Instance) GlowBloom() Float.X {
	return Float.X(Float.X(class(self).GetGlowBloom()))
}

func (self Instance) SetGlowBloom(value Float.X) {
	class(self).SetGlowBloom(float64(value))
}

func (self Instance) GlowBlendMode() GlowBlendMode {
	return GlowBlendMode(class(self).GetGlowBlendMode())
}

func (self Instance) SetGlowBlendMode(value GlowBlendMode) {
	class(self).SetGlowBlendMode(value)
}

func (self Instance) GlowHdrThreshold() Float.X {
	return Float.X(Float.X(class(self).GetGlowHdrBleedThreshold()))
}

func (self Instance) SetGlowHdrThreshold(value Float.X) {
	class(self).SetGlowHdrBleedThreshold(float64(value))
}

func (self Instance) GlowHdrScale() Float.X {
	return Float.X(Float.X(class(self).GetGlowHdrBleedScale()))
}

func (self Instance) SetGlowHdrScale(value Float.X) {
	class(self).SetGlowHdrBleedScale(float64(value))
}

func (self Instance) GlowHdrLuminanceCap() Float.X {
	return Float.X(Float.X(class(self).GetGlowHdrLuminanceCap()))
}

func (self Instance) SetGlowHdrLuminanceCap(value Float.X) {
	class(self).SetGlowHdrLuminanceCap(float64(value))
}

func (self Instance) GlowMapStrength() Float.X {
	return Float.X(Float.X(class(self).GetGlowMapStrength()))
}

func (self Instance) SetGlowMapStrength(value Float.X) {
	class(self).SetGlowMapStrength(float64(value))
}

func (self Instance) GlowMap() Texture.Instance {
	return Texture.Instance(class(self).GetGlowMap())
}

func (self Instance) SetGlowMap(value Texture.Instance) {
	class(self).SetGlowMap(value)
}

func (self Instance) FogEnabled() bool {
	return bool(class(self).IsFogEnabled())
}

func (self Instance) SetFogEnabled(value bool) {
	class(self).SetFogEnabled(value)
}

func (self Instance) FogMode() FogMode {
	return FogMode(class(self).GetFogMode())
}

func (self Instance) SetFogMode(value FogMode) {
	class(self).SetFogMode(value)
}

func (self Instance) FogLightColor() Color.RGBA {
	return Color.RGBA(class(self).GetFogLightColor())
}

func (self Instance) SetFogLightColor(value Color.RGBA) {
	class(self).SetFogLightColor(Color.RGBA(value))
}

func (self Instance) FogLightEnergy() Float.X {
	return Float.X(Float.X(class(self).GetFogLightEnergy()))
}

func (self Instance) SetFogLightEnergy(value Float.X) {
	class(self).SetFogLightEnergy(float64(value))
}

func (self Instance) FogSunScatter() Float.X {
	return Float.X(Float.X(class(self).GetFogSunScatter()))
}

func (self Instance) SetFogSunScatter(value Float.X) {
	class(self).SetFogSunScatter(float64(value))
}

func (self Instance) FogDensity() Float.X {
	return Float.X(Float.X(class(self).GetFogDensity()))
}

func (self Instance) SetFogDensity(value Float.X) {
	class(self).SetFogDensity(float64(value))
}

func (self Instance) FogAerialPerspective() Float.X {
	return Float.X(Float.X(class(self).GetFogAerialPerspective()))
}

func (self Instance) SetFogAerialPerspective(value Float.X) {
	class(self).SetFogAerialPerspective(float64(value))
}

func (self Instance) FogSkyAffect() Float.X {
	return Float.X(Float.X(class(self).GetFogSkyAffect()))
}

func (self Instance) SetFogSkyAffect(value Float.X) {
	class(self).SetFogSkyAffect(float64(value))
}

func (self Instance) FogHeight() Float.X {
	return Float.X(Float.X(class(self).GetFogHeight()))
}

func (self Instance) SetFogHeight(value Float.X) {
	class(self).SetFogHeight(float64(value))
}

func (self Instance) FogHeightDensity() Float.X {
	return Float.X(Float.X(class(self).GetFogHeightDensity()))
}

func (self Instance) SetFogHeightDensity(value Float.X) {
	class(self).SetFogHeightDensity(float64(value))
}

func (self Instance) FogDepthCurve() Float.X {
	return Float.X(Float.X(class(self).GetFogDepthCurve()))
}

func (self Instance) SetFogDepthCurve(value Float.X) {
	class(self).SetFogDepthCurve(float64(value))
}

func (self Instance) FogDepthBegin() Float.X {
	return Float.X(Float.X(class(self).GetFogDepthBegin()))
}

func (self Instance) SetFogDepthBegin(value Float.X) {
	class(self).SetFogDepthBegin(float64(value))
}

func (self Instance) FogDepthEnd() Float.X {
	return Float.X(Float.X(class(self).GetFogDepthEnd()))
}

func (self Instance) SetFogDepthEnd(value Float.X) {
	class(self).SetFogDepthEnd(float64(value))
}

func (self Instance) VolumetricFogEnabled() bool {
	return bool(class(self).IsVolumetricFogEnabled())
}

func (self Instance) SetVolumetricFogEnabled(value bool) {
	class(self).SetVolumetricFogEnabled(value)
}

func (self Instance) VolumetricFogDensity() Float.X {
	return Float.X(Float.X(class(self).GetVolumetricFogDensity()))
}

func (self Instance) SetVolumetricFogDensity(value Float.X) {
	class(self).SetVolumetricFogDensity(float64(value))
}

func (self Instance) VolumetricFogAlbedo() Color.RGBA {
	return Color.RGBA(class(self).GetVolumetricFogAlbedo())
}

func (self Instance) SetVolumetricFogAlbedo(value Color.RGBA) {
	class(self).SetVolumetricFogAlbedo(Color.RGBA(value))
}

func (self Instance) VolumetricFogEmission() Color.RGBA {
	return Color.RGBA(class(self).GetVolumetricFogEmission())
}

func (self Instance) SetVolumetricFogEmission(value Color.RGBA) {
	class(self).SetVolumetricFogEmission(Color.RGBA(value))
}

func (self Instance) VolumetricFogEmissionEnergy() Float.X {
	return Float.X(Float.X(class(self).GetVolumetricFogEmissionEnergy()))
}

func (self Instance) SetVolumetricFogEmissionEnergy(value Float.X) {
	class(self).SetVolumetricFogEmissionEnergy(float64(value))
}

func (self Instance) VolumetricFogGiInject() Float.X {
	return Float.X(Float.X(class(self).GetVolumetricFogGiInject()))
}

func (self Instance) SetVolumetricFogGiInject(value Float.X) {
	class(self).SetVolumetricFogGiInject(float64(value))
}

func (self Instance) VolumetricFogAnisotropy() Float.X {
	return Float.X(Float.X(class(self).GetVolumetricFogAnisotropy()))
}

func (self Instance) SetVolumetricFogAnisotropy(value Float.X) {
	class(self).SetVolumetricFogAnisotropy(float64(value))
}

func (self Instance) VolumetricFogLength() Float.X {
	return Float.X(Float.X(class(self).GetVolumetricFogLength()))
}

func (self Instance) SetVolumetricFogLength(value Float.X) {
	class(self).SetVolumetricFogLength(float64(value))
}

func (self Instance) VolumetricFogDetailSpread() Float.X {
	return Float.X(Float.X(class(self).GetVolumetricFogDetailSpread()))
}

func (self Instance) SetVolumetricFogDetailSpread(value Float.X) {
	class(self).SetVolumetricFogDetailSpread(float64(value))
}

func (self Instance) VolumetricFogAmbientInject() Float.X {
	return Float.X(Float.X(class(self).GetVolumetricFogAmbientInject()))
}

func (self Instance) SetVolumetricFogAmbientInject(value Float.X) {
	class(self).SetVolumetricFogAmbientInject(float64(value))
}

func (self Instance) VolumetricFogSkyAffect() Float.X {
	return Float.X(Float.X(class(self).GetVolumetricFogSkyAffect()))
}

func (self Instance) SetVolumetricFogSkyAffect(value Float.X) {
	class(self).SetVolumetricFogSkyAffect(float64(value))
}

func (self Instance) VolumetricFogTemporalReprojectionEnabled() bool {
	return bool(class(self).IsVolumetricFogTemporalReprojectionEnabled())
}

func (self Instance) SetVolumetricFogTemporalReprojectionEnabled(value bool) {
	class(self).SetVolumetricFogTemporalReprojectionEnabled(value)
}

func (self Instance) VolumetricFogTemporalReprojectionAmount() Float.X {
	return Float.X(Float.X(class(self).GetVolumetricFogTemporalReprojectionAmount()))
}

func (self Instance) SetVolumetricFogTemporalReprojectionAmount(value Float.X) {
	class(self).SetVolumetricFogTemporalReprojectionAmount(float64(value))
}

func (self Instance) AdjustmentEnabled() bool {
	return bool(class(self).IsAdjustmentEnabled())
}

func (self Instance) SetAdjustmentEnabled(value bool) {
	class(self).SetAdjustmentEnabled(value)
}

func (self Instance) AdjustmentBrightness() Float.X {
	return Float.X(Float.X(class(self).GetAdjustmentBrightness()))
}

func (self Instance) SetAdjustmentBrightness(value Float.X) {
	class(self).SetAdjustmentBrightness(float64(value))
}

func (self Instance) AdjustmentContrast() Float.X {
	return Float.X(Float.X(class(self).GetAdjustmentContrast()))
}

func (self Instance) SetAdjustmentContrast(value Float.X) {
	class(self).SetAdjustmentContrast(float64(value))
}

func (self Instance) AdjustmentSaturation() Float.X {
	return Float.X(Float.X(class(self).GetAdjustmentSaturation()))
}

func (self Instance) SetAdjustmentSaturation(value Float.X) {
	class(self).SetAdjustmentSaturation(float64(value))
}

func (self Instance) AdjustmentColorCorrection() Texture.Instance {
	return Texture.Instance(class(self).GetAdjustmentColorCorrection())
}

func (self Instance) SetAdjustmentColorCorrection(value Texture.Instance) {
	class(self).SetAdjustmentColorCorrection(value)
}

//go:nosplit
func (self class) SetBackground(mode BGMode) { //gd:Environment.set_background
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_background, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode BGMode }{mode}))
}

//go:nosplit
func (self class) GetBackground() BGMode { //gd:Environment.get_background
	var r_ret = gdunsafe.Call[BGMode](self.AsObject(), gd.Global.Methods.Environment.Bind_get_background, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSky(sky [1]gdclass.Sky) { //gd:Environment.set_sky
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sky, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ sky gdextension.Object }{gdextension.Object(pointers.Get(sky[0])[0])}))
}

//go:nosplit
func (self class) GetSky() [1]gdclass.Sky { //gd:Environment.get_sky
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.Environment.Bind_get_sky, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Sky{gd.PointerWithOwnershipTransferredToGo[gdclass.Sky](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetSkyCustomFov(scale float64) { //gd:Environment.set_sky_custom_fov
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sky_custom_fov, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ scale float64 }{scale}))
}

//go:nosplit
func (self class) GetSkyCustomFov() float64 { //gd:Environment.get_sky_custom_fov
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_sky_custom_fov, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSkyRotation(euler_radians Vector3.XYZ) { //gd:Environment.set_sky_rotation
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sky_rotation, 0|(gdextension.SizeVector3<<4), unsafe.Pointer(&struct{ euler_radians Vector3.XYZ }{euler_radians}))
}

//go:nosplit
func (self class) GetSkyRotation() Vector3.XYZ { //gd:Environment.get_sky_rotation
	var r_ret = gdunsafe.Call[Vector3.XYZ](self.AsObject(), gd.Global.Methods.Environment.Bind_get_sky_rotation, gdextension.SizeVector3, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBgColor(color Color.RGBA) { //gd:Environment.set_bg_color
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_bg_color, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

//go:nosplit
func (self class) GetBgColor() Color.RGBA { //gd:Environment.get_bg_color
	var r_ret = gdunsafe.Call[Color.RGBA](self.AsObject(), gd.Global.Methods.Environment.Bind_get_bg_color, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBgEnergyMultiplier(energy float64) { //gd:Environment.set_bg_energy_multiplier
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_bg_energy_multiplier, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ energy float64 }{energy}))
}

//go:nosplit
func (self class) GetBgEnergyMultiplier() float64 { //gd:Environment.get_bg_energy_multiplier
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_bg_energy_multiplier, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBgIntensity(energy float64) { //gd:Environment.set_bg_intensity
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_bg_intensity, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ energy float64 }{energy}))
}

//go:nosplit
func (self class) GetBgIntensity() float64 { //gd:Environment.get_bg_intensity
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_bg_intensity, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCanvasMaxLayer(layer int64) { //gd:Environment.set_canvas_max_layer
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_canvas_max_layer, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ layer int64 }{layer}))
}

//go:nosplit
func (self class) GetCanvasMaxLayer() int64 { //gd:Environment.get_canvas_max_layer
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_canvas_max_layer, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCameraFeedId(id int64) { //gd:Environment.set_camera_feed_id
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_camera_feed_id, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ id int64 }{id}))
}

//go:nosplit
func (self class) GetCameraFeedId() int64 { //gd:Environment.get_camera_feed_id
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_camera_feed_id, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAmbientLightColor(color Color.RGBA) { //gd:Environment.set_ambient_light_color
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ambient_light_color, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

//go:nosplit
func (self class) GetAmbientLightColor() Color.RGBA { //gd:Environment.get_ambient_light_color
	var r_ret = gdunsafe.Call[Color.RGBA](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ambient_light_color, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAmbientSource(source AmbientSource) { //gd:Environment.set_ambient_source
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ambient_source, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ source AmbientSource }{source}))
}

//go:nosplit
func (self class) GetAmbientSource() AmbientSource { //gd:Environment.get_ambient_source
	var r_ret = gdunsafe.Call[AmbientSource](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ambient_source, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAmbientLightEnergy(energy float64) { //gd:Environment.set_ambient_light_energy
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ambient_light_energy, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ energy float64 }{energy}))
}

//go:nosplit
func (self class) GetAmbientLightEnergy() float64 { //gd:Environment.get_ambient_light_energy
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ambient_light_energy, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAmbientLightSkyContribution(ratio float64) { //gd:Environment.set_ambient_light_sky_contribution
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ambient_light_sky_contribution, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ ratio float64 }{ratio}))
}

//go:nosplit
func (self class) GetAmbientLightSkyContribution() float64 { //gd:Environment.get_ambient_light_sky_contribution
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ambient_light_sky_contribution, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetReflectionSource(source ReflectionSource) { //gd:Environment.set_reflection_source
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_reflection_source, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ source ReflectionSource }{source}))
}

//go:nosplit
func (self class) GetReflectionSource() ReflectionSource { //gd:Environment.get_reflection_source
	var r_ret = gdunsafe.Call[ReflectionSource](self.AsObject(), gd.Global.Methods.Environment.Bind_get_reflection_source, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTonemapper(mode ToneMapper) { //gd:Environment.set_tonemapper
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_tonemapper, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode ToneMapper }{mode}))
}

//go:nosplit
func (self class) GetTonemapper() ToneMapper { //gd:Environment.get_tonemapper
	var r_ret = gdunsafe.Call[ToneMapper](self.AsObject(), gd.Global.Methods.Environment.Bind_get_tonemapper, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTonemapExposure(exposure float64) { //gd:Environment.set_tonemap_exposure
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_tonemap_exposure, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ exposure float64 }{exposure}))
}

//go:nosplit
func (self class) GetTonemapExposure() float64 { //gd:Environment.get_tonemap_exposure
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_tonemap_exposure, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTonemapWhite(white float64) { //gd:Environment.set_tonemap_white
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_tonemap_white, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ white float64 }{white}))
}

//go:nosplit
func (self class) GetTonemapWhite() float64 { //gd:Environment.get_tonemap_white
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_tonemap_white, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsrEnabled(enabled bool) { //gd:Environment.set_ssr_enabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssr_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsSsrEnabled() bool { //gd:Environment.is_ssr_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Environment.Bind_is_ssr_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsrMaxSteps(max_steps int64) { //gd:Environment.set_ssr_max_steps
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssr_max_steps, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ max_steps int64 }{max_steps}))
}

//go:nosplit
func (self class) GetSsrMaxSteps() int64 { //gd:Environment.get_ssr_max_steps
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssr_max_steps, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsrFadeIn(fade_in float64) { //gd:Environment.set_ssr_fade_in
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssr_fade_in, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ fade_in float64 }{fade_in}))
}

//go:nosplit
func (self class) GetSsrFadeIn() float64 { //gd:Environment.get_ssr_fade_in
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssr_fade_in, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsrFadeOut(fade_out float64) { //gd:Environment.set_ssr_fade_out
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssr_fade_out, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ fade_out float64 }{fade_out}))
}

//go:nosplit
func (self class) GetSsrFadeOut() float64 { //gd:Environment.get_ssr_fade_out
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssr_fade_out, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsrDepthTolerance(depth_tolerance float64) { //gd:Environment.set_ssr_depth_tolerance
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssr_depth_tolerance, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ depth_tolerance float64 }{depth_tolerance}))
}

//go:nosplit
func (self class) GetSsrDepthTolerance() float64 { //gd:Environment.get_ssr_depth_tolerance
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssr_depth_tolerance, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsaoEnabled(enabled bool) { //gd:Environment.set_ssao_enabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssao_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsSsaoEnabled() bool { //gd:Environment.is_ssao_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Environment.Bind_is_ssao_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsaoRadius(radius float64) { //gd:Environment.set_ssao_radius
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssao_radius, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ radius float64 }{radius}))
}

//go:nosplit
func (self class) GetSsaoRadius() float64 { //gd:Environment.get_ssao_radius
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssao_radius, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsaoIntensity(intensity float64) { //gd:Environment.set_ssao_intensity
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssao_intensity, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ intensity float64 }{intensity}))
}

//go:nosplit
func (self class) GetSsaoIntensity() float64 { //gd:Environment.get_ssao_intensity
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssao_intensity, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsaoPower(power float64) { //gd:Environment.set_ssao_power
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssao_power, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ power float64 }{power}))
}

//go:nosplit
func (self class) GetSsaoPower() float64 { //gd:Environment.get_ssao_power
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssao_power, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsaoDetail(detail float64) { //gd:Environment.set_ssao_detail
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssao_detail, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ detail float64 }{detail}))
}

//go:nosplit
func (self class) GetSsaoDetail() float64 { //gd:Environment.get_ssao_detail
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssao_detail, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsaoHorizon(horizon float64) { //gd:Environment.set_ssao_horizon
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssao_horizon, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ horizon float64 }{horizon}))
}

//go:nosplit
func (self class) GetSsaoHorizon() float64 { //gd:Environment.get_ssao_horizon
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssao_horizon, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsaoSharpness(sharpness float64) { //gd:Environment.set_ssao_sharpness
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssao_sharpness, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ sharpness float64 }{sharpness}))
}

//go:nosplit
func (self class) GetSsaoSharpness() float64 { //gd:Environment.get_ssao_sharpness
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssao_sharpness, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsaoDirectLightAffect(amount float64) { //gd:Environment.set_ssao_direct_light_affect
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssao_direct_light_affect, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetSsaoDirectLightAffect() float64 { //gd:Environment.get_ssao_direct_light_affect
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssao_direct_light_affect, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsaoAoChannelAffect(amount float64) { //gd:Environment.set_ssao_ao_channel_affect
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssao_ao_channel_affect, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetSsaoAoChannelAffect() float64 { //gd:Environment.get_ssao_ao_channel_affect
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssao_ao_channel_affect, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsilEnabled(enabled bool) { //gd:Environment.set_ssil_enabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssil_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsSsilEnabled() bool { //gd:Environment.is_ssil_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Environment.Bind_is_ssil_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsilRadius(radius float64) { //gd:Environment.set_ssil_radius
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssil_radius, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ radius float64 }{radius}))
}

//go:nosplit
func (self class) GetSsilRadius() float64 { //gd:Environment.get_ssil_radius
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssil_radius, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsilIntensity(intensity float64) { //gd:Environment.set_ssil_intensity
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssil_intensity, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ intensity float64 }{intensity}))
}

//go:nosplit
func (self class) GetSsilIntensity() float64 { //gd:Environment.get_ssil_intensity
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssil_intensity, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsilSharpness(sharpness float64) { //gd:Environment.set_ssil_sharpness
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssil_sharpness, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ sharpness float64 }{sharpness}))
}

//go:nosplit
func (self class) GetSsilSharpness() float64 { //gd:Environment.get_ssil_sharpness
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssil_sharpness, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSsilNormalRejection(normal_rejection float64) { //gd:Environment.set_ssil_normal_rejection
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_ssil_normal_rejection, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ normal_rejection float64 }{normal_rejection}))
}

//go:nosplit
func (self class) GetSsilNormalRejection() float64 { //gd:Environment.get_ssil_normal_rejection
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_ssil_normal_rejection, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSdfgiEnabled(enabled bool) { //gd:Environment.set_sdfgi_enabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sdfgi_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsSdfgiEnabled() bool { //gd:Environment.is_sdfgi_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Environment.Bind_is_sdfgi_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSdfgiCascades(amount int64) { //gd:Environment.set_sdfgi_cascades
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sdfgi_cascades, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ amount int64 }{amount}))
}

//go:nosplit
func (self class) GetSdfgiCascades() int64 { //gd:Environment.get_sdfgi_cascades
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_sdfgi_cascades, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSdfgiMinCellSize(size float64) { //gd:Environment.set_sdfgi_min_cell_size
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sdfgi_min_cell_size, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ size float64 }{size}))
}

//go:nosplit
func (self class) GetSdfgiMinCellSize() float64 { //gd:Environment.get_sdfgi_min_cell_size
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_sdfgi_min_cell_size, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSdfgiMaxDistance(distance float64) { //gd:Environment.set_sdfgi_max_distance
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sdfgi_max_distance, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ distance float64 }{distance}))
}

//go:nosplit
func (self class) GetSdfgiMaxDistance() float64 { //gd:Environment.get_sdfgi_max_distance
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_sdfgi_max_distance, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSdfgiCascade0Distance(distance float64) { //gd:Environment.set_sdfgi_cascade0_distance
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sdfgi_cascade0_distance, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ distance float64 }{distance}))
}

//go:nosplit
func (self class) GetSdfgiCascade0Distance() float64 { //gd:Environment.get_sdfgi_cascade0_distance
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_sdfgi_cascade0_distance, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSdfgiYScale(scale SDFGIYScale) { //gd:Environment.set_sdfgi_y_scale
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sdfgi_y_scale, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ scale SDFGIYScale }{scale}))
}

//go:nosplit
func (self class) GetSdfgiYScale() SDFGIYScale { //gd:Environment.get_sdfgi_y_scale
	var r_ret = gdunsafe.Call[SDFGIYScale](self.AsObject(), gd.Global.Methods.Environment.Bind_get_sdfgi_y_scale, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSdfgiUseOcclusion(enable bool) { //gd:Environment.set_sdfgi_use_occlusion
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sdfgi_use_occlusion, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) IsSdfgiUsingOcclusion() bool { //gd:Environment.is_sdfgi_using_occlusion
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Environment.Bind_is_sdfgi_using_occlusion, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSdfgiBounceFeedback(amount float64) { //gd:Environment.set_sdfgi_bounce_feedback
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sdfgi_bounce_feedback, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetSdfgiBounceFeedback() float64 { //gd:Environment.get_sdfgi_bounce_feedback
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_sdfgi_bounce_feedback, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSdfgiReadSkyLight(enable bool) { //gd:Environment.set_sdfgi_read_sky_light
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sdfgi_read_sky_light, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) IsSdfgiReadingSkyLight() bool { //gd:Environment.is_sdfgi_reading_sky_light
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Environment.Bind_is_sdfgi_reading_sky_light, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSdfgiEnergy(amount float64) { //gd:Environment.set_sdfgi_energy
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sdfgi_energy, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetSdfgiEnergy() float64 { //gd:Environment.get_sdfgi_energy
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_sdfgi_energy, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSdfgiNormalBias(bias float64) { //gd:Environment.set_sdfgi_normal_bias
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sdfgi_normal_bias, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ bias float64 }{bias}))
}

//go:nosplit
func (self class) GetSdfgiNormalBias() float64 { //gd:Environment.get_sdfgi_normal_bias
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_sdfgi_normal_bias, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSdfgiProbeBias(bias float64) { //gd:Environment.set_sdfgi_probe_bias
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_sdfgi_probe_bias, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ bias float64 }{bias}))
}

//go:nosplit
func (self class) GetSdfgiProbeBias() float64 { //gd:Environment.get_sdfgi_probe_bias
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_sdfgi_probe_bias, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGlowEnabled(enabled bool) { //gd:Environment.set_glow_enabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_glow_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsGlowEnabled() bool { //gd:Environment.is_glow_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Environment.Bind_is_glow_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets the intensity of the glow level [param idx]. A value above [code]0.0[/code] enables the level. Each level relies on the previous level. This means that enabling higher glow levels will slow down the glow effect rendering, even if previous levels aren't enabled.
*/
//go:nosplit
func (self class) SetGlowLevel(idx int64, intensity float64) { //gd:Environment.set_glow_level
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_glow_level, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		idx       int64
		intensity float64
	}{idx, intensity}))
}

/*
Returns the intensity of the glow level [param idx].
*/
//go:nosplit
func (self class) GetGlowLevel(idx int64) float64 { //gd:Environment.get_glow_level
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_glow_level, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ idx int64 }{idx}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGlowNormalized(normalize bool) { //gd:Environment.set_glow_normalized
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_glow_normalized, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ normalize bool }{normalize}))
}

//go:nosplit
func (self class) IsGlowNormalized() bool { //gd:Environment.is_glow_normalized
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Environment.Bind_is_glow_normalized, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGlowIntensity(intensity float64) { //gd:Environment.set_glow_intensity
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_glow_intensity, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ intensity float64 }{intensity}))
}

//go:nosplit
func (self class) GetGlowIntensity() float64 { //gd:Environment.get_glow_intensity
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_glow_intensity, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGlowStrength(strength float64) { //gd:Environment.set_glow_strength
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_glow_strength, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ strength float64 }{strength}))
}

//go:nosplit
func (self class) GetGlowStrength() float64 { //gd:Environment.get_glow_strength
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_glow_strength, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGlowMix(mix float64) { //gd:Environment.set_glow_mix
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_glow_mix, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ mix float64 }{mix}))
}

//go:nosplit
func (self class) GetGlowMix() float64 { //gd:Environment.get_glow_mix
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_glow_mix, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGlowBloom(amount float64) { //gd:Environment.set_glow_bloom
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_glow_bloom, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetGlowBloom() float64 { //gd:Environment.get_glow_bloom
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_glow_bloom, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGlowBlendMode(mode GlowBlendMode) { //gd:Environment.set_glow_blend_mode
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_glow_blend_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode GlowBlendMode }{mode}))
}

//go:nosplit
func (self class) GetGlowBlendMode() GlowBlendMode { //gd:Environment.get_glow_blend_mode
	var r_ret = gdunsafe.Call[GlowBlendMode](self.AsObject(), gd.Global.Methods.Environment.Bind_get_glow_blend_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGlowHdrBleedThreshold(threshold float64) { //gd:Environment.set_glow_hdr_bleed_threshold
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_glow_hdr_bleed_threshold, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ threshold float64 }{threshold}))
}

//go:nosplit
func (self class) GetGlowHdrBleedThreshold() float64 { //gd:Environment.get_glow_hdr_bleed_threshold
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_glow_hdr_bleed_threshold, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGlowHdrBleedScale(scale float64) { //gd:Environment.set_glow_hdr_bleed_scale
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_glow_hdr_bleed_scale, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ scale float64 }{scale}))
}

//go:nosplit
func (self class) GetGlowHdrBleedScale() float64 { //gd:Environment.get_glow_hdr_bleed_scale
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_glow_hdr_bleed_scale, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGlowHdrLuminanceCap(amount float64) { //gd:Environment.set_glow_hdr_luminance_cap
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_glow_hdr_luminance_cap, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetGlowHdrLuminanceCap() float64 { //gd:Environment.get_glow_hdr_luminance_cap
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_glow_hdr_luminance_cap, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGlowMapStrength(strength float64) { //gd:Environment.set_glow_map_strength
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_glow_map_strength, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ strength float64 }{strength}))
}

//go:nosplit
func (self class) GetGlowMapStrength() float64 { //gd:Environment.get_glow_map_strength
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_glow_map_strength, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGlowMap(mode [1]gdclass.Texture) { //gd:Environment.set_glow_map
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_glow_map, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ mode gdextension.Object }{gdextension.Object(pointers.Get(mode[0])[0])}))
}

//go:nosplit
func (self class) GetGlowMap() [1]gdclass.Texture { //gd:Environment.get_glow_map
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.Environment.Bind_get_glow_map, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Texture{gd.PointerWithOwnershipTransferredToGo[gdclass.Texture](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetFogEnabled(enabled bool) { //gd:Environment.set_fog_enabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_fog_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsFogEnabled() bool { //gd:Environment.is_fog_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Environment.Bind_is_fog_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFogMode(mode FogMode) { //gd:Environment.set_fog_mode
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_fog_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode FogMode }{mode}))
}

//go:nosplit
func (self class) GetFogMode() FogMode { //gd:Environment.get_fog_mode
	var r_ret = gdunsafe.Call[FogMode](self.AsObject(), gd.Global.Methods.Environment.Bind_get_fog_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFogLightColor(light_color Color.RGBA) { //gd:Environment.set_fog_light_color
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_fog_light_color, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ light_color Color.RGBA }{light_color}))
}

//go:nosplit
func (self class) GetFogLightColor() Color.RGBA { //gd:Environment.get_fog_light_color
	var r_ret = gdunsafe.Call[Color.RGBA](self.AsObject(), gd.Global.Methods.Environment.Bind_get_fog_light_color, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFogLightEnergy(light_energy float64) { //gd:Environment.set_fog_light_energy
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_fog_light_energy, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ light_energy float64 }{light_energy}))
}

//go:nosplit
func (self class) GetFogLightEnergy() float64 { //gd:Environment.get_fog_light_energy
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_fog_light_energy, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFogSunScatter(sun_scatter float64) { //gd:Environment.set_fog_sun_scatter
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_fog_sun_scatter, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ sun_scatter float64 }{sun_scatter}))
}

//go:nosplit
func (self class) GetFogSunScatter() float64 { //gd:Environment.get_fog_sun_scatter
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_fog_sun_scatter, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFogDensity(density float64) { //gd:Environment.set_fog_density
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_fog_density, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ density float64 }{density}))
}

//go:nosplit
func (self class) GetFogDensity() float64 { //gd:Environment.get_fog_density
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_fog_density, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFogHeight(height float64) { //gd:Environment.set_fog_height
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_fog_height, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ height float64 }{height}))
}

//go:nosplit
func (self class) GetFogHeight() float64 { //gd:Environment.get_fog_height
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_fog_height, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFogHeightDensity(height_density float64) { //gd:Environment.set_fog_height_density
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_fog_height_density, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ height_density float64 }{height_density}))
}

//go:nosplit
func (self class) GetFogHeightDensity() float64 { //gd:Environment.get_fog_height_density
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_fog_height_density, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFogAerialPerspective(aerial_perspective float64) { //gd:Environment.set_fog_aerial_perspective
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_fog_aerial_perspective, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ aerial_perspective float64 }{aerial_perspective}))
}

//go:nosplit
func (self class) GetFogAerialPerspective() float64 { //gd:Environment.get_fog_aerial_perspective
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_fog_aerial_perspective, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFogSkyAffect(sky_affect float64) { //gd:Environment.set_fog_sky_affect
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_fog_sky_affect, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ sky_affect float64 }{sky_affect}))
}

//go:nosplit
func (self class) GetFogSkyAffect() float64 { //gd:Environment.get_fog_sky_affect
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_fog_sky_affect, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFogDepthCurve(curve float64) { //gd:Environment.set_fog_depth_curve
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_fog_depth_curve, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ curve float64 }{curve}))
}

//go:nosplit
func (self class) GetFogDepthCurve() float64 { //gd:Environment.get_fog_depth_curve
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_fog_depth_curve, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFogDepthBegin(begin float64) { //gd:Environment.set_fog_depth_begin
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_fog_depth_begin, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ begin float64 }{begin}))
}

//go:nosplit
func (self class) GetFogDepthBegin() float64 { //gd:Environment.get_fog_depth_begin
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_fog_depth_begin, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFogDepthEnd(end float64) { //gd:Environment.set_fog_depth_end
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_fog_depth_end, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ end float64 }{end}))
}

//go:nosplit
func (self class) GetFogDepthEnd() float64 { //gd:Environment.get_fog_depth_end
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_fog_depth_end, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVolumetricFogEnabled(enabled bool) { //gd:Environment.set_volumetric_fog_enabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_volumetric_fog_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsVolumetricFogEnabled() bool { //gd:Environment.is_volumetric_fog_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Environment.Bind_is_volumetric_fog_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVolumetricFogEmission(color Color.RGBA) { //gd:Environment.set_volumetric_fog_emission
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_volumetric_fog_emission, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

//go:nosplit
func (self class) GetVolumetricFogEmission() Color.RGBA { //gd:Environment.get_volumetric_fog_emission
	var r_ret = gdunsafe.Call[Color.RGBA](self.AsObject(), gd.Global.Methods.Environment.Bind_get_volumetric_fog_emission, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVolumetricFogAlbedo(color Color.RGBA) { //gd:Environment.set_volumetric_fog_albedo
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_volumetric_fog_albedo, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

//go:nosplit
func (self class) GetVolumetricFogAlbedo() Color.RGBA { //gd:Environment.get_volumetric_fog_albedo
	var r_ret = gdunsafe.Call[Color.RGBA](self.AsObject(), gd.Global.Methods.Environment.Bind_get_volumetric_fog_albedo, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVolumetricFogDensity(density float64) { //gd:Environment.set_volumetric_fog_density
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_volumetric_fog_density, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ density float64 }{density}))
}

//go:nosplit
func (self class) GetVolumetricFogDensity() float64 { //gd:Environment.get_volumetric_fog_density
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_volumetric_fog_density, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVolumetricFogEmissionEnergy(begin float64) { //gd:Environment.set_volumetric_fog_emission_energy
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_volumetric_fog_emission_energy, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ begin float64 }{begin}))
}

//go:nosplit
func (self class) GetVolumetricFogEmissionEnergy() float64 { //gd:Environment.get_volumetric_fog_emission_energy
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_volumetric_fog_emission_energy, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVolumetricFogAnisotropy(anisotropy float64) { //gd:Environment.set_volumetric_fog_anisotropy
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_volumetric_fog_anisotropy, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ anisotropy float64 }{anisotropy}))
}

//go:nosplit
func (self class) GetVolumetricFogAnisotropy() float64 { //gd:Environment.get_volumetric_fog_anisotropy
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_volumetric_fog_anisotropy, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVolumetricFogLength(length float64) { //gd:Environment.set_volumetric_fog_length
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_volumetric_fog_length, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ length float64 }{length}))
}

//go:nosplit
func (self class) GetVolumetricFogLength() float64 { //gd:Environment.get_volumetric_fog_length
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_volumetric_fog_length, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVolumetricFogDetailSpread(detail_spread float64) { //gd:Environment.set_volumetric_fog_detail_spread
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_volumetric_fog_detail_spread, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ detail_spread float64 }{detail_spread}))
}

//go:nosplit
func (self class) GetVolumetricFogDetailSpread() float64 { //gd:Environment.get_volumetric_fog_detail_spread
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_volumetric_fog_detail_spread, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVolumetricFogGiInject(gi_inject float64) { //gd:Environment.set_volumetric_fog_gi_inject
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_volumetric_fog_gi_inject, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ gi_inject float64 }{gi_inject}))
}

//go:nosplit
func (self class) GetVolumetricFogGiInject() float64 { //gd:Environment.get_volumetric_fog_gi_inject
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_volumetric_fog_gi_inject, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVolumetricFogAmbientInject(enabled float64) { //gd:Environment.set_volumetric_fog_ambient_inject
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_volumetric_fog_ambient_inject, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ enabled float64 }{enabled}))
}

//go:nosplit
func (self class) GetVolumetricFogAmbientInject() float64 { //gd:Environment.get_volumetric_fog_ambient_inject
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_volumetric_fog_ambient_inject, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVolumetricFogSkyAffect(sky_affect float64) { //gd:Environment.set_volumetric_fog_sky_affect
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_volumetric_fog_sky_affect, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ sky_affect float64 }{sky_affect}))
}

//go:nosplit
func (self class) GetVolumetricFogSkyAffect() float64 { //gd:Environment.get_volumetric_fog_sky_affect
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_volumetric_fog_sky_affect, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVolumetricFogTemporalReprojectionEnabled(enabled bool) { //gd:Environment.set_volumetric_fog_temporal_reprojection_enabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_volumetric_fog_temporal_reprojection_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsVolumetricFogTemporalReprojectionEnabled() bool { //gd:Environment.is_volumetric_fog_temporal_reprojection_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Environment.Bind_is_volumetric_fog_temporal_reprojection_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVolumetricFogTemporalReprojectionAmount(temporal_reprojection_amount float64) { //gd:Environment.set_volumetric_fog_temporal_reprojection_amount
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_volumetric_fog_temporal_reprojection_amount, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ temporal_reprojection_amount float64 }{temporal_reprojection_amount}))
}

//go:nosplit
func (self class) GetVolumetricFogTemporalReprojectionAmount() float64 { //gd:Environment.get_volumetric_fog_temporal_reprojection_amount
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_volumetric_fog_temporal_reprojection_amount, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAdjustmentEnabled(enabled bool) { //gd:Environment.set_adjustment_enabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_adjustment_enabled, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsAdjustmentEnabled() bool { //gd:Environment.is_adjustment_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Environment.Bind_is_adjustment_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAdjustmentBrightness(brightness float64) { //gd:Environment.set_adjustment_brightness
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_adjustment_brightness, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ brightness float64 }{brightness}))
}

//go:nosplit
func (self class) GetAdjustmentBrightness() float64 { //gd:Environment.get_adjustment_brightness
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_adjustment_brightness, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAdjustmentContrast(contrast float64) { //gd:Environment.set_adjustment_contrast
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_adjustment_contrast, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ contrast float64 }{contrast}))
}

//go:nosplit
func (self class) GetAdjustmentContrast() float64 { //gd:Environment.get_adjustment_contrast
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_adjustment_contrast, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAdjustmentSaturation(saturation float64) { //gd:Environment.set_adjustment_saturation
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_adjustment_saturation, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ saturation float64 }{saturation}))
}

//go:nosplit
func (self class) GetAdjustmentSaturation() float64 { //gd:Environment.get_adjustment_saturation
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Environment.Bind_get_adjustment_saturation, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAdjustmentColorCorrection(color_correction [1]gdclass.Texture) { //gd:Environment.set_adjustment_color_correction
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Environment.Bind_set_adjustment_color_correction, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ color_correction gdextension.Object }{gdextension.Object(pointers.Get(color_correction[0])[0])}))
}

//go:nosplit
func (self class) GetAdjustmentColorCorrection() [1]gdclass.Texture { //gd:Environment.get_adjustment_color_correction
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.Environment.Bind_get_adjustment_color_correction, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Texture{gd.PointerWithOwnershipTransferredToGo[gdclass.Texture](r_ret)}
	return ret
}
func (self class) AsEnvironment() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsEnvironment() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsEnvironment() Instance { return self.Super().AsEnvironment() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("Environment", func(ptr gd.Object) any { return [1]gdclass.Environment{*(*gdclass.Environment)(unsafe.Pointer(&ptr))} })
}

type BGMode int //gd:Environment.BGMode

const (
	/*Clears the background using the clear color defined in [member ProjectSettings.rendering/environment/defaults/default_clear_color].*/
	BgClearColor BGMode = 0
	/*Clears the background using a custom clear color.*/
	BgColor BGMode = 1
	/*Displays a user-defined sky in the background.*/
	BgSky BGMode = 2
	/*Displays a [CanvasLayer] in the background.*/
	BgCanvas BGMode = 3
	/*Keeps on screen every pixel drawn in the background. This is the fastest background mode, but it can only be safely used in fully-interior scenes (no visible sky or sky reflections). If enabled in a scene where the background is visible, "ghost trail" artifacts will be visible when moving the camera.*/
	BgKeep BGMode = 4
	/*Displays a camera feed in the background.*/
	BgCameraFeed BGMode = 5
	/*Represents the size of the [enum BGMode] enum.*/
	BgMax BGMode = 6
)

type AmbientSource int //gd:Environment.AmbientSource

const (
	/*Gather ambient light from whichever source is specified as the background.*/
	AmbientSourceBg AmbientSource = 0
	/*Disable ambient light. This provides a slight performance boost over [constant AMBIENT_SOURCE_SKY].*/
	AmbientSourceDisabled AmbientSource = 1
	/*Specify a specific [Color] for ambient light. This provides a slight performance boost over [constant AMBIENT_SOURCE_SKY].*/
	AmbientSourceColor AmbientSource = 2
	/*Gather ambient light from the [Sky] regardless of what the background is.*/
	AmbientSourceSky AmbientSource = 3
)

type ReflectionSource int //gd:Environment.ReflectionSource

const (
	/*Use the background for reflections.*/
	ReflectionSourceBg ReflectionSource = 0
	/*Disable reflections. This provides a slight performance boost over other options.*/
	ReflectionSourceDisabled ReflectionSource = 1
	/*Use the [Sky] for reflections regardless of what the background is.*/
	ReflectionSourceSky ReflectionSource = 2
)

type ToneMapper int //gd:Environment.ToneMapper

const (
	/*Does not modify color data, resulting in a linear tonemapping curve which unnaturally clips bright values, causing bright lighting to look blown out. The simplest and fastest tonemapper.*/
	ToneMapperLinear ToneMapper = 0
	/*A simple tonemapping curve that rolls off bright values to prevent clipping. This results in an image that can appear dull and low contrast. Slower than [constant TONE_MAPPER_LINEAR].
	  [b]Note:[/b] When [member tonemap_white] is left at the default value of [code]1.0[/code], [constant TONE_MAPPER_REINHARDT] produces an identical image to [constant TONE_MAPPER_LINEAR].*/
	ToneMapperReinhardt ToneMapper = 1
	/*Uses a film-like tonemapping curve to prevent clipping of bright values and provide better contrast than [constant TONE_MAPPER_REINHARDT]. Slightly slower than [constant TONE_MAPPER_REINHARDT].*/
	ToneMapperFilmic ToneMapper = 2
	/*Uses a high-contrast film-like tonemapping curve and desaturates bright values for a more realistic appearance. Slightly slower than [constant TONE_MAPPER_FILMIC].
	  [b]Note:[/b] This tonemapping operator is called "ACES Fitted" in Godot 3.x.*/
	ToneMapperAces ToneMapper = 3
	/*Uses a film-like tonemapping curve and desaturates bright values for a more realistic appearance. Better than other tonemappers at maintaining the hue of colors as they become brighter. The slowest tonemapping option.
	  [b]Note:[/b] [member tonemap_white] is fixed at a value of [code]16.29[/code], which makes [constant TONE_MAPPER_AGX] unsuitable for use with the Mobile rendering method.*/
	ToneMapperAgx ToneMapper = 4
)

type GlowBlendMode int //gd:Environment.GlowBlendMode

const (
	/*Additive glow blending mode. Mostly used for particles, glows (bloom), lens flare, bright sources.*/
	GlowBlendModeAdditive GlowBlendMode = 0
	/*Screen glow blending mode. Increases brightness, used frequently with bloom.*/
	GlowBlendModeScreen GlowBlendMode = 1
	/*Soft light glow blending mode. Modifies contrast, exposes shadows and highlights (vivid bloom).*/
	GlowBlendModeSoftlight GlowBlendMode = 2
	/*Replace glow blending mode. Replaces all pixels' color by the glow value. This can be used to simulate a full-screen blur effect by tweaking the glow parameters to match the original image's brightness.*/
	GlowBlendModeReplace GlowBlendMode = 3
	/*Mixes the glow with the underlying color to avoid increasing brightness as much while still maintaining a glow effect.*/
	GlowBlendModeMix GlowBlendMode = 4
)

type FogMode int //gd:Environment.FogMode

const (
	/*Use a physically-based fog model defined primarily by fog density.*/
	FogModeExponential FogMode = 0
	/*Use a simple fog model defined by start and end positions and a custom curve. While not physically accurate, this model can be useful when you need more artistic control.*/
	FogModeDepth FogMode = 1
)

type SDFGIYScale int //gd:Environment.SDFGIYScale

const (
	/*Use 50% scale for SDFGI on the Y (vertical) axis. SDFGI cells will be twice as short as they are wide. This allows providing increased GI detail and reduced light leaking with thin floors and ceilings. This is usually the best choice for scenes that don't feature much verticality.*/
	SdfgiYScale50Percent SDFGIYScale = 0
	/*Use 75% scale for SDFGI on the Y (vertical) axis. This is a balance between the 50% and 100% SDFGI Y scales.*/
	SdfgiYScale75Percent SDFGIYScale = 1
	/*Use 100% scale for SDFGI on the Y (vertical) axis. SDFGI cells will be as tall as they are wide. This is usually the best choice for highly vertical scenes. The downside is that light leaking may become more noticeable with thin floors and ceilings.*/
	SdfgiYScale100Percent SDFGIYScale = 2
)
