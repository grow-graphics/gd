// Code generated by the generate package DO NOT EDIT

// Package SystemFont provides methods for working with SystemFont object instances.
package SystemFont

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Font"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/TextServer"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[SystemFont] loads a font from a system font with the first matching name from [member font_names].
It will attempt to match font style, but it's not guaranteed.
The returned font might be part of a font collection or be a variable font with OpenType "weight", "width" and/or "italic" features set.
You can create [FontVariation] of the system font for precise control over its features.
[b]Note:[/b] This class is implemented on iOS, Linux, macOS and Windows, on other platforms it will fallback to default theme font.
*/
type Instance [1]gdclass.SystemFont

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_antialiasing                       gdextension.MethodForClass `hash:"1669900"`
	get_antialiasing                       gdextension.MethodForClass `hash:"4262718649"`
	set_disable_embedded_bitmaps           gdextension.MethodForClass `hash:"2586408642"`
	get_disable_embedded_bitmaps           gdextension.MethodForClass `hash:"36873697"`
	set_generate_mipmaps                   gdextension.MethodForClass `hash:"2586408642"`
	get_generate_mipmaps                   gdextension.MethodForClass `hash:"36873697"`
	set_allow_system_fallback              gdextension.MethodForClass `hash:"2586408642"`
	is_allow_system_fallback               gdextension.MethodForClass `hash:"36873697"`
	set_force_autohinter                   gdextension.MethodForClass `hash:"2586408642"`
	is_force_autohinter                    gdextension.MethodForClass `hash:"36873697"`
	set_hinting                            gdextension.MethodForClass `hash:"1827459492"`
	get_hinting                            gdextension.MethodForClass `hash:"3683214614"`
	set_subpixel_positioning               gdextension.MethodForClass `hash:"4225742182"`
	get_subpixel_positioning               gdextension.MethodForClass `hash:"1069238588"`
	set_keep_rounding_remainders           gdextension.MethodForClass `hash:"2586408642"`
	get_keep_rounding_remainders           gdextension.MethodForClass `hash:"36873697"`
	set_multichannel_signed_distance_field gdextension.MethodForClass `hash:"2586408642"`
	is_multichannel_signed_distance_field  gdextension.MethodForClass `hash:"36873697"`
	set_msdf_pixel_range                   gdextension.MethodForClass `hash:"1286410249"`
	get_msdf_pixel_range                   gdextension.MethodForClass `hash:"3905245786"`
	set_msdf_size                          gdextension.MethodForClass `hash:"1286410249"`
	get_msdf_size                          gdextension.MethodForClass `hash:"3905245786"`
	set_oversampling                       gdextension.MethodForClass `hash:"373806689"`
	get_oversampling                       gdextension.MethodForClass `hash:"1740695150"`
	get_font_names                         gdextension.MethodForClass `hash:"1139954409"`
	set_font_names                         gdextension.MethodForClass `hash:"4015028928"`
	get_font_italic                        gdextension.MethodForClass `hash:"36873697"`
	set_font_italic                        gdextension.MethodForClass `hash:"2586408642"`
	set_font_weight                        gdextension.MethodForClass `hash:"1286410249"`
	set_font_stretch                       gdextension.MethodForClass `hash:"1286410249"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("SystemFont")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsSystemFont() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.SystemFont

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.SystemFont)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.SystemFont)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.SystemFont)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) FontNames() []string {
	return []string(class(self).GetFontNames().Strings())
}

func (self Instance) SetFontNames(value []string) {
	class(self).SetFontNames(Packed.MakeStrings(value...))
}

func (self Instance) FontItalic() bool {
	return bool(class(self).GetFontItalic())
}

func (self Instance) SetFontItalic(value bool) {
	class(self).SetFontItalic(value)
}

func (self Instance) SetFontWeight(value int) {
	class(self).SetFontWeight(int64(value))
}

func (self Instance) SetFontStretch(value int) {
	class(self).SetFontStretch(int64(value))
}

func (self Instance) Antialiasing() TextServer.FontAntialiasing {
	return TextServer.FontAntialiasing(class(self).GetAntialiasing())
}

func (self Instance) SetAntialiasing(value TextServer.FontAntialiasing) {
	class(self).SetAntialiasing(value)
}

func (self Instance) GenerateMipmaps() bool {
	return bool(class(self).GetGenerateMipmaps())
}

func (self Instance) SetGenerateMipmaps(value bool) {
	class(self).SetGenerateMipmaps(value)
}

func (self Instance) DisableEmbeddedBitmaps() bool {
	return bool(class(self).GetDisableEmbeddedBitmaps())
}

func (self Instance) SetDisableEmbeddedBitmaps(value bool) {
	class(self).SetDisableEmbeddedBitmaps(value)
}

func (self Instance) AllowSystemFallback() bool {
	return bool(class(self).IsAllowSystemFallback())
}

func (self Instance) SetAllowSystemFallback(value bool) {
	class(self).SetAllowSystemFallback(value)
}

func (self Instance) ForceAutohinter() bool {
	return bool(class(self).IsForceAutohinter())
}

func (self Instance) SetForceAutohinter(value bool) {
	class(self).SetForceAutohinter(value)
}

func (self Instance) Hinting() TextServer.Hinting {
	return TextServer.Hinting(class(self).GetHinting())
}

func (self Instance) SetHinting(value TextServer.Hinting) {
	class(self).SetHinting(value)
}

func (self Instance) SubpixelPositioning() TextServer.SubpixelPositioning {
	return TextServer.SubpixelPositioning(class(self).GetSubpixelPositioning())
}

func (self Instance) SetSubpixelPositioning(value TextServer.SubpixelPositioning) {
	class(self).SetSubpixelPositioning(value)
}

func (self Instance) KeepRoundingRemainders() bool {
	return bool(class(self).GetKeepRoundingRemainders())
}

func (self Instance) SetKeepRoundingRemainders(value bool) {
	class(self).SetKeepRoundingRemainders(value)
}

func (self Instance) MultichannelSignedDistanceField() bool {
	return bool(class(self).IsMultichannelSignedDistanceField())
}

func (self Instance) SetMultichannelSignedDistanceField(value bool) {
	class(self).SetMultichannelSignedDistanceField(value)
}

func (self Instance) MsdfPixelRange() int {
	return int(int(class(self).GetMsdfPixelRange()))
}

func (self Instance) SetMsdfPixelRange(value int) {
	class(self).SetMsdfPixelRange(int64(value))
}

func (self Instance) MsdfSize() int {
	return int(int(class(self).GetMsdfSize()))
}

func (self Instance) SetMsdfSize(value int) {
	class(self).SetMsdfSize(int64(value))
}

func (self Instance) Oversampling() Float.X {
	return Float.X(Float.X(class(self).GetOversampling()))
}

func (self Instance) SetOversampling(value Float.X) {
	class(self).SetOversampling(float64(value))
}

//go:nosplit
func (self class) SetAntialiasing(antialiasing TextServer.FontAntialiasing) { //gd:SystemFont.set_antialiasing
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_antialiasing, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ antialiasing TextServer.FontAntialiasing }{antialiasing}))
}

//go:nosplit
func (self class) GetAntialiasing() TextServer.FontAntialiasing { //gd:SystemFont.get_antialiasing
	var r_ret = gdextension.Call[TextServer.FontAntialiasing](gd.ObjectChecked(self.AsObject()), methods.get_antialiasing, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDisableEmbeddedBitmaps(disable_embedded_bitmaps bool) { //gd:SystemFont.set_disable_embedded_bitmaps
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_disable_embedded_bitmaps, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ disable_embedded_bitmaps bool }{disable_embedded_bitmaps}))
}

//go:nosplit
func (self class) GetDisableEmbeddedBitmaps() bool { //gd:SystemFont.get_disable_embedded_bitmaps
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_disable_embedded_bitmaps, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGenerateMipmaps(generate_mipmaps bool) { //gd:SystemFont.set_generate_mipmaps
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_generate_mipmaps, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ generate_mipmaps bool }{generate_mipmaps}))
}

//go:nosplit
func (self class) GetGenerateMipmaps() bool { //gd:SystemFont.get_generate_mipmaps
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_generate_mipmaps, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAllowSystemFallback(allow_system_fallback bool) { //gd:SystemFont.set_allow_system_fallback
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_allow_system_fallback, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ allow_system_fallback bool }{allow_system_fallback}))
}

//go:nosplit
func (self class) IsAllowSystemFallback() bool { //gd:SystemFont.is_allow_system_fallback
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_allow_system_fallback, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetForceAutohinter(force_autohinter bool) { //gd:SystemFont.set_force_autohinter
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_force_autohinter, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ force_autohinter bool }{force_autohinter}))
}

//go:nosplit
func (self class) IsForceAutohinter() bool { //gd:SystemFont.is_force_autohinter
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_force_autohinter, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHinting(hinting TextServer.Hinting) { //gd:SystemFont.set_hinting
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_hinting, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ hinting TextServer.Hinting }{hinting}))
}

//go:nosplit
func (self class) GetHinting() TextServer.Hinting { //gd:SystemFont.get_hinting
	var r_ret = gdextension.Call[TextServer.Hinting](gd.ObjectChecked(self.AsObject()), methods.get_hinting, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSubpixelPositioning(subpixel_positioning TextServer.SubpixelPositioning) { //gd:SystemFont.set_subpixel_positioning
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_subpixel_positioning, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct {
		subpixel_positioning TextServer.SubpixelPositioning
	}{subpixel_positioning}))
}

//go:nosplit
func (self class) GetSubpixelPositioning() TextServer.SubpixelPositioning { //gd:SystemFont.get_subpixel_positioning
	var r_ret = gdextension.Call[TextServer.SubpixelPositioning](gd.ObjectChecked(self.AsObject()), methods.get_subpixel_positioning, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetKeepRoundingRemainders(keep_rounding_remainders bool) { //gd:SystemFont.set_keep_rounding_remainders
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_keep_rounding_remainders, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ keep_rounding_remainders bool }{keep_rounding_remainders}))
}

//go:nosplit
func (self class) GetKeepRoundingRemainders() bool { //gd:SystemFont.get_keep_rounding_remainders
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_keep_rounding_remainders, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMultichannelSignedDistanceField(msdf bool) { //gd:SystemFont.set_multichannel_signed_distance_field
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_multichannel_signed_distance_field, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ msdf bool }{msdf}))
}

//go:nosplit
func (self class) IsMultichannelSignedDistanceField() bool { //gd:SystemFont.is_multichannel_signed_distance_field
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_multichannel_signed_distance_field, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMsdfPixelRange(msdf_pixel_range int64) { //gd:SystemFont.set_msdf_pixel_range
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_msdf_pixel_range, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ msdf_pixel_range int64 }{msdf_pixel_range}))
}

//go:nosplit
func (self class) GetMsdfPixelRange() int64 { //gd:SystemFont.get_msdf_pixel_range
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_msdf_pixel_range, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMsdfSize(msdf_size int64) { //gd:SystemFont.set_msdf_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_msdf_size, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ msdf_size int64 }{msdf_size}))
}

//go:nosplit
func (self class) GetMsdfSize() int64 { //gd:SystemFont.get_msdf_size
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_msdf_size, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetOversampling(oversampling float64) { //gd:SystemFont.set_oversampling
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_oversampling, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ oversampling float64 }{oversampling}))
}

//go:nosplit
func (self class) GetOversampling() float64 { //gd:SystemFont.get_oversampling
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_oversampling, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetFontNames() Packed.Strings { //gd:SystemFont.get_font_names
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_font_names, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Strings(Array.Through(gd.PackedStringArrayProxy{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetFontNames(names Packed.Strings) { //gd:SystemFont.set_font_names
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_font_names, 0|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct {
		names gdextension.PackedArray[gdextension.String]
	}{pointers.Get(gd.InternalPackedStrings(names))}))
}

//go:nosplit
func (self class) GetFontItalic() bool { //gd:SystemFont.get_font_italic
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_font_italic, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFontItalic(italic bool) { //gd:SystemFont.set_font_italic
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_font_italic, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ italic bool }{italic}))
}

//go:nosplit
func (self class) SetFontWeight(weight int64) { //gd:SystemFont.set_font_weight
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_font_weight, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ weight int64 }{weight}))
}

//go:nosplit
func (self class) SetFontStretch(stretch int64) { //gd:SystemFont.set_font_stretch
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_font_stretch, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ stretch int64 }{stretch}))
}
func (self class) AsSystemFont() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsSystemFont() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsSystemFont() Instance { return self.Super().AsSystemFont() }
func (self class) AsFont() Font.Advanced          { return *((*Font.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsFont() Font.Instance  { return self.Super().AsFont() }
func (self Instance) AsFont() Font.Instance       { return *((*Font.Instance)(unsafe.Pointer(&self))) }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Font.Advanced(self.AsFont()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Font.Instance(self.AsFont()), name)
	}
}
func init() {
	gdclass.Register("SystemFont", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
