// Code generated by the generate package DO NOT EDIT

// Package Decal provides methods for working with Decal object instances.
package Decal

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/classdb/Texture2D"
import "graphics.gd/classdb/VisualInstance3D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector3"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[Decal]s are used to project a texture onto a [Mesh] in the scene. Use Decals to add detail to a scene without affecting the underlying [Mesh]. They are often used to add weathering to building, add dirt or mud to the ground, or add variety to props. Decals can be moved at any time, making them suitable for things like blob shadows or laser sight dots.
They are made of an [AABB] and a group of [Texture2D]s specifying [Color], normal, ORM (ambient occlusion, roughness, metallic), and emission. Decals are projected within their [AABB] so altering the orientation of the Decal affects the direction in which they are projected. By default, Decals are projected down (i.e. from positive Y to negative Y).
The [Texture2D]s associated with the Decal are automatically stored in a texture atlas which is used for drawing the decals so all decals can be drawn at once. Godot uses clustered decals, meaning they are stored in cluster data and drawn when the mesh is drawn, they are not drawn as a post-processing effect after.
[b]Note:[/b] Decals cannot affect an underlying material's transparency, regardless of its transparency mode (alpha blend, alpha scissor, alpha hash, opaque pre-pass). This means translucent or transparent areas of a material will remain translucent or transparent even if an opaque decal is applied on them.
[b]Note:[/b] Decals are only supported in the Forward+ and Mobile rendering methods, not Compatibility. When using the Mobile rendering method, only 8 decals can be displayed on each mesh resource. Attempting to display more than 8 decals on a single mesh resource will result in decals flickering in and out as the camera moves.
[b]Note:[/b] When using the Mobile rendering method, decals will only correctly affect meshes whose visibility AABB intersects with the decal's AABB. If using a shader to deform the mesh in a way that makes it go outside its AABB, [member GeometryInstance3D.extra_cull_margin] must be increased on the mesh. Otherwise, the decal may not be visible on the mesh.
*/
type Instance [1]gdclass.Decal

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_size                 gdextension.MethodForClass `hash:"3460891852"`
	get_size                 gdextension.MethodForClass `hash:"3360562783"`
	set_texture              gdextension.MethodForClass `hash:"2086764391"`
	get_texture              gdextension.MethodForClass `hash:"3244119503"`
	set_emission_energy      gdextension.MethodForClass `hash:"373806689"`
	get_emission_energy      gdextension.MethodForClass `hash:"1740695150"`
	set_albedo_mix           gdextension.MethodForClass `hash:"373806689"`
	get_albedo_mix           gdextension.MethodForClass `hash:"1740695150"`
	set_modulate             gdextension.MethodForClass `hash:"2920490490"`
	get_modulate             gdextension.MethodForClass `hash:"3444240500"`
	set_upper_fade           gdextension.MethodForClass `hash:"373806689"`
	get_upper_fade           gdextension.MethodForClass `hash:"1740695150"`
	set_lower_fade           gdextension.MethodForClass `hash:"373806689"`
	get_lower_fade           gdextension.MethodForClass `hash:"1740695150"`
	set_normal_fade          gdextension.MethodForClass `hash:"373806689"`
	get_normal_fade          gdextension.MethodForClass `hash:"1740695150"`
	set_enable_distance_fade gdextension.MethodForClass `hash:"2586408642"`
	is_distance_fade_enabled gdextension.MethodForClass `hash:"36873697"`
	set_distance_fade_begin  gdextension.MethodForClass `hash:"373806689"`
	get_distance_fade_begin  gdextension.MethodForClass `hash:"1740695150"`
	set_distance_fade_length gdextension.MethodForClass `hash:"373806689"`
	get_distance_fade_length gdextension.MethodForClass `hash:"1740695150"`
	set_cull_mask            gdextension.MethodForClass `hash:"1286410249"`
	get_cull_mask            gdextension.MethodForClass `hash:"3905245786"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("Decal")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsDecal() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.Decal

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.Decal)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.Decal)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.Decal)(unsafe.Pointer(&object))}
	object[0].Notification(0, false)
	return casted
}

func (self Instance) Size() Vector3.XYZ {
	return Vector3.XYZ(class(self).GetSize())
}

func (self Instance) SetSize(value Vector3.XYZ) {
	class(self).SetSize(Vector3.XYZ(value))
}

func (self Instance) TextureAlbedo() Texture2D.Instance {
	return Texture2D.Instance(class(self).GetTexture(0))
}

func (self Instance) SetTextureAlbedo(value Texture2D.Instance) {
	class(self).SetTexture(0, value)
}

func (self Instance) TextureNormal() Texture2D.Instance {
	return Texture2D.Instance(class(self).GetTexture(1))
}

func (self Instance) SetTextureNormal(value Texture2D.Instance) {
	class(self).SetTexture(1, value)
}

func (self Instance) TextureOrm() Texture2D.Instance {
	return Texture2D.Instance(class(self).GetTexture(2))
}

func (self Instance) SetTextureOrm(value Texture2D.Instance) {
	class(self).SetTexture(2, value)
}

func (self Instance) TextureEmission() Texture2D.Instance {
	return Texture2D.Instance(class(self).GetTexture(3))
}

func (self Instance) SetTextureEmission(value Texture2D.Instance) {
	class(self).SetTexture(3, value)
}

func (self Instance) EmissionEnergy() Float.X {
	return Float.X(Float.X(class(self).GetEmissionEnergy()))
}

func (self Instance) SetEmissionEnergy(value Float.X) {
	class(self).SetEmissionEnergy(float64(value))
}

func (self Instance) Modulate() Color.RGBA {
	return Color.RGBA(class(self).GetModulate())
}

func (self Instance) SetModulate(value Color.RGBA) {
	class(self).SetModulate(Color.RGBA(value))
}

func (self Instance) AlbedoMix() Float.X {
	return Float.X(Float.X(class(self).GetAlbedoMix()))
}

func (self Instance) SetAlbedoMix(value Float.X) {
	class(self).SetAlbedoMix(float64(value))
}

func (self Instance) NormalFade() Float.X {
	return Float.X(Float.X(class(self).GetNormalFade()))
}

func (self Instance) SetNormalFade(value Float.X) {
	class(self).SetNormalFade(float64(value))
}

func (self Instance) UpperFade() Float.X {
	return Float.X(Float.X(class(self).GetUpperFade()))
}

func (self Instance) SetUpperFade(value Float.X) {
	class(self).SetUpperFade(float64(value))
}

func (self Instance) LowerFade() Float.X {
	return Float.X(Float.X(class(self).GetLowerFade()))
}

func (self Instance) SetLowerFade(value Float.X) {
	class(self).SetLowerFade(float64(value))
}

func (self Instance) DistanceFadeEnabled() bool {
	return bool(class(self).IsDistanceFadeEnabled())
}

func (self Instance) SetDistanceFadeEnabled(value bool) {
	class(self).SetEnableDistanceFade(value)
}

func (self Instance) DistanceFadeBegin() Float.X {
	return Float.X(Float.X(class(self).GetDistanceFadeBegin()))
}

func (self Instance) SetDistanceFadeBegin(value Float.X) {
	class(self).SetDistanceFadeBegin(float64(value))
}

func (self Instance) DistanceFadeLength() Float.X {
	return Float.X(Float.X(class(self).GetDistanceFadeLength()))
}

func (self Instance) SetDistanceFadeLength(value Float.X) {
	class(self).SetDistanceFadeLength(float64(value))
}

func (self Instance) CullMask() int {
	return int(int(class(self).GetCullMask()))
}

func (self Instance) SetCullMask(value int) {
	class(self).SetCullMask(int64(value))
}

//go:nosplit
func (self class) SetSize(size Vector3.XYZ) { //gd:Decal.set_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_size, 0|(gdextension.SizeVector3<<4), unsafe.Pointer(&struct{ size Vector3.XYZ }{size}))
}

//go:nosplit
func (self class) GetSize() Vector3.XYZ { //gd:Decal.get_size
	var r_ret = gdextension.Call[Vector3.XYZ](gd.ObjectChecked(self.AsObject()), methods.get_size, gdextension.SizeVector3, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets the [Texture2D] associated with the specified [enum DecalTexture]. This is a convenience method, in most cases you should access the texture directly.
For example, instead of [code]$Decal.set_texture(Decal.TEXTURE_ALBEDO, albedo_tex)[/code], use [code]$Decal.texture_albedo = albedo_tex[/code].
One case where this is better than accessing the texture directly is when you want to copy one Decal's textures to another. For example:
[codeblocks]
[gdscript]
for i in Decal.TEXTURE_MAX:
    $NewDecal.set_texture(i, $OldDecal.get_texture(i))
[/gdscript]
[csharp]
for (int i = 0; i < (int)Decal.DecalTexture.Max; i++)
{
    GetNode<Decal>("NewDecal").SetTexture(i, GetNode<Decal>("OldDecal").GetTexture(i));
}
[/csharp]
[/codeblocks]
*/
//go:nosplit
func (self class) SetTexture(atype DecalTexture, texture [1]gdclass.Texture2D) { //gd:Decal.set_texture
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_texture, 0|(gdextension.SizeInt<<4)|(gdextension.SizeObject<<8), unsafe.Pointer(&struct {
		atype   DecalTexture
		texture gdextension.Object
	}{atype, gdextension.Object(gd.CallerIncrements(texture[0].AsObject()))}))
}

/*
Returns the [Texture2D] associated with the specified [enum DecalTexture]. This is a convenience method, in most cases you should access the texture directly.
For example, instead of [code]albedo_tex = $Decal.get_texture(Decal.TEXTURE_ALBEDO)[/code], use [code]albedo_tex = $Decal.texture_albedo[/code].
One case where this is better than accessing the texture directly is when you want to copy one Decal's textures to another. For example:
[codeblocks]
[gdscript]
for i in Decal.TEXTURE_MAX:
    $NewDecal.set_texture(i, $OldDecal.get_texture(i))
[/gdscript]
[csharp]
for (int i = 0; i < (int)Decal.DecalTexture.Max; i++)
{
    GetNode<Decal>("NewDecal").SetTexture(i, GetNode<Decal>("OldDecal").GetTexture(i));
}
[/csharp]
[/codeblocks]
*/
//go:nosplit
func (self class) GetTexture(atype DecalTexture) [1]gdclass.Texture2D { //gd:Decal.get_texture
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_texture, gdextension.SizeObject|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ atype DecalTexture }{atype}))
	var ret = [1]gdclass.Texture2D{gd.PointerWithOwnershipTransferredToGo[gdclass.Texture2D](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetEmissionEnergy(energy float64) { //gd:Decal.set_emission_energy
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_emission_energy, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ energy float64 }{energy}))
}

//go:nosplit
func (self class) GetEmissionEnergy() float64 { //gd:Decal.get_emission_energy
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_emission_energy, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAlbedoMix(energy float64) { //gd:Decal.set_albedo_mix
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_albedo_mix, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ energy float64 }{energy}))
}

//go:nosplit
func (self class) GetAlbedoMix() float64 { //gd:Decal.get_albedo_mix
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_albedo_mix, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetModulate(color Color.RGBA) { //gd:Decal.set_modulate
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_modulate, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

//go:nosplit
func (self class) GetModulate() Color.RGBA { //gd:Decal.get_modulate
	var r_ret = gdextension.Call[Color.RGBA](gd.ObjectChecked(self.AsObject()), methods.get_modulate, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetUpperFade(fade float64) { //gd:Decal.set_upper_fade
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_upper_fade, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ fade float64 }{fade}))
}

//go:nosplit
func (self class) GetUpperFade() float64 { //gd:Decal.get_upper_fade
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_upper_fade, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetLowerFade(fade float64) { //gd:Decal.set_lower_fade
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_lower_fade, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ fade float64 }{fade}))
}

//go:nosplit
func (self class) GetLowerFade() float64 { //gd:Decal.get_lower_fade
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_lower_fade, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetNormalFade(fade float64) { //gd:Decal.set_normal_fade
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_normal_fade, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ fade float64 }{fade}))
}

//go:nosplit
func (self class) GetNormalFade() float64 { //gd:Decal.get_normal_fade
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_normal_fade, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEnableDistanceFade(enable bool) { //gd:Decal.set_enable_distance_fade
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_enable_distance_fade, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) IsDistanceFadeEnabled() bool { //gd:Decal.is_distance_fade_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_distance_fade_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDistanceFadeBegin(distance float64) { //gd:Decal.set_distance_fade_begin
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_distance_fade_begin, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ distance float64 }{distance}))
}

//go:nosplit
func (self class) GetDistanceFadeBegin() float64 { //gd:Decal.get_distance_fade_begin
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_distance_fade_begin, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDistanceFadeLength(distance float64) { //gd:Decal.set_distance_fade_length
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_distance_fade_length, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ distance float64 }{distance}))
}

//go:nosplit
func (self class) GetDistanceFadeLength() float64 { //gd:Decal.get_distance_fade_length
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_distance_fade_length, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCullMask(mask int64) { //gd:Decal.set_cull_mask
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_cull_mask, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mask int64 }{mask}))
}

//go:nosplit
func (self class) GetCullMask() int64 { //gd:Decal.get_cull_mask
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_cull_mask, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsDecal() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsDecal() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsDecal() Instance { return self.Super().AsDecal() }
func (self class) AsVisualInstance3D() VisualInstance3D.Advanced {
	return *((*VisualInstance3D.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisualInstance3D() VisualInstance3D.Instance {
	return self.Super().AsVisualInstance3D()
}
func (self Instance) AsVisualInstance3D() VisualInstance3D.Instance {
	return *((*VisualInstance3D.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode3D() Node3D.Advanced         { return *((*Node3D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode3D() Node3D.Instance { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance      { return *((*Node3D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsNode() Node.Advanced             { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance     { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance          { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualInstance3D.Advanced(self.AsVisualInstance3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualInstance3D.Instance(self.AsVisualInstance3D()), name)
	}
}
func init() {
	gdclass.Register("Decal", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type DecalTexture int //gd:Decal.DecalTexture

const (
	/*[Texture2D] corresponding to [member texture_albedo].*/
	TextureAlbedo DecalTexture = 0
	/*[Texture2D] corresponding to [member texture_normal].*/
	TextureNormal DecalTexture = 1
	/*[Texture2D] corresponding to [member texture_orm].*/
	TextureOrm DecalTexture = 2
	/*[Texture2D] corresponding to [member texture_emission].*/
	TextureEmission DecalTexture = 3
	/*Max size of [enum DecalTexture] enum.*/
	TextureMax DecalTexture = 4
)
