// Code generated by the generate package DO NOT EDIT

// Package OpenXRInteractionProfile provides methods for working with OpenXRInteractionProfile object instances.
package OpenXRInteractionProfile

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/OpenXRIPBinding"
import "graphics.gd/classdb/OpenXRIPBindingModifier"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This object stores suggested bindings for an interaction profile. Interaction profiles define the metadata for a tracked XR device such as an XR controller.
For more information see the [url=https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#semantic-path-interaction-profiles]interaction profiles info in the OpenXR specification[/url].
*/
type Instance [1]gdclass.OpenXRInteractionProfile

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_interaction_profile_path gdextension.MethodForClass `hash:"83702148"`
	get_interaction_profile_path gdextension.MethodForClass `hash:"201670096"`
	get_binding_count            gdextension.MethodForClass `hash:"3905245786"`
	get_binding                  gdextension.MethodForClass `hash:"3934429652"`
	set_bindings                 gdextension.MethodForClass `hash:"381264803"`
	get_bindings                 gdextension.MethodForClass `hash:"3995934104"`
	get_binding_modifier_count   gdextension.MethodForClass `hash:"3905245786"`
	get_binding_modifier         gdextension.MethodForClass `hash:"2419896583"`
	set_binding_modifiers        gdextension.MethodForClass `hash:"381264803"`
	get_binding_modifiers        gdextension.MethodForClass `hash:"3995934104"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("OpenXRInteractionProfile")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsOpenXRInteractionProfile() Instance
}

/*
Get the number of bindings in this interaction profile.
*/
func (self Instance) GetBindingCount() int { //gd:OpenXRInteractionProfile.get_binding_count
	return int(int(Advanced(self).GetBindingCount()))
}

/*
Retrieve the binding at this index.
*/
func (self Instance) GetBinding(index int) OpenXRIPBinding.Instance { //gd:OpenXRInteractionProfile.get_binding
	return OpenXRIPBinding.Instance(Advanced(self).GetBinding(int64(index)))
}

/*
Get the number of binding modifiers in this interaction profile.
*/
func (self Instance) GetBindingModifierCount() int { //gd:OpenXRInteractionProfile.get_binding_modifier_count
	return int(int(Advanced(self).GetBindingModifierCount()))
}

/*
Get the [OpenXRBindingModifier] at this index.
*/
func (self Instance) GetBindingModifier(index int) OpenXRIPBindingModifier.Instance { //gd:OpenXRInteractionProfile.get_binding_modifier
	return OpenXRIPBindingModifier.Instance(Advanced(self).GetBindingModifier(int64(index)))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.OpenXRInteractionProfile

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.OpenXRInteractionProfile](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.OpenXRInteractionProfile](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.OpenXRInteractionProfile{pointers.Add[gdclass.OpenXRInteractionProfile]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.OpenXRInteractionProfile{pointers.New[gdclass.OpenXRInteractionProfile]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) InteractionProfilePath() string {
	return string(class(self).GetInteractionProfilePath().String())
}

func (self Instance) SetInteractionProfilePath(value string) {
	class(self).SetInteractionProfilePath(String.New(value))
}

func (self Instance) Bindings() []any {
	return []any(gd.ArrayAs[[]any](gd.InternalArray(class(self).GetBindings())))
}

func (self Instance) SetBindings(value []any) {
	class(self).SetBindings(gd.EngineArrayFromSlice(value))
}

func (self Instance) BindingModifiers() []any {
	return []any(gd.ArrayAs[[]any](gd.InternalArray(class(self).GetBindingModifiers())))
}

func (self Instance) SetBindingModifiers(value []any) {
	class(self).SetBindingModifiers(gd.EngineArrayFromSlice(value))
}

//go:nosplit
func (self class) SetInteractionProfilePath(interaction_profile_path String.Readable) { //gd:OpenXRInteractionProfile.set_interaction_profile_path
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_interaction_profile_path, 0|(gdextension.SizeString<<4), &struct{ interaction_profile_path gdextension.String }{pointers.Get(gd.InternalString(interaction_profile_path))})
}

//go:nosplit
func (self class) GetInteractionProfilePath() String.Readable { //gd:OpenXRInteractionProfile.get_interaction_profile_path
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_interaction_profile_path, gdextension.SizeString, &struct{}{})
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Get the number of bindings in this interaction profile.
*/
//go:nosplit
func (self class) GetBindingCount() int64 { //gd:OpenXRInteractionProfile.get_binding_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_binding_count, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Retrieve the binding at this index.
*/
//go:nosplit
func (self class) GetBinding(index int64) [1]gdclass.OpenXRIPBinding { //gd:OpenXRInteractionProfile.get_binding
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_binding, gdextension.SizeObject|(gdextension.SizeInt<<4), &struct{ index int64 }{index})
	var ret = [1]gdclass.OpenXRIPBinding{gd.PointerWithOwnershipTransferredToGo[gdclass.OpenXRIPBinding](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetBindings(bindings Array.Any) { //gd:OpenXRInteractionProfile.set_bindings
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bindings, 0|(gdextension.SizeArray<<4), &struct{ bindings gdextension.Array }{pointers.Get(gd.InternalArray(bindings))})
}

//go:nosplit
func (self class) GetBindings() Array.Any { //gd:OpenXRInteractionProfile.get_bindings
	var r_ret = gdextension.Call[gdextension.Array](gd.ObjectChecked(self.AsObject()), methods.get_bindings, gdextension.SizeArray, &struct{}{})
	var ret = Array.Through(gd.ArrayProxy[variant.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

/*
Get the number of binding modifiers in this interaction profile.
*/
//go:nosplit
func (self class) GetBindingModifierCount() int64 { //gd:OpenXRInteractionProfile.get_binding_modifier_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_binding_modifier_count, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Get the [OpenXRBindingModifier] at this index.
*/
//go:nosplit
func (self class) GetBindingModifier(index int64) [1]gdclass.OpenXRIPBindingModifier { //gd:OpenXRInteractionProfile.get_binding_modifier
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_binding_modifier, gdextension.SizeObject|(gdextension.SizeInt<<4), &struct{ index int64 }{index})
	var ret = [1]gdclass.OpenXRIPBindingModifier{gd.PointerWithOwnershipTransferredToGo[gdclass.OpenXRIPBindingModifier](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetBindingModifiers(binding_modifiers Array.Any) { //gd:OpenXRInteractionProfile.set_binding_modifiers
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_binding_modifiers, 0|(gdextension.SizeArray<<4), &struct{ binding_modifiers gdextension.Array }{pointers.Get(gd.InternalArray(binding_modifiers))})
}

//go:nosplit
func (self class) GetBindingModifiers() Array.Any { //gd:OpenXRInteractionProfile.get_binding_modifiers
	var r_ret = gdextension.Call[gdextension.Array](gd.ObjectChecked(self.AsObject()), methods.get_binding_modifiers, gdextension.SizeArray, &struct{}{})
	var ret = Array.Through(gd.ArrayProxy[variant.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}
func (self class) AsOpenXRInteractionProfile() Advanced {
	return Advanced{pointers.AsA[gdclass.OpenXRInteractionProfile](self[0])}
}
func (self Instance) AsOpenXRInteractionProfile() Instance {
	return Instance{pointers.AsA[gdclass.OpenXRInteractionProfile](self[0])}
}
func (self *Extension[T]) AsOpenXRInteractionProfile() Instance {
	return self.Super().AsOpenXRInteractionProfile()
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("OpenXRInteractionProfile", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.OpenXRInteractionProfile](ptr)} })
}
