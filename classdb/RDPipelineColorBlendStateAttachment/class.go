// Code generated by the generate package DO NOT EDIT

// Package RDPipelineColorBlendStateAttachment provides methods for working with RDPipelineColorBlendStateAttachment object instances.
package RDPipelineColorBlendStateAttachment

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Rendering"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Controls how blending between source and destination fragments is performed when using [RenderingDevice].
For reference, this is how common user-facing blend modes are implemented in Godot's 2D renderer:
[b]Mix:[/b]
[codeblock]
var attachment = RDPipelineColorBlendStateAttachment.new()
attachment.enable_blend = true
attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
[/codeblock]
[b]Add:[/b]
[codeblock]
var attachment = RDPipelineColorBlendStateAttachment.new()
attachment.enable_blend = true
attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
[/codeblock]
[b]Subtract:[/b]
[codeblock]
var attachment = RDPipelineColorBlendStateAttachment.new()
attachment.enable_blend = true
attachment.alpha_blend_op = RenderingDevice.BLEND_OP_REVERSE_SUBTRACT
attachment.color_blend_op = RenderingDevice.BLEND_OP_REVERSE_SUBTRACT
attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
[/codeblock]
[b]Multiply:[/b]
[codeblock]
var attachment = RDPipelineColorBlendStateAttachment.new()
attachment.enable_blend = true
attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_DST_COLOR
attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ZERO
attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_DST_ALPHA
attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ZERO
[/codeblock]
[b]Pre-multiplied alpha:[/b]
[codeblock]
var attachment = RDPipelineColorBlendStateAttachment.new()
attachment.enable_blend = true
attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
[/codeblock]
*/
type Instance [1]gdclass.RDPipelineColorBlendStateAttachment

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_as_mix                 gdextension.MethodForClass `hash:"3218959716"`
	set_enable_blend           gdextension.MethodForClass `hash:"2586408642"`
	get_enable_blend           gdextension.MethodForClass `hash:"36873697"`
	set_src_color_blend_factor gdextension.MethodForClass `hash:"2251019273"`
	get_src_color_blend_factor gdextension.MethodForClass `hash:"3691288359"`
	set_dst_color_blend_factor gdextension.MethodForClass `hash:"2251019273"`
	get_dst_color_blend_factor gdextension.MethodForClass `hash:"3691288359"`
	set_color_blend_op         gdextension.MethodForClass `hash:"3073022720"`
	get_color_blend_op         gdextension.MethodForClass `hash:"1385093561"`
	set_src_alpha_blend_factor gdextension.MethodForClass `hash:"2251019273"`
	get_src_alpha_blend_factor gdextension.MethodForClass `hash:"3691288359"`
	set_dst_alpha_blend_factor gdextension.MethodForClass `hash:"2251019273"`
	get_dst_alpha_blend_factor gdextension.MethodForClass `hash:"3691288359"`
	set_alpha_blend_op         gdextension.MethodForClass `hash:"3073022720"`
	get_alpha_blend_op         gdextension.MethodForClass `hash:"1385093561"`
	set_write_r                gdextension.MethodForClass `hash:"2586408642"`
	get_write_r                gdextension.MethodForClass `hash:"36873697"`
	set_write_g                gdextension.MethodForClass `hash:"2586408642"`
	get_write_g                gdextension.MethodForClass `hash:"36873697"`
	set_write_b                gdextension.MethodForClass `hash:"2586408642"`
	get_write_b                gdextension.MethodForClass `hash:"36873697"`
	set_write_a                gdextension.MethodForClass `hash:"2586408642"`
	get_write_a                gdextension.MethodForClass `hash:"36873697"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("RDPipelineColorBlendStateAttachment")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsRDPipelineColorBlendStateAttachment() Instance
}

/*
Convenience method to perform standard mix blending with straight (non-premultiplied) alpha. This sets [member enable_blend] to [code]true[/code], [member src_color_blend_factor] to [constant RenderingDevice.BLEND_FACTOR_SRC_ALPHA], [member dst_color_blend_factor] to [constant RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA], [member src_alpha_blend_factor] to [constant RenderingDevice.BLEND_FACTOR_SRC_ALPHA] and [member dst_alpha_blend_factor] to [constant RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA].
*/
func (self Instance) SetAsMix() { //gd:RDPipelineColorBlendStateAttachment.set_as_mix
	Advanced(self).SetAsMix()
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.RDPipelineColorBlendStateAttachment

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.RDPipelineColorBlendStateAttachment)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.RDPipelineColorBlendStateAttachment)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.RDPipelineColorBlendStateAttachment)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) EnableBlend() bool {
	return bool(class(self).GetEnableBlend())
}

func (self Instance) SetEnableBlend(value bool) {
	class(self).SetEnableBlend(value)
}

func (self Instance) SrcColorBlendFactor() Rendering.BlendFactor {
	return Rendering.BlendFactor(class(self).GetSrcColorBlendFactor())
}

func (self Instance) SetSrcColorBlendFactor(value Rendering.BlendFactor) {
	class(self).SetSrcColorBlendFactor(value)
}

func (self Instance) DstColorBlendFactor() Rendering.BlendFactor {
	return Rendering.BlendFactor(class(self).GetDstColorBlendFactor())
}

func (self Instance) SetDstColorBlendFactor(value Rendering.BlendFactor) {
	class(self).SetDstColorBlendFactor(value)
}

func (self Instance) ColorBlendOp() Rendering.BlendOperation {
	return Rendering.BlendOperation(class(self).GetColorBlendOp())
}

func (self Instance) SetColorBlendOp(value Rendering.BlendOperation) {
	class(self).SetColorBlendOp(value)
}

func (self Instance) SrcAlphaBlendFactor() Rendering.BlendFactor {
	return Rendering.BlendFactor(class(self).GetSrcAlphaBlendFactor())
}

func (self Instance) SetSrcAlphaBlendFactor(value Rendering.BlendFactor) {
	class(self).SetSrcAlphaBlendFactor(value)
}

func (self Instance) DstAlphaBlendFactor() Rendering.BlendFactor {
	return Rendering.BlendFactor(class(self).GetDstAlphaBlendFactor())
}

func (self Instance) SetDstAlphaBlendFactor(value Rendering.BlendFactor) {
	class(self).SetDstAlphaBlendFactor(value)
}

func (self Instance) AlphaBlendOp() Rendering.BlendOperation {
	return Rendering.BlendOperation(class(self).GetAlphaBlendOp())
}

func (self Instance) SetAlphaBlendOp(value Rendering.BlendOperation) {
	class(self).SetAlphaBlendOp(value)
}

func (self Instance) WriteR() bool {
	return bool(class(self).GetWriteR())
}

func (self Instance) SetWriteR(value bool) {
	class(self).SetWriteR(value)
}

func (self Instance) WriteG() bool {
	return bool(class(self).GetWriteG())
}

func (self Instance) SetWriteG(value bool) {
	class(self).SetWriteG(value)
}

func (self Instance) WriteB() bool {
	return bool(class(self).GetWriteB())
}

func (self Instance) SetWriteB(value bool) {
	class(self).SetWriteB(value)
}

func (self Instance) WriteA() bool {
	return bool(class(self).GetWriteA())
}

func (self Instance) SetWriteA(value bool) {
	class(self).SetWriteA(value)
}

/*
Convenience method to perform standard mix blending with straight (non-premultiplied) alpha. This sets [member enable_blend] to [code]true[/code], [member src_color_blend_factor] to [constant RenderingDevice.BLEND_FACTOR_SRC_ALPHA], [member dst_color_blend_factor] to [constant RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA], [member src_alpha_blend_factor] to [constant RenderingDevice.BLEND_FACTOR_SRC_ALPHA] and [member dst_alpha_blend_factor] to [constant RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA].
*/
//go:nosplit
func (self class) SetAsMix() { //gd:RDPipelineColorBlendStateAttachment.set_as_mix
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_as_mix, 0, unsafe.Pointer(&struct{}{}))
}

//go:nosplit
func (self class) SetEnableBlend(p_member bool) { //gd:RDPipelineColorBlendStateAttachment.set_enable_blend
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_enable_blend, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ p_member bool }{p_member}))
}

//go:nosplit
func (self class) GetEnableBlend() bool { //gd:RDPipelineColorBlendStateAttachment.get_enable_blend
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_enable_blend, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSrcColorBlendFactor(p_member Rendering.BlendFactor) { //gd:RDPipelineColorBlendStateAttachment.set_src_color_blend_factor
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_src_color_blend_factor, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.BlendFactor }{p_member}))
}

//go:nosplit
func (self class) GetSrcColorBlendFactor() Rendering.BlendFactor { //gd:RDPipelineColorBlendStateAttachment.get_src_color_blend_factor
	var r_ret = gdextension.Call[Rendering.BlendFactor](gd.ObjectChecked(self.AsObject()), methods.get_src_color_blend_factor, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDstColorBlendFactor(p_member Rendering.BlendFactor) { //gd:RDPipelineColorBlendStateAttachment.set_dst_color_blend_factor
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_dst_color_blend_factor, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.BlendFactor }{p_member}))
}

//go:nosplit
func (self class) GetDstColorBlendFactor() Rendering.BlendFactor { //gd:RDPipelineColorBlendStateAttachment.get_dst_color_blend_factor
	var r_ret = gdextension.Call[Rendering.BlendFactor](gd.ObjectChecked(self.AsObject()), methods.get_dst_color_blend_factor, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetColorBlendOp(p_member Rendering.BlendOperation) { //gd:RDPipelineColorBlendStateAttachment.set_color_blend_op
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_color_blend_op, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.BlendOperation }{p_member}))
}

//go:nosplit
func (self class) GetColorBlendOp() Rendering.BlendOperation { //gd:RDPipelineColorBlendStateAttachment.get_color_blend_op
	var r_ret = gdextension.Call[Rendering.BlendOperation](gd.ObjectChecked(self.AsObject()), methods.get_color_blend_op, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSrcAlphaBlendFactor(p_member Rendering.BlendFactor) { //gd:RDPipelineColorBlendStateAttachment.set_src_alpha_blend_factor
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_src_alpha_blend_factor, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.BlendFactor }{p_member}))
}

//go:nosplit
func (self class) GetSrcAlphaBlendFactor() Rendering.BlendFactor { //gd:RDPipelineColorBlendStateAttachment.get_src_alpha_blend_factor
	var r_ret = gdextension.Call[Rendering.BlendFactor](gd.ObjectChecked(self.AsObject()), methods.get_src_alpha_blend_factor, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDstAlphaBlendFactor(p_member Rendering.BlendFactor) { //gd:RDPipelineColorBlendStateAttachment.set_dst_alpha_blend_factor
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_dst_alpha_blend_factor, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.BlendFactor }{p_member}))
}

//go:nosplit
func (self class) GetDstAlphaBlendFactor() Rendering.BlendFactor { //gd:RDPipelineColorBlendStateAttachment.get_dst_alpha_blend_factor
	var r_ret = gdextension.Call[Rendering.BlendFactor](gd.ObjectChecked(self.AsObject()), methods.get_dst_alpha_blend_factor, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAlphaBlendOp(p_member Rendering.BlendOperation) { //gd:RDPipelineColorBlendStateAttachment.set_alpha_blend_op
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_alpha_blend_op, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.BlendOperation }{p_member}))
}

//go:nosplit
func (self class) GetAlphaBlendOp() Rendering.BlendOperation { //gd:RDPipelineColorBlendStateAttachment.get_alpha_blend_op
	var r_ret = gdextension.Call[Rendering.BlendOperation](gd.ObjectChecked(self.AsObject()), methods.get_alpha_blend_op, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWriteR(p_member bool) { //gd:RDPipelineColorBlendStateAttachment.set_write_r
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_write_r, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ p_member bool }{p_member}))
}

//go:nosplit
func (self class) GetWriteR() bool { //gd:RDPipelineColorBlendStateAttachment.get_write_r
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_write_r, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWriteG(p_member bool) { //gd:RDPipelineColorBlendStateAttachment.set_write_g
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_write_g, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ p_member bool }{p_member}))
}

//go:nosplit
func (self class) GetWriteG() bool { //gd:RDPipelineColorBlendStateAttachment.get_write_g
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_write_g, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWriteB(p_member bool) { //gd:RDPipelineColorBlendStateAttachment.set_write_b
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_write_b, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ p_member bool }{p_member}))
}

//go:nosplit
func (self class) GetWriteB() bool { //gd:RDPipelineColorBlendStateAttachment.get_write_b
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_write_b, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWriteA(p_member bool) { //gd:RDPipelineColorBlendStateAttachment.set_write_a
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_write_a, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ p_member bool }{p_member}))
}

//go:nosplit
func (self class) GetWriteA() bool { //gd:RDPipelineColorBlendStateAttachment.get_write_a
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_write_a, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsRDPipelineColorBlendStateAttachment() Advanced {
	return *((*Advanced)(unsafe.Pointer(&self)))
}
func (self Instance) AsRDPipelineColorBlendStateAttachment() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRDPipelineColorBlendStateAttachment() Instance {
	return self.Super().AsRDPipelineColorBlendStateAttachment()
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("RDPipelineColorBlendStateAttachment", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
