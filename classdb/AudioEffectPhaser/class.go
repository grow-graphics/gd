// Code generated by the generate package DO NOT EDIT

// Package AudioEffectPhaser provides methods for working with AudioEffectPhaser object instances.
package AudioEffectPhaser

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/AudioEffect"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Combines phase-shifted signals with the original signal. The movement of the phase-shifted signals is controlled using a low-frequency oscillator.
*/
type Instance [1]gdclass.AudioEffectPhaser

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_range_min_hz gdextension.MethodForClass `hash:"373806689"`
	get_range_min_hz gdextension.MethodForClass `hash:"1740695150"`
	set_range_max_hz gdextension.MethodForClass `hash:"373806689"`
	get_range_max_hz gdextension.MethodForClass `hash:"1740695150"`
	set_rate_hz      gdextension.MethodForClass `hash:"373806689"`
	get_rate_hz      gdextension.MethodForClass `hash:"1740695150"`
	set_feedback     gdextension.MethodForClass `hash:"373806689"`
	get_feedback     gdextension.MethodForClass `hash:"1740695150"`
	set_depth        gdextension.MethodForClass `hash:"373806689"`
	get_depth        gdextension.MethodForClass `hash:"1740695150"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("AudioEffectPhaser")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAudioEffectPhaser() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AudioEffectPhaser

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.AudioEffectPhaser](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.AudioEffectPhaser](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.AudioEffectPhaser{pointers.Add[gdclass.AudioEffectPhaser]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.AudioEffectPhaser{pointers.New[gdclass.AudioEffectPhaser]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) RangeMinHz() Float.X {
	return Float.X(Float.X(class(self).GetRangeMinHz()))
}

func (self Instance) SetRangeMinHz(value Float.X) {
	class(self).SetRangeMinHz(float64(value))
}

func (self Instance) RangeMaxHz() Float.X {
	return Float.X(Float.X(class(self).GetRangeMaxHz()))
}

func (self Instance) SetRangeMaxHz(value Float.X) {
	class(self).SetRangeMaxHz(float64(value))
}

func (self Instance) RateHz() Float.X {
	return Float.X(Float.X(class(self).GetRateHz()))
}

func (self Instance) SetRateHz(value Float.X) {
	class(self).SetRateHz(float64(value))
}

func (self Instance) Feedback() Float.X {
	return Float.X(Float.X(class(self).GetFeedback()))
}

func (self Instance) SetFeedback(value Float.X) {
	class(self).SetFeedback(float64(value))
}

func (self Instance) Depth() Float.X {
	return Float.X(Float.X(class(self).GetDepth()))
}

func (self Instance) SetDepth(value Float.X) {
	class(self).SetDepth(float64(value))
}

//go:nosplit
func (self class) SetRangeMinHz(hz float64) { //gd:AudioEffectPhaser.set_range_min_hz
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_range_min_hz, 0|(gdextension.SizeFloat<<4), &struct{ hz float64 }{hz})
}

//go:nosplit
func (self class) GetRangeMinHz() float64 { //gd:AudioEffectPhaser.get_range_min_hz
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_range_min_hz, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRangeMaxHz(hz float64) { //gd:AudioEffectPhaser.set_range_max_hz
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_range_max_hz, 0|(gdextension.SizeFloat<<4), &struct{ hz float64 }{hz})
}

//go:nosplit
func (self class) GetRangeMaxHz() float64 { //gd:AudioEffectPhaser.get_range_max_hz
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_range_max_hz, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRateHz(hz float64) { //gd:AudioEffectPhaser.set_rate_hz
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_rate_hz, 0|(gdextension.SizeFloat<<4), &struct{ hz float64 }{hz})
}

//go:nosplit
func (self class) GetRateHz() float64 { //gd:AudioEffectPhaser.get_rate_hz
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_rate_hz, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFeedback(fbk float64) { //gd:AudioEffectPhaser.set_feedback
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_feedback, 0|(gdextension.SizeFloat<<4), &struct{ fbk float64 }{fbk})
}

//go:nosplit
func (self class) GetFeedback() float64 { //gd:AudioEffectPhaser.get_feedback
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_feedback, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDepth(depth float64) { //gd:AudioEffectPhaser.set_depth
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_depth, 0|(gdextension.SizeFloat<<4), &struct{ depth float64 }{depth})
}

//go:nosplit
func (self class) GetDepth() float64 { //gd:AudioEffectPhaser.get_depth
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_depth, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsAudioEffectPhaser() Advanced {
	return Advanced{pointers.AsA[gdclass.AudioEffectPhaser](self[0])}
}
func (self Instance) AsAudioEffectPhaser() Instance {
	return Instance{pointers.AsA[gdclass.AudioEffectPhaser](self[0])}
}
func (self *Extension[T]) AsAudioEffectPhaser() Instance { return self.Super().AsAudioEffectPhaser() }
func (self class) AsAudioEffect() AudioEffect.Advanced {
	return AudioEffect.Advanced{pointers.AsA[gdclass.AudioEffect](self[0])}
}
func (self *Extension[T]) AsAudioEffect() AudioEffect.Instance { return self.Super().AsAudioEffect() }
func (self Instance) AsAudioEffect() AudioEffect.Instance {
	return AudioEffect.Instance{pointers.AsA[gdclass.AudioEffect](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioEffect.Advanced(self.AsAudioEffect()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioEffect.Instance(self.AsAudioEffect()), name)
	}
}
func init() {
	gdclass.Register("AudioEffectPhaser", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.AudioEffectPhaser](ptr)} })
}
