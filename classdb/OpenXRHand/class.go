// Code generated by the generate package DO NOT EDIT

// Package OpenXRHand provides methods for working with OpenXRHand object instances.
package OpenXRHand

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This node enables OpenXR's hand tracking functionality. The node should be a child node of an [XROrigin3D] node, tracking will update its position to the player's tracked hand Palm joint location (the center of the middle finger's metacarpal bone). This node also updates the skeleton of a properly skinned hand or avatar model.
If the skeleton is a hand (one of the hand bones is the root node of the skeleton), then the skeleton will be placed relative to the hand palm location and the hand mesh and skeleton should be children of the OpenXRHand node.
If the hand bones are part of a full skeleton, then the root of the hand will keep its location with the assumption that IK is used to position the hand and arm.
By default the skeleton hand bones are repositioned to match the size of the tracked hand. To preserve the modeled bone sizes change [member bone_update] to apply rotation only.
*/
type Instance [1]gdclass.OpenXRHand

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_hand          gdextension.MethodForClass `hash:"1849328560"`
	get_hand          gdextension.MethodForClass `hash:"2850644561"`
	set_hand_skeleton gdextension.MethodForClass `hash:"1348162250"`
	get_hand_skeleton gdextension.MethodForClass `hash:"4075236667"`
	set_motion_range  gdextension.MethodForClass `hash:"3326516003"`
	get_motion_range  gdextension.MethodForClass `hash:"2191822314"`
	set_skeleton_rig  gdextension.MethodForClass `hash:"1528072213"`
	get_skeleton_rig  gdextension.MethodForClass `hash:"968409338"`
	set_bone_update   gdextension.MethodForClass `hash:"3144625444"`
	get_bone_update   gdextension.MethodForClass `hash:"1310695248"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("OpenXRHand")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsOpenXRHand() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.OpenXRHand

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.OpenXRHand)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.OpenXRHand)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.OpenXRHand)(unsafe.Pointer(&object))}
	object[0].Notification(0, false)
	return casted
}

func (self Instance) Hand() Hands {
	return Hands(class(self).GetHand())
}

func (self Instance) SetHand(value Hands) {
	class(self).SetHand(value)
}

func (self Instance) MotionRange() MotionRange {
	return MotionRange(class(self).GetMotionRange())
}

func (self Instance) SetMotionRange(value MotionRange) {
	class(self).SetMotionRange(value)
}

func (self Instance) HandSkeleton() string {
	return string(class(self).GetHandSkeleton().String())
}

func (self Instance) SetHandSkeleton(value string) {
	class(self).SetHandSkeleton(Path.ToNode(String.New(value)))
}

func (self Instance) SkeletonRig() SkeletonRig {
	return SkeletonRig(class(self).GetSkeletonRig())
}

func (self Instance) SetSkeletonRig(value SkeletonRig) {
	class(self).SetSkeletonRig(value)
}

func (self Instance) BoneUpdate() BoneUpdate {
	return BoneUpdate(class(self).GetBoneUpdate())
}

func (self Instance) SetBoneUpdate(value BoneUpdate) {
	class(self).SetBoneUpdate(value)
}

//go:nosplit
func (self class) SetHand(hand Hands) { //gd:OpenXRHand.set_hand
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_hand, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ hand Hands }{hand}))
}

//go:nosplit
func (self class) GetHand() Hands { //gd:OpenXRHand.get_hand
	var r_ret = gdextension.Call[Hands](gd.ObjectChecked(self.AsObject()), methods.get_hand, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHandSkeleton(hand_skeleton Path.ToNode) { //gd:OpenXRHand.set_hand_skeleton
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_hand_skeleton, 0|(gdextension.SizeNodePath<<4), unsafe.Pointer(&struct{ hand_skeleton gdextension.NodePath }{pointers.Get(gd.InternalNodePath(hand_skeleton))}))
}

//go:nosplit
func (self class) GetHandSkeleton() Path.ToNode { //gd:OpenXRHand.get_hand_skeleton
	var r_ret = gdextension.Call[gdextension.NodePath](gd.ObjectChecked(self.AsObject()), methods.get_hand_skeleton, gdextension.SizeNodePath, unsafe.Pointer(&struct{}{}))
	var ret = Path.ToNode(String.Via(gd.NodePathProxy{}, pointers.Pack(pointers.New[gd.NodePath](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetMotionRange(motion_range MotionRange) { //gd:OpenXRHand.set_motion_range
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_motion_range, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ motion_range MotionRange }{motion_range}))
}

//go:nosplit
func (self class) GetMotionRange() MotionRange { //gd:OpenXRHand.get_motion_range
	var r_ret = gdextension.Call[MotionRange](gd.ObjectChecked(self.AsObject()), methods.get_motion_range, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSkeletonRig(skeleton_rig SkeletonRig) { //gd:OpenXRHand.set_skeleton_rig
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_skeleton_rig, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ skeleton_rig SkeletonRig }{skeleton_rig}))
}

//go:nosplit
func (self class) GetSkeletonRig() SkeletonRig { //gd:OpenXRHand.get_skeleton_rig
	var r_ret = gdextension.Call[SkeletonRig](gd.ObjectChecked(self.AsObject()), methods.get_skeleton_rig, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBoneUpdate(bone_update BoneUpdate) { //gd:OpenXRHand.set_bone_update
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bone_update, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ bone_update BoneUpdate }{bone_update}))
}

//go:nosplit
func (self class) GetBoneUpdate() BoneUpdate { //gd:OpenXRHand.get_bone_update
	var r_ret = gdextension.Call[BoneUpdate](gd.ObjectChecked(self.AsObject()), methods.get_bone_update, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsOpenXRHand() Advanced            { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsOpenXRHand() Instance         { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsOpenXRHand() Instance    { return self.Super().AsOpenXRHand() }
func (self class) AsNode3D() Node3D.Advanced         { return *((*Node3D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode3D() Node3D.Instance { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance      { return *((*Node3D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsNode() Node.Advanced             { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance     { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance          { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node3D.Advanced(self.AsNode3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node3D.Instance(self.AsNode3D()), name)
	}
}
func init() {
	gdclass.Register("OpenXRHand", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type Hands int //gd:OpenXRHand.Hands

const (
	/*Tracking the player's left hand.*/
	HandLeft Hands = 0
	/*Tracking the player's right hand.*/
	HandRight Hands = 1
	/*Maximum supported hands.*/
	HandMax Hands = 2
)

type MotionRange int //gd:OpenXRHand.MotionRange

const (
	/*When player grips, hand skeleton will form a full fist.*/
	MotionRangeUnobstructed MotionRange = 0
	/*When player grips, hand skeleton conforms to the controller the player is holding.*/
	MotionRangeConformToController MotionRange = 1
	/*Maximum supported motion ranges.*/
	MotionRangeMax MotionRange = 2
)

type SkeletonRig int //gd:OpenXRHand.SkeletonRig

const (
	/*An OpenXR compliant skeleton.*/
	SkeletonRigOpenxr SkeletonRig = 0
	/*A [SkeletonProfileHumanoid] compliant skeleton.*/
	SkeletonRigHumanoid SkeletonRig = 1
	/*Maximum supported hands.*/
	SkeletonRigMax SkeletonRig = 2
)

type BoneUpdate int //gd:OpenXRHand.BoneUpdate

const (
	/*The skeletons bones are fully updated (both position and rotation) to match the tracked bones.*/
	BoneUpdateFull BoneUpdate = 0
	/*The skeletons bones are only rotated to align with the tracked bones, preserving bone length.*/
	BoneUpdateRotationOnly BoneUpdate = 1
	/*Maximum supported bone update mode.*/
	BoneUpdateMax BoneUpdate = 2
)
