// Code generated by the generate package DO NOT EDIT

// Package AudioStreamPlayer2D provides methods for working with AudioStreamPlayer2D object instances.
package AudioStreamPlayer2D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/AudioServer"
import "graphics.gd/classdb/AudioStream"
import "graphics.gd/classdb/AudioStreamPlayback"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node2D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Plays audio that is attenuated with distance to the listener.
By default, audio is heard from the screen center. This can be changed by adding an [AudioListener2D] node to the scene and enabling it by calling [method AudioListener2D.make_current] on it.
See also [AudioStreamPlayer] to play a sound non-positionally.
[b]Note:[/b] Hiding an [AudioStreamPlayer2D] node does not disable its audio output. To temporarily disable an [AudioStreamPlayer2D]'s audio output, set [member volume_db] to a very low value like [code]-100[/code] (which isn't audible to human hearing).
*/
type Instance [1]gdclass.AudioStreamPlayer2D

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.AudioStreamPlayer2D

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAudioStreamPlayer2D() Instance
}

/*
Queues the audio to play on the next physics frame, from the given position [param from_position], in seconds.
*/
func (self Instance) Play() { //gd:AudioStreamPlayer2D.play
	Advanced(self).Play(float64(0.0))
}

/*
Queues the audio to play on the next physics frame, from the given position [param from_position], in seconds.
*/
func (self Expanded) Play(from_position Float.X) { //gd:AudioStreamPlayer2D.play
	Advanced(self).Play(float64(from_position))
}

/*
Sets the position from which audio will be played, in seconds.
*/
func (self Instance) SeekTo(to_position Float.X) { //gd:AudioStreamPlayer2D.seek
	Advanced(self).SeekTo(float64(to_position))
}

/*
Stops the audio.
*/
func (self Instance) Stop() { //gd:AudioStreamPlayer2D.stop
	Advanced(self).Stop()
}

/*
Returns the position in the [AudioStream].
*/
func (self Instance) GetPlaybackPosition() Float.X { //gd:AudioStreamPlayer2D.get_playback_position
	return Float.X(Float.X(Advanced(self).GetPlaybackPosition()))
}

/*
Returns whether the [AudioStreamPlayer] can return the [AudioStreamPlayback] object or not.
*/
func (self Instance) HasStreamPlayback() bool { //gd:AudioStreamPlayer2D.has_stream_playback
	return bool(Advanced(self).HasStreamPlayback())
}

/*
Returns the [AudioStreamPlayback] object associated with this [AudioStreamPlayer2D].
*/
func (self Instance) GetStreamPlayback() AudioStreamPlayback.Instance { //gd:AudioStreamPlayer2D.get_stream_playback
	return AudioStreamPlayback.Instance(Advanced(self).GetStreamPlayback())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AudioStreamPlayer2D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("AudioStreamPlayer2D"))
	casted := Instance{*(*gdclass.AudioStreamPlayer2D)(unsafe.Pointer(&object))}
	return casted
}

func (self Instance) Stream() AudioStream.Instance {
	return AudioStream.Instance(class(self).GetStream())
}

func (self Instance) SetStream(value AudioStream.Instance) {
	class(self).SetStream(value)
}

func (self Instance) VolumeDb() Float.X {
	return Float.X(Float.X(class(self).GetVolumeDb()))
}

func (self Instance) SetVolumeDb(value Float.X) {
	class(self).SetVolumeDb(float64(value))
}

func (self Instance) VolumeLinear() Float.X {
	return Float.X(Float.X(class(self).GetVolumeLinear()))
}

func (self Instance) SetVolumeLinear(value Float.X) {
	class(self).SetVolumeLinear(float64(value))
}

func (self Instance) PitchScale() Float.X {
	return Float.X(Float.X(class(self).GetPitchScale()))
}

func (self Instance) SetPitchScale(value Float.X) {
	class(self).SetPitchScale(float64(value))
}

func (self Instance) Playing() bool {
	return bool(class(self).IsPlaying())
}

func (self Instance) SetPlaying(value bool) {
	class(self).SetPlaying(value)
}

func (self Instance) Autoplay() bool {
	return bool(class(self).IsAutoplayEnabled())
}

func (self Instance) SetAutoplay(value bool) {
	class(self).SetAutoplay(value)
}

func (self Instance) StreamPaused() bool {
	return bool(class(self).GetStreamPaused())
}

func (self Instance) SetStreamPaused(value bool) {
	class(self).SetStreamPaused(value)
}

func (self Instance) MaxDistance() Float.X {
	return Float.X(Float.X(class(self).GetMaxDistance()))
}

func (self Instance) SetMaxDistance(value Float.X) {
	class(self).SetMaxDistance(float64(value))
}

func (self Instance) Attenuation() Float.X {
	return Float.X(Float.X(class(self).GetAttenuation()))
}

func (self Instance) SetAttenuation(value Float.X) {
	class(self).SetAttenuation(float64(value))
}

func (self Instance) MaxPolyphony() int {
	return int(int(class(self).GetMaxPolyphony()))
}

func (self Instance) SetMaxPolyphony(value int) {
	class(self).SetMaxPolyphony(int64(value))
}

func (self Instance) PanningStrength() Float.X {
	return Float.X(Float.X(class(self).GetPanningStrength()))
}

func (self Instance) SetPanningStrength(value Float.X) {
	class(self).SetPanningStrength(float64(value))
}

func (self Instance) Bus() string {
	return string(class(self).GetBus().String())
}

func (self Instance) SetBus(value string) {
	class(self).SetBus(String.Name(String.New(value)))
}

func (self Instance) AreaMask() int {
	return int(int(class(self).GetAreaMask()))
}

func (self Instance) SetAreaMask(value int) {
	class(self).SetAreaMask(int64(value))
}

func (self Instance) PlaybackType() AudioServer.PlaybackType {
	return AudioServer.PlaybackType(class(self).GetPlaybackType())
}

func (self Instance) SetPlaybackType(value AudioServer.PlaybackType) {
	class(self).SetPlaybackType(value)
}

//go:nosplit
func (self class) SetStream(stream [1]gdclass.AudioStream) { //gd:AudioStreamPlayer2D.set_stream
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_set_stream, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ stream gdextension.Object }{gdextension.Object(pointers.Get(stream[0])[0])}))
}

//go:nosplit
func (self class) GetStream() [1]gdclass.AudioStream { //gd:AudioStreamPlayer2D.get_stream
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_get_stream, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.AudioStream{gd.PointerWithOwnershipTransferredToGo[gdclass.AudioStream](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetVolumeDb(volume_db float64) { //gd:AudioStreamPlayer2D.set_volume_db
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_set_volume_db, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ volume_db float64 }{volume_db}))
}

//go:nosplit
func (self class) GetVolumeDb() float64 { //gd:AudioStreamPlayer2D.get_volume_db
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_get_volume_db, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVolumeLinear(volume_linear float64) { //gd:AudioStreamPlayer2D.set_volume_linear
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_set_volume_linear, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ volume_linear float64 }{volume_linear}))
}

//go:nosplit
func (self class) GetVolumeLinear() float64 { //gd:AudioStreamPlayer2D.get_volume_linear
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_get_volume_linear, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPitchScale(pitch_scale float64) { //gd:AudioStreamPlayer2D.set_pitch_scale
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_set_pitch_scale, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ pitch_scale float64 }{pitch_scale}))
}

//go:nosplit
func (self class) GetPitchScale() float64 { //gd:AudioStreamPlayer2D.get_pitch_scale
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_get_pitch_scale, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Queues the audio to play on the next physics frame, from the given position [param from_position], in seconds.
*/
//go:nosplit
func (self class) Play(from_position float64) { //gd:AudioStreamPlayer2D.play
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_play, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ from_position float64 }{from_position}))
}

/*
Sets the position from which audio will be played, in seconds.
*/
//go:nosplit
func (self class) SeekTo(to_position float64) { //gd:AudioStreamPlayer2D.seek
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_seek, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ to_position float64 }{to_position}))
}

/*
Stops the audio.
*/
//go:nosplit
func (self class) Stop() { //gd:AudioStreamPlayer2D.stop
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_stop, 0, unsafe.Pointer(&struct{}{}))
}

//go:nosplit
func (self class) IsPlaying() bool { //gd:AudioStreamPlayer2D.is_playing
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_is_playing, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the position in the [AudioStream].
*/
//go:nosplit
func (self class) GetPlaybackPosition() float64 { //gd:AudioStreamPlayer2D.get_playback_position
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_get_playback_position, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBus(bus String.Name) { //gd:AudioStreamPlayer2D.set_bus
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_set_bus, 0|(gdextension.SizeStringName<<4), unsafe.Pointer(&struct{ bus gdextension.StringName }{gdextension.StringName(pointers.Get(gd.InternalStringName(bus))[0])}))
}

//go:nosplit
func (self class) GetBus() String.Name { //gd:AudioStreamPlayer2D.get_bus
	var r_ret = gdunsafe.Call[[1]gd.EnginePointer](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_get_bus, gdextension.SizeStringName, unsafe.Pointer(&struct{}{}))
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetAutoplay(enable bool) { //gd:AudioStreamPlayer2D.set_autoplay
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_set_autoplay, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) IsAutoplayEnabled() bool { //gd:AudioStreamPlayer2D.is_autoplay_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_is_autoplay_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPlaying(enable bool) { //gd:AudioStreamPlayer2D.set_playing
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_set_playing, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) SetMaxDistance(pixels float64) { //gd:AudioStreamPlayer2D.set_max_distance
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_set_max_distance, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ pixels float64 }{pixels}))
}

//go:nosplit
func (self class) GetMaxDistance() float64 { //gd:AudioStreamPlayer2D.get_max_distance
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_get_max_distance, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAttenuation(curve float64) { //gd:AudioStreamPlayer2D.set_attenuation
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_set_attenuation, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ curve float64 }{curve}))
}

//go:nosplit
func (self class) GetAttenuation() float64 { //gd:AudioStreamPlayer2D.get_attenuation
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_get_attenuation, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAreaMask(mask int64) { //gd:AudioStreamPlayer2D.set_area_mask
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_set_area_mask, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mask int64 }{mask}))
}

//go:nosplit
func (self class) GetAreaMask() int64 { //gd:AudioStreamPlayer2D.get_area_mask
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_get_area_mask, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetStreamPaused(pause bool) { //gd:AudioStreamPlayer2D.set_stream_paused
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_set_stream_paused, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ pause bool }{pause}))
}

//go:nosplit
func (self class) GetStreamPaused() bool { //gd:AudioStreamPlayer2D.get_stream_paused
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_get_stream_paused, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMaxPolyphony(max_polyphony int64) { //gd:AudioStreamPlayer2D.set_max_polyphony
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_set_max_polyphony, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ max_polyphony int64 }{max_polyphony}))
}

//go:nosplit
func (self class) GetMaxPolyphony() int64 { //gd:AudioStreamPlayer2D.get_max_polyphony
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_get_max_polyphony, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPanningStrength(panning_strength float64) { //gd:AudioStreamPlayer2D.set_panning_strength
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_set_panning_strength, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ panning_strength float64 }{panning_strength}))
}

//go:nosplit
func (self class) GetPanningStrength() float64 { //gd:AudioStreamPlayer2D.get_panning_strength
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_get_panning_strength, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns whether the [AudioStreamPlayer] can return the [AudioStreamPlayback] object or not.
*/
//go:nosplit
func (self class) HasStreamPlayback() bool { //gd:AudioStreamPlayer2D.has_stream_playback
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_has_stream_playback, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the [AudioStreamPlayback] object associated with this [AudioStreamPlayer2D].
*/
//go:nosplit
func (self class) GetStreamPlayback() [1]gdclass.AudioStreamPlayback { //gd:AudioStreamPlayer2D.get_stream_playback
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_get_stream_playback, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.AudioStreamPlayback{gd.PointerWithOwnershipTransferredToGo[gdclass.AudioStreamPlayback](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetPlaybackType(playback_type AudioServer.PlaybackType) { //gd:AudioStreamPlayer2D.set_playback_type
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_set_playback_type, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ playback_type AudioServer.PlaybackType }{playback_type}))
}

//go:nosplit
func (self class) GetPlaybackType() AudioServer.PlaybackType { //gd:AudioStreamPlayer2D.get_playback_type
	var r_ret = gdunsafe.Call[AudioServer.PlaybackType](self.AsObject(), gd.Global.Methods.AudioStreamPlayer2D.Bind_get_playback_type, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self Instance) OnFinished(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("finished"), gd.NewCallable(cb), 0)
}

func (self class) AsAudioStreamPlayer2D() Advanced    { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsAudioStreamPlayer2D() Instance { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsAudioStreamPlayer2D() Instance {
	return self.Super().AsAudioStreamPlayer2D()
}
func (self class) AsNode2D() Node2D.Advanced         { return *((*Node2D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode2D() Node2D.Instance { return self.Super().AsNode2D() }
func (self Instance) AsNode2D() Node2D.Instance      { return *((*Node2D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return *((*CanvasItem.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return *((*CanvasItem.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node2D.Advanced(self.AsNode2D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node2D.Instance(self.AsNode2D()), name)
	}
}
func init() {
	gdclass.Register("AudioStreamPlayer2D", func(ptr gd.Object) any {
		return [1]gdclass.AudioStreamPlayer2D{*(*gdclass.AudioStreamPlayer2D)(unsafe.Pointer(&ptr))}
	})
}
