// Code generated by the generate package DO NOT EDIT

// Package HMACContext provides methods for working with HMACContext object instances.
package HMACContext

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/HashingContext"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
The HMACContext class is useful for advanced HMAC use cases, such as streaming the message as it supports creating the message over time rather than providing it all at once.
[codeblocks]
[gdscript]
extends Node
var ctx = HMACContext.new()

func _ready():

	var key = "supersecret".to_utf8_buffer()
	var err = ctx.start(HashingContext.HASH_SHA256, key)
	assert(err == OK)
	var msg1 = "this is ".to_utf8_buffer()
	var msg2 = "super duper secret".to_utf8_buffer()
	err = ctx.update(msg1)
	assert(err == OK)
	err = ctx.update(msg2)
	assert(err == OK)
	var hmac = ctx.finish()
	print(hmac.hex_encode())

[/gdscript]
[csharp]
using Godot;
using System.Diagnostics;

public partial class MyNode : Node

	{
	    private HmacContext _ctx = new HmacContext();

	    public override void _Ready()
	    {
	        byte[] key = "supersecret".ToUtf8Buffer();
	        Error err = _ctx.Start(HashingContext.HashType.Sha256, key);
	        Debug.Assert(err == Error.Ok);
	        byte[] msg1 = "this is ".ToUtf8Buffer();
	        byte[] msg2 = "super duper secret".ToUtf8Buffer();
	        err = _ctx.Update(msg1);
	        Debug.Assert(err == Error.Ok);
	        err = _ctx.Update(msg2);
	        Debug.Assert(err == Error.Ok);
	        byte[] hmac = _ctx.Finish();
	        GD.Print(hmac.HexEncode());
	    }
	}

[/csharp]
[/codeblocks]
*/
type Instance [1]gdclass.HMACContext

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsHMACContext() Instance
}

/*
Initializes the HMACContext. This method cannot be called again on the same HMACContext until [method finish] has been called.
*/
func (self Instance) Start(hash_type HashingContext.HashType, key []byte) error { //gd:HMACContext.start
	return error(gd.ToError(Advanced(self).Start(hash_type, Packed.Bytes(Packed.New(key...)))))
}

/*
Updates the message to be HMACed. This can be called multiple times before [method finish] is called to append [param data] to the message, but cannot be called until [method start] has been called.
*/
func (self Instance) Update(data []byte) error { //gd:HMACContext.update
	return error(gd.ToError(Advanced(self).Update(Packed.Bytes(Packed.New(data...)))))
}

/*
Returns the resulting HMAC. If the HMAC failed, an empty [PackedByteArray] is returned.
*/
func (self Instance) Finish() []byte { //gd:HMACContext.finish
	return []byte(Advanced(self).Finish().Bytes())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.HMACContext

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("HMACContext"))
	casted := Instance{*(*gdclass.HMACContext)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

/*
Initializes the HMACContext. This method cannot be called again on the same HMACContext until [method finish] has been called.
*/
//go:nosplit
func (self class) Start(hash_type HashingContext.HashType, key Packed.Bytes) Error.Code { //gd:HMACContext.start
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.HMACContext.Bind_start), gdextension.SizeInt|(gdextension.SizeInt<<4)|(gdextension.SizePackedArray<<8), unsafe.Pointer(&struct {
		hash_type HashingContext.HashType
		key       gdextension.PackedArray
	}{hash_type, gdextension.ToPackedArray(pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](key))))}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Updates the message to be HMACed. This can be called multiple times before [method finish] is called to append [param data] to the message, but cannot be called until [method start] has been called.
*/
//go:nosplit
func (self class) Update(data Packed.Bytes) Error.Code { //gd:HMACContext.update
	var r_ret = gdextension.Call[int64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.HMACContext.Bind_update), gdextension.SizeInt|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ data gdextension.PackedArray }{gdextension.ToPackedArray(pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](data))))}))
	var ret = Error.Code(r_ret)
	return ret
}

/*
Returns the resulting HMAC. If the HMAC failed, an empty [PackedByteArray] is returned.
*/
//go:nosplit
func (self class) Finish() Packed.Bytes { //gd:HMACContext.finish
	var r_ret = gdextension.Call[gd.PackedPointers](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.HMACContext.Bind_finish), gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret))))
	return ret
}
func (self class) AsHMACContext() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsHMACContext() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsHMACContext() Instance { return self.Super().AsHMACContext() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("HMACContext", func(ptr gd.Object) any { return [1]gdclass.HMACContext{*(*gdclass.HMACContext)(unsafe.Pointer(&ptr))} })
}
