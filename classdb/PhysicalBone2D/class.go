// Code generated by the generate package DO NOT EDIT

// Package PhysicalBone2D provides methods for working with PhysicalBone2D object instances.
package PhysicalBone2D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/CollisionObject2D"
import "graphics.gd/classdb/Joint2D"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node2D"
import "graphics.gd/classdb/PhysicsBody2D"
import "graphics.gd/classdb/RigidBody2D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
The [PhysicalBone2D] node is a [RigidBody2D]-based node that can be used to make [Bone2D]s in a [Skeleton2D] react to physics.
[b]Note:[/b] To make the [Bone2D]s visually follow the [PhysicalBone2D] node, use a [SkeletonModification2DPhysicalBones] modification on the [Skeleton2D] parent.
[b]Note:[/b] The [PhysicalBone2D] node does not automatically create a [Joint2D] node to keep [PhysicalBone2D] nodes together. They must be created manually. For most cases, you want to use a [PinJoint2D] node. The [PhysicalBone2D] node will automatically configure the [Joint2D] node once it's been added as a child node.
*/
type Instance [1]gdclass.PhysicalBone2D

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_joint                       gdextension.MethodForClass `hash:"3582132112"`
	get_auto_configure_joint        gdextension.MethodForClass `hash:"36873697"`
	set_auto_configure_joint        gdextension.MethodForClass `hash:"2586408642"`
	set_simulate_physics            gdextension.MethodForClass `hash:"2586408642"`
	get_simulate_physics            gdextension.MethodForClass `hash:"36873697"`
	is_simulating_physics           gdextension.MethodForClass `hash:"36873697"`
	set_bone2d_nodepath             gdextension.MethodForClass `hash:"1348162250"`
	get_bone2d_nodepath             gdextension.MethodForClass `hash:"4075236667"`
	set_bone2d_index                gdextension.MethodForClass `hash:"1286410249"`
	get_bone2d_index                gdextension.MethodForClass `hash:"3905245786"`
	set_follow_bone_when_simulating gdextension.MethodForClass `hash:"2586408642"`
	get_follow_bone_when_simulating gdextension.MethodForClass `hash:"36873697"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("PhysicalBone2D")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsPhysicalBone2D() Instance
}

/*
Returns the first [Joint2D] child node, if one exists. This is mainly a helper function to make it easier to get the [Joint2D] that the [PhysicalBone2D] is autoconfiguring.
*/
func (self Instance) GetJoint() Joint2D.Instance { //gd:PhysicalBone2D.get_joint
	return Joint2D.Instance(Advanced(self).GetJoint())
}

/*
Returns a boolean that indicates whether the [PhysicalBone2D] is running and simulating using the Godot 2D physics engine. When [code]true[/code], the PhysicalBone2D node is using physics.
*/
func (self Instance) IsSimulatingPhysics() bool { //gd:PhysicalBone2D.is_simulating_physics
	return bool(Advanced(self).IsSimulatingPhysics())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.PhysicalBone2D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.PhysicalBone2D](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.PhysicalBone2D](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.PhysicalBone2D{pointers.Add[gdclass.PhysicalBone2D]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.PhysicalBone2D{pointers.New[gdclass.PhysicalBone2D]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Bone2dNodepath() string {
	return string(class(self).GetBone2dNodepath().String())
}

func (self Instance) SetBone2dNodepath(value string) {
	class(self).SetBone2dNodepath(Path.ToNode(String.New(value)))
}

func (self Instance) Bone2dIndex() int {
	return int(int(class(self).GetBone2dIndex()))
}

func (self Instance) SetBone2dIndex(value int) {
	class(self).SetBone2dIndex(int64(value))
}

func (self Instance) AutoConfigureJoint() bool {
	return bool(class(self).GetAutoConfigureJoint())
}

func (self Instance) SetAutoConfigureJoint(value bool) {
	class(self).SetAutoConfigureJoint(value)
}

func (self Instance) SimulatePhysics() bool {
	return bool(class(self).GetSimulatePhysics())
}

func (self Instance) SetSimulatePhysics(value bool) {
	class(self).SetSimulatePhysics(value)
}

func (self Instance) FollowBoneWhenSimulating() bool {
	return bool(class(self).GetFollowBoneWhenSimulating())
}

func (self Instance) SetFollowBoneWhenSimulating(value bool) {
	class(self).SetFollowBoneWhenSimulating(value)
}

/*
Returns the first [Joint2D] child node, if one exists. This is mainly a helper function to make it easier to get the [Joint2D] that the [PhysicalBone2D] is autoconfiguring.
*/
//go:nosplit
func (self class) GetJoint() [1]gdclass.Joint2D { //gd:PhysicalBone2D.get_joint
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_joint, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Joint2D{gd.PointerMustAssertInstanceID[gdclass.Joint2D](r_ret)}
	return ret
}

//go:nosplit
func (self class) GetAutoConfigureJoint() bool { //gd:PhysicalBone2D.get_auto_configure_joint
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_auto_configure_joint, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAutoConfigureJoint(auto_configure_joint bool) { //gd:PhysicalBone2D.set_auto_configure_joint
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_auto_configure_joint, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ auto_configure_joint bool }{auto_configure_joint}))
}

//go:nosplit
func (self class) SetSimulatePhysics(simulate_physics bool) { //gd:PhysicalBone2D.set_simulate_physics
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_simulate_physics, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ simulate_physics bool }{simulate_physics}))
}

//go:nosplit
func (self class) GetSimulatePhysics() bool { //gd:PhysicalBone2D.get_simulate_physics
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_simulate_physics, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns a boolean that indicates whether the [PhysicalBone2D] is running and simulating using the Godot 2D physics engine. When [code]true[/code], the PhysicalBone2D node is using physics.
*/
//go:nosplit
func (self class) IsSimulatingPhysics() bool { //gd:PhysicalBone2D.is_simulating_physics
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_simulating_physics, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBone2dNodepath(nodepath Path.ToNode) { //gd:PhysicalBone2D.set_bone2d_nodepath
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bone2d_nodepath, 0|(gdextension.SizeNodePath<<4), unsafe.Pointer(&struct{ nodepath gdextension.NodePath }{pointers.Get(gd.InternalNodePath(nodepath))}))
}

//go:nosplit
func (self class) GetBone2dNodepath() Path.ToNode { //gd:PhysicalBone2D.get_bone2d_nodepath
	var r_ret = gdextension.Call[gdextension.NodePath](gd.ObjectChecked(self.AsObject()), methods.get_bone2d_nodepath, gdextension.SizeNodePath, unsafe.Pointer(&struct{}{}))
	var ret = Path.ToNode(String.Via(gd.NodePathProxy{}, pointers.Pack(pointers.New[gd.NodePath](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetBone2dIndex(bone_index int64) { //gd:PhysicalBone2D.set_bone2d_index
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bone2d_index, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ bone_index int64 }{bone_index}))
}

//go:nosplit
func (self class) GetBone2dIndex() int64 { //gd:PhysicalBone2D.get_bone2d_index
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_bone2d_index, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFollowBoneWhenSimulating(follow_bone bool) { //gd:PhysicalBone2D.set_follow_bone_when_simulating
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_follow_bone_when_simulating, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ follow_bone bool }{follow_bone}))
}

//go:nosplit
func (self class) GetFollowBoneWhenSimulating() bool { //gd:PhysicalBone2D.get_follow_bone_when_simulating
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_follow_bone_when_simulating, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsPhysicalBone2D() Advanced {
	return Advanced{pointers.AsA[gdclass.PhysicalBone2D](self[0])}
}
func (self Instance) AsPhysicalBone2D() Instance {
	return Instance{pointers.AsA[gdclass.PhysicalBone2D](self[0])}
}
func (self *Extension[T]) AsPhysicalBone2D() Instance { return self.Super().AsPhysicalBone2D() }
func (self class) AsRigidBody2D() RigidBody2D.Advanced {
	return RigidBody2D.Advanced{pointers.AsA[gdclass.RigidBody2D](self[0])}
}
func (self *Extension[T]) AsRigidBody2D() RigidBody2D.Instance { return self.Super().AsRigidBody2D() }
func (self Instance) AsRigidBody2D() RigidBody2D.Instance {
	return RigidBody2D.Instance{pointers.AsA[gdclass.RigidBody2D](self[0])}
}
func (self class) AsPhysicsBody2D() PhysicsBody2D.Advanced {
	return PhysicsBody2D.Advanced{pointers.AsA[gdclass.PhysicsBody2D](self[0])}
}
func (self *Extension[T]) AsPhysicsBody2D() PhysicsBody2D.Instance {
	return self.Super().AsPhysicsBody2D()
}
func (self Instance) AsPhysicsBody2D() PhysicsBody2D.Instance {
	return PhysicsBody2D.Instance{pointers.AsA[gdclass.PhysicsBody2D](self[0])}
}
func (self class) AsCollisionObject2D() CollisionObject2D.Advanced {
	return CollisionObject2D.Advanced{pointers.AsA[gdclass.CollisionObject2D](self[0])}
}
func (self *Extension[T]) AsCollisionObject2D() CollisionObject2D.Instance {
	return self.Super().AsCollisionObject2D()
}
func (self Instance) AsCollisionObject2D() CollisionObject2D.Instance {
	return CollisionObject2D.Instance{pointers.AsA[gdclass.CollisionObject2D](self[0])}
}
func (self class) AsNode2D() Node2D.Advanced {
	return Node2D.Advanced{pointers.AsA[gdclass.Node2D](self[0])}
}
func (self *Extension[T]) AsNode2D() Node2D.Instance { return self.Super().AsNode2D() }
func (self Instance) AsNode2D() Node2D.Instance {
	return Node2D.Instance{pointers.AsA[gdclass.Node2D](self[0])}
}
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return CanvasItem.Advanced{pointers.AsA[gdclass.CanvasItem](self[0])}
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return CanvasItem.Instance{pointers.AsA[gdclass.CanvasItem](self[0])}
}
func (self class) AsNode() Node.Advanced         { return Node.Advanced{pointers.AsA[gdclass.Node](self[0])} }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance {
	return Node.Instance{pointers.AsA[gdclass.Node](self[0])}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RigidBody2D.Advanced(self.AsRigidBody2D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RigidBody2D.Instance(self.AsRigidBody2D()), name)
	}
}
func init() {
	gdclass.Register("PhysicalBone2D", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.PhysicalBone2D](ptr)} })
}
