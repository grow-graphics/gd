// Code generated by the generate package DO NOT EDIT

// Package Translation provides methods for working with Translation object instances.
package Translation

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[Translation]s are resources that can be loaded and unloaded on demand. They map a collection of strings to their individual translations, and they also provide convenience methods for pluralization.

	See [Interface] for methods that can be overridden by a [Class] that extends it.
*/
type Instance [1]gdclass.Translation

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_locale                  gdextension.MethodForClass `hash:"83702148"`
	get_locale                  gdextension.MethodForClass `hash:"201670096"`
	add_message                 gdextension.MethodForClass `hash:"3898530326"`
	add_plural_message          gdextension.MethodForClass `hash:"2356982266"`
	get_message                 gdextension.MethodForClass `hash:"1829228469"`
	get_plural_message          gdextension.MethodForClass `hash:"229954002"`
	erase_message               gdextension.MethodForClass `hash:"3959009644"`
	get_message_list            gdextension.MethodForClass `hash:"1139954409"`
	get_translated_message_list gdextension.MethodForClass `hash:"1139954409"`
	get_message_count           gdextension.MethodForClass `hash:"3905245786"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("Translation")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.Translation

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsTranslation() Instance
}
type Interface interface {
	//Virtual method to override [method get_plural_message].
	GetPluralMessage(src_message string, src_plural_message string, n int, context string) string
	//Virtual method to override [method get_message].
	GetMessage(src_message string, context string) string
}

// Implementation implements [Interface] with empty methods.
type Implementation = implementation

type implementation struct{}

func (self implementation) GetPluralMessage(src_message string, src_plural_message string, n int, context string) (_ string) {
	return
}
func (self implementation) GetMessage(src_message string, context string) (_ string) { return }

/*
Virtual method to override [method get_plural_message].
*/
func (Instance) _get_plural_message(impl func(ptr unsafe.Pointer, src_message string, src_plural_message string, n int, context string) string) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args gd.Address, p_back gd.Address) {
		var src_message = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](gd.UnsafeGet[gdextension.StringName](p_args, 0)))))
		defer pointers.End(gd.InternalStringName(src_message))
		var src_plural_message = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](gd.UnsafeGet[gdextension.StringName](p_args, 1)))))
		defer pointers.End(gd.InternalStringName(src_plural_message))
		var n = gd.UnsafeGet[int64](p_args, 2)
		var context = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](gd.UnsafeGet[gdextension.StringName](p_args, 3)))))
		defer pointers.End(gd.InternalStringName(context))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, src_message.String(), src_plural_message.String(), int(n), context.String())
		ptr, ok := pointers.End(gd.InternalStringName(String.Name(String.New(ret))))

		if !ok {
			return
		}
		gd.UnsafeSet(p_back, ptr)
	}
}

/*
Virtual method to override [method get_message].
*/
func (Instance) _get_message(impl func(ptr unsafe.Pointer, src_message string, context string) string) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args gd.Address, p_back gd.Address) {
		var src_message = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](gd.UnsafeGet[gdextension.StringName](p_args, 0)))))
		defer pointers.End(gd.InternalStringName(src_message))
		var context = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](gd.UnsafeGet[gdextension.StringName](p_args, 1)))))
		defer pointers.End(gd.InternalStringName(context))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, src_message.String(), context.String())
		ptr, ok := pointers.End(gd.InternalStringName(String.Name(String.New(ret))))

		if !ok {
			return
		}
		gd.UnsafeSet(p_back, ptr)
	}
}

/*
Adds a message if nonexistent, followed by its translation.
An additional context could be used to specify the translation context or differentiate polysemic words.
*/
func (self Instance) AddMessage(src_message string, xlated_message string) { //gd:Translation.add_message
	Advanced(self).AddMessage(String.Name(String.New(src_message)), String.Name(String.New(xlated_message)), String.Name(String.New("")))
}

/*
Adds a message if nonexistent, followed by its translation.
An additional context could be used to specify the translation context or differentiate polysemic words.
*/
func (self Expanded) AddMessage(src_message string, xlated_message string, context string) { //gd:Translation.add_message
	Advanced(self).AddMessage(String.Name(String.New(src_message)), String.Name(String.New(xlated_message)), String.Name(String.New(context)))
}

/*
Adds a message involving plural translation if nonexistent, followed by its translation.
An additional context could be used to specify the translation context or differentiate polysemic words.
*/
func (self Instance) AddPluralMessage(src_message string, xlated_messages []string) { //gd:Translation.add_plural_message
	Advanced(self).AddPluralMessage(String.Name(String.New(src_message)), Packed.MakeStrings(xlated_messages...), String.Name(String.New("")))
}

/*
Adds a message involving plural translation if nonexistent, followed by its translation.
An additional context could be used to specify the translation context or differentiate polysemic words.
*/
func (self Expanded) AddPluralMessage(src_message string, xlated_messages []string, context string) { //gd:Translation.add_plural_message
	Advanced(self).AddPluralMessage(String.Name(String.New(src_message)), Packed.MakeStrings(xlated_messages...), String.Name(String.New(context)))
}

/*
Returns a message's translation.
*/
func (self Instance) GetMessage(src_message string) string { //gd:Translation.get_message
	return string(Advanced(self).GetMessage(String.Name(String.New(src_message)), String.Name(String.New(""))).String())
}

/*
Returns a message's translation.
*/
func (self Expanded) GetMessage(src_message string, context string) string { //gd:Translation.get_message
	return string(Advanced(self).GetMessage(String.Name(String.New(src_message)), String.Name(String.New(context))).String())
}

/*
Returns a message's translation involving plurals.
The number [param n] is the number or quantity of the plural object. It will be used to guide the translation system to fetch the correct plural form for the selected language.
*/
func (self Instance) GetPluralMessage(src_message string, src_plural_message string, n int) string { //gd:Translation.get_plural_message
	return string(Advanced(self).GetPluralMessage(String.Name(String.New(src_message)), String.Name(String.New(src_plural_message)), int64(n), String.Name(String.New(""))).String())
}

/*
Returns a message's translation involving plurals.
The number [param n] is the number or quantity of the plural object. It will be used to guide the translation system to fetch the correct plural form for the selected language.
*/
func (self Expanded) GetPluralMessage(src_message string, src_plural_message string, n int, context string) string { //gd:Translation.get_plural_message
	return string(Advanced(self).GetPluralMessage(String.Name(String.New(src_message)), String.Name(String.New(src_plural_message)), int64(n), String.Name(String.New(context))).String())
}

/*
Erases a message.
*/
func (self Instance) EraseMessage(src_message string) { //gd:Translation.erase_message
	Advanced(self).EraseMessage(String.Name(String.New(src_message)), String.Name(String.New("")))
}

/*
Erases a message.
*/
func (self Expanded) EraseMessage(src_message string, context string) { //gd:Translation.erase_message
	Advanced(self).EraseMessage(String.Name(String.New(src_message)), String.Name(String.New(context)))
}

/*
Returns all the messages (keys).
*/
func (self Instance) GetMessageList() []string { //gd:Translation.get_message_list
	return []string(Advanced(self).GetMessageList().Strings())
}

/*
Returns all the messages (translated text).
*/
func (self Instance) GetTranslatedMessageList() []string { //gd:Translation.get_translated_message_list
	return []string(Advanced(self).GetTranslatedMessageList().Strings())
}

/*
Returns the number of existing messages.
*/
func (self Instance) GetMessageCount() int { //gd:Translation.get_message_count
	return int(int(Advanced(self).GetMessageCount()))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.Translation

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.Translation)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.Translation)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.Translation)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) Locale() string {
	return string(class(self).GetLocale().String())
}

func (self Instance) SetLocale(value string) {
	class(self).SetLocale(String.New(value))
}

/*
Virtual method to override [method get_plural_message].
*/
func (class) _get_plural_message(impl func(ptr unsafe.Pointer, src_message String.Name, src_plural_message String.Name, n int64, context String.Name) String.Name) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args gd.Address, p_back gd.Address) {
		var src_message = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](gd.UnsafeGet[gdextension.StringName](p_args, 0)))))
		defer pointers.End(gd.InternalStringName(src_message))
		var src_plural_message = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](gd.UnsafeGet[gdextension.StringName](p_args, 1)))))
		defer pointers.End(gd.InternalStringName(src_plural_message))
		var n = gd.UnsafeGet[int64](p_args, 2)
		var context = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](gd.UnsafeGet[gdextension.StringName](p_args, 3)))))
		defer pointers.End(gd.InternalStringName(context))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, src_message, src_plural_message, n, context)
		ptr, ok := pointers.End(gd.InternalStringName(ret))

		if !ok {
			return
		}
		gd.UnsafeSet(p_back, ptr)
	}
}

/*
Virtual method to override [method get_message].
*/
func (class) _get_message(impl func(ptr unsafe.Pointer, src_message String.Name, context String.Name) String.Name) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args gd.Address, p_back gd.Address) {
		var src_message = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](gd.UnsafeGet[gdextension.StringName](p_args, 0)))))
		defer pointers.End(gd.InternalStringName(src_message))
		var context = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](gd.UnsafeGet[gdextension.StringName](p_args, 1)))))
		defer pointers.End(gd.InternalStringName(context))
		self := reflect.ValueOf(class).UnsafePointer()
		ret := impl(self, src_message, context)
		ptr, ok := pointers.End(gd.InternalStringName(ret))

		if !ok {
			return
		}
		gd.UnsafeSet(p_back, ptr)
	}
}

//go:nosplit
func (self class) SetLocale(locale String.Readable) { //gd:Translation.set_locale
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_locale, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ locale gdextension.String }{pointers.Get(gd.InternalString(locale))}))
}

//go:nosplit
func (self class) GetLocale() String.Readable { //gd:Translation.get_locale
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_locale, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Adds a message if nonexistent, followed by its translation.
An additional context could be used to specify the translation context or differentiate polysemic words.
*/
//go:nosplit
func (self class) AddMessage(src_message String.Name, xlated_message String.Name, context String.Name) { //gd:Translation.add_message
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.add_message, 0|(gdextension.SizeStringName<<4)|(gdextension.SizeStringName<<8)|(gdextension.SizeStringName<<12), unsafe.Pointer(&struct {
		src_message    gdextension.StringName
		xlated_message gdextension.StringName
		context        gdextension.StringName
	}{pointers.Get(gd.InternalStringName(src_message)), pointers.Get(gd.InternalStringName(xlated_message)), pointers.Get(gd.InternalStringName(context))}))
}

/*
Adds a message involving plural translation if nonexistent, followed by its translation.
An additional context could be used to specify the translation context or differentiate polysemic words.
*/
//go:nosplit
func (self class) AddPluralMessage(src_message String.Name, xlated_messages Packed.Strings, context String.Name) { //gd:Translation.add_plural_message
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.add_plural_message, 0|(gdextension.SizeStringName<<4)|(gdextension.SizePackedArray<<8)|(gdextension.SizeStringName<<12), unsafe.Pointer(&struct {
		src_message     gdextension.StringName
		xlated_messages gdextension.PackedArray[gdextension.String]
		context         gdextension.StringName
	}{pointers.Get(gd.InternalStringName(src_message)), pointers.Get(gd.InternalPackedStrings(xlated_messages)), pointers.Get(gd.InternalStringName(context))}))
}

/*
Returns a message's translation.
*/
//go:nosplit
func (self class) GetMessage(src_message String.Name, context String.Name) String.Name { //gd:Translation.get_message
	var r_ret = gdextension.Call[gdextension.StringName](gd.ObjectChecked(self.AsObject()), methods.get_message, gdextension.SizeStringName|(gdextension.SizeStringName<<4)|(gdextension.SizeStringName<<8), unsafe.Pointer(&struct {
		src_message gdextension.StringName
		context     gdextension.StringName
	}{pointers.Get(gd.InternalStringName(src_message)), pointers.Get(gd.InternalStringName(context))}))
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret))))
	return ret
}

/*
Returns a message's translation involving plurals.
The number [param n] is the number or quantity of the plural object. It will be used to guide the translation system to fetch the correct plural form for the selected language.
*/
//go:nosplit
func (self class) GetPluralMessage(src_message String.Name, src_plural_message String.Name, n int64, context String.Name) String.Name { //gd:Translation.get_plural_message
	var r_ret = gdextension.Call[gdextension.StringName](gd.ObjectChecked(self.AsObject()), methods.get_plural_message, gdextension.SizeStringName|(gdextension.SizeStringName<<4)|(gdextension.SizeStringName<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeStringName<<16), unsafe.Pointer(&struct {
		src_message        gdextension.StringName
		src_plural_message gdextension.StringName
		n                  int64
		context            gdextension.StringName
	}{pointers.Get(gd.InternalStringName(src_message)), pointers.Get(gd.InternalStringName(src_plural_message)), n, pointers.Get(gd.InternalStringName(context))}))
	var ret = String.Name(String.Via(gd.StringNameProxy{}, pointers.Pack(pointers.New[gd.StringName](r_ret))))
	return ret
}

/*
Erases a message.
*/
//go:nosplit
func (self class) EraseMessage(src_message String.Name, context String.Name) { //gd:Translation.erase_message
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.erase_message, 0|(gdextension.SizeStringName<<4)|(gdextension.SizeStringName<<8), unsafe.Pointer(&struct {
		src_message gdextension.StringName
		context     gdextension.StringName
	}{pointers.Get(gd.InternalStringName(src_message)), pointers.Get(gd.InternalStringName(context))}))
}

/*
Returns all the messages (keys).
*/
//go:nosplit
func (self class) GetMessageList() Packed.Strings { //gd:Translation.get_message_list
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_message_list, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Strings(Array.Through(gd.PackedStringArrayProxy{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

/*
Returns all the messages (translated text).
*/
//go:nosplit
func (self class) GetTranslatedMessageList() Packed.Strings { //gd:Translation.get_translated_message_list
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_translated_message_list, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Strings(Array.Through(gd.PackedStringArrayProxy{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

/*
Returns the number of existing messages.
*/
//go:nosplit
func (self class) GetMessageCount() int64 { //gd:Translation.get_message_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_message_count, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsTranslation() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsTranslation() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsTranslation() Instance { return self.Super().AsTranslation() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	case "_get_plural_message":
		return reflect.ValueOf(self._get_plural_message)
	case "_get_message":
		return reflect.ValueOf(self._get_message)
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	case "_get_plural_message":
		return reflect.ValueOf(self._get_plural_message)
	case "_get_message":
		return reflect.ValueOf(self._get_message)
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("Translation", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
