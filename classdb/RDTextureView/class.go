// Code generated by the generate package DO NOT EDIT

// Package RDTextureView provides methods for working with RDTextureView object instances.
package RDTextureView

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Rendering"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This object is used by [RenderingDevice].
*/
type Instance [1]gdclass.RDTextureView

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_format_override gdextension.MethodForClass `hash:"565531219"`
	get_format_override gdextension.MethodForClass `hash:"2235804183"`
	set_swizzle_r       gdextension.MethodForClass `hash:"3833362581"`
	get_swizzle_r       gdextension.MethodForClass `hash:"4150792614"`
	set_swizzle_g       gdextension.MethodForClass `hash:"3833362581"`
	get_swizzle_g       gdextension.MethodForClass `hash:"4150792614"`
	set_swizzle_b       gdextension.MethodForClass `hash:"3833362581"`
	get_swizzle_b       gdextension.MethodForClass `hash:"4150792614"`
	set_swizzle_a       gdextension.MethodForClass `hash:"3833362581"`
	get_swizzle_a       gdextension.MethodForClass `hash:"4150792614"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("RDTextureView")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsRDTextureView() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.RDTextureView

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.RDTextureView](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.RDTextureView](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.RDTextureView{pointers.Add[gdclass.RDTextureView]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.RDTextureView{pointers.New[gdclass.RDTextureView]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) FormatOverride() Rendering.DataFormat {
	return Rendering.DataFormat(class(self).GetFormatOverride())
}

func (self Instance) SetFormatOverride(value Rendering.DataFormat) {
	class(self).SetFormatOverride(value)
}

func (self Instance) SwizzleR() Rendering.TextureSwizzle {
	return Rendering.TextureSwizzle(class(self).GetSwizzleR())
}

func (self Instance) SetSwizzleR(value Rendering.TextureSwizzle) {
	class(self).SetSwizzleR(value)
}

func (self Instance) SwizzleG() Rendering.TextureSwizzle {
	return Rendering.TextureSwizzle(class(self).GetSwizzleG())
}

func (self Instance) SetSwizzleG(value Rendering.TextureSwizzle) {
	class(self).SetSwizzleG(value)
}

func (self Instance) SwizzleB() Rendering.TextureSwizzle {
	return Rendering.TextureSwizzle(class(self).GetSwizzleB())
}

func (self Instance) SetSwizzleB(value Rendering.TextureSwizzle) {
	class(self).SetSwizzleB(value)
}

func (self Instance) SwizzleA() Rendering.TextureSwizzle {
	return Rendering.TextureSwizzle(class(self).GetSwizzleA())
}

func (self Instance) SetSwizzleA(value Rendering.TextureSwizzle) {
	class(self).SetSwizzleA(value)
}

//go:nosplit
func (self class) SetFormatOverride(p_member Rendering.DataFormat) { //gd:RDTextureView.set_format_override
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_format_override, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.DataFormat }{p_member}))
}

//go:nosplit
func (self class) GetFormatOverride() Rendering.DataFormat { //gd:RDTextureView.get_format_override
	var r_ret = gdextension.Call[Rendering.DataFormat](gd.ObjectChecked(self.AsObject()), methods.get_format_override, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSwizzleR(p_member Rendering.TextureSwizzle) { //gd:RDTextureView.set_swizzle_r
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_swizzle_r, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.TextureSwizzle }{p_member}))
}

//go:nosplit
func (self class) GetSwizzleR() Rendering.TextureSwizzle { //gd:RDTextureView.get_swizzle_r
	var r_ret = gdextension.Call[Rendering.TextureSwizzle](gd.ObjectChecked(self.AsObject()), methods.get_swizzle_r, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSwizzleG(p_member Rendering.TextureSwizzle) { //gd:RDTextureView.set_swizzle_g
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_swizzle_g, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.TextureSwizzle }{p_member}))
}

//go:nosplit
func (self class) GetSwizzleG() Rendering.TextureSwizzle { //gd:RDTextureView.get_swizzle_g
	var r_ret = gdextension.Call[Rendering.TextureSwizzle](gd.ObjectChecked(self.AsObject()), methods.get_swizzle_g, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSwizzleB(p_member Rendering.TextureSwizzle) { //gd:RDTextureView.set_swizzle_b
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_swizzle_b, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.TextureSwizzle }{p_member}))
}

//go:nosplit
func (self class) GetSwizzleB() Rendering.TextureSwizzle { //gd:RDTextureView.get_swizzle_b
	var r_ret = gdextension.Call[Rendering.TextureSwizzle](gd.ObjectChecked(self.AsObject()), methods.get_swizzle_b, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSwizzleA(p_member Rendering.TextureSwizzle) { //gd:RDTextureView.set_swizzle_a
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_swizzle_a, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.TextureSwizzle }{p_member}))
}

//go:nosplit
func (self class) GetSwizzleA() Rendering.TextureSwizzle { //gd:RDTextureView.get_swizzle_a
	var r_ret = gdextension.Call[Rendering.TextureSwizzle](gd.ObjectChecked(self.AsObject()), methods.get_swizzle_a, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsRDTextureView() Advanced {
	return Advanced{pointers.AsA[gdclass.RDTextureView](self[0])}
}
func (self Instance) AsRDTextureView() Instance {
	return Instance{pointers.AsA[gdclass.RDTextureView](self[0])}
}
func (self *Extension[T]) AsRDTextureView() Instance { return self.Super().AsRDTextureView() }
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("RDTextureView", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.RDTextureView](ptr)} })
}
