// Code generated by the generate package DO NOT EDIT

// Package PhysicsServer3D provides methods for working with PhysicsServer3D object instances.
package PhysicsServer3D

import "unsafe"
import "sync"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/PhysicsDirectBodyState3D"
import "graphics.gd/classdb/PhysicsDirectSpaceState3D"
import "graphics.gd/classdb/PhysicsServer3DRenderingServerHandler"
import "graphics.gd/classdb/PhysicsTestMotionParameters3D"
import "graphics.gd/classdb/PhysicsTestMotionResult3D"
import "graphics.gd/variant/AABB"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Transform3D"
import "graphics.gd/variant/Vector3"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
PhysicsServer3D is the server responsible for all 3D physics. It can directly create and manipulate all physics objects:
- A [i]space[/i] is a self-contained world for a physics simulation. It contains bodies, areas, and joints. Its state can be queried for collision and intersection information, and several parameters of the simulation can be modified.
- A [i]shape[/i] is a geometric shape such as a sphere, a box, a cylinder, or a polygon. It can be used for collision detection by adding it to a body/area, possibly with an extra transformation relative to the body/area's origin. Bodies/areas can have multiple (transformed) shapes added to them, and a single shape can be added to bodies/areas multiple times with different local transformations.
- A [i]body[/i] is a physical object which can be in static, kinematic, or rigid mode. Its state (such as position and velocity) can be queried and updated. A force integration callback can be set to customize the body's physics.
- An [i]area[/i] is a region in space which can be used to detect bodies and areas entering and exiting it. A body monitoring callback can be set to report entering/exiting body shapes, and similarly an area monitoring callback can be set. Gravity and damping can be overridden within the area by setting area parameters.
- A [i]joint[/i] is a constraint, either between two bodies or on one body relative to a point. Parameters such as the joint bias and the rest length of a spring joint can be adjusted.
Physics objects in [PhysicsServer3D] may be created and manipulated independently; they do not have to be tied to nodes in the scene tree.
[b]Note:[/b] All the 3D physics nodes use the physics server internally. Adding a physics node to the scene tree will cause a corresponding physics object to be created in the physics server. A rigid body node registers a callback that updates the node's transform with the transform of the respective body object in the physics server (every physics update). An area node registers a callback to inform the area node about overlaps with the respective area object in the physics server. The raycast node queries the direct state of the relevant space in the physics server.
*/
type Instance [1]gdclass.PhysicsServer3D

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

var self [1]gdclass.PhysicsServer3D
var once sync.Once

func singleton() {
	obj := gd.Global.Object.GetSingleton(gd.Global.Singletons.PhysicsServer3D)
	self = *(*[1]gdclass.PhysicsServer3D)(unsafe.Pointer(&obj))
}
func WorldBoundaryShapeCreate() RID.Shape3D { //gd:PhysicsServer3D.world_boundary_shape_create
	once.Do(singleton)
	return RID.Shape3D(Advanced().WorldBoundaryShapeCreate())
}
func SeparationRayShapeCreate() RID.Shape3D { //gd:PhysicsServer3D.separation_ray_shape_create
	once.Do(singleton)
	return RID.Shape3D(Advanced().SeparationRayShapeCreate())
}
func SphereShapeCreate() RID.Shape3D { //gd:PhysicsServer3D.sphere_shape_create
	once.Do(singleton)
	return RID.Shape3D(Advanced().SphereShapeCreate())
}
func BoxShapeCreate() RID.Shape3D { //gd:PhysicsServer3D.box_shape_create
	once.Do(singleton)
	return RID.Shape3D(Advanced().BoxShapeCreate())
}
func CapsuleShapeCreate() RID.Shape3D { //gd:PhysicsServer3D.capsule_shape_create
	once.Do(singleton)
	return RID.Shape3D(Advanced().CapsuleShapeCreate())
}
func CylinderShapeCreate() RID.Shape3D { //gd:PhysicsServer3D.cylinder_shape_create
	once.Do(singleton)
	return RID.Shape3D(Advanced().CylinderShapeCreate())
}
func ConvexPolygonShapeCreate() RID.Shape3D { //gd:PhysicsServer3D.convex_polygon_shape_create
	once.Do(singleton)
	return RID.Shape3D(Advanced().ConvexPolygonShapeCreate())
}
func ConcavePolygonShapeCreate() RID.Shape3D { //gd:PhysicsServer3D.concave_polygon_shape_create
	once.Do(singleton)
	return RID.Shape3D(Advanced().ConcavePolygonShapeCreate())
}
func HeightmapShapeCreate() RID.Shape3D { //gd:PhysicsServer3D.heightmap_shape_create
	once.Do(singleton)
	return RID.Shape3D(Advanced().HeightmapShapeCreate())
}
func CustomShapeCreate() RID.Shape3D { //gd:PhysicsServer3D.custom_shape_create
	once.Do(singleton)
	return RID.Shape3D(Advanced().CustomShapeCreate())
}

/*
Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].
*/
func ShapeSetData(shape RID.Shape3D, data any) { //gd:PhysicsServer3D.shape_set_data
	once.Do(singleton)
	Advanced().ShapeSetData(RID.Any(shape), variant.New(data))
}

/*
Sets the collision margin for the shape.
[b]Note:[/b] This is not used in Godot Physics.
*/
func ShapeSetMargin(shape RID.Shape3D, margin Float.X) { //gd:PhysicsServer3D.shape_set_margin
	once.Do(singleton)
	Advanced().ShapeSetMargin(RID.Any(shape), float64(margin))
}

/*
Returns the type of shape (see [enum ShapeType] constants).
*/
func ShapeGetType(shape RID.Shape3D) ShapeType { //gd:PhysicsServer3D.shape_get_type
	once.Do(singleton)
	return ShapeType(Advanced().ShapeGetType(RID.Any(shape)))
}

/*
Returns the shape data.
*/
func ShapeGetData(shape RID.Shape3D) any { //gd:PhysicsServer3D.shape_get_data
	once.Do(singleton)
	return any(Advanced().ShapeGetData(RID.Any(shape)).Interface())
}

/*
Returns the collision margin for the shape.
[b]Note:[/b] This is not used in Godot Physics, so will always return [code]0[/code].
*/
func ShapeGetMargin(shape RID.Shape3D) Float.X { //gd:PhysicsServer3D.shape_get_margin
	once.Do(singleton)
	return Float.X(Float.X(Advanced().ShapeGetMargin(RID.Any(shape))))
}

/*
Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].
*/
func SpaceCreate() RID.Space3D { //gd:PhysicsServer3D.space_create
	once.Do(singleton)
	return RID.Space3D(Advanced().SpaceCreate())
}

/*
Marks a space as active. It will not have an effect, unless it is assigned to an area or body.
*/
func SpaceSetActive(space RID.Space3D, active bool) { //gd:PhysicsServer3D.space_set_active
	once.Do(singleton)
	Advanced().SpaceSetActive(RID.Any(space), active)
}

/*
Returns whether the space is active.
*/
func SpaceIsActive(space RID.Space3D) bool { //gd:PhysicsServer3D.space_is_active
	once.Do(singleton)
	return bool(Advanced().SpaceIsActive(RID.Any(space)))
}

/*
Sets the value for a space parameter. A list of available parameters is on the [enum SpaceParameter] constants.
*/
func SpaceSetParam(space RID.Space3D, param SpaceParameter, value Float.X) { //gd:PhysicsServer3D.space_set_param
	once.Do(singleton)
	Advanced().SpaceSetParam(RID.Any(space), param, float64(value))
}

/*
Returns the value of a space parameter.
*/
func SpaceGetParam(space RID.Space3D, param SpaceParameter) Float.X { //gd:PhysicsServer3D.space_get_param
	once.Do(singleton)
	return Float.X(Float.X(Advanced().SpaceGetParam(RID.Any(space), param)))
}

/*
Returns the state of a space, a [PhysicsDirectSpaceState3D]. This object can be used to make collision/intersection queries.
*/
func SpaceGetDirectState(space RID.Space3D) PhysicsDirectSpaceState3D.Instance { //gd:PhysicsServer3D.space_get_direct_state
	once.Do(singleton)
	return PhysicsDirectSpaceState3D.Instance(Advanced().SpaceGetDirectState(RID.Any(space)))
}

/*
Creates a 3D area object in the physics server, and returns the [RID] that identifies it. The default settings for the created area include a collision layer and mask set to [code]1[/code], and [code]monitorable[/code] set to [code]false[/code].
Use [method area_add_shape] to add shapes to it, use [method area_set_transform] to set its transform, and use [method area_set_space] to add the area to a space. If you want the area to be detectable use [method area_set_monitorable].
*/
func AreaCreate() RID.Area3D { //gd:PhysicsServer3D.area_create
	once.Do(singleton)
	return RID.Area3D(Advanced().AreaCreate())
}

/*
Assigns a space to the area.
*/
func AreaSetSpace(area RID.Area3D, space RID.Space3D) { //gd:PhysicsServer3D.area_set_space
	once.Do(singleton)
	Advanced().AreaSetSpace(RID.Any(area), RID.Any(space))
}

/*
Returns the space assigned to the area.
*/
func AreaGetSpace(area RID.Area3D) RID.Space3D { //gd:PhysicsServer3D.area_get_space
	once.Do(singleton)
	return RID.Space3D(Advanced().AreaGetSpace(RID.Any(area)))
}

/*
Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
*/
func AreaAddShape(area RID.Area3D, shape RID.Shape3D, disabled bool) { //gd:PhysicsServer3D.area_add_shape
	once.Do(singleton)
	Advanced().AreaAddShape(RID.Any(area), RID.Any(shape), Transform3D.BasisOrigin(gd.NewTransform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)), disabled)
}

/*
Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
*/
func AreaAddShapeOptions(area RID.Area3D, shape RID.Shape3D, transform Transform3D.BasisOrigin, disabled bool) { //gd:PhysicsServer3D.area_add_shape
	once.Do(singleton)
	Advanced().AreaAddShape(RID.Any(area), RID.Any(shape), Transform3D.BasisOrigin(transform), disabled)
}

/*
Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [RID].
*/
func AreaSetShape(area RID.Area3D, shape_idx int, shape RID.Shape3D) { //gd:PhysicsServer3D.area_set_shape
	once.Do(singleton)
	Advanced().AreaSetShape(RID.Any(area), int64(shape_idx), RID.Any(shape))
}

/*
Sets the transform matrix for an area shape.
*/
func AreaSetShapeTransform(area RID.Area3D, shape_idx int, transform Transform3D.BasisOrigin) { //gd:PhysicsServer3D.area_set_shape_transform
	once.Do(singleton)
	Advanced().AreaSetShapeTransform(RID.Any(area), int64(shape_idx), Transform3D.BasisOrigin(transform))
}
func AreaSetShapeDisabled(area RID.Area3D, shape_idx int, disabled bool) { //gd:PhysicsServer3D.area_set_shape_disabled
	once.Do(singleton)
	Advanced().AreaSetShapeDisabled(RID.Any(area), int64(shape_idx), disabled)
}

/*
Returns the number of shapes assigned to an area.
*/
func AreaGetShapeCount(area RID.Area3D) int { //gd:PhysicsServer3D.area_get_shape_count
	once.Do(singleton)
	return int(int(Advanced().AreaGetShapeCount(RID.Any(area))))
}

/*
Returns the [RID] of the nth shape of an area.
*/
func AreaGetShape(area RID.Area3D, shape_idx int) RID.Shape3D { //gd:PhysicsServer3D.area_get_shape
	once.Do(singleton)
	return RID.Shape3D(Advanced().AreaGetShape(RID.Any(area), int64(shape_idx)))
}

/*
Returns the transform matrix of a shape within an area.
*/
func AreaGetShapeTransform(area RID.Area3D, shape_idx int) Transform3D.BasisOrigin { //gd:PhysicsServer3D.area_get_shape_transform
	once.Do(singleton)
	return Transform3D.BasisOrigin(Advanced().AreaGetShapeTransform(RID.Any(area), int64(shape_idx)))
}

/*
Removes a shape from an area. It does not delete the shape, so it can be reassigned later.
*/
func AreaRemoveShape(area RID.Area3D, shape_idx int) { //gd:PhysicsServer3D.area_remove_shape
	once.Do(singleton)
	Advanced().AreaRemoveShape(RID.Any(area), int64(shape_idx))
}

/*
Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.
*/
func AreaClearShapes(area RID.Area3D) { //gd:PhysicsServer3D.area_clear_shapes
	once.Do(singleton)
	Advanced().AreaClearShapes(RID.Any(area))
}

/*
Assigns the area to one or many physics layers.
*/
func AreaSetCollisionLayer(area RID.Area3D, layer int) { //gd:PhysicsServer3D.area_set_collision_layer
	once.Do(singleton)
	Advanced().AreaSetCollisionLayer(RID.Any(area), int64(layer))
}

/*
Returns the physics layer or layers an area belongs to.
*/
func AreaGetCollisionLayer(area RID.Area3D) int { //gd:PhysicsServer3D.area_get_collision_layer
	once.Do(singleton)
	return int(int(Advanced().AreaGetCollisionLayer(RID.Any(area))))
}

/*
Sets which physics layers the area will monitor.
*/
func AreaSetCollisionMask(area RID.Area3D, mask int) { //gd:PhysicsServer3D.area_set_collision_mask
	once.Do(singleton)
	Advanced().AreaSetCollisionMask(RID.Any(area), int64(mask))
}

/*
Returns the physics layer or layers an area can contact with.
*/
func AreaGetCollisionMask(area RID.Area3D) int { //gd:PhysicsServer3D.area_get_collision_mask
	once.Do(singleton)
	return int(int(Advanced().AreaGetCollisionMask(RID.Any(area))))
}

/*
Sets the value for an area parameter. A list of available parameters is on the [enum AreaParameter] constants.
*/
func AreaSetParam(area RID.Area3D, param AreaParameter, value any) { //gd:PhysicsServer3D.area_set_param
	once.Do(singleton)
	Advanced().AreaSetParam(RID.Any(area), param, variant.New(value))
}

/*
Sets the transform matrix for an area.
*/
func AreaSetTransform(area RID.Area3D, transform Transform3D.BasisOrigin) { //gd:PhysicsServer3D.area_set_transform
	once.Do(singleton)
	Advanced().AreaSetTransform(RID.Any(area), Transform3D.BasisOrigin(transform))
}

/*
Returns an area parameter value. A list of available parameters is on the [enum AreaParameter] constants.
*/
func AreaGetParam(area RID.Area3D, param AreaParameter) any { //gd:PhysicsServer3D.area_get_param
	once.Do(singleton)
	return any(Advanced().AreaGetParam(RID.Any(area), param).Interface())
}

/*
Returns the transform matrix for an area.
*/
func AreaGetTransform(area RID.Area3D) Transform3D.BasisOrigin { //gd:PhysicsServer3D.area_get_transform
	once.Do(singleton)
	return Transform3D.BasisOrigin(Advanced().AreaGetTransform(RID.Any(area)))
}

/*
Assigns the area to a descendant of [Object], so it can exist in the node tree.
*/
func AreaAttachObjectInstanceId(area RID.Area3D, id int) { //gd:PhysicsServer3D.area_attach_object_instance_id
	once.Do(singleton)
	Advanced().AreaAttachObjectInstanceId(RID.Any(area), int64(id))
}

/*
Gets the instance ID of the object the area is assigned to.
*/
func AreaGetObjectInstanceId(area RID.Area3D) int { //gd:PhysicsServer3D.area_get_object_instance_id
	once.Do(singleton)
	return int(int(Advanced().AreaGetObjectInstanceId(RID.Any(area))))
}

/*
Sets the area's body monitor callback. This callback will be called when any other (shape of a) body enters or exits (a shape of) the given area, and must take the following five parameters:
1. an integer [code]status[/code]: either [constant AREA_BODY_ADDED] or [constant AREA_BODY_REMOVED] depending on whether the other body shape entered or exited the area,
2. an [RID] [code]body_rid[/code]: the [RID] of the body that entered or exited the area,
3. an integer [code]instance_id[/code]: the [code]ObjectID[/code] attached to the body,
4. an integer [code]body_shape_idx[/code]: the index of the shape of the body that entered or exited the area,
5. an integer [code]self_shape_idx[/code]: the index of the shape of the area where the body entered or exited.
By counting (or keeping track of) the shapes that enter and exit, it can be determined if a body (with all its shapes) is entering for the first time or exiting for the last time.
*/
func AreaSetMonitorCallback(area RID.Area3D, callback func(status int, body_rid RID.Any, instance_id Object.ID, body_shape_idx int, self_shape_idx int)) { //gd:PhysicsServer3D.area_set_monitor_callback
	once.Do(singleton)
	Advanced().AreaSetMonitorCallback(RID.Any(area), Callable.New(callback))
}

/*
Sets the area's area monitor callback. This callback will be called when any other (shape of an) area enters or exits (a shape of) the given area, and must take the following five parameters:
1. an integer [code]status[/code]: either [constant AREA_BODY_ADDED] or [constant AREA_BODY_REMOVED] depending on whether the other area's shape entered or exited the area,
2. an [RID] [code]area_rid[/code]: the [RID] of the other area that entered or exited the area,
3. an integer [code]instance_id[/code]: the [code]ObjectID[/code] attached to the other area,
4. an integer [code]area_shape_idx[/code]: the index of the shape of the other area that entered or exited the area,
5. an integer [code]self_shape_idx[/code]: the index of the shape of the area where the other area entered or exited.
By counting (or keeping track of) the shapes that enter and exit, it can be determined if an area (with all its shapes) is entering for the first time or exiting for the last time.
*/
func AreaSetAreaMonitorCallback(area RID.Area3D, callback func(status int, body_rid RID.Any, instance_id Object.ID, body_shape_idx int, self_shape_idx int)) { //gd:PhysicsServer3D.area_set_area_monitor_callback
	once.Do(singleton)
	Advanced().AreaSetAreaMonitorCallback(RID.Any(area), Callable.New(callback))
}
func AreaSetMonitorable(area RID.Area3D, monitorable bool) { //gd:PhysicsServer3D.area_set_monitorable
	once.Do(singleton)
	Advanced().AreaSetMonitorable(RID.Any(area), monitorable)
}

/*
Sets object pickable with rays.
*/
func AreaSetRayPickable(area RID.Area3D, enable bool) { //gd:PhysicsServer3D.area_set_ray_pickable
	once.Do(singleton)
	Advanced().AreaSetRayPickable(RID.Any(area), enable)
}

/*
Creates a 3D body object in the physics server, and returns the [RID] that identifies it. The default settings for the created area include a collision layer and mask set to [code]1[/code], and body mode set to [constant BODY_MODE_RIGID].
Use [method body_add_shape] to add shapes to it, use [method body_set_state] to set its transform, and use [method body_set_space] to add the body to a space.
*/
func BodyCreate() RID.Body3D { //gd:PhysicsServer3D.body_create
	once.Do(singleton)
	return RID.Body3D(Advanced().BodyCreate())
}

/*
Assigns a space to the body (see [method space_create]).
*/
func BodySetSpace(body RID.Body3D, space RID.Space3D) { //gd:PhysicsServer3D.body_set_space
	once.Do(singleton)
	Advanced().BodySetSpace(RID.Any(body), RID.Any(space))
}

/*
Returns the [RID] of the space assigned to a body.
*/
func BodyGetSpace(body RID.Body3D) RID.Space3D { //gd:PhysicsServer3D.body_get_space
	once.Do(singleton)
	return RID.Space3D(Advanced().BodyGetSpace(RID.Any(body)))
}

/*
Sets the body mode, from one of the [enum BodyMode] constants.
*/
func BodySetMode(body RID.Body3D, mode BodyMode) { //gd:PhysicsServer3D.body_set_mode
	once.Do(singleton)
	Advanced().BodySetMode(RID.Any(body), mode)
}

/*
Returns the body mode.
*/
func BodyGetMode(body RID.Body3D) BodyMode { //gd:PhysicsServer3D.body_get_mode
	once.Do(singleton)
	return BodyMode(Advanced().BodyGetMode(RID.Any(body)))
}

/*
Sets the physics layer or layers a body belongs to.
*/
func BodySetCollisionLayer(body RID.Body3D, layer int) { //gd:PhysicsServer3D.body_set_collision_layer
	once.Do(singleton)
	Advanced().BodySetCollisionLayer(RID.Any(body), int64(layer))
}

/*
Returns the physics layer or layers a body belongs to.
*/
func BodyGetCollisionLayer(body RID.Body3D) int { //gd:PhysicsServer3D.body_get_collision_layer
	once.Do(singleton)
	return int(int(Advanced().BodyGetCollisionLayer(RID.Any(body))))
}

/*
Sets the physics layer or layers a body can collide with.
*/
func BodySetCollisionMask(body RID.Body3D, mask int) { //gd:PhysicsServer3D.body_set_collision_mask
	once.Do(singleton)
	Advanced().BodySetCollisionMask(RID.Any(body), int64(mask))
}

/*
Returns the physics layer or layers a body can collide with.
*/
func BodyGetCollisionMask(body RID.Body3D) int { //gd:PhysicsServer3D.body_get_collision_mask
	once.Do(singleton)
	return int(int(Advanced().BodyGetCollisionMask(RID.Any(body))))
}

/*
Sets the body's collision priority.
*/
func BodySetCollisionPriority(body RID.Body3D, priority Float.X) { //gd:PhysicsServer3D.body_set_collision_priority
	once.Do(singleton)
	Advanced().BodySetCollisionPriority(RID.Any(body), float64(priority))
}

/*
Returns the body's collision priority.
*/
func BodyGetCollisionPriority(body RID.Body3D) Float.X { //gd:PhysicsServer3D.body_get_collision_priority
	once.Do(singleton)
	return Float.X(Float.X(Advanced().BodyGetCollisionPriority(RID.Any(body))))
}

/*
Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
*/
func BodyAddShape(body RID.Body3D, shape RID.Shape3D, disabled bool) { //gd:PhysicsServer3D.body_add_shape
	once.Do(singleton)
	Advanced().BodyAddShape(RID.Any(body), RID.Any(shape), Transform3D.BasisOrigin(gd.NewTransform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)), disabled)
}

/*
Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
*/
func BodyAddShapeOptions(body RID.Body3D, shape RID.Shape3D, transform Transform3D.BasisOrigin, disabled bool) { //gd:PhysicsServer3D.body_add_shape
	once.Do(singleton)
	Advanced().BodyAddShape(RID.Any(body), RID.Any(shape), Transform3D.BasisOrigin(transform), disabled)
}

/*
Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [RID].
*/
func BodySetShape(body RID.Body3D, shape_idx int, shape RID.Shape3D) { //gd:PhysicsServer3D.body_set_shape
	once.Do(singleton)
	Advanced().BodySetShape(RID.Any(body), int64(shape_idx), RID.Any(shape))
}

/*
Sets the transform matrix for a body shape.
*/
func BodySetShapeTransform(body RID.Body3D, shape_idx int, transform Transform3D.BasisOrigin) { //gd:PhysicsServer3D.body_set_shape_transform
	once.Do(singleton)
	Advanced().BodySetShapeTransform(RID.Any(body), int64(shape_idx), Transform3D.BasisOrigin(transform))
}
func BodySetShapeDisabled(body RID.Body3D, shape_idx int, disabled bool) { //gd:PhysicsServer3D.body_set_shape_disabled
	once.Do(singleton)
	Advanced().BodySetShapeDisabled(RID.Any(body), int64(shape_idx), disabled)
}

/*
Returns the number of shapes assigned to a body.
*/
func BodyGetShapeCount(body RID.Body3D) int { //gd:PhysicsServer3D.body_get_shape_count
	once.Do(singleton)
	return int(int(Advanced().BodyGetShapeCount(RID.Any(body))))
}

/*
Returns the [RID] of the nth shape of a body.
*/
func BodyGetShape(body RID.Body3D, shape_idx int) RID.Shape3D { //gd:PhysicsServer3D.body_get_shape
	once.Do(singleton)
	return RID.Shape3D(Advanced().BodyGetShape(RID.Any(body), int64(shape_idx)))
}

/*
Returns the transform matrix of a body shape.
*/
func BodyGetShapeTransform(body RID.Body3D, shape_idx int) Transform3D.BasisOrigin { //gd:PhysicsServer3D.body_get_shape_transform
	once.Do(singleton)
	return Transform3D.BasisOrigin(Advanced().BodyGetShapeTransform(RID.Any(body), int64(shape_idx)))
}

/*
Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.
*/
func BodyRemoveShape(body RID.Body3D, shape_idx int) { //gd:PhysicsServer3D.body_remove_shape
	once.Do(singleton)
	Advanced().BodyRemoveShape(RID.Any(body), int64(shape_idx))
}

/*
Removes all shapes from a body.
*/
func BodyClearShapes(body RID.Body3D) { //gd:PhysicsServer3D.body_clear_shapes
	once.Do(singleton)
	Advanced().BodyClearShapes(RID.Any(body))
}

/*
Assigns the area to a descendant of [Object], so it can exist in the node tree.
*/
func BodyAttachObjectInstanceId(body RID.Body3D, id int) { //gd:PhysicsServer3D.body_attach_object_instance_id
	once.Do(singleton)
	Advanced().BodyAttachObjectInstanceId(RID.Any(body), int64(id))
}

/*
Gets the instance ID of the object the area is assigned to.
*/
func BodyGetObjectInstanceId(body RID.Body3D) int { //gd:PhysicsServer3D.body_get_object_instance_id
	once.Do(singleton)
	return int(int(Advanced().BodyGetObjectInstanceId(RID.Any(body))))
}

/*
If [code]true[/code], the continuous collision detection mode is enabled.
Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
*/
func BodySetEnableContinuousCollisionDetection(body RID.Body3D, enable bool) { //gd:PhysicsServer3D.body_set_enable_continuous_collision_detection
	once.Do(singleton)
	Advanced().BodySetEnableContinuousCollisionDetection(RID.Any(body), enable)
}

/*
If [code]true[/code], the continuous collision detection mode is enabled.
*/
func BodyIsContinuousCollisionDetectionEnabled(body RID.Body3D) bool { //gd:PhysicsServer3D.body_is_continuous_collision_detection_enabled
	once.Do(singleton)
	return bool(Advanced().BodyIsContinuousCollisionDetectionEnabled(RID.Any(body)))
}

/*
Sets a body parameter. A list of available parameters is on the [enum BodyParameter] constants.
*/
func BodySetParam(body RID.Body3D, param BodyParameter, value any) { //gd:PhysicsServer3D.body_set_param
	once.Do(singleton)
	Advanced().BodySetParam(RID.Any(body), param, variant.New(value))
}

/*
Returns the value of a body parameter. A list of available parameters is on the [enum BodyParameter] constants.
*/
func BodyGetParam(body RID.Body3D, param BodyParameter) any { //gd:PhysicsServer3D.body_get_param
	once.Do(singleton)
	return any(Advanced().BodyGetParam(RID.Any(body), param).Interface())
}

/*
Restores the default inertia and center of mass based on shapes to cancel any custom values previously set using [method body_set_param].
*/
func BodyResetMassProperties(body RID.Body3D) { //gd:PhysicsServer3D.body_reset_mass_properties
	once.Do(singleton)
	Advanced().BodyResetMassProperties(RID.Any(body))
}

/*
Sets a body state (see [enum BodyState] constants).
*/
func BodySetState(body RID.Body3D, state BodyState, value any) { //gd:PhysicsServer3D.body_set_state
	once.Do(singleton)
	Advanced().BodySetState(RID.Any(body), state, variant.New(value))
}

/*
Returns a body state.
*/
func BodyGetState(body RID.Body3D, state BodyState) any { //gd:PhysicsServer3D.body_get_state
	once.Do(singleton)
	return any(Advanced().BodyGetState(RID.Any(body), state).Interface())
}

/*
Applies a directional impulse without affecting rotation.
An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
This is equivalent to using [method body_apply_impulse] at the body's center of mass.
*/
func BodyApplyCentralImpulse(body RID.Body3D, impulse Vector3.XYZ) { //gd:PhysicsServer3D.body_apply_central_impulse
	once.Do(singleton)
	Advanced().BodyApplyCentralImpulse(RID.Any(body), Vector3.XYZ(impulse))
}

/*
Applies a positioned impulse to the body.
An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
[param position] is the offset from the body origin in global coordinates.
*/
func BodyApplyImpulse(body RID.Body3D, impulse Vector3.XYZ, position Vector3.XYZ) { //gd:PhysicsServer3D.body_apply_impulse
	once.Do(singleton)
	Advanced().BodyApplyImpulse(RID.Any(body), Vector3.XYZ(impulse), Vector3.XYZ(position))
}

/*
Applies a positioned impulse to the body.
An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
[param position] is the offset from the body origin in global coordinates.
*/
func BodyApplyImpulseOptions(body RID.Body3D, impulse Vector3.XYZ, position Vector3.XYZ) { //gd:PhysicsServer3D.body_apply_impulse
	once.Do(singleton)
	Advanced().BodyApplyImpulse(RID.Any(body), Vector3.XYZ(impulse), Vector3.XYZ(position))
}

/*
Applies a rotational impulse to the body without affecting the position.
An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
*/
func BodyApplyTorqueImpulse(body RID.Body3D, impulse Vector3.XYZ) { //gd:PhysicsServer3D.body_apply_torque_impulse
	once.Do(singleton)
	Advanced().BodyApplyTorqueImpulse(RID.Any(body), Vector3.XYZ(impulse))
}

/*
Applies a directional force without affecting rotation. A force is time dependent and meant to be applied every physics update.
This is equivalent to using [method body_apply_force] at the body's center of mass.
*/
func BodyApplyCentralForce(body RID.Body3D, force Vector3.XYZ) { //gd:PhysicsServer3D.body_apply_central_force
	once.Do(singleton)
	Advanced().BodyApplyCentralForce(RID.Any(body), Vector3.XYZ(force))
}

/*
Applies a positioned force to the body. A force is time dependent and meant to be applied every physics update.
[param position] is the offset from the body origin in global coordinates.
*/
func BodyApplyForce(body RID.Body3D, force Vector3.XYZ, position Vector3.XYZ) { //gd:PhysicsServer3D.body_apply_force
	once.Do(singleton)
	Advanced().BodyApplyForce(RID.Any(body), Vector3.XYZ(force), Vector3.XYZ(position))
}

/*
Applies a positioned force to the body. A force is time dependent and meant to be applied every physics update.
[param position] is the offset from the body origin in global coordinates.
*/
func BodyApplyForceOptions(body RID.Body3D, force Vector3.XYZ, position Vector3.XYZ) { //gd:PhysicsServer3D.body_apply_force
	once.Do(singleton)
	Advanced().BodyApplyForce(RID.Any(body), Vector3.XYZ(force), Vector3.XYZ(position))
}

/*
Applies a rotational force without affecting position. A force is time dependent and meant to be applied every physics update.
*/
func BodyApplyTorque(body RID.Body3D, torque Vector3.XYZ) { //gd:PhysicsServer3D.body_apply_torque
	once.Do(singleton)
	Advanced().BodyApplyTorque(RID.Any(body), Vector3.XYZ(torque))
}

/*
Adds a constant directional force without affecting rotation that keeps being applied over time until cleared with [code]body_set_constant_force(body, Vector3(0, 0, 0))[/code].
This is equivalent to using [method body_add_constant_force] at the body's center of mass.
*/
func BodyAddConstantCentralForce(body RID.Body3D, force Vector3.XYZ) { //gd:PhysicsServer3D.body_add_constant_central_force
	once.Do(singleton)
	Advanced().BodyAddConstantCentralForce(RID.Any(body), Vector3.XYZ(force))
}

/*
Adds a constant positioned force to the body that keeps being applied over time until cleared with [code]body_set_constant_force(body, Vector3(0, 0, 0))[/code].
[param position] is the offset from the body origin in global coordinates.
*/
func BodyAddConstantForce(body RID.Body3D, force Vector3.XYZ, position Vector3.XYZ) { //gd:PhysicsServer3D.body_add_constant_force
	once.Do(singleton)
	Advanced().BodyAddConstantForce(RID.Any(body), Vector3.XYZ(force), Vector3.XYZ(position))
}

/*
Adds a constant positioned force to the body that keeps being applied over time until cleared with [code]body_set_constant_force(body, Vector3(0, 0, 0))[/code].
[param position] is the offset from the body origin in global coordinates.
*/
func BodyAddConstantForceOptions(body RID.Body3D, force Vector3.XYZ, position Vector3.XYZ) { //gd:PhysicsServer3D.body_add_constant_force
	once.Do(singleton)
	Advanced().BodyAddConstantForce(RID.Any(body), Vector3.XYZ(force), Vector3.XYZ(position))
}

/*
Adds a constant rotational force without affecting position that keeps being applied over time until cleared with [code]body_set_constant_torque(body, Vector3(0, 0, 0))[/code].
*/
func BodyAddConstantTorque(body RID.Body3D, torque Vector3.XYZ) { //gd:PhysicsServer3D.body_add_constant_torque
	once.Do(singleton)
	Advanced().BodyAddConstantTorque(RID.Any(body), Vector3.XYZ(torque))
}

/*
Sets the body's total constant positional forces applied during each physics update.
See [method body_add_constant_force] and [method body_add_constant_central_force].
*/
func BodySetConstantForce(body RID.Body3D, force Vector3.XYZ) { //gd:PhysicsServer3D.body_set_constant_force
	once.Do(singleton)
	Advanced().BodySetConstantForce(RID.Any(body), Vector3.XYZ(force))
}

/*
Returns the body's total constant positional forces applied during each physics update.
See [method body_add_constant_force] and [method body_add_constant_central_force].
*/
func BodyGetConstantForce(body RID.Body3D) Vector3.XYZ { //gd:PhysicsServer3D.body_get_constant_force
	once.Do(singleton)
	return Vector3.XYZ(Advanced().BodyGetConstantForce(RID.Any(body)))
}

/*
Sets the body's total constant rotational forces applied during each physics update.
See [method body_add_constant_torque].
*/
func BodySetConstantTorque(body RID.Body3D, torque Vector3.XYZ) { //gd:PhysicsServer3D.body_set_constant_torque
	once.Do(singleton)
	Advanced().BodySetConstantTorque(RID.Any(body), Vector3.XYZ(torque))
}

/*
Returns the body's total constant rotational forces applied during each physics update.
See [method body_add_constant_torque].
*/
func BodyGetConstantTorque(body RID.Body3D) Vector3.XYZ { //gd:PhysicsServer3D.body_get_constant_torque
	once.Do(singleton)
	return Vector3.XYZ(Advanced().BodyGetConstantTorque(RID.Any(body)))
}

/*
Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
*/
func BodySetAxisVelocity(body RID.Body3D, axis_velocity Vector3.XYZ) { //gd:PhysicsServer3D.body_set_axis_velocity
	once.Do(singleton)
	Advanced().BodySetAxisVelocity(RID.Any(body), Vector3.XYZ(axis_velocity))
}
func BodySetAxisLock(body RID.Body3D, axis BodyAxis, lock bool) { //gd:PhysicsServer3D.body_set_axis_lock
	once.Do(singleton)
	Advanced().BodySetAxisLock(RID.Any(body), axis, lock)
}
func BodyIsAxisLocked(body RID.Body3D, axis BodyAxis) bool { //gd:PhysicsServer3D.body_is_axis_locked
	once.Do(singleton)
	return bool(Advanced().BodyIsAxisLocked(RID.Any(body), axis))
}

/*
Adds a body to the list of bodies exempt from collisions.
*/
func BodyAddCollisionException(body RID.Body3D, excepted_body RID.Body3D) { //gd:PhysicsServer3D.body_add_collision_exception
	once.Do(singleton)
	Advanced().BodyAddCollisionException(RID.Any(body), RID.Any(excepted_body))
}

/*
Removes a body from the list of bodies exempt from collisions.
Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
*/
func BodyRemoveCollisionException(body RID.Body3D, excepted_body RID.Body3D) { //gd:PhysicsServer3D.body_remove_collision_exception
	once.Do(singleton)
	Advanced().BodyRemoveCollisionException(RID.Any(body), RID.Any(excepted_body))
}

/*
Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies. This is enabled by setting the maximum number of contacts reported to a number greater than 0.
*/
func BodySetMaxContactsReported(body RID.Body3D, amount int) { //gd:PhysicsServer3D.body_set_max_contacts_reported
	once.Do(singleton)
	Advanced().BodySetMaxContactsReported(RID.Any(body), int64(amount))
}

/*
Returns the maximum contacts that can be reported. See [method body_set_max_contacts_reported].
*/
func BodyGetMaxContactsReported(body RID.Body3D) int { //gd:PhysicsServer3D.body_get_max_contacts_reported
	once.Do(singleton)
	return int(int(Advanced().BodyGetMaxContactsReported(RID.Any(body))))
}

/*
Sets whether the body omits the standard force integration. If [param enable] is [code]true[/code], the body will not automatically use applied forces, torques, and damping to update the body's linear and angular velocity. In this case, [method body_set_force_integration_callback] can be used to manually update the linear and angular velocity instead.
This method is called when the property [member RigidBody3D.custom_integrator] is set.
*/
func BodySetOmitForceIntegration(body RID.Body3D, enable bool) { //gd:PhysicsServer3D.body_set_omit_force_integration
	once.Do(singleton)
	Advanced().BodySetOmitForceIntegration(RID.Any(body), enable)
}

/*
Returns [code]true[/code] if the body is omitting the standard force integration. See [method body_set_omit_force_integration].
*/
func BodyIsOmittingForceIntegration(body RID.Body3D) bool { //gd:PhysicsServer3D.body_is_omitting_force_integration
	once.Do(singleton)
	return bool(Advanced().BodyIsOmittingForceIntegration(RID.Any(body)))
}

/*
Sets the body's state synchronization callback function to [param callable]. Use an empty [Callable] ([code skip-lint]Callable()[/code]) to clear the callback.
The function [param callable] will be called every physics frame, assuming that the body was active during the previous physics tick, and can be used to fetch the latest state from the physics server.
The function [param callable] must take the following parameters:
1. [code]state[/code]: a [PhysicsDirectBodyState3D], used to retrieve the body's state.
*/
func BodySetStateSyncCallback(body RID.Body3D, callable func(state PhysicsDirectBodyState3D.Instance)) { //gd:PhysicsServer3D.body_set_state_sync_callback
	once.Do(singleton)
	Advanced().BodySetStateSyncCallback(RID.Any(body), Callable.New(callable))
}

/*
Sets the body's custom force integration callback function to [param callable]. Use an empty [Callable] ([code skip-lint]Callable()[/code]) to clear the custom callback.
The function [param callable] will be called every physics tick, before the standard force integration (see [method body_set_omit_force_integration]). It can be used for example to update the body's linear and angular velocity based on contact with other bodies.
If [param userdata] is not [code]null[/code], the function [param callable] must take the following two parameters:
1. [code]state[/code]: a [PhysicsDirectBodyState3D], used to retrieve and modify the body's state,
2. [code skip-lint]userdata[/code]: a [Variant]; its value will be the [param userdata] passed into this method.
If [param userdata] is [code]null[/code], then [param callable] must take only the [code]state[/code] parameter.
*/
func BodySetForceIntegrationCallback(body RID.Body3D, callable func(state PhysicsDirectBodyState3D.Instance, userdata any), userdata any) { //gd:PhysicsServer3D.body_set_force_integration_callback
	once.Do(singleton)
	Advanced().BodySetForceIntegrationCallback(RID.Any(body), Callable.New(callable), variant.New(userdata))
}

/*
Sets the body's custom force integration callback function to [param callable]. Use an empty [Callable] ([code skip-lint]Callable()[/code]) to clear the custom callback.
The function [param callable] will be called every physics tick, before the standard force integration (see [method body_set_omit_force_integration]). It can be used for example to update the body's linear and angular velocity based on contact with other bodies.
If [param userdata] is not [code]null[/code], the function [param callable] must take the following two parameters:
1. [code]state[/code]: a [PhysicsDirectBodyState3D], used to retrieve and modify the body's state,
2. [code skip-lint]userdata[/code]: a [Variant]; its value will be the [param userdata] passed into this method.
If [param userdata] is [code]null[/code], then [param callable] must take only the [code]state[/code] parameter.
*/
func BodySetForceIntegrationCallbackOptions(body RID.Body3D, callable func(state PhysicsDirectBodyState3D.Instance, userdata any), userdata any) { //gd:PhysicsServer3D.body_set_force_integration_callback
	once.Do(singleton)
	Advanced().BodySetForceIntegrationCallback(RID.Any(body), Callable.New(callable), variant.New(userdata))
}

/*
Sets the body pickable with rays if [param enable] is set.
*/
func BodySetRayPickable(body RID.Body3D, enable bool) { //gd:PhysicsServer3D.body_set_ray_pickable
	once.Do(singleton)
	Advanced().BodySetRayPickable(RID.Any(body), enable)
}

/*
Returns [code]true[/code] if a collision would result from moving along a motion vector from a given point in space. [PhysicsTestMotionParameters3D] is passed to set motion parameters. [PhysicsTestMotionResult3D] can be passed to return additional information.
*/
func BodyTestMotion(body RID.Body3D, parameters PhysicsTestMotionParameters3D.Instance, result PhysicsTestMotionResult3D.Instance) bool { //gd:PhysicsServer3D.body_test_motion
	once.Do(singleton)
	return bool(Advanced().BodyTestMotion(RID.Any(body), parameters, result))
}

/*
Returns [code]true[/code] if a collision would result from moving along a motion vector from a given point in space. [PhysicsTestMotionParameters3D] is passed to set motion parameters. [PhysicsTestMotionResult3D] can be passed to return additional information.
*/
func BodyTestMotionOptions(body RID.Body3D, parameters PhysicsTestMotionParameters3D.Instance, result PhysicsTestMotionResult3D.Instance) bool { //gd:PhysicsServer3D.body_test_motion
	once.Do(singleton)
	return bool(Advanced().BodyTestMotion(RID.Any(body), parameters, result))
}

/*
Returns the [PhysicsDirectBodyState3D] of the body. Returns [code]null[/code] if the body is destroyed or removed from the physics space.
*/
func BodyGetDirectState(body RID.Body3D) PhysicsDirectBodyState3D.Instance { //gd:PhysicsServer3D.body_get_direct_state
	once.Do(singleton)
	return PhysicsDirectBodyState3D.Instance(Advanced().BodyGetDirectState(RID.Any(body)))
}

/*
Creates a new soft body and returns its internal [RID].
*/
func SoftBodyCreate() RID.SoftBody3D { //gd:PhysicsServer3D.soft_body_create
	once.Do(singleton)
	return RID.SoftBody3D(Advanced().SoftBodyCreate())
}

/*
Requests that the physics server updates the rendering server with the latest positions of the given soft body's points through the [param rendering_server_handler] interface.
*/
func SoftBodyUpdateRenderingServer(body RID.SoftBody3D, rendering_server_handler PhysicsServer3DRenderingServerHandler.Instance) { //gd:PhysicsServer3D.soft_body_update_rendering_server
	once.Do(singleton)
	Advanced().SoftBodyUpdateRenderingServer(RID.Any(body), rendering_server_handler)
}

/*
Assigns a space to the given soft body (see [method space_create]).
*/
func SoftBodySetSpace(body RID.SoftBody3D, space RID.Space3D) { //gd:PhysicsServer3D.soft_body_set_space
	once.Do(singleton)
	Advanced().SoftBodySetSpace(RID.Any(body), RID.Any(space))
}

/*
Returns the [RID] of the space assigned to the given soft body.
*/
func SoftBodyGetSpace(body RID.SoftBody3D) RID.Space3D { //gd:PhysicsServer3D.soft_body_get_space
	once.Do(singleton)
	return RID.Space3D(Advanced().SoftBodyGetSpace(RID.Any(body)))
}

/*
Sets the mesh of the given soft body.
*/
func SoftBodySetMesh(body RID.SoftBody3D, mesh RID.Mesh) { //gd:PhysicsServer3D.soft_body_set_mesh
	once.Do(singleton)
	Advanced().SoftBodySetMesh(RID.Any(body), RID.Any(mesh))
}

/*
Returns the bounds of the given soft body in global coordinates.
*/
func SoftBodyGetBounds(body RID.SoftBody3D) AABB.PositionSize { //gd:PhysicsServer3D.soft_body_get_bounds
	once.Do(singleton)
	return AABB.PositionSize(Advanced().SoftBodyGetBounds(RID.Any(body)))
}

/*
Sets the physics layer or layers the given soft body belongs to.
*/
func SoftBodySetCollisionLayer(body RID.SoftBody3D, layer int) { //gd:PhysicsServer3D.soft_body_set_collision_layer
	once.Do(singleton)
	Advanced().SoftBodySetCollisionLayer(RID.Any(body), int64(layer))
}

/*
Returns the physics layer or layers that the given soft body belongs to.
*/
func SoftBodyGetCollisionLayer(body RID.SoftBody3D) int { //gd:PhysicsServer3D.soft_body_get_collision_layer
	once.Do(singleton)
	return int(int(Advanced().SoftBodyGetCollisionLayer(RID.Any(body))))
}

/*
Sets the physics layer or layers the given soft body can collide with.
*/
func SoftBodySetCollisionMask(body RID.SoftBody3D, mask int) { //gd:PhysicsServer3D.soft_body_set_collision_mask
	once.Do(singleton)
	Advanced().SoftBodySetCollisionMask(RID.Any(body), int64(mask))
}

/*
Returns the physics layer or layers that the given soft body can collide with.
*/
func SoftBodyGetCollisionMask(body RID.SoftBody3D) int { //gd:PhysicsServer3D.soft_body_get_collision_mask
	once.Do(singleton)
	return int(int(Advanced().SoftBodyGetCollisionMask(RID.Any(body))))
}

/*
Adds the given body to the list of bodies exempt from collisions.
*/
func SoftBodyAddCollisionException(body RID.SoftBody3D, body_b RID.Body3D) { //gd:PhysicsServer3D.soft_body_add_collision_exception
	once.Do(singleton)
	Advanced().SoftBodyAddCollisionException(RID.Any(body), RID.Any(body_b))
}

/*
Removes the given body from the list of bodies exempt from collisions.
*/
func SoftBodyRemoveCollisionException(body RID.SoftBody3D, body_b RID.Body3D) { //gd:PhysicsServer3D.soft_body_remove_collision_exception
	once.Do(singleton)
	Advanced().SoftBodyRemoveCollisionException(RID.Any(body), RID.Any(body_b))
}

/*
Sets the given body state for the given body (see [enum BodyState] constants).
[b]Note:[/b] Godot's default physics implementation does not support [constant BODY_STATE_LINEAR_VELOCITY], [constant BODY_STATE_ANGULAR_VELOCITY], [constant BODY_STATE_SLEEPING], or [constant BODY_STATE_CAN_SLEEP].
*/
func SoftBodySetState(body RID.SoftBody3D, state BodyState, v any) { //gd:PhysicsServer3D.soft_body_set_state
	once.Do(singleton)
	Advanced().SoftBodySetState(RID.Any(body), state, variant.New(v))
}

/*
Returns the given soft body state (see [enum BodyState] constants).
[b]Note:[/b] Godot's default physics implementation does not support [constant BODY_STATE_LINEAR_VELOCITY], [constant BODY_STATE_ANGULAR_VELOCITY], [constant BODY_STATE_SLEEPING], or [constant BODY_STATE_CAN_SLEEP].
*/
func SoftBodyGetState(body RID.SoftBody3D, state BodyState) any { //gd:PhysicsServer3D.soft_body_get_state
	once.Do(singleton)
	return any(Advanced().SoftBodyGetState(RID.Any(body), state).Interface())
}

/*
Sets the global transform of the given soft body.
*/
func SoftBodySetTransform(body RID.SoftBody3D, transform Transform3D.BasisOrigin) { //gd:PhysicsServer3D.soft_body_set_transform
	once.Do(singleton)
	Advanced().SoftBodySetTransform(RID.Any(body), Transform3D.BasisOrigin(transform))
}

/*
Sets whether the given soft body will be pickable when using object picking.
*/
func SoftBodySetRayPickable(body RID.SoftBody3D, enable bool) { //gd:PhysicsServer3D.soft_body_set_ray_pickable
	once.Do(singleton)
	Advanced().SoftBodySetRayPickable(RID.Any(body), enable)
}

/*
Sets the simulation precision of the given soft body. Increasing this value will improve the resulting simulation, but can affect performance. Use with care.
*/
func SoftBodySetSimulationPrecision(body RID.SoftBody3D, simulation_precision int) { //gd:PhysicsServer3D.soft_body_set_simulation_precision
	once.Do(singleton)
	Advanced().SoftBodySetSimulationPrecision(RID.Any(body), int64(simulation_precision))
}

/*
Returns the simulation precision of the given soft body.
*/
func SoftBodyGetSimulationPrecision(body RID.SoftBody3D) int { //gd:PhysicsServer3D.soft_body_get_simulation_precision
	once.Do(singleton)
	return int(int(Advanced().SoftBodyGetSimulationPrecision(RID.Any(body))))
}

/*
Sets the total mass for the given soft body.
*/
func SoftBodySetTotalMass(body RID.SoftBody3D, total_mass Float.X) { //gd:PhysicsServer3D.soft_body_set_total_mass
	once.Do(singleton)
	Advanced().SoftBodySetTotalMass(RID.Any(body), float64(total_mass))
}

/*
Returns the total mass assigned to the given soft body.
*/
func SoftBodyGetTotalMass(body RID.SoftBody3D) Float.X { //gd:PhysicsServer3D.soft_body_get_total_mass
	once.Do(singleton)
	return Float.X(Float.X(Advanced().SoftBodyGetTotalMass(RID.Any(body))))
}

/*
Sets the linear stiffness of the given soft body. Higher values will result in a stiffer body, while lower values will increase the body's ability to bend. The value can be between [code]0.0[/code] and [code]1.0[/code] (inclusive).
*/
func SoftBodySetLinearStiffness(body RID.SoftBody3D, stiffness Float.X) { //gd:PhysicsServer3D.soft_body_set_linear_stiffness
	once.Do(singleton)
	Advanced().SoftBodySetLinearStiffness(RID.Any(body), float64(stiffness))
}

/*
Returns the linear stiffness of the given soft body.
*/
func SoftBodyGetLinearStiffness(body RID.SoftBody3D) Float.X { //gd:PhysicsServer3D.soft_body_get_linear_stiffness
	once.Do(singleton)
	return Float.X(Float.X(Advanced().SoftBodyGetLinearStiffness(RID.Any(body))))
}

/*
Sets the pressure coefficient of the given soft body. Simulates pressure build-up from inside this body. Higher values increase the strength of this effect.
*/
func SoftBodySetPressureCoefficient(body RID.SoftBody3D, pressure_coefficient Float.X) { //gd:PhysicsServer3D.soft_body_set_pressure_coefficient
	once.Do(singleton)
	Advanced().SoftBodySetPressureCoefficient(RID.Any(body), float64(pressure_coefficient))
}

/*
Returns the pressure coefficient of the given soft body.
*/
func SoftBodyGetPressureCoefficient(body RID.SoftBody3D) Float.X { //gd:PhysicsServer3D.soft_body_get_pressure_coefficient
	once.Do(singleton)
	return Float.X(Float.X(Advanced().SoftBodyGetPressureCoefficient(RID.Any(body))))
}

/*
Sets the damping coefficient of the given soft body. Higher values will slow down the body more noticeably when forces are applied.
*/
func SoftBodySetDampingCoefficient(body RID.SoftBody3D, damping_coefficient Float.X) { //gd:PhysicsServer3D.soft_body_set_damping_coefficient
	once.Do(singleton)
	Advanced().SoftBodySetDampingCoefficient(RID.Any(body), float64(damping_coefficient))
}

/*
Returns the damping coefficient of the given soft body.
*/
func SoftBodyGetDampingCoefficient(body RID.SoftBody3D) Float.X { //gd:PhysicsServer3D.soft_body_get_damping_coefficient
	once.Do(singleton)
	return Float.X(Float.X(Advanced().SoftBodyGetDampingCoefficient(RID.Any(body))))
}

/*
Sets the drag coefficient of the given soft body. Higher values increase this body's air resistance.
[b]Note:[/b] This value is currently unused by Godot's default physics implementation.
*/
func SoftBodySetDragCoefficient(body RID.SoftBody3D, drag_coefficient Float.X) { //gd:PhysicsServer3D.soft_body_set_drag_coefficient
	once.Do(singleton)
	Advanced().SoftBodySetDragCoefficient(RID.Any(body), float64(drag_coefficient))
}

/*
Returns the drag coefficient of the given soft body.
*/
func SoftBodyGetDragCoefficient(body RID.SoftBody3D) Float.X { //gd:PhysicsServer3D.soft_body_get_drag_coefficient
	once.Do(singleton)
	return Float.X(Float.X(Advanced().SoftBodyGetDragCoefficient(RID.Any(body))))
}

/*
Moves the given soft body point to a position in global coordinates.
*/
func SoftBodyMovePoint(body RID.SoftBody3D, point_index int, global_position Vector3.XYZ) { //gd:PhysicsServer3D.soft_body_move_point
	once.Do(singleton)
	Advanced().SoftBodyMovePoint(RID.Any(body), int64(point_index), Vector3.XYZ(global_position))
}

/*
Returns the current position of the given soft body point in global coordinates.
*/
func SoftBodyGetPointGlobalPosition(body RID.SoftBody3D, point_index int) Vector3.XYZ { //gd:PhysicsServer3D.soft_body_get_point_global_position
	once.Do(singleton)
	return Vector3.XYZ(Advanced().SoftBodyGetPointGlobalPosition(RID.Any(body), int64(point_index)))
}

/*
Unpins all points of the given soft body.
*/
func SoftBodyRemoveAllPinnedPoints(body RID.SoftBody3D) { //gd:PhysicsServer3D.soft_body_remove_all_pinned_points
	once.Do(singleton)
	Advanced().SoftBodyRemoveAllPinnedPoints(RID.Any(body))
}

/*
Pins or unpins the given soft body point based on the value of [param pin].
[b]Note:[/b] Pinning a point effectively makes it kinematic, preventing it from being affected by forces, but you can still move it using [method soft_body_move_point].
*/
func SoftBodyPinPoint(body RID.SoftBody3D, point_index int, pin bool) { //gd:PhysicsServer3D.soft_body_pin_point
	once.Do(singleton)
	Advanced().SoftBodyPinPoint(RID.Any(body), int64(point_index), pin)
}

/*
Returns whether the given soft body point is pinned.
*/
func SoftBodyIsPointPinned(body RID.SoftBody3D, point_index int) bool { //gd:PhysicsServer3D.soft_body_is_point_pinned
	once.Do(singleton)
	return bool(Advanced().SoftBodyIsPointPinned(RID.Any(body), int64(point_index)))
}
func JointCreate() RID.Joint3D { //gd:PhysicsServer3D.joint_create
	once.Do(singleton)
	return RID.Joint3D(Advanced().JointCreate())
}
func JointClear(joint RID.Joint3D) { //gd:PhysicsServer3D.joint_clear
	once.Do(singleton)
	Advanced().JointClear(RID.Any(joint))
}
func JointMakePin(joint RID.Joint3D, body_A RID.Body3D, local_A Vector3.XYZ, body_B RID.Body3D, local_B Vector3.XYZ) { //gd:PhysicsServer3D.joint_make_pin
	once.Do(singleton)
	Advanced().JointMakePin(RID.Any(joint), RID.Any(body_A), Vector3.XYZ(local_A), RID.Any(body_B), Vector3.XYZ(local_B))
}

/*
Sets a pin_joint parameter (see [enum PinJointParam] constants).
*/
func PinJointSetParam(joint RID.Joint3D, param PinJointParam, value Float.X) { //gd:PhysicsServer3D.pin_joint_set_param
	once.Do(singleton)
	Advanced().PinJointSetParam(RID.Any(joint), param, float64(value))
}

/*
Gets a pin_joint parameter (see [enum PinJointParam] constants).
*/
func PinJointGetParam(joint RID.Joint3D, param PinJointParam) Float.X { //gd:PhysicsServer3D.pin_joint_get_param
	once.Do(singleton)
	return Float.X(Float.X(Advanced().PinJointGetParam(RID.Any(joint), param)))
}

/*
Sets position of the joint in the local space of body a of the joint.
*/
func PinJointSetLocalA(joint RID.Joint3D, local_A Vector3.XYZ) { //gd:PhysicsServer3D.pin_joint_set_local_a
	once.Do(singleton)
	Advanced().PinJointSetLocalA(RID.Any(joint), Vector3.XYZ(local_A))
}

/*
Returns position of the joint in the local space of body a of the joint.
*/
func PinJointGetLocalA(joint RID.Joint3D) Vector3.XYZ { //gd:PhysicsServer3D.pin_joint_get_local_a
	once.Do(singleton)
	return Vector3.XYZ(Advanced().PinJointGetLocalA(RID.Any(joint)))
}

/*
Sets position of the joint in the local space of body b of the joint.
*/
func PinJointSetLocalB(joint RID.Joint3D, local_B Vector3.XYZ) { //gd:PhysicsServer3D.pin_joint_set_local_b
	once.Do(singleton)
	Advanced().PinJointSetLocalB(RID.Any(joint), Vector3.XYZ(local_B))
}

/*
Returns position of the joint in the local space of body b of the joint.
*/
func PinJointGetLocalB(joint RID.Joint3D) Vector3.XYZ { //gd:PhysicsServer3D.pin_joint_get_local_b
	once.Do(singleton)
	return Vector3.XYZ(Advanced().PinJointGetLocalB(RID.Any(joint)))
}
func JointMakeHinge(joint RID.Joint3D, body_A RID.Body3D, hinge_A Transform3D.BasisOrigin, body_B RID.Body3D, hinge_B Transform3D.BasisOrigin) { //gd:PhysicsServer3D.joint_make_hinge
	once.Do(singleton)
	Advanced().JointMakeHinge(RID.Any(joint), RID.Any(body_A), Transform3D.BasisOrigin(hinge_A), RID.Any(body_B), Transform3D.BasisOrigin(hinge_B))
}

/*
Sets a hinge_joint parameter (see [enum HingeJointParam] constants).
*/
func HingeJointSetParam(joint RID.Joint3D, param HingeJointParam, value Float.X) { //gd:PhysicsServer3D.hinge_joint_set_param
	once.Do(singleton)
	Advanced().HingeJointSetParam(RID.Any(joint), param, float64(value))
}

/*
Gets a hinge_joint parameter (see [enum HingeJointParam]).
*/
func HingeJointGetParam(joint RID.Joint3D, param HingeJointParam) Float.X { //gd:PhysicsServer3D.hinge_joint_get_param
	once.Do(singleton)
	return Float.X(Float.X(Advanced().HingeJointGetParam(RID.Any(joint), param)))
}

/*
Sets a hinge_joint flag (see [enum HingeJointFlag] constants).
*/
func HingeJointSetFlag(joint RID.Joint3D, flag HingeJointFlag, enabled bool) { //gd:PhysicsServer3D.hinge_joint_set_flag
	once.Do(singleton)
	Advanced().HingeJointSetFlag(RID.Any(joint), flag, enabled)
}

/*
Gets a hinge_joint flag (see [enum HingeJointFlag] constants).
*/
func HingeJointGetFlag(joint RID.Joint3D, flag HingeJointFlag) bool { //gd:PhysicsServer3D.hinge_joint_get_flag
	once.Do(singleton)
	return bool(Advanced().HingeJointGetFlag(RID.Any(joint), flag))
}
func JointMakeSlider(joint RID.Joint3D, body_A RID.Body3D, local_ref_A Transform3D.BasisOrigin, body_B RID.Body3D, local_ref_B Transform3D.BasisOrigin) { //gd:PhysicsServer3D.joint_make_slider
	once.Do(singleton)
	Advanced().JointMakeSlider(RID.Any(joint), RID.Any(body_A), Transform3D.BasisOrigin(local_ref_A), RID.Any(body_B), Transform3D.BasisOrigin(local_ref_B))
}

/*
Gets a slider_joint parameter (see [enum SliderJointParam] constants).
*/
func SliderJointSetParam(joint RID.Joint3D, param SliderJointParam, value Float.X) { //gd:PhysicsServer3D.slider_joint_set_param
	once.Do(singleton)
	Advanced().SliderJointSetParam(RID.Any(joint), param, float64(value))
}

/*
Gets a slider_joint parameter (see [enum SliderJointParam] constants).
*/
func SliderJointGetParam(joint RID.Joint3D, param SliderJointParam) Float.X { //gd:PhysicsServer3D.slider_joint_get_param
	once.Do(singleton)
	return Float.X(Float.X(Advanced().SliderJointGetParam(RID.Any(joint), param)))
}
func JointMakeConeTwist(joint RID.Joint3D, body_A RID.Body3D, local_ref_A Transform3D.BasisOrigin, body_B RID.Body3D, local_ref_B Transform3D.BasisOrigin) { //gd:PhysicsServer3D.joint_make_cone_twist
	once.Do(singleton)
	Advanced().JointMakeConeTwist(RID.Any(joint), RID.Any(body_A), Transform3D.BasisOrigin(local_ref_A), RID.Any(body_B), Transform3D.BasisOrigin(local_ref_B))
}

/*
Sets a cone_twist_joint parameter (see [enum ConeTwistJointParam] constants).
*/
func ConeTwistJointSetParam(joint RID.Joint3D, param ConeTwistJointParam, value Float.X) { //gd:PhysicsServer3D.cone_twist_joint_set_param
	once.Do(singleton)
	Advanced().ConeTwistJointSetParam(RID.Any(joint), param, float64(value))
}

/*
Gets a cone_twist_joint parameter (see [enum ConeTwistJointParam] constants).
*/
func ConeTwistJointGetParam(joint RID.Joint3D, param ConeTwistJointParam) Float.X { //gd:PhysicsServer3D.cone_twist_joint_get_param
	once.Do(singleton)
	return Float.X(Float.X(Advanced().ConeTwistJointGetParam(RID.Any(joint), param)))
}

/*
Returns the type of the Joint3D.
*/
func JointGetType(joint RID.Joint3D) JointType { //gd:PhysicsServer3D.joint_get_type
	once.Do(singleton)
	return JointType(Advanced().JointGetType(RID.Any(joint)))
}

/*
Sets the priority value of the Joint3D.
*/
func JointSetSolverPriority(joint RID.Joint3D, priority int) { //gd:PhysicsServer3D.joint_set_solver_priority
	once.Do(singleton)
	Advanced().JointSetSolverPriority(RID.Any(joint), int64(priority))
}

/*
Gets the priority value of the Joint3D.
*/
func JointGetSolverPriority(joint RID.Joint3D) int { //gd:PhysicsServer3D.joint_get_solver_priority
	once.Do(singleton)
	return int(int(Advanced().JointGetSolverPriority(RID.Any(joint))))
}

/*
Sets whether the bodies attached to the [Joint3D] will collide with each other.
*/
func JointDisableCollisionsBetweenBodies(joint RID.Joint3D, disable bool) { //gd:PhysicsServer3D.joint_disable_collisions_between_bodies
	once.Do(singleton)
	Advanced().JointDisableCollisionsBetweenBodies(RID.Any(joint), disable)
}

/*
Returns whether the bodies attached to the [Joint3D] will collide with each other.
*/
func JointIsDisabledCollisionsBetweenBodies(joint RID.Joint3D) bool { //gd:PhysicsServer3D.joint_is_disabled_collisions_between_bodies
	once.Do(singleton)
	return bool(Advanced().JointIsDisabledCollisionsBetweenBodies(RID.Any(joint)))
}

/*
Make the joint a generic six degrees of freedom (6DOF) joint. Use [method generic_6dof_joint_set_flag] and [method generic_6dof_joint_set_param] to set the joint's flags and parameters respectively.
*/
func JointMakeGeneric6dof(joint RID.Joint3D, body_A RID.Body3D, local_ref_A Transform3D.BasisOrigin, body_B RID.Body3D, local_ref_B Transform3D.BasisOrigin) { //gd:PhysicsServer3D.joint_make_generic_6dof
	once.Do(singleton)
	Advanced().JointMakeGeneric6dof(RID.Any(joint), RID.Any(body_A), Transform3D.BasisOrigin(local_ref_A), RID.Any(body_B), Transform3D.BasisOrigin(local_ref_B))
}

/*
Sets the value of a given generic 6DOF joint parameter. See [enum G6DOFJointAxisParam] for the list of available parameters.
*/
func Generic6dofJointSetParam(joint RID.Joint3D, axis Vector3.Axis, param G6DOFJointAxisParam, value Float.X) { //gd:PhysicsServer3D.generic_6dof_joint_set_param
	once.Do(singleton)
	Advanced().Generic6dofJointSetParam(RID.Any(joint), axis, param, float64(value))
}

/*
Returns the value of a generic 6DOF joint parameter. See [enum G6DOFJointAxisParam] for the list of available parameters.
*/
func Generic6dofJointGetParam(joint RID.Joint3D, axis Vector3.Axis, param G6DOFJointAxisParam) Float.X { //gd:PhysicsServer3D.generic_6dof_joint_get_param
	once.Do(singleton)
	return Float.X(Float.X(Advanced().Generic6dofJointGetParam(RID.Any(joint), axis, param)))
}

/*
Sets the value of a given generic 6DOF joint flag. See [enum G6DOFJointAxisFlag] for the list of available flags.
*/
func Generic6dofJointSetFlag(joint RID.Joint3D, axis Vector3.Axis, flag G6DOFJointAxisFlag, enable bool) { //gd:PhysicsServer3D.generic_6dof_joint_set_flag
	once.Do(singleton)
	Advanced().Generic6dofJointSetFlag(RID.Any(joint), axis, flag, enable)
}

/*
Returns the value of a generic 6DOF joint flag. See [enum G6DOFJointAxisFlag] for the list of available flags.
*/
func Generic6dofJointGetFlag(joint RID.Joint3D, axis Vector3.Axis, flag G6DOFJointAxisFlag) bool { //gd:PhysicsServer3D.generic_6dof_joint_get_flag
	once.Do(singleton)
	return bool(Advanced().Generic6dofJointGetFlag(RID.Any(joint), axis, flag))
}

/*
Destroys any of the objects created by PhysicsServer3D. If the [RID] passed is not one of the objects that can be created by PhysicsServer3D, an error will be sent to the console.
*/
func FreeRid(rid RID.Any) { //gd:PhysicsServer3D.free_rid
	once.Do(singleton)
	Advanced().FreeRid(RID.Any(rid))
}

/*
Activates or deactivates the 3D physics engine.
*/
func SetActive(active bool) { //gd:PhysicsServer3D.set_active
	once.Do(singleton)
	Advanced().SetActive(active)
}

/*
Returns information about the current state of the 3D physics engine. See [enum ProcessInfo] for a list of available states.
*/
func GetProcessInfo(process_info ProcessInfo) int { //gd:PhysicsServer3D.get_process_info
	once.Do(singleton)
	return int(int(Advanced().GetProcessInfo(process_info)))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
func Advanced() class { once.Do(singleton); return self }

type class [1]gdclass.PhysicsServer3D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }

//go:nosplit
func (self class) WorldBoundaryShapeCreate() RID.Any { //gd:PhysicsServer3D.world_boundary_shape_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_world_boundary_shape_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SeparationRayShapeCreate() RID.Any { //gd:PhysicsServer3D.separation_ray_shape_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_separation_ray_shape_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SphereShapeCreate() RID.Any { //gd:PhysicsServer3D.sphere_shape_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_sphere_shape_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) BoxShapeCreate() RID.Any { //gd:PhysicsServer3D.box_shape_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_box_shape_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) CapsuleShapeCreate() RID.Any { //gd:PhysicsServer3D.capsule_shape_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_capsule_shape_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) CylinderShapeCreate() RID.Any { //gd:PhysicsServer3D.cylinder_shape_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_cylinder_shape_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) ConvexPolygonShapeCreate() RID.Any { //gd:PhysicsServer3D.convex_polygon_shape_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_convex_polygon_shape_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) ConcavePolygonShapeCreate() RID.Any { //gd:PhysicsServer3D.concave_polygon_shape_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_concave_polygon_shape_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) HeightmapShapeCreate() RID.Any { //gd:PhysicsServer3D.heightmap_shape_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_heightmap_shape_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) CustomShapeCreate() RID.Any { //gd:PhysicsServer3D.custom_shape_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_custom_shape_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].
*/
//go:nosplit
func (self class) ShapeSetData(shape RID.Any, data variant.Any) { //gd:PhysicsServer3D.shape_set_data
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_shape_set_data, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVariant<<8), unsafe.Pointer(&struct {
		shape RID.Any
		data  gdextension.Variant
	}{shape, gdextension.Variant(pointers.Get(gd.InternalVariant(data)))}))
}

/*
Sets the collision margin for the shape.
[b]Note:[/b] This is not used in Godot Physics.
*/
//go:nosplit
func (self class) ShapeSetMargin(shape RID.Any, margin float64) { //gd:PhysicsServer3D.shape_set_margin
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_shape_set_margin, 0|(gdextension.SizeRID<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		shape  RID.Any
		margin float64
	}{shape, margin}))
}

/*
Returns the type of shape (see [enum ShapeType] constants).
*/
//go:nosplit
func (self class) ShapeGetType(shape RID.Any) ShapeType { //gd:PhysicsServer3D.shape_get_type
	var r_ret = gdunsafe.Call[ShapeType](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_shape_get_type, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ shape RID.Any }{shape}))
	var ret = r_ret
	return ret
}

/*
Returns the shape data.
*/
//go:nosplit
func (self class) ShapeGetData(shape RID.Any) variant.Any { //gd:PhysicsServer3D.shape_get_data
	var r_ret = gdunsafe.Call[[3]uint64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_shape_get_data, gdextension.SizeVariant|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ shape RID.Any }{shape}))
	var ret = variant.Implementation(gd.VariantProxy{}, pointers.Pack(pointers.New[gd.Variant](r_ret)))
	return ret
}

/*
Returns the collision margin for the shape.
[b]Note:[/b] This is not used in Godot Physics, so will always return [code]0[/code].
*/
//go:nosplit
func (self class) ShapeGetMargin(shape RID.Any) float64 { //gd:PhysicsServer3D.shape_get_margin
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_shape_get_margin, gdextension.SizeFloat|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ shape RID.Any }{shape}))
	var ret = r_ret
	return ret
}

/*
Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].
*/
//go:nosplit
func (self class) SpaceCreate() RID.Any { //gd:PhysicsServer3D.space_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_space_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Marks a space as active. It will not have an effect, unless it is assigned to an area or body.
*/
//go:nosplit
func (self class) SpaceSetActive(space RID.Any, active bool) { //gd:PhysicsServer3D.space_set_active
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_space_set_active, 0|(gdextension.SizeRID<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		space  RID.Any
		active bool
	}{space, active}))
}

/*
Returns whether the space is active.
*/
//go:nosplit
func (self class) SpaceIsActive(space RID.Any) bool { //gd:PhysicsServer3D.space_is_active
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_space_is_active, gdextension.SizeBool|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ space RID.Any }{space}))
	var ret = r_ret
	return ret
}

/*
Sets the value for a space parameter. A list of available parameters is on the [enum SpaceParameter] constants.
*/
//go:nosplit
func (self class) SpaceSetParam(space RID.Any, param SpaceParameter, value float64) { //gd:PhysicsServer3D.space_set_param
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_space_set_param, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeFloat<<12), unsafe.Pointer(&struct {
		space RID.Any
		param SpaceParameter
		value float64
	}{space, param, value}))
}

/*
Returns the value of a space parameter.
*/
//go:nosplit
func (self class) SpaceGetParam(space RID.Any, param SpaceParameter) float64 { //gd:PhysicsServer3D.space_get_param
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_space_get_param, gdextension.SizeFloat|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		space RID.Any
		param SpaceParameter
	}{space, param}))
	var ret = r_ret
	return ret
}

/*
Returns the state of a space, a [PhysicsDirectSpaceState3D]. This object can be used to make collision/intersection queries.
*/
//go:nosplit
func (self class) SpaceGetDirectState(space RID.Any) [1]gdclass.PhysicsDirectSpaceState3D { //gd:PhysicsServer3D.space_get_direct_state
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_space_get_direct_state, gdextension.SizeObject|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ space RID.Any }{space}))
	var ret = [1]gdclass.PhysicsDirectSpaceState3D{gd.PointerMustAssertInstanceID[gdclass.PhysicsDirectSpaceState3D](r_ret)}
	return ret
}

/*
Creates a 3D area object in the physics server, and returns the [RID] that identifies it. The default settings for the created area include a collision layer and mask set to [code]1[/code], and [code]monitorable[/code] set to [code]false[/code].
Use [method area_add_shape] to add shapes to it, use [method area_set_transform] to set its transform, and use [method area_set_space] to add the area to a space. If you want the area to be detectable use [method area_set_monitorable].
*/
//go:nosplit
func (self class) AreaCreate() RID.Any { //gd:PhysicsServer3D.area_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Assigns a space to the area.
*/
//go:nosplit
func (self class) AreaSetSpace(area RID.Any, space RID.Any) { //gd:PhysicsServer3D.area_set_space
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_set_space, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8), unsafe.Pointer(&struct {
		area  RID.Any
		space RID.Any
	}{area, space}))
}

/*
Returns the space assigned to the area.
*/
//go:nosplit
func (self class) AreaGetSpace(area RID.Any) RID.Any { //gd:PhysicsServer3D.area_get_space
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_get_space, gdextension.SizeRID|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ area RID.Any }{area}))
	var ret = r_ret
	return ret
}

/*
Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
*/
//go:nosplit
func (self class) AreaAddShape(area RID.Any, shape RID.Any, transform Transform3D.BasisOrigin, disabled bool) { //gd:PhysicsServer3D.area_add_shape
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_add_shape, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8)|(gdextension.SizeTransform3D<<12)|(gdextension.SizeBool<<16), unsafe.Pointer(&struct {
		area      RID.Any
		shape     RID.Any
		transform Transform3D.BasisOrigin
		disabled  bool
	}{area, shape, gd.Transposed(transform), disabled}))
}

/*
Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [RID].
*/
//go:nosplit
func (self class) AreaSetShape(area RID.Any, shape_idx int64, shape RID.Any) { //gd:PhysicsServer3D.area_set_shape
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_set_shape, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeRID<<12), unsafe.Pointer(&struct {
		area      RID.Any
		shape_idx int64
		shape     RID.Any
	}{area, shape_idx, shape}))
}

/*
Sets the transform matrix for an area shape.
*/
//go:nosplit
func (self class) AreaSetShapeTransform(area RID.Any, shape_idx int64, transform Transform3D.BasisOrigin) { //gd:PhysicsServer3D.area_set_shape_transform
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_set_shape_transform, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeTransform3D<<12), unsafe.Pointer(&struct {
		area      RID.Any
		shape_idx int64
		transform Transform3D.BasisOrigin
	}{area, shape_idx, gd.Transposed(transform)}))
}

//go:nosplit
func (self class) AreaSetShapeDisabled(area RID.Any, shape_idx int64, disabled bool) { //gd:PhysicsServer3D.area_set_shape_disabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_set_shape_disabled, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeBool<<12), unsafe.Pointer(&struct {
		area      RID.Any
		shape_idx int64
		disabled  bool
	}{area, shape_idx, disabled}))
}

/*
Returns the number of shapes assigned to an area.
*/
//go:nosplit
func (self class) AreaGetShapeCount(area RID.Any) int64 { //gd:PhysicsServer3D.area_get_shape_count
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_get_shape_count, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ area RID.Any }{area}))
	var ret = r_ret
	return ret
}

/*
Returns the [RID] of the nth shape of an area.
*/
//go:nosplit
func (self class) AreaGetShape(area RID.Any, shape_idx int64) RID.Any { //gd:PhysicsServer3D.area_get_shape
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_get_shape, gdextension.SizeRID|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		area      RID.Any
		shape_idx int64
	}{area, shape_idx}))
	var ret = r_ret
	return ret
}

/*
Returns the transform matrix of a shape within an area.
*/
//go:nosplit
func (self class) AreaGetShapeTransform(area RID.Any, shape_idx int64) Transform3D.BasisOrigin { //gd:PhysicsServer3D.area_get_shape_transform
	var r_ret = gdunsafe.Call[Transform3D.BasisOrigin](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_get_shape_transform, gdextension.SizeTransform3D|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		area      RID.Any
		shape_idx int64
	}{area, shape_idx}))
	var ret = gd.Transposed(r_ret)
	return ret
}

/*
Removes a shape from an area. It does not delete the shape, so it can be reassigned later.
*/
//go:nosplit
func (self class) AreaRemoveShape(area RID.Any, shape_idx int64) { //gd:PhysicsServer3D.area_remove_shape
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_remove_shape, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		area      RID.Any
		shape_idx int64
	}{area, shape_idx}))
}

/*
Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.
*/
//go:nosplit
func (self class) AreaClearShapes(area RID.Any) { //gd:PhysicsServer3D.area_clear_shapes
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_clear_shapes, 0|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ area RID.Any }{area}))
}

/*
Assigns the area to one or many physics layers.
*/
//go:nosplit
func (self class) AreaSetCollisionLayer(area RID.Any, layer int64) { //gd:PhysicsServer3D.area_set_collision_layer
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_set_collision_layer, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		area  RID.Any
		layer int64
	}{area, layer}))
}

/*
Returns the physics layer or layers an area belongs to.
*/
//go:nosplit
func (self class) AreaGetCollisionLayer(area RID.Any) int64 { //gd:PhysicsServer3D.area_get_collision_layer
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_get_collision_layer, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ area RID.Any }{area}))
	var ret = r_ret
	return ret
}

/*
Sets which physics layers the area will monitor.
*/
//go:nosplit
func (self class) AreaSetCollisionMask(area RID.Any, mask int64) { //gd:PhysicsServer3D.area_set_collision_mask
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_set_collision_mask, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		area RID.Any
		mask int64
	}{area, mask}))
}

/*
Returns the physics layer or layers an area can contact with.
*/
//go:nosplit
func (self class) AreaGetCollisionMask(area RID.Any) int64 { //gd:PhysicsServer3D.area_get_collision_mask
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_get_collision_mask, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ area RID.Any }{area}))
	var ret = r_ret
	return ret
}

/*
Sets the value for an area parameter. A list of available parameters is on the [enum AreaParameter] constants.
*/
//go:nosplit
func (self class) AreaSetParam(area RID.Any, param AreaParameter, value variant.Any) { //gd:PhysicsServer3D.area_set_param
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_set_param, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeVariant<<12), unsafe.Pointer(&struct {
		area  RID.Any
		param AreaParameter
		value gdextension.Variant
	}{area, param, gdextension.Variant(pointers.Get(gd.InternalVariant(value)))}))
}

/*
Sets the transform matrix for an area.
*/
//go:nosplit
func (self class) AreaSetTransform(area RID.Any, transform Transform3D.BasisOrigin) { //gd:PhysicsServer3D.area_set_transform
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_set_transform, 0|(gdextension.SizeRID<<4)|(gdextension.SizeTransform3D<<8), unsafe.Pointer(&struct {
		area      RID.Any
		transform Transform3D.BasisOrigin
	}{area, gd.Transposed(transform)}))
}

/*
Returns an area parameter value. A list of available parameters is on the [enum AreaParameter] constants.
*/
//go:nosplit
func (self class) AreaGetParam(area RID.Any, param AreaParameter) variant.Any { //gd:PhysicsServer3D.area_get_param
	var r_ret = gdunsafe.Call[[3]uint64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_get_param, gdextension.SizeVariant|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		area  RID.Any
		param AreaParameter
	}{area, param}))
	var ret = variant.Implementation(gd.VariantProxy{}, pointers.Pack(pointers.New[gd.Variant](r_ret)))
	return ret
}

/*
Returns the transform matrix for an area.
*/
//go:nosplit
func (self class) AreaGetTransform(area RID.Any) Transform3D.BasisOrigin { //gd:PhysicsServer3D.area_get_transform
	var r_ret = gdunsafe.Call[Transform3D.BasisOrigin](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_get_transform, gdextension.SizeTransform3D|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ area RID.Any }{area}))
	var ret = gd.Transposed(r_ret)
	return ret
}

/*
Assigns the area to a descendant of [Object], so it can exist in the node tree.
*/
//go:nosplit
func (self class) AreaAttachObjectInstanceId(area RID.Any, id int64) { //gd:PhysicsServer3D.area_attach_object_instance_id
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_attach_object_instance_id, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		area RID.Any
		id   int64
	}{area, id}))
}

/*
Gets the instance ID of the object the area is assigned to.
*/
//go:nosplit
func (self class) AreaGetObjectInstanceId(area RID.Any) int64 { //gd:PhysicsServer3D.area_get_object_instance_id
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_get_object_instance_id, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ area RID.Any }{area}))
	var ret = r_ret
	return ret
}

/*
Sets the area's body monitor callback. This callback will be called when any other (shape of a) body enters or exits (a shape of) the given area, and must take the following five parameters:
1. an integer [code]status[/code]: either [constant AREA_BODY_ADDED] or [constant AREA_BODY_REMOVED] depending on whether the other body shape entered or exited the area,
2. an [RID] [code]body_rid[/code]: the [RID] of the body that entered or exited the area,
3. an integer [code]instance_id[/code]: the [code]ObjectID[/code] attached to the body,
4. an integer [code]body_shape_idx[/code]: the index of the shape of the body that entered or exited the area,
5. an integer [code]self_shape_idx[/code]: the index of the shape of the area where the body entered or exited.
By counting (or keeping track of) the shapes that enter and exit, it can be determined if a body (with all its shapes) is entering for the first time or exiting for the last time.
*/
//go:nosplit
func (self class) AreaSetMonitorCallback(area RID.Any, callback Callable.Function) { //gd:PhysicsServer3D.area_set_monitor_callback
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_set_monitor_callback, 0|(gdextension.SizeRID<<4)|(gdextension.SizeCallable<<8), unsafe.Pointer(&struct {
		area     RID.Any
		callback gdextension.Callable
	}{area, gdextension.Callable(pointers.Get(gd.InternalCallable(callback)))}))
}

/*
Sets the area's area monitor callback. This callback will be called when any other (shape of an) area enters or exits (a shape of) the given area, and must take the following five parameters:
1. an integer [code]status[/code]: either [constant AREA_BODY_ADDED] or [constant AREA_BODY_REMOVED] depending on whether the other area's shape entered or exited the area,
2. an [RID] [code]area_rid[/code]: the [RID] of the other area that entered or exited the area,
3. an integer [code]instance_id[/code]: the [code]ObjectID[/code] attached to the other area,
4. an integer [code]area_shape_idx[/code]: the index of the shape of the other area that entered or exited the area,
5. an integer [code]self_shape_idx[/code]: the index of the shape of the area where the other area entered or exited.
By counting (or keeping track of) the shapes that enter and exit, it can be determined if an area (with all its shapes) is entering for the first time or exiting for the last time.
*/
//go:nosplit
func (self class) AreaSetAreaMonitorCallback(area RID.Any, callback Callable.Function) { //gd:PhysicsServer3D.area_set_area_monitor_callback
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_set_area_monitor_callback, 0|(gdextension.SizeRID<<4)|(gdextension.SizeCallable<<8), unsafe.Pointer(&struct {
		area     RID.Any
		callback gdextension.Callable
	}{area, gdextension.Callable(pointers.Get(gd.InternalCallable(callback)))}))
}

//go:nosplit
func (self class) AreaSetMonitorable(area RID.Any, monitorable bool) { //gd:PhysicsServer3D.area_set_monitorable
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_set_monitorable, 0|(gdextension.SizeRID<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		area        RID.Any
		monitorable bool
	}{area, monitorable}))
}

/*
Sets object pickable with rays.
*/
//go:nosplit
func (self class) AreaSetRayPickable(area RID.Any, enable bool) { //gd:PhysicsServer3D.area_set_ray_pickable
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_area_set_ray_pickable, 0|(gdextension.SizeRID<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		area   RID.Any
		enable bool
	}{area, enable}))
}

/*
Creates a 3D body object in the physics server, and returns the [RID] that identifies it. The default settings for the created area include a collision layer and mask set to [code]1[/code], and body mode set to [constant BODY_MODE_RIGID].
Use [method body_add_shape] to add shapes to it, use [method body_set_state] to set its transform, and use [method body_set_space] to add the body to a space.
*/
//go:nosplit
func (self class) BodyCreate() RID.Any { //gd:PhysicsServer3D.body_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Assigns a space to the body (see [method space_create]).
*/
//go:nosplit
func (self class) BodySetSpace(body RID.Any, space RID.Any) { //gd:PhysicsServer3D.body_set_space
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_space, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8), unsafe.Pointer(&struct {
		body  RID.Any
		space RID.Any
	}{body, space}))
}

/*
Returns the [RID] of the space assigned to a body.
*/
//go:nosplit
func (self class) BodyGetSpace(body RID.Any) RID.Any { //gd:PhysicsServer3D.body_get_space
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_space, gdextension.SizeRID|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets the body mode, from one of the [enum BodyMode] constants.
*/
//go:nosplit
func (self class) BodySetMode(body RID.Any, mode BodyMode) { //gd:PhysicsServer3D.body_set_mode
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_mode, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body RID.Any
		mode BodyMode
	}{body, mode}))
}

/*
Returns the body mode.
*/
//go:nosplit
func (self class) BodyGetMode(body RID.Any) BodyMode { //gd:PhysicsServer3D.body_get_mode
	var r_ret = gdunsafe.Call[BodyMode](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_mode, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets the physics layer or layers a body belongs to.
*/
//go:nosplit
func (self class) BodySetCollisionLayer(body RID.Any, layer int64) { //gd:PhysicsServer3D.body_set_collision_layer
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_collision_layer, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body  RID.Any
		layer int64
	}{body, layer}))
}

/*
Returns the physics layer or layers a body belongs to.
*/
//go:nosplit
func (self class) BodyGetCollisionLayer(body RID.Any) int64 { //gd:PhysicsServer3D.body_get_collision_layer
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_collision_layer, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets the physics layer or layers a body can collide with.
*/
//go:nosplit
func (self class) BodySetCollisionMask(body RID.Any, mask int64) { //gd:PhysicsServer3D.body_set_collision_mask
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_collision_mask, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body RID.Any
		mask int64
	}{body, mask}))
}

/*
Returns the physics layer or layers a body can collide with.
*/
//go:nosplit
func (self class) BodyGetCollisionMask(body RID.Any) int64 { //gd:PhysicsServer3D.body_get_collision_mask
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_collision_mask, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets the body's collision priority.
*/
//go:nosplit
func (self class) BodySetCollisionPriority(body RID.Any, priority float64) { //gd:PhysicsServer3D.body_set_collision_priority
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_collision_priority, 0|(gdextension.SizeRID<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		body     RID.Any
		priority float64
	}{body, priority}))
}

/*
Returns the body's collision priority.
*/
//go:nosplit
func (self class) BodyGetCollisionPriority(body RID.Any) float64 { //gd:PhysicsServer3D.body_get_collision_priority
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_collision_priority, gdextension.SizeFloat|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
*/
//go:nosplit
func (self class) BodyAddShape(body RID.Any, shape RID.Any, transform Transform3D.BasisOrigin, disabled bool) { //gd:PhysicsServer3D.body_add_shape
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_add_shape, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8)|(gdextension.SizeTransform3D<<12)|(gdextension.SizeBool<<16), unsafe.Pointer(&struct {
		body      RID.Any
		shape     RID.Any
		transform Transform3D.BasisOrigin
		disabled  bool
	}{body, shape, gd.Transposed(transform), disabled}))
}

/*
Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [RID].
*/
//go:nosplit
func (self class) BodySetShape(body RID.Any, shape_idx int64, shape RID.Any) { //gd:PhysicsServer3D.body_set_shape
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_shape, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeRID<<12), unsafe.Pointer(&struct {
		body      RID.Any
		shape_idx int64
		shape     RID.Any
	}{body, shape_idx, shape}))
}

/*
Sets the transform matrix for a body shape.
*/
//go:nosplit
func (self class) BodySetShapeTransform(body RID.Any, shape_idx int64, transform Transform3D.BasisOrigin) { //gd:PhysicsServer3D.body_set_shape_transform
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_shape_transform, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeTransform3D<<12), unsafe.Pointer(&struct {
		body      RID.Any
		shape_idx int64
		transform Transform3D.BasisOrigin
	}{body, shape_idx, gd.Transposed(transform)}))
}

//go:nosplit
func (self class) BodySetShapeDisabled(body RID.Any, shape_idx int64, disabled bool) { //gd:PhysicsServer3D.body_set_shape_disabled
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_shape_disabled, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeBool<<12), unsafe.Pointer(&struct {
		body      RID.Any
		shape_idx int64
		disabled  bool
	}{body, shape_idx, disabled}))
}

/*
Returns the number of shapes assigned to a body.
*/
//go:nosplit
func (self class) BodyGetShapeCount(body RID.Any) int64 { //gd:PhysicsServer3D.body_get_shape_count
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_shape_count, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Returns the [RID] of the nth shape of a body.
*/
//go:nosplit
func (self class) BodyGetShape(body RID.Any, shape_idx int64) RID.Any { //gd:PhysicsServer3D.body_get_shape
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_shape, gdextension.SizeRID|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body      RID.Any
		shape_idx int64
	}{body, shape_idx}))
	var ret = r_ret
	return ret
}

/*
Returns the transform matrix of a body shape.
*/
//go:nosplit
func (self class) BodyGetShapeTransform(body RID.Any, shape_idx int64) Transform3D.BasisOrigin { //gd:PhysicsServer3D.body_get_shape_transform
	var r_ret = gdunsafe.Call[Transform3D.BasisOrigin](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_shape_transform, gdextension.SizeTransform3D|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body      RID.Any
		shape_idx int64
	}{body, shape_idx}))
	var ret = gd.Transposed(r_ret)
	return ret
}

/*
Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.
*/
//go:nosplit
func (self class) BodyRemoveShape(body RID.Any, shape_idx int64) { //gd:PhysicsServer3D.body_remove_shape
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_remove_shape, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body      RID.Any
		shape_idx int64
	}{body, shape_idx}))
}

/*
Removes all shapes from a body.
*/
//go:nosplit
func (self class) BodyClearShapes(body RID.Any) { //gd:PhysicsServer3D.body_clear_shapes
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_clear_shapes, 0|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
}

/*
Assigns the area to a descendant of [Object], so it can exist in the node tree.
*/
//go:nosplit
func (self class) BodyAttachObjectInstanceId(body RID.Any, id int64) { //gd:PhysicsServer3D.body_attach_object_instance_id
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_attach_object_instance_id, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body RID.Any
		id   int64
	}{body, id}))
}

/*
Gets the instance ID of the object the area is assigned to.
*/
//go:nosplit
func (self class) BodyGetObjectInstanceId(body RID.Any) int64 { //gd:PhysicsServer3D.body_get_object_instance_id
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_object_instance_id, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
If [code]true[/code], the continuous collision detection mode is enabled.
Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
*/
//go:nosplit
func (self class) BodySetEnableContinuousCollisionDetection(body RID.Any, enable bool) { //gd:PhysicsServer3D.body_set_enable_continuous_collision_detection
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_enable_continuous_collision_detection, 0|(gdextension.SizeRID<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		body   RID.Any
		enable bool
	}{body, enable}))
}

/*
If [code]true[/code], the continuous collision detection mode is enabled.
*/
//go:nosplit
func (self class) BodyIsContinuousCollisionDetectionEnabled(body RID.Any) bool { //gd:PhysicsServer3D.body_is_continuous_collision_detection_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_is_continuous_collision_detection_enabled, gdextension.SizeBool|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets a body parameter. A list of available parameters is on the [enum BodyParameter] constants.
*/
//go:nosplit
func (self class) BodySetParam(body RID.Any, param BodyParameter, value variant.Any) { //gd:PhysicsServer3D.body_set_param
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_param, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeVariant<<12), unsafe.Pointer(&struct {
		body  RID.Any
		param BodyParameter
		value gdextension.Variant
	}{body, param, gdextension.Variant(pointers.Get(gd.InternalVariant(value)))}))
}

/*
Returns the value of a body parameter. A list of available parameters is on the [enum BodyParameter] constants.
*/
//go:nosplit
func (self class) BodyGetParam(body RID.Any, param BodyParameter) variant.Any { //gd:PhysicsServer3D.body_get_param
	var r_ret = gdunsafe.Call[[3]uint64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_param, gdextension.SizeVariant|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body  RID.Any
		param BodyParameter
	}{body, param}))
	var ret = variant.Implementation(gd.VariantProxy{}, pointers.Pack(pointers.New[gd.Variant](r_ret)))
	return ret
}

/*
Restores the default inertia and center of mass based on shapes to cancel any custom values previously set using [method body_set_param].
*/
//go:nosplit
func (self class) BodyResetMassProperties(body RID.Any) { //gd:PhysicsServer3D.body_reset_mass_properties
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_reset_mass_properties, 0|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
}

/*
Sets a body state (see [enum BodyState] constants).
*/
//go:nosplit
func (self class) BodySetState(body RID.Any, state BodyState, value variant.Any) { //gd:PhysicsServer3D.body_set_state
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_state, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeVariant<<12), unsafe.Pointer(&struct {
		body  RID.Any
		state BodyState
		value gdextension.Variant
	}{body, state, gdextension.Variant(pointers.Get(gd.InternalVariant(value)))}))
}

/*
Returns a body state.
*/
//go:nosplit
func (self class) BodyGetState(body RID.Any, state BodyState) variant.Any { //gd:PhysicsServer3D.body_get_state
	var r_ret = gdunsafe.Call[[3]uint64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_state, gdextension.SizeVariant|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body  RID.Any
		state BodyState
	}{body, state}))
	var ret = variant.Implementation(gd.VariantProxy{}, pointers.Pack(pointers.New[gd.Variant](r_ret)))
	return ret
}

/*
Applies a directional impulse without affecting rotation.
An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
This is equivalent to using [method body_apply_impulse] at the body's center of mass.
*/
//go:nosplit
func (self class) BodyApplyCentralImpulse(body RID.Any, impulse Vector3.XYZ) { //gd:PhysicsServer3D.body_apply_central_impulse
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_apply_central_impulse, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector3<<8), unsafe.Pointer(&struct {
		body    RID.Any
		impulse Vector3.XYZ
	}{body, impulse}))
}

/*
Applies a positioned impulse to the body.
An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
[param position] is the offset from the body origin in global coordinates.
*/
//go:nosplit
func (self class) BodyApplyImpulse(body RID.Any, impulse Vector3.XYZ, position Vector3.XYZ) { //gd:PhysicsServer3D.body_apply_impulse
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_apply_impulse, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector3<<8)|(gdextension.SizeVector3<<12), unsafe.Pointer(&struct {
		body     RID.Any
		impulse  Vector3.XYZ
		position Vector3.XYZ
	}{body, impulse, position}))
}

/*
Applies a rotational impulse to the body without affecting the position.
An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
*/
//go:nosplit
func (self class) BodyApplyTorqueImpulse(body RID.Any, impulse Vector3.XYZ) { //gd:PhysicsServer3D.body_apply_torque_impulse
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_apply_torque_impulse, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector3<<8), unsafe.Pointer(&struct {
		body    RID.Any
		impulse Vector3.XYZ
	}{body, impulse}))
}

/*
Applies a directional force without affecting rotation. A force is time dependent and meant to be applied every physics update.
This is equivalent to using [method body_apply_force] at the body's center of mass.
*/
//go:nosplit
func (self class) BodyApplyCentralForce(body RID.Any, force Vector3.XYZ) { //gd:PhysicsServer3D.body_apply_central_force
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_apply_central_force, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector3<<8), unsafe.Pointer(&struct {
		body  RID.Any
		force Vector3.XYZ
	}{body, force}))
}

/*
Applies a positioned force to the body. A force is time dependent and meant to be applied every physics update.
[param position] is the offset from the body origin in global coordinates.
*/
//go:nosplit
func (self class) BodyApplyForce(body RID.Any, force Vector3.XYZ, position Vector3.XYZ) { //gd:PhysicsServer3D.body_apply_force
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_apply_force, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector3<<8)|(gdextension.SizeVector3<<12), unsafe.Pointer(&struct {
		body     RID.Any
		force    Vector3.XYZ
		position Vector3.XYZ
	}{body, force, position}))
}

/*
Applies a rotational force without affecting position. A force is time dependent and meant to be applied every physics update.
*/
//go:nosplit
func (self class) BodyApplyTorque(body RID.Any, torque Vector3.XYZ) { //gd:PhysicsServer3D.body_apply_torque
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_apply_torque, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector3<<8), unsafe.Pointer(&struct {
		body   RID.Any
		torque Vector3.XYZ
	}{body, torque}))
}

/*
Adds a constant directional force without affecting rotation that keeps being applied over time until cleared with [code]body_set_constant_force(body, Vector3(0, 0, 0))[/code].
This is equivalent to using [method body_add_constant_force] at the body's center of mass.
*/
//go:nosplit
func (self class) BodyAddConstantCentralForce(body RID.Any, force Vector3.XYZ) { //gd:PhysicsServer3D.body_add_constant_central_force
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_add_constant_central_force, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector3<<8), unsafe.Pointer(&struct {
		body  RID.Any
		force Vector3.XYZ
	}{body, force}))
}

/*
Adds a constant positioned force to the body that keeps being applied over time until cleared with [code]body_set_constant_force(body, Vector3(0, 0, 0))[/code].
[param position] is the offset from the body origin in global coordinates.
*/
//go:nosplit
func (self class) BodyAddConstantForce(body RID.Any, force Vector3.XYZ, position Vector3.XYZ) { //gd:PhysicsServer3D.body_add_constant_force
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_add_constant_force, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector3<<8)|(gdextension.SizeVector3<<12), unsafe.Pointer(&struct {
		body     RID.Any
		force    Vector3.XYZ
		position Vector3.XYZ
	}{body, force, position}))
}

/*
Adds a constant rotational force without affecting position that keeps being applied over time until cleared with [code]body_set_constant_torque(body, Vector3(0, 0, 0))[/code].
*/
//go:nosplit
func (self class) BodyAddConstantTorque(body RID.Any, torque Vector3.XYZ) { //gd:PhysicsServer3D.body_add_constant_torque
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_add_constant_torque, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector3<<8), unsafe.Pointer(&struct {
		body   RID.Any
		torque Vector3.XYZ
	}{body, torque}))
}

/*
Sets the body's total constant positional forces applied during each physics update.
See [method body_add_constant_force] and [method body_add_constant_central_force].
*/
//go:nosplit
func (self class) BodySetConstantForce(body RID.Any, force Vector3.XYZ) { //gd:PhysicsServer3D.body_set_constant_force
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_constant_force, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector3<<8), unsafe.Pointer(&struct {
		body  RID.Any
		force Vector3.XYZ
	}{body, force}))
}

/*
Returns the body's total constant positional forces applied during each physics update.
See [method body_add_constant_force] and [method body_add_constant_central_force].
*/
//go:nosplit
func (self class) BodyGetConstantForce(body RID.Any) Vector3.XYZ { //gd:PhysicsServer3D.body_get_constant_force
	var r_ret = gdunsafe.Call[Vector3.XYZ](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_constant_force, gdextension.SizeVector3|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets the body's total constant rotational forces applied during each physics update.
See [method body_add_constant_torque].
*/
//go:nosplit
func (self class) BodySetConstantTorque(body RID.Any, torque Vector3.XYZ) { //gd:PhysicsServer3D.body_set_constant_torque
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_constant_torque, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector3<<8), unsafe.Pointer(&struct {
		body   RID.Any
		torque Vector3.XYZ
	}{body, torque}))
}

/*
Returns the body's total constant rotational forces applied during each physics update.
See [method body_add_constant_torque].
*/
//go:nosplit
func (self class) BodyGetConstantTorque(body RID.Any) Vector3.XYZ { //gd:PhysicsServer3D.body_get_constant_torque
	var r_ret = gdunsafe.Call[Vector3.XYZ](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_constant_torque, gdextension.SizeVector3|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
*/
//go:nosplit
func (self class) BodySetAxisVelocity(body RID.Any, axis_velocity Vector3.XYZ) { //gd:PhysicsServer3D.body_set_axis_velocity
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_axis_velocity, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector3<<8), unsafe.Pointer(&struct {
		body          RID.Any
		axis_velocity Vector3.XYZ
	}{body, axis_velocity}))
}

//go:nosplit
func (self class) BodySetAxisLock(body RID.Any, axis BodyAxis, lock bool) { //gd:PhysicsServer3D.body_set_axis_lock
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_axis_lock, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeBool<<12), unsafe.Pointer(&struct {
		body RID.Any
		axis BodyAxis
		lock bool
	}{body, axis, lock}))
}

//go:nosplit
func (self class) BodyIsAxisLocked(body RID.Any, axis BodyAxis) bool { //gd:PhysicsServer3D.body_is_axis_locked
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_is_axis_locked, gdextension.SizeBool|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body RID.Any
		axis BodyAxis
	}{body, axis}))
	var ret = r_ret
	return ret
}

/*
Adds a body to the list of bodies exempt from collisions.
*/
//go:nosplit
func (self class) BodyAddCollisionException(body RID.Any, excepted_body RID.Any) { //gd:PhysicsServer3D.body_add_collision_exception
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_add_collision_exception, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8), unsafe.Pointer(&struct {
		body          RID.Any
		excepted_body RID.Any
	}{body, excepted_body}))
}

/*
Removes a body from the list of bodies exempt from collisions.
Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
*/
//go:nosplit
func (self class) BodyRemoveCollisionException(body RID.Any, excepted_body RID.Any) { //gd:PhysicsServer3D.body_remove_collision_exception
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_remove_collision_exception, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8), unsafe.Pointer(&struct {
		body          RID.Any
		excepted_body RID.Any
	}{body, excepted_body}))
}

/*
Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies. This is enabled by setting the maximum number of contacts reported to a number greater than 0.
*/
//go:nosplit
func (self class) BodySetMaxContactsReported(body RID.Any, amount int64) { //gd:PhysicsServer3D.body_set_max_contacts_reported
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_max_contacts_reported, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body   RID.Any
		amount int64
	}{body, amount}))
}

/*
Returns the maximum contacts that can be reported. See [method body_set_max_contacts_reported].
*/
//go:nosplit
func (self class) BodyGetMaxContactsReported(body RID.Any) int64 { //gd:PhysicsServer3D.body_get_max_contacts_reported
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_max_contacts_reported, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets whether the body omits the standard force integration. If [param enable] is [code]true[/code], the body will not automatically use applied forces, torques, and damping to update the body's linear and angular velocity. In this case, [method body_set_force_integration_callback] can be used to manually update the linear and angular velocity instead.
This method is called when the property [member RigidBody3D.custom_integrator] is set.
*/
//go:nosplit
func (self class) BodySetOmitForceIntegration(body RID.Any, enable bool) { //gd:PhysicsServer3D.body_set_omit_force_integration
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_omit_force_integration, 0|(gdextension.SizeRID<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		body   RID.Any
		enable bool
	}{body, enable}))
}

/*
Returns [code]true[/code] if the body is omitting the standard force integration. See [method body_set_omit_force_integration].
*/
//go:nosplit
func (self class) BodyIsOmittingForceIntegration(body RID.Any) bool { //gd:PhysicsServer3D.body_is_omitting_force_integration
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_is_omitting_force_integration, gdextension.SizeBool|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets the body's state synchronization callback function to [param callable]. Use an empty [Callable] ([code skip-lint]Callable()[/code]) to clear the callback.
The function [param callable] will be called every physics frame, assuming that the body was active during the previous physics tick, and can be used to fetch the latest state from the physics server.
The function [param callable] must take the following parameters:
1. [code]state[/code]: a [PhysicsDirectBodyState3D], used to retrieve the body's state.
*/
//go:nosplit
func (self class) BodySetStateSyncCallback(body RID.Any, callable Callable.Function) { //gd:PhysicsServer3D.body_set_state_sync_callback
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_state_sync_callback, 0|(gdextension.SizeRID<<4)|(gdextension.SizeCallable<<8), unsafe.Pointer(&struct {
		body     RID.Any
		callable gdextension.Callable
	}{body, gdextension.Callable(pointers.Get(gd.InternalCallable(callable)))}))
}

/*
Sets the body's custom force integration callback function to [param callable]. Use an empty [Callable] ([code skip-lint]Callable()[/code]) to clear the custom callback.
The function [param callable] will be called every physics tick, before the standard force integration (see [method body_set_omit_force_integration]). It can be used for example to update the body's linear and angular velocity based on contact with other bodies.
If [param userdata] is not [code]null[/code], the function [param callable] must take the following two parameters:
1. [code]state[/code]: a [PhysicsDirectBodyState3D], used to retrieve and modify the body's state,
2. [code skip-lint]userdata[/code]: a [Variant]; its value will be the [param userdata] passed into this method.
If [param userdata] is [code]null[/code], then [param callable] must take only the [code]state[/code] parameter.
*/
//go:nosplit
func (self class) BodySetForceIntegrationCallback(body RID.Any, callable Callable.Function, userdata variant.Any) { //gd:PhysicsServer3D.body_set_force_integration_callback
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_force_integration_callback, 0|(gdextension.SizeRID<<4)|(gdextension.SizeCallable<<8)|(gdextension.SizeVariant<<12), unsafe.Pointer(&struct {
		body     RID.Any
		callable gdextension.Callable
		userdata gdextension.Variant
	}{body, gdextension.Callable(pointers.Get(gd.InternalCallable(callable))), gdextension.Variant(pointers.Get(gd.InternalVariant(userdata)))}))
}

/*
Sets the body pickable with rays if [param enable] is set.
*/
//go:nosplit
func (self class) BodySetRayPickable(body RID.Any, enable bool) { //gd:PhysicsServer3D.body_set_ray_pickable
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_set_ray_pickable, 0|(gdextension.SizeRID<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		body   RID.Any
		enable bool
	}{body, enable}))
}

/*
Returns [code]true[/code] if a collision would result from moving along a motion vector from a given point in space. [PhysicsTestMotionParameters3D] is passed to set motion parameters. [PhysicsTestMotionResult3D] can be passed to return additional information.
*/
//go:nosplit
func (self class) BodyTestMotion(body RID.Any, parameters [1]gdclass.PhysicsTestMotionParameters3D, result [1]gdclass.PhysicsTestMotionResult3D) bool { //gd:PhysicsServer3D.body_test_motion
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_test_motion, gdextension.SizeBool|(gdextension.SizeRID<<4)|(gdextension.SizeObject<<8)|(gdextension.SizeObject<<12), unsafe.Pointer(&struct {
		body       RID.Any
		parameters gdextension.Object
		result     gdextension.Object
	}{body, gdextension.Object(gd.ObjectChecked(parameters[0].AsObject())), gdextension.Object(gd.ObjectChecked(result[0].AsObject()))}))
	var ret = r_ret
	return ret
}

/*
Returns the [PhysicsDirectBodyState3D] of the body. Returns [code]null[/code] if the body is destroyed or removed from the physics space.
*/
//go:nosplit
func (self class) BodyGetDirectState(body RID.Any) [1]gdclass.PhysicsDirectBodyState3D { //gd:PhysicsServer3D.body_get_direct_state
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_body_get_direct_state, gdextension.SizeObject|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = [1]gdclass.PhysicsDirectBodyState3D{gd.PointerMustAssertInstanceID[gdclass.PhysicsDirectBodyState3D](r_ret)}
	return ret
}

/*
Creates a new soft body and returns its internal [RID].
*/
//go:nosplit
func (self class) SoftBodyCreate() RID.Any { //gd:PhysicsServer3D.soft_body_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Requests that the physics server updates the rendering server with the latest positions of the given soft body's points through the [param rendering_server_handler] interface.
*/
//go:nosplit
func (self class) SoftBodyUpdateRenderingServer(body RID.Any, rendering_server_handler [1]gdclass.PhysicsServer3DRenderingServerHandler) { //gd:PhysicsServer3D.soft_body_update_rendering_server
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_update_rendering_server, 0|(gdextension.SizeRID<<4)|(gdextension.SizeObject<<8), unsafe.Pointer(&struct {
		body                     RID.Any
		rendering_server_handler gdextension.Object
	}{body, gdextension.Object(gd.ObjectChecked(rendering_server_handler[0].AsObject()))}))
}

/*
Assigns a space to the given soft body (see [method space_create]).
*/
//go:nosplit
func (self class) SoftBodySetSpace(body RID.Any, space RID.Any) { //gd:PhysicsServer3D.soft_body_set_space
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_set_space, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8), unsafe.Pointer(&struct {
		body  RID.Any
		space RID.Any
	}{body, space}))
}

/*
Returns the [RID] of the space assigned to the given soft body.
*/
//go:nosplit
func (self class) SoftBodyGetSpace(body RID.Any) RID.Any { //gd:PhysicsServer3D.soft_body_get_space
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_get_space, gdextension.SizeRID|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets the mesh of the given soft body.
*/
//go:nosplit
func (self class) SoftBodySetMesh(body RID.Any, mesh RID.Any) { //gd:PhysicsServer3D.soft_body_set_mesh
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_set_mesh, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8), unsafe.Pointer(&struct {
		body RID.Any
		mesh RID.Any
	}{body, mesh}))
}

/*
Returns the bounds of the given soft body in global coordinates.
*/
//go:nosplit
func (self class) SoftBodyGetBounds(body RID.Any) AABB.PositionSize { //gd:PhysicsServer3D.soft_body_get_bounds
	var r_ret = gdunsafe.Call[AABB.PositionSize](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_get_bounds, gdextension.SizeAABB|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets the physics layer or layers the given soft body belongs to.
*/
//go:nosplit
func (self class) SoftBodySetCollisionLayer(body RID.Any, layer int64) { //gd:PhysicsServer3D.soft_body_set_collision_layer
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_set_collision_layer, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body  RID.Any
		layer int64
	}{body, layer}))
}

/*
Returns the physics layer or layers that the given soft body belongs to.
*/
//go:nosplit
func (self class) SoftBodyGetCollisionLayer(body RID.Any) int64 { //gd:PhysicsServer3D.soft_body_get_collision_layer
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_get_collision_layer, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets the physics layer or layers the given soft body can collide with.
*/
//go:nosplit
func (self class) SoftBodySetCollisionMask(body RID.Any, mask int64) { //gd:PhysicsServer3D.soft_body_set_collision_mask
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_set_collision_mask, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body RID.Any
		mask int64
	}{body, mask}))
}

/*
Returns the physics layer or layers that the given soft body can collide with.
*/
//go:nosplit
func (self class) SoftBodyGetCollisionMask(body RID.Any) int64 { //gd:PhysicsServer3D.soft_body_get_collision_mask
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_get_collision_mask, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Adds the given body to the list of bodies exempt from collisions.
*/
//go:nosplit
func (self class) SoftBodyAddCollisionException(body RID.Any, body_b RID.Any) { //gd:PhysicsServer3D.soft_body_add_collision_exception
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_add_collision_exception, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8), unsafe.Pointer(&struct {
		body   RID.Any
		body_b RID.Any
	}{body, body_b}))
}

/*
Removes the given body from the list of bodies exempt from collisions.
*/
//go:nosplit
func (self class) SoftBodyRemoveCollisionException(body RID.Any, body_b RID.Any) { //gd:PhysicsServer3D.soft_body_remove_collision_exception
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_remove_collision_exception, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8), unsafe.Pointer(&struct {
		body   RID.Any
		body_b RID.Any
	}{body, body_b}))
}

/*
Sets the given body state for the given body (see [enum BodyState] constants).
[b]Note:[/b] Godot's default physics implementation does not support [constant BODY_STATE_LINEAR_VELOCITY], [constant BODY_STATE_ANGULAR_VELOCITY], [constant BODY_STATE_SLEEPING], or [constant BODY_STATE_CAN_SLEEP].
*/
//go:nosplit
func (self class) SoftBodySetState(body RID.Any, state BodyState, v variant.Any) { //gd:PhysicsServer3D.soft_body_set_state
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_set_state, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeVariant<<12), unsafe.Pointer(&struct {
		body  RID.Any
		state BodyState
		v     gdextension.Variant
	}{body, state, gdextension.Variant(pointers.Get(gd.InternalVariant(v)))}))
}

/*
Returns the given soft body state (see [enum BodyState] constants).
[b]Note:[/b] Godot's default physics implementation does not support [constant BODY_STATE_LINEAR_VELOCITY], [constant BODY_STATE_ANGULAR_VELOCITY], [constant BODY_STATE_SLEEPING], or [constant BODY_STATE_CAN_SLEEP].
*/
//go:nosplit
func (self class) SoftBodyGetState(body RID.Any, state BodyState) variant.Any { //gd:PhysicsServer3D.soft_body_get_state
	var r_ret = gdunsafe.Call[[3]uint64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_get_state, gdextension.SizeVariant|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body  RID.Any
		state BodyState
	}{body, state}))
	var ret = variant.Implementation(gd.VariantProxy{}, pointers.Pack(pointers.New[gd.Variant](r_ret)))
	return ret
}

/*
Sets the global transform of the given soft body.
*/
//go:nosplit
func (self class) SoftBodySetTransform(body RID.Any, transform Transform3D.BasisOrigin) { //gd:PhysicsServer3D.soft_body_set_transform
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_set_transform, 0|(gdextension.SizeRID<<4)|(gdextension.SizeTransform3D<<8), unsafe.Pointer(&struct {
		body      RID.Any
		transform Transform3D.BasisOrigin
	}{body, gd.Transposed(transform)}))
}

/*
Sets whether the given soft body will be pickable when using object picking.
*/
//go:nosplit
func (self class) SoftBodySetRayPickable(body RID.Any, enable bool) { //gd:PhysicsServer3D.soft_body_set_ray_pickable
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_set_ray_pickable, 0|(gdextension.SizeRID<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		body   RID.Any
		enable bool
	}{body, enable}))
}

/*
Sets the simulation precision of the given soft body. Increasing this value will improve the resulting simulation, but can affect performance. Use with care.
*/
//go:nosplit
func (self class) SoftBodySetSimulationPrecision(body RID.Any, simulation_precision int64) { //gd:PhysicsServer3D.soft_body_set_simulation_precision
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_set_simulation_precision, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body                 RID.Any
		simulation_precision int64
	}{body, simulation_precision}))
}

/*
Returns the simulation precision of the given soft body.
*/
//go:nosplit
func (self class) SoftBodyGetSimulationPrecision(body RID.Any) int64 { //gd:PhysicsServer3D.soft_body_get_simulation_precision
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_get_simulation_precision, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets the total mass for the given soft body.
*/
//go:nosplit
func (self class) SoftBodySetTotalMass(body RID.Any, total_mass float64) { //gd:PhysicsServer3D.soft_body_set_total_mass
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_set_total_mass, 0|(gdextension.SizeRID<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		body       RID.Any
		total_mass float64
	}{body, total_mass}))
}

/*
Returns the total mass assigned to the given soft body.
*/
//go:nosplit
func (self class) SoftBodyGetTotalMass(body RID.Any) float64 { //gd:PhysicsServer3D.soft_body_get_total_mass
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_get_total_mass, gdextension.SizeFloat|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets the linear stiffness of the given soft body. Higher values will result in a stiffer body, while lower values will increase the body's ability to bend. The value can be between [code]0.0[/code] and [code]1.0[/code] (inclusive).
*/
//go:nosplit
func (self class) SoftBodySetLinearStiffness(body RID.Any, stiffness float64) { //gd:PhysicsServer3D.soft_body_set_linear_stiffness
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_set_linear_stiffness, 0|(gdextension.SizeRID<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		body      RID.Any
		stiffness float64
	}{body, stiffness}))
}

/*
Returns the linear stiffness of the given soft body.
*/
//go:nosplit
func (self class) SoftBodyGetLinearStiffness(body RID.Any) float64 { //gd:PhysicsServer3D.soft_body_get_linear_stiffness
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_get_linear_stiffness, gdextension.SizeFloat|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets the pressure coefficient of the given soft body. Simulates pressure build-up from inside this body. Higher values increase the strength of this effect.
*/
//go:nosplit
func (self class) SoftBodySetPressureCoefficient(body RID.Any, pressure_coefficient float64) { //gd:PhysicsServer3D.soft_body_set_pressure_coefficient
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_set_pressure_coefficient, 0|(gdextension.SizeRID<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		body                 RID.Any
		pressure_coefficient float64
	}{body, pressure_coefficient}))
}

/*
Returns the pressure coefficient of the given soft body.
*/
//go:nosplit
func (self class) SoftBodyGetPressureCoefficient(body RID.Any) float64 { //gd:PhysicsServer3D.soft_body_get_pressure_coefficient
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_get_pressure_coefficient, gdextension.SizeFloat|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets the damping coefficient of the given soft body. Higher values will slow down the body more noticeably when forces are applied.
*/
//go:nosplit
func (self class) SoftBodySetDampingCoefficient(body RID.Any, damping_coefficient float64) { //gd:PhysicsServer3D.soft_body_set_damping_coefficient
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_set_damping_coefficient, 0|(gdextension.SizeRID<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		body                RID.Any
		damping_coefficient float64
	}{body, damping_coefficient}))
}

/*
Returns the damping coefficient of the given soft body.
*/
//go:nosplit
func (self class) SoftBodyGetDampingCoefficient(body RID.Any) float64 { //gd:PhysicsServer3D.soft_body_get_damping_coefficient
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_get_damping_coefficient, gdextension.SizeFloat|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Sets the drag coefficient of the given soft body. Higher values increase this body's air resistance.
[b]Note:[/b] This value is currently unused by Godot's default physics implementation.
*/
//go:nosplit
func (self class) SoftBodySetDragCoefficient(body RID.Any, drag_coefficient float64) { //gd:PhysicsServer3D.soft_body_set_drag_coefficient
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_set_drag_coefficient, 0|(gdextension.SizeRID<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		body             RID.Any
		drag_coefficient float64
	}{body, drag_coefficient}))
}

/*
Returns the drag coefficient of the given soft body.
*/
//go:nosplit
func (self class) SoftBodyGetDragCoefficient(body RID.Any) float64 { //gd:PhysicsServer3D.soft_body_get_drag_coefficient
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_get_drag_coefficient, gdextension.SizeFloat|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
	var ret = r_ret
	return ret
}

/*
Moves the given soft body point to a position in global coordinates.
*/
//go:nosplit
func (self class) SoftBodyMovePoint(body RID.Any, point_index int64, global_position Vector3.XYZ) { //gd:PhysicsServer3D.soft_body_move_point
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_move_point, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeVector3<<12), unsafe.Pointer(&struct {
		body            RID.Any
		point_index     int64
		global_position Vector3.XYZ
	}{body, point_index, global_position}))
}

/*
Returns the current position of the given soft body point in global coordinates.
*/
//go:nosplit
func (self class) SoftBodyGetPointGlobalPosition(body RID.Any, point_index int64) Vector3.XYZ { //gd:PhysicsServer3D.soft_body_get_point_global_position
	var r_ret = gdunsafe.Call[Vector3.XYZ](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_get_point_global_position, gdextension.SizeVector3|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body        RID.Any
		point_index int64
	}{body, point_index}))
	var ret = r_ret
	return ret
}

/*
Unpins all points of the given soft body.
*/
//go:nosplit
func (self class) SoftBodyRemoveAllPinnedPoints(body RID.Any) { //gd:PhysicsServer3D.soft_body_remove_all_pinned_points
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_remove_all_pinned_points, 0|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ body RID.Any }{body}))
}

/*
Pins or unpins the given soft body point based on the value of [param pin].
[b]Note:[/b] Pinning a point effectively makes it kinematic, preventing it from being affected by forces, but you can still move it using [method soft_body_move_point].
*/
//go:nosplit
func (self class) SoftBodyPinPoint(body RID.Any, point_index int64, pin bool) { //gd:PhysicsServer3D.soft_body_pin_point
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_pin_point, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeBool<<12), unsafe.Pointer(&struct {
		body        RID.Any
		point_index int64
		pin         bool
	}{body, point_index, pin}))
}

/*
Returns whether the given soft body point is pinned.
*/
//go:nosplit
func (self class) SoftBodyIsPointPinned(body RID.Any, point_index int64) bool { //gd:PhysicsServer3D.soft_body_is_point_pinned
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_soft_body_is_point_pinned, gdextension.SizeBool|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		body        RID.Any
		point_index int64
	}{body, point_index}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) JointCreate() RID.Any { //gd:PhysicsServer3D.joint_create
	var r_ret = gdunsafe.Call[RID.Any](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_joint_create, gdextension.SizeRID, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) JointClear(joint RID.Any) { //gd:PhysicsServer3D.joint_clear
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_joint_clear, 0|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ joint RID.Any }{joint}))
}

//go:nosplit
func (self class) JointMakePin(joint RID.Any, body_A RID.Any, local_A Vector3.XYZ, body_B RID.Any, local_B Vector3.XYZ) { //gd:PhysicsServer3D.joint_make_pin
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_joint_make_pin, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8)|(gdextension.SizeVector3<<12)|(gdextension.SizeRID<<16)|(gdextension.SizeVector3<<20), unsafe.Pointer(&struct {
		joint   RID.Any
		body_A  RID.Any
		local_A Vector3.XYZ
		body_B  RID.Any
		local_B Vector3.XYZ
	}{joint, body_A, local_A, body_B, local_B}))
}

/*
Sets a pin_joint parameter (see [enum PinJointParam] constants).
*/
//go:nosplit
func (self class) PinJointSetParam(joint RID.Any, param PinJointParam, value float64) { //gd:PhysicsServer3D.pin_joint_set_param
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_pin_joint_set_param, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeFloat<<12), unsafe.Pointer(&struct {
		joint RID.Any
		param PinJointParam
		value float64
	}{joint, param, value}))
}

/*
Gets a pin_joint parameter (see [enum PinJointParam] constants).
*/
//go:nosplit
func (self class) PinJointGetParam(joint RID.Any, param PinJointParam) float64 { //gd:PhysicsServer3D.pin_joint_get_param
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_pin_joint_get_param, gdextension.SizeFloat|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		joint RID.Any
		param PinJointParam
	}{joint, param}))
	var ret = r_ret
	return ret
}

/*
Sets position of the joint in the local space of body a of the joint.
*/
//go:nosplit
func (self class) PinJointSetLocalA(joint RID.Any, local_A Vector3.XYZ) { //gd:PhysicsServer3D.pin_joint_set_local_a
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_pin_joint_set_local_a, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector3<<8), unsafe.Pointer(&struct {
		joint   RID.Any
		local_A Vector3.XYZ
	}{joint, local_A}))
}

/*
Returns position of the joint in the local space of body a of the joint.
*/
//go:nosplit
func (self class) PinJointGetLocalA(joint RID.Any) Vector3.XYZ { //gd:PhysicsServer3D.pin_joint_get_local_a
	var r_ret = gdunsafe.Call[Vector3.XYZ](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_pin_joint_get_local_a, gdextension.SizeVector3|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ joint RID.Any }{joint}))
	var ret = r_ret
	return ret
}

/*
Sets position of the joint in the local space of body b of the joint.
*/
//go:nosplit
func (self class) PinJointSetLocalB(joint RID.Any, local_B Vector3.XYZ) { //gd:PhysicsServer3D.pin_joint_set_local_b
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_pin_joint_set_local_b, 0|(gdextension.SizeRID<<4)|(gdextension.SizeVector3<<8), unsafe.Pointer(&struct {
		joint   RID.Any
		local_B Vector3.XYZ
	}{joint, local_B}))
}

/*
Returns position of the joint in the local space of body b of the joint.
*/
//go:nosplit
func (self class) PinJointGetLocalB(joint RID.Any) Vector3.XYZ { //gd:PhysicsServer3D.pin_joint_get_local_b
	var r_ret = gdunsafe.Call[Vector3.XYZ](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_pin_joint_get_local_b, gdextension.SizeVector3|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ joint RID.Any }{joint}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) JointMakeHinge(joint RID.Any, body_A RID.Any, hinge_A Transform3D.BasisOrigin, body_B RID.Any, hinge_B Transform3D.BasisOrigin) { //gd:PhysicsServer3D.joint_make_hinge
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_joint_make_hinge, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8)|(gdextension.SizeTransform3D<<12)|(gdextension.SizeRID<<16)|(gdextension.SizeTransform3D<<20), unsafe.Pointer(&struct {
		joint   RID.Any
		body_A  RID.Any
		hinge_A Transform3D.BasisOrigin
		body_B  RID.Any
		hinge_B Transform3D.BasisOrigin
	}{joint, body_A, gd.Transposed(hinge_A), body_B, gd.Transposed(hinge_B)}))
}

/*
Sets a hinge_joint parameter (see [enum HingeJointParam] constants).
*/
//go:nosplit
func (self class) HingeJointSetParam(joint RID.Any, param HingeJointParam, value float64) { //gd:PhysicsServer3D.hinge_joint_set_param
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_hinge_joint_set_param, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeFloat<<12), unsafe.Pointer(&struct {
		joint RID.Any
		param HingeJointParam
		value float64
	}{joint, param, value}))
}

/*
Gets a hinge_joint parameter (see [enum HingeJointParam]).
*/
//go:nosplit
func (self class) HingeJointGetParam(joint RID.Any, param HingeJointParam) float64 { //gd:PhysicsServer3D.hinge_joint_get_param
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_hinge_joint_get_param, gdextension.SizeFloat|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		joint RID.Any
		param HingeJointParam
	}{joint, param}))
	var ret = r_ret
	return ret
}

/*
Sets a hinge_joint flag (see [enum HingeJointFlag] constants).
*/
//go:nosplit
func (self class) HingeJointSetFlag(joint RID.Any, flag HingeJointFlag, enabled bool) { //gd:PhysicsServer3D.hinge_joint_set_flag
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_hinge_joint_set_flag, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeBool<<12), unsafe.Pointer(&struct {
		joint   RID.Any
		flag    HingeJointFlag
		enabled bool
	}{joint, flag, enabled}))
}

/*
Gets a hinge_joint flag (see [enum HingeJointFlag] constants).
*/
//go:nosplit
func (self class) HingeJointGetFlag(joint RID.Any, flag HingeJointFlag) bool { //gd:PhysicsServer3D.hinge_joint_get_flag
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_hinge_joint_get_flag, gdextension.SizeBool|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		joint RID.Any
		flag  HingeJointFlag
	}{joint, flag}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) JointMakeSlider(joint RID.Any, body_A RID.Any, local_ref_A Transform3D.BasisOrigin, body_B RID.Any, local_ref_B Transform3D.BasisOrigin) { //gd:PhysicsServer3D.joint_make_slider
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_joint_make_slider, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8)|(gdextension.SizeTransform3D<<12)|(gdextension.SizeRID<<16)|(gdextension.SizeTransform3D<<20), unsafe.Pointer(&struct {
		joint       RID.Any
		body_A      RID.Any
		local_ref_A Transform3D.BasisOrigin
		body_B      RID.Any
		local_ref_B Transform3D.BasisOrigin
	}{joint, body_A, gd.Transposed(local_ref_A), body_B, gd.Transposed(local_ref_B)}))
}

/*
Gets a slider_joint parameter (see [enum SliderJointParam] constants).
*/
//go:nosplit
func (self class) SliderJointSetParam(joint RID.Any, param SliderJointParam, value float64) { //gd:PhysicsServer3D.slider_joint_set_param
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_slider_joint_set_param, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeFloat<<12), unsafe.Pointer(&struct {
		joint RID.Any
		param SliderJointParam
		value float64
	}{joint, param, value}))
}

/*
Gets a slider_joint parameter (see [enum SliderJointParam] constants).
*/
//go:nosplit
func (self class) SliderJointGetParam(joint RID.Any, param SliderJointParam) float64 { //gd:PhysicsServer3D.slider_joint_get_param
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_slider_joint_get_param, gdextension.SizeFloat|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		joint RID.Any
		param SliderJointParam
	}{joint, param}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) JointMakeConeTwist(joint RID.Any, body_A RID.Any, local_ref_A Transform3D.BasisOrigin, body_B RID.Any, local_ref_B Transform3D.BasisOrigin) { //gd:PhysicsServer3D.joint_make_cone_twist
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_joint_make_cone_twist, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8)|(gdextension.SizeTransform3D<<12)|(gdextension.SizeRID<<16)|(gdextension.SizeTransform3D<<20), unsafe.Pointer(&struct {
		joint       RID.Any
		body_A      RID.Any
		local_ref_A Transform3D.BasisOrigin
		body_B      RID.Any
		local_ref_B Transform3D.BasisOrigin
	}{joint, body_A, gd.Transposed(local_ref_A), body_B, gd.Transposed(local_ref_B)}))
}

/*
Sets a cone_twist_joint parameter (see [enum ConeTwistJointParam] constants).
*/
//go:nosplit
func (self class) ConeTwistJointSetParam(joint RID.Any, param ConeTwistJointParam, value float64) { //gd:PhysicsServer3D.cone_twist_joint_set_param
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_cone_twist_joint_set_param, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeFloat<<12), unsafe.Pointer(&struct {
		joint RID.Any
		param ConeTwistJointParam
		value float64
	}{joint, param, value}))
}

/*
Gets a cone_twist_joint parameter (see [enum ConeTwistJointParam] constants).
*/
//go:nosplit
func (self class) ConeTwistJointGetParam(joint RID.Any, param ConeTwistJointParam) float64 { //gd:PhysicsServer3D.cone_twist_joint_get_param
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_cone_twist_joint_get_param, gdextension.SizeFloat|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		joint RID.Any
		param ConeTwistJointParam
	}{joint, param}))
	var ret = r_ret
	return ret
}

/*
Returns the type of the Joint3D.
*/
//go:nosplit
func (self class) JointGetType(joint RID.Any) JointType { //gd:PhysicsServer3D.joint_get_type
	var r_ret = gdunsafe.Call[JointType](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_joint_get_type, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ joint RID.Any }{joint}))
	var ret = r_ret
	return ret
}

/*
Sets the priority value of the Joint3D.
*/
//go:nosplit
func (self class) JointSetSolverPriority(joint RID.Any, priority int64) { //gd:PhysicsServer3D.joint_set_solver_priority
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_joint_set_solver_priority, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		joint    RID.Any
		priority int64
	}{joint, priority}))
}

/*
Gets the priority value of the Joint3D.
*/
//go:nosplit
func (self class) JointGetSolverPriority(joint RID.Any) int64 { //gd:PhysicsServer3D.joint_get_solver_priority
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_joint_get_solver_priority, gdextension.SizeInt|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ joint RID.Any }{joint}))
	var ret = r_ret
	return ret
}

/*
Sets whether the bodies attached to the [Joint3D] will collide with each other.
*/
//go:nosplit
func (self class) JointDisableCollisionsBetweenBodies(joint RID.Any, disable bool) { //gd:PhysicsServer3D.joint_disable_collisions_between_bodies
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_joint_disable_collisions_between_bodies, 0|(gdextension.SizeRID<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		joint   RID.Any
		disable bool
	}{joint, disable}))
}

/*
Returns whether the bodies attached to the [Joint3D] will collide with each other.
*/
//go:nosplit
func (self class) JointIsDisabledCollisionsBetweenBodies(joint RID.Any) bool { //gd:PhysicsServer3D.joint_is_disabled_collisions_between_bodies
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_joint_is_disabled_collisions_between_bodies, gdextension.SizeBool|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ joint RID.Any }{joint}))
	var ret = r_ret
	return ret
}

/*
Make the joint a generic six degrees of freedom (6DOF) joint. Use [method generic_6dof_joint_set_flag] and [method generic_6dof_joint_set_param] to set the joint's flags and parameters respectively.
*/
//go:nosplit
func (self class) JointMakeGeneric6dof(joint RID.Any, body_A RID.Any, local_ref_A Transform3D.BasisOrigin, body_B RID.Any, local_ref_B Transform3D.BasisOrigin) { //gd:PhysicsServer3D.joint_make_generic_6dof
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_joint_make_generic_6dof, 0|(gdextension.SizeRID<<4)|(gdextension.SizeRID<<8)|(gdextension.SizeTransform3D<<12)|(gdextension.SizeRID<<16)|(gdextension.SizeTransform3D<<20), unsafe.Pointer(&struct {
		joint       RID.Any
		body_A      RID.Any
		local_ref_A Transform3D.BasisOrigin
		body_B      RID.Any
		local_ref_B Transform3D.BasisOrigin
	}{joint, body_A, gd.Transposed(local_ref_A), body_B, gd.Transposed(local_ref_B)}))
}

/*
Sets the value of a given generic 6DOF joint parameter. See [enum G6DOFJointAxisParam] for the list of available parameters.
*/
//go:nosplit
func (self class) Generic6dofJointSetParam(joint RID.Any, axis Vector3.Axis, param G6DOFJointAxisParam, value float64) { //gd:PhysicsServer3D.generic_6dof_joint_set_param
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_generic_6dof_joint_set_param, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeFloat<<16), unsafe.Pointer(&struct {
		joint RID.Any
		axis  Vector3.Axis
		param G6DOFJointAxisParam
		value float64
	}{joint, axis, param, value}))
}

/*
Returns the value of a generic 6DOF joint parameter. See [enum G6DOFJointAxisParam] for the list of available parameters.
*/
//go:nosplit
func (self class) Generic6dofJointGetParam(joint RID.Any, axis Vector3.Axis, param G6DOFJointAxisParam) float64 { //gd:PhysicsServer3D.generic_6dof_joint_get_param
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_generic_6dof_joint_get_param, gdextension.SizeFloat|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeInt<<12), unsafe.Pointer(&struct {
		joint RID.Any
		axis  Vector3.Axis
		param G6DOFJointAxisParam
	}{joint, axis, param}))
	var ret = r_ret
	return ret
}

/*
Sets the value of a given generic 6DOF joint flag. See [enum G6DOFJointAxisFlag] for the list of available flags.
*/
//go:nosplit
func (self class) Generic6dofJointSetFlag(joint RID.Any, axis Vector3.Axis, flag G6DOFJointAxisFlag, enable bool) { //gd:PhysicsServer3D.generic_6dof_joint_set_flag
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_generic_6dof_joint_set_flag, 0|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeInt<<12)|(gdextension.SizeBool<<16), unsafe.Pointer(&struct {
		joint  RID.Any
		axis   Vector3.Axis
		flag   G6DOFJointAxisFlag
		enable bool
	}{joint, axis, flag, enable}))
}

/*
Returns the value of a generic 6DOF joint flag. See [enum G6DOFJointAxisFlag] for the list of available flags.
*/
//go:nosplit
func (self class) Generic6dofJointGetFlag(joint RID.Any, axis Vector3.Axis, flag G6DOFJointAxisFlag) bool { //gd:PhysicsServer3D.generic_6dof_joint_get_flag
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_generic_6dof_joint_get_flag, gdextension.SizeBool|(gdextension.SizeRID<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeInt<<12), unsafe.Pointer(&struct {
		joint RID.Any
		axis  Vector3.Axis
		flag  G6DOFJointAxisFlag
	}{joint, axis, flag}))
	var ret = r_ret
	return ret
}

/*
Destroys any of the objects created by PhysicsServer3D. If the [RID] passed is not one of the objects that can be created by PhysicsServer3D, an error will be sent to the console.
*/
//go:nosplit
func (self class) FreeRid(rid RID.Any) { //gd:PhysicsServer3D.free_rid
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_free_rid, 0|(gdextension.SizeRID<<4), unsafe.Pointer(&struct{ rid RID.Any }{rid}))
}

/*
Activates or deactivates the 3D physics engine.
*/
//go:nosplit
func (self class) SetActive(active bool) { //gd:PhysicsServer3D.set_active
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_set_active, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ active bool }{active}))
}

/*
Returns information about the current state of the 3D physics engine. See [enum ProcessInfo] for a list of available states.
*/
//go:nosplit
func (self class) GetProcessInfo(process_info ProcessInfo) int64 { //gd:PhysicsServer3D.get_process_info
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.PhysicsServer3D.Bind_get_process_info, gdextension.SizeInt|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ process_info ProcessInfo }{process_info}))
	var ret = r_ret
	return ret
}
func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Object.Advanced(self.AsObject()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Object.Instance(self.AsObject()), name)
	}
}
func init() {
	gdclass.Register("PhysicsServer3D", func(ptr gd.Object) any {
		return [1]gdclass.PhysicsServer3D{*(*gdclass.PhysicsServer3D)(unsafe.Pointer(&ptr))}
	})
}

type JointType int //gd:PhysicsServer3D.JointType

const (
	/*The [Joint3D] is a [PinJoint3D].*/
	JointTypePin JointType = 0
	/*The [Joint3D] is a [HingeJoint3D].*/
	JointTypeHinge JointType = 1
	/*The [Joint3D] is a [SliderJoint3D].*/
	JointTypeSlider JointType = 2
	/*The [Joint3D] is a [ConeTwistJoint3D].*/
	JointTypeConeTwist JointType = 3
	/*The [Joint3D] is a [Generic6DOFJoint3D].*/
	JointType6dof JointType = 4
	/*Represents the size of the [enum JointType] enum.*/
	JointTypeMax JointType = 5
)

type PinJointParam int //gd:PhysicsServer3D.PinJointParam

const (
	/*The strength with which the pinned objects try to stay in positional relation to each other.
	  The higher, the stronger.*/
	PinJointBias PinJointParam = 0
	/*The strength with which the pinned objects try to stay in velocity relation to each other.
	  The higher, the stronger.*/
	PinJointDamping PinJointParam = 1
	/*If above 0, this value is the maximum value for an impulse that this Joint3D puts on its ends.*/
	PinJointImpulseClamp PinJointParam = 2
)

type HingeJointParam int //gd:PhysicsServer3D.HingeJointParam

const (
	/*The speed with which the two bodies get pulled together when they move in different directions.*/
	HingeJointBias HingeJointParam = 0
	/*The maximum rotation across the Hinge.*/
	HingeJointLimitUpper HingeJointParam = 1
	/*The minimum rotation across the Hinge.*/
	HingeJointLimitLower HingeJointParam = 2
	/*The speed with which the rotation across the axis perpendicular to the hinge gets corrected.*/
	HingeJointLimitBias     HingeJointParam = 3
	HingeJointLimitSoftness HingeJointParam = 4
	/*The lower this value, the more the rotation gets slowed down.*/
	HingeJointLimitRelaxation HingeJointParam = 5
	/*Target speed for the motor.*/
	HingeJointMotorTargetVelocity HingeJointParam = 6
	/*Maximum acceleration for the motor.*/
	HingeJointMotorMaxImpulse HingeJointParam = 7
)

type HingeJointFlag int //gd:PhysicsServer3D.HingeJointFlag

const (
	/*If [code]true[/code], the Hinge has a maximum and a minimum rotation.*/
	HingeJointFlagUseLimit HingeJointFlag = 0
	/*If [code]true[/code], a motor turns the Hinge.*/
	HingeJointFlagEnableMotor HingeJointFlag = 1
)

type SliderJointParam int //gd:PhysicsServer3D.SliderJointParam

const (
	/*The maximum difference between the pivot points on their X axis before damping happens.*/
	SliderJointLinearLimitUpper SliderJointParam = 0
	/*The minimum difference between the pivot points on their X axis before damping happens.*/
	SliderJointLinearLimitLower SliderJointParam = 1
	/*A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.*/
	SliderJointLinearLimitSoftness SliderJointParam = 2
	/*The amount of restitution once the limits are surpassed. The lower, the more velocity-energy gets lost.*/
	SliderJointLinearLimitRestitution SliderJointParam = 3
	/*The amount of damping once the slider limits are surpassed.*/
	SliderJointLinearLimitDamping SliderJointParam = 4
	/*A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.*/
	SliderJointLinearMotionSoftness SliderJointParam = 5
	/*The amount of restitution inside the slider limits.*/
	SliderJointLinearMotionRestitution SliderJointParam = 6
	/*The amount of damping inside the slider limits.*/
	SliderJointLinearMotionDamping SliderJointParam = 7
	/*A factor applied to the movement across axes orthogonal to the slider.*/
	SliderJointLinearOrthogonalSoftness SliderJointParam = 8
	/*The amount of restitution when movement is across axes orthogonal to the slider.*/
	SliderJointLinearOrthogonalRestitution SliderJointParam = 9
	/*The amount of damping when movement is across axes orthogonal to the slider.*/
	SliderJointLinearOrthogonalDamping SliderJointParam = 10
	/*The upper limit of rotation in the slider.*/
	SliderJointAngularLimitUpper SliderJointParam = 11
	/*The lower limit of rotation in the slider.*/
	SliderJointAngularLimitLower SliderJointParam = 12
	/*A factor applied to the all rotation once the limit is surpassed.*/
	SliderJointAngularLimitSoftness SliderJointParam = 13
	/*The amount of restitution of the rotation when the limit is surpassed.*/
	SliderJointAngularLimitRestitution SliderJointParam = 14
	/*The amount of damping of the rotation when the limit is surpassed.*/
	SliderJointAngularLimitDamping SliderJointParam = 15
	/*A factor that gets applied to the all rotation in the limits.*/
	SliderJointAngularMotionSoftness SliderJointParam = 16
	/*The amount of restitution of the rotation in the limits.*/
	SliderJointAngularMotionRestitution SliderJointParam = 17
	/*The amount of damping of the rotation in the limits.*/
	SliderJointAngularMotionDamping SliderJointParam = 18
	/*A factor that gets applied to the all rotation across axes orthogonal to the slider.*/
	SliderJointAngularOrthogonalSoftness SliderJointParam = 19
	/*The amount of restitution of the rotation across axes orthogonal to the slider.*/
	SliderJointAngularOrthogonalRestitution SliderJointParam = 20
	/*The amount of damping of the rotation across axes orthogonal to the slider.*/
	SliderJointAngularOrthogonalDamping SliderJointParam = 21
	/*Represents the size of the [enum SliderJointParam] enum.*/
	SliderJointMax SliderJointParam = 22
)

type ConeTwistJointParam int //gd:PhysicsServer3D.ConeTwistJointParam

const (
	/*Swing is rotation from side to side, around the axis perpendicular to the twist axis.
	  The swing span defines, how much rotation will not get corrected along the swing axis.
	  Could be defined as looseness in the [ConeTwistJoint3D].
	  If below 0.05, this behavior is locked.*/
	ConeTwistJointSwingSpan ConeTwistJointParam = 0
	/*Twist is the rotation around the twist axis, this value defined how far the joint can twist.
	  Twist is locked if below 0.05.*/
	ConeTwistJointTwistSpan ConeTwistJointParam = 1
	/*The speed with which the swing or twist will take place.
	  The higher, the faster.*/
	ConeTwistJointBias ConeTwistJointParam = 2
	/*The ease with which the Joint3D twists, if it's too low, it takes more force to twist the joint.*/
	ConeTwistJointSoftness ConeTwistJointParam = 3
	/*Defines, how fast the swing- and twist-speed-difference on both sides gets synced.*/
	ConeTwistJointRelaxation ConeTwistJointParam = 4
)

type G6DOFJointAxisParam int //gd:PhysicsServer3D.G6DOFJointAxisParam

const (
	/*The minimum difference between the pivot points' axes.*/
	G6dofJointLinearLowerLimit G6DOFJointAxisParam = 0
	/*The maximum difference between the pivot points' axes.*/
	G6dofJointLinearUpperLimit G6DOFJointAxisParam = 1
	/*A factor that gets applied to the movement across the axes. The lower, the slower the movement.*/
	G6dofJointLinearLimitSoftness G6DOFJointAxisParam = 2
	/*The amount of restitution on the axes movement. The lower, the more velocity-energy gets lost.*/
	G6dofJointLinearRestitution G6DOFJointAxisParam = 3
	/*The amount of damping that happens at the linear motion across the axes.*/
	G6dofJointLinearDamping G6DOFJointAxisParam = 4
	/*The velocity that the joint's linear motor will attempt to reach.*/
	G6dofJointLinearMotorTargetVelocity G6DOFJointAxisParam = 5
	/*The maximum force that the linear motor can apply while trying to reach the target velocity.*/
	G6dofJointLinearMotorForceLimit        G6DOFJointAxisParam = 6
	G6dofJointLinearSpringStiffness        G6DOFJointAxisParam = 7
	G6dofJointLinearSpringDamping          G6DOFJointAxisParam = 8
	G6dofJointLinearSpringEquilibriumPoint G6DOFJointAxisParam = 9
	/*The minimum rotation in negative direction to break loose and rotate around the axes.*/
	G6dofJointAngularLowerLimit G6DOFJointAxisParam = 10
	/*The minimum rotation in positive direction to break loose and rotate around the axes.*/
	G6dofJointAngularUpperLimit G6DOFJointAxisParam = 11
	/*A factor that gets multiplied onto all rotations across the axes.*/
	G6dofJointAngularLimitSoftness G6DOFJointAxisParam = 12
	/*The amount of rotational damping across the axes. The lower, the more damping occurs.*/
	G6dofJointAngularDamping G6DOFJointAxisParam = 13
	/*The amount of rotational restitution across the axes. The lower, the more restitution occurs.*/
	G6dofJointAngularRestitution G6DOFJointAxisParam = 14
	/*The maximum amount of force that can occur, when rotating around the axes.*/
	G6dofJointAngularForceLimit G6DOFJointAxisParam = 15
	/*When correcting the crossing of limits in rotation across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.*/
	G6dofJointAngularErp G6DOFJointAxisParam = 16
	/*Target speed for the motor at the axes.*/
	G6dofJointAngularMotorTargetVelocity G6DOFJointAxisParam = 17
	/*Maximum acceleration for the motor at the axes.*/
	G6dofJointAngularMotorForceLimit        G6DOFJointAxisParam = 18
	G6dofJointAngularSpringStiffness        G6DOFJointAxisParam = 19
	G6dofJointAngularSpringDamping          G6DOFJointAxisParam = 20
	G6dofJointAngularSpringEquilibriumPoint G6DOFJointAxisParam = 21
	/*Represents the size of the [enum G6DOFJointAxisParam] enum.*/
	G6dofJointMax G6DOFJointAxisParam = 22
)

type G6DOFJointAxisFlag int //gd:PhysicsServer3D.G6DOFJointAxisFlag

const (
	/*If set, linear motion is possible within the given limits.*/
	G6dofJointFlagEnableLinearLimit G6DOFJointAxisFlag = 0
	/*If set, rotational motion is possible.*/
	G6dofJointFlagEnableAngularLimit  G6DOFJointAxisFlag = 1
	G6dofJointFlagEnableAngularSpring G6DOFJointAxisFlag = 2
	G6dofJointFlagEnableLinearSpring  G6DOFJointAxisFlag = 3
	/*If set, there is a rotational motor across these axes.*/
	G6dofJointFlagEnableMotor G6DOFJointAxisFlag = 4
	/*If set, there is a linear motor on this axis that targets a specific velocity.*/
	G6dofJointFlagEnableLinearMotor G6DOFJointAxisFlag = 5
	/*Represents the size of the [enum G6DOFJointAxisFlag] enum.*/
	G6dofJointFlagMax G6DOFJointAxisFlag = 6
)

type ShapeType int //gd:PhysicsServer3D.ShapeType

const (
	/*The [Shape3D] is a [WorldBoundaryShape3D].*/
	ShapeWorldBoundary ShapeType = 0
	/*The [Shape3D] is a [SeparationRayShape3D].*/
	ShapeSeparationRay ShapeType = 1
	/*The [Shape3D] is a [SphereShape3D].*/
	ShapeSphere ShapeType = 2
	/*The [Shape3D] is a [BoxShape3D].*/
	ShapeBox ShapeType = 3
	/*The [Shape3D] is a [CapsuleShape3D].*/
	ShapeCapsule ShapeType = 4
	/*The [Shape3D] is a [CylinderShape3D].*/
	ShapeCylinder ShapeType = 5
	/*The [Shape3D] is a [ConvexPolygonShape3D].*/
	ShapeConvexPolygon ShapeType = 6
	/*The [Shape3D] is a [ConcavePolygonShape3D].*/
	ShapeConcavePolygon ShapeType = 7
	/*The [Shape3D] is a [HeightMapShape3D].*/
	ShapeHeightmap ShapeType = 8
	/*The [Shape3D] is used internally for a soft body. Any attempt to create this kind of shape results in an error.*/
	ShapeSoftBody ShapeType = 9
	/*This constant is used internally by the engine. Any attempt to create this kind of shape results in an error.*/
	ShapeCustom ShapeType = 10
)

type AreaParameter int //gd:PhysicsServer3D.AreaParameter

const (
	/*Constant to set/get gravity override mode in an area. See [enum AreaSpaceOverrideMode] for possible values.*/
	AreaParamGravityOverrideMode AreaParameter = 0
	/*Constant to set/get gravity strength in an area.*/
	AreaParamGravity AreaParameter = 1
	/*Constant to set/get gravity vector/center in an area.*/
	AreaParamGravityVector AreaParameter = 2
	/*Constant to set/get whether the gravity vector of an area is a direction, or a center point.*/
	AreaParamGravityIsPoint AreaParameter = 3
	/*Constant to set/get the distance at which the gravity strength is equal to the gravity controlled by [constant AREA_PARAM_GRAVITY]. For example, on a planet 100 meters in radius with a surface gravity of 4.0 m/s², set the gravity to 4.0 and the unit distance to 100.0. The gravity will have falloff according to the inverse square law, so in the example, at 200 meters from the center the gravity will be 1.0 m/s² (twice the distance, 1/4th the gravity), at 50 meters it will be 16.0 m/s² (half the distance, 4x the gravity), and so on.
	  The above is true only when the unit distance is a positive number. When this is set to 0.0, the gravity will be constant regardless of distance.*/
	AreaParamGravityPointUnitDistance AreaParameter = 4
	/*Constant to set/get linear damping override mode in an area. See [enum AreaSpaceOverrideMode] for possible values.*/
	AreaParamLinearDampOverrideMode AreaParameter = 5
	/*Constant to set/get the linear damping factor of an area.*/
	AreaParamLinearDamp AreaParameter = 6
	/*Constant to set/get angular damping override mode in an area. See [enum AreaSpaceOverrideMode] for possible values.*/
	AreaParamAngularDampOverrideMode AreaParameter = 7
	/*Constant to set/get the angular damping factor of an area.*/
	AreaParamAngularDamp AreaParameter = 8
	/*Constant to set/get the priority (order of processing) of an area.*/
	AreaParamPriority AreaParameter = 9
	/*Constant to set/get the magnitude of area-specific wind force. This wind force only applies to [SoftBody3D] nodes. Other physics bodies are currently not affected by wind.*/
	AreaParamWindForceMagnitude AreaParameter = 10
	/*Constant to set/get the 3D vector that specifies the origin from which an area-specific wind blows.*/
	AreaParamWindSource AreaParameter = 11
	/*Constant to set/get the 3D vector that specifies the direction in which an area-specific wind blows.*/
	AreaParamWindDirection AreaParameter = 12
	/*Constant to set/get the exponential rate at which wind force decreases with distance from its origin.*/
	AreaParamWindAttenuationFactor AreaParameter = 13
)

type AreaSpaceOverrideMode int //gd:PhysicsServer3D.AreaSpaceOverrideMode

const (
	/*This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.*/
	AreaSpaceOverrideDisabled AreaSpaceOverrideMode = 0
	/*This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.*/
	AreaSpaceOverrideCombine AreaSpaceOverrideMode = 1
	/*This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.*/
	AreaSpaceOverrideCombineReplace AreaSpaceOverrideMode = 2
	/*This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.*/
	AreaSpaceOverrideReplace AreaSpaceOverrideMode = 3
	/*This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.*/
	AreaSpaceOverrideReplaceCombine AreaSpaceOverrideMode = 4
)

type BodyMode int //gd:PhysicsServer3D.BodyMode

const (
	/*Constant for static bodies. In this mode, a body can be only moved by user code and doesn't collide with other bodies along its path when moved.*/
	BodyModeStatic BodyMode = 0
	/*Constant for kinematic bodies. In this mode, a body can be only moved by user code and collides with other bodies along its path.*/
	BodyModeKinematic BodyMode = 1
	/*Constant for rigid bodies. In this mode, a body can be pushed by other bodies and has forces applied.*/
	BodyModeRigid BodyMode = 2
	/*Constant for linear rigid bodies. In this mode, a body can not rotate, and only its linear velocity is affected by external forces.*/
	BodyModeRigidLinear BodyMode = 3
)

type BodyParameter int //gd:PhysicsServer3D.BodyParameter

const (
	/*Constant to set/get a body's bounce factor.*/
	BodyParamBounce BodyParameter = 0
	/*Constant to set/get a body's friction.*/
	BodyParamFriction BodyParameter = 1
	/*Constant to set/get a body's mass.*/
	BodyParamMass BodyParameter = 2
	/*Constant to set/get a body's inertia.*/
	BodyParamInertia BodyParameter = 3
	/*Constant to set/get a body's center of mass position in the body's local coordinate system.*/
	BodyParamCenterOfMass BodyParameter = 4
	/*Constant to set/get a body's gravity multiplier.*/
	BodyParamGravityScale BodyParameter = 5
	/*Constant to set/get a body's linear damping mode. See [enum BodyDampMode] for possible values.*/
	BodyParamLinearDampMode BodyParameter = 6
	/*Constant to set/get a body's angular damping mode. See [enum BodyDampMode] for possible values.*/
	BodyParamAngularDampMode BodyParameter = 7
	/*Constant to set/get a body's linear damping factor.*/
	BodyParamLinearDamp BodyParameter = 8
	/*Constant to set/get a body's angular damping factor.*/
	BodyParamAngularDamp BodyParameter = 9
	/*Represents the size of the [enum BodyParameter] enum.*/
	BodyParamMax BodyParameter = 10
)

type BodyDampMode int //gd:PhysicsServer3D.BodyDampMode

const (
	/*The body's damping value is added to any value set in areas or the default value.*/
	BodyDampModeCombine BodyDampMode = 0
	/*The body's damping value replaces any value set in areas or the default value.*/
	BodyDampModeReplace BodyDampMode = 1
)

type BodyState int //gd:PhysicsServer3D.BodyState

const (
	/*Constant to set/get the current transform matrix of the body.*/
	BodyStateTransform BodyState = 0
	/*Constant to set/get the current linear velocity of the body.*/
	BodyStateLinearVelocity BodyState = 1
	/*Constant to set/get the current angular velocity of the body.*/
	BodyStateAngularVelocity BodyState = 2
	/*Constant to sleep/wake up a body, or to get whether it is sleeping.*/
	BodyStateSleeping BodyState = 3
	/*Constant to set/get whether the body can sleep.*/
	BodyStateCanSleep BodyState = 4
)

type AreaBodyStatus int //gd:PhysicsServer3D.AreaBodyStatus

const (
	/*The value of the first parameter and area callback function receives, when an object enters one of its shapes.*/
	AreaBodyAdded AreaBodyStatus = 0
	/*The value of the first parameter and area callback function receives, when an object exits one of its shapes.*/
	AreaBodyRemoved AreaBodyStatus = 1
)

type ProcessInfo int //gd:PhysicsServer3D.ProcessInfo

const (
	/*Constant to get the number of objects that are not sleeping.*/
	InfoActiveObjects ProcessInfo = 0
	/*Constant to get the number of possible collisions.*/
	InfoCollisionPairs ProcessInfo = 1
	/*Constant to get the number of space regions where a collision could occur.*/
	InfoIslandCount ProcessInfo = 2
)

type SpaceParameter int //gd:PhysicsServer3D.SpaceParameter

const (
	/*Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated.*/
	SpaceParamContactRecycleRadius SpaceParameter = 0
	/*Constant to set/get the maximum distance a shape can be from another before they are considered separated and the contact is discarded.*/
	SpaceParamContactMaxSeparation SpaceParameter = 1
	/*Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision.*/
	SpaceParamContactMaxAllowedPenetration SpaceParameter = 2
	/*Constant to set/get the default solver bias for all physics contacts. A solver bias is a factor controlling how much two objects "rebound", after overlapping, to avoid leaving them in that state because of numerical imprecision.*/
	SpaceParamContactDefaultBias SpaceParameter = 3
	/*Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.*/
	SpaceParamBodyLinearVelocitySleepThreshold SpaceParameter = 4
	/*Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.*/
	SpaceParamBodyAngularVelocitySleepThreshold SpaceParameter = 5
	/*Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time.*/
	SpaceParamBodyTimeToSleep SpaceParameter = 6
	/*Constant to set/get the number of solver iterations for contacts and constraints. The greater the number of iterations, the more accurate the collisions and constraints will be. However, a greater number of iterations requires more CPU power, which can decrease performance.*/
	SpaceParamSolverIterations SpaceParameter = 7
)

type BodyAxis int //gd:PhysicsServer3D.BodyAxis

const (
	BodyAxisLinearX  BodyAxis = 1
	BodyAxisLinearY  BodyAxis = 2
	BodyAxisLinearZ  BodyAxis = 4
	BodyAxisAngularX BodyAxis = 8
	BodyAxisAngularY BodyAxis = 16
	BodyAxisAngularZ BodyAxis = 32
)
