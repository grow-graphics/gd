// Code generated by the generate package DO NOT EDIT

// Package VisualShaderNode provides methods for working with VisualShaderNode object instances.
package VisualShaderNode

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Visual shader graphs consist of various nodes. Each node in the graph is a separate object and they are represented as a rectangular boxes with title and a set of properties. Each node also has connection ports that allow to connect it to another nodes and control the flow of the shader.
*/
type Instance [1]gdclass.VisualShaderNode

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_default_input_port          gdextension.MethodForClass `hash:"1894493699"`
	set_output_port_for_preview     gdextension.MethodForClass `hash:"1286410249"`
	get_output_port_for_preview     gdextension.MethodForClass `hash:"3905245786"`
	set_input_port_default_value    gdextension.MethodForClass `hash:"150923387"`
	get_input_port_default_value    gdextension.MethodForClass `hash:"4227898402"`
	remove_input_port_default_value gdextension.MethodForClass `hash:"1286410249"`
	clear_default_input_values      gdextension.MethodForClass `hash:"3218959716"`
	set_default_input_values        gdextension.MethodForClass `hash:"381264803"`
	get_default_input_values        gdextension.MethodForClass `hash:"3995934104"`
	set_frame                       gdextension.MethodForClass `hash:"1286410249"`
	get_frame                       gdextension.MethodForClass `hash:"3905245786"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("VisualShaderNode")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.VisualShaderNode

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsVisualShaderNode() Instance
}

/*
Returns the input port which should be connected by default when this node is created as a result of dragging a connection from an existing node to the empty space on the graph.
*/
func (self Instance) GetDefaultInputPort(atype PortType) int { //gd:VisualShaderNode.get_default_input_port
	return int(int(Advanced(self).GetDefaultInputPort(atype)))
}

/*
Sets the default [param value] for the selected input [param port].
*/
func (self Instance) SetInputPortDefaultValue(port int, value any) { //gd:VisualShaderNode.set_input_port_default_value
	Advanced(self).SetInputPortDefaultValue(int64(port), variant.New(value), variant.New([1]any{}[0]))
}

/*
Sets the default [param value] for the selected input [param port].
*/
func (self Expanded) SetInputPortDefaultValue(port int, value any, prev_value any) { //gd:VisualShaderNode.set_input_port_default_value
	Advanced(self).SetInputPortDefaultValue(int64(port), variant.New(value), variant.New(prev_value))
}

/*
Returns the default value of the input [param port].
*/
func (self Instance) GetInputPortDefaultValue(port int) any { //gd:VisualShaderNode.get_input_port_default_value
	return any(Advanced(self).GetInputPortDefaultValue(int64(port)).Interface())
}

/*
Removes the default value of the input [param port].
*/
func (self Instance) RemoveInputPortDefaultValue(port int) { //gd:VisualShaderNode.remove_input_port_default_value
	Advanced(self).RemoveInputPortDefaultValue(int64(port))
}

/*
Clears the default input ports value.
*/
func (self Instance) ClearDefaultInputValues() { //gd:VisualShaderNode.clear_default_input_values
	Advanced(self).ClearDefaultInputValues()
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.VisualShaderNode

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.VisualShaderNode)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.VisualShaderNode)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.VisualShaderNode)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) OutputPortForPreview() int {
	return int(int(class(self).GetOutputPortForPreview()))
}

func (self Instance) SetOutputPortForPreview(value int) {
	class(self).SetOutputPortForPreview(int64(value))
}

func (self Instance) DefaultInputValues() []any {
	return []any(gd.ArrayAs[[]any](gd.InternalArray(class(self).GetDefaultInputValues())))
}

func (self Instance) SetDefaultInputValues(value []any) {
	class(self).SetDefaultInputValues(gd.EngineArrayFromSlice(value))
}

func (self Instance) LinkedParentGraphFrame() int {
	return int(int(class(self).GetFrame()))
}

func (self Instance) SetLinkedParentGraphFrame(value int) {
	class(self).SetFrame(int64(value))
}

/*
Returns the input port which should be connected by default when this node is created as a result of dragging a connection from an existing node to the empty space on the graph.
*/
//go:nosplit
func (self class) GetDefaultInputPort(atype PortType) int64 { //gd:VisualShaderNode.get_default_input_port
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_default_input_port, gdextension.SizeInt|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ atype PortType }{atype}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetOutputPortForPreview(port int64) { //gd:VisualShaderNode.set_output_port_for_preview
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_output_port_for_preview, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ port int64 }{port}))
}

//go:nosplit
func (self class) GetOutputPortForPreview() int64 { //gd:VisualShaderNode.get_output_port_for_preview
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_output_port_for_preview, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Sets the default [param value] for the selected input [param port].
*/
//go:nosplit
func (self class) SetInputPortDefaultValue(port int64, value variant.Any, prev_value variant.Any) { //gd:VisualShaderNode.set_input_port_default_value
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_input_port_default_value, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVariant<<8)|(gdextension.SizeVariant<<12), unsafe.Pointer(&struct {
		port       int64
		value      gdextension.Variant
		prev_value gdextension.Variant
	}{port, gdextension.Variant(pointers.Get(gd.InternalVariant(value))), gdextension.Variant(pointers.Get(gd.InternalVariant(prev_value)))}))
}

/*
Returns the default value of the input [param port].
*/
//go:nosplit
func (self class) GetInputPortDefaultValue(port int64) variant.Any { //gd:VisualShaderNode.get_input_port_default_value
	var r_ret = gdextension.Call[gdextension.Variant](gd.ObjectChecked(self.AsObject()), methods.get_input_port_default_value, gdextension.SizeVariant|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ port int64 }{port}))
	var ret = variant.Implementation(gd.VariantProxy{}, pointers.Pack(pointers.New[gd.Variant](r_ret)))
	return ret
}

/*
Removes the default value of the input [param port].
*/
//go:nosplit
func (self class) RemoveInputPortDefaultValue(port int64) { //gd:VisualShaderNode.remove_input_port_default_value
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_input_port_default_value, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ port int64 }{port}))
}

/*
Clears the default input ports value.
*/
//go:nosplit
func (self class) ClearDefaultInputValues() { //gd:VisualShaderNode.clear_default_input_values
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear_default_input_values, 0, unsafe.Pointer(&struct{}{}))
}

/*
Sets the default input ports values using an [Array] of the form [code][index0, value0, index1, value1, ...][/code]. For example: [code][0, Vector3(0, 0, 0), 1, Vector3(0, 0, 0)][/code].
*/
//go:nosplit
func (self class) SetDefaultInputValues(values Array.Any) { //gd:VisualShaderNode.set_default_input_values
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_default_input_values, 0|(gdextension.SizeArray<<4), unsafe.Pointer(&struct{ values gdextension.Array }{pointers.Get(gd.InternalArray(values))}))
}

/*
Returns an [Array] containing default values for all of the input ports of the node in the form [code][index0, value0, index1, value1, ...][/code].
*/
//go:nosplit
func (self class) GetDefaultInputValues() Array.Any { //gd:VisualShaderNode.get_default_input_values
	var r_ret = gdextension.Call[gdextension.Array](gd.ObjectChecked(self.AsObject()), methods.get_default_input_values, gdextension.SizeArray, unsafe.Pointer(&struct{}{}))
	var ret = Array.Through(gd.ArrayProxy[variant.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetFrame(frame_ int64) { //gd:VisualShaderNode.set_frame
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_frame, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ frame_ int64 }{frame_}))
}

//go:nosplit
func (self class) GetFrame() int64 { //gd:VisualShaderNode.get_frame
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_frame, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsVisualShaderNode() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsVisualShaderNode() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsVisualShaderNode() Instance { return self.Super().AsVisualShaderNode() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("VisualShaderNode", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type PortType int //gd:VisualShaderNode.PortType

const (
	/*Floating-point scalar. Translated to [code skip-lint]float[/code] type in shader code.*/
	PortTypeScalar PortType = 0
	/*Integer scalar. Translated to [code skip-lint]int[/code] type in shader code.*/
	PortTypeScalarInt PortType = 1
	/*Unsigned integer scalar. Translated to [code skip-lint]uint[/code] type in shader code.*/
	PortTypeScalarUint PortType = 2
	/*2D vector of floating-point values. Translated to [code skip-lint]vec2[/code] type in shader code.*/
	PortTypeVector2d PortType = 3
	/*3D vector of floating-point values. Translated to [code skip-lint]vec3[/code] type in shader code.*/
	PortTypeVector3d PortType = 4
	/*4D vector of floating-point values. Translated to [code skip-lint]vec4[/code] type in shader code.*/
	PortTypeVector4d PortType = 5
	/*Boolean type. Translated to [code skip-lint]bool[/code] type in shader code.*/
	PortTypeBoolean PortType = 6
	/*Transform type. Translated to [code skip-lint]mat4[/code] type in shader code.*/
	PortTypeTransform PortType = 7
	/*Sampler type. Translated to reference of sampler uniform in shader code. Can only be used for input ports in non-uniform nodes.*/
	PortTypeSampler PortType = 8
	/*Represents the size of the [enum PortType] enum.*/
	PortTypeMax PortType = 9
)
