// Code generated by the generate package DO NOT EDIT

// Package AnimationNodeOneShot provides methods for working with AnimationNodeOneShot object instances.
package AnimationNodeOneShot

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/AnimationNode"
import "graphics.gd/classdb/AnimationNodeSync"
import "graphics.gd/classdb/Curve"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A resource to add to an [AnimationNodeBlendTree]. This animation node will execute a sub-animation and return once it finishes. Blend times for fading in and out can be customized, as well as filters.
After setting the request and changing the animation playback, the one-shot node automatically clears the request on the next process frame by setting its [code]request[/code] value to [constant ONE_SHOT_REQUEST_NONE].
[codeblocks]
[gdscript]
# Play child animation connected to "shot" port.
animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE)
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/request"] = AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE

# Abort child animation connected to "shot" port.
animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_ABORT)
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/request"] = AnimationNodeOneShot.ONE_SHOT_REQUEST_ABORT

# Abort child animation with fading out connected to "shot" port.
animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_FADE_OUT)
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/request"] = AnimationNodeOneShot.ONE_SHOT_REQUEST_FADE_OUT

# Get current state (read-only).
animation_tree.get("parameters/OneShot/active")
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/active"]

# Get current internal state (read-only).
animation_tree.get("parameters/OneShot/internal_active")
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/internal_active"]
[/gdscript]
[csharp]
// Play child animation connected to "shot" port.
animationTree.Set("parameters/OneShot/request", (int)AnimationNodeOneShot.OneShotRequest.Fire);

// Abort child animation connected to "shot" port.
animationTree.Set("parameters/OneShot/request", (int)AnimationNodeOneShot.OneShotRequest.Abort);

// Abort child animation with fading out connected to "shot" port.
animationTree.Set("parameters/OneShot/request", (int)AnimationNodeOneShot.OneShotRequest.FadeOut);

// Get current state (read-only).
animationTree.Get("parameters/OneShot/active");

// Get current internal state (read-only).
animationTree.Get("parameters/OneShot/internal_active");
[/csharp]
[/codeblocks]
*/
type Instance [1]gdclass.AnimationNodeOneShot

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_fadein_time              gdextension.MethodForClass `hash:"373806689"`
	get_fadein_time              gdextension.MethodForClass `hash:"1740695150"`
	set_fadein_curve             gdextension.MethodForClass `hash:"270443179"`
	get_fadein_curve             gdextension.MethodForClass `hash:"2460114913"`
	set_fadeout_time             gdextension.MethodForClass `hash:"373806689"`
	get_fadeout_time             gdextension.MethodForClass `hash:"1740695150"`
	set_fadeout_curve            gdextension.MethodForClass `hash:"270443179"`
	get_fadeout_curve            gdextension.MethodForClass `hash:"2460114913"`
	set_break_loop_at_end        gdextension.MethodForClass `hash:"2586408642"`
	is_loop_broken_at_end        gdextension.MethodForClass `hash:"36873697"`
	set_autorestart              gdextension.MethodForClass `hash:"2586408642"`
	has_autorestart              gdextension.MethodForClass `hash:"36873697"`
	set_autorestart_delay        gdextension.MethodForClass `hash:"373806689"`
	get_autorestart_delay        gdextension.MethodForClass `hash:"1740695150"`
	set_autorestart_random_delay gdextension.MethodForClass `hash:"373806689"`
	get_autorestart_random_delay gdextension.MethodForClass `hash:"1740695150"`
	set_mix_mode                 gdextension.MethodForClass `hash:"1018899799"`
	get_mix_mode                 gdextension.MethodForClass `hash:"3076550526"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("AnimationNodeOneShot")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAnimationNodeOneShot() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AnimationNodeOneShot

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.AnimationNodeOneShot](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.AnimationNodeOneShot](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.AnimationNodeOneShot{pointers.Add[gdclass.AnimationNodeOneShot]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.AnimationNodeOneShot{pointers.New[gdclass.AnimationNodeOneShot]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) MixMode() MixMode {
	return MixMode(class(self).GetMixMode())
}

func (self Instance) SetMixMode(value MixMode) {
	class(self).SetMixMode(value)
}

func (self Instance) FadeinTime() Float.X {
	return Float.X(Float.X(class(self).GetFadeinTime()))
}

func (self Instance) SetFadeinTime(value Float.X) {
	class(self).SetFadeinTime(float64(value))
}

func (self Instance) FadeinCurve() Curve.Instance {
	return Curve.Instance(class(self).GetFadeinCurve())
}

func (self Instance) SetFadeinCurve(value Curve.Instance) {
	class(self).SetFadeinCurve(value)
}

func (self Instance) FadeoutTime() Float.X {
	return Float.X(Float.X(class(self).GetFadeoutTime()))
}

func (self Instance) SetFadeoutTime(value Float.X) {
	class(self).SetFadeoutTime(float64(value))
}

func (self Instance) FadeoutCurve() Curve.Instance {
	return Curve.Instance(class(self).GetFadeoutCurve())
}

func (self Instance) SetFadeoutCurve(value Curve.Instance) {
	class(self).SetFadeoutCurve(value)
}

func (self Instance) BreakLoopAtEnd() bool {
	return bool(class(self).IsLoopBrokenAtEnd())
}

func (self Instance) SetBreakLoopAtEnd(value bool) {
	class(self).SetBreakLoopAtEnd(value)
}

func (self Instance) Autorestart() bool {
	return bool(class(self).HasAutorestart())
}

func (self Instance) SetAutorestart(value bool) {
	class(self).SetAutorestart(value)
}

func (self Instance) AutorestartDelay() Float.X {
	return Float.X(Float.X(class(self).GetAutorestartDelay()))
}

func (self Instance) SetAutorestartDelay(value Float.X) {
	class(self).SetAutorestartDelay(float64(value))
}

func (self Instance) AutorestartRandomDelay() Float.X {
	return Float.X(Float.X(class(self).GetAutorestartRandomDelay()))
}

func (self Instance) SetAutorestartRandomDelay(value Float.X) {
	class(self).SetAutorestartRandomDelay(float64(value))
}

//go:nosplit
func (self class) SetFadeinTime(time float64) { //gd:AnimationNodeOneShot.set_fadein_time
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_fadein_time, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ time float64 }{time}))
}

//go:nosplit
func (self class) GetFadeinTime() float64 { //gd:AnimationNodeOneShot.get_fadein_time
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_fadein_time, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFadeinCurve(curve [1]gdclass.Curve) { //gd:AnimationNodeOneShot.set_fadein_curve
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_fadein_curve, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ curve gdextension.Object }{gdextension.Object(gd.ObjectChecked(curve[0].AsObject()))}))
}

//go:nosplit
func (self class) GetFadeinCurve() [1]gdclass.Curve { //gd:AnimationNodeOneShot.get_fadein_curve
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_fadein_curve, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Curve{gd.PointerWithOwnershipTransferredToGo[gdclass.Curve](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetFadeoutTime(time float64) { //gd:AnimationNodeOneShot.set_fadeout_time
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_fadeout_time, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ time float64 }{time}))
}

//go:nosplit
func (self class) GetFadeoutTime() float64 { //gd:AnimationNodeOneShot.get_fadeout_time
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_fadeout_time, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFadeoutCurve(curve [1]gdclass.Curve) { //gd:AnimationNodeOneShot.set_fadeout_curve
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_fadeout_curve, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ curve gdextension.Object }{gdextension.Object(gd.ObjectChecked(curve[0].AsObject()))}))
}

//go:nosplit
func (self class) GetFadeoutCurve() [1]gdclass.Curve { //gd:AnimationNodeOneShot.get_fadeout_curve
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_fadeout_curve, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Curve{gd.PointerWithOwnershipTransferredToGo[gdclass.Curve](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetBreakLoopAtEnd(enable bool) { //gd:AnimationNodeOneShot.set_break_loop_at_end
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_break_loop_at_end, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) IsLoopBrokenAtEnd() bool { //gd:AnimationNodeOneShot.is_loop_broken_at_end
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_loop_broken_at_end, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAutorestart(active bool) { //gd:AnimationNodeOneShot.set_autorestart
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_autorestart, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ active bool }{active}))
}

//go:nosplit
func (self class) HasAutorestart() bool { //gd:AnimationNodeOneShot.has_autorestart
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.has_autorestart, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAutorestartDelay(time float64) { //gd:AnimationNodeOneShot.set_autorestart_delay
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_autorestart_delay, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ time float64 }{time}))
}

//go:nosplit
func (self class) GetAutorestartDelay() float64 { //gd:AnimationNodeOneShot.get_autorestart_delay
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_autorestart_delay, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAutorestartRandomDelay(time float64) { //gd:AnimationNodeOneShot.set_autorestart_random_delay
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_autorestart_random_delay, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ time float64 }{time}))
}

//go:nosplit
func (self class) GetAutorestartRandomDelay() float64 { //gd:AnimationNodeOneShot.get_autorestart_random_delay
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_autorestart_random_delay, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMixMode(mode MixMode) { //gd:AnimationNodeOneShot.set_mix_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_mix_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode MixMode }{mode}))
}

//go:nosplit
func (self class) GetMixMode() MixMode { //gd:AnimationNodeOneShot.get_mix_mode
	var r_ret = gdextension.Call[MixMode](gd.ObjectChecked(self.AsObject()), methods.get_mix_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsAnimationNodeOneShot() Advanced {
	return Advanced{pointers.AsA[gdclass.AnimationNodeOneShot](self[0])}
}
func (self Instance) AsAnimationNodeOneShot() Instance {
	return Instance{pointers.AsA[gdclass.AnimationNodeOneShot](self[0])}
}
func (self *Extension[T]) AsAnimationNodeOneShot() Instance {
	return self.Super().AsAnimationNodeOneShot()
}
func (self class) AsAnimationNodeSync() AnimationNodeSync.Advanced {
	return AnimationNodeSync.Advanced{pointers.AsA[gdclass.AnimationNodeSync](self[0])}
}
func (self *Extension[T]) AsAnimationNodeSync() AnimationNodeSync.Instance {
	return self.Super().AsAnimationNodeSync()
}
func (self Instance) AsAnimationNodeSync() AnimationNodeSync.Instance {
	return AnimationNodeSync.Instance{pointers.AsA[gdclass.AnimationNodeSync](self[0])}
}
func (self class) AsAnimationNode() AnimationNode.Advanced {
	return AnimationNode.Advanced{pointers.AsA[gdclass.AnimationNode](self[0])}
}
func (self *Extension[T]) AsAnimationNode() AnimationNode.Instance {
	return self.Super().AsAnimationNode()
}
func (self Instance) AsAnimationNode() AnimationNode.Instance {
	return AnimationNode.Instance{pointers.AsA[gdclass.AnimationNode](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AnimationNodeSync.Advanced(self.AsAnimationNodeSync()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AnimationNodeSync.Instance(self.AsAnimationNodeSync()), name)
	}
}
func init() {
	gdclass.Register("AnimationNodeOneShot", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.AnimationNodeOneShot](ptr)} })
}

type OneShotRequest int //gd:AnimationNodeOneShot.OneShotRequest

const (
	/*The default state of the request. Nothing is done.*/
	OneShotRequestNone OneShotRequest = 0
	/*The request to play the animation connected to "shot" port.*/
	OneShotRequestFire OneShotRequest = 1
	/*The request to stop the animation connected to "shot" port.*/
	OneShotRequestAbort OneShotRequest = 2
	/*The request to fade out the animation connected to "shot" port.*/
	OneShotRequestFadeOut OneShotRequest = 3
)

type MixMode int //gd:AnimationNodeOneShot.MixMode

const (
	/*Blends two animations. See also [AnimationNodeBlend2].*/
	MixModeBlend MixMode = 0
	/*Blends two animations additively. See also [AnimationNodeAdd2].*/
	MixModeAdd MixMode = 1
)
