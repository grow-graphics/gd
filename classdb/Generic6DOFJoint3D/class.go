// Code generated by the generate package DO NOT EDIT

// Package Generic6DOFJoint3D provides methods for working with Generic6DOFJoint3D object instances.
package Generic6DOFJoint3D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Joint3D"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
The [Generic6DOFJoint3D] (6 Degrees Of Freedom) joint allows for implementing custom types of joints by locking the rotation and translation of certain axes.
The first 3 DOF represent the linear motion of the physics bodies and the last 3 DOF represent the angular motion of the physics bodies. Each axis can be either locked, or limited.
*/
type Instance [1]gdclass.Generic6DOFJoint3D

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsGeneric6DOFJoint3D() Instance
}

func (self Instance) SetParamX(param Param, value Float.X) { //gd:Generic6DOFJoint3D.set_param_x
	Advanced(self).SetParamX(param, float64(value))
}
func (self Instance) GetParamX(param Param) Float.X { //gd:Generic6DOFJoint3D.get_param_x
	return Float.X(Float.X(Advanced(self).GetParamX(param)))
}
func (self Instance) SetParamY(param Param, value Float.X) { //gd:Generic6DOFJoint3D.set_param_y
	Advanced(self).SetParamY(param, float64(value))
}
func (self Instance) GetParamY(param Param) Float.X { //gd:Generic6DOFJoint3D.get_param_y
	return Float.X(Float.X(Advanced(self).GetParamY(param)))
}
func (self Instance) SetParamZ(param Param, value Float.X) { //gd:Generic6DOFJoint3D.set_param_z
	Advanced(self).SetParamZ(param, float64(value))
}
func (self Instance) GetParamZ(param Param) Float.X { //gd:Generic6DOFJoint3D.get_param_z
	return Float.X(Float.X(Advanced(self).GetParamZ(param)))
}
func (self Instance) SetFlagX(flag Flag, value bool) { //gd:Generic6DOFJoint3D.set_flag_x
	Advanced(self).SetFlagX(flag, value)
}
func (self Instance) GetFlagX(flag Flag) bool { //gd:Generic6DOFJoint3D.get_flag_x
	return bool(Advanced(self).GetFlagX(flag))
}
func (self Instance) SetFlagY(flag Flag, value bool) { //gd:Generic6DOFJoint3D.set_flag_y
	Advanced(self).SetFlagY(flag, value)
}
func (self Instance) GetFlagY(flag Flag) bool { //gd:Generic6DOFJoint3D.get_flag_y
	return bool(Advanced(self).GetFlagY(flag))
}
func (self Instance) SetFlagZ(flag Flag, value bool) { //gd:Generic6DOFJoint3D.set_flag_z
	Advanced(self).SetFlagZ(flag, value)
}
func (self Instance) GetFlagZ(flag Flag) bool { //gd:Generic6DOFJoint3D.get_flag_z
	return bool(Advanced(self).GetFlagZ(flag))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.Generic6DOFJoint3D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("Generic6DOFJoint3D"))
	casted := Instance{*(*gdclass.Generic6DOFJoint3D)(unsafe.Pointer(&object))}
	return casted
}

//go:nosplit
func (self class) SetParamX(param Param, value float64) { //gd:Generic6DOFJoint3D.set_param_x
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Generic6DOFJoint3D.Bind_set_param_x, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		param Param
		value float64
	}{param, value}))
}

//go:nosplit
func (self class) GetParamX(param Param) float64 { //gd:Generic6DOFJoint3D.get_param_x
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Generic6DOFJoint3D.Bind_get_param_x, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ param Param }{param}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetParamY(param Param, value float64) { //gd:Generic6DOFJoint3D.set_param_y
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Generic6DOFJoint3D.Bind_set_param_y, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		param Param
		value float64
	}{param, value}))
}

//go:nosplit
func (self class) GetParamY(param Param) float64 { //gd:Generic6DOFJoint3D.get_param_y
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Generic6DOFJoint3D.Bind_get_param_y, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ param Param }{param}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetParamZ(param Param, value float64) { //gd:Generic6DOFJoint3D.set_param_z
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Generic6DOFJoint3D.Bind_set_param_z, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		param Param
		value float64
	}{param, value}))
}

//go:nosplit
func (self class) GetParamZ(param Param) float64 { //gd:Generic6DOFJoint3D.get_param_z
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.Generic6DOFJoint3D.Bind_get_param_z, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ param Param }{param}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFlagX(flag Flag, value bool) { //gd:Generic6DOFJoint3D.set_flag_x
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Generic6DOFJoint3D.Bind_set_flag_x, 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		flag  Flag
		value bool
	}{flag, value}))
}

//go:nosplit
func (self class) GetFlagX(flag Flag) bool { //gd:Generic6DOFJoint3D.get_flag_x
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Generic6DOFJoint3D.Bind_get_flag_x, gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ flag Flag }{flag}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFlagY(flag Flag, value bool) { //gd:Generic6DOFJoint3D.set_flag_y
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Generic6DOFJoint3D.Bind_set_flag_y, 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		flag  Flag
		value bool
	}{flag, value}))
}

//go:nosplit
func (self class) GetFlagY(flag Flag) bool { //gd:Generic6DOFJoint3D.get_flag_y
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Generic6DOFJoint3D.Bind_get_flag_y, gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ flag Flag }{flag}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFlagZ(flag Flag, value bool) { //gd:Generic6DOFJoint3D.set_flag_z
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.Generic6DOFJoint3D.Bind_set_flag_z, 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		flag  Flag
		value bool
	}{flag, value}))
}

//go:nosplit
func (self class) GetFlagZ(flag Flag) bool { //gd:Generic6DOFJoint3D.get_flag_z
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.Generic6DOFJoint3D.Bind_get_flag_z, gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ flag Flag }{flag}))
	var ret = r_ret
	return ret
}
func (self class) AsGeneric6DOFJoint3D() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsGeneric6DOFJoint3D() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsGeneric6DOFJoint3D() Instance { return self.Super().AsGeneric6DOFJoint3D() }
func (self class) AsJoint3D() Joint3D.Advanced            { return *((*Joint3D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsJoint3D() Joint3D.Instance    { return self.Super().AsJoint3D() }
func (self Instance) AsJoint3D() Joint3D.Instance {
	return *((*Joint3D.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode3D() Node3D.Advanced         { return *((*Node3D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode3D() Node3D.Instance { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance      { return *((*Node3D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsNode() Node.Advanced             { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance     { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance          { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Joint3D.Advanced(self.AsJoint3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Joint3D.Instance(self.AsJoint3D()), name)
	}
}
func init() {
	gdclass.Register("Generic6DOFJoint3D", func(ptr gd.Object) any {
		return [1]gdclass.Generic6DOFJoint3D{*(*gdclass.Generic6DOFJoint3D)(unsafe.Pointer(&ptr))}
	})
}

type Param int //gd:Generic6DOFJoint3D.Param

const (
	/*The minimum difference between the pivot points' axes.*/
	ParamLinearLowerLimit Param = 0
	/*The maximum difference between the pivot points' axes.*/
	ParamLinearUpperLimit Param = 1
	/*A factor applied to the movement across the axes. The lower, the slower the movement.*/
	ParamLinearLimitSoftness Param = 2
	/*The amount of restitution on the axes' movement. The lower, the more momentum gets lost.*/
	ParamLinearRestitution Param = 3
	/*The amount of damping that happens at the linear motion across the axes.*/
	ParamLinearDamping Param = 4
	/*The velocity the linear motor will try to reach.*/
	ParamLinearMotorTargetVelocity Param = 5
	/*The maximum force the linear motor will apply while trying to reach the velocity target.*/
	ParamLinearMotorForceLimit        Param = 6
	ParamLinearSpringStiffness        Param = 7
	ParamLinearSpringDamping          Param = 8
	ParamLinearSpringEquilibriumPoint Param = 9
	/*The minimum rotation in negative direction to break loose and rotate around the axes.*/
	ParamAngularLowerLimit Param = 10
	/*The minimum rotation in positive direction to break loose and rotate around the axes.*/
	ParamAngularUpperLimit Param = 11
	/*The speed of all rotations across the axes.*/
	ParamAngularLimitSoftness Param = 12
	/*The amount of rotational damping across the axes. The lower, the more damping occurs.*/
	ParamAngularDamping Param = 13
	/*The amount of rotational restitution across the axes. The lower, the more restitution occurs.*/
	ParamAngularRestitution Param = 14
	/*The maximum amount of force that can occur, when rotating around the axes.*/
	ParamAngularForceLimit Param = 15
	/*When rotating across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.*/
	ParamAngularErp Param = 16
	/*Target speed for the motor at the axes.*/
	ParamAngularMotorTargetVelocity Param = 17
	/*Maximum acceleration for the motor at the axes.*/
	ParamAngularMotorForceLimit        Param = 18
	ParamAngularSpringStiffness        Param = 19
	ParamAngularSpringDamping          Param = 20
	ParamAngularSpringEquilibriumPoint Param = 21
	/*Represents the size of the [enum Param] enum.*/
	ParamMax Param = 22
)

type Flag int //gd:Generic6DOFJoint3D.Flag

const (
	/*If enabled, linear motion is possible within the given limits.*/
	FlagEnableLinearLimit Flag = 0
	/*If enabled, rotational motion is possible within the given limits.*/
	FlagEnableAngularLimit  Flag = 1
	FlagEnableLinearSpring  Flag = 3
	FlagEnableAngularSpring Flag = 2
	/*If enabled, there is a rotational motor across these axes.*/
	FlagEnableMotor Flag = 4
	/*If enabled, there is a linear motor across these axes.*/
	FlagEnableLinearMotor Flag = 5
	/*Represents the size of the [enum Flag] enum.*/
	FlagMax Flag = 6
)
