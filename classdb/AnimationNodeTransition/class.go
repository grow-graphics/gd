// Code generated by the generate package DO NOT EDIT

// Package AnimationNodeTransition provides methods for working with AnimationNodeTransition object instances.
package AnimationNodeTransition

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/AnimationNode"
import "graphics.gd/classdb/AnimationNodeSync"
import "graphics.gd/classdb/Curve"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Simple state machine for cases which don't require a more advanced [AnimationNodeStateMachine]. Animations can be connected to the inputs and transition times can be specified.
After setting the request and changing the animation playback, the transition node automatically clears the request on the next process frame by setting its [code]transition_request[/code] value to empty.
[b]Note:[/b] When using a cross-fade, [code]current_state[/code] and [code]current_index[/code] change to the next state immediately after the cross-fade begins.
[codeblocks]
[gdscript]
# Play child animation connected to "state_2" port.
animation_tree.set("parameters/Transition/transition_request", "state_2")
# Alternative syntax (same result as above).
animation_tree["parameters/Transition/transition_request"] = "state_2"

# Get current state name (read-only).
animation_tree.get("parameters/Transition/current_state")
# Alternative syntax (same result as above).
animation_tree["parameters/Transition/current_state"]

# Get current state index (read-only).
animation_tree.get("parameters/Transition/current_index")
# Alternative syntax (same result as above).
animation_tree["parameters/Transition/current_index"]
[/gdscript]
[csharp]
// Play child animation connected to "state_2" port.
animationTree.Set("parameters/Transition/transition_request", "state_2");

// Get current state name (read-only).
animationTree.Get("parameters/Transition/current_state");

// Get current state index (read-only).
animationTree.Get("parameters/Transition/current_index");
[/csharp]
[/codeblocks]
*/
type Instance [1]gdclass.AnimationNodeTransition

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_input_count              gdextension.MethodForClass `hash:"1286410249"`
	set_input_as_auto_advance    gdextension.MethodForClass `hash:"300928843"`
	is_input_set_as_auto_advance gdextension.MethodForClass `hash:"1116898809"`
	set_input_break_loop_at_end  gdextension.MethodForClass `hash:"300928843"`
	is_input_loop_broken_at_end  gdextension.MethodForClass `hash:"1116898809"`
	set_input_reset              gdextension.MethodForClass `hash:"300928843"`
	is_input_reset               gdextension.MethodForClass `hash:"1116898809"`
	set_xfade_time               gdextension.MethodForClass `hash:"373806689"`
	get_xfade_time               gdextension.MethodForClass `hash:"1740695150"`
	set_xfade_curve              gdextension.MethodForClass `hash:"270443179"`
	get_xfade_curve              gdextension.MethodForClass `hash:"2460114913"`
	set_allow_transition_to_self gdextension.MethodForClass `hash:"2586408642"`
	is_allow_transition_to_self  gdextension.MethodForClass `hash:"36873697"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("AnimationNodeTransition")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAnimationNodeTransition() Instance
}

/*
Enables or disables auto-advance for the given [param input] index. If enabled, state changes to the next input after playing the animation once. If enabled for the last input state, it loops to the first.
*/
func (self Instance) SetInputAsAutoAdvance(input int, enable bool) { //gd:AnimationNodeTransition.set_input_as_auto_advance
	Advanced(self).SetInputAsAutoAdvance(int64(input), enable)
}

/*
Returns [code]true[/code] if auto-advance is enabled for the given [param input] index.
*/
func (self Instance) IsInputSetAsAutoAdvance(input int) bool { //gd:AnimationNodeTransition.is_input_set_as_auto_advance
	return bool(Advanced(self).IsInputSetAsAutoAdvance(int64(input)))
}

/*
If [code]true[/code], breaks the loop at the end of the loop cycle for transition, even if the animation is looping.
*/
func (self Instance) SetInputBreakLoopAtEnd(input int, enable bool) { //gd:AnimationNodeTransition.set_input_break_loop_at_end
	Advanced(self).SetInputBreakLoopAtEnd(int64(input), enable)
}

/*
Returns whether the animation breaks the loop at the end of the loop cycle for transition.
*/
func (self Instance) IsInputLoopBrokenAtEnd(input int) bool { //gd:AnimationNodeTransition.is_input_loop_broken_at_end
	return bool(Advanced(self).IsInputLoopBrokenAtEnd(int64(input)))
}

/*
If [code]true[/code], the destination animation is restarted when the animation transitions.
*/
func (self Instance) SetInputReset(input int, enable bool) { //gd:AnimationNodeTransition.set_input_reset
	Advanced(self).SetInputReset(int64(input), enable)
}

/*
Returns whether the animation restarts when the animation transitions from the other animation.
*/
func (self Instance) IsInputReset(input int) bool { //gd:AnimationNodeTransition.is_input_reset
	return bool(Advanced(self).IsInputReset(int64(input)))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AnimationNodeTransition

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AnimationNodeTransition)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AnimationNodeTransition)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.AnimationNodeTransition)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) XfadeTime() Float.X {
	return Float.X(Float.X(class(self).GetXfadeTime()))
}

func (self Instance) SetXfadeTime(value Float.X) {
	class(self).SetXfadeTime(float64(value))
}

func (self Instance) XfadeCurve() Curve.Instance {
	return Curve.Instance(class(self).GetXfadeCurve())
}

func (self Instance) SetXfadeCurve(value Curve.Instance) {
	class(self).SetXfadeCurve(value)
}

func (self Instance) AllowTransitionToSelf() bool {
	return bool(class(self).IsAllowTransitionToSelf())
}

func (self Instance) SetAllowTransitionToSelf(value bool) {
	class(self).SetAllowTransitionToSelf(value)
}

func (self Instance) SetInputCount(value int) {
	class(self).SetInputCount(int64(value))
}

//go:nosplit
func (self class) SetInputCount(input_count int64) { //gd:AnimationNodeTransition.set_input_count
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_input_count, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ input_count int64 }{input_count}))
}

/*
Enables or disables auto-advance for the given [param input] index. If enabled, state changes to the next input after playing the animation once. If enabled for the last input state, it loops to the first.
*/
//go:nosplit
func (self class) SetInputAsAutoAdvance(input int64, enable bool) { //gd:AnimationNodeTransition.set_input_as_auto_advance
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_input_as_auto_advance, 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		input  int64
		enable bool
	}{input, enable}))
}

/*
Returns [code]true[/code] if auto-advance is enabled for the given [param input] index.
*/
//go:nosplit
func (self class) IsInputSetAsAutoAdvance(input int64) bool { //gd:AnimationNodeTransition.is_input_set_as_auto_advance
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_input_set_as_auto_advance, gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ input int64 }{input}))
	var ret = r_ret
	return ret
}

/*
If [code]true[/code], breaks the loop at the end of the loop cycle for transition, even if the animation is looping.
*/
//go:nosplit
func (self class) SetInputBreakLoopAtEnd(input int64, enable bool) { //gd:AnimationNodeTransition.set_input_break_loop_at_end
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_input_break_loop_at_end, 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		input  int64
		enable bool
	}{input, enable}))
}

/*
Returns whether the animation breaks the loop at the end of the loop cycle for transition.
*/
//go:nosplit
func (self class) IsInputLoopBrokenAtEnd(input int64) bool { //gd:AnimationNodeTransition.is_input_loop_broken_at_end
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_input_loop_broken_at_end, gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ input int64 }{input}))
	var ret = r_ret
	return ret
}

/*
If [code]true[/code], the destination animation is restarted when the animation transitions.
*/
//go:nosplit
func (self class) SetInputReset(input int64, enable bool) { //gd:AnimationNodeTransition.set_input_reset
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_input_reset, 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		input  int64
		enable bool
	}{input, enable}))
}

/*
Returns whether the animation restarts when the animation transitions from the other animation.
*/
//go:nosplit
func (self class) IsInputReset(input int64) bool { //gd:AnimationNodeTransition.is_input_reset
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_input_reset, gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ input int64 }{input}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetXfadeTime(time float64) { //gd:AnimationNodeTransition.set_xfade_time
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_xfade_time, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ time float64 }{time}))
}

//go:nosplit
func (self class) GetXfadeTime() float64 { //gd:AnimationNodeTransition.get_xfade_time
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_xfade_time, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetXfadeCurve(curve [1]gdclass.Curve) { //gd:AnimationNodeTransition.set_xfade_curve
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_xfade_curve, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ curve gdextension.Object }{gdextension.Object(gd.ObjectChecked(curve[0].AsObject()))}))
}

//go:nosplit
func (self class) GetXfadeCurve() [1]gdclass.Curve { //gd:AnimationNodeTransition.get_xfade_curve
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_xfade_curve, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Curve{gd.PointerWithOwnershipTransferredToGo[gdclass.Curve](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetAllowTransitionToSelf(enable bool) { //gd:AnimationNodeTransition.set_allow_transition_to_self
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_allow_transition_to_self, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) IsAllowTransitionToSelf() bool { //gd:AnimationNodeTransition.is_allow_transition_to_self
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_allow_transition_to_self, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsAnimationNodeTransition() Advanced { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsAnimationNodeTransition() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAnimationNodeTransition() Instance {
	return self.Super().AsAnimationNodeTransition()
}
func (self class) AsAnimationNodeSync() AnimationNodeSync.Advanced {
	return *((*AnimationNodeSync.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAnimationNodeSync() AnimationNodeSync.Instance {
	return self.Super().AsAnimationNodeSync()
}
func (self Instance) AsAnimationNodeSync() AnimationNodeSync.Instance {
	return *((*AnimationNodeSync.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsAnimationNode() AnimationNode.Advanced {
	return *((*AnimationNode.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAnimationNode() AnimationNode.Instance {
	return self.Super().AsAnimationNode()
}
func (self Instance) AsAnimationNode() AnimationNode.Instance {
	return *((*AnimationNode.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AnimationNodeSync.Advanced(self.AsAnimationNodeSync()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AnimationNodeSync.Instance(self.AsAnimationNodeSync()), name)
	}
}
func init() {
	gdclass.Register("AnimationNodeTransition", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
