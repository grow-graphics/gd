// Code generated by the generate package DO NOT EDIT

// Package SceneReplicationConfig provides methods for working with SceneReplicationConfig object instances.
package SceneReplicationConfig

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }
type Instance [1]gdclass.SceneReplicationConfig

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.SceneReplicationConfig

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsSceneReplicationConfig() Instance
}

/*
Returns a list of synchronized property [NodePath]s.
*/
func (self Instance) GetProperties() []string { //gd:SceneReplicationConfig.get_properties
	return []string(gd.ArrayAs[[]string](gd.InternalArray(Advanced(self).GetProperties())))
}

/*
Adds the property identified by the given [param path] to the list of the properties being synchronized, optionally passing an [param index].
[b]Note:[/b] For details on restrictions and limitations on property synchronization, see [MultiplayerSynchronizer].
*/
func (self Instance) AddProperty(path string) { //gd:SceneReplicationConfig.add_property
	Advanced(self).AddProperty(Path.ToNode(String.New(path)), int64(-1))
}

/*
Adds the property identified by the given [param path] to the list of the properties being synchronized, optionally passing an [param index].
[b]Note:[/b] For details on restrictions and limitations on property synchronization, see [MultiplayerSynchronizer].
*/
func (self Expanded) AddProperty(path string, index int) { //gd:SceneReplicationConfig.add_property
	Advanced(self).AddProperty(Path.ToNode(String.New(path)), int64(index))
}

/*
Returns [code]true[/code] if the given [param path] is configured for synchronization.
*/
func (self Instance) HasProperty(path string) bool { //gd:SceneReplicationConfig.has_property
	return bool(Advanced(self).HasProperty(Path.ToNode(String.New(path))))
}

/*
Removes the property identified by the given [param path] from the configuration.
*/
func (self Instance) RemoveProperty(path string) { //gd:SceneReplicationConfig.remove_property
	Advanced(self).RemoveProperty(Path.ToNode(String.New(path)))
}

/*
Finds the index of the given [param path].
*/
func (self Instance) PropertyGetIndex(path string) int { //gd:SceneReplicationConfig.property_get_index
	return int(int(Advanced(self).PropertyGetIndex(Path.ToNode(String.New(path)))))
}

/*
Returns [code]true[/code] if the property identified by the given [param path] is configured to be synchronized on spawn.
*/
func (self Instance) PropertyGetSpawn(path string) bool { //gd:SceneReplicationConfig.property_get_spawn
	return bool(Advanced(self).PropertyGetSpawn(Path.ToNode(String.New(path))))
}

/*
Sets whether the property identified by the given [param path] is configured to be synchronized on spawn.
*/
func (self Instance) PropertySetSpawn(path string, enabled bool) { //gd:SceneReplicationConfig.property_set_spawn
	Advanced(self).PropertySetSpawn(Path.ToNode(String.New(path)), enabled)
}

/*
Returns the replication mode for the property identified by the given [param path]. See [enum ReplicationMode].
*/
func (self Instance) PropertyGetReplicationMode(path string) ReplicationMode { //gd:SceneReplicationConfig.property_get_replication_mode
	return ReplicationMode(Advanced(self).PropertyGetReplicationMode(Path.ToNode(String.New(path))))
}

/*
Sets the synchronization mode for the property identified by the given [param path]. See [enum ReplicationMode].
*/
func (self Instance) PropertySetReplicationMode(path string, mode ReplicationMode) { //gd:SceneReplicationConfig.property_set_replication_mode
	Advanced(self).PropertySetReplicationMode(Path.ToNode(String.New(path)), mode)
}

/*
Returns [code]true[/code] if the property identified by the given [param path] is configured to be synchronized on process.
*/
func (self Instance) PropertyGetSync(path string) bool { //gd:SceneReplicationConfig.property_get_sync
	return bool(Advanced(self).PropertyGetSync(Path.ToNode(String.New(path))))
}

/*
Sets whether the property identified by the given [param path] is configured to be synchronized on process.
*/
func (self Instance) PropertySetSync(path string, enabled bool) { //gd:SceneReplicationConfig.property_set_sync
	Advanced(self).PropertySetSync(Path.ToNode(String.New(path)), enabled)
}

/*
Returns [code]true[/code] if the property identified by the given [param path] is configured to be reliably synchronized when changes are detected on process.
*/
func (self Instance) PropertyGetWatch(path string) bool { //gd:SceneReplicationConfig.property_get_watch
	return bool(Advanced(self).PropertyGetWatch(Path.ToNode(String.New(path))))
}

/*
Sets whether the property identified by the given [param path] is configured to be reliably synchronized when changes are detected on process.
*/
func (self Instance) PropertySetWatch(path string, enabled bool) { //gd:SceneReplicationConfig.property_set_watch
	Advanced(self).PropertySetWatch(Path.ToNode(String.New(path)), enabled)
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.SceneReplicationConfig

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("SceneReplicationConfig"))
	casted := Instance{*(*gdclass.SceneReplicationConfig)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

/*
Returns a list of synchronized property [NodePath]s.
*/
//go:nosplit
func (self class) GetProperties() Array.Contains[Path.ToNode] { //gd:SceneReplicationConfig.get_properties
	var r_ret = gdunsafe.Call[[1]gd.EnginePointer](self.AsObject(), gd.Global.Methods.SceneReplicationConfig.Bind_get_properties, gdextension.SizeArray, unsafe.Pointer(&struct{}{}))
	var ret = Array.Through(gd.ArrayProxy[Path.ToNode]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

/*
Adds the property identified by the given [param path] to the list of the properties being synchronized, optionally passing an [param index].
[b]Note:[/b] For details on restrictions and limitations on property synchronization, see [MultiplayerSynchronizer].
*/
//go:nosplit
func (self class) AddProperty(path Path.ToNode, index int64) { //gd:SceneReplicationConfig.add_property
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.SceneReplicationConfig.Bind_add_property, 0|(gdextension.SizeNodePath<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		path  gdextension.NodePath
		index int64
	}{gdextension.NodePath(pointers.Get(gd.InternalNodePath(path))[0]), index}))
}

/*
Returns [code]true[/code] if the given [param path] is configured for synchronization.
*/
//go:nosplit
func (self class) HasProperty(path Path.ToNode) bool { //gd:SceneReplicationConfig.has_property
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.SceneReplicationConfig.Bind_has_property, gdextension.SizeBool|(gdextension.SizeNodePath<<4), unsafe.Pointer(&struct{ path gdextension.NodePath }{gdextension.NodePath(pointers.Get(gd.InternalNodePath(path))[0])}))
	var ret = r_ret
	return ret
}

/*
Removes the property identified by the given [param path] from the configuration.
*/
//go:nosplit
func (self class) RemoveProperty(path Path.ToNode) { //gd:SceneReplicationConfig.remove_property
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.SceneReplicationConfig.Bind_remove_property, 0|(gdextension.SizeNodePath<<4), unsafe.Pointer(&struct{ path gdextension.NodePath }{gdextension.NodePath(pointers.Get(gd.InternalNodePath(path))[0])}))
}

/*
Finds the index of the given [param path].
*/
//go:nosplit
func (self class) PropertyGetIndex(path Path.ToNode) int64 { //gd:SceneReplicationConfig.property_get_index
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.SceneReplicationConfig.Bind_property_get_index, gdextension.SizeInt|(gdextension.SizeNodePath<<4), unsafe.Pointer(&struct{ path gdextension.NodePath }{gdextension.NodePath(pointers.Get(gd.InternalNodePath(path))[0])}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if the property identified by the given [param path] is configured to be synchronized on spawn.
*/
//go:nosplit
func (self class) PropertyGetSpawn(path Path.ToNode) bool { //gd:SceneReplicationConfig.property_get_spawn
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.SceneReplicationConfig.Bind_property_get_spawn, gdextension.SizeBool|(gdextension.SizeNodePath<<4), unsafe.Pointer(&struct{ path gdextension.NodePath }{gdextension.NodePath(pointers.Get(gd.InternalNodePath(path))[0])}))
	var ret = r_ret
	return ret
}

/*
Sets whether the property identified by the given [param path] is configured to be synchronized on spawn.
*/
//go:nosplit
func (self class) PropertySetSpawn(path Path.ToNode, enabled bool) { //gd:SceneReplicationConfig.property_set_spawn
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.SceneReplicationConfig.Bind_property_set_spawn, 0|(gdextension.SizeNodePath<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		path    gdextension.NodePath
		enabled bool
	}{gdextension.NodePath(pointers.Get(gd.InternalNodePath(path))[0]), enabled}))
}

/*
Returns the replication mode for the property identified by the given [param path]. See [enum ReplicationMode].
*/
//go:nosplit
func (self class) PropertyGetReplicationMode(path Path.ToNode) ReplicationMode { //gd:SceneReplicationConfig.property_get_replication_mode
	var r_ret = gdunsafe.Call[ReplicationMode](self.AsObject(), gd.Global.Methods.SceneReplicationConfig.Bind_property_get_replication_mode, gdextension.SizeInt|(gdextension.SizeNodePath<<4), unsafe.Pointer(&struct{ path gdextension.NodePath }{gdextension.NodePath(pointers.Get(gd.InternalNodePath(path))[0])}))
	var ret = r_ret
	return ret
}

/*
Sets the synchronization mode for the property identified by the given [param path]. See [enum ReplicationMode].
*/
//go:nosplit
func (self class) PropertySetReplicationMode(path Path.ToNode, mode ReplicationMode) { //gd:SceneReplicationConfig.property_set_replication_mode
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.SceneReplicationConfig.Bind_property_set_replication_mode, 0|(gdextension.SizeNodePath<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		path gdextension.NodePath
		mode ReplicationMode
	}{gdextension.NodePath(pointers.Get(gd.InternalNodePath(path))[0]), mode}))
}

/*
Returns [code]true[/code] if the property identified by the given [param path] is configured to be synchronized on process.
*/
//go:nosplit
func (self class) PropertyGetSync(path Path.ToNode) bool { //gd:SceneReplicationConfig.property_get_sync
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.SceneReplicationConfig.Bind_property_get_sync, gdextension.SizeBool|(gdextension.SizeNodePath<<4), unsafe.Pointer(&struct{ path gdextension.NodePath }{gdextension.NodePath(pointers.Get(gd.InternalNodePath(path))[0])}))
	var ret = r_ret
	return ret
}

/*
Sets whether the property identified by the given [param path] is configured to be synchronized on process.
*/
//go:nosplit
func (self class) PropertySetSync(path Path.ToNode, enabled bool) { //gd:SceneReplicationConfig.property_set_sync
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.SceneReplicationConfig.Bind_property_set_sync, 0|(gdextension.SizeNodePath<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		path    gdextension.NodePath
		enabled bool
	}{gdextension.NodePath(pointers.Get(gd.InternalNodePath(path))[0]), enabled}))
}

/*
Returns [code]true[/code] if the property identified by the given [param path] is configured to be reliably synchronized when changes are detected on process.
*/
//go:nosplit
func (self class) PropertyGetWatch(path Path.ToNode) bool { //gd:SceneReplicationConfig.property_get_watch
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.SceneReplicationConfig.Bind_property_get_watch, gdextension.SizeBool|(gdextension.SizeNodePath<<4), unsafe.Pointer(&struct{ path gdextension.NodePath }{gdextension.NodePath(pointers.Get(gd.InternalNodePath(path))[0])}))
	var ret = r_ret
	return ret
}

/*
Sets whether the property identified by the given [param path] is configured to be reliably synchronized when changes are detected on process.
*/
//go:nosplit
func (self class) PropertySetWatch(path Path.ToNode, enabled bool) { //gd:SceneReplicationConfig.property_set_watch
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.SceneReplicationConfig.Bind_property_set_watch, 0|(gdextension.SizeNodePath<<4)|(gdextension.SizeBool<<8), unsafe.Pointer(&struct {
		path    gdextension.NodePath
		enabled bool
	}{gdextension.NodePath(pointers.Get(gd.InternalNodePath(path))[0]), enabled}))
}
func (self class) AsSceneReplicationConfig() Advanced { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsSceneReplicationConfig() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsSceneReplicationConfig() Instance {
	return self.Super().AsSceneReplicationConfig()
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("SceneReplicationConfig", func(ptr gd.Object) any {
		return [1]gdclass.SceneReplicationConfig{*(*gdclass.SceneReplicationConfig)(unsafe.Pointer(&ptr))}
	})
}

type ReplicationMode int //gd:SceneReplicationConfig.ReplicationMode

const (
	/*Do not keep the given property synchronized.*/
	ReplicationModeNever ReplicationMode = 0
	/*Replicate the given property on process by constantly sending updates using unreliable transfer mode.*/
	ReplicationModeAlways ReplicationMode = 1
	/*Replicate the given property on process by sending updates using reliable transfer mode when its value changes.*/
	ReplicationModeOnChange ReplicationMode = 2
)
