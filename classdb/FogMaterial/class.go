// Code generated by the generate package DO NOT EDIT

// Package FogMaterial provides methods for working with FogMaterial object instances.
package FogMaterial

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Material"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/Texture3D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A [Material] resource that can be used by [FogVolume]s to draw volumetric effects.
If you need more advanced effects, use a custom [url=$DOCS_URL/tutorials/shaders/shader_reference/fog_shader.html]fog shader[/url].
*/
type Instance [1]gdclass.FogMaterial

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_density         gdextension.MethodForClass `hash:"373806689"`
	get_density         gdextension.MethodForClass `hash:"1740695150"`
	set_albedo          gdextension.MethodForClass `hash:"2920490490"`
	get_albedo          gdextension.MethodForClass `hash:"3444240500"`
	set_emission        gdextension.MethodForClass `hash:"2920490490"`
	get_emission        gdextension.MethodForClass `hash:"3444240500"`
	set_height_falloff  gdextension.MethodForClass `hash:"373806689"`
	get_height_falloff  gdextension.MethodForClass `hash:"1740695150"`
	set_edge_fade       gdextension.MethodForClass `hash:"373806689"`
	get_edge_fade       gdextension.MethodForClass `hash:"1740695150"`
	set_density_texture gdextension.MethodForClass `hash:"1188404210"`
	get_density_texture gdextension.MethodForClass `hash:"373985333"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("FogMaterial")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsFogMaterial() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.FogMaterial

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.FogMaterial](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.FogMaterial](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.FogMaterial{pointers.Add[gdclass.FogMaterial]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.FogMaterial{pointers.New[gdclass.FogMaterial]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Density() Float.X {
	return Float.X(Float.X(class(self).GetDensity()))
}

func (self Instance) SetDensity(value Float.X) {
	class(self).SetDensity(float64(value))
}

func (self Instance) Albedo() Color.RGBA {
	return Color.RGBA(class(self).GetAlbedo())
}

func (self Instance) SetAlbedo(value Color.RGBA) {
	class(self).SetAlbedo(Color.RGBA(value))
}

func (self Instance) Emission() Color.RGBA {
	return Color.RGBA(class(self).GetEmission())
}

func (self Instance) SetEmission(value Color.RGBA) {
	class(self).SetEmission(Color.RGBA(value))
}

func (self Instance) HeightFalloff() Float.X {
	return Float.X(Float.X(class(self).GetHeightFalloff()))
}

func (self Instance) SetHeightFalloff(value Float.X) {
	class(self).SetHeightFalloff(float64(value))
}

func (self Instance) EdgeFade() Float.X {
	return Float.X(Float.X(class(self).GetEdgeFade()))
}

func (self Instance) SetEdgeFade(value Float.X) {
	class(self).SetEdgeFade(float64(value))
}

func (self Instance) DensityTexture() Texture3D.Instance {
	return Texture3D.Instance(class(self).GetDensityTexture())
}

func (self Instance) SetDensityTexture(value Texture3D.Instance) {
	class(self).SetDensityTexture(value)
}

//go:nosplit
func (self class) SetDensity(density float64) { //gd:FogMaterial.set_density
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_density, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ density float64 }{density}))
}

//go:nosplit
func (self class) GetDensity() float64 { //gd:FogMaterial.get_density
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_density, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAlbedo(albedo Color.RGBA) { //gd:FogMaterial.set_albedo
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_albedo, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ albedo Color.RGBA }{albedo}))
}

//go:nosplit
func (self class) GetAlbedo() Color.RGBA { //gd:FogMaterial.get_albedo
	var r_ret = gdextension.Call[Color.RGBA](gd.ObjectChecked(self.AsObject()), methods.get_albedo, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEmission(emission Color.RGBA) { //gd:FogMaterial.set_emission
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_emission, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ emission Color.RGBA }{emission}))
}

//go:nosplit
func (self class) GetEmission() Color.RGBA { //gd:FogMaterial.get_emission
	var r_ret = gdextension.Call[Color.RGBA](gd.ObjectChecked(self.AsObject()), methods.get_emission, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHeightFalloff(height_falloff float64) { //gd:FogMaterial.set_height_falloff
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_height_falloff, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ height_falloff float64 }{height_falloff}))
}

//go:nosplit
func (self class) GetHeightFalloff() float64 { //gd:FogMaterial.get_height_falloff
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_height_falloff, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEdgeFade(edge_fade float64) { //gd:FogMaterial.set_edge_fade
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_edge_fade, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ edge_fade float64 }{edge_fade}))
}

//go:nosplit
func (self class) GetEdgeFade() float64 { //gd:FogMaterial.get_edge_fade
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_edge_fade, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDensityTexture(density_texture [1]gdclass.Texture3D) { //gd:FogMaterial.set_density_texture
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_density_texture, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ density_texture gdextension.Object }{gdextension.Object(gd.ObjectChecked(density_texture[0].AsObject()))}))
}

//go:nosplit
func (self class) GetDensityTexture() [1]gdclass.Texture3D { //gd:FogMaterial.get_density_texture
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_density_texture, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Texture3D{gd.PointerWithOwnershipTransferredToGo[gdclass.Texture3D](r_ret)}
	return ret
}
func (self class) AsFogMaterial() Advanced {
	return Advanced{pointers.AsA[gdclass.FogMaterial](self[0])}
}
func (self Instance) AsFogMaterial() Instance {
	return Instance{pointers.AsA[gdclass.FogMaterial](self[0])}
}
func (self *Extension[T]) AsFogMaterial() Instance { return self.Super().AsFogMaterial() }
func (self class) AsMaterial() Material.Advanced {
	return Material.Advanced{pointers.AsA[gdclass.Material](self[0])}
}
func (self *Extension[T]) AsMaterial() Material.Instance { return self.Super().AsMaterial() }
func (self Instance) AsMaterial() Material.Instance {
	return Material.Instance{pointers.AsA[gdclass.Material](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Material.Advanced(self.AsMaterial()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Material.Instance(self.AsMaterial()), name)
	}
}
func init() {
	gdclass.Register("FogMaterial", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.FogMaterial](ptr)} })
}
