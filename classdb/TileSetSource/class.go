// Code generated by the generate package DO NOT EDIT

// Package TileSetSource provides methods for working with TileSetSource object instances.
package TileSetSource

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2i"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Exposes a set of tiles for a [TileSet] resource.
Tiles in a source are indexed with two IDs, coordinates ID (of type Vector2i) and an alternative ID (of type int), named according to their use in the [TileSetAtlasSource] class.
Depending on the TileSet source type, those IDs might have restrictions on their values, this is why the base [TileSetSource] class only exposes getters for them.
You can iterate over all tiles exposed by a TileSetSource by first iterating over coordinates IDs using [method get_tiles_count] and [method get_tile_id], then over alternative IDs using [method get_alternative_tiles_count] and [method get_alternative_tile_id].
[b]Warning:[/b] [TileSetSource] can only be added to one TileSet at the same time. Calling [method TileSet.add_source] on a second [TileSet] will remove the source from the first one.
*/
type Instance [1]gdclass.TileSetSource

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_tiles_count             gdextension.MethodForClass `hash:"3905245786"`
	get_tile_id                 gdextension.MethodForClass `hash:"880721226"`
	has_tile                    gdextension.MethodForClass `hash:"3900751641"`
	get_alternative_tiles_count gdextension.MethodForClass `hash:"2485466453"`
	get_alternative_tile_id     gdextension.MethodForClass `hash:"89881719"`
	has_alternative_tile        gdextension.MethodForClass `hash:"1073731340"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("TileSetSource")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsTileSetSource() Instance
}

/*
Returns how many tiles this atlas source defines (not including alternative tiles).
*/
func (self Instance) GetTilesCount() int { //gd:TileSetSource.get_tiles_count
	return int(int(Advanced(self).GetTilesCount()))
}

/*
Returns the tile coordinates ID of the tile with index [param index].
*/
func (self Instance) GetTileId(index int) Vector2i.XY { //gd:TileSetSource.get_tile_id
	return Vector2i.XY(Advanced(self).GetTileId(int64(index)))
}

/*
Returns if this atlas has a tile with coordinates ID [param atlas_coords].
*/
func (self Instance) HasTile(atlas_coords Vector2i.XY) bool { //gd:TileSetSource.has_tile
	return bool(Advanced(self).HasTile(Vector2i.XY(atlas_coords)))
}

/*
Returns the number of alternatives tiles for the coordinates ID [param atlas_coords].
For [TileSetAtlasSource], this always return at least 1, as the base tile with ID 0 is always part of the alternatives list.
Returns -1 if there is not tile at the given coords.
*/
func (self Instance) GetAlternativeTilesCount(atlas_coords Vector2i.XY) int { //gd:TileSetSource.get_alternative_tiles_count
	return int(int(Advanced(self).GetAlternativeTilesCount(Vector2i.XY(atlas_coords))))
}

/*
Returns the alternative ID for the tile with coordinates ID [param atlas_coords] at index [param index].
*/
func (self Instance) GetAlternativeTileId(atlas_coords Vector2i.XY, index int) int { //gd:TileSetSource.get_alternative_tile_id
	return int(int(Advanced(self).GetAlternativeTileId(Vector2i.XY(atlas_coords), int64(index))))
}

/*
Returns if the base tile at coordinates [param atlas_coords] has an alternative with ID [param alternative_tile].
*/
func (self Instance) HasAlternativeTile(atlas_coords Vector2i.XY, alternative_tile int) bool { //gd:TileSetSource.has_alternative_tile
	return bool(Advanced(self).HasAlternativeTile(Vector2i.XY(atlas_coords), int64(alternative_tile)))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.TileSetSource

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.TileSetSource)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.TileSetSource)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.TileSetSource)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

/*
Returns how many tiles this atlas source defines (not including alternative tiles).
*/
//go:nosplit
func (self class) GetTilesCount() int64 { //gd:TileSetSource.get_tiles_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_tiles_count, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the tile coordinates ID of the tile with index [param index].
*/
//go:nosplit
func (self class) GetTileId(index int64) Vector2i.XY { //gd:TileSetSource.get_tile_id
	var r_ret = gdextension.Call[Vector2i.XY](gd.ObjectChecked(self.AsObject()), methods.get_tile_id, gdextension.SizeVector2i|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ index int64 }{index}))
	var ret = r_ret
	return ret
}

/*
Returns if this atlas has a tile with coordinates ID [param atlas_coords].
*/
//go:nosplit
func (self class) HasTile(atlas_coords Vector2i.XY) bool { //gd:TileSetSource.has_tile
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.has_tile, gdextension.SizeBool|(gdextension.SizeVector2i<<4), unsafe.Pointer(&struct{ atlas_coords Vector2i.XY }{atlas_coords}))
	var ret = r_ret
	return ret
}

/*
Returns the number of alternatives tiles for the coordinates ID [param atlas_coords].
For [TileSetAtlasSource], this always return at least 1, as the base tile with ID 0 is always part of the alternatives list.
Returns -1 if there is not tile at the given coords.
*/
//go:nosplit
func (self class) GetAlternativeTilesCount(atlas_coords Vector2i.XY) int64 { //gd:TileSetSource.get_alternative_tiles_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_alternative_tiles_count, gdextension.SizeInt|(gdextension.SizeVector2i<<4), unsafe.Pointer(&struct{ atlas_coords Vector2i.XY }{atlas_coords}))
	var ret = r_ret
	return ret
}

/*
Returns the alternative ID for the tile with coordinates ID [param atlas_coords] at index [param index].
*/
//go:nosplit
func (self class) GetAlternativeTileId(atlas_coords Vector2i.XY, index int64) int64 { //gd:TileSetSource.get_alternative_tile_id
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_alternative_tile_id, gdextension.SizeInt|(gdextension.SizeVector2i<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		atlas_coords Vector2i.XY
		index        int64
	}{atlas_coords, index}))
	var ret = r_ret
	return ret
}

/*
Returns if the base tile at coordinates [param atlas_coords] has an alternative with ID [param alternative_tile].
*/
//go:nosplit
func (self class) HasAlternativeTile(atlas_coords Vector2i.XY, alternative_tile int64) bool { //gd:TileSetSource.has_alternative_tile
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.has_alternative_tile, gdextension.SizeBool|(gdextension.SizeVector2i<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		atlas_coords     Vector2i.XY
		alternative_tile int64
	}{atlas_coords, alternative_tile}))
	var ret = r_ret
	return ret
}
func (self class) AsTileSetSource() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsTileSetSource() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsTileSetSource() Instance { return self.Super().AsTileSetSource() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("TileSetSource", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
