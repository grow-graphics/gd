// Code generated by the generate package DO NOT EDIT

// Package SQLiteDatabase provides methods for working with SQLiteDatabase object instances.
package SQLiteDatabase

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/SQLiteAccess"
import "graphics.gd/classdb/SQLiteColumnSchema"
import "graphics.gd/classdb/SQLiteQuery"
import "graphics.gd/classdb/SQLiteQueryResult"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A SQLite database resource.
*/
type Instance [1]gdclass.SQLiteDatabase

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.SQLiteDatabase

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsSQLiteDatabase() Instance
}

/*
Returns the underlying [SQLite] object.
*/
func (self Instance) GetSqlite() SQLiteAccess.Instance { //gd:SQLiteDatabase.get_sqlite
	return SQLiteAccess.Instance(Advanced(self).GetSqlite())
}

/*
Creates a new table.
*/
func (self Instance) CreateTable(table_name string, columns []SQLiteColumnSchema.Instance) SQLiteQuery.Instance { //gd:SQLiteDatabase.create_table
	return SQLiteQuery.Instance(Advanced(self).CreateTable(String.New(table_name), gd.ArrayFromSlice[Array.Contains[[1]gdclass.SQLiteColumnSchema]](columns)))
}

/*
Drops a table.
*/
func (self Instance) DropTable(table_name string) SQLiteQuery.Instance { //gd:SQLiteDatabase.drop_table
	return SQLiteQuery.Instance(Advanced(self).DropTable(String.New(table_name)))
}

/*
Creates a new query object.
*/
func (self Instance) CreateQuery(query string, arguments []any) SQLiteQuery.Instance { //gd:SQLiteDatabase.create_query
	return SQLiteQuery.Instance(Advanced(self).CreateQuery(String.New(query), gd.EngineArrayFromSlice(arguments)))
}

/*
Create and execute a query directly.
*/
func (self Instance) ExecuteQuery(query string, arguments []any) SQLiteQueryResult.Instance { //gd:SQLiteDatabase.execute_query
	return SQLiteQueryResult.Instance(Advanced(self).ExecuteQuery(String.New(query), gd.EngineArrayFromSlice(arguments)))
}

/*
Returns the columns of a table.
*/
func (self Instance) GetColumns(table_name string) []SQLiteColumnSchema.Instance { //gd:SQLiteDatabase.get_columns
	return []SQLiteColumnSchema.Instance(gd.ArrayAs[[]SQLiteColumnSchema.Instance](gd.InternalArray(Advanced(self).GetColumns(String.New(table_name)))))
}

/*
Inserts a row into a table.
*/
func (self Instance) InsertRow(table_name string, value map[any]any) SQLiteQuery.Instance { //gd:SQLiteDatabase.insert_row
	return SQLiteQuery.Instance(Advanced(self).InsertRow(String.New(table_name), gd.DictionaryFromMap(value)))
}

/*
Inserts multiple rows into a table.
*/
func (self Instance) InsertRows(table_name string, values []map[any]any) SQLiteQuery.Instance { //gd:SQLiteDatabase.insert_rows
	return SQLiteQuery.Instance(Advanced(self).InsertRows(String.New(table_name), gd.ArrayFromSlice[Array.Contains[Dictionary.Any]](values)))
}

/*
Deletes rows from a table.
*/
func (self Instance) DeleteRows(table_name string) SQLiteQuery.Instance { //gd:SQLiteDatabase.delete_rows
	return SQLiteQuery.Instance(Advanced(self).DeleteRows(String.New(table_name), String.New("")))
}

/*
Deletes rows from a table.
*/
func (self Expanded) DeleteRows(table_name string, condition string) SQLiteQuery.Instance { //gd:SQLiteDatabase.delete_rows
	return SQLiteQuery.Instance(Advanced(self).DeleteRows(String.New(table_name), String.New(condition)))
}

/*
Selects rows from a table.
*/
func (self Instance) SelectRows(table_name string) SQLiteQuery.Instance { //gd:SQLiteDatabase.select_rows
	return SQLiteQuery.Instance(Advanced(self).SelectRows(String.New(table_name), String.New("")))
}

/*
Selects rows from a table.
*/
func (self Expanded) SelectRows(table_name string, condition string) SQLiteQuery.Instance { //gd:SQLiteDatabase.select_rows
	return SQLiteQuery.Instance(Advanced(self).SelectRows(String.New(table_name), String.New(condition)))
}

/*
Sets the data of the database.
*/
func (self Instance) SetData(data []byte) { //gd:SQLiteDatabase.set_data
	Advanced(self).SetData(Packed.Bytes(Packed.New(data...)))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.SQLiteDatabase

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("SQLiteDatabase"))
	casted := Instance{*(*gdclass.SQLiteDatabase)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) Tables() map[any]any {
	return map[any]any(gd.DictionaryAs[map[any]any](class(self).GetTables()))
}

/*
Returns the underlying [SQLite] object.
*/
//go:nosplit
func (self class) GetSqlite() [1]gdclass.SQLiteAccess { //gd:SQLiteDatabase.get_sqlite
	var frame = callframe.New()
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteDatabase.Bind_get_sqlite, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.SQLiteAccess{gd.PointerWithOwnershipTransferredToGo[gdclass.SQLiteAccess](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Creates a new table.
*/
//go:nosplit
func (self class) CreateTable(table_name String.Readable, columns Array.Contains[[1]gdclass.SQLiteColumnSchema]) [1]gdclass.SQLiteQuery { //gd:SQLiteDatabase.create_table
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(table_name)))
	callframe.Arg(frame, pointers.Get(gd.InternalArray(columns)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteDatabase.Bind_create_table, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.SQLiteQuery{gd.PointerWithOwnershipTransferredToGo[gdclass.SQLiteQuery](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Drops a table.
*/
//go:nosplit
func (self class) DropTable(table_name String.Readable) [1]gdclass.SQLiteQuery { //gd:SQLiteDatabase.drop_table
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(table_name)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteDatabase.Bind_drop_table, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.SQLiteQuery{gd.PointerWithOwnershipTransferredToGo[gdclass.SQLiteQuery](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Creates a new query object.
*/
//go:nosplit
func (self class) CreateQuery(query String.Readable, arguments Array.Any) [1]gdclass.SQLiteQuery { //gd:SQLiteDatabase.create_query
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(query)))
	callframe.Arg(frame, pointers.Get(gd.InternalArray(arguments)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteDatabase.Bind_create_query, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.SQLiteQuery{gd.PointerWithOwnershipTransferredToGo[gdclass.SQLiteQuery](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Create and execute a query directly.
*/
//go:nosplit
func (self class) ExecuteQuery(query String.Readable, arguments Array.Any) [1]gdclass.SQLiteQueryResult { //gd:SQLiteDatabase.execute_query
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(query)))
	callframe.Arg(frame, pointers.Get(gd.InternalArray(arguments)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteDatabase.Bind_execute_query, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.SQLiteQueryResult{gd.PointerWithOwnershipTransferredToGo[gdclass.SQLiteQueryResult](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Returns the columns of a table.
*/
//go:nosplit
func (self class) GetColumns(table_name String.Readable) Array.Contains[[1]gdclass.SQLiteColumnSchema] { //gd:SQLiteDatabase.get_columns
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(table_name)))
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteDatabase.Bind_get_columns, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Array.Through(gd.ArrayProxy[[1]gdclass.SQLiteColumnSchema]{}, pointers.Pack(pointers.New[gd.Array](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Inserts a row into a table.
*/
//go:nosplit
func (self class) InsertRow(table_name String.Readable, value Dictionary.Any) [1]gdclass.SQLiteQuery { //gd:SQLiteDatabase.insert_row
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(table_name)))
	callframe.Arg(frame, pointers.Get(gd.InternalDictionary(value)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteDatabase.Bind_insert_row, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.SQLiteQuery{gd.PointerWithOwnershipTransferredToGo[gdclass.SQLiteQuery](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Inserts multiple rows into a table.
*/
//go:nosplit
func (self class) InsertRows(table_name String.Readable, values Array.Contains[Dictionary.Any]) [1]gdclass.SQLiteQuery { //gd:SQLiteDatabase.insert_rows
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(table_name)))
	callframe.Arg(frame, pointers.Get(gd.InternalArray(values)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteDatabase.Bind_insert_rows, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.SQLiteQuery{gd.PointerWithOwnershipTransferredToGo[gdclass.SQLiteQuery](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Deletes rows from a table.
*/
//go:nosplit
func (self class) DeleteRows(table_name String.Readable, condition String.Readable) [1]gdclass.SQLiteQuery { //gd:SQLiteDatabase.delete_rows
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(table_name)))
	callframe.Arg(frame, pointers.Get(gd.InternalString(condition)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteDatabase.Bind_delete_rows, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.SQLiteQuery{gd.PointerWithOwnershipTransferredToGo[gdclass.SQLiteQuery](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Selects rows from a table.
*/
//go:nosplit
func (self class) SelectRows(table_name String.Readable, condition String.Readable) [1]gdclass.SQLiteQuery { //gd:SQLiteDatabase.select_rows
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(table_name)))
	callframe.Arg(frame, pointers.Get(gd.InternalString(condition)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteDatabase.Bind_select_rows, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.SQLiteQuery{gd.PointerWithOwnershipTransferredToGo[gdclass.SQLiteQuery](r_ret.Get())}
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetTables() Dictionary.Any { //gd:SQLiteDatabase.get_tables
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteDatabase.Bind_get_tables, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Sets the data of the database.
*/
//go:nosplit
func (self class) SetData(data Packed.Bytes) { //gd:SQLiteDatabase.set_data
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](data))))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.SQLiteDatabase.Bind_set_data, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}
func (self class) AsSQLiteDatabase() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsSQLiteDatabase() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsSQLiteDatabase() Instance { return self.Super().AsSQLiteDatabase() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("SQLiteDatabase", func(ptr gd.Object) any {
		return [1]gdclass.SQLiteDatabase{*(*gdclass.SQLiteDatabase)(unsafe.Pointer(&ptr))}
	})
}
