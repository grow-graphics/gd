// Code generated by the generate package DO NOT EDIT

// Package SpinBox provides methods for working with SpinBox object instances.
package SpinBox

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Control"
import "graphics.gd/classdb/GUI"
import "graphics.gd/classdb/LineEdit"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Range"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[SpinBox] is a numerical input text field. It allows entering integers and floating-point numbers.
[b]Example:[/b] Create a [SpinBox], disable its context menu and set its text alignment to right.
[codeblocks]
[gdscript]
var spin_box = SpinBox.new()
add_child(spin_box)
var line_edit = spin_box.get_line_edit()
line_edit.context_menu_enabled = false
spin_box.horizontal_alignment = LineEdit.HORIZONTAL_ALIGNMENT_RIGHT
[/gdscript]
[csharp]
var spinBox = new SpinBox();
AddChild(spinBox);
var lineEdit = spinBox.GetLineEdit();
lineEdit.ContextMenuEnabled = false;
spinBox.AlignHorizontal = LineEdit.HorizontalAlignEnum.Right;
[/csharp]
[/codeblocks]
See [Range] class for more options over the [SpinBox].
[b]Note:[/b] With the [SpinBox]'s context menu disabled, you can right-click the bottom half of the spinbox to set the value to its minimum, while right-clicking the top half sets the value to its maximum.
[b]Note:[/b] [SpinBox] relies on an underlying [LineEdit] node. To theme a [SpinBox]'s background, add theme items for [LineEdit] and customize them. The [LineEdit] has the [code]SpinBoxInnerLineEdit[/code] theme variation, so that you can give it a distinct appearance from regular [LineEdit]s.
[b]Note:[/b] If you want to implement drag and drop for the underlying [LineEdit], you can use [method Control.set_drag_forwarding] on the node returned by [method get_line_edit].
*/
type Instance [1]gdclass.SpinBox

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_horizontal_alignment   gdextension.MethodForClass `hash:"2312603777"`
	get_horizontal_alignment   gdextension.MethodForClass `hash:"341400642"`
	set_suffix                 gdextension.MethodForClass `hash:"83702148"`
	get_suffix                 gdextension.MethodForClass `hash:"201670096"`
	set_prefix                 gdextension.MethodForClass `hash:"83702148"`
	get_prefix                 gdextension.MethodForClass `hash:"201670096"`
	set_editable               gdextension.MethodForClass `hash:"2586408642"`
	set_custom_arrow_step      gdextension.MethodForClass `hash:"373806689"`
	get_custom_arrow_step      gdextension.MethodForClass `hash:"1740695150"`
	is_editable                gdextension.MethodForClass `hash:"36873697"`
	set_update_on_text_changed gdextension.MethodForClass `hash:"2586408642"`
	get_update_on_text_changed gdextension.MethodForClass `hash:"36873697"`
	set_select_all_on_focus    gdextension.MethodForClass `hash:"2586408642"`
	is_select_all_on_focus     gdextension.MethodForClass `hash:"36873697"`
	apply                      gdextension.MethodForClass `hash:"3218959716"`
	get_line_edit              gdextension.MethodForClass `hash:"4071694264"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("SpinBox")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsSpinBox() Instance
}

/*
Applies the current value of this [SpinBox].
*/
func (self Instance) Apply() { //gd:SpinBox.apply
	Advanced(self).Apply()
}

/*
Returns the [LineEdit] instance from this [SpinBox]. You can use it to access properties and methods of [LineEdit].
[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their [member CanvasItem.visible] property.
*/
func (self Instance) GetLineEdit() LineEdit.Instance { //gd:SpinBox.get_line_edit
	return LineEdit.Instance(Advanced(self).GetLineEdit())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.SpinBox

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.SpinBox)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.SpinBox)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.SpinBox)(unsafe.Pointer(&object))}
	object[0].Notification(0, false)
	return casted
}

func (self Instance) Alignment() GUI.HorizontalAlignment {
	return GUI.HorizontalAlignment(class(self).GetHorizontalAlignment())
}

func (self Instance) SetAlignment(value GUI.HorizontalAlignment) {
	class(self).SetHorizontalAlignment(value)
}

func (self Instance) Editable() bool {
	return bool(class(self).IsEditable())
}

func (self Instance) SetEditable(value bool) {
	class(self).SetEditable(value)
}

func (self Instance) UpdateOnTextChanged() bool {
	return bool(class(self).GetUpdateOnTextChanged())
}

func (self Instance) SetUpdateOnTextChanged(value bool) {
	class(self).SetUpdateOnTextChanged(value)
}

func (self Instance) Prefix() string {
	return string(class(self).GetPrefix().String())
}

func (self Instance) SetPrefix(value string) {
	class(self).SetPrefix(String.New(value))
}

func (self Instance) Suffix() string {
	return string(class(self).GetSuffix().String())
}

func (self Instance) SetSuffix(value string) {
	class(self).SetSuffix(String.New(value))
}

func (self Instance) CustomArrowStep() Float.X {
	return Float.X(Float.X(class(self).GetCustomArrowStep()))
}

func (self Instance) SetCustomArrowStep(value Float.X) {
	class(self).SetCustomArrowStep(float64(value))
}

func (self Instance) SelectAllOnFocus() bool {
	return bool(class(self).IsSelectAllOnFocus())
}

func (self Instance) SetSelectAllOnFocus(value bool) {
	class(self).SetSelectAllOnFocus(value)
}

//go:nosplit
func (self class) SetHorizontalAlignment(alignment GUI.HorizontalAlignment) { //gd:SpinBox.set_horizontal_alignment
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_horizontal_alignment, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ alignment GUI.HorizontalAlignment }{alignment}))
}

//go:nosplit
func (self class) GetHorizontalAlignment() GUI.HorizontalAlignment { //gd:SpinBox.get_horizontal_alignment
	var r_ret = gdextension.Call[GUI.HorizontalAlignment](gd.ObjectChecked(self.AsObject()), methods.get_horizontal_alignment, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSuffix(suffix String.Readable) { //gd:SpinBox.set_suffix
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_suffix, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ suffix gdextension.String }{pointers.Get(gd.InternalString(suffix))}))
}

//go:nosplit
func (self class) GetSuffix() String.Readable { //gd:SpinBox.get_suffix
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_suffix, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetPrefix(prefix String.Readable) { //gd:SpinBox.set_prefix
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_prefix, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ prefix gdextension.String }{pointers.Get(gd.InternalString(prefix))}))
}

//go:nosplit
func (self class) GetPrefix() String.Readable { //gd:SpinBox.get_prefix
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_prefix, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetEditable(enabled bool) { //gd:SpinBox.set_editable
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_editable, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) SetCustomArrowStep(arrow_step float64) { //gd:SpinBox.set_custom_arrow_step
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_custom_arrow_step, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ arrow_step float64 }{arrow_step}))
}

//go:nosplit
func (self class) GetCustomArrowStep() float64 { //gd:SpinBox.get_custom_arrow_step
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_custom_arrow_step, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) IsEditable() bool { //gd:SpinBox.is_editable
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_editable, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetUpdateOnTextChanged(enabled bool) { //gd:SpinBox.set_update_on_text_changed
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_update_on_text_changed, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) GetUpdateOnTextChanged() bool { //gd:SpinBox.get_update_on_text_changed
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_update_on_text_changed, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSelectAllOnFocus(enabled bool) { //gd:SpinBox.set_select_all_on_focus
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_select_all_on_focus, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enabled bool }{enabled}))
}

//go:nosplit
func (self class) IsSelectAllOnFocus() bool { //gd:SpinBox.is_select_all_on_focus
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_select_all_on_focus, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Applies the current value of this [SpinBox].
*/
//go:nosplit
func (self class) Apply() { //gd:SpinBox.apply
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.apply, 0, unsafe.Pointer(&struct{}{}))
}

/*
Returns the [LineEdit] instance from this [SpinBox]. You can use it to access properties and methods of [LineEdit].
[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their [member CanvasItem.visible] property.
*/
//go:nosplit
func (self class) GetLineEdit() [1]gdclass.LineEdit { //gd:SpinBox.get_line_edit
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_line_edit, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.LineEdit{gd.PointerLifetimeBoundTo[gdclass.LineEdit](self.AsObject(), r_ret)}
	return ret
}
func (self class) AsSpinBox() Advanced                 { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsSpinBox() Instance              { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsSpinBox() Instance         { return self.Super().AsSpinBox() }
func (self class) AsRange() Range.Advanced             { return *((*Range.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsRange() Range.Instance     { return self.Super().AsRange() }
func (self Instance) AsRange() Range.Instance          { return *((*Range.Instance)(unsafe.Pointer(&self))) }
func (self class) AsControl() Control.Advanced         { return *((*Control.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsControl() Control.Instance { return self.Super().AsControl() }
func (self Instance) AsControl() Control.Instance {
	return *((*Control.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return *((*CanvasItem.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return *((*CanvasItem.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Range.Advanced(self.AsRange()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Range.Instance(self.AsRange()), name)
	}
}
func init() {
	gdclass.Register("SpinBox", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
