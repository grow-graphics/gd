// Code generated by the generate package DO NOT EDIT

// Package MeshConvexDecompositionSettings provides methods for working with MeshConvexDecompositionSettings object instances.
package MeshConvexDecompositionSettings

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Parameters to be used with a [Mesh] convex decomposition operation.
*/
type Instance [1]gdclass.MeshConvexDecompositionSettings

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_max_concavity                    gdextension.MethodForClass `hash:"373806689"`
	get_max_concavity                    gdextension.MethodForClass `hash:"1740695150"`
	set_symmetry_planes_clipping_bias    gdextension.MethodForClass `hash:"373806689"`
	get_symmetry_planes_clipping_bias    gdextension.MethodForClass `hash:"1740695150"`
	set_revolution_axes_clipping_bias    gdextension.MethodForClass `hash:"373806689"`
	get_revolution_axes_clipping_bias    gdextension.MethodForClass `hash:"1740695150"`
	set_min_volume_per_convex_hull       gdextension.MethodForClass `hash:"373806689"`
	get_min_volume_per_convex_hull       gdextension.MethodForClass `hash:"1740695150"`
	set_resolution                       gdextension.MethodForClass `hash:"1286410249"`
	get_resolution                       gdextension.MethodForClass `hash:"3905245786"`
	set_max_num_vertices_per_convex_hull gdextension.MethodForClass `hash:"1286410249"`
	get_max_num_vertices_per_convex_hull gdextension.MethodForClass `hash:"3905245786"`
	set_plane_downsampling               gdextension.MethodForClass `hash:"1286410249"`
	get_plane_downsampling               gdextension.MethodForClass `hash:"3905245786"`
	set_convex_hull_downsampling         gdextension.MethodForClass `hash:"1286410249"`
	get_convex_hull_downsampling         gdextension.MethodForClass `hash:"3905245786"`
	set_normalize_mesh                   gdextension.MethodForClass `hash:"2586408642"`
	get_normalize_mesh                   gdextension.MethodForClass `hash:"36873697"`
	set_mode                             gdextension.MethodForClass `hash:"1668072869"`
	get_mode                             gdextension.MethodForClass `hash:"23479454"`
	set_convex_hull_approximation        gdextension.MethodForClass `hash:"2586408642"`
	get_convex_hull_approximation        gdextension.MethodForClass `hash:"36873697"`
	set_max_convex_hulls                 gdextension.MethodForClass `hash:"1286410249"`
	get_max_convex_hulls                 gdextension.MethodForClass `hash:"3905245786"`
	set_project_hull_vertices            gdextension.MethodForClass `hash:"2586408642"`
	get_project_hull_vertices            gdextension.MethodForClass `hash:"36873697"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("MeshConvexDecompositionSettings")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsMeshConvexDecompositionSettings() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.MeshConvexDecompositionSettings

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.MeshConvexDecompositionSettings](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.MeshConvexDecompositionSettings](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.MeshConvexDecompositionSettings{pointers.Add[gdclass.MeshConvexDecompositionSettings]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.MeshConvexDecompositionSettings{pointers.New[gdclass.MeshConvexDecompositionSettings]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) MaxConcavity() Float.X {
	return Float.X(Float.X(class(self).GetMaxConcavity()))
}

func (self Instance) SetMaxConcavity(value Float.X) {
	class(self).SetMaxConcavity(float64(value))
}

func (self Instance) SymmetryPlanesClippingBias() Float.X {
	return Float.X(Float.X(class(self).GetSymmetryPlanesClippingBias()))
}

func (self Instance) SetSymmetryPlanesClippingBias(value Float.X) {
	class(self).SetSymmetryPlanesClippingBias(float64(value))
}

func (self Instance) RevolutionAxesClippingBias() Float.X {
	return Float.X(Float.X(class(self).GetRevolutionAxesClippingBias()))
}

func (self Instance) SetRevolutionAxesClippingBias(value Float.X) {
	class(self).SetRevolutionAxesClippingBias(float64(value))
}

func (self Instance) MinVolumePerConvexHull() Float.X {
	return Float.X(Float.X(class(self).GetMinVolumePerConvexHull()))
}

func (self Instance) SetMinVolumePerConvexHull(value Float.X) {
	class(self).SetMinVolumePerConvexHull(float64(value))
}

func (self Instance) Resolution() int {
	return int(int(class(self).GetResolution()))
}

func (self Instance) SetResolution(value int) {
	class(self).SetResolution(int64(value))
}

func (self Instance) MaxNumVerticesPerConvexHull() int {
	return int(int(class(self).GetMaxNumVerticesPerConvexHull()))
}

func (self Instance) SetMaxNumVerticesPerConvexHull(value int) {
	class(self).SetMaxNumVerticesPerConvexHull(int64(value))
}

func (self Instance) PlaneDownsampling() int {
	return int(int(class(self).GetPlaneDownsampling()))
}

func (self Instance) SetPlaneDownsampling(value int) {
	class(self).SetPlaneDownsampling(int64(value))
}

func (self Instance) ConvexHullDownsampling() int {
	return int(int(class(self).GetConvexHullDownsampling()))
}

func (self Instance) SetConvexHullDownsampling(value int) {
	class(self).SetConvexHullDownsampling(int64(value))
}

func (self Instance) NormalizeMesh() bool {
	return bool(class(self).GetNormalizeMesh())
}

func (self Instance) SetNormalizeMesh(value bool) {
	class(self).SetNormalizeMesh(value)
}

func (self Instance) Mode() Mode {
	return Mode(class(self).GetMode())
}

func (self Instance) SetMode(value Mode) {
	class(self).SetMode(value)
}

func (self Instance) ConvexHullApproximation() bool {
	return bool(class(self).GetConvexHullApproximation())
}

func (self Instance) SetConvexHullApproximation(value bool) {
	class(self).SetConvexHullApproximation(value)
}

func (self Instance) MaxConvexHulls() int {
	return int(int(class(self).GetMaxConvexHulls()))
}

func (self Instance) SetMaxConvexHulls(value int) {
	class(self).SetMaxConvexHulls(int64(value))
}

func (self Instance) ProjectHullVertices() bool {
	return bool(class(self).GetProjectHullVertices())
}

func (self Instance) SetProjectHullVertices(value bool) {
	class(self).SetProjectHullVertices(value)
}

//go:nosplit
func (self class) SetMaxConcavity(max_concavity float64) { //gd:MeshConvexDecompositionSettings.set_max_concavity
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_max_concavity, 0|(gdextension.SizeFloat<<4), &struct{ max_concavity float64 }{max_concavity})
}

//go:nosplit
func (self class) GetMaxConcavity() float64 { //gd:MeshConvexDecompositionSettings.get_max_concavity
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_max_concavity, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSymmetryPlanesClippingBias(symmetry_planes_clipping_bias float64) { //gd:MeshConvexDecompositionSettings.set_symmetry_planes_clipping_bias
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_symmetry_planes_clipping_bias, 0|(gdextension.SizeFloat<<4), &struct{ symmetry_planes_clipping_bias float64 }{symmetry_planes_clipping_bias})
}

//go:nosplit
func (self class) GetSymmetryPlanesClippingBias() float64 { //gd:MeshConvexDecompositionSettings.get_symmetry_planes_clipping_bias
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_symmetry_planes_clipping_bias, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRevolutionAxesClippingBias(revolution_axes_clipping_bias float64) { //gd:MeshConvexDecompositionSettings.set_revolution_axes_clipping_bias
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_revolution_axes_clipping_bias, 0|(gdextension.SizeFloat<<4), &struct{ revolution_axes_clipping_bias float64 }{revolution_axes_clipping_bias})
}

//go:nosplit
func (self class) GetRevolutionAxesClippingBias() float64 { //gd:MeshConvexDecompositionSettings.get_revolution_axes_clipping_bias
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_revolution_axes_clipping_bias, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMinVolumePerConvexHull(min_volume_per_convex_hull float64) { //gd:MeshConvexDecompositionSettings.set_min_volume_per_convex_hull
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_min_volume_per_convex_hull, 0|(gdextension.SizeFloat<<4), &struct{ min_volume_per_convex_hull float64 }{min_volume_per_convex_hull})
}

//go:nosplit
func (self class) GetMinVolumePerConvexHull() float64 { //gd:MeshConvexDecompositionSettings.get_min_volume_per_convex_hull
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_min_volume_per_convex_hull, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetResolution(min_volume_per_convex_hull int64) { //gd:MeshConvexDecompositionSettings.set_resolution
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_resolution, 0|(gdextension.SizeInt<<4), &struct{ min_volume_per_convex_hull int64 }{min_volume_per_convex_hull})
}

//go:nosplit
func (self class) GetResolution() int64 { //gd:MeshConvexDecompositionSettings.get_resolution
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_resolution, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMaxNumVerticesPerConvexHull(max_num_vertices_per_convex_hull int64) { //gd:MeshConvexDecompositionSettings.set_max_num_vertices_per_convex_hull
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_max_num_vertices_per_convex_hull, 0|(gdextension.SizeInt<<4), &struct{ max_num_vertices_per_convex_hull int64 }{max_num_vertices_per_convex_hull})
}

//go:nosplit
func (self class) GetMaxNumVerticesPerConvexHull() int64 { //gd:MeshConvexDecompositionSettings.get_max_num_vertices_per_convex_hull
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_max_num_vertices_per_convex_hull, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPlaneDownsampling(plane_downsampling int64) { //gd:MeshConvexDecompositionSettings.set_plane_downsampling
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_plane_downsampling, 0|(gdextension.SizeInt<<4), &struct{ plane_downsampling int64 }{plane_downsampling})
}

//go:nosplit
func (self class) GetPlaneDownsampling() int64 { //gd:MeshConvexDecompositionSettings.get_plane_downsampling
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_plane_downsampling, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetConvexHullDownsampling(convex_hull_downsampling int64) { //gd:MeshConvexDecompositionSettings.set_convex_hull_downsampling
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_convex_hull_downsampling, 0|(gdextension.SizeInt<<4), &struct{ convex_hull_downsampling int64 }{convex_hull_downsampling})
}

//go:nosplit
func (self class) GetConvexHullDownsampling() int64 { //gd:MeshConvexDecompositionSettings.get_convex_hull_downsampling
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_convex_hull_downsampling, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetNormalizeMesh(normalize_mesh bool) { //gd:MeshConvexDecompositionSettings.set_normalize_mesh
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_normalize_mesh, 0|(gdextension.SizeBool<<4), &struct{ normalize_mesh bool }{normalize_mesh})
}

//go:nosplit
func (self class) GetNormalizeMesh() bool { //gd:MeshConvexDecompositionSettings.get_normalize_mesh
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_normalize_mesh, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMode(mode Mode) { //gd:MeshConvexDecompositionSettings.set_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_mode, 0|(gdextension.SizeInt<<4), &struct{ mode Mode }{mode})
}

//go:nosplit
func (self class) GetMode() Mode { //gd:MeshConvexDecompositionSettings.get_mode
	var r_ret = gdextension.Call[Mode](gd.ObjectChecked(self.AsObject()), methods.get_mode, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetConvexHullApproximation(convex_hull_approximation bool) { //gd:MeshConvexDecompositionSettings.set_convex_hull_approximation
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_convex_hull_approximation, 0|(gdextension.SizeBool<<4), &struct{ convex_hull_approximation bool }{convex_hull_approximation})
}

//go:nosplit
func (self class) GetConvexHullApproximation() bool { //gd:MeshConvexDecompositionSettings.get_convex_hull_approximation
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_convex_hull_approximation, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMaxConvexHulls(max_convex_hulls int64) { //gd:MeshConvexDecompositionSettings.set_max_convex_hulls
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_max_convex_hulls, 0|(gdextension.SizeInt<<4), &struct{ max_convex_hulls int64 }{max_convex_hulls})
}

//go:nosplit
func (self class) GetMaxConvexHulls() int64 { //gd:MeshConvexDecompositionSettings.get_max_convex_hulls
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_max_convex_hulls, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetProjectHullVertices(project_hull_vertices bool) { //gd:MeshConvexDecompositionSettings.set_project_hull_vertices
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_project_hull_vertices, 0|(gdextension.SizeBool<<4), &struct{ project_hull_vertices bool }{project_hull_vertices})
}

//go:nosplit
func (self class) GetProjectHullVertices() bool { //gd:MeshConvexDecompositionSettings.get_project_hull_vertices
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_project_hull_vertices, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsMeshConvexDecompositionSettings() Advanced {
	return Advanced{pointers.AsA[gdclass.MeshConvexDecompositionSettings](self[0])}
}
func (self Instance) AsMeshConvexDecompositionSettings() Instance {
	return Instance{pointers.AsA[gdclass.MeshConvexDecompositionSettings](self[0])}
}
func (self *Extension[T]) AsMeshConvexDecompositionSettings() Instance {
	return self.Super().AsMeshConvexDecompositionSettings()
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("MeshConvexDecompositionSettings", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.MeshConvexDecompositionSettings](ptr)} })
}

type Mode int //gd:MeshConvexDecompositionSettings.Mode

const (
	/*Constant for voxel-based approximate convex decomposition.*/
	ConvexDecompositionModeVoxel Mode = 0
	/*Constant for tetrahedron-based approximate convex decomposition.*/
	ConvexDecompositionModeTetrahedron Mode = 1
)
