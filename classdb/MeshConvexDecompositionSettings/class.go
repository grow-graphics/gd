// Code generated by the generate package DO NOT EDIT

// Package MeshConvexDecompositionSettings provides methods for working with MeshConvexDecompositionSettings object instances.
package MeshConvexDecompositionSettings

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Parameters to be used with a [Mesh] convex decomposition operation.
*/
type Instance [1]gdclass.MeshConvexDecompositionSettings

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsMeshConvexDecompositionSettings() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.MeshConvexDecompositionSettings

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("MeshConvexDecompositionSettings"))
	casted := Instance{*(*gdclass.MeshConvexDecompositionSettings)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) MaxConcavity() Float.X {
	return Float.X(Float.X(class(self).GetMaxConcavity()))
}

func (self Instance) SetMaxConcavity(value Float.X) {
	class(self).SetMaxConcavity(float64(value))
}

func (self Instance) SymmetryPlanesClippingBias() Float.X {
	return Float.X(Float.X(class(self).GetSymmetryPlanesClippingBias()))
}

func (self Instance) SetSymmetryPlanesClippingBias(value Float.X) {
	class(self).SetSymmetryPlanesClippingBias(float64(value))
}

func (self Instance) RevolutionAxesClippingBias() Float.X {
	return Float.X(Float.X(class(self).GetRevolutionAxesClippingBias()))
}

func (self Instance) SetRevolutionAxesClippingBias(value Float.X) {
	class(self).SetRevolutionAxesClippingBias(float64(value))
}

func (self Instance) MinVolumePerConvexHull() Float.X {
	return Float.X(Float.X(class(self).GetMinVolumePerConvexHull()))
}

func (self Instance) SetMinVolumePerConvexHull(value Float.X) {
	class(self).SetMinVolumePerConvexHull(float64(value))
}

func (self Instance) Resolution() int {
	return int(int(class(self).GetResolution()))
}

func (self Instance) SetResolution(value int) {
	class(self).SetResolution(int64(value))
}

func (self Instance) MaxNumVerticesPerConvexHull() int {
	return int(int(class(self).GetMaxNumVerticesPerConvexHull()))
}

func (self Instance) SetMaxNumVerticesPerConvexHull(value int) {
	class(self).SetMaxNumVerticesPerConvexHull(int64(value))
}

func (self Instance) PlaneDownsampling() int {
	return int(int(class(self).GetPlaneDownsampling()))
}

func (self Instance) SetPlaneDownsampling(value int) {
	class(self).SetPlaneDownsampling(int64(value))
}

func (self Instance) ConvexHullDownsampling() int {
	return int(int(class(self).GetConvexHullDownsampling()))
}

func (self Instance) SetConvexHullDownsampling(value int) {
	class(self).SetConvexHullDownsampling(int64(value))
}

func (self Instance) NormalizeMesh() bool {
	return bool(class(self).GetNormalizeMesh())
}

func (self Instance) SetNormalizeMesh(value bool) {
	class(self).SetNormalizeMesh(value)
}

func (self Instance) Mode() Mode {
	return Mode(class(self).GetMode())
}

func (self Instance) SetMode(value Mode) {
	class(self).SetMode(value)
}

func (self Instance) ConvexHullApproximation() bool {
	return bool(class(self).GetConvexHullApproximation())
}

func (self Instance) SetConvexHullApproximation(value bool) {
	class(self).SetConvexHullApproximation(value)
}

func (self Instance) MaxConvexHulls() int {
	return int(int(class(self).GetMaxConvexHulls()))
}

func (self Instance) SetMaxConvexHulls(value int) {
	class(self).SetMaxConvexHulls(int64(value))
}

func (self Instance) ProjectHullVertices() bool {
	return bool(class(self).GetProjectHullVertices())
}

func (self Instance) SetProjectHullVertices(value bool) {
	class(self).SetProjectHullVertices(value)
}

//go:nosplit
func (self class) SetMaxConcavity(max_concavity float64) { //gd:MeshConvexDecompositionSettings.set_max_concavity
	var frame = callframe.New()
	callframe.Arg(frame, max_concavity)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_set_max_concavity, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetMaxConcavity() float64 { //gd:MeshConvexDecompositionSettings.get_max_concavity
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_get_max_concavity, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetSymmetryPlanesClippingBias(symmetry_planes_clipping_bias float64) { //gd:MeshConvexDecompositionSettings.set_symmetry_planes_clipping_bias
	var frame = callframe.New()
	callframe.Arg(frame, symmetry_planes_clipping_bias)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_set_symmetry_planes_clipping_bias, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetSymmetryPlanesClippingBias() float64 { //gd:MeshConvexDecompositionSettings.get_symmetry_planes_clipping_bias
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_get_symmetry_planes_clipping_bias, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetRevolutionAxesClippingBias(revolution_axes_clipping_bias float64) { //gd:MeshConvexDecompositionSettings.set_revolution_axes_clipping_bias
	var frame = callframe.New()
	callframe.Arg(frame, revolution_axes_clipping_bias)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_set_revolution_axes_clipping_bias, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetRevolutionAxesClippingBias() float64 { //gd:MeshConvexDecompositionSettings.get_revolution_axes_clipping_bias
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_get_revolution_axes_clipping_bias, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetMinVolumePerConvexHull(min_volume_per_convex_hull float64) { //gd:MeshConvexDecompositionSettings.set_min_volume_per_convex_hull
	var frame = callframe.New()
	callframe.Arg(frame, min_volume_per_convex_hull)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_set_min_volume_per_convex_hull, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetMinVolumePerConvexHull() float64 { //gd:MeshConvexDecompositionSettings.get_min_volume_per_convex_hull
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_get_min_volume_per_convex_hull, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetResolution(min_volume_per_convex_hull int64) { //gd:MeshConvexDecompositionSettings.set_resolution
	var frame = callframe.New()
	callframe.Arg(frame, min_volume_per_convex_hull)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_set_resolution, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetResolution() int64 { //gd:MeshConvexDecompositionSettings.get_resolution
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_get_resolution, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetMaxNumVerticesPerConvexHull(max_num_vertices_per_convex_hull int64) { //gd:MeshConvexDecompositionSettings.set_max_num_vertices_per_convex_hull
	var frame = callframe.New()
	callframe.Arg(frame, max_num_vertices_per_convex_hull)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_set_max_num_vertices_per_convex_hull, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetMaxNumVerticesPerConvexHull() int64 { //gd:MeshConvexDecompositionSettings.get_max_num_vertices_per_convex_hull
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_get_max_num_vertices_per_convex_hull, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetPlaneDownsampling(plane_downsampling int64) { //gd:MeshConvexDecompositionSettings.set_plane_downsampling
	var frame = callframe.New()
	callframe.Arg(frame, plane_downsampling)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_set_plane_downsampling, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetPlaneDownsampling() int64 { //gd:MeshConvexDecompositionSettings.get_plane_downsampling
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_get_plane_downsampling, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetConvexHullDownsampling(convex_hull_downsampling int64) { //gd:MeshConvexDecompositionSettings.set_convex_hull_downsampling
	var frame = callframe.New()
	callframe.Arg(frame, convex_hull_downsampling)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_set_convex_hull_downsampling, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetConvexHullDownsampling() int64 { //gd:MeshConvexDecompositionSettings.get_convex_hull_downsampling
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_get_convex_hull_downsampling, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetNormalizeMesh(normalize_mesh bool) { //gd:MeshConvexDecompositionSettings.set_normalize_mesh
	var frame = callframe.New()
	callframe.Arg(frame, normalize_mesh)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_set_normalize_mesh, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetNormalizeMesh() bool { //gd:MeshConvexDecompositionSettings.get_normalize_mesh
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_get_normalize_mesh, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetMode(mode Mode) { //gd:MeshConvexDecompositionSettings.set_mode
	var frame = callframe.New()
	callframe.Arg(frame, mode)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_set_mode, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetMode() Mode { //gd:MeshConvexDecompositionSettings.get_mode
	var frame = callframe.New()
	var r_ret = callframe.Ret[Mode](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_get_mode, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetConvexHullApproximation(convex_hull_approximation bool) { //gd:MeshConvexDecompositionSettings.set_convex_hull_approximation
	var frame = callframe.New()
	callframe.Arg(frame, convex_hull_approximation)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_set_convex_hull_approximation, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetConvexHullApproximation() bool { //gd:MeshConvexDecompositionSettings.get_convex_hull_approximation
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_get_convex_hull_approximation, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetMaxConvexHulls(max_convex_hulls int64) { //gd:MeshConvexDecompositionSettings.set_max_convex_hulls
	var frame = callframe.New()
	callframe.Arg(frame, max_convex_hulls)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_set_max_convex_hulls, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetMaxConvexHulls() int64 { //gd:MeshConvexDecompositionSettings.get_max_convex_hulls
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_get_max_convex_hulls, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetProjectHullVertices(project_hull_vertices bool) { //gd:MeshConvexDecompositionSettings.set_project_hull_vertices
	var frame = callframe.New()
	callframe.Arg(frame, project_hull_vertices)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_set_project_hull_vertices, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetProjectHullVertices() bool { //gd:MeshConvexDecompositionSettings.get_project_hull_vertices
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.MeshConvexDecompositionSettings.Bind_get_project_hull_vertices, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}
func (self class) AsMeshConvexDecompositionSettings() Advanced {
	return *((*Advanced)(unsafe.Pointer(&self)))
}
func (self Instance) AsMeshConvexDecompositionSettings() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsMeshConvexDecompositionSettings() Instance {
	return self.Super().AsMeshConvexDecompositionSettings()
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("MeshConvexDecompositionSettings", func(ptr gd.Object) any {
		return [1]gdclass.MeshConvexDecompositionSettings{*(*gdclass.MeshConvexDecompositionSettings)(unsafe.Pointer(&ptr))}
	})
}

type Mode int //gd:MeshConvexDecompositionSettings.Mode

const (
	/*Constant for voxel-based approximate convex decomposition.*/
	ConvexDecompositionModeVoxel Mode = 0
	/*Constant for tetrahedron-based approximate convex decomposition.*/
	ConvexDecompositionModeTetrahedron Mode = 1
)
