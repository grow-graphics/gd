// Code generated by the generate package DO NOT EDIT

// Package AudioEffectFilter provides methods for working with AudioEffectFilter object instances.
package AudioEffectFilter

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/AudioEffect"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Allows frequencies other than the [member cutoff_hz] to pass.
*/
type Instance [1]gdclass.AudioEffectFilter

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_cutoff    gdextension.MethodForClass `hash:"373806689"`
	get_cutoff    gdextension.MethodForClass `hash:"1740695150"`
	set_resonance gdextension.MethodForClass `hash:"373806689"`
	get_resonance gdextension.MethodForClass `hash:"1740695150"`
	set_gain      gdextension.MethodForClass `hash:"373806689"`
	get_gain      gdextension.MethodForClass `hash:"1740695150"`
	set_db        gdextension.MethodForClass `hash:"771740901"`
	get_db        gdextension.MethodForClass `hash:"3981721890"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("AudioEffectFilter")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAudioEffectFilter() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AudioEffectFilter

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AudioEffectFilter)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AudioEffectFilter)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.AudioEffectFilter)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].InitRef()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) CutoffHz() Float.X {
	return Float.X(Float.X(class(self).GetCutoff()))
}

func (self Instance) SetCutoffHz(value Float.X) {
	class(self).SetCutoff(float64(value))
}

func (self Instance) Resonance() Float.X {
	return Float.X(Float.X(class(self).GetResonance()))
}

func (self Instance) SetResonance(value Float.X) {
	class(self).SetResonance(float64(value))
}

func (self Instance) Gain() Float.X {
	return Float.X(Float.X(class(self).GetGain()))
}

func (self Instance) SetGain(value Float.X) {
	class(self).SetGain(float64(value))
}

func (self Instance) Db() FilterDB {
	return FilterDB(class(self).GetDb())
}

func (self Instance) SetDb(value FilterDB) {
	class(self).SetDb(value)
}

//go:nosplit
func (self class) SetCutoff(freq float64) { //gd:AudioEffectFilter.set_cutoff
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_cutoff, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ freq float64 }{freq}))
}

//go:nosplit
func (self class) GetCutoff() float64 { //gd:AudioEffectFilter.get_cutoff
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_cutoff, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetResonance(amount float64) { //gd:AudioEffectFilter.set_resonance
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_resonance, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetResonance() float64 { //gd:AudioEffectFilter.get_resonance
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_resonance, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGain(amount float64) { //gd:AudioEffectFilter.set_gain
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_gain, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ amount float64 }{amount}))
}

//go:nosplit
func (self class) GetGain() float64 { //gd:AudioEffectFilter.get_gain
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_gain, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDb(amount FilterDB) { //gd:AudioEffectFilter.set_db
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_db, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ amount FilterDB }{amount}))
}

//go:nosplit
func (self class) GetDb() FilterDB { //gd:AudioEffectFilter.get_db
	var r_ret = gdextension.Call[FilterDB](gd.ObjectChecked(self.AsObject()), methods.get_db, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsAudioEffectFilter() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsAudioEffectFilter() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsAudioEffectFilter() Instance { return self.Super().AsAudioEffectFilter() }
func (self class) AsAudioEffect() AudioEffect.Advanced {
	return *((*AudioEffect.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAudioEffect() AudioEffect.Instance { return self.Super().AsAudioEffect() }
func (self Instance) AsAudioEffect() AudioEffect.Instance {
	return *((*AudioEffect.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioEffect.Advanced(self.AsAudioEffect()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioEffect.Instance(self.AsAudioEffect()), name)
	}
}
func init() {
	gdclass.Register("AudioEffectFilter", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type FilterDB int //gd:AudioEffectFilter.FilterDB

const (
	/*Cutting off at 6dB per octave.*/
	Filter6db FilterDB = 0
	/*Cutting off at 12dB per octave.*/
	Filter12db FilterDB = 1
	/*Cutting off at 18dB per octave.*/
	Filter18db FilterDB = 2
	/*Cutting off at 24dB per octave.*/
	Filter24db FilterDB = 3
)
