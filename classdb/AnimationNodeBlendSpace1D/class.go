// Code generated by the generate package DO NOT EDIT

// Package AnimationNodeBlendSpace1D provides methods for working with AnimationNodeBlendSpace1D object instances.
package AnimationNodeBlendSpace1D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/AnimationNode"
import "graphics.gd/classdb/AnimationRootNode"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A resource used by [AnimationNodeBlendTree].
[AnimationNodeBlendSpace1D] represents a virtual axis on which any type of [AnimationRootNode]s can be added using [method add_blend_point]. Outputs the linear blend of the two [AnimationRootNode]s adjacent to the current value.
You can set the extents of the axis with [member min_space] and [member max_space].
*/
type Instance [1]gdclass.AnimationNodeBlendSpace1D

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	add_blend_point          gdextension.MethodForClass `hash:"285050433"`
	set_blend_point_position gdextension.MethodForClass `hash:"1602489585"`
	get_blend_point_position gdextension.MethodForClass `hash:"2339986948"`
	set_blend_point_node     gdextension.MethodForClass `hash:"4240341528"`
	get_blend_point_node     gdextension.MethodForClass `hash:"665599029"`
	remove_blend_point       gdextension.MethodForClass `hash:"1286410249"`
	get_blend_point_count    gdextension.MethodForClass `hash:"3905245786"`
	set_min_space            gdextension.MethodForClass `hash:"373806689"`
	get_min_space            gdextension.MethodForClass `hash:"1740695150"`
	set_max_space            gdextension.MethodForClass `hash:"373806689"`
	get_max_space            gdextension.MethodForClass `hash:"1740695150"`
	set_snap                 gdextension.MethodForClass `hash:"373806689"`
	get_snap                 gdextension.MethodForClass `hash:"1740695150"`
	set_value_label          gdextension.MethodForClass `hash:"83702148"`
	get_value_label          gdextension.MethodForClass `hash:"201670096"`
	set_blend_mode           gdextension.MethodForClass `hash:"2600869457"`
	get_blend_mode           gdextension.MethodForClass `hash:"1547667849"`
	set_use_sync             gdextension.MethodForClass `hash:"2586408642"`
	is_using_sync            gdextension.MethodForClass `hash:"36873697"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("AnimationNodeBlendSpace1D")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.AnimationNodeBlendSpace1D

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAnimationNodeBlendSpace1D() Instance
}

/*
Adds a new point that represents a [param node] on the virtual axis at a given position set by [param pos]. You can insert it at a specific index using the [param at_index] argument. If you use the default value for [param at_index], the point is inserted at the end of the blend points array.
*/
func (self Instance) AddBlendPoint(node AnimationRootNode.Instance, pos Float.X) { //gd:AnimationNodeBlendSpace1D.add_blend_point
	Advanced(self).AddBlendPoint(node, float64(pos), int64(-1))
}

/*
Adds a new point that represents a [param node] on the virtual axis at a given position set by [param pos]. You can insert it at a specific index using the [param at_index] argument. If you use the default value for [param at_index], the point is inserted at the end of the blend points array.
*/
func (self Expanded) AddBlendPoint(node AnimationRootNode.Instance, pos Float.X, at_index int) { //gd:AnimationNodeBlendSpace1D.add_blend_point
	Advanced(self).AddBlendPoint(node, float64(pos), int64(at_index))
}

/*
Updates the position of the point at index [param point] on the blend axis.
*/
func (self Instance) SetBlendPointPosition(point int, pos Float.X) { //gd:AnimationNodeBlendSpace1D.set_blend_point_position
	Advanced(self).SetBlendPointPosition(int64(point), float64(pos))
}

/*
Returns the position of the point at index [param point].
*/
func (self Instance) GetBlendPointPosition(point int) Float.X { //gd:AnimationNodeBlendSpace1D.get_blend_point_position
	return Float.X(Float.X(Advanced(self).GetBlendPointPosition(int64(point))))
}

/*
Changes the [AnimationNode] referenced by the point at index [param point].
*/
func (self Instance) SetBlendPointNode(point int, node AnimationRootNode.Instance) { //gd:AnimationNodeBlendSpace1D.set_blend_point_node
	Advanced(self).SetBlendPointNode(int64(point), node)
}

/*
Returns the [AnimationNode] referenced by the point at index [param point].
*/
func (self Instance) GetBlendPointNode(point int) AnimationRootNode.Instance { //gd:AnimationNodeBlendSpace1D.get_blend_point_node
	return AnimationRootNode.Instance(Advanced(self).GetBlendPointNode(int64(point)))
}

/*
Removes the point at index [param point] from the blend axis.
*/
func (self Instance) RemoveBlendPoint(point int) { //gd:AnimationNodeBlendSpace1D.remove_blend_point
	Advanced(self).RemoveBlendPoint(int64(point))
}

/*
Returns the number of points on the blend axis.
*/
func (self Instance) GetBlendPointCount() int { //gd:AnimationNodeBlendSpace1D.get_blend_point_count
	return int(int(Advanced(self).GetBlendPointCount()))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AnimationNodeBlendSpace1D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AnimationNodeBlendSpace1D)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.AnimationNodeBlendSpace1D)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.AnimationNodeBlendSpace1D)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) MinSpace() Float.X {
	return Float.X(Float.X(class(self).GetMinSpace()))
}

func (self Instance) SetMinSpace(value Float.X) {
	class(self).SetMinSpace(float64(value))
}

func (self Instance) MaxSpace() Float.X {
	return Float.X(Float.X(class(self).GetMaxSpace()))
}

func (self Instance) SetMaxSpace(value Float.X) {
	class(self).SetMaxSpace(float64(value))
}

func (self Instance) Snap() Float.X {
	return Float.X(Float.X(class(self).GetSnap()))
}

func (self Instance) SetSnap(value Float.X) {
	class(self).SetSnap(float64(value))
}

func (self Instance) ValueLabel() string {
	return string(class(self).GetValueLabel().String())
}

func (self Instance) SetValueLabel(value string) {
	class(self).SetValueLabel(String.New(value))
}

func (self Instance) BlendMode() BlendMode {
	return BlendMode(class(self).GetBlendMode())
}

func (self Instance) SetBlendMode(value BlendMode) {
	class(self).SetBlendMode(value)
}

func (self Instance) Sync() bool {
	return bool(class(self).IsUsingSync())
}

func (self Instance) SetSync(value bool) {
	class(self).SetUseSync(value)
}

/*
Adds a new point that represents a [param node] on the virtual axis at a given position set by [param pos]. You can insert it at a specific index using the [param at_index] argument. If you use the default value for [param at_index], the point is inserted at the end of the blend points array.
*/
//go:nosplit
func (self class) AddBlendPoint(node [1]gdclass.AnimationRootNode, pos float64, at_index int64) { //gd:AnimationNodeBlendSpace1D.add_blend_point
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.add_blend_point, 0|(gdextension.SizeObject<<4)|(gdextension.SizeFloat<<8)|(gdextension.SizeInt<<12), unsafe.Pointer(&struct {
		node     gdextension.Object
		pos      float64
		at_index int64
	}{gdextension.Object(gd.ObjectChecked(node[0].AsObject())), pos, at_index}))
}

/*
Updates the position of the point at index [param point] on the blend axis.
*/
//go:nosplit
func (self class) SetBlendPointPosition(point int64, pos float64) { //gd:AnimationNodeBlendSpace1D.set_blend_point_position
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_blend_point_position, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		point int64
		pos   float64
	}{point, pos}))
}

/*
Returns the position of the point at index [param point].
*/
//go:nosplit
func (self class) GetBlendPointPosition(point int64) float64 { //gd:AnimationNodeBlendSpace1D.get_blend_point_position
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_blend_point_position, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ point int64 }{point}))
	var ret = r_ret
	return ret
}

/*
Changes the [AnimationNode] referenced by the point at index [param point].
*/
//go:nosplit
func (self class) SetBlendPointNode(point int64, node [1]gdclass.AnimationRootNode) { //gd:AnimationNodeBlendSpace1D.set_blend_point_node
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_blend_point_node, 0|(gdextension.SizeInt<<4)|(gdextension.SizeObject<<8), unsafe.Pointer(&struct {
		point int64
		node  gdextension.Object
	}{point, gdextension.Object(gd.ObjectChecked(node[0].AsObject()))}))
}

/*
Returns the [AnimationNode] referenced by the point at index [param point].
*/
//go:nosplit
func (self class) GetBlendPointNode(point int64) [1]gdclass.AnimationRootNode { //gd:AnimationNodeBlendSpace1D.get_blend_point_node
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_blend_point_node, gdextension.SizeObject|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ point int64 }{point}))
	var ret = [1]gdclass.AnimationRootNode{gd.PointerWithOwnershipTransferredToGo[gdclass.AnimationRootNode](r_ret)}
	return ret
}

/*
Removes the point at index [param point] from the blend axis.
*/
//go:nosplit
func (self class) RemoveBlendPoint(point int64) { //gd:AnimationNodeBlendSpace1D.remove_blend_point
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_blend_point, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ point int64 }{point}))
}

/*
Returns the number of points on the blend axis.
*/
//go:nosplit
func (self class) GetBlendPointCount() int64 { //gd:AnimationNodeBlendSpace1D.get_blend_point_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_blend_point_count, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMinSpace(min_space float64) { //gd:AnimationNodeBlendSpace1D.set_min_space
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_min_space, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ min_space float64 }{min_space}))
}

//go:nosplit
func (self class) GetMinSpace() float64 { //gd:AnimationNodeBlendSpace1D.get_min_space
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_min_space, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetMaxSpace(max_space float64) { //gd:AnimationNodeBlendSpace1D.set_max_space
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_max_space, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ max_space float64 }{max_space}))
}

//go:nosplit
func (self class) GetMaxSpace() float64 { //gd:AnimationNodeBlendSpace1D.get_max_space
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_max_space, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSnap(snap float64) { //gd:AnimationNodeBlendSpace1D.set_snap
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_snap, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ snap float64 }{snap}))
}

//go:nosplit
func (self class) GetSnap() float64 { //gd:AnimationNodeBlendSpace1D.get_snap
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_snap, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetValueLabel(text String.Readable) { //gd:AnimationNodeBlendSpace1D.set_value_label
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_value_label, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ text gdextension.String }{pointers.Get(gd.InternalString(text))}))
}

//go:nosplit
func (self class) GetValueLabel() String.Readable { //gd:AnimationNodeBlendSpace1D.get_value_label
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_value_label, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetBlendMode(mode BlendMode) { //gd:AnimationNodeBlendSpace1D.set_blend_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_blend_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode BlendMode }{mode}))
}

//go:nosplit
func (self class) GetBlendMode() BlendMode { //gd:AnimationNodeBlendSpace1D.get_blend_mode
	var r_ret = gdextension.Call[BlendMode](gd.ObjectChecked(self.AsObject()), methods.get_blend_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetUseSync(enable bool) { //gd:AnimationNodeBlendSpace1D.set_use_sync
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_use_sync, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) IsUsingSync() bool { //gd:AnimationNodeBlendSpace1D.is_using_sync
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_using_sync, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsAnimationNodeBlendSpace1D() Advanced {
	return *((*Advanced)(unsafe.Pointer(&self)))
}
func (self Instance) AsAnimationNodeBlendSpace1D() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAnimationNodeBlendSpace1D() Instance {
	return self.Super().AsAnimationNodeBlendSpace1D()
}
func (self class) AsAnimationRootNode() AnimationRootNode.Advanced {
	return *((*AnimationRootNode.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAnimationRootNode() AnimationRootNode.Instance {
	return self.Super().AsAnimationRootNode()
}
func (self Instance) AsAnimationRootNode() AnimationRootNode.Instance {
	return *((*AnimationRootNode.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsAnimationNode() AnimationNode.Advanced {
	return *((*AnimationNode.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAnimationNode() AnimationNode.Instance {
	return self.Super().AsAnimationNode()
}
func (self Instance) AsAnimationNode() AnimationNode.Instance {
	return *((*AnimationNode.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AnimationRootNode.Advanced(self.AsAnimationRootNode()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AnimationRootNode.Instance(self.AsAnimationRootNode()), name)
	}
}
func init() {
	gdclass.Register("AnimationNodeBlendSpace1D", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type BlendMode int //gd:AnimationNodeBlendSpace1D.BlendMode

const (
	/*The interpolation between animations is linear.*/
	BlendModeInterpolated BlendMode = 0
	/*The blend space plays the animation of the animation node which blending position is closest to. Useful for frame-by-frame 2D animations.*/
	BlendModeDiscrete BlendMode = 1
	/*Similar to [constant BLEND_MODE_DISCRETE], but starts the new animation at the last animation's playback position.*/
	BlendModeDiscreteCarry BlendMode = 2
)
