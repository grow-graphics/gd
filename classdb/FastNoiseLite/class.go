// Code generated by the generate package DO NOT EDIT

// Package FastNoiseLite provides methods for working with FastNoiseLite object instances.
package FastNoiseLite

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/classdb/Noise"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector3"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This class generates noise using the FastNoiseLite library, which is a collection of several noise algorithms including Cellular, Perlin, Value, and more.
Most generated noise values are in the range of [code][-1, 1][/code], but not always. Some of the cellular noise algorithms return results above [code]1[/code].
*/
type Instance [1]gdclass.FastNoiseLite

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsFastNoiseLite() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.FastNoiseLite

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("FastNoiseLite"))
	casted := Instance{*(*gdclass.FastNoiseLite)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) NoiseType() NoiseType {
	return NoiseType(class(self).GetNoiseType())
}

func (self Instance) SetNoiseType(value NoiseType) {
	class(self).SetNoiseType(value)
}

func (self Instance) Seed() int {
	return int(int(class(self).GetSeed()))
}

func (self Instance) SetSeed(value int) {
	class(self).SetSeed(int64(value))
}

func (self Instance) Frequency() Float.X {
	return Float.X(Float.X(class(self).GetFrequency()))
}

func (self Instance) SetFrequency(value Float.X) {
	class(self).SetFrequency(float64(value))
}

func (self Instance) Offset() Vector3.XYZ {
	return Vector3.XYZ(class(self).GetOffset())
}

func (self Instance) SetOffset(value Vector3.XYZ) {
	class(self).SetOffset(Vector3.XYZ(value))
}

func (self Instance) FractalType() FractalType {
	return FractalType(class(self).GetFractalType())
}

func (self Instance) SetFractalType(value FractalType) {
	class(self).SetFractalType(value)
}

func (self Instance) FractalOctaves() int {
	return int(int(class(self).GetFractalOctaves()))
}

func (self Instance) SetFractalOctaves(value int) {
	class(self).SetFractalOctaves(int64(value))
}

func (self Instance) FractalLacunarity() Float.X {
	return Float.X(Float.X(class(self).GetFractalLacunarity()))
}

func (self Instance) SetFractalLacunarity(value Float.X) {
	class(self).SetFractalLacunarity(float64(value))
}

func (self Instance) FractalGain() Float.X {
	return Float.X(Float.X(class(self).GetFractalGain()))
}

func (self Instance) SetFractalGain(value Float.X) {
	class(self).SetFractalGain(float64(value))
}

func (self Instance) FractalWeightedStrength() Float.X {
	return Float.X(Float.X(class(self).GetFractalWeightedStrength()))
}

func (self Instance) SetFractalWeightedStrength(value Float.X) {
	class(self).SetFractalWeightedStrength(float64(value))
}

func (self Instance) FractalPingPongStrength() Float.X {
	return Float.X(Float.X(class(self).GetFractalPingPongStrength()))
}

func (self Instance) SetFractalPingPongStrength(value Float.X) {
	class(self).SetFractalPingPongStrength(float64(value))
}

func (self Instance) CellularDistanceFunction() CellularDistanceFunction {
	return CellularDistanceFunction(class(self).GetCellularDistanceFunction())
}

func (self Instance) SetCellularDistanceFunction(value CellularDistanceFunction) {
	class(self).SetCellularDistanceFunction(value)
}

func (self Instance) CellularJitter() Float.X {
	return Float.X(Float.X(class(self).GetCellularJitter()))
}

func (self Instance) SetCellularJitter(value Float.X) {
	class(self).SetCellularJitter(float64(value))
}

func (self Instance) CellularReturnType() CellularReturnType {
	return CellularReturnType(class(self).GetCellularReturnType())
}

func (self Instance) SetCellularReturnType(value CellularReturnType) {
	class(self).SetCellularReturnType(value)
}

func (self Instance) DomainWarpEnabled() bool {
	return bool(class(self).IsDomainWarpEnabled())
}

func (self Instance) SetDomainWarpEnabled(value bool) {
	class(self).SetDomainWarpEnabled(value)
}

func (self Instance) DomainWarpType() DomainWarpType {
	return DomainWarpType(class(self).GetDomainWarpType())
}

func (self Instance) SetDomainWarpType(value DomainWarpType) {
	class(self).SetDomainWarpType(value)
}

func (self Instance) DomainWarpAmplitude() Float.X {
	return Float.X(Float.X(class(self).GetDomainWarpAmplitude()))
}

func (self Instance) SetDomainWarpAmplitude(value Float.X) {
	class(self).SetDomainWarpAmplitude(float64(value))
}

func (self Instance) DomainWarpFrequency() Float.X {
	return Float.X(Float.X(class(self).GetDomainWarpFrequency()))
}

func (self Instance) SetDomainWarpFrequency(value Float.X) {
	class(self).SetDomainWarpFrequency(float64(value))
}

func (self Instance) DomainWarpFractalType() DomainWarpFractalType {
	return DomainWarpFractalType(class(self).GetDomainWarpFractalType())
}

func (self Instance) SetDomainWarpFractalType(value DomainWarpFractalType) {
	class(self).SetDomainWarpFractalType(value)
}

func (self Instance) DomainWarpFractalOctaves() int {
	return int(int(class(self).GetDomainWarpFractalOctaves()))
}

func (self Instance) SetDomainWarpFractalOctaves(value int) {
	class(self).SetDomainWarpFractalOctaves(int64(value))
}

func (self Instance) DomainWarpFractalLacunarity() Float.X {
	return Float.X(Float.X(class(self).GetDomainWarpFractalLacunarity()))
}

func (self Instance) SetDomainWarpFractalLacunarity(value Float.X) {
	class(self).SetDomainWarpFractalLacunarity(float64(value))
}

func (self Instance) DomainWarpFractalGain() Float.X {
	return Float.X(Float.X(class(self).GetDomainWarpFractalGain()))
}

func (self Instance) SetDomainWarpFractalGain(value Float.X) {
	class(self).SetDomainWarpFractalGain(float64(value))
}

//go:nosplit
func (self class) SetNoiseType(atype NoiseType) { //gd:FastNoiseLite.set_noise_type
	var frame = callframe.New()
	callframe.Arg(frame, atype)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_noise_type, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetNoiseType() NoiseType { //gd:FastNoiseLite.get_noise_type
	var frame = callframe.New()
	var r_ret = callframe.Ret[NoiseType](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_noise_type, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetSeed(seed int64) { //gd:FastNoiseLite.set_seed
	var frame = callframe.New()
	callframe.Arg(frame, seed)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_seed, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetSeed() int64 { //gd:FastNoiseLite.get_seed
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_seed, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetFrequency(freq float64) { //gd:FastNoiseLite.set_frequency
	var frame = callframe.New()
	callframe.Arg(frame, freq)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_frequency, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetFrequency() float64 { //gd:FastNoiseLite.get_frequency
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_frequency, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetOffset(offset Vector3.XYZ) { //gd:FastNoiseLite.set_offset
	var frame = callframe.New()
	callframe.Arg(frame, offset)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_offset, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetOffset() Vector3.XYZ { //gd:FastNoiseLite.get_offset
	var frame = callframe.New()
	var r_ret = callframe.Ret[Vector3.XYZ](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_offset, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetFractalType(atype FractalType) { //gd:FastNoiseLite.set_fractal_type
	var frame = callframe.New()
	callframe.Arg(frame, atype)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_fractal_type, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetFractalType() FractalType { //gd:FastNoiseLite.get_fractal_type
	var frame = callframe.New()
	var r_ret = callframe.Ret[FractalType](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_fractal_type, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetFractalOctaves(octave_count int64) { //gd:FastNoiseLite.set_fractal_octaves
	var frame = callframe.New()
	callframe.Arg(frame, octave_count)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_fractal_octaves, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetFractalOctaves() int64 { //gd:FastNoiseLite.get_fractal_octaves
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_fractal_octaves, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetFractalLacunarity(lacunarity float64) { //gd:FastNoiseLite.set_fractal_lacunarity
	var frame = callframe.New()
	callframe.Arg(frame, lacunarity)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_fractal_lacunarity, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetFractalLacunarity() float64 { //gd:FastNoiseLite.get_fractal_lacunarity
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_fractal_lacunarity, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetFractalGain(gain float64) { //gd:FastNoiseLite.set_fractal_gain
	var frame = callframe.New()
	callframe.Arg(frame, gain)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_fractal_gain, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetFractalGain() float64 { //gd:FastNoiseLite.get_fractal_gain
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_fractal_gain, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetFractalWeightedStrength(weighted_strength float64) { //gd:FastNoiseLite.set_fractal_weighted_strength
	var frame = callframe.New()
	callframe.Arg(frame, weighted_strength)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_fractal_weighted_strength, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetFractalWeightedStrength() float64 { //gd:FastNoiseLite.get_fractal_weighted_strength
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_fractal_weighted_strength, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetFractalPingPongStrength(ping_pong_strength float64) { //gd:FastNoiseLite.set_fractal_ping_pong_strength
	var frame = callframe.New()
	callframe.Arg(frame, ping_pong_strength)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_fractal_ping_pong_strength, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetFractalPingPongStrength() float64 { //gd:FastNoiseLite.get_fractal_ping_pong_strength
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_fractal_ping_pong_strength, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetCellularDistanceFunction(fn CellularDistanceFunction) { //gd:FastNoiseLite.set_cellular_distance_function
	var frame = callframe.New()
	callframe.Arg(frame, fn)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_cellular_distance_function, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetCellularDistanceFunction() CellularDistanceFunction { //gd:FastNoiseLite.get_cellular_distance_function
	var frame = callframe.New()
	var r_ret = callframe.Ret[CellularDistanceFunction](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_cellular_distance_function, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetCellularJitter(jitter float64) { //gd:FastNoiseLite.set_cellular_jitter
	var frame = callframe.New()
	callframe.Arg(frame, jitter)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_cellular_jitter, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetCellularJitter() float64 { //gd:FastNoiseLite.get_cellular_jitter
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_cellular_jitter, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetCellularReturnType(ret CellularReturnType) { //gd:FastNoiseLite.set_cellular_return_type
	var frame = callframe.New()
	callframe.Arg(frame, ret)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_cellular_return_type, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetCellularReturnType() CellularReturnType { //gd:FastNoiseLite.get_cellular_return_type
	var frame = callframe.New()
	var r_ret = callframe.Ret[CellularReturnType](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_cellular_return_type, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetDomainWarpEnabled(domain_warp_enabled bool) { //gd:FastNoiseLite.set_domain_warp_enabled
	var frame = callframe.New()
	callframe.Arg(frame, domain_warp_enabled)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_domain_warp_enabled, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) IsDomainWarpEnabled() bool { //gd:FastNoiseLite.is_domain_warp_enabled
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_is_domain_warp_enabled, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetDomainWarpType(domain_warp_type DomainWarpType) { //gd:FastNoiseLite.set_domain_warp_type
	var frame = callframe.New()
	callframe.Arg(frame, domain_warp_type)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_domain_warp_type, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetDomainWarpType() DomainWarpType { //gd:FastNoiseLite.get_domain_warp_type
	var frame = callframe.New()
	var r_ret = callframe.Ret[DomainWarpType](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_domain_warp_type, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetDomainWarpAmplitude(domain_warp_amplitude float64) { //gd:FastNoiseLite.set_domain_warp_amplitude
	var frame = callframe.New()
	callframe.Arg(frame, domain_warp_amplitude)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_domain_warp_amplitude, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetDomainWarpAmplitude() float64 { //gd:FastNoiseLite.get_domain_warp_amplitude
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_domain_warp_amplitude, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetDomainWarpFrequency(domain_warp_frequency float64) { //gd:FastNoiseLite.set_domain_warp_frequency
	var frame = callframe.New()
	callframe.Arg(frame, domain_warp_frequency)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_domain_warp_frequency, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetDomainWarpFrequency() float64 { //gd:FastNoiseLite.get_domain_warp_frequency
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_domain_warp_frequency, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetDomainWarpFractalType(domain_warp_fractal_type DomainWarpFractalType) { //gd:FastNoiseLite.set_domain_warp_fractal_type
	var frame = callframe.New()
	callframe.Arg(frame, domain_warp_fractal_type)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_domain_warp_fractal_type, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetDomainWarpFractalType() DomainWarpFractalType { //gd:FastNoiseLite.get_domain_warp_fractal_type
	var frame = callframe.New()
	var r_ret = callframe.Ret[DomainWarpFractalType](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_domain_warp_fractal_type, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetDomainWarpFractalOctaves(domain_warp_octave_count int64) { //gd:FastNoiseLite.set_domain_warp_fractal_octaves
	var frame = callframe.New()
	callframe.Arg(frame, domain_warp_octave_count)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_domain_warp_fractal_octaves, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetDomainWarpFractalOctaves() int64 { //gd:FastNoiseLite.get_domain_warp_fractal_octaves
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_domain_warp_fractal_octaves, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetDomainWarpFractalLacunarity(domain_warp_lacunarity float64) { //gd:FastNoiseLite.set_domain_warp_fractal_lacunarity
	var frame = callframe.New()
	callframe.Arg(frame, domain_warp_lacunarity)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_domain_warp_fractal_lacunarity, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetDomainWarpFractalLacunarity() float64 { //gd:FastNoiseLite.get_domain_warp_fractal_lacunarity
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_domain_warp_fractal_lacunarity, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetDomainWarpFractalGain(domain_warp_gain float64) { //gd:FastNoiseLite.set_domain_warp_fractal_gain
	var frame = callframe.New()
	callframe.Arg(frame, domain_warp_gain)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_set_domain_warp_fractal_gain, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) GetDomainWarpFractalGain() float64 { //gd:FastNoiseLite.get_domain_warp_fractal_gain
	var frame = callframe.New()
	var r_ret = callframe.Ret[float64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.FastNoiseLite.Bind_get_domain_warp_fractal_gain, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}
func (self class) AsFastNoiseLite() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsFastNoiseLite() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsFastNoiseLite() Instance { return self.Super().AsFastNoiseLite() }
func (self class) AsNoise() Noise.Advanced           { return *((*Noise.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNoise() Noise.Instance   { return self.Super().AsNoise() }
func (self Instance) AsNoise() Noise.Instance        { return *((*Noise.Instance)(unsafe.Pointer(&self))) }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Noise.Advanced(self.AsNoise()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Noise.Instance(self.AsNoise()), name)
	}
}
func init() {
	gdclass.Register("FastNoiseLite", func(ptr gd.Object) any {
		return [1]gdclass.FastNoiseLite{*(*gdclass.FastNoiseLite)(unsafe.Pointer(&ptr))}
	})
}

type NoiseType int //gd:FastNoiseLite.NoiseType

const (
	/*A lattice of points are assigned random values then interpolated based on neighboring values.*/
	TypeValue NoiseType = 5
	/*Similar to Value noise, but slower. Has more variance in peaks and valleys.
	  Cubic noise can be used to avoid certain artifacts when using value noise to create a bumpmap. In general, you should always use this mode if the value noise is being used for a heightmap or bumpmap.*/
	TypeValueCubic NoiseType = 4
	/*A lattice of random gradients. Their dot products are interpolated to obtain values in between the lattices.*/
	TypePerlin NoiseType = 3
	/*Cellular includes both Worley noise and Voronoi diagrams which creates various regions of the same value.*/
	TypeCellular NoiseType = 2
	/*As opposed to [constant TYPE_PERLIN], gradients exist in a simplex lattice rather than a grid lattice, avoiding directional artifacts. Internally uses FastNoiseLite's OpenSimplex2 noise type.*/
	TypeSimplex NoiseType = 0
	/*Modified, higher quality version of [constant TYPE_SIMPLEX], but slower. Internally uses FastNoiseLite's OpenSimplex2S noise type.*/
	TypeSimplexSmooth NoiseType = 1
)

type FractalType int //gd:FastNoiseLite.FractalType

const (
	/*No fractal noise.*/
	FractalNone FractalType = 0
	/*Method using Fractional Brownian Motion to combine octaves into a fractal.*/
	FractalFbm FractalType = 1
	/*Method of combining octaves into a fractal resulting in a "ridged" look.*/
	FractalRidged FractalType = 2
	/*Method of combining octaves into a fractal with a ping pong effect.*/
	FractalPingPong FractalType = 3
)

type CellularDistanceFunction int //gd:FastNoiseLite.CellularDistanceFunction

const (
	/*Euclidean distance to the nearest point.*/
	DistanceEuclidean CellularDistanceFunction = 0
	/*Squared Euclidean distance to the nearest point.*/
	DistanceEuclideanSquared CellularDistanceFunction = 1
	/*Manhattan distance (taxicab metric) to the nearest point.*/
	DistanceManhattan CellularDistanceFunction = 2
	/*Blend of [constant DISTANCE_EUCLIDEAN] and [constant DISTANCE_MANHATTAN] to give curved cell boundaries.*/
	DistanceHybrid CellularDistanceFunction = 3
)

type CellularReturnType int //gd:FastNoiseLite.CellularReturnType

const (
	/*The cellular distance function will return the same value for all points within a cell.*/
	ReturnCellValue CellularReturnType = 0
	/*The cellular distance function will return a value determined by the distance to the nearest point.*/
	ReturnDistance CellularReturnType = 1
	/*The cellular distance function returns the distance to the second-nearest point.*/
	ReturnDistance2 CellularReturnType = 2
	/*The distance to the nearest point is added to the distance to the second-nearest point.*/
	ReturnDistance2Add CellularReturnType = 3
	/*The distance to the nearest point is subtracted from the distance to the second-nearest point.*/
	ReturnDistance2Sub CellularReturnType = 4
	/*The distance to the nearest point is multiplied with the distance to the second-nearest point.*/
	ReturnDistance2Mul CellularReturnType = 5
	/*The distance to the nearest point is divided by the distance to the second-nearest point.*/
	ReturnDistance2Div CellularReturnType = 6
)

type DomainWarpType int //gd:FastNoiseLite.DomainWarpType

const (
	/*The domain is warped using the simplex noise algorithm.*/
	DomainWarpSimplex DomainWarpType = 0
	/*The domain is warped using a simplified version of the simplex noise algorithm.*/
	DomainWarpSimplexReduced DomainWarpType = 1
	/*The domain is warped using a simple noise grid (not as smooth as the other methods, but more performant).*/
	DomainWarpBasicGrid DomainWarpType = 2
)

type DomainWarpFractalType int //gd:FastNoiseLite.DomainWarpFractalType

const (
	/*No fractal noise for warping the space.*/
	DomainWarpFractalNone DomainWarpFractalType = 0
	/*Warping the space progressively, octave for octave, resulting in a more "liquified" distortion.*/
	DomainWarpFractalProgressive DomainWarpFractalType = 1
	/*Warping the space independently for each octave, resulting in a more chaotic distortion.*/
	DomainWarpFractalIndependent DomainWarpFractalType = 2
)
