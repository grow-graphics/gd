// Code generated by the generate package DO NOT EDIT

// Package RibbonTrailMesh provides methods for working with RibbonTrailMesh object instances.
package RibbonTrailMesh

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Curve"
import "graphics.gd/classdb/Mesh"
import "graphics.gd/classdb/PrimitiveMesh"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[RibbonTrailMesh] represents a straight ribbon-shaped mesh with variable width. The ribbon is composed of a number of flat or cross-shaped sections, each with the same [member section_length] and number of [member section_segments]. A [member curve] is sampled along the total length of the ribbon, meaning that the curve determines the size of the ribbon along its length.
This primitive mesh is usually used for particle trails.
*/
type Instance [1]gdclass.RibbonTrailMesh

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsRibbonTrailMesh() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.RibbonTrailMesh

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(pointers.Get(gd.NewStringName("RibbonTrailMesh"))))})}
	casted := Instance{*(*gdclass.RibbonTrailMesh)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) Shape() Shape {
	return Shape(class(self).GetShape())
}

func (self Instance) SetShape(value Shape) {
	class(self).SetShape(value)
}

func (self Instance) Size() Float.X {
	return Float.X(Float.X(class(self).GetSize()))
}

func (self Instance) SetSize(value Float.X) {
	class(self).SetSize(float64(value))
}

func (self Instance) Sections() int {
	return int(int(class(self).GetSections()))
}

func (self Instance) SetSections(value int) {
	class(self).SetSections(int64(value))
}

func (self Instance) SectionLength() Float.X {
	return Float.X(Float.X(class(self).GetSectionLength()))
}

func (self Instance) SetSectionLength(value Float.X) {
	class(self).SetSectionLength(float64(value))
}

func (self Instance) SectionSegments() int {
	return int(int(class(self).GetSectionSegments()))
}

func (self Instance) SetSectionSegments(value int) {
	class(self).SetSectionSegments(int64(value))
}

func (self Instance) Curve() Curve.Instance {
	return Curve.Instance(class(self).GetCurve())
}

func (self Instance) SetCurve(value Curve.Instance) {
	class(self).SetCurve(value)
}

//go:nosplit
func (self class) SetSize(size float64) { //gd:RibbonTrailMesh.set_size
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RibbonTrailMesh.Bind_set_size), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ size float64 }{size}))
}

//go:nosplit
func (self class) GetSize() float64 { //gd:RibbonTrailMesh.get_size
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RibbonTrailMesh.Bind_get_size), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSections(sections int64) { //gd:RibbonTrailMesh.set_sections
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RibbonTrailMesh.Bind_set_sections), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ sections int64 }{sections}))
}

//go:nosplit
func (self class) GetSections() int64 { //gd:RibbonTrailMesh.get_sections
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RibbonTrailMesh.Bind_get_sections), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSectionLength(section_length float64) { //gd:RibbonTrailMesh.set_section_length
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RibbonTrailMesh.Bind_set_section_length), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ section_length float64 }{section_length}))
}

//go:nosplit
func (self class) GetSectionLength() float64 { //gd:RibbonTrailMesh.get_section_length
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RibbonTrailMesh.Bind_get_section_length), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSectionSegments(section_segments int64) { //gd:RibbonTrailMesh.set_section_segments
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RibbonTrailMesh.Bind_set_section_segments), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ section_segments int64 }{section_segments}))
}

//go:nosplit
func (self class) GetSectionSegments() int64 { //gd:RibbonTrailMesh.get_section_segments
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RibbonTrailMesh.Bind_get_section_segments), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCurve(curve [1]gdclass.Curve) { //gd:RibbonTrailMesh.set_curve
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RibbonTrailMesh.Bind_set_curve), 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ curve gdextension.Object }{gdextension.Object(gd.ObjectChecked(curve[0].AsObject()))}))
}

//go:nosplit
func (self class) GetCurve() [1]gdclass.Curve { //gd:RibbonTrailMesh.get_curve
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RibbonTrailMesh.Bind_get_curve), gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Curve{gd.PointerWithOwnershipTransferredToGo[gdclass.Curve](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetShape(shape Shape) { //gd:RibbonTrailMesh.set_shape
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RibbonTrailMesh.Bind_set_shape), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ shape Shape }{shape}))
}

//go:nosplit
func (self class) GetShape() Shape { //gd:RibbonTrailMesh.get_shape
	var r_ret = gdextension.Call[Shape](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RibbonTrailMesh.Bind_get_shape), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsRibbonTrailMesh() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsRibbonTrailMesh() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsRibbonTrailMesh() Instance { return self.Super().AsRibbonTrailMesh() }
func (self class) AsPrimitiveMesh() PrimitiveMesh.Advanced {
	return *((*PrimitiveMesh.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsPrimitiveMesh() PrimitiveMesh.Instance {
	return self.Super().AsPrimitiveMesh()
}
func (self Instance) AsPrimitiveMesh() PrimitiveMesh.Instance {
	return *((*PrimitiveMesh.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsMesh() Mesh.Advanced         { return *((*Mesh.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsMesh() Mesh.Instance { return self.Super().AsMesh() }
func (self Instance) AsMesh() Mesh.Instance      { return *((*Mesh.Instance)(unsafe.Pointer(&self))) }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(PrimitiveMesh.Advanced(self.AsPrimitiveMesh()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(PrimitiveMesh.Instance(self.AsPrimitiveMesh()), name)
	}
}
func init() {
	gdclass.Register("RibbonTrailMesh", func(ptr gd.Object) any {
		return [1]gdclass.RibbonTrailMesh{*(*gdclass.RibbonTrailMesh)(unsafe.Pointer(&ptr))}
	})
}

type Shape int //gd:RibbonTrailMesh.Shape

const (
	/*Gives the mesh a single flat face.*/
	ShapeFlat Shape = 0
	/*Gives the mesh two perpendicular flat faces, making a cross shape.*/
	ShapeCross Shape = 1
)
