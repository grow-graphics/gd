// Code generated by the generate package DO NOT EDIT

// Package OpenXRDpadBindingModifier provides methods for working with OpenXRDpadBindingModifier object instances.
package OpenXRDpadBindingModifier

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/OpenXRActionSet"
import "graphics.gd/classdb/OpenXRBindingModifier"
import "graphics.gd/classdb/OpenXRHapticBase"
import "graphics.gd/classdb/OpenXRIPBindingModifier"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
The DPad binding modifier converts an axis input to a dpad output, emulating a DPad. New input paths for each dpad direction will be added to the interaction profile. When bound to actions the DPad emulation will be activated. You should [b]not[/b] combine dpad inputs with normal inputs in the same action set for the same control, this will result in an error being returned when suggested bindings are submitted to OpenXR.
See [url=https://registry.khronos.org/OpenXR/specs/1.1/html/xrspec.html#XR_EXT_dpad_binding]XR_EXT_dpad_binding[/url] for in-depth details.
[b]Note:[/b] If the DPad binding modifier extension is enabled, all dpad binding paths will be available in the action map. Adding the modifier to an interaction profile allows you to further customize the behavior.
*/
type Instance [1]gdclass.OpenXRDpadBindingModifier

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsOpenXRDpadBindingModifier() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.OpenXRDpadBindingModifier

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("OpenXRDpadBindingModifier"))
	casted := Instance{*(*gdclass.OpenXRDpadBindingModifier)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) ActionSet() OpenXRActionSet.Instance {
	return OpenXRActionSet.Instance(class(self).GetActionSet())
}

func (self Instance) SetActionSet(value OpenXRActionSet.Instance) {
	class(self).SetActionSet(value)
}

func (self Instance) InputPath() string {
	return string(class(self).GetInputPath().String())
}

func (self Instance) SetInputPath(value string) {
	class(self).SetInputPath(String.New(value))
}

func (self Instance) Threshold() Float.X {
	return Float.X(Float.X(class(self).GetThreshold()))
}

func (self Instance) SetThreshold(value Float.X) {
	class(self).SetThreshold(float64(value))
}

func (self Instance) ThresholdReleased() Float.X {
	return Float.X(Float.X(class(self).GetThresholdReleased()))
}

func (self Instance) SetThresholdReleased(value Float.X) {
	class(self).SetThresholdReleased(float64(value))
}

func (self Instance) CenterRegion() Float.X {
	return Float.X(Float.X(class(self).GetCenterRegion()))
}

func (self Instance) SetCenterRegion(value Float.X) {
	class(self).SetCenterRegion(float64(value))
}

func (self Instance) WedgeAngle() Angle.Radians {
	return Angle.Radians(Float.X(class(self).GetWedgeAngle()))
}

func (self Instance) SetWedgeAngle(value Angle.Radians) {
	class(self).SetWedgeAngle(float64(value))
}

func (self Instance) IsSticky() bool {
	return bool(class(self).GetIsSticky())
}

func (self Instance) SetIsSticky(value bool) {
	class(self).SetIsSticky(value)
}

func (self Instance) OnHaptic() OpenXRHapticBase.Instance {
	return OpenXRHapticBase.Instance(class(self).GetOnHaptic())
}

func (self Instance) SetOnHaptic(value OpenXRHapticBase.Instance) {
	class(self).SetOnHaptic(value)
}

func (self Instance) OffHaptic() OpenXRHapticBase.Instance {
	return OpenXRHapticBase.Instance(class(self).GetOffHaptic())
}

func (self Instance) SetOffHaptic(value OpenXRHapticBase.Instance) {
	class(self).SetOffHaptic(value)
}

//go:nosplit
func (self class) SetActionSet(action_set [1]gdclass.OpenXRActionSet) { //gd:OpenXRDpadBindingModifier.set_action_set
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_set_action_set), 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ action_set gdextension.Object }{gdextension.Object(gd.ObjectChecked(action_set[0].AsObject()))}))
}

//go:nosplit
func (self class) GetActionSet() [1]gdclass.OpenXRActionSet { //gd:OpenXRDpadBindingModifier.get_action_set
	var r_ret = gdextension.Call[gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_get_action_set), gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.OpenXRActionSet{gd.PointerWithOwnershipTransferredToGo[gdclass.OpenXRActionSet](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetInputPath(input_path String.Readable) { //gd:OpenXRDpadBindingModifier.set_input_path
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_set_input_path), 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ input_path gdextension.String }{gdextension.String(pointers.Get(gd.InternalString(input_path))[0])}))
}

//go:nosplit
func (self class) GetInputPath() String.Readable { //gd:OpenXRDpadBindingModifier.get_input_path
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_get_input_path), gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetThreshold(threshold float64) { //gd:OpenXRDpadBindingModifier.set_threshold
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_set_threshold), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ threshold float64 }{threshold}))
}

//go:nosplit
func (self class) GetThreshold() float64 { //gd:OpenXRDpadBindingModifier.get_threshold
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_get_threshold), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetThresholdReleased(threshold_released float64) { //gd:OpenXRDpadBindingModifier.set_threshold_released
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_set_threshold_released), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ threshold_released float64 }{threshold_released}))
}

//go:nosplit
func (self class) GetThresholdReleased() float64 { //gd:OpenXRDpadBindingModifier.get_threshold_released
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_get_threshold_released), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCenterRegion(center_region float64) { //gd:OpenXRDpadBindingModifier.set_center_region
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_set_center_region), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ center_region float64 }{center_region}))
}

//go:nosplit
func (self class) GetCenterRegion() float64 { //gd:OpenXRDpadBindingModifier.get_center_region
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_get_center_region), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWedgeAngle(wedge_angle float64) { //gd:OpenXRDpadBindingModifier.set_wedge_angle
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_set_wedge_angle), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ wedge_angle float64 }{wedge_angle}))
}

//go:nosplit
func (self class) GetWedgeAngle() float64 { //gd:OpenXRDpadBindingModifier.get_wedge_angle
	var r_ret = gdextension.Call[float64](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_get_wedge_angle), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetIsSticky(is_sticky bool) { //gd:OpenXRDpadBindingModifier.set_is_sticky
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_set_is_sticky), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ is_sticky bool }{is_sticky}))
}

//go:nosplit
func (self class) GetIsSticky() bool { //gd:OpenXRDpadBindingModifier.get_is_sticky
	var r_ret = gdextension.Call[bool](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_get_is_sticky), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetOnHaptic(haptic [1]gdclass.OpenXRHapticBase) { //gd:OpenXRDpadBindingModifier.set_on_haptic
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_set_on_haptic), 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ haptic gdextension.Object }{gdextension.Object(gd.ObjectChecked(haptic[0].AsObject()))}))
}

//go:nosplit
func (self class) GetOnHaptic() [1]gdclass.OpenXRHapticBase { //gd:OpenXRDpadBindingModifier.get_on_haptic
	var r_ret = gdextension.Call[gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_get_on_haptic), gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.OpenXRHapticBase{gd.PointerWithOwnershipTransferredToGo[gdclass.OpenXRHapticBase](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetOffHaptic(haptic [1]gdclass.OpenXRHapticBase) { //gd:OpenXRDpadBindingModifier.set_off_haptic
	gdextension.Call[struct{}](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_set_off_haptic), 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ haptic gdextension.Object }{gdextension.Object(gd.ObjectChecked(haptic[0].AsObject()))}))
}

//go:nosplit
func (self class) GetOffHaptic() [1]gdclass.OpenXRHapticBase { //gd:OpenXRDpadBindingModifier.get_off_haptic
	var r_ret = gdextension.Call[gd.EnginePointer](gdextension.Object(gd.ObjectChecked(self.AsObject())), gdextension.MethodForClass(gd.Global.Methods.OpenXRDpadBindingModifier.Bind_get_off_haptic), gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.OpenXRHapticBase{gd.PointerWithOwnershipTransferredToGo[gdclass.OpenXRHapticBase](r_ret)}
	return ret
}
func (self class) AsOpenXRDpadBindingModifier() Advanced {
	return *((*Advanced)(unsafe.Pointer(&self)))
}
func (self Instance) AsOpenXRDpadBindingModifier() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsOpenXRDpadBindingModifier() Instance {
	return self.Super().AsOpenXRDpadBindingModifier()
}
func (self class) AsOpenXRIPBindingModifier() OpenXRIPBindingModifier.Advanced {
	return *((*OpenXRIPBindingModifier.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsOpenXRIPBindingModifier() OpenXRIPBindingModifier.Instance {
	return self.Super().AsOpenXRIPBindingModifier()
}
func (self Instance) AsOpenXRIPBindingModifier() OpenXRIPBindingModifier.Instance {
	return *((*OpenXRIPBindingModifier.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsOpenXRBindingModifier() OpenXRBindingModifier.Advanced {
	return *((*OpenXRBindingModifier.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsOpenXRBindingModifier() OpenXRBindingModifier.Instance {
	return self.Super().AsOpenXRBindingModifier()
}
func (self Instance) AsOpenXRBindingModifier() OpenXRBindingModifier.Instance {
	return *((*OpenXRBindingModifier.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(OpenXRIPBindingModifier.Advanced(self.AsOpenXRIPBindingModifier()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(OpenXRIPBindingModifier.Instance(self.AsOpenXRIPBindingModifier()), name)
	}
}
func init() {
	gdclass.Register("OpenXRDpadBindingModifier", func(ptr gd.Object) any {
		return [1]gdclass.OpenXRDpadBindingModifier{*(*gdclass.OpenXRDpadBindingModifier)(unsafe.Pointer(&ptr))}
	})
}
