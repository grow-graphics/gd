// Code generated by the generate package DO NOT EDIT

// Package VoxelGIData provides methods for working with VoxelGIData object instances.
package VoxelGIData

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/AABB"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Transform3D"
import "graphics.gd/variant/Vector3"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[VoxelGIData] contains baked voxel global illumination for use in a [VoxelGI] node. [VoxelGIData] also offers several properties to adjust the final appearance of the global illumination. These properties can be adjusted at run-time without having to bake the [VoxelGI] node again.
[b]Note:[/b] To prevent text-based scene files ([code].tscn[/code]) from growing too much and becoming slow to load and save, always save [VoxelGIData] to an external binary resource file ([code].res[/code]) instead of embedding it within the scene. This can be done by clicking the dropdown arrow next to the [VoxelGIData] resource, choosing [b]Edit[/b], clicking the floppy disk icon at the top of the Inspector then choosing [b]Save As...[/b].
*/
type Instance [1]gdclass.VoxelGIData

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	allocate             gdextension.MethodForClass `hash:"4041601946"`
	get_bounds           gdextension.MethodForClass `hash:"1068685055"`
	get_octree_size      gdextension.MethodForClass `hash:"3360562783"`
	get_to_cell_xform    gdextension.MethodForClass `hash:"3229777777"`
	get_octree_cells     gdextension.MethodForClass `hash:"2362200018"`
	get_data_cells       gdextension.MethodForClass `hash:"2362200018"`
	get_level_counts     gdextension.MethodForClass `hash:"1930428628"`
	set_dynamic_range    gdextension.MethodForClass `hash:"373806689"`
	get_dynamic_range    gdextension.MethodForClass `hash:"1740695150"`
	set_energy           gdextension.MethodForClass `hash:"373806689"`
	get_energy           gdextension.MethodForClass `hash:"1740695150"`
	set_bias             gdextension.MethodForClass `hash:"373806689"`
	get_bias             gdextension.MethodForClass `hash:"1740695150"`
	set_normal_bias      gdextension.MethodForClass `hash:"373806689"`
	get_normal_bias      gdextension.MethodForClass `hash:"1740695150"`
	set_propagation      gdextension.MethodForClass `hash:"373806689"`
	get_propagation      gdextension.MethodForClass `hash:"1740695150"`
	set_interior         gdextension.MethodForClass `hash:"2586408642"`
	is_interior          gdextension.MethodForClass `hash:"36873697"`
	set_use_two_bounces  gdextension.MethodForClass `hash:"2586408642"`
	is_using_two_bounces gdextension.MethodForClass `hash:"36873697"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("VoxelGIData")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsVoxelGIData() Instance
}

func (self Instance) Allocate(to_cell_xform Transform3D.BasisOrigin, aabb AABB.PositionSize, octree_size Vector3.XYZ, octree_cells []byte, data_cells []byte, distance_field []byte, level_counts []int32) { //gd:VoxelGIData.allocate
	Advanced(self).Allocate(Transform3D.BasisOrigin(to_cell_xform), AABB.PositionSize(aabb), Vector3.XYZ(octree_size), Packed.Bytes(Packed.New(octree_cells...)), Packed.Bytes(Packed.New(data_cells...)), Packed.Bytes(Packed.New(distance_field...)), Packed.New(level_counts...))
}

/*
Returns the bounds of the baked voxel data as an [AABB], which should match [member VoxelGI.size] after being baked (which only contains the size as a [Vector3]).
[b]Note:[/b] If the size was modified without baking the VoxelGI data, then the value of [method get_bounds] and [member VoxelGI.size] will not match.
*/
func (self Instance) GetBounds() AABB.PositionSize { //gd:VoxelGIData.get_bounds
	return AABB.PositionSize(Advanced(self).GetBounds())
}
func (self Instance) GetOctreeSize() Vector3.XYZ { //gd:VoxelGIData.get_octree_size
	return Vector3.XYZ(Advanced(self).GetOctreeSize())
}
func (self Instance) GetToCellXform() Transform3D.BasisOrigin { //gd:VoxelGIData.get_to_cell_xform
	return Transform3D.BasisOrigin(Advanced(self).GetToCellXform())
}
func (self Instance) GetOctreeCells() []byte { //gd:VoxelGIData.get_octree_cells
	return []byte(Advanced(self).GetOctreeCells().Bytes())
}
func (self Instance) GetDataCells() []byte { //gd:VoxelGIData.get_data_cells
	return []byte(Advanced(self).GetDataCells().Bytes())
}
func (self Instance) GetLevelCounts() []int32 { //gd:VoxelGIData.get_level_counts
	return []int32(slices.Collect(Advanced(self).GetLevelCounts().Values()))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.VoxelGIData

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.VoxelGIData](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.VoxelGIData](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.VoxelGIData{pointers.Add[gdclass.VoxelGIData]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.VoxelGIData{pointers.New[gdclass.VoxelGIData]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) DynamicRange() Float.X {
	return Float.X(Float.X(class(self).GetDynamicRange()))
}

func (self Instance) SetDynamicRange(value Float.X) {
	class(self).SetDynamicRange(float64(value))
}

func (self Instance) Energy() Float.X {
	return Float.X(Float.X(class(self).GetEnergy()))
}

func (self Instance) SetEnergy(value Float.X) {
	class(self).SetEnergy(float64(value))
}

func (self Instance) Bias() Float.X {
	return Float.X(Float.X(class(self).GetBias()))
}

func (self Instance) SetBias(value Float.X) {
	class(self).SetBias(float64(value))
}

func (self Instance) NormalBias() Float.X {
	return Float.X(Float.X(class(self).GetNormalBias()))
}

func (self Instance) SetNormalBias(value Float.X) {
	class(self).SetNormalBias(float64(value))
}

func (self Instance) Propagation() Float.X {
	return Float.X(Float.X(class(self).GetPropagation()))
}

func (self Instance) SetPropagation(value Float.X) {
	class(self).SetPropagation(float64(value))
}

func (self Instance) UseTwoBounces() bool {
	return bool(class(self).IsUsingTwoBounces())
}

func (self Instance) SetUseTwoBounces(value bool) {
	class(self).SetUseTwoBounces(value)
}

func (self Instance) Interior() bool {
	return bool(class(self).IsInterior())
}

func (self Instance) SetInterior(value bool) {
	class(self).SetInterior(value)
}

//go:nosplit
func (self class) Allocate(to_cell_xform Transform3D.BasisOrigin, aabb AABB.PositionSize, octree_size Vector3.XYZ, octree_cells Packed.Bytes, data_cells Packed.Bytes, distance_field Packed.Bytes, level_counts Packed.Array[int32]) { //gd:VoxelGIData.allocate
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.allocate, 0|(gdextension.SizeTransform3D<<4)|(gdextension.SizeAABB<<8)|(gdextension.SizeVector3<<12)|(gdextension.SizePackedArray<<16)|(gdextension.SizePackedArray<<20)|(gdextension.SizePackedArray<<24)|(gdextension.SizePackedArray<<28), unsafe.Pointer(&struct {
		to_cell_xform  Transform3D.BasisOrigin
		aabb           AABB.PositionSize
		octree_size    Vector3.XYZ
		octree_cells   gdextension.PackedArray[byte]
		data_cells     gdextension.PackedArray[byte]
		distance_field gdextension.PackedArray[byte]
		level_counts   gdextension.PackedArray[int32]
	}{gd.Transposed(to_cell_xform), aabb, octree_size, pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](octree_cells))), pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](data_cells))), pointers.Get(gd.InternalPacked[gd.PackedByteArray, byte](Packed.Array[byte](distance_field))), pointers.Get(gd.InternalPacked[gd.PackedInt32Array, int32](level_counts))}))
}

/*
Returns the bounds of the baked voxel data as an [AABB], which should match [member VoxelGI.size] after being baked (which only contains the size as a [Vector3]).
[b]Note:[/b] If the size was modified without baking the VoxelGI data, then the value of [method get_bounds] and [member VoxelGI.size] will not match.
*/
//go:nosplit
func (self class) GetBounds() AABB.PositionSize { //gd:VoxelGIData.get_bounds
	var r_ret = gdextension.Call[AABB.PositionSize](gd.ObjectChecked(self.AsObject()), methods.get_bounds, gdextension.SizeAABB, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetOctreeSize() Vector3.XYZ { //gd:VoxelGIData.get_octree_size
	var r_ret = gdextension.Call[Vector3.XYZ](gd.ObjectChecked(self.AsObject()), methods.get_octree_size, gdextension.SizeVector3, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) GetToCellXform() Transform3D.BasisOrigin { //gd:VoxelGIData.get_to_cell_xform
	var r_ret = gdextension.Call[Transform3D.BasisOrigin](gd.ObjectChecked(self.AsObject()), methods.get_to_cell_xform, gdextension.SizeTransform3D, unsafe.Pointer(&struct{}{}))
	var ret = gd.Transposed(r_ret)
	return ret
}

//go:nosplit
func (self class) GetOctreeCells() Packed.Bytes { //gd:VoxelGIData.get_octree_cells
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_octree_cells, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) GetDataCells() Packed.Bytes { //gd:VoxelGIData.get_data_cells
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_data_cells, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Bytes(Array.Through(gd.PackedProxy[gd.PackedByteArray, byte]{}, pointers.Pack(pointers.Let[gd.PackedByteArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) GetLevelCounts() Packed.Array[int32] { //gd:VoxelGIData.get_level_counts
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_level_counts, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Array[int32](Array.Through(gd.PackedProxy[gd.PackedInt32Array, int32]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

//go:nosplit
func (self class) SetDynamicRange(dynamic_range float64) { //gd:VoxelGIData.set_dynamic_range
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_dynamic_range, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ dynamic_range float64 }{dynamic_range}))
}

//go:nosplit
func (self class) GetDynamicRange() float64 { //gd:VoxelGIData.get_dynamic_range
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_dynamic_range, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEnergy(energy float64) { //gd:VoxelGIData.set_energy
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_energy, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ energy float64 }{energy}))
}

//go:nosplit
func (self class) GetEnergy() float64 { //gd:VoxelGIData.get_energy
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_energy, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBias(bias float64) { //gd:VoxelGIData.set_bias
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bias, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ bias float64 }{bias}))
}

//go:nosplit
func (self class) GetBias() float64 { //gd:VoxelGIData.get_bias
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_bias, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetNormalBias(bias float64) { //gd:VoxelGIData.set_normal_bias
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_normal_bias, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ bias float64 }{bias}))
}

//go:nosplit
func (self class) GetNormalBias() float64 { //gd:VoxelGIData.get_normal_bias
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_normal_bias, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPropagation(propagation float64) { //gd:VoxelGIData.set_propagation
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_propagation, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ propagation float64 }{propagation}))
}

//go:nosplit
func (self class) GetPropagation() float64 { //gd:VoxelGIData.get_propagation
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_propagation, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetInterior(interior bool) { //gd:VoxelGIData.set_interior
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_interior, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ interior bool }{interior}))
}

//go:nosplit
func (self class) IsInterior() bool { //gd:VoxelGIData.is_interior
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_interior, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetUseTwoBounces(enable bool) { //gd:VoxelGIData.set_use_two_bounces
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_use_two_bounces, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) IsUsingTwoBounces() bool { //gd:VoxelGIData.is_using_two_bounces
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_using_two_bounces, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsVoxelGIData() Advanced {
	return Advanced{pointers.AsA[gdclass.VoxelGIData](self[0])}
}
func (self Instance) AsVoxelGIData() Instance {
	return Instance{pointers.AsA[gdclass.VoxelGIData](self[0])}
}
func (self *Extension[T]) AsVoxelGIData() Instance { return self.Super().AsVoxelGIData() }
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("VoxelGIData", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.VoxelGIData](ptr)} })
}
