// Code generated by the generate package DO NOT EDIT

// Package EditorFileDialog provides methods for working with EditorFileDialog object instances.
package EditorFileDialog

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/AcceptDialog"
import "graphics.gd/classdb/ConfirmationDialog"
import "graphics.gd/classdb/Control"
import "graphics.gd/classdb/LineEdit"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/VBoxContainer"
import "graphics.gd/classdb/Viewport"
import "graphics.gd/classdb/Window"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[EditorFileDialog] is an enhanced version of [FileDialog] available only to editor plugins. Additional features include list of favorited/recent files and the ability to see files as thumbnails grid instead of list.
Unlike [FileDialog], [EditorFileDialog] does not have a property for using native dialogs. Instead, native dialogs can be enabled globally via the [member EditorSettings.interface/editor/use_native_file_dialogs] editor setting. They are also enabled automatically when running in sandbox (e.g. on macOS).
*/
type Instance [1]gdclass.EditorFileDialog

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.EditorFileDialog

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsEditorFileDialog() Instance
}

/*
Removes all filters except for "All Files (*.*)".
*/
func (self Instance) ClearFilters() { //gd:EditorFileDialog.clear_filters
	Advanced(self).ClearFilters()
}

/*
Adds a comma-delimited file name [param filter] option to the [EditorFileDialog] with an optional [param description], which restricts what files can be picked.
A [param filter] should be of the form [code]"filename.extension"[/code], where filename and extension can be [code]*[/code] to match any string. Filters starting with [code].[/code] (i.e. empty filenames) are not allowed.
For example, a [param filter] of [code]"*.tscn, *.scn"[/code] and a [param description] of [code]"Scenes"[/code] results in filter text "Scenes (*.tscn, *.scn)".
*/
func (self Instance) AddFilter(filter string) { //gd:EditorFileDialog.add_filter
	Advanced(self).AddFilter(String.New(filter), String.New(""))
}

/*
Adds a comma-delimited file name [param filter] option to the [EditorFileDialog] with an optional [param description], which restricts what files can be picked.
A [param filter] should be of the form [code]"filename.extension"[/code], where filename and extension can be [code]*[/code] to match any string. Filters starting with [code].[/code] (i.e. empty filenames) are not allowed.
For example, a [param filter] of [code]"*.tscn, *.scn"[/code] and a [param description] of [code]"Scenes"[/code] results in filter text "Scenes (*.tscn, *.scn)".
*/
func (self Expanded) AddFilter(filter string, description string) { //gd:EditorFileDialog.add_filter
	Advanced(self).AddFilter(String.New(filter), String.New(description))
}

/*
Returns the name of the [OptionButton] or [CheckBox] with index [param option].
*/
func (self Instance) GetOptionName(option int) string { //gd:EditorFileDialog.get_option_name
	return string(Advanced(self).GetOptionName(int64(option)).String())
}

/*
Returns an array of values of the [OptionButton] with index [param option].
*/
func (self Instance) GetOptionValues(option int) []string { //gd:EditorFileDialog.get_option_values
	return []string(Advanced(self).GetOptionValues(int64(option)).Strings())
}

/*
Returns the default value index of the [OptionButton] or [CheckBox] with index [param option].
*/
func (self Instance) GetOptionDefault(option int) int { //gd:EditorFileDialog.get_option_default
	return int(int(Advanced(self).GetOptionDefault(int64(option))))
}

/*
Sets the name of the [OptionButton] or [CheckBox] with index [param option].
*/
func (self Instance) SetOptionName(option int, name string) { //gd:EditorFileDialog.set_option_name
	Advanced(self).SetOptionName(int64(option), String.New(name))
}

/*
Sets the option values of the [OptionButton] with index [param option].
*/
func (self Instance) SetOptionValues(option int, values []string) { //gd:EditorFileDialog.set_option_values
	Advanced(self).SetOptionValues(int64(option), Packed.MakeStrings(values...))
}

/*
Sets the default value index of the [OptionButton] or [CheckBox] with index [param option].
*/
func (self Instance) SetOptionDefault(option int, default_value_index int) { //gd:EditorFileDialog.set_option_default
	Advanced(self).SetOptionDefault(int64(option), int64(default_value_index))
}

/*
Adds an additional [OptionButton] to the file dialog. If [param values] is empty, a [CheckBox] is added instead.
[param default_value_index] should be an index of the value in the [param values]. If [param values] is empty it should be either [code]1[/code] (checked), or [code]0[/code] (unchecked).
*/
func (self Instance) AddOption(name string, values []string, default_value_index int) { //gd:EditorFileDialog.add_option
	Advanced(self).AddOption(String.New(name), Packed.MakeStrings(values...), int64(default_value_index))
}

/*
Returns a [Dictionary] with the selected values of the additional [OptionButton]s and/or [CheckBox]es. [Dictionary] keys are names and values are selected value indices.
*/
func (self Instance) GetSelectedOptions() map[string]int { //gd:EditorFileDialog.get_selected_options
	return map[string]int(gd.DictionaryAs[map[string]int](Advanced(self).GetSelectedOptions()))
}

/*
Clear the filter for file names.
*/
func (self Instance) ClearFilenameFilter() { //gd:EditorFileDialog.clear_filename_filter
	Advanced(self).ClearFilenameFilter()
}

/*
Sets the value of the filter for file names.
*/
func (self Instance) SetFilenameFilter(filter string) { //gd:EditorFileDialog.set_filename_filter
	Advanced(self).SetFilenameFilter(String.New(filter))
}

/*
Returns the value of the filter for file names.
*/
func (self Instance) GetFilenameFilter() string { //gd:EditorFileDialog.get_filename_filter
	return string(Advanced(self).GetFilenameFilter().String())
}

/*
Returns the [VBoxContainer] used to display the file system.
[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their [member CanvasItem.visible] property.
*/
func (self Instance) GetVbox() VBoxContainer.Instance { //gd:EditorFileDialog.get_vbox
	return VBoxContainer.Instance(Advanced(self).GetVbox())
}

/*
Returns the LineEdit for the selected file.
[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their [member CanvasItem.visible] property.
*/
func (self Instance) GetLineEdit() LineEdit.Instance { //gd:EditorFileDialog.get_line_edit
	return LineEdit.Instance(Advanced(self).GetLineEdit())
}

/*
Adds the given [param menu] to the side of the file dialog with the given [param title] text on top. Only one side menu is allowed.
*/
func (self Instance) AddSideMenu(menu Control.Instance) { //gd:EditorFileDialog.add_side_menu
	Advanced(self).AddSideMenu(menu, String.New(""))
}

/*
Adds the given [param menu] to the side of the file dialog with the given [param title] text on top. Only one side menu is allowed.
*/
func (self Expanded) AddSideMenu(menu Control.Instance, title string) { //gd:EditorFileDialog.add_side_menu
	Advanced(self).AddSideMenu(menu, String.New(title))
}

/*
Shows the [EditorFileDialog] at the default size and position for file dialogs in the editor, and selects the file name if there is a current file.
*/
func (self Instance) PopupFileDialog() { //gd:EditorFileDialog.popup_file_dialog
	Advanced(self).PopupFileDialog()
}

/*
Notify the [EditorFileDialog] that its view of the data is no longer accurate. Updates the view contents on next view update.
*/
func (self Instance) Invalidate() { //gd:EditorFileDialog.invalidate
	Advanced(self).Invalidate()
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.EditorFileDialog

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("EditorFileDialog"))
	casted := Instance{*(*gdclass.EditorFileDialog)(unsafe.Pointer(&object))}
	return casted
}

func (self Instance) Access() Access {
	return Access(class(self).GetAccess())
}

func (self Instance) SetAccess(value Access) {
	class(self).SetAccess(value)
}

func (self Instance) DisplayMode() DisplayMode {
	return DisplayMode(class(self).GetDisplayMode())
}

func (self Instance) SetDisplayMode(value DisplayMode) {
	class(self).SetDisplayMode(value)
}

func (self Instance) FileMode() FileMode {
	return FileMode(class(self).GetFileMode())
}

func (self Instance) SetFileMode(value FileMode) {
	class(self).SetFileMode(value)
}

func (self Instance) CurrentDir() string {
	return string(class(self).GetCurrentDir().String())
}

func (self Instance) SetCurrentDir(value string) {
	class(self).SetCurrentDir(String.New(value))
}

func (self Instance) CurrentFile() string {
	return string(class(self).GetCurrentFile().String())
}

func (self Instance) SetCurrentFile(value string) {
	class(self).SetCurrentFile(String.New(value))
}

func (self Instance) CurrentPath() string {
	return string(class(self).GetCurrentPath().String())
}

func (self Instance) SetCurrentPath(value string) {
	class(self).SetCurrentPath(String.New(value))
}

func (self Instance) Filters() []string {
	return []string(class(self).GetFilters().Strings())
}

func (self Instance) SetFilters(value []string) {
	class(self).SetFilters(Packed.MakeStrings(value...))
}

func (self Instance) OptionCount() int {
	return int(int(class(self).GetOptionCount()))
}

func (self Instance) SetOptionCount(value int) {
	class(self).SetOptionCount(int64(value))
}

func (self Instance) ShowHiddenFiles() bool {
	return bool(class(self).IsShowingHiddenFiles())
}

func (self Instance) SetShowHiddenFiles(value bool) {
	class(self).SetShowHiddenFiles(value)
}

func (self Instance) DisableOverwriteWarning() bool {
	return bool(class(self).IsOverwriteWarningDisabled())
}

func (self Instance) SetDisableOverwriteWarning(value bool) {
	class(self).SetDisableOverwriteWarning(value)
}

/*
Removes all filters except for "All Files (*.*)".
*/
//go:nosplit
func (self class) ClearFilters() { //gd:EditorFileDialog.clear_filters
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_clear_filters, 0, unsafe.Pointer(&struct{}{}))
}

/*
Adds a comma-delimited file name [param filter] option to the [EditorFileDialog] with an optional [param description], which restricts what files can be picked.
A [param filter] should be of the form [code]"filename.extension"[/code], where filename and extension can be [code]*[/code] to match any string. Filters starting with [code].[/code] (i.e. empty filenames) are not allowed.
For example, a [param filter] of [code]"*.tscn, *.scn"[/code] and a [param description] of [code]"Scenes"[/code] results in filter text "Scenes (*.tscn, *.scn)".
*/
//go:nosplit
func (self class) AddFilter(filter String.Readable, description String.Readable) { //gd:EditorFileDialog.add_filter
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_add_filter, 0|(gdextension.SizeString<<4)|(gdextension.SizeString<<8), unsafe.Pointer(&struct {
		filter      gdextension.String
		description gdextension.String
	}{gdextension.String(pointers.Get(gd.InternalString(filter))[0]), gdextension.String(pointers.Get(gd.InternalString(description))[0])}))
}

//go:nosplit
func (self class) SetFilters(filters Packed.Strings) { //gd:EditorFileDialog.set_filters
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_set_filters, 0|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct{ filters gdextension.PackedArray }{gdextension.ToPackedArray(pointers.Get(gd.InternalPackedStrings(filters)))}))
}

//go:nosplit
func (self class) GetFilters() Packed.Strings { //gd:EditorFileDialog.get_filters
	var r_ret = gdunsafe.Call[gd.PackedPointers](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_filters, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Strings(Array.Through(gd.PackedStringArrayProxy{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

/*
Returns the name of the [OptionButton] or [CheckBox] with index [param option].
*/
//go:nosplit
func (self class) GetOptionName(option int64) String.Readable { //gd:EditorFileDialog.get_option_name
	var r_ret = gdunsafe.Call[[1]gd.EnginePointer](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_option_name, gdextension.SizeString|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ option int64 }{option}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns an array of values of the [OptionButton] with index [param option].
*/
//go:nosplit
func (self class) GetOptionValues(option int64) Packed.Strings { //gd:EditorFileDialog.get_option_values
	var r_ret = gdunsafe.Call[gd.PackedPointers](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_option_values, gdextension.SizePackedArray|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ option int64 }{option}))
	var ret = Packed.Strings(Array.Through(gd.PackedStringArrayProxy{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

/*
Returns the default value index of the [OptionButton] or [CheckBox] with index [param option].
*/
//go:nosplit
func (self class) GetOptionDefault(option int64) int64 { //gd:EditorFileDialog.get_option_default
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_option_default, gdextension.SizeInt|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ option int64 }{option}))
	var ret = r_ret
	return ret
}

/*
Sets the name of the [OptionButton] or [CheckBox] with index [param option].
*/
//go:nosplit
func (self class) SetOptionName(option int64, name String.Readable) { //gd:EditorFileDialog.set_option_name
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_set_option_name, 0|(gdextension.SizeInt<<4)|(gdextension.SizeString<<8), unsafe.Pointer(&struct {
		option int64
		name   gdextension.String
	}{option, gdextension.String(pointers.Get(gd.InternalString(name))[0])}))
}

/*
Sets the option values of the [OptionButton] with index [param option].
*/
//go:nosplit
func (self class) SetOptionValues(option int64, values Packed.Strings) { //gd:EditorFileDialog.set_option_values
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_set_option_values, 0|(gdextension.SizeInt<<4)|(gdextension.SizePackedArray<<8), unsafe.Pointer(&struct {
		option int64
		values gdextension.PackedArray
	}{option, gdextension.ToPackedArray(pointers.Get(gd.InternalPackedStrings(values)))}))
}

/*
Sets the default value index of the [OptionButton] or [CheckBox] with index [param option].
*/
//go:nosplit
func (self class) SetOptionDefault(option int64, default_value_index int64) { //gd:EditorFileDialog.set_option_default
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_set_option_default, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		option              int64
		default_value_index int64
	}{option, default_value_index}))
}

//go:nosplit
func (self class) SetOptionCount(count int64) { //gd:EditorFileDialog.set_option_count
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_set_option_count, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ count int64 }{count}))
}

//go:nosplit
func (self class) GetOptionCount() int64 { //gd:EditorFileDialog.get_option_count
	var r_ret = gdunsafe.Call[int64](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_option_count, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Adds an additional [OptionButton] to the file dialog. If [param values] is empty, a [CheckBox] is added instead.
[param default_value_index] should be an index of the value in the [param values]. If [param values] is empty it should be either [code]1[/code] (checked), or [code]0[/code] (unchecked).
*/
//go:nosplit
func (self class) AddOption(name String.Readable, values Packed.Strings, default_value_index int64) { //gd:EditorFileDialog.add_option
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_add_option, 0|(gdextension.SizeString<<4)|(gdextension.SizePackedArray<<8)|(gdextension.SizeInt<<12), unsafe.Pointer(&struct {
		name                gdextension.String
		values              gdextension.PackedArray
		default_value_index int64
	}{gdextension.String(pointers.Get(gd.InternalString(name))[0]), gdextension.ToPackedArray(pointers.Get(gd.InternalPackedStrings(values))), default_value_index}))
}

/*
Returns a [Dictionary] with the selected values of the additional [OptionButton]s and/or [CheckBox]es. [Dictionary] keys are names and values are selected value indices.
*/
//go:nosplit
func (self class) GetSelectedOptions() Dictionary.Any { //gd:EditorFileDialog.get_selected_options
	var r_ret = gdunsafe.Call[[1]gd.EnginePointer](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_selected_options, gdextension.SizeDictionary, unsafe.Pointer(&struct{}{}))
	var ret = Dictionary.Through(gd.DictionaryProxy[variant.Any, variant.Any]{}, pointers.Pack(pointers.New[gd.Dictionary](r_ret)))
	return ret
}

/*
Clear the filter for file names.
*/
//go:nosplit
func (self class) ClearFilenameFilter() { //gd:EditorFileDialog.clear_filename_filter
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_clear_filename_filter, 0, unsafe.Pointer(&struct{}{}))
}

/*
Sets the value of the filter for file names.
*/
//go:nosplit
func (self class) SetFilenameFilter(filter String.Readable) { //gd:EditorFileDialog.set_filename_filter
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_set_filename_filter, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ filter gdextension.String }{gdextension.String(pointers.Get(gd.InternalString(filter))[0])}))
}

/*
Returns the value of the filter for file names.
*/
//go:nosplit
func (self class) GetFilenameFilter() String.Readable { //gd:EditorFileDialog.get_filename_filter
	var r_ret = gdunsafe.Call[[1]gd.EnginePointer](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_filename_filter, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) GetCurrentDir() String.Readable { //gd:EditorFileDialog.get_current_dir
	var r_ret = gdunsafe.Call[[1]gd.EnginePointer](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_current_dir, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) GetCurrentFile() String.Readable { //gd:EditorFileDialog.get_current_file
	var r_ret = gdunsafe.Call[[1]gd.EnginePointer](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_current_file, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) GetCurrentPath() String.Readable { //gd:EditorFileDialog.get_current_path
	var r_ret = gdunsafe.Call[[1]gd.EnginePointer](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_current_path, gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

//go:nosplit
func (self class) SetCurrentDir(dir String.Readable) { //gd:EditorFileDialog.set_current_dir
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_set_current_dir, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ dir gdextension.String }{gdextension.String(pointers.Get(gd.InternalString(dir))[0])}))
}

//go:nosplit
func (self class) SetCurrentFile(file String.Readable) { //gd:EditorFileDialog.set_current_file
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_set_current_file, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ file gdextension.String }{gdextension.String(pointers.Get(gd.InternalString(file))[0])}))
}

//go:nosplit
func (self class) SetCurrentPath(path String.Readable) { //gd:EditorFileDialog.set_current_path
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_set_current_path, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ path gdextension.String }{gdextension.String(pointers.Get(gd.InternalString(path))[0])}))
}

//go:nosplit
func (self class) SetFileMode(mode FileMode) { //gd:EditorFileDialog.set_file_mode
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_set_file_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode FileMode }{mode}))
}

//go:nosplit
func (self class) GetFileMode() FileMode { //gd:EditorFileDialog.get_file_mode
	var r_ret = gdunsafe.Call[FileMode](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_file_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the [VBoxContainer] used to display the file system.
[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their [member CanvasItem.visible] property.
*/
//go:nosplit
func (self class) GetVbox() [1]gdclass.VBoxContainer { //gd:EditorFileDialog.get_vbox
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_vbox, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.VBoxContainer{gd.PointerLifetimeBoundTo[gdclass.VBoxContainer](self.AsObject(), r_ret)}
	return ret
}

/*
Returns the LineEdit for the selected file.
[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their [member CanvasItem.visible] property.
*/
//go:nosplit
func (self class) GetLineEdit() [1]gdclass.LineEdit { //gd:EditorFileDialog.get_line_edit
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_line_edit, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.LineEdit{gd.PointerLifetimeBoundTo[gdclass.LineEdit](self.AsObject(), r_ret)}
	return ret
}

//go:nosplit
func (self class) SetAccess(access Access) { //gd:EditorFileDialog.set_access
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_set_access, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ access Access }{access}))
}

//go:nosplit
func (self class) GetAccess() Access { //gd:EditorFileDialog.get_access
	var r_ret = gdunsafe.Call[Access](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_access, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetShowHiddenFiles(show bool) { //gd:EditorFileDialog.set_show_hidden_files
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_set_show_hidden_files, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ show bool }{show}))
}

//go:nosplit
func (self class) IsShowingHiddenFiles() bool { //gd:EditorFileDialog.is_showing_hidden_files
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_is_showing_hidden_files, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDisplayMode(mode DisplayMode) { //gd:EditorFileDialog.set_display_mode
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_set_display_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode DisplayMode }{mode}))
}

//go:nosplit
func (self class) GetDisplayMode() DisplayMode { //gd:EditorFileDialog.get_display_mode
	var r_ret = gdunsafe.Call[DisplayMode](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_get_display_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDisableOverwriteWarning(disable bool) { //gd:EditorFileDialog.set_disable_overwrite_warning
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_set_disable_overwrite_warning, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ disable bool }{disable}))
}

//go:nosplit
func (self class) IsOverwriteWarningDisabled() bool { //gd:EditorFileDialog.is_overwrite_warning_disabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_is_overwrite_warning_disabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Adds the given [param menu] to the side of the file dialog with the given [param title] text on top. Only one side menu is allowed.
*/
//go:nosplit
func (self class) AddSideMenu(menu [1]gdclass.Control, title String.Readable) { //gd:EditorFileDialog.add_side_menu
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_add_side_menu, 0|(gdextension.SizeObject<<4)|(gdextension.SizeString<<8), unsafe.Pointer(&struct {
		menu  gdextension.Object
		title gdextension.String
	}{gdextension.Object(gd.PointerWithOwnershipTransferredToGodot(menu[0].AsObject()[0])), gdextension.String(pointers.Get(gd.InternalString(title))[0])}))
}

/*
Shows the [EditorFileDialog] at the default size and position for file dialogs in the editor, and selects the file name if there is a current file.
*/
//go:nosplit
func (self class) PopupFileDialog() { //gd:EditorFileDialog.popup_file_dialog
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_popup_file_dialog, 0, unsafe.Pointer(&struct{}{}))
}

/*
Notify the [EditorFileDialog] that its view of the data is no longer accurate. Updates the view contents on next view update.
*/
//go:nosplit
func (self class) Invalidate() { //gd:EditorFileDialog.invalidate
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.EditorFileDialog.Bind_invalidate, 0, unsafe.Pointer(&struct{}{}))
}
func (self Instance) OnFileSelected(cb func(path string)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("file_selected"), gd.NewCallable(cb), 0)
}

func (self Instance) OnFilesSelected(cb func(paths []string)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("files_selected"), gd.NewCallable(cb), 0)
}

func (self Instance) OnDirSelected(cb func(dir string)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("dir_selected"), gd.NewCallable(cb), 0)
}

func (self Instance) OnFilenameFilterChanged(cb func(filter string)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("filename_filter_changed"), gd.NewCallable(cb), 0)
}

func (self class) AsEditorFileDialog() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsEditorFileDialog() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsEditorFileDialog() Instance { return self.Super().AsEditorFileDialog() }
func (self class) AsConfirmationDialog() ConfirmationDialog.Advanced {
	return *((*ConfirmationDialog.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsConfirmationDialog() ConfirmationDialog.Instance {
	return self.Super().AsConfirmationDialog()
}
func (self Instance) AsConfirmationDialog() ConfirmationDialog.Instance {
	return *((*ConfirmationDialog.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsAcceptDialog() AcceptDialog.Advanced {
	return *((*AcceptDialog.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsAcceptDialog() AcceptDialog.Instance {
	return self.Super().AsAcceptDialog()
}
func (self Instance) AsAcceptDialog() AcceptDialog.Instance {
	return *((*AcceptDialog.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsWindow() Window.Advanced         { return *((*Window.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsWindow() Window.Instance { return self.Super().AsWindow() }
func (self Instance) AsWindow() Window.Instance      { return *((*Window.Instance)(unsafe.Pointer(&self))) }
func (self class) AsViewport() Viewport.Advanced {
	return *((*Viewport.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsViewport() Viewport.Instance { return self.Super().AsViewport() }
func (self Instance) AsViewport() Viewport.Instance {
	return *((*Viewport.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(ConfirmationDialog.Advanced(self.AsConfirmationDialog()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(ConfirmationDialog.Instance(self.AsConfirmationDialog()), name)
	}
}
func init() {
	gdclass.Register("EditorFileDialog", func(ptr gd.Object) any {
		return [1]gdclass.EditorFileDialog{*(*gdclass.EditorFileDialog)(unsafe.Pointer(&ptr))}
	})
}

type FileMode int //gd:EditorFileDialog.FileMode

const (
	/*The [EditorFileDialog] can select only one file. Accepting the window will open the file.*/
	FileModeOpenFile FileMode = 0
	/*The [EditorFileDialog] can select multiple files. Accepting the window will open all files.*/
	FileModeOpenFiles FileMode = 1
	/*The [EditorFileDialog] can select only one directory. Accepting the window will open the directory.*/
	FileModeOpenDir FileMode = 2
	/*The [EditorFileDialog] can select a file or directory. Accepting the window will open it.*/
	FileModeOpenAny FileMode = 3
	/*The [EditorFileDialog] can select only one file. Accepting the window will save the file.*/
	FileModeSaveFile FileMode = 4
)

type Access int //gd:EditorFileDialog.Access

const (
	/*The [EditorFileDialog] can only view [code]res://[/code] directory contents.*/
	AccessResources Access = 0
	/*The [EditorFileDialog] can only view [code]user://[/code] directory contents.*/
	AccessUserdata Access = 1
	/*The [EditorFileDialog] can view the entire local file system.*/
	AccessFilesystem Access = 2
)

type DisplayMode int //gd:EditorFileDialog.DisplayMode

const (
	/*The [EditorFileDialog] displays resources as thumbnails.*/
	DisplayThumbnails DisplayMode = 0
	/*The [EditorFileDialog] displays resources as a list of filenames.*/
	DisplayList DisplayMode = 1
)
