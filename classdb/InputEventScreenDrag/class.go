// Code generated by the generate package DO NOT EDIT

// Package InputEventScreenDrag provides methods for working with InputEventScreenDrag object instances.
package InputEventScreenDrag

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/InputEvent"
import "graphics.gd/classdb/InputEventFromWindow"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Stores information about screen drag events. See [method Node._input].
*/
type Instance [1]gdclass.InputEventScreenDrag

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsInputEventScreenDrag() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.InputEventScreenDrag

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(pointers.Get(gd.NewStringName("InputEventScreenDrag"))))})}
	casted := Instance{*(*gdclass.InputEventScreenDrag)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) Index() int {
	return int(int(class(self).GetIndex()))
}

func (self Instance) SetIndex(value int) {
	class(self).SetIndex(int64(value))
}

func (self Instance) Tilt() Vector2.XY {
	return Vector2.XY(class(self).GetTilt())
}

func (self Instance) SetTilt(value Vector2.XY) {
	class(self).SetTilt(Vector2.XY(value))
}

func (self Instance) Pressure() Float.X {
	return Float.X(Float.X(class(self).GetPressure()))
}

func (self Instance) SetPressure(value Float.X) {
	class(self).SetPressure(float64(value))
}

func (self Instance) PenInverted() bool {
	return bool(class(self).GetPenInverted())
}

func (self Instance) SetPenInverted(value bool) {
	class(self).SetPenInverted(value)
}

func (self Instance) Position() Vector2.XY {
	return Vector2.XY(class(self).GetPosition())
}

func (self Instance) SetPosition(value Vector2.XY) {
	class(self).SetPosition(Vector2.XY(value))
}

func (self Instance) Relative() Vector2.XY {
	return Vector2.XY(class(self).GetRelative())
}

func (self Instance) SetRelative(value Vector2.XY) {
	class(self).SetRelative(Vector2.XY(value))
}

func (self Instance) ScreenRelative() Vector2.XY {
	return Vector2.XY(class(self).GetScreenRelative())
}

func (self Instance) SetScreenRelative(value Vector2.XY) {
	class(self).SetScreenRelative(Vector2.XY(value))
}

func (self Instance) Velocity() Vector2.XY {
	return Vector2.XY(class(self).GetVelocity())
}

func (self Instance) SetVelocity(value Vector2.XY) {
	class(self).SetVelocity(Vector2.XY(value))
}

func (self Instance) ScreenVelocity() Vector2.XY {
	return Vector2.XY(class(self).GetScreenVelocity())
}

func (self Instance) SetScreenVelocity(value Vector2.XY) {
	class(self).SetScreenVelocity(Vector2.XY(value))
}

//go:nosplit
func (self class) SetIndex(index int64) { //gd:InputEventScreenDrag.set_index
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_set_index), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ index int64 }{index}))
}

//go:nosplit
func (self class) GetIndex() int64 { //gd:InputEventScreenDrag.get_index
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_get_index), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetTilt(tilt Vector2.XY) { //gd:InputEventScreenDrag.set_tilt
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_set_tilt), 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ tilt Vector2.XY }{tilt}))
}

//go:nosplit
func (self class) GetTilt() Vector2.XY { //gd:InputEventScreenDrag.get_tilt
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_get_tilt), gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPressure(pressure float64) { //gd:InputEventScreenDrag.set_pressure
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_set_pressure), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ pressure float64 }{pressure}))
}

//go:nosplit
func (self class) GetPressure() float64 { //gd:InputEventScreenDrag.get_pressure
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_get_pressure), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPenInverted(pen_inverted bool) { //gd:InputEventScreenDrag.set_pen_inverted
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_set_pen_inverted), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ pen_inverted bool }{pen_inverted}))
}

//go:nosplit
func (self class) GetPenInverted() bool { //gd:InputEventScreenDrag.get_pen_inverted
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_get_pen_inverted), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPosition(position Vector2.XY) { //gd:InputEventScreenDrag.set_position
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_set_position), 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ position Vector2.XY }{position}))
}

//go:nosplit
func (self class) GetPosition() Vector2.XY { //gd:InputEventScreenDrag.get_position
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_get_position), gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRelative(relative Vector2.XY) { //gd:InputEventScreenDrag.set_relative
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_set_relative), 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ relative Vector2.XY }{relative}))
}

//go:nosplit
func (self class) GetRelative() Vector2.XY { //gd:InputEventScreenDrag.get_relative
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_get_relative), gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetScreenRelative(relative Vector2.XY) { //gd:InputEventScreenDrag.set_screen_relative
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_set_screen_relative), 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ relative Vector2.XY }{relative}))
}

//go:nosplit
func (self class) GetScreenRelative() Vector2.XY { //gd:InputEventScreenDrag.get_screen_relative
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_get_screen_relative), gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVelocity(velocity Vector2.XY) { //gd:InputEventScreenDrag.set_velocity
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_set_velocity), 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ velocity Vector2.XY }{velocity}))
}

//go:nosplit
func (self class) GetVelocity() Vector2.XY { //gd:InputEventScreenDrag.get_velocity
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_get_velocity), gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetScreenVelocity(velocity Vector2.XY) { //gd:InputEventScreenDrag.set_screen_velocity
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_set_screen_velocity), 0|(gdextension.SizeVector2<<4), unsafe.Pointer(&struct{ velocity Vector2.XY }{velocity}))
}

//go:nosplit
func (self class) GetScreenVelocity() Vector2.XY { //gd:InputEventScreenDrag.get_screen_velocity
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.InputEventScreenDrag.Bind_get_screen_velocity), gdextension.SizeVector2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsInputEventScreenDrag() Advanced    { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsInputEventScreenDrag() Instance { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsInputEventScreenDrag() Instance {
	return self.Super().AsInputEventScreenDrag()
}
func (self class) AsInputEventFromWindow() InputEventFromWindow.Advanced {
	return *((*InputEventFromWindow.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsInputEventFromWindow() InputEventFromWindow.Instance {
	return self.Super().AsInputEventFromWindow()
}
func (self Instance) AsInputEventFromWindow() InputEventFromWindow.Instance {
	return *((*InputEventFromWindow.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsInputEvent() InputEvent.Advanced {
	return *((*InputEvent.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsInputEvent() InputEvent.Instance { return self.Super().AsInputEvent() }
func (self Instance) AsInputEvent() InputEvent.Instance {
	return *((*InputEvent.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(InputEventFromWindow.Advanced(self.AsInputEventFromWindow()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(InputEventFromWindow.Instance(self.AsInputEventFromWindow()), name)
	}
}
func init() {
	gdclass.Register("InputEventScreenDrag", func(ptr gd.Object) any {
		return [1]gdclass.InputEventScreenDrag{*(*gdclass.InputEventScreenDrag)(unsafe.Pointer(&ptr))}
	})
}
