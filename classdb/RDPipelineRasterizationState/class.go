// Code generated by the generate package DO NOT EDIT

// Package RDPipelineRasterizationState provides methods for working with RDPipelineRasterizationState object instances.
package RDPipelineRasterizationState

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Rendering"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This object is used by [RenderingDevice].
*/
type Instance [1]gdclass.RDPipelineRasterizationState

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_enable_depth_clamp         gdextension.MethodForClass `hash:"2586408642"`
	get_enable_depth_clamp         gdextension.MethodForClass `hash:"36873697"`
	set_discard_primitives         gdextension.MethodForClass `hash:"2586408642"`
	get_discard_primitives         gdextension.MethodForClass `hash:"36873697"`
	set_wireframe                  gdextension.MethodForClass `hash:"2586408642"`
	get_wireframe                  gdextension.MethodForClass `hash:"36873697"`
	set_cull_mode                  gdextension.MethodForClass `hash:"2662586502"`
	get_cull_mode                  gdextension.MethodForClass `hash:"2192484313"`
	set_front_face                 gdextension.MethodForClass `hash:"2637251213"`
	get_front_face                 gdextension.MethodForClass `hash:"708793786"`
	set_depth_bias_enabled         gdextension.MethodForClass `hash:"2586408642"`
	get_depth_bias_enabled         gdextension.MethodForClass `hash:"36873697"`
	set_depth_bias_constant_factor gdextension.MethodForClass `hash:"373806689"`
	get_depth_bias_constant_factor gdextension.MethodForClass `hash:"1740695150"`
	set_depth_bias_clamp           gdextension.MethodForClass `hash:"373806689"`
	get_depth_bias_clamp           gdextension.MethodForClass `hash:"1740695150"`
	set_depth_bias_slope_factor    gdextension.MethodForClass `hash:"373806689"`
	get_depth_bias_slope_factor    gdextension.MethodForClass `hash:"1740695150"`
	set_line_width                 gdextension.MethodForClass `hash:"373806689"`
	get_line_width                 gdextension.MethodForClass `hash:"1740695150"`
	set_patch_control_points       gdextension.MethodForClass `hash:"1286410249"`
	get_patch_control_points       gdextension.MethodForClass `hash:"3905245786"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("RDPipelineRasterizationState")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsRDPipelineRasterizationState() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.RDPipelineRasterizationState

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.RDPipelineRasterizationState](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.RDPipelineRasterizationState](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.RDPipelineRasterizationState{pointers.Add[gdclass.RDPipelineRasterizationState]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.RDPipelineRasterizationState{pointers.New[gdclass.RDPipelineRasterizationState]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) EnableDepthClamp() bool {
	return bool(class(self).GetEnableDepthClamp())
}

func (self Instance) SetEnableDepthClamp(value bool) {
	class(self).SetEnableDepthClamp(value)
}

func (self Instance) DiscardPrimitives() bool {
	return bool(class(self).GetDiscardPrimitives())
}

func (self Instance) SetDiscardPrimitives(value bool) {
	class(self).SetDiscardPrimitives(value)
}

func (self Instance) Wireframe() bool {
	return bool(class(self).GetWireframe())
}

func (self Instance) SetWireframe(value bool) {
	class(self).SetWireframe(value)
}

func (self Instance) CullMode() Rendering.PolygonCullMode {
	return Rendering.PolygonCullMode(class(self).GetCullMode())
}

func (self Instance) SetCullMode(value Rendering.PolygonCullMode) {
	class(self).SetCullMode(value)
}

func (self Instance) FrontFace() Rendering.PolygonFrontFace {
	return Rendering.PolygonFrontFace(class(self).GetFrontFace())
}

func (self Instance) SetFrontFace(value Rendering.PolygonFrontFace) {
	class(self).SetFrontFace(value)
}

func (self Instance) DepthBiasEnabled() bool {
	return bool(class(self).GetDepthBiasEnabled())
}

func (self Instance) SetDepthBiasEnabled(value bool) {
	class(self).SetDepthBiasEnabled(value)
}

func (self Instance) DepthBiasConstantFactor() Float.X {
	return Float.X(Float.X(class(self).GetDepthBiasConstantFactor()))
}

func (self Instance) SetDepthBiasConstantFactor(value Float.X) {
	class(self).SetDepthBiasConstantFactor(float64(value))
}

func (self Instance) DepthBiasClamp() Float.X {
	return Float.X(Float.X(class(self).GetDepthBiasClamp()))
}

func (self Instance) SetDepthBiasClamp(value Float.X) {
	class(self).SetDepthBiasClamp(float64(value))
}

func (self Instance) DepthBiasSlopeFactor() Float.X {
	return Float.X(Float.X(class(self).GetDepthBiasSlopeFactor()))
}

func (self Instance) SetDepthBiasSlopeFactor(value Float.X) {
	class(self).SetDepthBiasSlopeFactor(float64(value))
}

func (self Instance) LineWidth() Float.X {
	return Float.X(Float.X(class(self).GetLineWidth()))
}

func (self Instance) SetLineWidth(value Float.X) {
	class(self).SetLineWidth(float64(value))
}

func (self Instance) PatchControlPoints() int {
	return int(int(class(self).GetPatchControlPoints()))
}

func (self Instance) SetPatchControlPoints(value int) {
	class(self).SetPatchControlPoints(int64(value))
}

//go:nosplit
func (self class) SetEnableDepthClamp(p_member bool) { //gd:RDPipelineRasterizationState.set_enable_depth_clamp
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_enable_depth_clamp, 0|(gdextension.SizeBool<<4), &struct{ p_member bool }{p_member})
}

//go:nosplit
func (self class) GetEnableDepthClamp() bool { //gd:RDPipelineRasterizationState.get_enable_depth_clamp
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_enable_depth_clamp, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDiscardPrimitives(p_member bool) { //gd:RDPipelineRasterizationState.set_discard_primitives
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_discard_primitives, 0|(gdextension.SizeBool<<4), &struct{ p_member bool }{p_member})
}

//go:nosplit
func (self class) GetDiscardPrimitives() bool { //gd:RDPipelineRasterizationState.get_discard_primitives
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_discard_primitives, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWireframe(p_member bool) { //gd:RDPipelineRasterizationState.set_wireframe
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_wireframe, 0|(gdextension.SizeBool<<4), &struct{ p_member bool }{p_member})
}

//go:nosplit
func (self class) GetWireframe() bool { //gd:RDPipelineRasterizationState.get_wireframe
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_wireframe, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCullMode(p_member Rendering.PolygonCullMode) { //gd:RDPipelineRasterizationState.set_cull_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_cull_mode, 0|(gdextension.SizeInt<<4), &struct{ p_member Rendering.PolygonCullMode }{p_member})
}

//go:nosplit
func (self class) GetCullMode() Rendering.PolygonCullMode { //gd:RDPipelineRasterizationState.get_cull_mode
	var r_ret = gdextension.Call[Rendering.PolygonCullMode](gd.ObjectChecked(self.AsObject()), methods.get_cull_mode, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFrontFace(p_member Rendering.PolygonFrontFace) { //gd:RDPipelineRasterizationState.set_front_face
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_front_face, 0|(gdextension.SizeInt<<4), &struct{ p_member Rendering.PolygonFrontFace }{p_member})
}

//go:nosplit
func (self class) GetFrontFace() Rendering.PolygonFrontFace { //gd:RDPipelineRasterizationState.get_front_face
	var r_ret = gdextension.Call[Rendering.PolygonFrontFace](gd.ObjectChecked(self.AsObject()), methods.get_front_face, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDepthBiasEnabled(p_member bool) { //gd:RDPipelineRasterizationState.set_depth_bias_enabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_depth_bias_enabled, 0|(gdextension.SizeBool<<4), &struct{ p_member bool }{p_member})
}

//go:nosplit
func (self class) GetDepthBiasEnabled() bool { //gd:RDPipelineRasterizationState.get_depth_bias_enabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_depth_bias_enabled, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDepthBiasConstantFactor(p_member float64) { //gd:RDPipelineRasterizationState.set_depth_bias_constant_factor
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_depth_bias_constant_factor, 0|(gdextension.SizeFloat<<4), &struct{ p_member float64 }{p_member})
}

//go:nosplit
func (self class) GetDepthBiasConstantFactor() float64 { //gd:RDPipelineRasterizationState.get_depth_bias_constant_factor
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_depth_bias_constant_factor, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDepthBiasClamp(p_member float64) { //gd:RDPipelineRasterizationState.set_depth_bias_clamp
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_depth_bias_clamp, 0|(gdextension.SizeFloat<<4), &struct{ p_member float64 }{p_member})
}

//go:nosplit
func (self class) GetDepthBiasClamp() float64 { //gd:RDPipelineRasterizationState.get_depth_bias_clamp
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_depth_bias_clamp, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDepthBiasSlopeFactor(p_member float64) { //gd:RDPipelineRasterizationState.set_depth_bias_slope_factor
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_depth_bias_slope_factor, 0|(gdextension.SizeFloat<<4), &struct{ p_member float64 }{p_member})
}

//go:nosplit
func (self class) GetDepthBiasSlopeFactor() float64 { //gd:RDPipelineRasterizationState.get_depth_bias_slope_factor
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_depth_bias_slope_factor, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetLineWidth(p_member float64) { //gd:RDPipelineRasterizationState.set_line_width
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_line_width, 0|(gdextension.SizeFloat<<4), &struct{ p_member float64 }{p_member})
}

//go:nosplit
func (self class) GetLineWidth() float64 { //gd:RDPipelineRasterizationState.get_line_width
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_line_width, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetPatchControlPoints(p_member int64) { //gd:RDPipelineRasterizationState.set_patch_control_points
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_patch_control_points, 0|(gdextension.SizeInt<<4), &struct{ p_member int64 }{p_member})
}

//go:nosplit
func (self class) GetPatchControlPoints() int64 { //gd:RDPipelineRasterizationState.get_patch_control_points
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_patch_control_points, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsRDPipelineRasterizationState() Advanced {
	return Advanced{pointers.AsA[gdclass.RDPipelineRasterizationState](self[0])}
}
func (self Instance) AsRDPipelineRasterizationState() Instance {
	return Instance{pointers.AsA[gdclass.RDPipelineRasterizationState](self[0])}
}
func (self *Extension[T]) AsRDPipelineRasterizationState() Instance {
	return self.Super().AsRDPipelineRasterizationState()
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("RDPipelineRasterizationState", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.RDPipelineRasterizationState](ptr)} })
}
