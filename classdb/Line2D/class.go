// Code generated by the generate package DO NOT EDIT

// Package Line2D provides methods for working with Line2D object instances.
package Line2D

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Curve"
import "graphics.gd/classdb/Gradient"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node2D"
import "graphics.gd/classdb/Texture2D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector2"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This node draws a 2D polyline, i.e. a shape consisting of several points connected by segments. [Line2D] is not a mathematical polyline, i.e. the segments are not infinitely thin. It is intended for rendering and it can be colored and optionally textured.
[b]Warning:[/b] Certain configurations may be impossible to draw nicely, such as very sharp angles. In these situations, the node uses fallback drawing logic to look decent.
[b]Note:[/b] [Line2D] is drawn using a 2D mesh.
*/
type Instance [1]gdclass.Line2D

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_points          gdextension.MethodForClass `hash:"1509147220"`
	get_points          gdextension.MethodForClass `hash:"2961356807"`
	set_point_position  gdextension.MethodForClass `hash:"163021252"`
	get_point_position  gdextension.MethodForClass `hash:"2299179447"`
	get_point_count     gdextension.MethodForClass `hash:"3905245786"`
	add_point           gdextension.MethodForClass `hash:"2654014372"`
	remove_point        gdextension.MethodForClass `hash:"1286410249"`
	clear_points        gdextension.MethodForClass `hash:"3218959716"`
	set_closed          gdextension.MethodForClass `hash:"2586408642"`
	is_closed           gdextension.MethodForClass `hash:"36873697"`
	set_width           gdextension.MethodForClass `hash:"373806689"`
	get_width           gdextension.MethodForClass `hash:"1740695150"`
	set_curve           gdextension.MethodForClass `hash:"270443179"`
	get_curve           gdextension.MethodForClass `hash:"2460114913"`
	set_default_color   gdextension.MethodForClass `hash:"2920490490"`
	get_default_color   gdextension.MethodForClass `hash:"3444240500"`
	set_gradient        gdextension.MethodForClass `hash:"2756054477"`
	get_gradient        gdextension.MethodForClass `hash:"132272999"`
	set_texture         gdextension.MethodForClass `hash:"4051416890"`
	get_texture         gdextension.MethodForClass `hash:"3635182373"`
	set_texture_mode    gdextension.MethodForClass `hash:"1952559516"`
	get_texture_mode    gdextension.MethodForClass `hash:"2341040722"`
	set_joint_mode      gdextension.MethodForClass `hash:"604292979"`
	get_joint_mode      gdextension.MethodForClass `hash:"2546544037"`
	set_begin_cap_mode  gdextension.MethodForClass `hash:"1669024546"`
	get_begin_cap_mode  gdextension.MethodForClass `hash:"1107511441"`
	set_end_cap_mode    gdextension.MethodForClass `hash:"1669024546"`
	get_end_cap_mode    gdextension.MethodForClass `hash:"1107511441"`
	set_sharp_limit     gdextension.MethodForClass `hash:"373806689"`
	get_sharp_limit     gdextension.MethodForClass `hash:"1740695150"`
	set_round_precision gdextension.MethodForClass `hash:"1286410249"`
	get_round_precision gdextension.MethodForClass `hash:"3905245786"`
	set_antialiased     gdextension.MethodForClass `hash:"2586408642"`
	get_antialiased     gdextension.MethodForClass `hash:"36873697"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("Line2D")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

type Expanded [1]gdclass.Line2D

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsLine2D() Instance
}

/*
Overwrites the position of the point at the given [param index] with the supplied [param position].
*/
func (self Instance) SetPointPosition(index int, position Vector2.XY) { //gd:Line2D.set_point_position
	Advanced(self).SetPointPosition(int64(index), Vector2.XY(position))
}

/*
Returns the position of the point at index [param index].
*/
func (self Instance) GetPointPosition(index int) Vector2.XY { //gd:Line2D.get_point_position
	return Vector2.XY(Advanced(self).GetPointPosition(int64(index)))
}

/*
Returns the number of points in the polyline.
*/
func (self Instance) GetPointCount() int { //gd:Line2D.get_point_count
	return int(int(Advanced(self).GetPointCount()))
}

/*
Adds a point with the specified [param position] relative to the polyline's own position. If no [param index] is provided, the new point will be added to the end of the points array.
If [param index] is given, the new point is inserted before the existing point identified by index [param index]. The indices of the points after the new point get increased by 1. The provided [param index] must not exceed the number of existing points in the polyline. See [method get_point_count].
*/
func (self Instance) AddPoint(position Vector2.XY) { //gd:Line2D.add_point
	Advanced(self).AddPoint(Vector2.XY(position), int64(-1))
}

/*
Adds a point with the specified [param position] relative to the polyline's own position. If no [param index] is provided, the new point will be added to the end of the points array.
If [param index] is given, the new point is inserted before the existing point identified by index [param index]. The indices of the points after the new point get increased by 1. The provided [param index] must not exceed the number of existing points in the polyline. See [method get_point_count].
*/
func (self Expanded) AddPoint(position Vector2.XY, index int) { //gd:Line2D.add_point
	Advanced(self).AddPoint(Vector2.XY(position), int64(index))
}

/*
Removes the point at index [param index] from the polyline.
*/
func (self Instance) RemovePoint(index int) { //gd:Line2D.remove_point
	Advanced(self).RemovePoint(int64(index))
}

/*
Removes all points from the polyline, making it empty.
*/
func (self Instance) ClearPoints() { //gd:Line2D.clear_points
	Advanced(self).ClearPoints()
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.Line2D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.Line2D)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.Line2D)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.Line2D)(unsafe.Pointer(&object))}
	object[0].Notification(0, false)
	return casted
}

func (self Instance) Points() []Vector2.XY {
	return []Vector2.XY(slices.Collect(class(self).GetPoints().Values()))
}

func (self Instance) SetPoints(value []Vector2.XY) {
	class(self).SetPoints(Packed.New(value...))
}

func (self Instance) Closed() bool {
	return bool(class(self).IsClosed())
}

func (self Instance) SetClosed(value bool) {
	class(self).SetClosed(value)
}

func (self Instance) Width() Float.X {
	return Float.X(Float.X(class(self).GetWidth()))
}

func (self Instance) SetWidth(value Float.X) {
	class(self).SetWidth(float64(value))
}

func (self Instance) WidthCurve() Curve.Instance {
	return Curve.Instance(class(self).GetCurve())
}

func (self Instance) SetWidthCurve(value Curve.Instance) {
	class(self).SetCurve(value)
}

func (self Instance) DefaultColor() Color.RGBA {
	return Color.RGBA(class(self).GetDefaultColor())
}

func (self Instance) SetDefaultColor(value Color.RGBA) {
	class(self).SetDefaultColor(Color.RGBA(value))
}

func (self Instance) Gradient() Gradient.Instance {
	return Gradient.Instance(class(self).GetGradient())
}

func (self Instance) SetGradient(value Gradient.Instance) {
	class(self).SetGradient(value)
}

func (self Instance) Texture() Texture2D.Instance {
	return Texture2D.Instance(class(self).GetTexture())
}

func (self Instance) SetTexture(value Texture2D.Instance) {
	class(self).SetTexture(value)
}

func (self Instance) TextureMode() LineTextureMode {
	return LineTextureMode(class(self).GetTextureMode())
}

func (self Instance) SetTextureMode(value LineTextureMode) {
	class(self).SetTextureMode(value)
}

func (self Instance) JointMode() LineJointMode {
	return LineJointMode(class(self).GetJointMode())
}

func (self Instance) SetJointMode(value LineJointMode) {
	class(self).SetJointMode(value)
}

func (self Instance) BeginCapMode() LineCapMode {
	return LineCapMode(class(self).GetBeginCapMode())
}

func (self Instance) SetBeginCapMode(value LineCapMode) {
	class(self).SetBeginCapMode(value)
}

func (self Instance) EndCapMode() LineCapMode {
	return LineCapMode(class(self).GetEndCapMode())
}

func (self Instance) SetEndCapMode(value LineCapMode) {
	class(self).SetEndCapMode(value)
}

func (self Instance) SharpLimit() Float.X {
	return Float.X(Float.X(class(self).GetSharpLimit()))
}

func (self Instance) SetSharpLimit(value Float.X) {
	class(self).SetSharpLimit(float64(value))
}

func (self Instance) RoundPrecision() int {
	return int(int(class(self).GetRoundPrecision()))
}

func (self Instance) SetRoundPrecision(value int) {
	class(self).SetRoundPrecision(int64(value))
}

func (self Instance) Antialiased() bool {
	return bool(class(self).GetAntialiased())
}

func (self Instance) SetAntialiased(value bool) {
	class(self).SetAntialiased(value)
}

//go:nosplit
func (self class) SetPoints(points Packed.Array[Vector2.XY]) { //gd:Line2D.set_points
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_points, 0|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct {
		points gdextension.PackedArray[Vector2.XY]
	}{pointers.Get(gd.InternalPacked[gd.PackedVector2Array, Vector2.XY](points))}))
}

//go:nosplit
func (self class) GetPoints() Packed.Array[Vector2.XY] { //gd:Line2D.get_points
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_points, gdextension.SizePackedArray, unsafe.Pointer(&struct{}{}))
	var ret = Packed.Array[Vector2.XY](Array.Through(gd.PackedProxy[gd.PackedVector2Array, Vector2.XY]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

/*
Overwrites the position of the point at the given [param index] with the supplied [param position].
*/
//go:nosplit
func (self class) SetPointPosition(index int64, position Vector2.XY) { //gd:Line2D.set_point_position
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_point_position, 0|(gdextension.SizeInt<<4)|(gdextension.SizeVector2<<8), unsafe.Pointer(&struct {
		index    int64
		position Vector2.XY
	}{index, position}))
}

/*
Returns the position of the point at index [param index].
*/
//go:nosplit
func (self class) GetPointPosition(index int64) Vector2.XY { //gd:Line2D.get_point_position
	var r_ret = gdextension.Call[Vector2.XY](gd.ObjectChecked(self.AsObject()), methods.get_point_position, gdextension.SizeVector2|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ index int64 }{index}))
	var ret = r_ret
	return ret
}

/*
Returns the number of points in the polyline.
*/
//go:nosplit
func (self class) GetPointCount() int64 { //gd:Line2D.get_point_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_point_count, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Adds a point with the specified [param position] relative to the polyline's own position. If no [param index] is provided, the new point will be added to the end of the points array.
If [param index] is given, the new point is inserted before the existing point identified by index [param index]. The indices of the points after the new point get increased by 1. The provided [param index] must not exceed the number of existing points in the polyline. See [method get_point_count].
*/
//go:nosplit
func (self class) AddPoint(position Vector2.XY, index int64) { //gd:Line2D.add_point
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.add_point, 0|(gdextension.SizeVector2<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		position Vector2.XY
		index    int64
	}{position, index}))
}

/*
Removes the point at index [param index] from the polyline.
*/
//go:nosplit
func (self class) RemovePoint(index int64) { //gd:Line2D.remove_point
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_point, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ index int64 }{index}))
}

/*
Removes all points from the polyline, making it empty.
*/
//go:nosplit
func (self class) ClearPoints() { //gd:Line2D.clear_points
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear_points, 0, unsafe.Pointer(&struct{}{}))
}

//go:nosplit
func (self class) SetClosed(closed bool) { //gd:Line2D.set_closed
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_closed, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ closed bool }{closed}))
}

//go:nosplit
func (self class) IsClosed() bool { //gd:Line2D.is_closed
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_closed, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWidth(width float64) { //gd:Line2D.set_width
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_width, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ width float64 }{width}))
}

//go:nosplit
func (self class) GetWidth() float64 { //gd:Line2D.get_width
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_width, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCurve(curve [1]gdclass.Curve) { //gd:Line2D.set_curve
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_curve, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ curve gdextension.Object }{gdextension.Object(gd.CallerIncrements(curve[0].AsObject()))}))
}

//go:nosplit
func (self class) GetCurve() [1]gdclass.Curve { //gd:Line2D.get_curve
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_curve, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Curve{gd.PointerWithOwnershipTransferredToGo[gdclass.Curve](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetDefaultColor(color Color.RGBA) { //gd:Line2D.set_default_color
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_default_color, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

//go:nosplit
func (self class) GetDefaultColor() Color.RGBA { //gd:Line2D.get_default_color
	var r_ret = gdextension.Call[Color.RGBA](gd.ObjectChecked(self.AsObject()), methods.get_default_color, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetGradient(color [1]gdclass.Gradient) { //gd:Line2D.set_gradient
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_gradient, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ color gdextension.Object }{gdextension.Object(gd.CallerIncrements(color[0].AsObject()))}))
}

//go:nosplit
func (self class) GetGradient() [1]gdclass.Gradient { //gd:Line2D.get_gradient
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_gradient, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Gradient{gd.PointerWithOwnershipTransferredToGo[gdclass.Gradient](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetTexture(texture [1]gdclass.Texture2D) { //gd:Line2D.set_texture
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_texture, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ texture gdextension.Object }{gdextension.Object(gd.CallerIncrements(texture[0].AsObject()))}))
}

//go:nosplit
func (self class) GetTexture() [1]gdclass.Texture2D { //gd:Line2D.get_texture
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_texture, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Texture2D{gd.PointerWithOwnershipTransferredToGo[gdclass.Texture2D](r_ret)}
	return ret
}

//go:nosplit
func (self class) SetTextureMode(mode LineTextureMode) { //gd:Line2D.set_texture_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_texture_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode LineTextureMode }{mode}))
}

//go:nosplit
func (self class) GetTextureMode() LineTextureMode { //gd:Line2D.get_texture_mode
	var r_ret = gdextension.Call[LineTextureMode](gd.ObjectChecked(self.AsObject()), methods.get_texture_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetJointMode(mode LineJointMode) { //gd:Line2D.set_joint_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_joint_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode LineJointMode }{mode}))
}

//go:nosplit
func (self class) GetJointMode() LineJointMode { //gd:Line2D.get_joint_mode
	var r_ret = gdextension.Call[LineJointMode](gd.ObjectChecked(self.AsObject()), methods.get_joint_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBeginCapMode(mode LineCapMode) { //gd:Line2D.set_begin_cap_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_begin_cap_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode LineCapMode }{mode}))
}

//go:nosplit
func (self class) GetBeginCapMode() LineCapMode { //gd:Line2D.get_begin_cap_mode
	var r_ret = gdextension.Call[LineCapMode](gd.ObjectChecked(self.AsObject()), methods.get_begin_cap_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEndCapMode(mode LineCapMode) { //gd:Line2D.set_end_cap_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_end_cap_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode LineCapMode }{mode}))
}

//go:nosplit
func (self class) GetEndCapMode() LineCapMode { //gd:Line2D.get_end_cap_mode
	var r_ret = gdextension.Call[LineCapMode](gd.ObjectChecked(self.AsObject()), methods.get_end_cap_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSharpLimit(limit float64) { //gd:Line2D.set_sharp_limit
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_sharp_limit, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ limit float64 }{limit}))
}

//go:nosplit
func (self class) GetSharpLimit() float64 { //gd:Line2D.get_sharp_limit
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_sharp_limit, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRoundPrecision(precision int64) { //gd:Line2D.set_round_precision
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_round_precision, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ precision int64 }{precision}))
}

//go:nosplit
func (self class) GetRoundPrecision() int64 { //gd:Line2D.get_round_precision
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_round_precision, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAntialiased(antialiased bool) { //gd:Line2D.set_antialiased
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_antialiased, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ antialiased bool }{antialiased}))
}

//go:nosplit
func (self class) GetAntialiased() bool { //gd:Line2D.get_antialiased
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_antialiased, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsLine2D() Advanced                { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsLine2D() Instance             { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsLine2D() Instance        { return self.Super().AsLine2D() }
func (self class) AsNode2D() Node2D.Advanced         { return *((*Node2D.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode2D() Node2D.Instance { return self.Super().AsNode2D() }
func (self Instance) AsNode2D() Node2D.Instance      { return *((*Node2D.Instance)(unsafe.Pointer(&self))) }
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return *((*CanvasItem.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return *((*CanvasItem.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node2D.Advanced(self.AsNode2D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node2D.Instance(self.AsNode2D()), name)
	}
}
func init() {
	gdclass.Register("Line2D", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}

type LineJointMode int //gd:Line2D.LineJointMode

const (
	/*Makes the polyline's joints pointy, connecting the sides of the two segments by extending them until they intersect. If the rotation of a joint is too big (based on [member sharp_limit]), the joint falls back to [constant LINE_JOINT_BEVEL] to prevent very long miters.*/
	LineJointSharp LineJointMode = 0
	/*Makes the polyline's joints bevelled/chamfered, connecting the sides of the two segments with a simple line.*/
	LineJointBevel LineJointMode = 1
	/*Makes the polyline's joints rounded, connecting the sides of the two segments with an arc. The detail of this arc depends on [member round_precision].*/
	LineJointRound LineJointMode = 2
)

type LineCapMode int //gd:Line2D.LineCapMode

const (
	/*Draws no line cap.*/
	LineCapNone LineCapMode = 0
	/*Draws the line cap as a box, slightly extending the first/last segment.*/
	LineCapBox LineCapMode = 1
	/*Draws the line cap as a semicircle attached to the first/last segment.*/
	LineCapRound LineCapMode = 2
)

type LineTextureMode int //gd:Line2D.LineTextureMode

const (
	/*Takes the left pixels of the texture and renders them over the whole polyline.*/
	LineTextureNone LineTextureMode = 0
	/*Tiles the texture over the polyline. [member CanvasItem.texture_repeat] of the [Line2D] node must be [constant CanvasItem.TEXTURE_REPEAT_ENABLED] or [constant CanvasItem.TEXTURE_REPEAT_MIRROR] for it to work properly.*/
	LineTextureTile LineTextureMode = 1
	/*Stretches the texture across the polyline. [member CanvasItem.texture_repeat] of the [Line2D] node must be [constant CanvasItem.TEXTURE_REPEAT_DISABLED] for best results.*/
	LineTextureStretch LineTextureMode = 2
)
