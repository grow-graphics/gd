// Code generated by the generate package DO NOT EDIT

// Package YoutubePlayablesClient provides methods for working with YoutubePlayablesClient object instances.
package YoutubePlayablesClient

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/ThirdPartyClient"
import "graphics.gd/classdb/YoutubePlayablesResponse"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Node for using the Youtube Playables SDK.
Implementation based on the official Youtube Playables SDK. Official documentation for this service on [url=https://developers.google.com/youtube/gaming/playables/reference/sdk]developers.google.com/youtube/gaming/playables/reference/sdk[/url].
You can test your game on [url=https://developers.google.com/youtube/gaming/playables/test_suite]developers.google.com/youtube/gaming/playables/test_suite[/url].
*/
type Instance [1]gdclass.YoutubePlayablesClient

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsYoutubePlayablesClient() Instance
}

/*
Whether or not the game is running as a playable.
[codeblocks]
[gdscript]
if is_youtube_environment():

	print("Youtube Playables SDK version is " + get_sdk_version())

[/gdscript]
[/codeblocks]
*/
func (self Instance) IsYoutubeEnvironment() bool { //gd:YoutubePlayablesClient.is_youtube_environment
	return bool(Advanced(self).IsYoutubeEnvironment())
}

/*
The YouTube Playables SDK version.
Returns an empty [String] if called outside the Youtube Playables environment.
*/
func (self Instance) GetSdkVersion() string { //gd:YoutubePlayablesClient.get_sdk_version
	return string(Advanced(self).GetSdkVersion().String())
}

/*
Sends the user's best score to YouTube.
The score should represent one dimension of progress within the game. If there are multiple dimensions, the developer must choose one dimension to be consistent. Scores will be sorted and the highest score will be displayed in YouTube UI so any in-game high score UI should align with what is being sent through this API.
[url=https://developers.google.com/youtube/gaming/playables/certification/requirements_integration#3_user_scores]User scores requirements.[/url]
*/
func (self Instance) SendScore(value int) YoutubePlayablesResponse.Instance { //gd:YoutubePlayablesClient.send_score
	return YoutubePlayablesResponse.Instance(Advanced(self).SendScore(int64(value)))
}

/*
Open a YouTube video given a valid [param video_id].
This will open the video in a new tab on web and in the miniplayer on mobile.
*/
func (self Instance) OpenYtContent(video_id string) YoutubePlayablesResponse.Instance { //gd:YoutubePlayablesClient.open_yt_content
	return YoutubePlayablesResponse.Instance(Advanced(self).OpenYtContent(String.New(video_id)))
}

/*
Loads game data from the YouTube cloud in the form of a serialized string. This API is usually called before the game loads to resume the game state.
[codeblocks]
[gdscript]
var result: YoutubePlayablesResponse = await load_data().finished
if result.has_error():

	push_error(result.error)
	log_error()

else:

	var data: Dictionary = JSON.parse_string(result.data)
	print("Player is at level %d." % data["player_level"])

[/gdscript]
[/codeblocks]
[b]Note:[/b] Signed-out players are not supported. The [member YoutubePlayablesResult.data] will be empty.
[url=https://developers.google.com/youtube/gaming/playables/certification/requirements_integration#4_cloud_saves]Cloud saves requirements.[/url]
*/
func (self Instance) LoadData() YoutubePlayablesResponse.Instance { //gd:YoutubePlayablesClient.load_data
	return YoutubePlayablesResponse.Instance(Advanced(self).LoadData())
}

/*
Saves game data to the YouTube cloud in the form of a serialized string.
It is recommended to save your data immediately after important milestones.
[codeblocks]
[gdscript]
var data: Dictionary = {"player_level": 42}
var result: YoutubePlayablesResult = await save_data(JSON.stringify(data)).finished
if result.has_error():

	push_error(result.error)
	log_error()

[/gdscript]
[/codeblocks]
[b]Note:[/b] Signed-out players are not supported. [signal YoutubePlayablesResponse.finished] returns without errors but the data is not be saved.
[url=https://developers.google.com/youtube/gaming/playables/certification/requirements_integration#4_cloud_saves]Cloud saves requirements.[/url]
*/
func (self Instance) SaveData(data string) YoutubePlayablesResponse.Instance { //gd:YoutubePlayablesClient.save_data
	return YoutubePlayablesResponse.Instance(Advanced(self).SaveData(String.New(data)))
}

/*
Logs an error to YouTube.
[b]Note:[/b] This API is best-effort and rate-limited which can result in data loss.
*/
func (self Instance) LogError() { //gd:YoutubePlayablesClient.log_error
	Advanced(self).LogError()
}

/*
Logs a warning to YouTube.
[b]Note:[/b] This API is best-effort and rate-limited which can result in data loss.
*/
func (self Instance) LogWarning() { //gd:YoutubePlayablesClient.log_warning
	Advanced(self).LogWarning()
}

/*
Returns whether the game audio is enabled in the YouTube settings.
Returns [code]true[/code] if called outside the Youtube Playables environment.
*/
func (self Instance) IsAudioEnabled() bool { //gd:YoutubePlayablesClient.is_audio_enabled
	return bool(Advanced(self).IsAudioEnabled())
}

/*
Returns the [url=https://www.rfc-editor.org/info/bcp47]BCP-47[/url] language tag for the user's language set in YouTube.
[b]Note:[/b] this may be different than the system or browser language settings but should always match the language used in YouTube.
Returns an empty [String] if called outside the Youtube Playables environment.
*/
func (self Instance) GetLanguage() YoutubePlayablesResponse.Instance { //gd:YoutubePlayablesClient.get_language
	return YoutubePlayablesResponse.Instance(Advanced(self).GetLanguage())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.YoutubePlayablesClient

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("YoutubePlayablesClient"))
	casted := Instance{*(*gdclass.YoutubePlayablesClient)(unsafe.Pointer(&object))}
	return casted
}

/*
Whether or not the game is running as a playable.
[codeblocks]
[gdscript]
if is_youtube_environment():
    print("Youtube Playables SDK version is " + get_sdk_version())
[/gdscript]
[/codeblocks]
*/
//go:nosplit
func (self class) IsYoutubeEnvironment() bool { //gd:YoutubePlayablesClient.is_youtube_environment
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.YoutubePlayablesClient.Bind_is_youtube_environment, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
The YouTube Playables SDK version.
Returns an empty [String] if called outside the Youtube Playables environment.
*/
//go:nosplit
func (self class) GetSdkVersion() String.Readable { //gd:YoutubePlayablesClient.get_sdk_version
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.YoutubePlayablesClient.Bind_get_sdk_version, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

/*
Sends the user's best score to YouTube.
The score should represent one dimension of progress within the game. If there are multiple dimensions, the developer must choose one dimension to be consistent. Scores will be sorted and the highest score will be displayed in YouTube UI so any in-game high score UI should align with what is being sent through this API.
[url=https://developers.google.com/youtube/gaming/playables/certification/requirements_integration#3_user_scores]User scores requirements.[/url]
*/
//go:nosplit
func (self class) SendScore(value int64) [1]gdclass.YoutubePlayablesResponse { //gd:YoutubePlayablesClient.send_score
	var frame = callframe.New()
	callframe.Arg(frame, value)
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.YoutubePlayablesClient.Bind_send_score, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.YoutubePlayablesResponse{gd.PointerWithOwnershipTransferredToGo[gdclass.YoutubePlayablesResponse](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Open a YouTube video given a valid [param video_id].
This will open the video in a new tab on web and in the miniplayer on mobile.
*/
//go:nosplit
func (self class) OpenYtContent(video_id String.Readable) [1]gdclass.YoutubePlayablesResponse { //gd:YoutubePlayablesClient.open_yt_content
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(video_id)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.YoutubePlayablesClient.Bind_open_yt_content, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.YoutubePlayablesResponse{gd.PointerWithOwnershipTransferredToGo[gdclass.YoutubePlayablesResponse](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Loads game data from the YouTube cloud in the form of a serialized string. This API is usually called before the game loads to resume the game state.
[codeblocks]
[gdscript]
var result: YoutubePlayablesResponse = await load_data().finished
if result.has_error():
    push_error(result.error)
    log_error()
else:
    var data: Dictionary = JSON.parse_string(result.data)
    print("Player is at level %d." % data["player_level"])
[/gdscript]
[/codeblocks]
[b]Note:[/b] Signed-out players are not supported. The [member YoutubePlayablesResult.data] will be empty.
[url=https://developers.google.com/youtube/gaming/playables/certification/requirements_integration#4_cloud_saves]Cloud saves requirements.[/url]
*/
//go:nosplit
func (self class) LoadData() [1]gdclass.YoutubePlayablesResponse { //gd:YoutubePlayablesClient.load_data
	var frame = callframe.New()
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.YoutubePlayablesClient.Bind_load_data, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.YoutubePlayablesResponse{gd.PointerWithOwnershipTransferredToGo[gdclass.YoutubePlayablesResponse](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Saves game data to the YouTube cloud in the form of a serialized string.
It is recommended to save your data immediately after important milestones.
[codeblocks]
[gdscript]
var data: Dictionary = {"player_level": 42}
var result: YoutubePlayablesResult = await save_data(JSON.stringify(data)).finished
if result.has_error():
    push_error(result.error)
    log_error()
[/gdscript]
[/codeblocks]
[b]Note:[/b] Signed-out players are not supported. [signal YoutubePlayablesResponse.finished] returns without errors but the data is not be saved.
[url=https://developers.google.com/youtube/gaming/playables/certification/requirements_integration#4_cloud_saves]Cloud saves requirements.[/url]
*/
//go:nosplit
func (self class) SaveData(data String.Readable) [1]gdclass.YoutubePlayablesResponse { //gd:YoutubePlayablesClient.save_data
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(data)))
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.YoutubePlayablesClient.Bind_save_data, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.YoutubePlayablesResponse{gd.PointerWithOwnershipTransferredToGo[gdclass.YoutubePlayablesResponse](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Logs an error to YouTube.
[b]Note:[/b] This API is best-effort and rate-limited which can result in data loss.
*/
//go:nosplit
func (self class) LogError() { //gd:YoutubePlayablesClient.log_error
	var frame = callframe.New()
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.YoutubePlayablesClient.Bind_log_error, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Logs a warning to YouTube.
[b]Note:[/b] This API is best-effort and rate-limited which can result in data loss.
*/
//go:nosplit
func (self class) LogWarning() { //gd:YoutubePlayablesClient.log_warning
	var frame = callframe.New()
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.YoutubePlayablesClient.Bind_log_warning, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns whether the game audio is enabled in the YouTube settings.
Returns [code]true[/code] if called outside the Youtube Playables environment.
*/
//go:nosplit
func (self class) IsAudioEnabled() bool { //gd:YoutubePlayablesClient.is_audio_enabled
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.YoutubePlayablesClient.Bind_is_audio_enabled, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Returns the [url=https://www.rfc-editor.org/info/bcp47]BCP-47[/url] language tag for the user's language set in YouTube.
[b]Note:[/b] this may be different than the system or browser language settings but should always match the language used in YouTube.
Returns an empty [String] if called outside the Youtube Playables environment.
*/
//go:nosplit
func (self class) GetLanguage() [1]gdclass.YoutubePlayablesResponse { //gd:YoutubePlayablesClient.get_language
	var frame = callframe.New()
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.YoutubePlayablesClient.Bind_get_language, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.YoutubePlayablesResponse{gd.PointerWithOwnershipTransferredToGo[gdclass.YoutubePlayablesResponse](r_ret.Get())}
	frame.Free()
	return ret
}
func (self Instance) OnAudioEnabledChange(cb func(enabled bool)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("audio_enabled_change"), gd.NewCallable(cb), 0)
}

func (self Instance) OnPause(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("pause"), gd.NewCallable(cb), 0)
}

func (self Instance) OnResume(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("resume"), gd.NewCallable(cb), 0)
}

func (self class) AsYoutubePlayablesClient() Advanced { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsYoutubePlayablesClient() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsYoutubePlayablesClient() Instance {
	return self.Super().AsYoutubePlayablesClient()
}
func (self class) AsThirdPartyClient() ThirdPartyClient.Advanced {
	return *((*ThirdPartyClient.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsThirdPartyClient() ThirdPartyClient.Instance {
	return self.Super().AsThirdPartyClient()
}
func (self Instance) AsThirdPartyClient() ThirdPartyClient.Instance {
	return *((*ThirdPartyClient.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(ThirdPartyClient.Advanced(self.AsThirdPartyClient()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(ThirdPartyClient.Instance(self.AsThirdPartyClient()), name)
	}
}
func init() {
	gdclass.Register("YoutubePlayablesClient", func(ptr gd.Object) any {
		return [1]gdclass.YoutubePlayablesClient{*(*gdclass.YoutubePlayablesClient)(unsafe.Pointer(&ptr))}
	})
}
