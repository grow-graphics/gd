// Code generated by the generate package DO NOT EDIT

// Package EditorFileSystem provides methods for working with EditorFileSystem object instances.
package EditorFileSystem

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/EditorFileSystemDirectory"
import "graphics.gd/classdb/Node"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This object holds information of all resources in the filesystem, their types, etc.
[b]Note:[/b] This class shouldn't be instantiated directly. Instead, access the singleton using [method EditorInterface.get_resource_filesystem].
*/
type Instance [1]gdclass.EditorFileSystem

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_filesystem        gdextension.MethodForClass `hash:"842323275"`
	is_scanning           gdextension.MethodForClass `hash:"36873697"`
	get_scanning_progress gdextension.MethodForClass `hash:"1740695150"`
	scan                  gdextension.MethodForClass `hash:"3218959716"`
	scan_sources          gdextension.MethodForClass `hash:"3218959716"`
	update_file           gdextension.MethodForClass `hash:"83702148"`
	get_filesystem_path   gdextension.MethodForClass `hash:"3188521125"`
	get_file_type         gdextension.MethodForClass `hash:"3135753539"`
	reimport_files        gdextension.MethodForClass `hash:"4015028928"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("EditorFileSystem")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, true)
	})
	gd.RegisterCleanup(func() {
		pointers.Raw[gd.StringName](sname).Free()
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsEditorFileSystem() Instance
}

/*
Gets the root directory object.
*/
func (self Instance) GetFilesystem() EditorFileSystemDirectory.Instance { //gd:EditorFileSystem.get_filesystem
	return EditorFileSystemDirectory.Instance(Advanced(self).GetFilesystem())
}

/*
Returns [code]true[/code] if the filesystem is being scanned.
*/
func (self Instance) IsScanning() bool { //gd:EditorFileSystem.is_scanning
	return bool(Advanced(self).IsScanning())
}

/*
Returns the scan progress for 0 to 1 if the FS is being scanned.
*/
func (self Instance) GetScanningProgress() Float.X { //gd:EditorFileSystem.get_scanning_progress
	return Float.X(Float.X(Advanced(self).GetScanningProgress()))
}

/*
Scan the filesystem for changes.
*/
func (self Instance) Scan() { //gd:EditorFileSystem.scan
	Advanced(self).Scan()
}

/*
Check if the source of any imported resource changed.
*/
func (self Instance) ScanSources() { //gd:EditorFileSystem.scan_sources
	Advanced(self).ScanSources()
}

/*
Add a file in an existing directory, or schedule file information to be updated on editor restart. Can be used to update text files saved by an external program.
This will not import the file. To reimport, call [method reimport_files] or [method scan] methods.
*/
func (self Instance) UpdateFile(path string) { //gd:EditorFileSystem.update_file
	Advanced(self).UpdateFile(String.New(path))
}

/*
Returns a view into the filesystem at [param path].
*/
func (self Instance) GetFilesystemPath(path string) EditorFileSystemDirectory.Instance { //gd:EditorFileSystem.get_filesystem_path
	return EditorFileSystemDirectory.Instance(Advanced(self).GetFilesystemPath(String.New(path)))
}

/*
Returns the resource type of the file, given the full path. This returns a string such as [code]"Resource"[/code] or [code]"GDScript"[/code], [i]not[/i] a file extension such as [code]".gd"[/code].
*/
func (self Instance) GetFileType(path string) string { //gd:EditorFileSystem.get_file_type
	return string(Advanced(self).GetFileType(String.New(path)).String())
}

/*
Reimports a set of files. Call this if these files or their [code].import[/code] files were directly edited by script or an external program.
If the file type changed or the file was newly created, use [method update_file] or [method scan].
[b]Note:[/b] This function blocks until the import is finished. However, the main loop iteration, including timers and [method Node._process], will occur during the import process due to progress bar updates. Avoid calls to [method reimport_files] or [method scan] while an import is in progress.
*/
func (self Instance) ReimportFiles(files []string) { //gd:EditorFileSystem.reimport_files
	Advanced(self).ReimportFiles(Packed.MakeStrings(files...))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.EditorFileSystem

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.EditorFileSystem)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.EditorFileSystem)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.EditorFileSystem)(unsafe.Pointer(&object))}
	object[0].Notification(0, false)
	return casted
}

/*
Gets the root directory object.
*/
//go:nosplit
func (self class) GetFilesystem() [1]gdclass.EditorFileSystemDirectory { //gd:EditorFileSystem.get_filesystem
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_filesystem, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.EditorFileSystemDirectory{gd.PointerLifetimeBoundTo[gdclass.EditorFileSystemDirectory](self.AsObject(), r_ret)}
	return ret
}

/*
Returns [code]true[/code] if the filesystem is being scanned.
*/
//go:nosplit
func (self class) IsScanning() bool { //gd:EditorFileSystem.is_scanning
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_scanning, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns the scan progress for 0 to 1 if the FS is being scanned.
*/
//go:nosplit
func (self class) GetScanningProgress() float64 { //gd:EditorFileSystem.get_scanning_progress
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_scanning_progress, gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Scan the filesystem for changes.
*/
//go:nosplit
func (self class) Scan() { //gd:EditorFileSystem.scan
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.scan, 0, unsafe.Pointer(&struct{}{}))
}

/*
Check if the source of any imported resource changed.
*/
//go:nosplit
func (self class) ScanSources() { //gd:EditorFileSystem.scan_sources
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.scan_sources, 0, unsafe.Pointer(&struct{}{}))
}

/*
Add a file in an existing directory, or schedule file information to be updated on editor restart. Can be used to update text files saved by an external program.
This will not import the file. To reimport, call [method reimport_files] or [method scan] methods.
*/
//go:nosplit
func (self class) UpdateFile(path String.Readable) { //gd:EditorFileSystem.update_file
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.update_file, 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ path gdextension.String }{pointers.Get(gd.InternalString(path))}))
}

/*
Returns a view into the filesystem at [param path].
*/
//go:nosplit
func (self class) GetFilesystemPath(path String.Readable) [1]gdclass.EditorFileSystemDirectory { //gd:EditorFileSystem.get_filesystem_path
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_filesystem_path, gdextension.SizeObject|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ path gdextension.String }{pointers.Get(gd.InternalString(path))}))
	var ret = [1]gdclass.EditorFileSystemDirectory{gd.PointerLifetimeBoundTo[gdclass.EditorFileSystemDirectory](self.AsObject(), r_ret)}
	return ret
}

/*
Returns the resource type of the file, given the full path. This returns a string such as [code]"Resource"[/code] or [code]"GDScript"[/code], [i]not[/i] a file extension such as [code]".gd"[/code].
*/
//go:nosplit
func (self class) GetFileType(path String.Readable) String.Readable { //gd:EditorFileSystem.get_file_type
	var r_ret = gdextension.Call[gdextension.String](gd.ObjectChecked(self.AsObject()), methods.get_file_type, gdextension.SizeString|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ path gdextension.String }{pointers.Get(gd.InternalString(path))}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Reimports a set of files. Call this if these files or their [code].import[/code] files were directly edited by script or an external program.
If the file type changed or the file was newly created, use [method update_file] or [method scan].
[b]Note:[/b] This function blocks until the import is finished. However, the main loop iteration, including timers and [method Node._process], will occur during the import process due to progress bar updates. Avoid calls to [method reimport_files] or [method scan] while an import is in progress.
*/
//go:nosplit
func (self class) ReimportFiles(files Packed.Strings) { //gd:EditorFileSystem.reimport_files
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.reimport_files, 0|(gdextension.SizePackedArray<<4), unsafe.Pointer(&struct {
		files gdextension.PackedArray[gdextension.String]
	}{pointers.Get(gd.InternalPackedStrings(files))}))
}
func (self Instance) OnFilesystemChanged(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("filesystem_changed"), gd.NewCallable(cb), 0)
}

func (self Instance) OnScriptClassesUpdated(cb func()) {
	self[0].AsObject()[0].Connect(gd.NewStringName("script_classes_updated"), gd.NewCallable(cb), 0)
}

func (self Instance) OnSourcesChanged(cb func(exist bool)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("sources_changed"), gd.NewCallable(cb), 0)
}

func (self Instance) OnResourcesReimporting(cb func(resources []string)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("resources_reimporting"), gd.NewCallable(cb), 0)
}

func (self Instance) OnResourcesReimported(cb func(resources []string)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("resources_reimported"), gd.NewCallable(cb), 0)
}

func (self Instance) OnResourcesReload(cb func(resources []string)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("resources_reload"), gd.NewCallable(cb), 0)
}

func (self class) AsEditorFileSystem() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsEditorFileSystem() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsEditorFileSystem() Instance { return self.Super().AsEditorFileSystem() }
func (self class) AsNode() Node.Advanced                { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance        { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance             { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node.Advanced(self.AsNode()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Node.Instance(self.AsNode()), name)
	}
}
func init() {
	gdclass.Register("EditorFileSystem", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
