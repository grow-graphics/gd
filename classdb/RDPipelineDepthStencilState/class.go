// Code generated by the generate package DO NOT EDIT

// Package RDPipelineDepthStencilState provides methods for working with RDPipelineDepthStencilState object instances.
package RDPipelineDepthStencilState

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Rendering"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
[RDPipelineDepthStencilState] controls the way depth and stencil comparisons are performed when sampling those values using [RenderingDevice].
*/
type Instance [1]gdclass.RDPipelineDepthStencilState

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsRDPipelineDepthStencilState() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.RDPipelineDepthStencilState

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(pointers.Get(gd.NewStringName("RDPipelineDepthStencilState"))))})}
	casted := Instance{*(*gdclass.RDPipelineDepthStencilState)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	object[0].Notification(0, false)
	return casted
}

func (self Instance) EnableDepthTest() bool {
	return bool(class(self).GetEnableDepthTest())
}

func (self Instance) SetEnableDepthTest(value bool) {
	class(self).SetEnableDepthTest(value)
}

func (self Instance) EnableDepthWrite() bool {
	return bool(class(self).GetEnableDepthWrite())
}

func (self Instance) SetEnableDepthWrite(value bool) {
	class(self).SetEnableDepthWrite(value)
}

func (self Instance) DepthCompareOperator() Rendering.CompareOperator {
	return Rendering.CompareOperator(class(self).GetDepthCompareOperator())
}

func (self Instance) SetDepthCompareOperator(value Rendering.CompareOperator) {
	class(self).SetDepthCompareOperator(value)
}

func (self Instance) EnableDepthRange() bool {
	return bool(class(self).GetEnableDepthRange())
}

func (self Instance) SetEnableDepthRange(value bool) {
	class(self).SetEnableDepthRange(value)
}

func (self Instance) DepthRangeMin() Float.X {
	return Float.X(Float.X(class(self).GetDepthRangeMin()))
}

func (self Instance) SetDepthRangeMin(value Float.X) {
	class(self).SetDepthRangeMin(float64(value))
}

func (self Instance) DepthRangeMax() Float.X {
	return Float.X(Float.X(class(self).GetDepthRangeMax()))
}

func (self Instance) SetDepthRangeMax(value Float.X) {
	class(self).SetDepthRangeMax(float64(value))
}

func (self Instance) EnableStencil() bool {
	return bool(class(self).GetEnableStencil())
}

func (self Instance) SetEnableStencil(value bool) {
	class(self).SetEnableStencil(value)
}

func (self Instance) FrontOpFail() Rendering.StencilOperation {
	return Rendering.StencilOperation(class(self).GetFrontOpFail())
}

func (self Instance) SetFrontOpFail(value Rendering.StencilOperation) {
	class(self).SetFrontOpFail(value)
}

func (self Instance) FrontOpPass() Rendering.StencilOperation {
	return Rendering.StencilOperation(class(self).GetFrontOpPass())
}

func (self Instance) SetFrontOpPass(value Rendering.StencilOperation) {
	class(self).SetFrontOpPass(value)
}

func (self Instance) FrontOpDepthFail() Rendering.StencilOperation {
	return Rendering.StencilOperation(class(self).GetFrontOpDepthFail())
}

func (self Instance) SetFrontOpDepthFail(value Rendering.StencilOperation) {
	class(self).SetFrontOpDepthFail(value)
}

func (self Instance) FrontOpCompare() Rendering.CompareOperator {
	return Rendering.CompareOperator(class(self).GetFrontOpCompare())
}

func (self Instance) SetFrontOpCompare(value Rendering.CompareOperator) {
	class(self).SetFrontOpCompare(value)
}

func (self Instance) FrontOpCompareMask() int {
	return int(int(class(self).GetFrontOpCompareMask()))
}

func (self Instance) SetFrontOpCompareMask(value int) {
	class(self).SetFrontOpCompareMask(int64(value))
}

func (self Instance) FrontOpWriteMask() int {
	return int(int(class(self).GetFrontOpWriteMask()))
}

func (self Instance) SetFrontOpWriteMask(value int) {
	class(self).SetFrontOpWriteMask(int64(value))
}

func (self Instance) FrontOpReference() int {
	return int(int(class(self).GetFrontOpReference()))
}

func (self Instance) SetFrontOpReference(value int) {
	class(self).SetFrontOpReference(int64(value))
}

func (self Instance) BackOpFail() Rendering.StencilOperation {
	return Rendering.StencilOperation(class(self).GetBackOpFail())
}

func (self Instance) SetBackOpFail(value Rendering.StencilOperation) {
	class(self).SetBackOpFail(value)
}

func (self Instance) BackOpPass() Rendering.StencilOperation {
	return Rendering.StencilOperation(class(self).GetBackOpPass())
}

func (self Instance) SetBackOpPass(value Rendering.StencilOperation) {
	class(self).SetBackOpPass(value)
}

func (self Instance) BackOpDepthFail() Rendering.StencilOperation {
	return Rendering.StencilOperation(class(self).GetBackOpDepthFail())
}

func (self Instance) SetBackOpDepthFail(value Rendering.StencilOperation) {
	class(self).SetBackOpDepthFail(value)
}

func (self Instance) BackOpCompare() Rendering.CompareOperator {
	return Rendering.CompareOperator(class(self).GetBackOpCompare())
}

func (self Instance) SetBackOpCompare(value Rendering.CompareOperator) {
	class(self).SetBackOpCompare(value)
}

func (self Instance) BackOpCompareMask() int {
	return int(int(class(self).GetBackOpCompareMask()))
}

func (self Instance) SetBackOpCompareMask(value int) {
	class(self).SetBackOpCompareMask(int64(value))
}

func (self Instance) BackOpWriteMask() int {
	return int(int(class(self).GetBackOpWriteMask()))
}

func (self Instance) SetBackOpWriteMask(value int) {
	class(self).SetBackOpWriteMask(int64(value))
}

func (self Instance) BackOpReference() int {
	return int(int(class(self).GetBackOpReference()))
}

func (self Instance) SetBackOpReference(value int) {
	class(self).SetBackOpReference(int64(value))
}

//go:nosplit
func (self class) SetEnableDepthTest(p_member bool) { //gd:RDPipelineDepthStencilState.set_enable_depth_test
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_enable_depth_test), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ p_member bool }{p_member}))
}

//go:nosplit
func (self class) GetEnableDepthTest() bool { //gd:RDPipelineDepthStencilState.get_enable_depth_test
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_enable_depth_test), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEnableDepthWrite(p_member bool) { //gd:RDPipelineDepthStencilState.set_enable_depth_write
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_enable_depth_write), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ p_member bool }{p_member}))
}

//go:nosplit
func (self class) GetEnableDepthWrite() bool { //gd:RDPipelineDepthStencilState.get_enable_depth_write
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_enable_depth_write), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDepthCompareOperator(p_member Rendering.CompareOperator) { //gd:RDPipelineDepthStencilState.set_depth_compare_operator
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_depth_compare_operator), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.CompareOperator }{p_member}))
}

//go:nosplit
func (self class) GetDepthCompareOperator() Rendering.CompareOperator { //gd:RDPipelineDepthStencilState.get_depth_compare_operator
	var r_ret = gdextension.Call[Rendering.CompareOperator](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_depth_compare_operator), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEnableDepthRange(p_member bool) { //gd:RDPipelineDepthStencilState.set_enable_depth_range
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_enable_depth_range), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ p_member bool }{p_member}))
}

//go:nosplit
func (self class) GetEnableDepthRange() bool { //gd:RDPipelineDepthStencilState.get_enable_depth_range
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_enable_depth_range), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDepthRangeMin(p_member float64) { //gd:RDPipelineDepthStencilState.set_depth_range_min
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_depth_range_min), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ p_member float64 }{p_member}))
}

//go:nosplit
func (self class) GetDepthRangeMin() float64 { //gd:RDPipelineDepthStencilState.get_depth_range_min
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_depth_range_min), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDepthRangeMax(p_member float64) { //gd:RDPipelineDepthStencilState.set_depth_range_max
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_depth_range_max), 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ p_member float64 }{p_member}))
}

//go:nosplit
func (self class) GetDepthRangeMax() float64 { //gd:RDPipelineDepthStencilState.get_depth_range_max
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_depth_range_max), gdextension.SizeFloat, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetEnableStencil(p_member bool) { //gd:RDPipelineDepthStencilState.set_enable_stencil
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_enable_stencil), 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ p_member bool }{p_member}))
}

//go:nosplit
func (self class) GetEnableStencil() bool { //gd:RDPipelineDepthStencilState.get_enable_stencil
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_enable_stencil), gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFrontOpFail(p_member Rendering.StencilOperation) { //gd:RDPipelineDepthStencilState.set_front_op_fail
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_front_op_fail), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.StencilOperation }{p_member}))
}

//go:nosplit
func (self class) GetFrontOpFail() Rendering.StencilOperation { //gd:RDPipelineDepthStencilState.get_front_op_fail
	var r_ret = gdextension.Call[Rendering.StencilOperation](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_front_op_fail), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFrontOpPass(p_member Rendering.StencilOperation) { //gd:RDPipelineDepthStencilState.set_front_op_pass
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_front_op_pass), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.StencilOperation }{p_member}))
}

//go:nosplit
func (self class) GetFrontOpPass() Rendering.StencilOperation { //gd:RDPipelineDepthStencilState.get_front_op_pass
	var r_ret = gdextension.Call[Rendering.StencilOperation](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_front_op_pass), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFrontOpDepthFail(p_member Rendering.StencilOperation) { //gd:RDPipelineDepthStencilState.set_front_op_depth_fail
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_front_op_depth_fail), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.StencilOperation }{p_member}))
}

//go:nosplit
func (self class) GetFrontOpDepthFail() Rendering.StencilOperation { //gd:RDPipelineDepthStencilState.get_front_op_depth_fail
	var r_ret = gdextension.Call[Rendering.StencilOperation](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_front_op_depth_fail), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFrontOpCompare(p_member Rendering.CompareOperator) { //gd:RDPipelineDepthStencilState.set_front_op_compare
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_front_op_compare), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.CompareOperator }{p_member}))
}

//go:nosplit
func (self class) GetFrontOpCompare() Rendering.CompareOperator { //gd:RDPipelineDepthStencilState.get_front_op_compare
	var r_ret = gdextension.Call[Rendering.CompareOperator](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_front_op_compare), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFrontOpCompareMask(p_member int64) { //gd:RDPipelineDepthStencilState.set_front_op_compare_mask
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_front_op_compare_mask), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member int64 }{p_member}))
}

//go:nosplit
func (self class) GetFrontOpCompareMask() int64 { //gd:RDPipelineDepthStencilState.get_front_op_compare_mask
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_front_op_compare_mask), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFrontOpWriteMask(p_member int64) { //gd:RDPipelineDepthStencilState.set_front_op_write_mask
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_front_op_write_mask), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member int64 }{p_member}))
}

//go:nosplit
func (self class) GetFrontOpWriteMask() int64 { //gd:RDPipelineDepthStencilState.get_front_op_write_mask
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_front_op_write_mask), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFrontOpReference(p_member int64) { //gd:RDPipelineDepthStencilState.set_front_op_reference
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_front_op_reference), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member int64 }{p_member}))
}

//go:nosplit
func (self class) GetFrontOpReference() int64 { //gd:RDPipelineDepthStencilState.get_front_op_reference
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_front_op_reference), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBackOpFail(p_member Rendering.StencilOperation) { //gd:RDPipelineDepthStencilState.set_back_op_fail
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_back_op_fail), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.StencilOperation }{p_member}))
}

//go:nosplit
func (self class) GetBackOpFail() Rendering.StencilOperation { //gd:RDPipelineDepthStencilState.get_back_op_fail
	var r_ret = gdextension.Call[Rendering.StencilOperation](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_back_op_fail), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBackOpPass(p_member Rendering.StencilOperation) { //gd:RDPipelineDepthStencilState.set_back_op_pass
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_back_op_pass), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.StencilOperation }{p_member}))
}

//go:nosplit
func (self class) GetBackOpPass() Rendering.StencilOperation { //gd:RDPipelineDepthStencilState.get_back_op_pass
	var r_ret = gdextension.Call[Rendering.StencilOperation](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_back_op_pass), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBackOpDepthFail(p_member Rendering.StencilOperation) { //gd:RDPipelineDepthStencilState.set_back_op_depth_fail
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_back_op_depth_fail), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.StencilOperation }{p_member}))
}

//go:nosplit
func (self class) GetBackOpDepthFail() Rendering.StencilOperation { //gd:RDPipelineDepthStencilState.get_back_op_depth_fail
	var r_ret = gdextension.Call[Rendering.StencilOperation](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_back_op_depth_fail), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBackOpCompare(p_member Rendering.CompareOperator) { //gd:RDPipelineDepthStencilState.set_back_op_compare
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_back_op_compare), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member Rendering.CompareOperator }{p_member}))
}

//go:nosplit
func (self class) GetBackOpCompare() Rendering.CompareOperator { //gd:RDPipelineDepthStencilState.get_back_op_compare
	var r_ret = gdextension.Call[Rendering.CompareOperator](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_back_op_compare), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBackOpCompareMask(p_member int64) { //gd:RDPipelineDepthStencilState.set_back_op_compare_mask
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_back_op_compare_mask), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member int64 }{p_member}))
}

//go:nosplit
func (self class) GetBackOpCompareMask() int64 { //gd:RDPipelineDepthStencilState.get_back_op_compare_mask
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_back_op_compare_mask), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBackOpWriteMask(p_member int64) { //gd:RDPipelineDepthStencilState.set_back_op_write_mask
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_back_op_write_mask), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member int64 }{p_member}))
}

//go:nosplit
func (self class) GetBackOpWriteMask() int64 { //gd:RDPipelineDepthStencilState.get_back_op_write_mask
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_back_op_write_mask), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBackOpReference(p_member int64) { //gd:RDPipelineDepthStencilState.set_back_op_reference
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_set_back_op_reference), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ p_member int64 }{p_member}))
}

//go:nosplit
func (self class) GetBackOpReference() int64 { //gd:RDPipelineDepthStencilState.get_back_op_reference
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.RDPipelineDepthStencilState.Bind_get_back_op_reference), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsRDPipelineDepthStencilState() Advanced {
	return *((*Advanced)(unsafe.Pointer(&self)))
}
func (self Instance) AsRDPipelineDepthStencilState() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRDPipelineDepthStencilState() Instance {
	return self.Super().AsRDPipelineDepthStencilState()
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Advanced(self.AsRefCounted()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(RefCounted.Instance(self.AsRefCounted()), name)
	}
}
func init() {
	gdclass.Register("RDPipelineDepthStencilState", func(ptr gd.Object) any {
		return [1]gdclass.RDPipelineDepthStencilState{*(*gdclass.RDPipelineDepthStencilState)(unsafe.Pointer(&ptr))}
	})
}
