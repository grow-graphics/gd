// Code generated by the generate package DO NOT EDIT

// Package PhysicsMaterial provides methods for working with PhysicsMaterial object instances.
package PhysicsMaterial

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Holds physics-related properties of a surface, namely its roughness and bounciness. This class is used to apply these properties to a physics body.
*/
type Instance [1]gdclass.PhysicsMaterial

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_friction  gdextension.MethodForClass `hash:"373806689"`
	get_friction  gdextension.MethodForClass `hash:"1740695150"`
	set_rough     gdextension.MethodForClass `hash:"2586408642"`
	is_rough      gdextension.MethodForClass `hash:"36873697"`
	set_bounce    gdextension.MethodForClass `hash:"373806689"`
	get_bounce    gdextension.MethodForClass `hash:"1740695150"`
	set_absorbent gdextension.MethodForClass `hash:"2586408642"`
	is_absorbent  gdextension.MethodForClass `hash:"36873697"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("PhysicsMaterial")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsPhysicsMaterial() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.PhysicsMaterial

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.PhysicsMaterial](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.PhysicsMaterial](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.PhysicsMaterial{pointers.Add[gdclass.PhysicsMaterial]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.PhysicsMaterial{pointers.New[gdclass.PhysicsMaterial]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Friction() Float.X {
	return Float.X(Float.X(class(self).GetFriction()))
}

func (self Instance) SetFriction(value Float.X) {
	class(self).SetFriction(float64(value))
}

func (self Instance) Rough() bool {
	return bool(class(self).IsRough())
}

func (self Instance) SetRough(value bool) {
	class(self).SetRough(value)
}

func (self Instance) Bounce() Float.X {
	return Float.X(Float.X(class(self).GetBounce()))
}

func (self Instance) SetBounce(value Float.X) {
	class(self).SetBounce(float64(value))
}

func (self Instance) Absorbent() bool {
	return bool(class(self).IsAbsorbent())
}

func (self Instance) SetAbsorbent(value bool) {
	class(self).SetAbsorbent(value)
}

//go:nosplit
func (self class) SetFriction(friction float64) { //gd:PhysicsMaterial.set_friction
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_friction, 0|(gdextension.SizeFloat<<4), &struct{ friction float64 }{friction})
}

//go:nosplit
func (self class) GetFriction() float64 { //gd:PhysicsMaterial.get_friction
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_friction, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRough(rough bool) { //gd:PhysicsMaterial.set_rough
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_rough, 0|(gdextension.SizeBool<<4), &struct{ rough bool }{rough})
}

//go:nosplit
func (self class) IsRough() bool { //gd:PhysicsMaterial.is_rough
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_rough, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetBounce(bounce float64) { //gd:PhysicsMaterial.set_bounce
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_bounce, 0|(gdextension.SizeFloat<<4), &struct{ bounce float64 }{bounce})
}

//go:nosplit
func (self class) GetBounce() float64 { //gd:PhysicsMaterial.get_bounce
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_bounce, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAbsorbent(absorbent bool) { //gd:PhysicsMaterial.set_absorbent
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_absorbent, 0|(gdextension.SizeBool<<4), &struct{ absorbent bool }{absorbent})
}

//go:nosplit
func (self class) IsAbsorbent() bool { //gd:PhysicsMaterial.is_absorbent
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_absorbent, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsPhysicsMaterial() Advanced {
	return Advanced{pointers.AsA[gdclass.PhysicsMaterial](self[0])}
}
func (self Instance) AsPhysicsMaterial() Instance {
	return Instance{pointers.AsA[gdclass.PhysicsMaterial](self[0])}
}
func (self *Extension[T]) AsPhysicsMaterial() Instance { return self.Super().AsPhysicsMaterial() }
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("PhysicsMaterial", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.PhysicsMaterial](ptr)} })
}
