// Code generated by the generate package DO NOT EDIT

// Package AudioEffectLimiter provides methods for working with AudioEffectLimiter object instances.
package AudioEffectLimiter

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/AudioEffect"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A limiter is similar to a compressor, but it's less flexible and designed to disallow sound going over a given dB threshold. Adding one in the Master bus is always recommended to reduce the effects of clipping.
Soft clipping starts to reduce the peaks a little below the threshold level and progressively increases its effect as the input level increases such that the threshold is never exceeded.
*/
type Instance [1]gdclass.AudioEffectLimiter

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_ceiling_db      gdextension.MethodForClass `hash:"373806689"`
	get_ceiling_db      gdextension.MethodForClass `hash:"1740695150"`
	set_threshold_db    gdextension.MethodForClass `hash:"373806689"`
	get_threshold_db    gdextension.MethodForClass `hash:"1740695150"`
	set_soft_clip_db    gdextension.MethodForClass `hash:"373806689"`
	get_soft_clip_db    gdextension.MethodForClass `hash:"1740695150"`
	set_soft_clip_ratio gdextension.MethodForClass `hash:"373806689"`
	get_soft_clip_ratio gdextension.MethodForClass `hash:"1740695150"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("AudioEffectLimiter")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsAudioEffectLimiter() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.AudioEffectLimiter

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.AudioEffectLimiter](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.AudioEffectLimiter](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.AudioEffectLimiter{pointers.Add[gdclass.AudioEffectLimiter]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.AudioEffectLimiter{pointers.New[gdclass.AudioEffectLimiter]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) CeilingDb() Float.X {
	return Float.X(Float.X(class(self).GetCeilingDb()))
}

func (self Instance) SetCeilingDb(value Float.X) {
	class(self).SetCeilingDb(float64(value))
}

func (self Instance) ThresholdDb() Float.X {
	return Float.X(Float.X(class(self).GetThresholdDb()))
}

func (self Instance) SetThresholdDb(value Float.X) {
	class(self).SetThresholdDb(float64(value))
}

func (self Instance) SoftClipDb() Float.X {
	return Float.X(Float.X(class(self).GetSoftClipDb()))
}

func (self Instance) SetSoftClipDb(value Float.X) {
	class(self).SetSoftClipDb(float64(value))
}

func (self Instance) SoftClipRatio() Float.X {
	return Float.X(Float.X(class(self).GetSoftClipRatio()))
}

func (self Instance) SetSoftClipRatio(value Float.X) {
	class(self).SetSoftClipRatio(float64(value))
}

//go:nosplit
func (self class) SetCeilingDb(ceiling float64) { //gd:AudioEffectLimiter.set_ceiling_db
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_ceiling_db, 0|(gdextension.SizeFloat<<4), &struct{ ceiling float64 }{ceiling})
}

//go:nosplit
func (self class) GetCeilingDb() float64 { //gd:AudioEffectLimiter.get_ceiling_db
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_ceiling_db, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetThresholdDb(threshold float64) { //gd:AudioEffectLimiter.set_threshold_db
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_threshold_db, 0|(gdextension.SizeFloat<<4), &struct{ threshold float64 }{threshold})
}

//go:nosplit
func (self class) GetThresholdDb() float64 { //gd:AudioEffectLimiter.get_threshold_db
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_threshold_db, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSoftClipDb(soft_clip float64) { //gd:AudioEffectLimiter.set_soft_clip_db
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_soft_clip_db, 0|(gdextension.SizeFloat<<4), &struct{ soft_clip float64 }{soft_clip})
}

//go:nosplit
func (self class) GetSoftClipDb() float64 { //gd:AudioEffectLimiter.get_soft_clip_db
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_soft_clip_db, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetSoftClipRatio(soft_clip float64) { //gd:AudioEffectLimiter.set_soft_clip_ratio
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_soft_clip_ratio, 0|(gdextension.SizeFloat<<4), &struct{ soft_clip float64 }{soft_clip})
}

//go:nosplit
func (self class) GetSoftClipRatio() float64 { //gd:AudioEffectLimiter.get_soft_clip_ratio
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_soft_clip_ratio, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsAudioEffectLimiter() Advanced {
	return Advanced{pointers.AsA[gdclass.AudioEffectLimiter](self[0])}
}
func (self Instance) AsAudioEffectLimiter() Instance {
	return Instance{pointers.AsA[gdclass.AudioEffectLimiter](self[0])}
}
func (self *Extension[T]) AsAudioEffectLimiter() Instance { return self.Super().AsAudioEffectLimiter() }
func (self class) AsAudioEffect() AudioEffect.Advanced {
	return AudioEffect.Advanced{pointers.AsA[gdclass.AudioEffect](self[0])}
}
func (self *Extension[T]) AsAudioEffect() AudioEffect.Instance { return self.Super().AsAudioEffect() }
func (self Instance) AsAudioEffect() AudioEffect.Instance {
	return AudioEffect.Instance{pointers.AsA[gdclass.AudioEffect](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioEffect.Advanced(self.AsAudioEffect()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(AudioEffect.Instance(self.AsAudioEffect()), name)
	}
}
func init() {
	gdclass.Register("AudioEffectLimiter", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.AudioEffectLimiter](ptr)} })
}
