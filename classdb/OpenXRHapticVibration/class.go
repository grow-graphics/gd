// Code generated by the generate package DO NOT EDIT

// Package OpenXRHapticVibration provides methods for working with OpenXRHapticVibration object instances.
package OpenXRHapticVibration

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/OpenXRHapticBase"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This haptic feedback resource makes it possible to define a vibration based haptic feedback pulse that can be triggered through actions in the OpenXR action map.
*/
type Instance [1]gdclass.OpenXRHapticVibration

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_duration  gdextension.MethodForClass `hash:"1286410249"`
	get_duration  gdextension.MethodForClass `hash:"3905245786"`
	set_frequency gdextension.MethodForClass `hash:"373806689"`
	get_frequency gdextension.MethodForClass `hash:"1740695150"`
	set_amplitude gdextension.MethodForClass `hash:"373806689"`
	get_amplitude gdextension.MethodForClass `hash:"1740695150"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("OpenXRHapticVibration")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsOpenXRHapticVibration() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.OpenXRHapticVibration

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.OpenXRHapticVibration](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.OpenXRHapticVibration](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.OpenXRHapticVibration{pointers.Add[gdclass.OpenXRHapticVibration]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.OpenXRHapticVibration{pointers.New[gdclass.OpenXRHapticVibration]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) Duration() int {
	return int(int(class(self).GetDuration()))
}

func (self Instance) SetDuration(value int) {
	class(self).SetDuration(int64(value))
}

func (self Instance) Frequency() Float.X {
	return Float.X(Float.X(class(self).GetFrequency()))
}

func (self Instance) SetFrequency(value Float.X) {
	class(self).SetFrequency(float64(value))
}

func (self Instance) Amplitude() Float.X {
	return Float.X(Float.X(class(self).GetAmplitude()))
}

func (self Instance) SetAmplitude(value Float.X) {
	class(self).SetAmplitude(float64(value))
}

//go:nosplit
func (self class) SetDuration(duration int64) { //gd:OpenXRHapticVibration.set_duration
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_duration, 0|(gdextension.SizeInt<<4), &struct{ duration int64 }{duration})
}

//go:nosplit
func (self class) GetDuration() int64 { //gd:OpenXRHapticVibration.get_duration
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_duration, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetFrequency(frequency float64) { //gd:OpenXRHapticVibration.set_frequency
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_frequency, 0|(gdextension.SizeFloat<<4), &struct{ frequency float64 }{frequency})
}

//go:nosplit
func (self class) GetFrequency() float64 { //gd:OpenXRHapticVibration.get_frequency
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_frequency, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetAmplitude(amplitude float64) { //gd:OpenXRHapticVibration.set_amplitude
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_amplitude, 0|(gdextension.SizeFloat<<4), &struct{ amplitude float64 }{amplitude})
}

//go:nosplit
func (self class) GetAmplitude() float64 { //gd:OpenXRHapticVibration.get_amplitude
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_amplitude, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsOpenXRHapticVibration() Advanced {
	return Advanced{pointers.AsA[gdclass.OpenXRHapticVibration](self[0])}
}
func (self Instance) AsOpenXRHapticVibration() Instance {
	return Instance{pointers.AsA[gdclass.OpenXRHapticVibration](self[0])}
}
func (self *Extension[T]) AsOpenXRHapticVibration() Instance {
	return self.Super().AsOpenXRHapticVibration()
}
func (self class) AsOpenXRHapticBase() OpenXRHapticBase.Advanced {
	return OpenXRHapticBase.Advanced{pointers.AsA[gdclass.OpenXRHapticBase](self[0])}
}
func (self *Extension[T]) AsOpenXRHapticBase() OpenXRHapticBase.Instance {
	return self.Super().AsOpenXRHapticBase()
}
func (self Instance) AsOpenXRHapticBase() OpenXRHapticBase.Instance {
	return OpenXRHapticBase.Instance{pointers.AsA[gdclass.OpenXRHapticBase](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(OpenXRHapticBase.Advanced(self.AsOpenXRHapticBase()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(OpenXRHapticBase.Instance(self.AsOpenXRHapticBase()), name)
	}
}
func init() {
	gdclass.Register("OpenXRHapticVibration", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.OpenXRHapticVibration](ptr)} })
}
