// Code generated by the generate package DO NOT EDIT

// Package CameraTexture provides methods for working with CameraTexture object instances.
package CameraTexture

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/CameraFeed"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/Texture"
import "graphics.gd/classdb/Texture2D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
This texture gives access to the camera texture provided by a [CameraFeed].
[b]Note:[/b] Many cameras supply YCbCr images which need to be converted in a shader.
*/
type Instance [1]gdclass.CameraTexture

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_camera_feed_id gdextension.MethodForClass `hash:"1286410249"`
	get_camera_feed_id gdextension.MethodForClass `hash:"3905245786"`
	set_which_feed     gdextension.MethodForClass `hash:"1595299230"`
	get_which_feed     gdextension.MethodForClass `hash:"91039457"`
	set_camera_active  gdextension.MethodForClass `hash:"2586408642"`
	get_camera_active  gdextension.MethodForClass `hash:"36873697"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("CameraTexture")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsCameraTexture() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.CameraTexture

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.CameraTexture](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.CameraTexture](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.CameraTexture{pointers.Add[gdclass.CameraTexture]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.CameraTexture{pointers.New[gdclass.CameraTexture]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsRefCounted()[0].InitRef()
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) CameraFeedId() int {
	return int(int(class(self).GetCameraFeedId()))
}

func (self Instance) SetCameraFeedId(value int) {
	class(self).SetCameraFeedId(int64(value))
}

func (self Instance) WhichFeed() CameraFeed.ImageType {
	return CameraFeed.ImageType(class(self).GetWhichFeed())
}

func (self Instance) SetWhichFeed(value CameraFeed.ImageType) {
	class(self).SetWhichFeed(value)
}

func (self Instance) CameraIsActive() bool {
	return bool(class(self).GetCameraActive())
}

func (self Instance) SetCameraIsActive(value bool) {
	class(self).SetCameraActive(value)
}

//go:nosplit
func (self class) SetCameraFeedId(feed_id int64) { //gd:CameraTexture.set_camera_feed_id
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_camera_feed_id, 0|(gdextension.SizeInt<<4), &struct{ feed_id int64 }{feed_id})
}

//go:nosplit
func (self class) GetCameraFeedId() int64 { //gd:CameraTexture.get_camera_feed_id
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_camera_feed_id, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetWhichFeed(which_feed CameraFeed.ImageType) { //gd:CameraTexture.set_which_feed
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_which_feed, 0|(gdextension.SizeInt<<4), &struct{ which_feed CameraFeed.ImageType }{which_feed})
}

//go:nosplit
func (self class) GetWhichFeed() CameraFeed.ImageType { //gd:CameraTexture.get_which_feed
	var r_ret = gdextension.Call[CameraFeed.ImageType](gd.ObjectChecked(self.AsObject()), methods.get_which_feed, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCameraActive(active bool) { //gd:CameraTexture.set_camera_active
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_camera_active, 0|(gdextension.SizeBool<<4), &struct{ active bool }{active})
}

//go:nosplit
func (self class) GetCameraActive() bool { //gd:CameraTexture.get_camera_active
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_camera_active, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}
func (self class) AsCameraTexture() Advanced {
	return Advanced{pointers.AsA[gdclass.CameraTexture](self[0])}
}
func (self Instance) AsCameraTexture() Instance {
	return Instance{pointers.AsA[gdclass.CameraTexture](self[0])}
}
func (self *Extension[T]) AsCameraTexture() Instance { return self.Super().AsCameraTexture() }
func (self class) AsTexture2D() Texture2D.Advanced {
	return Texture2D.Advanced{pointers.AsA[gdclass.Texture2D](self[0])}
}
func (self *Extension[T]) AsTexture2D() Texture2D.Instance { return self.Super().AsTexture2D() }
func (self Instance) AsTexture2D() Texture2D.Instance {
	return Texture2D.Instance{pointers.AsA[gdclass.Texture2D](self[0])}
}
func (self class) AsTexture() Texture.Advanced {
	return Texture.Advanced{pointers.AsA[gdclass.Texture](self[0])}
}
func (self *Extension[T]) AsTexture() Texture.Instance { return self.Super().AsTexture() }
func (self Instance) AsTexture() Texture.Instance {
	return Texture.Instance{pointers.AsA[gdclass.Texture](self[0])}
}
func (self class) AsResource() Resource.Advanced {
	return Resource.Advanced{pointers.AsA[gdclass.Resource](self[0])}
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return Resource.Instance{pointers.AsA[gdclass.Resource](self[0])}
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return [1]gd.RefCounted{gd.RefCounted(pointers.AsA[gd.Object](self[0]))}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Texture2D.Advanced(self.AsTexture2D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Texture2D.Instance(self.AsTexture2D()), name)
	}
}
func init() {
	gdclass.Register("CameraTexture", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.CameraTexture](ptr)} })
}
