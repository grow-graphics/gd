// Code generated by the generate package DO NOT EDIT

// Package EditorScrollBox provides methods for working with EditorScrollBox object instances.
package EditorScrollBox

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/BoxContainer"
import "graphics.gd/classdb/Button"
import "graphics.gd/classdb/CanvasItem"
import "graphics.gd/classdb/Container"
import "graphics.gd/classdb/Control"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/ScrollContainer"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A class used internally by the Editor to allow adding a control that can be scrolled with buttons.
*/
type Instance [1]gdclass.EditorScrollBox

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsEditorScrollBox() Instance
}

/*
Changes the control used by the [ScrollContainer].
if [code]null[/code], removes the control used by the [ScrollContainer].
*/
func (self Instance) SetControl(control Control.Instance) { //gd:EditorScrollBox.set_control
	Advanced(self).SetControl(control)
}

/*
Returns the control node used by the [ScrollContainer].
*/
func (self Instance) GetControl() Control.Instance { //gd:EditorScrollBox.get_control
	return Control.Instance(Advanced(self).GetControl())
}
func (self Instance) HasControl() bool { //gd:EditorScrollBox.has_control
	return bool(Advanced(self).HasControl())
}

/*
Ensures the given [param control] is visible.
[b]Note:[/b] This will not work on a node that was just added during the same frame. If you want to scroll to a newly added child, you must wait until the next frame using [signal SceneTree.process_frame]:
*/
func (self Instance) EnsureControlVisible(control Control.Instance) { //gd:EditorScrollBox.ensure_control_visible
	Advanced(self).EnsureControlVisible(control)
}

/*
Returns the first button used to scroll to the begin.
*/
func (self Instance) GetFirstButton() Button.Instance { //gd:EditorScrollBox.get_first_button
	return Button.Instance(Advanced(self).GetFirstButton())
}

/*
Returns the second button used to scroll to the end.
*/
func (self Instance) GetSecondButton() Button.Instance { //gd:EditorScrollBox.get_second_button
	return Button.Instance(Advanced(self).GetSecondButton())
}

/*
Returns the [ScrollContainer] used by the buttons.
*/
func (self Instance) GetScrollContainer() ScrollContainer.Instance { //gd:EditorScrollBox.get_scroll_container
	return ScrollContainer.Instance(Advanced(self).GetScrollContainer())
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.EditorScrollBox

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("EditorScrollBox"))
	casted := Instance{*(*gdclass.EditorScrollBox)(unsafe.Pointer(&object))}
	return casted
}

/*
Changes the control used by the [ScrollContainer].
if [code]null[/code], removes the control used by the [ScrollContainer].
*/
//go:nosplit
func (self class) SetControl(control [1]gdclass.Control) { //gd:EditorScrollBox.set_control
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(control[0])[0])
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.EditorScrollBox.Bind_set_control, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the control node used by the [ScrollContainer].
*/
//go:nosplit
func (self class) GetControl() [1]gdclass.Control { //gd:EditorScrollBox.get_control
	var frame = callframe.New()
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.EditorScrollBox.Bind_get_control, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.Control{gd.PointerWithOwnershipTransferredToGo[gdclass.Control](r_ret.Get())}
	frame.Free()
	return ret
}

//go:nosplit
func (self class) HasControl() bool { //gd:EditorScrollBox.has_control
	var frame = callframe.New()
	var r_ret = callframe.Ret[bool](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.EditorScrollBox.Bind_has_control, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

/*
Ensures the given [param control] is visible.
[b]Note:[/b] This will not work on a node that was just added during the same frame. If you want to scroll to a newly added child, you must wait until the next frame using [signal SceneTree.process_frame]:
*/
//go:nosplit
func (self class) EnsureControlVisible(control [1]gdclass.Control) { //gd:EditorScrollBox.ensure_control_visible
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(control[0])[0])
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.EditorScrollBox.Bind_ensure_control_visible, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

/*
Returns the first button used to scroll to the begin.
*/
//go:nosplit
func (self class) GetFirstButton() [1]gdclass.Button { //gd:EditorScrollBox.get_first_button
	var frame = callframe.New()
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.EditorScrollBox.Bind_get_first_button, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.Button{gd.PointerWithOwnershipTransferredToGo[gdclass.Button](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Returns the second button used to scroll to the end.
*/
//go:nosplit
func (self class) GetSecondButton() [1]gdclass.Button { //gd:EditorScrollBox.get_second_button
	var frame = callframe.New()
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.EditorScrollBox.Bind_get_second_button, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.Button{gd.PointerWithOwnershipTransferredToGo[gdclass.Button](r_ret.Get())}
	frame.Free()
	return ret
}

/*
Returns the [ScrollContainer] used by the buttons.
*/
//go:nosplit
func (self class) GetScrollContainer() [1]gdclass.ScrollContainer { //gd:EditorScrollBox.get_scroll_container
	var frame = callframe.New()
	var r_ret = callframe.Ret[gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.EditorScrollBox.Bind_get_scroll_container, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = [1]gdclass.ScrollContainer{gd.PointerWithOwnershipTransferredToGo[gdclass.ScrollContainer](r_ret.Get())}
	frame.Free()
	return ret
}
func (self Instance) OnVerticalChanged(cb func(is_vertical bool)) {
	self[0].AsObject()[0].Connect(gd.NewStringName("vertical_changed"), gd.NewCallable(cb), 0)
}

func (self class) AsEditorScrollBox() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsEditorScrollBox() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsEditorScrollBox() Instance { return self.Super().AsEditorScrollBox() }
func (self class) AsBoxContainer() BoxContainer.Advanced {
	return *((*BoxContainer.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsBoxContainer() BoxContainer.Instance {
	return self.Super().AsBoxContainer()
}
func (self Instance) AsBoxContainer() BoxContainer.Instance {
	return *((*BoxContainer.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsContainer() Container.Advanced {
	return *((*Container.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsContainer() Container.Instance { return self.Super().AsContainer() }
func (self Instance) AsContainer() Container.Instance {
	return *((*Container.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsControl() Control.Advanced         { return *((*Control.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsControl() Control.Instance { return self.Super().AsControl() }
func (self Instance) AsControl() Control.Instance {
	return *((*Control.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsCanvasItem() CanvasItem.Advanced {
	return *((*CanvasItem.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsCanvasItem() CanvasItem.Instance { return self.Super().AsCanvasItem() }
func (self Instance) AsCanvasItem() CanvasItem.Instance {
	return *((*CanvasItem.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(BoxContainer.Advanced(self.AsBoxContainer()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(BoxContainer.Instance(self.AsBoxContainer()), name)
	}
}
func init() {
	gdclass.Register("EditorScrollBox", func(ptr gd.Object) any {
		return [1]gdclass.EditorScrollBox{*(*gdclass.EditorScrollBox)(unsafe.Pointer(&ptr))}
	})
}
