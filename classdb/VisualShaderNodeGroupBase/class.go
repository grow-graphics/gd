// Code generated by the generate package DO NOT EDIT

// Package VisualShaderNodeGroupBase provides methods for working with VisualShaderNodeGroupBase object instances.
package VisualShaderNodeGroupBase

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/VisualShaderNode"
import "graphics.gd/classdb/VisualShaderNodeResizableBase"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Currently, has no direct usage, use the derived classes instead.
*/
type Instance [1]gdclass.VisualShaderNodeGroupBase

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsVisualShaderNodeGroupBase() Instance
}

/*
Defines all input ports using a [String] formatted as a colon-separated list: [code]id,type,name;[/code] (see [method add_input_port]).
*/
func (self Instance) SetInputs(inputs string) { //gd:VisualShaderNodeGroupBase.set_inputs
	Advanced(self).SetInputs(String.New(inputs))
}

/*
Returns a [String] description of the input ports as a colon-separated list using the format [code]id,type,name;[/code] (see [method add_input_port]).
*/
func (self Instance) GetInputs() string { //gd:VisualShaderNodeGroupBase.get_inputs
	return string(Advanced(self).GetInputs().String())
}

/*
Defines all output ports using a [String] formatted as a colon-separated list: [code]id,type,name;[/code] (see [method add_output_port]).
*/
func (self Instance) SetOutputs(outputs string) { //gd:VisualShaderNodeGroupBase.set_outputs
	Advanced(self).SetOutputs(String.New(outputs))
}

/*
Returns a [String] description of the output ports as a colon-separated list using the format [code]id,type,name;[/code] (see [method add_output_port]).
*/
func (self Instance) GetOutputs() string { //gd:VisualShaderNodeGroupBase.get_outputs
	return string(Advanced(self).GetOutputs().String())
}

/*
Returns [code]true[/code] if the specified port name does not override an existed port name and is valid within the shader.
*/
func (self Instance) IsValidPortName(name string) bool { //gd:VisualShaderNodeGroupBase.is_valid_port_name
	return bool(Advanced(self).IsValidPortName(String.New(name)))
}

/*
Adds an input port with the specified [param type] (see [enum VisualShaderNode.PortType]) and [param name].
*/
func (self Instance) AddInputPort(id int, atype int, name string) { //gd:VisualShaderNodeGroupBase.add_input_port
	Advanced(self).AddInputPort(int64(id), int64(atype), String.New(name))
}

/*
Removes the specified input port.
*/
func (self Instance) RemoveInputPort(id int) { //gd:VisualShaderNodeGroupBase.remove_input_port
	Advanced(self).RemoveInputPort(int64(id))
}

/*
Returns the number of input ports in use. Alternative for [method get_free_input_port_id].
*/
func (self Instance) GetInputPortCount() int { //gd:VisualShaderNodeGroupBase.get_input_port_count
	return int(int(Advanced(self).GetInputPortCount()))
}

/*
Returns [code]true[/code] if the specified input port exists.
*/
func (self Instance) HasInputPort(id int) bool { //gd:VisualShaderNodeGroupBase.has_input_port
	return bool(Advanced(self).HasInputPort(int64(id)))
}

/*
Removes all previously specified input ports.
*/
func (self Instance) ClearInputPorts() { //gd:VisualShaderNodeGroupBase.clear_input_ports
	Advanced(self).ClearInputPorts()
}

/*
Adds an output port with the specified [param type] (see [enum VisualShaderNode.PortType]) and [param name].
*/
func (self Instance) AddOutputPort(id int, atype int, name string) { //gd:VisualShaderNodeGroupBase.add_output_port
	Advanced(self).AddOutputPort(int64(id), int64(atype), String.New(name))
}

/*
Removes the specified output port.
*/
func (self Instance) RemoveOutputPort(id int) { //gd:VisualShaderNodeGroupBase.remove_output_port
	Advanced(self).RemoveOutputPort(int64(id))
}

/*
Returns the number of output ports in use. Alternative for [method get_free_output_port_id].
*/
func (self Instance) GetOutputPortCount() int { //gd:VisualShaderNodeGroupBase.get_output_port_count
	return int(int(Advanced(self).GetOutputPortCount()))
}

/*
Returns [code]true[/code] if the specified output port exists.
*/
func (self Instance) HasOutputPort(id int) bool { //gd:VisualShaderNodeGroupBase.has_output_port
	return bool(Advanced(self).HasOutputPort(int64(id)))
}

/*
Removes all previously specified output ports.
*/
func (self Instance) ClearOutputPorts() { //gd:VisualShaderNodeGroupBase.clear_output_ports
	Advanced(self).ClearOutputPorts()
}

/*
Renames the specified input port.
*/
func (self Instance) SetInputPortName(id int, name string) { //gd:VisualShaderNodeGroupBase.set_input_port_name
	Advanced(self).SetInputPortName(int64(id), String.New(name))
}

/*
Sets the specified input port's type (see [enum VisualShaderNode.PortType]).
*/
func (self Instance) SetInputPortType(id int, atype int) { //gd:VisualShaderNodeGroupBase.set_input_port_type
	Advanced(self).SetInputPortType(int64(id), int64(atype))
}

/*
Renames the specified output port.
*/
func (self Instance) SetOutputPortName(id int, name string) { //gd:VisualShaderNodeGroupBase.set_output_port_name
	Advanced(self).SetOutputPortName(int64(id), String.New(name))
}

/*
Sets the specified output port's type (see [enum VisualShaderNode.PortType]).
*/
func (self Instance) SetOutputPortType(id int, atype int) { //gd:VisualShaderNodeGroupBase.set_output_port_type
	Advanced(self).SetOutputPortType(int64(id), int64(atype))
}

/*
Returns a free input port ID which can be used in [method add_input_port].
*/
func (self Instance) GetFreeInputPortId() int { //gd:VisualShaderNodeGroupBase.get_free_input_port_id
	return int(int(Advanced(self).GetFreeInputPortId()))
}

/*
Returns a free output port ID which can be used in [method add_output_port].
*/
func (self Instance) GetFreeOutputPortId() int { //gd:VisualShaderNodeGroupBase.get_free_output_port_id
	return int(int(Advanced(self).GetFreeOutputPortId()))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.VisualShaderNodeGroupBase

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("VisualShaderNodeGroupBase"))
	casted := Instance{*(*gdclass.VisualShaderNodeGroupBase)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

/*
Defines all input ports using a [String] formatted as a colon-separated list: [code]id,type,name;[/code] (see [method add_input_port]).
*/
//go:nosplit
func (self class) SetInputs(inputs String.Readable) { //gd:VisualShaderNodeGroupBase.set_inputs
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_set_inputs), 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ inputs gdextension.String }{gdextension.String(pointers.Get(gd.InternalString(inputs))[0])}))
}

/*
Returns a [String] description of the input ports as a colon-separated list using the format [code]id,type,name;[/code] (see [method add_input_port]).
*/
//go:nosplit
func (self class) GetInputs() String.Readable { //gd:VisualShaderNodeGroupBase.get_inputs
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_get_inputs), gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Defines all output ports using a [String] formatted as a colon-separated list: [code]id,type,name;[/code] (see [method add_output_port]).
*/
//go:nosplit
func (self class) SetOutputs(outputs String.Readable) { //gd:VisualShaderNodeGroupBase.set_outputs
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_set_outputs), 0|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ outputs gdextension.String }{gdextension.String(pointers.Get(gd.InternalString(outputs))[0])}))
}

/*
Returns a [String] description of the output ports as a colon-separated list using the format [code]id,type,name;[/code] (see [method add_output_port]).
*/
//go:nosplit
func (self class) GetOutputs() String.Readable { //gd:VisualShaderNodeGroupBase.get_outputs
	var r_ret = gdextension.Call[[1]gd.EnginePointer](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_get_outputs), gdextension.SizeString, unsafe.Pointer(&struct{}{}))
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret)))
	return ret
}

/*
Returns [code]true[/code] if the specified port name does not override an existed port name and is valid within the shader.
*/
//go:nosplit
func (self class) IsValidPortName(name String.Readable) bool { //gd:VisualShaderNodeGroupBase.is_valid_port_name
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_is_valid_port_name), gdextension.SizeBool|(gdextension.SizeString<<4), unsafe.Pointer(&struct{ name gdextension.String }{gdextension.String(pointers.Get(gd.InternalString(name))[0])}))
	var ret = r_ret
	return ret
}

/*
Adds an input port with the specified [param type] (see [enum VisualShaderNode.PortType]) and [param name].
*/
//go:nosplit
func (self class) AddInputPort(id int64, atype int64, name String.Readable) { //gd:VisualShaderNodeGroupBase.add_input_port
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_add_input_port), 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeString<<12), unsafe.Pointer(&struct {
		id    int64
		atype int64
		name  gdextension.String
	}{id, atype, gdextension.String(pointers.Get(gd.InternalString(name))[0])}))
}

/*
Removes the specified input port.
*/
//go:nosplit
func (self class) RemoveInputPort(id int64) { //gd:VisualShaderNodeGroupBase.remove_input_port
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_remove_input_port), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ id int64 }{id}))
}

/*
Returns the number of input ports in use. Alternative for [method get_free_input_port_id].
*/
//go:nosplit
func (self class) GetInputPortCount() int64 { //gd:VisualShaderNodeGroupBase.get_input_port_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_get_input_port_count), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if the specified input port exists.
*/
//go:nosplit
func (self class) HasInputPort(id int64) bool { //gd:VisualShaderNodeGroupBase.has_input_port
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_has_input_port), gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ id int64 }{id}))
	var ret = r_ret
	return ret
}

/*
Removes all previously specified input ports.
*/
//go:nosplit
func (self class) ClearInputPorts() { //gd:VisualShaderNodeGroupBase.clear_input_ports
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_clear_input_ports), 0, unsafe.Pointer(&struct{}{}))
}

/*
Adds an output port with the specified [param type] (see [enum VisualShaderNode.PortType]) and [param name].
*/
//go:nosplit
func (self class) AddOutputPort(id int64, atype int64, name String.Readable) { //gd:VisualShaderNodeGroupBase.add_output_port
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_add_output_port), 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8)|(gdextension.SizeString<<12), unsafe.Pointer(&struct {
		id    int64
		atype int64
		name  gdextension.String
	}{id, atype, gdextension.String(pointers.Get(gd.InternalString(name))[0])}))
}

/*
Removes the specified output port.
*/
//go:nosplit
func (self class) RemoveOutputPort(id int64) { //gd:VisualShaderNodeGroupBase.remove_output_port
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_remove_output_port), 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ id int64 }{id}))
}

/*
Returns the number of output ports in use. Alternative for [method get_free_output_port_id].
*/
//go:nosplit
func (self class) GetOutputPortCount() int64 { //gd:VisualShaderNodeGroupBase.get_output_port_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_get_output_port_count), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if the specified output port exists.
*/
//go:nosplit
func (self class) HasOutputPort(id int64) bool { //gd:VisualShaderNodeGroupBase.has_output_port
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_has_output_port), gdextension.SizeBool|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ id int64 }{id}))
	var ret = r_ret
	return ret
}

/*
Removes all previously specified output ports.
*/
//go:nosplit
func (self class) ClearOutputPorts() { //gd:VisualShaderNodeGroupBase.clear_output_ports
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_clear_output_ports), 0, unsafe.Pointer(&struct{}{}))
}

/*
Renames the specified input port.
*/
//go:nosplit
func (self class) SetInputPortName(id int64, name String.Readable) { //gd:VisualShaderNodeGroupBase.set_input_port_name
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_set_input_port_name), 0|(gdextension.SizeInt<<4)|(gdextension.SizeString<<8), unsafe.Pointer(&struct {
		id   int64
		name gdextension.String
	}{id, gdextension.String(pointers.Get(gd.InternalString(name))[0])}))
}

/*
Sets the specified input port's type (see [enum VisualShaderNode.PortType]).
*/
//go:nosplit
func (self class) SetInputPortType(id int64, atype int64) { //gd:VisualShaderNodeGroupBase.set_input_port_type
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_set_input_port_type), 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		id    int64
		atype int64
	}{id, atype}))
}

/*
Renames the specified output port.
*/
//go:nosplit
func (self class) SetOutputPortName(id int64, name String.Readable) { //gd:VisualShaderNodeGroupBase.set_output_port_name
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_set_output_port_name), 0|(gdextension.SizeInt<<4)|(gdextension.SizeString<<8), unsafe.Pointer(&struct {
		id   int64
		name gdextension.String
	}{id, gdextension.String(pointers.Get(gd.InternalString(name))[0])}))
}

/*
Sets the specified output port's type (see [enum VisualShaderNode.PortType]).
*/
//go:nosplit
func (self class) SetOutputPortType(id int64, atype int64) { //gd:VisualShaderNodeGroupBase.set_output_port_type
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_set_output_port_type), 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), unsafe.Pointer(&struct {
		id    int64
		atype int64
	}{id, atype}))
}

/*
Returns a free input port ID which can be used in [method add_input_port].
*/
//go:nosplit
func (self class) GetFreeInputPortId() int64 { //gd:VisualShaderNodeGroupBase.get_free_input_port_id
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_get_free_input_port_id), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns a free output port ID which can be used in [method add_output_port].
*/
//go:nosplit
func (self class) GetFreeOutputPortId() int64 { //gd:VisualShaderNodeGroupBase.get_free_output_port_id
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), gdextension.MethodForClass(gd.Global.Methods.VisualShaderNodeGroupBase.Bind_get_free_output_port_id), gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsVisualShaderNodeGroupBase() Advanced {
	return *((*Advanced)(unsafe.Pointer(&self)))
}
func (self Instance) AsVisualShaderNodeGroupBase() Instance {
	return *((*Instance)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisualShaderNodeGroupBase() Instance {
	return self.Super().AsVisualShaderNodeGroupBase()
}
func (self class) AsVisualShaderNodeResizableBase() VisualShaderNodeResizableBase.Advanced {
	return *((*VisualShaderNodeResizableBase.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisualShaderNodeResizableBase() VisualShaderNodeResizableBase.Instance {
	return self.Super().AsVisualShaderNodeResizableBase()
}
func (self Instance) AsVisualShaderNodeResizableBase() VisualShaderNodeResizableBase.Instance {
	return *((*VisualShaderNodeResizableBase.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsVisualShaderNode() VisualShaderNode.Advanced {
	return *((*VisualShaderNode.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsVisualShaderNode() VisualShaderNode.Instance {
	return self.Super().AsVisualShaderNode()
}
func (self Instance) AsVisualShaderNode() VisualShaderNode.Instance {
	return *((*VisualShaderNode.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualShaderNodeResizableBase.Advanced(self.AsVisualShaderNodeResizableBase()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(VisualShaderNodeResizableBase.Instance(self.AsVisualShaderNodeResizableBase()), name)
	}
}
func init() {
	gdclass.Register("VisualShaderNodeGroupBase", func(ptr gd.Object) any {
		return [1]gdclass.VisualShaderNodeGroupBase{*(*gdclass.VisualShaderNodeGroupBase)(unsafe.Pointer(&ptr))}
	})
}
