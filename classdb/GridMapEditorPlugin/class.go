// Code generated by the generate package DO NOT EDIT

// Package GridMapEditorPlugin provides methods for working with GridMapEditorPlugin object instances.
package GridMapEditorPlugin

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/EditorPlugin"
import "graphics.gd/classdb/GridMap"
import "graphics.gd/classdb/Node"
import "graphics.gd/variant/AABB"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Vector3i"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
GridMapEditorPlugin provides access to the [GridMap] editor functionality.
*/
type Instance [1]gdclass.GridMapEditorPlugin

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	get_current_grid_map      gdextension.MethodForClass `hash:"1184264483"`
	set_selection             gdextension.MethodForClass `hash:"3659408297"`
	clear_selection           gdextension.MethodForClass `hash:"3218959716"`
	get_selection             gdextension.MethodForClass `hash:"1068685055"`
	has_selection             gdextension.MethodForClass `hash:"36873697"`
	get_selected_cells        gdextension.MethodForClass `hash:"3995934104"`
	set_selected_palette_item gdextension.MethodForClass `hash:"998575451"`
	get_selected_palette_item gdextension.MethodForClass `hash:"3905245786"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("GridMapEditorPlugin")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, true)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsGridMapEditorPlugin() Instance
}

/*
Returns the [GridMap] node currently edited by the grid map editor.
*/
func (self Instance) GetCurrentGridMap() GridMap.Instance { //gd:GridMapEditorPlugin.get_current_grid_map
	return GridMap.Instance(Advanced(self).GetCurrentGridMap())
}

/*
Selects the cells inside the given bounds from [param begin] to [param end].
*/
func (self Instance) SetSelection(begin Vector3i.XYZ, end Vector3i.XYZ) { //gd:GridMapEditorPlugin.set_selection
	Advanced(self).SetSelection(Vector3i.XYZ(begin), Vector3i.XYZ(end))
}

/*
Deselects any currently selected cells.
*/
func (self Instance) ClearSelection() { //gd:GridMapEditorPlugin.clear_selection
	Advanced(self).ClearSelection()
}

/*
Returns the cell coordinate bounds of the current selection. Use [method has_selection] to check if there is an active selection.
*/
func (self Instance) GetSelection() AABB.PositionSize { //gd:GridMapEditorPlugin.get_selection
	return AABB.PositionSize(Advanced(self).GetSelection())
}

/*
Returns [code]true[/code] if there are selected cells.
*/
func (self Instance) HasSelection() bool { //gd:GridMapEditorPlugin.has_selection
	return bool(Advanced(self).HasSelection())
}

/*
Returns an array of [Vector3i]s with the selected cells' coordinates.
*/
func (self Instance) GetSelectedCells() []any { //gd:GridMapEditorPlugin.get_selected_cells
	return []any(gd.ArrayAs[[]any](gd.InternalArray(Advanced(self).GetSelectedCells())))
}

/*
Selects the [MeshLibrary] item with the given index in the grid map editor's palette. If a negative index is given, no item will be selected. If a value greater than the last index is given, the last item will be selected.
[b]Note:[/b] The indices might not be in the same order as they appear in the editor's interface.
*/
func (self Instance) SetSelectedPaletteItem(item int) { //gd:GridMapEditorPlugin.set_selected_palette_item
	Advanced(self).SetSelectedPaletteItem(int64(item))
}

/*
Returns the index of the selected [MeshLibrary] item in the grid map editor's palette or [code]-1[/code] if no item is selected.
[b]Note:[/b] The indices might not be in the same order as they appear in the editor's interface.
*/
func (self Instance) GetSelectedPaletteItem() int { //gd:GridMapEditorPlugin.get_selected_palette_item
	return int(int(Advanced(self).GetSelectedPaletteItem()))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.GridMapEditorPlugin

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.GridMapEditorPlugin)(unsafe.Pointer(&obj))
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = *(*gdclass.GridMapEditorPlugin)(unsafe.Pointer(&obj))
		return true
	}
	return false
}

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {

	if !gd.Linked {
		var placeholder Instance
		*(*gd.Object)(unsafe.Pointer(&placeholder)) = pointers.Add[gd.Object]([3]uint64{})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(*(*gd.Object)(unsafe.Pointer(&placeholder)), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	object := [1]gd.Object{pointers.New[gd.Object]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})}
	casted := Instance{*(*gdclass.GridMapEditorPlugin)(unsafe.Pointer(&object))}
	object[0].Notification(0, false)
	return casted
}

/*
Returns the [GridMap] node currently edited by the grid map editor.
*/
//go:nosplit
func (self class) GetCurrentGridMap() [1]gdclass.GridMap { //gd:GridMapEditorPlugin.get_current_grid_map
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.get_current_grid_map, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.GridMap{gd.PointerMustAssertInstanceID[gdclass.GridMap](r_ret)}
	return ret
}

/*
Selects the cells inside the given bounds from [param begin] to [param end].
*/
//go:nosplit
func (self class) SetSelection(begin Vector3i.XYZ, end Vector3i.XYZ) { //gd:GridMapEditorPlugin.set_selection
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_selection, 0|(gdextension.SizeVector3i<<4)|(gdextension.SizeVector3i<<8), unsafe.Pointer(&struct {
		begin Vector3i.XYZ
		end   Vector3i.XYZ
	}{begin, end}))
}

/*
Deselects any currently selected cells.
*/
//go:nosplit
func (self class) ClearSelection() { //gd:GridMapEditorPlugin.clear_selection
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.clear_selection, 0, unsafe.Pointer(&struct{}{}))
}

/*
Returns the cell coordinate bounds of the current selection. Use [method has_selection] to check if there is an active selection.
*/
//go:nosplit
func (self class) GetSelection() AABB.PositionSize { //gd:GridMapEditorPlugin.get_selection
	var r_ret = gdextension.Call[AABB.PositionSize](gd.ObjectChecked(self.AsObject()), methods.get_selection, gdextension.SizeAABB, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns [code]true[/code] if there are selected cells.
*/
//go:nosplit
func (self class) HasSelection() bool { //gd:GridMapEditorPlugin.has_selection
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.has_selection, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

/*
Returns an array of [Vector3i]s with the selected cells' coordinates.
*/
//go:nosplit
func (self class) GetSelectedCells() Array.Any { //gd:GridMapEditorPlugin.get_selected_cells
	var r_ret = gdextension.Call[gdextension.Array](gd.ObjectChecked(self.AsObject()), methods.get_selected_cells, gdextension.SizeArray, unsafe.Pointer(&struct{}{}))
	var ret = Array.Through(gd.ArrayProxy[variant.Any]{}, pointers.Pack(pointers.New[gd.Array](r_ret)))
	return ret
}

/*
Selects the [MeshLibrary] item with the given index in the grid map editor's palette. If a negative index is given, no item will be selected. If a value greater than the last index is given, the last item will be selected.
[b]Note:[/b] The indices might not be in the same order as they appear in the editor's interface.
*/
//go:nosplit
func (self class) SetSelectedPaletteItem(item int64) { //gd:GridMapEditorPlugin.set_selected_palette_item
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_selected_palette_item, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ item int64 }{item}))
}

/*
Returns the index of the selected [MeshLibrary] item in the grid map editor's palette or [code]-1[/code] if no item is selected.
[b]Note:[/b] The indices might not be in the same order as they appear in the editor's interface.
*/
//go:nosplit
func (self class) GetSelectedPaletteItem() int64 { //gd:GridMapEditorPlugin.get_selected_palette_item
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_selected_palette_item, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsGridMapEditorPlugin() Advanced    { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsGridMapEditorPlugin() Instance { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsGridMapEditorPlugin() Instance {
	return self.Super().AsGridMapEditorPlugin()
}
func (self class) AsEditorPlugin() EditorPlugin.Advanced {
	return *((*EditorPlugin.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsEditorPlugin() EditorPlugin.Instance {
	return self.Super().AsEditorPlugin()
}
func (self Instance) AsEditorPlugin() EditorPlugin.Instance {
	return *((*EditorPlugin.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsNode() Node.Advanced         { return *((*Node.Advanced)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance      { return *((*Node.Instance)(unsafe.Pointer(&self))) }

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(EditorPlugin.Advanced(self.AsEditorPlugin()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(EditorPlugin.Instance(self.AsEditorPlugin()), name)
	}
}
func init() {
	gdclass.Register("GridMapEditorPlugin", func(ptr gd.Object) any { return *(*Instance)(unsafe.Pointer(&ptr)) })
}
