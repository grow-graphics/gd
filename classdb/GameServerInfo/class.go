// Code generated by the generate package DO NOT EDIT

// Package GameServerInfo provides methods for working with GameServerInfo object instances.
package GameServerInfo

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Game server info used by the [MasterServerClient]. Used to [method MasterServerClient.create_game] or [method MasterServerClient.update_game].
*/
type Instance [1]gdclass.GameServerInfo

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsGameServerInfo() Instance
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.GameServerInfo

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("GameServerInfo"))
	casted := Instance{*(*gdclass.GameServerInfo)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) Id() string {
	return string(class(self).GetId().String())
}

func (self Instance) SetId(value string) {
	class(self).SetId(String.New(value))
}

func (self Instance) GameName() string {
	return string(class(self).GetGameName().String())
}

func (self Instance) SetGameName(value string) {
	class(self).SetGameName(String.New(value))
}

func (self Instance) IpAddress() string {
	return string(class(self).GetIpAddress().String())
}

func (self Instance) SetIpAddress(value string) {
	class(self).SetIpAddress(String.New(value))
}

func (self Instance) Port() int {
	return int(int(class(self).GetPort()))
}

func (self Instance) SetPort(value int) {
	class(self).SetPort(int64(value))
}

func (self Instance) Description() string {
	return string(class(self).GetDescription().String())
}

func (self Instance) SetDescription(value string) {
	class(self).SetDescription(String.New(value))
}

func (self Instance) MaxPlayers() int {
	return int(int(class(self).GetMaxPlayers()))
}

func (self Instance) SetMaxPlayers(value int) {
	class(self).SetMaxPlayers(int64(value))
}

func (self Instance) Players() int {
	return int(int(class(self).GetPlayers()))
}

func (self Instance) SetPlayers(value int) {
	class(self).SetPlayers(int64(value))
}

func (self Instance) Version() string {
	return string(class(self).GetVersion().String())
}

func (self Instance) SetVersion(value string) {
	class(self).SetVersion(String.New(value))
}

//go:nosplit
func (self class) GetId() String.Readable { //gd:GameServerInfo.get_id
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_get_id, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetGameName() String.Readable { //gd:GameServerInfo.get_game_name
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_get_game_name, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetIpAddress() String.Readable { //gd:GameServerInfo.get_ip_address
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_get_ip_address, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetPort() int64 { //gd:GameServerInfo.get_port
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_get_port, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetDescription() String.Readable { //gd:GameServerInfo.get_description
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_get_description, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetMaxPlayers() int64 { //gd:GameServerInfo.get_max_players
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_get_max_players, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetPlayers() int64 { //gd:GameServerInfo.get_players
	var frame = callframe.New()
	var r_ret = callframe.Ret[int64](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_get_players, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

//go:nosplit
func (self class) GetVersion() String.Readable { //gd:GameServerInfo.get_version
	var frame = callframe.New()
	var r_ret = callframe.Ret[[1]gd.EnginePointer](frame)
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_get_version, self.AsObject(), frame.Array(0), r_ret.Addr())
	var ret = String.Via(gd.StringProxy{}, pointers.Pack(pointers.New[gd.String](r_ret.Get())))
	frame.Free()
	return ret
}

//go:nosplit
func (self class) SetId(id String.Readable) { //gd:GameServerInfo.set_id
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(id)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_set_id, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SetGameName(game_name String.Readable) { //gd:GameServerInfo.set_game_name
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(game_name)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_set_game_name, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SetIpAddress(ip_address String.Readable) { //gd:GameServerInfo.set_ip_address
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(ip_address)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_set_ip_address, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SetPort(port int64) { //gd:GameServerInfo.set_port
	var frame = callframe.New()
	callframe.Arg(frame, port)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_set_port, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SetDescription(description String.Readable) { //gd:GameServerInfo.set_description
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(description)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_set_description, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SetMaxPlayers(max_players int64) { //gd:GameServerInfo.set_max_players
	var frame = callframe.New()
	callframe.Arg(frame, max_players)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_set_max_players, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SetPlayers(players int64) { //gd:GameServerInfo.set_players
	var frame = callframe.New()
	callframe.Arg(frame, players)
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_set_players, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}

//go:nosplit
func (self class) SetVersion(version String.Readable) { //gd:GameServerInfo.set_version
	var frame = callframe.New()
	callframe.Arg(frame, pointers.Get(gd.InternalString(version)))
	var r_ret = callframe.Nil
	gd.Global.Object.MethodBindPointerCall(gd.Global.Methods.GameServerInfo.Bind_set_version, self.AsObject(), frame.Array(0), r_ret.Addr())
	frame.Free()
}
func (self class) AsGameServerInfo() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsGameServerInfo() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsGameServerInfo() Instance { return self.Super().AsGameServerInfo() }
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Advanced(self.AsResource()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(Resource.Instance(self.AsResource()), name)
	}
}
func init() {
	gdclass.Register("GameServerInfo", func(ptr gd.Object) any {
		return [1]gdclass.GameServerInfo{*(*gdclass.GameServerInfo)(unsafe.Pointer(&ptr))}
	})
}
