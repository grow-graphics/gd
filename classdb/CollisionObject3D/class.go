// Code generated by the generate package DO NOT EDIT

// Package CollisionObject3D provides methods for working with CollisionObject3D object instances.
package CollisionObject3D

import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/variant/Signal"
import "graphics.gd/classdb/Camera3D"
import "graphics.gd/classdb/InputEvent"
import "graphics.gd/classdb/Node"
import "graphics.gd/classdb/Node3D"
import "graphics.gd/classdb/Shape3D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"
import "graphics.gd/variant/Transform3D"
import "graphics.gd/variant/Vector3"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Signal.Any
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
Abstract base class for 3D physics objects. [CollisionObject3D] can hold any number of [Shape3D]s for collision. Each shape must be assigned to a [i]shape owner[/i]. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods.
[b]Warning:[/b] With a non-uniform scale, this node will likely not behave as expected. It is advised to keep its scale the same on all axes and adjust its collision shape(s) instead.

	See [Interface] for methods that can be overridden by a [Class] that extends it.
*/
type Instance [1]gdclass.CollisionObject3D

var otype gdextension.ObjectType
var sname gdextension.StringName
var methods struct {
	set_collision_layer         gdextension.MethodForClass `hash:"1286410249"`
	get_collision_layer         gdextension.MethodForClass `hash:"3905245786"`
	set_collision_mask          gdextension.MethodForClass `hash:"1286410249"`
	get_collision_mask          gdextension.MethodForClass `hash:"3905245786"`
	set_collision_layer_value   gdextension.MethodForClass `hash:"300928843"`
	get_collision_layer_value   gdextension.MethodForClass `hash:"1116898809"`
	set_collision_mask_value    gdextension.MethodForClass `hash:"300928843"`
	get_collision_mask_value    gdextension.MethodForClass `hash:"1116898809"`
	set_collision_priority      gdextension.MethodForClass `hash:"373806689"`
	get_collision_priority      gdextension.MethodForClass `hash:"1740695150"`
	set_disable_mode            gdextension.MethodForClass `hash:"1623620376"`
	get_disable_mode            gdextension.MethodForClass `hash:"410164780"`
	set_ray_pickable            gdextension.MethodForClass `hash:"2586408642"`
	is_ray_pickable             gdextension.MethodForClass `hash:"36873697"`
	set_capture_input_on_drag   gdextension.MethodForClass `hash:"2586408642"`
	get_capture_input_on_drag   gdextension.MethodForClass `hash:"36873697"`
	get_rid                     gdextension.MethodForClass `hash:"2944877500"`
	create_shape_owner          gdextension.MethodForClass `hash:"3429307534"`
	remove_shape_owner          gdextension.MethodForClass `hash:"1286410249"`
	get_shape_owners            gdextension.MethodForClass `hash:"969006518"`
	shape_owner_set_transform   gdextension.MethodForClass `hash:"3616898986"`
	shape_owner_get_transform   gdextension.MethodForClass `hash:"1965739696"`
	shape_owner_get_owner       gdextension.MethodForClass `hash:"3332903315"`
	shape_owner_set_disabled    gdextension.MethodForClass `hash:"300928843"`
	is_shape_owner_disabled     gdextension.MethodForClass `hash:"1116898809"`
	shape_owner_add_shape       gdextension.MethodForClass `hash:"2566676345"`
	shape_owner_get_shape_count gdextension.MethodForClass `hash:"923996154"`
	shape_owner_get_shape       gdextension.MethodForClass `hash:"4015519174"`
	shape_owner_get_shape_index gdextension.MethodForClass `hash:"3175239445"`
	shape_owner_remove_shape    gdextension.MethodForClass `hash:"3937882851"`
	shape_owner_clear_shapes    gdextension.MethodForClass `hash:"1286410249"`
	shape_find_owner            gdextension.MethodForClass `hash:"923996154"`
}

func init() {
	gd.Links = append(gd.Links, func() {
		sname = gdextension.Host.Strings.Intern.UTF8("CollisionObject3D")
		otype = gdextension.Host.Objects.Type(sname)
		gd.LinkMethods(sname, &methods, false)
	})
	gd.RegisterCleanup(func() {
		gdextension.Free(gdextension.TypeStringName, &sname)
	})
}
func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsCollisionObject3D() Instance
}
type Interface interface {
	//Receives unhandled [InputEvent]s. [param event_position] is the location in world space of the mouse pointer on the surface of the shape with index [param shape_idx] and [param normal] is the normal vector of the surface at that point. Connect to the [signal input_event] signal to easily pick up these events.
	//[b]Note:[/b] [method _input_event] requires [member input_ray_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set.
	InputEvent(camera Camera3D.Instance, event InputEvent.Instance, event_position Vector3.XYZ, normal Vector3.XYZ, shape_idx int)
	//Called when the mouse pointer enters any of this object's shapes. Requires [member input_ray_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set. Note that moving between different shapes within a single [CollisionObject3D] won't cause this function to be called.
	MouseEnter()
	//Called when the mouse pointer exits all this object's shapes. Requires [member input_ray_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set. Note that moving between different shapes within a single [CollisionObject3D] won't cause this function to be called.
	MouseExit()
}

// Implementation implements [Interface] with empty methods.
type Implementation = implementation

type implementation struct{}

func (self implementation) InputEvent(camera Camera3D.Instance, event InputEvent.Instance, event_position Vector3.XYZ, normal Vector3.XYZ, shape_idx int) {
	return
}
func (self implementation) MouseEnter() { return }
func (self implementation) MouseExit()  { return }

/*
Receives unhandled [InputEvent]s. [param event_position] is the location in world space of the mouse pointer on the surface of the shape with index [param shape_idx] and [param normal] is the normal vector of the surface at that point. Connect to the [signal input_event] signal to easily pick up these events.
[b]Note:[/b] [method _input_event] requires [member input_ray_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set.
*/
func (Instance) _input_event(impl func(ptr gdclass.Receiver, camera Camera3D.Instance, event InputEvent.Instance, event_position Vector3.XYZ, normal Vector3.XYZ, shape_idx int)) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args, p_back gdextension.Pointer) {
		var camera = [1]gdclass.Camera3D{pointers.New[gdclass.Camera3D]([3]uint64{uint64(gd.UnsafeGet[gdextension.Object](p_args, 0))})}

		defer pointers.End(camera[0])
		var event = [1]gdclass.InputEvent{pointers.New[gdclass.InputEvent]([3]uint64{uint64(gd.UnsafeGet[gdextension.Object](p_args, 1))})}

		defer pointers.End(event[0])
		var event_position = gd.UnsafeGet[Vector3.XYZ](p_args, 2)
		var normal = gd.UnsafeGet[Vector3.XYZ](p_args, 3)
		var shape_idx = gd.UnsafeGet[int64](p_args, 4)
		self := gdclass.Receiver(reflect.ValueOf(class).UnsafePointer())
		impl(self, camera, event, event_position, normal, int(shape_idx))
	}
}

/*
Called when the mouse pointer enters any of this object's shapes. Requires [member input_ray_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set. Note that moving between different shapes within a single [CollisionObject3D] won't cause this function to be called.
*/
func (Instance) _mouse_enter(impl func(ptr gdclass.Receiver)) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args, p_back gdextension.Pointer) {
		self := gdclass.Receiver(reflect.ValueOf(class).UnsafePointer())
		impl(self)
	}
}

/*
Called when the mouse pointer exits all this object's shapes. Requires [member input_ray_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set. Note that moving between different shapes within a single [CollisionObject3D] won't cause this function to be called.
*/
func (Instance) _mouse_exit(impl func(ptr gdclass.Receiver)) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args, p_back gdextension.Pointer) {
		self := gdclass.Receiver(reflect.ValueOf(class).UnsafePointer())
		impl(self)
	}
}

/*
Based on [param value], enables or disables the specified layer in the [member collision_layer], given a [param layer_number] between 1 and 32.
*/
func (self Instance) SetCollisionLayerValue(layer_number int, value bool) { //gd:CollisionObject3D.set_collision_layer_value
	Advanced(self).SetCollisionLayerValue(int64(layer_number), value)
}

/*
Returns whether or not the specified layer of the [member collision_layer] is enabled, given a [param layer_number] between 1 and 32.
*/
func (self Instance) GetCollisionLayerValue(layer_number int) bool { //gd:CollisionObject3D.get_collision_layer_value
	return bool(Advanced(self).GetCollisionLayerValue(int64(layer_number)))
}

/*
Based on [param value], enables or disables the specified layer in the [member collision_mask], given a [param layer_number] between 1 and 32.
*/
func (self Instance) SetCollisionMaskValue(layer_number int, value bool) { //gd:CollisionObject3D.set_collision_mask_value
	Advanced(self).SetCollisionMaskValue(int64(layer_number), value)
}

/*
Returns whether or not the specified layer of the [member collision_mask] is enabled, given a [param layer_number] between 1 and 32.
*/
func (self Instance) GetCollisionMaskValue(layer_number int) bool { //gd:CollisionObject3D.get_collision_mask_value
	return bool(Advanced(self).GetCollisionMaskValue(int64(layer_number)))
}

/*
Returns the object's [RID].
*/
func (self Instance) GetRid() RID.Body3D { //gd:CollisionObject3D.get_rid
	return RID.Body3D(Advanced(self).GetRid())
}

/*
Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference.
*/
func (self Instance) CreateShapeOwner(owner Object.Instance) int { //gd:CollisionObject3D.create_shape_owner
	return int(int(Advanced(self).CreateShapeOwner(owner)))
}

/*
Removes the given shape owner.
*/
func (self Instance) RemoveShapeOwner(owner_id int) { //gd:CollisionObject3D.remove_shape_owner
	Advanced(self).RemoveShapeOwner(int64(owner_id))
}

/*
Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument.
*/
func (self Instance) GetShapeOwners() []int32 { //gd:CollisionObject3D.get_shape_owners
	return []int32(slices.Collect(Advanced(self).GetShapeOwners().Values()))
}

/*
Sets the [Transform3D] of the given shape owner.
*/
func (self Instance) ShapeOwnerSetTransform(owner_id int, transform Transform3D.BasisOrigin) { //gd:CollisionObject3D.shape_owner_set_transform
	Advanced(self).ShapeOwnerSetTransform(int64(owner_id), Transform3D.BasisOrigin(transform))
}

/*
Returns the shape owner's [Transform3D].
*/
func (self Instance) ShapeOwnerGetTransform(owner_id int) Transform3D.BasisOrigin { //gd:CollisionObject3D.shape_owner_get_transform
	return Transform3D.BasisOrigin(Advanced(self).ShapeOwnerGetTransform(int64(owner_id)))
}

/*
Returns the parent object of the given shape owner.
*/
func (self Instance) ShapeOwnerGetOwner(owner_id int) Object.Instance { //gd:CollisionObject3D.shape_owner_get_owner
	return Object.Instance(Advanced(self).ShapeOwnerGetOwner(int64(owner_id)))
}

/*
If [code]true[/code], disables the given shape owner.
*/
func (self Instance) ShapeOwnerSetDisabled(owner_id int, disabled bool) { //gd:CollisionObject3D.shape_owner_set_disabled
	Advanced(self).ShapeOwnerSetDisabled(int64(owner_id), disabled)
}

/*
If [code]true[/code], the shape owner and its shapes are disabled.
*/
func (self Instance) IsShapeOwnerDisabled(owner_id int) bool { //gd:CollisionObject3D.is_shape_owner_disabled
	return bool(Advanced(self).IsShapeOwnerDisabled(int64(owner_id)))
}

/*
Adds a [Shape3D] to the shape owner.
*/
func (self Instance) ShapeOwnerAddShape(owner_id int, shape Shape3D.Instance) { //gd:CollisionObject3D.shape_owner_add_shape
	Advanced(self).ShapeOwnerAddShape(int64(owner_id), shape)
}

/*
Returns the number of shapes the given shape owner contains.
*/
func (self Instance) ShapeOwnerGetShapeCount(owner_id int) int { //gd:CollisionObject3D.shape_owner_get_shape_count
	return int(int(Advanced(self).ShapeOwnerGetShapeCount(int64(owner_id))))
}

/*
Returns the [Shape3D] with the given ID from the given shape owner.
*/
func (self Instance) ShapeOwnerGetShape(owner_id int, shape_id int) Shape3D.Instance { //gd:CollisionObject3D.shape_owner_get_shape
	return Shape3D.Instance(Advanced(self).ShapeOwnerGetShape(int64(owner_id), int64(shape_id)))
}

/*
Returns the child index of the [Shape3D] with the given ID from the given shape owner.
*/
func (self Instance) ShapeOwnerGetShapeIndex(owner_id int, shape_id int) int { //gd:CollisionObject3D.shape_owner_get_shape_index
	return int(int(Advanced(self).ShapeOwnerGetShapeIndex(int64(owner_id), int64(shape_id))))
}

/*
Removes a shape from the given shape owner.
*/
func (self Instance) ShapeOwnerRemoveShape(owner_id int, shape_id int) { //gd:CollisionObject3D.shape_owner_remove_shape
	Advanced(self).ShapeOwnerRemoveShape(int64(owner_id), int64(shape_id))
}

/*
Removes all shapes from the shape owner.
*/
func (self Instance) ShapeOwnerClearShapes(owner_id int) { //gd:CollisionObject3D.shape_owner_clear_shapes
	Advanced(self).ShapeOwnerClearShapes(int64(owner_id))
}

/*
Returns the [code]owner_id[/code] of the given shape.
*/
func (self Instance) ShapeFindOwner(shape_index int) int { //gd:CollisionObject3D.shape_find_owner
	return int(int(Advanced(self).ShapeFindOwner(int64(shape_index))))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.CollisionObject3D

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }
func (self *class) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.CollisionObject3D](obj[0])
		return true
	}
	return false
}
func (self *Instance) SetObject(obj [1]gd.Object) bool {
	if gdextension.Host.Objects.Cast(gdextension.Object(pointers.Get(obj[0])[0]), otype) != 0 {
		self[0] = pointers.AsA[gdclass.CollisionObject3D](obj[0])
		return true
	}
	return false
}
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }
func (self *Extension[T]) AsObject() [1]gd.Object { return self.Super().AsObject() }
func New() Instance {
	if !gd.Linked {
		var placeholder = Instance([1]gdclass.CollisionObject3D{pointers.Add[gdclass.CollisionObject3D]([3]uint64{})})
		gd.StartupFunctions = append(gd.StartupFunctions, func() {
			if gd.Linked {
				raw, _ := pointers.End(New().AsObject()[0])
				pointers.Set(pointers.AsA[gd.Object](placeholder[0]), raw)
				gd.RegisterCleanup(func() {
					if raw := pointers.Get[gd.Object](placeholder.AsObject()[0]); raw[0] != 0 && raw[1] == 0 {
						gdextension.Host.Objects.Unsafe.Free(gdextension.Object(raw[0]))
					}
				})
			}
		})
		return placeholder
	}
	casted := Instance([1]gdclass.CollisionObject3D{pointers.New[gdclass.CollisionObject3D]([3]uint64{uint64(gdextension.Host.Objects.Make(sname))})})
	casted.AsObject()[0].Notification(0, false)
	return casted
}

func (self Instance) DisableMode() DisableMode {
	return DisableMode(class(self).GetDisableMode())
}

func (self Instance) SetDisableMode(value DisableMode) {
	class(self).SetDisableMode(value)
}

func (self Instance) CollisionLayer() int {
	return int(int(class(self).GetCollisionLayer()))
}

func (self Instance) SetCollisionLayer(value int) {
	class(self).SetCollisionLayer(int64(value))
}

func (self Instance) CollisionMask() int {
	return int(int(class(self).GetCollisionMask()))
}

func (self Instance) SetCollisionMask(value int) {
	class(self).SetCollisionMask(int64(value))
}

func (self Instance) CollisionPriority() Float.X {
	return Float.X(Float.X(class(self).GetCollisionPriority()))
}

func (self Instance) SetCollisionPriority(value Float.X) {
	class(self).SetCollisionPriority(float64(value))
}

func (self Instance) InputRayPickable() bool {
	return bool(class(self).IsRayPickable())
}

func (self Instance) SetInputRayPickable(value bool) {
	class(self).SetRayPickable(value)
}

func (self Instance) InputCaptureOnDrag() bool {
	return bool(class(self).GetCaptureInputOnDrag())
}

func (self Instance) SetInputCaptureOnDrag(value bool) {
	class(self).SetCaptureInputOnDrag(value)
}

/*
Receives unhandled [InputEvent]s. [param event_position] is the location in world space of the mouse pointer on the surface of the shape with index [param shape_idx] and [param normal] is the normal vector of the surface at that point. Connect to the [signal input_event] signal to easily pick up these events.
[b]Note:[/b] [method _input_event] requires [member input_ray_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set.
*/
func (class) _input_event(impl func(ptr gdclass.Receiver, camera [1]gdclass.Camera3D, event [1]gdclass.InputEvent, event_position Vector3.XYZ, normal Vector3.XYZ, shape_idx int64)) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args, p_back gdextension.Pointer) {
		var camera = [1]gdclass.Camera3D{pointers.New[gdclass.Camera3D]([3]uint64{uint64(gd.UnsafeGet[gdextension.Object](p_args, 0))})}

		defer pointers.End(camera[0])
		var event = [1]gdclass.InputEvent{pointers.New[gdclass.InputEvent]([3]uint64{uint64(gd.UnsafeGet[gdextension.Object](p_args, 1))})}

		defer pointers.End(event[0])
		var event_position = gd.UnsafeGet[Vector3.XYZ](p_args, 2)
		var normal = gd.UnsafeGet[Vector3.XYZ](p_args, 3)
		var shape_idx = gd.UnsafeGet[int64](p_args, 4)
		self := gdclass.Receiver(reflect.ValueOf(class).UnsafePointer())
		impl(self, camera, event, event_position, normal, shape_idx)
	}
}

/*
Called when the mouse pointer enters any of this object's shapes. Requires [member input_ray_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set. Note that moving between different shapes within a single [CollisionObject3D] won't cause this function to be called.
*/
func (class) _mouse_enter(impl func(ptr gdclass.Receiver)) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args, p_back gdextension.Pointer) {
		self := gdclass.Receiver(reflect.ValueOf(class).UnsafePointer())
		impl(self)
	}
}

/*
Called when the mouse pointer exits all this object's shapes. Requires [member input_ray_pickable] to be [code]true[/code] and at least one [member collision_layer] bit to be set. Note that moving between different shapes within a single [CollisionObject3D] won't cause this function to be called.
*/
func (class) _mouse_exit(impl func(ptr gdclass.Receiver)) (cb gd.ExtensionClassCallVirtualFunc) {
	return func(class any, p_args, p_back gdextension.Pointer) {
		self := gdclass.Receiver(reflect.ValueOf(class).UnsafePointer())
		impl(self)
	}
}

//go:nosplit
func (self class) SetCollisionLayer(layer int64) { //gd:CollisionObject3D.set_collision_layer
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_collision_layer, 0|(gdextension.SizeInt<<4), &struct{ layer int64 }{layer})
}

//go:nosplit
func (self class) GetCollisionLayer() int64 { //gd:CollisionObject3D.get_collision_layer
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_collision_layer, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCollisionMask(mask int64) { //gd:CollisionObject3D.set_collision_mask
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_collision_mask, 0|(gdextension.SizeInt<<4), &struct{ mask int64 }{mask})
}

//go:nosplit
func (self class) GetCollisionMask() int64 { //gd:CollisionObject3D.get_collision_mask
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.get_collision_mask, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Based on [param value], enables or disables the specified layer in the [member collision_layer], given a [param layer_number] between 1 and 32.
*/
//go:nosplit
func (self class) SetCollisionLayerValue(layer_number int64, value bool) { //gd:CollisionObject3D.set_collision_layer_value
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_collision_layer_value, 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), &struct {
		layer_number int64
		value        bool
	}{layer_number, value})
}

/*
Returns whether or not the specified layer of the [member collision_layer] is enabled, given a [param layer_number] between 1 and 32.
*/
//go:nosplit
func (self class) GetCollisionLayerValue(layer_number int64) bool { //gd:CollisionObject3D.get_collision_layer_value
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_collision_layer_value, gdextension.SizeBool|(gdextension.SizeInt<<4), &struct{ layer_number int64 }{layer_number})
	var ret = r_ret
	return ret
}

/*
Based on [param value], enables or disables the specified layer in the [member collision_mask], given a [param layer_number] between 1 and 32.
*/
//go:nosplit
func (self class) SetCollisionMaskValue(layer_number int64, value bool) { //gd:CollisionObject3D.set_collision_mask_value
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_collision_mask_value, 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), &struct {
		layer_number int64
		value        bool
	}{layer_number, value})
}

/*
Returns whether or not the specified layer of the [member collision_mask] is enabled, given a [param layer_number] between 1 and 32.
*/
//go:nosplit
func (self class) GetCollisionMaskValue(layer_number int64) bool { //gd:CollisionObject3D.get_collision_mask_value
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_collision_mask_value, gdextension.SizeBool|(gdextension.SizeInt<<4), &struct{ layer_number int64 }{layer_number})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCollisionPriority(priority float64) { //gd:CollisionObject3D.set_collision_priority
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_collision_priority, 0|(gdextension.SizeFloat<<4), &struct{ priority float64 }{priority})
}

//go:nosplit
func (self class) GetCollisionPriority() float64 { //gd:CollisionObject3D.get_collision_priority
	var r_ret = gdextension.Call[float64](gd.ObjectChecked(self.AsObject()), methods.get_collision_priority, gdextension.SizeFloat, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDisableMode(mode DisableMode) { //gd:CollisionObject3D.set_disable_mode
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_disable_mode, 0|(gdextension.SizeInt<<4), &struct{ mode DisableMode }{mode})
}

//go:nosplit
func (self class) GetDisableMode() DisableMode { //gd:CollisionObject3D.get_disable_mode
	var r_ret = gdextension.Call[DisableMode](gd.ObjectChecked(self.AsObject()), methods.get_disable_mode, gdextension.SizeInt, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRayPickable(ray_pickable bool) { //gd:CollisionObject3D.set_ray_pickable
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_ray_pickable, 0|(gdextension.SizeBool<<4), &struct{ ray_pickable bool }{ray_pickable})
}

//go:nosplit
func (self class) IsRayPickable() bool { //gd:CollisionObject3D.is_ray_pickable
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_ray_pickable, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetCaptureInputOnDrag(enable bool) { //gd:CollisionObject3D.set_capture_input_on_drag
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.set_capture_input_on_drag, 0|(gdextension.SizeBool<<4), &struct{ enable bool }{enable})
}

//go:nosplit
func (self class) GetCaptureInputOnDrag() bool { //gd:CollisionObject3D.get_capture_input_on_drag
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.get_capture_input_on_drag, gdextension.SizeBool, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Returns the object's [RID].
*/
//go:nosplit
func (self class) GetRid() RID.Any { //gd:CollisionObject3D.get_rid
	var r_ret = gdextension.Call[RID.Any](gd.ObjectChecked(self.AsObject()), methods.get_rid, gdextension.SizeRID, &struct{}{})
	var ret = r_ret
	return ret
}

/*
Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference.
*/
//go:nosplit
func (self class) CreateShapeOwner(owner [1]gd.Object) int64 { //gd:CollisionObject3D.create_shape_owner
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.create_shape_owner, gdextension.SizeInt|(gdextension.SizeObject<<4), &struct{ owner gdextension.Object }{gdextension.Object(gd.ObjectChecked(owner[0].AsObject()))})
	var ret = r_ret
	return ret
}

/*
Removes the given shape owner.
*/
//go:nosplit
func (self class) RemoveShapeOwner(owner_id int64) { //gd:CollisionObject3D.remove_shape_owner
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.remove_shape_owner, 0|(gdextension.SizeInt<<4), &struct{ owner_id int64 }{owner_id})
}

/*
Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument.
*/
//go:nosplit
func (self class) GetShapeOwners() Packed.Array[int32] { //gd:CollisionObject3D.get_shape_owners
	var r_ret = gdextension.Call[gd.PackedPointers](gd.ObjectChecked(self.AsObject()), methods.get_shape_owners, gdextension.SizePackedArray, &struct{}{})
	var ret = Packed.Array[int32](Array.Through(gd.PackedProxy[gd.PackedInt32Array, int32]{}, pointers.Pack(pointers.Let[gd.PackedStringArray](r_ret))))
	return ret
}

/*
Sets the [Transform3D] of the given shape owner.
*/
//go:nosplit
func (self class) ShapeOwnerSetTransform(owner_id int64, transform Transform3D.BasisOrigin) { //gd:CollisionObject3D.shape_owner_set_transform
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.shape_owner_set_transform, 0|(gdextension.SizeInt<<4)|(gdextension.SizeTransform3D<<8), &struct {
		owner_id  int64
		transform Transform3D.BasisOrigin
	}{owner_id, gd.Transposed(transform)})
}

/*
Returns the shape owner's [Transform3D].
*/
//go:nosplit
func (self class) ShapeOwnerGetTransform(owner_id int64) Transform3D.BasisOrigin { //gd:CollisionObject3D.shape_owner_get_transform
	var r_ret = gdextension.Call[Transform3D.BasisOrigin](gd.ObjectChecked(self.AsObject()), methods.shape_owner_get_transform, gdextension.SizeTransform3D|(gdextension.SizeInt<<4), &struct{ owner_id int64 }{owner_id})
	var ret = gd.Transposed(r_ret)
	return ret
}

/*
Returns the parent object of the given shape owner.
*/
//go:nosplit
func (self class) ShapeOwnerGetOwner(owner_id int64) [1]gd.Object { //gd:CollisionObject3D.shape_owner_get_owner
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.shape_owner_get_owner, gdextension.SizeObject|(gdextension.SizeInt<<4), &struct{ owner_id int64 }{owner_id})
	var ret = [1]gd.Object{gd.PointerMustAssertInstanceID[gd.Object](r_ret)}
	return ret
}

/*
If [code]true[/code], disables the given shape owner.
*/
//go:nosplit
func (self class) ShapeOwnerSetDisabled(owner_id int64, disabled bool) { //gd:CollisionObject3D.shape_owner_set_disabled
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.shape_owner_set_disabled, 0|(gdextension.SizeInt<<4)|(gdextension.SizeBool<<8), &struct {
		owner_id int64
		disabled bool
	}{owner_id, disabled})
}

/*
If [code]true[/code], the shape owner and its shapes are disabled.
*/
//go:nosplit
func (self class) IsShapeOwnerDisabled(owner_id int64) bool { //gd:CollisionObject3D.is_shape_owner_disabled
	var r_ret = gdextension.Call[bool](gd.ObjectChecked(self.AsObject()), methods.is_shape_owner_disabled, gdextension.SizeBool|(gdextension.SizeInt<<4), &struct{ owner_id int64 }{owner_id})
	var ret = r_ret
	return ret
}

/*
Adds a [Shape3D] to the shape owner.
*/
//go:nosplit
func (self class) ShapeOwnerAddShape(owner_id int64, shape [1]gdclass.Shape3D) { //gd:CollisionObject3D.shape_owner_add_shape
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.shape_owner_add_shape, 0|(gdextension.SizeInt<<4)|(gdextension.SizeObject<<8), &struct {
		owner_id int64
		shape    gdextension.Object
	}{owner_id, gdextension.Object(gd.ObjectChecked(shape[0].AsObject()))})
}

/*
Returns the number of shapes the given shape owner contains.
*/
//go:nosplit
func (self class) ShapeOwnerGetShapeCount(owner_id int64) int64 { //gd:CollisionObject3D.shape_owner_get_shape_count
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.shape_owner_get_shape_count, gdextension.SizeInt|(gdextension.SizeInt<<4), &struct{ owner_id int64 }{owner_id})
	var ret = r_ret
	return ret
}

/*
Returns the [Shape3D] with the given ID from the given shape owner.
*/
//go:nosplit
func (self class) ShapeOwnerGetShape(owner_id int64, shape_id int64) [1]gdclass.Shape3D { //gd:CollisionObject3D.shape_owner_get_shape
	var r_ret = gdextension.Call[gdextension.Object](gd.ObjectChecked(self.AsObject()), methods.shape_owner_get_shape, gdextension.SizeObject|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), &struct {
		owner_id int64
		shape_id int64
	}{owner_id, shape_id})
	var ret = [1]gdclass.Shape3D{gd.PointerWithOwnershipTransferredToGo[gdclass.Shape3D](r_ret)}
	return ret
}

/*
Returns the child index of the [Shape3D] with the given ID from the given shape owner.
*/
//go:nosplit
func (self class) ShapeOwnerGetShapeIndex(owner_id int64, shape_id int64) int64 { //gd:CollisionObject3D.shape_owner_get_shape_index
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.shape_owner_get_shape_index, gdextension.SizeInt|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), &struct {
		owner_id int64
		shape_id int64
	}{owner_id, shape_id})
	var ret = r_ret
	return ret
}

/*
Removes a shape from the given shape owner.
*/
//go:nosplit
func (self class) ShapeOwnerRemoveShape(owner_id int64, shape_id int64) { //gd:CollisionObject3D.shape_owner_remove_shape
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.shape_owner_remove_shape, 0|(gdextension.SizeInt<<4)|(gdextension.SizeInt<<8), &struct {
		owner_id int64
		shape_id int64
	}{owner_id, shape_id})
}

/*
Removes all shapes from the shape owner.
*/
//go:nosplit
func (self class) ShapeOwnerClearShapes(owner_id int64) { //gd:CollisionObject3D.shape_owner_clear_shapes
	gdextension.Call[struct{}](gd.ObjectChecked(self.AsObject()), methods.shape_owner_clear_shapes, 0|(gdextension.SizeInt<<4), &struct{ owner_id int64 }{owner_id})
}

/*
Returns the [code]owner_id[/code] of the given shape.
*/
//go:nosplit
func (self class) ShapeFindOwner(shape_index int64) int64 { //gd:CollisionObject3D.shape_find_owner
	var r_ret = gdextension.Call[int64](gd.ObjectChecked(self.AsObject()), methods.shape_find_owner, gdextension.SizeInt|(gdextension.SizeInt<<4), &struct{ shape_index int64 }{shape_index})
	var ret = r_ret
	return ret
}
func (self Instance) OnInputEvent(cb func(camera Node.Instance, event InputEvent.Instance, event_position Vector3.XYZ, normal Vector3.XYZ, shape_idx int), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("input_event"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) InputEvent() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`InputEvent`))))
}

func (self Instance) OnMouseEntered(cb func(), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("mouse_entered"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) MouseEntered() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`MouseEntered`))))
}

func (self Instance) OnMouseExited(cb func(), flags ...Signal.Flags) {
	var flags_together Signal.Flags
	for _, flag := range flags {
		flags_together |= flag
	}
	self[0].AsObject()[0].Connect(gd.NewStringName("mouse_exited"), gd.NewCallable(cb), int64(flags_together))
}

func (self class) MouseExited() Signal.Any {
	return Signal.Via(gd.SignalProxy{}, pointers.Pack(gd.NewSignalOf(self.AsObject(), gd.NewStringName(`MouseExited`))))
}

func (self class) AsCollisionObject3D() Advanced {
	return Advanced{pointers.AsA[gdclass.CollisionObject3D](self[0])}
}
func (self Instance) AsCollisionObject3D() Instance {
	return Instance{pointers.AsA[gdclass.CollisionObject3D](self[0])}
}
func (self *Extension[T]) AsCollisionObject3D() Instance { return self.Super().AsCollisionObject3D() }
func (self class) AsNode3D() Node3D.Advanced {
	return Node3D.Advanced{pointers.AsA[gdclass.Node3D](self[0])}
}
func (self *Extension[T]) AsNode3D() Node3D.Instance { return self.Super().AsNode3D() }
func (self Instance) AsNode3D() Node3D.Instance {
	return Node3D.Instance{pointers.AsA[gdclass.Node3D](self[0])}
}
func (self class) AsNode() Node.Advanced         { return Node.Advanced{pointers.AsA[gdclass.Node](self[0])} }
func (self *Extension[T]) AsNode() Node.Instance { return self.Super().AsNode() }
func (self Instance) AsNode() Node.Instance {
	return Node.Instance{pointers.AsA[gdclass.Node](self[0])}
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	case "_input_event":
		return reflect.ValueOf(self._input_event)
	case "_mouse_enter":
		return reflect.ValueOf(self._mouse_enter)
	case "_mouse_exit":
		return reflect.ValueOf(self._mouse_exit)
	default:
		return gd.VirtualByName(Node3D.Advanced(self.AsNode3D()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	case "_input_event":
		return reflect.ValueOf(self._input_event)
	case "_mouse_enter":
		return reflect.ValueOf(self._mouse_enter)
	case "_mouse_exit":
		return reflect.ValueOf(self._mouse_exit)
	default:
		return gd.VirtualByName(Node3D.Instance(self.AsNode3D()), name)
	}
}
func init() {
	gdclass.Register("CollisionObject3D", func(ptr gd.Object) any { return Instance{pointers.AsA[gdclass.CollisionObject3D](ptr)} })
}

type DisableMode int //gd:CollisionObject3D.DisableMode

const (
	/*When [member Node.process_mode] is set to [constant Node.PROCESS_MODE_DISABLED], remove from the physics simulation to stop all physics interactions with this [CollisionObject3D].
	  Automatically re-added to the physics simulation when the [Node] is processed again.*/
	DisableModeRemove DisableMode = 0
	/*When [member Node.process_mode] is set to [constant Node.PROCESS_MODE_DISABLED], make the body static. Doesn't affect [Area3D]. [PhysicsBody3D] can't be affected by forces or other bodies while static.
	  Automatically set [PhysicsBody3D] back to its original mode when the [Node] is processed again.*/
	DisableModeMakeStatic DisableMode = 1
	/*When [member Node.process_mode] is set to [constant Node.PROCESS_MODE_DISABLED], do not affect the physics simulation.*/
	DisableModeKeepActive DisableMode = 2
)
