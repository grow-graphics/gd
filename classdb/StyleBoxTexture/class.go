// Code generated by the generate package DO NOT EDIT

// Package StyleBoxTexture provides methods for working with StyleBoxTexture object instances.
package StyleBoxTexture

import "unsafe"
import "reflect"
import "slices"
import "graphics.gd/internal/pointers"
import "graphics.gd/internal/callframe"
import "graphics.gd/internal/gdunsafe"
import "graphics.gd/internal/gdextension"
import gd "graphics.gd/internal"
import "graphics.gd/internal/gdclass"
import "graphics.gd/variant"
import "graphics.gd/variant/Angle"
import "graphics.gd/variant/Euler"
import "graphics.gd/classdb/Resource"
import "graphics.gd/classdb/StyleBox"
import "graphics.gd/classdb/Texture2D"
import "graphics.gd/variant/Array"
import "graphics.gd/variant/Callable"
import "graphics.gd/variant/Color"
import "graphics.gd/variant/Dictionary"
import "graphics.gd/variant/Error"
import "graphics.gd/variant/Float"
import "graphics.gd/variant/Object"
import "graphics.gd/variant/Packed"
import "graphics.gd/variant/Path"
import "graphics.gd/variant/RID"
import "graphics.gd/variant/Rect2"
import "graphics.gd/variant/RefCounted"
import "graphics.gd/variant/String"

var _ Object.ID

type _ gdclass.Node

var _ gd.Object
var _ RefCounted.Instance
var _ unsafe.Pointer
var _ reflect.Type
var _ callframe.Frame
var _ = pointers.Cycle
var _ = Array.Nil
var _ variant.Any
var _ Callable.Function
var _ Dictionary.Any
var _ RID.Any
var _ String.Readable
var _ Path.ToNode
var _ Packed.Bytes
var _ Error.Code
var _ Float.X
var _ Angle.Radians
var _ Euler.Radians
var _ gdextension.Object
var _ = gdunsafe.Use{}
var _ = slices.Delete[[]struct{}, struct{}]

/*
ID is a typed object ID (reference) to an instance of this class, use it to store references to objects with
unknown lifetimes, as an ID will not panic on use if the underlying object has been destroyed.
*/
type ID Object.ID

func (id ID) Instance() (Instance, bool) { return Object.As[Instance](Object.ID(id).Instance()) }

/*
Extension can be embedded in a new struct to create an extension of this class.
T should be the type that is embedding this [Extension]
*/
type Extension[T gdclass.Interface] struct{ gdclass.Extension[T, Instance] }

/*
A texture-based nine-patch [StyleBox], in a way similar to [NinePatchRect]. This stylebox performs a 3Ã—3 scaling of a texture, where only the center cell is fully stretched. This makes it possible to design bordered styles regardless of the stylebox's size.
*/
type Instance [1]gdclass.StyleBoxTexture

func (self Instance) ID() ID { return ID(Object.Instance(self.AsObject()).ID()) }

// Nil is a nil/null instance of the class. Equivalent to the zero value.
var Nil Instance

type Any interface {
	gd.IsClass
	AsStyleBoxTexture() Instance
}

/*
Sets the margin to [param size] pixels for all sides.
*/
func (self Instance) SetTextureMarginAll(size Float.X) { //gd:StyleBoxTexture.set_texture_margin_all
	Advanced(self).SetTextureMarginAll(float64(size))
}

/*
Sets the expand margin to [param size] pixels for all sides.
*/
func (self Instance) SetExpandMarginAll(size Float.X) { //gd:StyleBoxTexture.set_expand_margin_all
	Advanced(self).SetExpandMarginAll(float64(size))
}

// Advanced exposes a 1:1 low-level instance of the class, undocumented, for those who know what they are doing.
type Advanced = class
type class [1]gdclass.StyleBoxTexture

func (self class) AsObject() [1]gd.Object { return self[0].AsObject() }

//go:nosplit
func (self *class) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self Instance) AsObject() [1]gd.Object      { return self[0].AsObject() }

//go:nosplit
func (self *Instance) UnsafePointer() unsafe.Pointer { return unsafe.Pointer(self) }
func (self *Extension[T]) AsObject() [1]gd.Object    { return self.Super().AsObject() }
func New() Instance {
	object := gd.Global.ClassDB.ConstructObject(gd.NewStringName("StyleBoxTexture"))
	casted := Instance{*(*gdclass.StyleBoxTexture)(unsafe.Pointer(&object))}
	casted.AsRefCounted()[0].Reference()
	return casted
}

func (self Instance) Texture() Texture2D.Instance {
	return Texture2D.Instance(class(self).GetTexture())
}

func (self Instance) SetTexture(value Texture2D.Instance) {
	class(self).SetTexture(value)
}

func (self Instance) TextureMarginLeft() Float.X {
	return Float.X(Float.X(class(self).GetTextureMargin(0)))
}

func (self Instance) SetTextureMarginLeft(value Float.X) {
	class(self).SetTextureMargin(0, float64(value))
}

func (self Instance) TextureMarginTop() Float.X {
	return Float.X(Float.X(class(self).GetTextureMargin(1)))
}

func (self Instance) SetTextureMarginTop(value Float.X) {
	class(self).SetTextureMargin(1, float64(value))
}

func (self Instance) TextureMarginRight() Float.X {
	return Float.X(Float.X(class(self).GetTextureMargin(2)))
}

func (self Instance) SetTextureMarginRight(value Float.X) {
	class(self).SetTextureMargin(2, float64(value))
}

func (self Instance) TextureMarginBottom() Float.X {
	return Float.X(Float.X(class(self).GetTextureMargin(3)))
}

func (self Instance) SetTextureMarginBottom(value Float.X) {
	class(self).SetTextureMargin(3, float64(value))
}

func (self Instance) ExpandMarginLeft() Float.X {
	return Float.X(Float.X(class(self).GetExpandMargin(0)))
}

func (self Instance) SetExpandMarginLeft(value Float.X) {
	class(self).SetExpandMargin(0, float64(value))
}

func (self Instance) ExpandMarginTop() Float.X {
	return Float.X(Float.X(class(self).GetExpandMargin(1)))
}

func (self Instance) SetExpandMarginTop(value Float.X) {
	class(self).SetExpandMargin(1, float64(value))
}

func (self Instance) ExpandMarginRight() Float.X {
	return Float.X(Float.X(class(self).GetExpandMargin(2)))
}

func (self Instance) SetExpandMarginRight(value Float.X) {
	class(self).SetExpandMargin(2, float64(value))
}

func (self Instance) ExpandMarginBottom() Float.X {
	return Float.X(Float.X(class(self).GetExpandMargin(3)))
}

func (self Instance) SetExpandMarginBottom(value Float.X) {
	class(self).SetExpandMargin(3, float64(value))
}

func (self Instance) AxisStretchHorizontal() AxisStretchMode {
	return AxisStretchMode(class(self).GetHAxisStretchMode())
}

func (self Instance) SetAxisStretchHorizontal(value AxisStretchMode) {
	class(self).SetHAxisStretchMode(value)
}

func (self Instance) AxisStretchVertical() AxisStretchMode {
	return AxisStretchMode(class(self).GetVAxisStretchMode())
}

func (self Instance) SetAxisStretchVertical(value AxisStretchMode) {
	class(self).SetVAxisStretchMode(value)
}

func (self Instance) RegionRect() Rect2.PositionSize {
	return Rect2.PositionSize(class(self).GetRegionRect())
}

func (self Instance) SetRegionRect(value Rect2.PositionSize) {
	class(self).SetRegionRect(Rect2.PositionSize(value))
}

func (self Instance) ModulateColor() Color.RGBA {
	return Color.RGBA(class(self).GetModulate())
}

func (self Instance) SetModulateColor(value Color.RGBA) {
	class(self).SetModulate(Color.RGBA(value))
}

func (self Instance) DrawCenter() bool {
	return bool(class(self).IsDrawCenterEnabled())
}

func (self Instance) SetDrawCenter(value bool) {
	class(self).SetDrawCenter(value)
}

//go:nosplit
func (self class) SetTexture(texture [1]gdclass.Texture2D) { //gd:StyleBoxTexture.set_texture
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_set_texture, 0|(gdextension.SizeObject<<4), unsafe.Pointer(&struct{ texture gdextension.Object }{gdextension.Object(gd.ObjectChecked(texture[0].AsObject()))}))
}

//go:nosplit
func (self class) GetTexture() [1]gdclass.Texture2D { //gd:StyleBoxTexture.get_texture
	var r_ret = gdunsafe.Call[gd.EnginePointer](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_get_texture, gdextension.SizeObject, unsafe.Pointer(&struct{}{}))
	var ret = [1]gdclass.Texture2D{gd.PointerWithOwnershipTransferredToGo[gdclass.Texture2D](r_ret)}
	return ret
}

/*
Sets the margin to [param size] pixels for the specified [enum Side].
*/
//go:nosplit
func (self class) SetTextureMargin(margin Rect2.Side, size float64) { //gd:StyleBoxTexture.set_texture_margin
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_set_texture_margin, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		margin Rect2.Side
		size   float64
	}{margin, size}))
}

/*
Sets the margin to [param size] pixels for all sides.
*/
//go:nosplit
func (self class) SetTextureMarginAll(size float64) { //gd:StyleBoxTexture.set_texture_margin_all
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_set_texture_margin_all, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ size float64 }{size}))
}

/*
Returns the margin size of the specified [enum Side].
*/
//go:nosplit
func (self class) GetTextureMargin(margin Rect2.Side) float64 { //gd:StyleBoxTexture.get_texture_margin
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_get_texture_margin, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ margin Rect2.Side }{margin}))
	var ret = r_ret
	return ret
}

/*
Sets the expand margin to [param size] pixels for the specified [enum Side].
*/
//go:nosplit
func (self class) SetExpandMargin(margin Rect2.Side, size float64) { //gd:StyleBoxTexture.set_expand_margin
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_set_expand_margin, 0|(gdextension.SizeInt<<4)|(gdextension.SizeFloat<<8), unsafe.Pointer(&struct {
		margin Rect2.Side
		size   float64
	}{margin, size}))
}

/*
Sets the expand margin to [param size] pixels for all sides.
*/
//go:nosplit
func (self class) SetExpandMarginAll(size float64) { //gd:StyleBoxTexture.set_expand_margin_all
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_set_expand_margin_all, 0|(gdextension.SizeFloat<<4), unsafe.Pointer(&struct{ size float64 }{size}))
}

/*
Returns the expand margin size of the specified [enum Side].
*/
//go:nosplit
func (self class) GetExpandMargin(margin Rect2.Side) float64 { //gd:StyleBoxTexture.get_expand_margin
	var r_ret = gdunsafe.Call[float64](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_get_expand_margin, gdextension.SizeFloat|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ margin Rect2.Side }{margin}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetRegionRect(region Rect2.PositionSize) { //gd:StyleBoxTexture.set_region_rect
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_set_region_rect, 0|(gdextension.SizeRect2<<4), unsafe.Pointer(&struct{ region Rect2.PositionSize }{region}))
}

//go:nosplit
func (self class) GetRegionRect() Rect2.PositionSize { //gd:StyleBoxTexture.get_region_rect
	var r_ret = gdunsafe.Call[Rect2.PositionSize](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_get_region_rect, gdextension.SizeRect2, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetDrawCenter(enable bool) { //gd:StyleBoxTexture.set_draw_center
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_set_draw_center, 0|(gdextension.SizeBool<<4), unsafe.Pointer(&struct{ enable bool }{enable}))
}

//go:nosplit
func (self class) IsDrawCenterEnabled() bool { //gd:StyleBoxTexture.is_draw_center_enabled
	var r_ret = gdunsafe.Call[bool](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_is_draw_center_enabled, gdextension.SizeBool, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetModulate(color Color.RGBA) { //gd:StyleBoxTexture.set_modulate
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_set_modulate, 0|(gdextension.SizeColor<<4), unsafe.Pointer(&struct{ color Color.RGBA }{color}))
}

//go:nosplit
func (self class) GetModulate() Color.RGBA { //gd:StyleBoxTexture.get_modulate
	var r_ret = gdunsafe.Call[Color.RGBA](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_get_modulate, gdextension.SizeColor, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetHAxisStretchMode(mode AxisStretchMode) { //gd:StyleBoxTexture.set_h_axis_stretch_mode
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_set_h_axis_stretch_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode AxisStretchMode }{mode}))
}

//go:nosplit
func (self class) GetHAxisStretchMode() AxisStretchMode { //gd:StyleBoxTexture.get_h_axis_stretch_mode
	var r_ret = gdunsafe.Call[AxisStretchMode](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_get_h_axis_stretch_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}

//go:nosplit
func (self class) SetVAxisStretchMode(mode AxisStretchMode) { //gd:StyleBoxTexture.set_v_axis_stretch_mode
	gdunsafe.Call[struct{}](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_set_v_axis_stretch_mode, 0|(gdextension.SizeInt<<4), unsafe.Pointer(&struct{ mode AxisStretchMode }{mode}))
}

//go:nosplit
func (self class) GetVAxisStretchMode() AxisStretchMode { //gd:StyleBoxTexture.get_v_axis_stretch_mode
	var r_ret = gdunsafe.Call[AxisStretchMode](self.AsObject(), gd.Global.Methods.StyleBoxTexture.Bind_get_v_axis_stretch_mode, gdextension.SizeInt, unsafe.Pointer(&struct{}{}))
	var ret = r_ret
	return ret
}
func (self class) AsStyleBoxTexture() Advanced         { return *((*Advanced)(unsafe.Pointer(&self))) }
func (self Instance) AsStyleBoxTexture() Instance      { return *((*Instance)(unsafe.Pointer(&self))) }
func (self *Extension[T]) AsStyleBoxTexture() Instance { return self.Super().AsStyleBoxTexture() }
func (self class) AsStyleBox() StyleBox.Advanced {
	return *((*StyleBox.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsStyleBox() StyleBox.Instance { return self.Super().AsStyleBox() }
func (self Instance) AsStyleBox() StyleBox.Instance {
	return *((*StyleBox.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsResource() Resource.Advanced {
	return *((*Resource.Advanced)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsResource() Resource.Instance { return self.Super().AsResource() }
func (self Instance) AsResource() Resource.Instance {
	return *((*Resource.Instance)(unsafe.Pointer(&self)))
}
func (self class) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}
func (self *Extension[T]) AsRefCounted() [1]gd.RefCounted { return self.Super().AsRefCounted() }
func (self Instance) AsRefCounted() [1]gd.RefCounted {
	return *((*[1]gd.RefCounted)(unsafe.Pointer(&self)))
}

func (self class) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(StyleBox.Advanced(self.AsStyleBox()), name)
	}
}

func (self Instance) Virtual(name string) reflect.Value {
	switch name {
	default:
		return gd.VirtualByName(StyleBox.Instance(self.AsStyleBox()), name)
	}
}
func init() {
	gdclass.Register("StyleBoxTexture", func(ptr gd.Object) any {
		return [1]gdclass.StyleBoxTexture{*(*gdclass.StyleBoxTexture)(unsafe.Pointer(&ptr))}
	})
}

type AxisStretchMode int //gd:StyleBoxTexture.AxisStretchMode

const (
	/*Stretch the stylebox's texture. This results in visible distortion unless the texture size matches the stylebox's size perfectly.*/
	AxisStretchModeStretch AxisStretchMode = 0
	/*Repeats the stylebox's texture to match the stylebox's size according to the nine-patch system.*/
	AxisStretchModeTile AxisStretchMode = 1
	/*Repeats the stylebox's texture to match the stylebox's size according to the nine-patch system. Unlike [constant AXIS_STRETCH_MODE_TILE], the texture may be slightly stretched to make the nine-patch texture tile seamlessly.*/
	AxisStretchModeTileFit AxisStretchMode = 2
)
