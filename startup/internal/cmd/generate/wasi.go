package main

import (
	"fmt"
	"os"
	"reflect"
	"strings"

	"graphics.gd/internal/gdextension"
	"runtime.link/api"
)

func generate_startup_wasip1() error {
	f, err := os.Create("startup_wasip1_v2.go")
	if err != nil {
		return err
	}
	defer f.Close()

	fmt.Fprint(f, "// Code generated by graphics.gd/startup/internal/cmd/generate; DO NOT EDIT.\n")
	fmt.Fprint(f, "//go:build wasip1\n\n")
	fmt.Fprint(f, "package startup\n\n")
	fmt.Fprint(f, "import \"graphics.gd/internal/gdextension\"\n\n")
	fmt.Fprintln(f, `import "graphics.gd/internal/gdmemory"`)
	//fmt.Fprint(f, "import \"unsafe\"\n")
	//fmt.Fprint(f, "import \"sync\"\n\n")

	for fn := range api.StructureOf(&gdextension.Host).Iter() {
		name := fn.Tags.Get("gd")
		fmt.Fprintf(f, "//go:wasmimport gd %s\n", name)
		fmt.Fprintf(f, "func gd_%s(", name)
		for i, arg := range args_flat(fn.Type, false) {
			if i > 0 {
				fmt.Fprintf(f, ", ")
			}
			fmt.Fprintf(f, "p%d %s", i, wasiTypeOf(arg))
		}
		fmt.Fprintf(f, ")")
		if fn.Type.NumOut() > 0 {
			fmt.Fprintf(f, " %s", wasiTypeOf(fn.Type.Out(0)))
		}
		fmt.Fprintln(f)
	}
	fmt.Fprintln(f)

	for fn := range api.StructureOf(&gdextension.On).Iter() {
		name := fn.Tags.Get("gd")
		fmt.Fprintf(f, "//go:wasmexport %s\n", name)
		fmt.Fprintf(f, "func %s(", name)
		for i, arg := range args_flat(fn.Type, false) {
			if i > 0 {
				fmt.Fprintf(f, ", ")
			}
			fmt.Fprintf(f, "p%d %s", i, wasiTypeOf(arg))
		}
		fmt.Fprintf(f, ")")
		if fn.Type.NumOut() > 0 {
			fmt.Fprintf(f, " %s", wasiTypeOf(fn.Type.Out(0)))
		}
		fmt.Fprintln(f, "{")

		if result := getReturn(fn.Type); fn.NumOut() == 1 && result != nil {
			fmt.Fprintf(f, "return %s(", wasiTypeOf(result))
		} else if fn.NumOut() > 0 && result != nil {
			for i := 0; i < fn.NumOut(); i++ {
				if i > 0 {
					fmt.Fprint(f, ", ")
				}
				if fn.Type.Out(i).Size() > 0 {
					fmt.Fprintf(f, "result")
				} else {
					fmt.Fprint(f, "_")
				}
			}
			fmt.Fprint(f, " := ")
		}
		fmt.Fprintf(f, "gdextension.On.%s(", strings.Join(append(fn.Path, fn.Name), "."))
		var n int
		for i := range fn.NumIn() {
			if n > 0 {
				fmt.Fprint(f, ", ")
			}
			arg := fn.Type.In(i)
			switch arg.Kind() {
			case reflect.Array:
				length := arg.Len()
				fmt.Fprintf(f, "%s{", toGoValue(arg))
				for j := range length {
					if j > 0 {
						fmt.Fprint(f, ", ")
					}
					fmt.Fprintf(f, "%s(%s)", toGoValue(arg.Elem()), fmt.Sprintf("p%d", n))
					n++
				}
				fmt.Fprint(f, "}")
			default:
				fmt.Fprintf(f, "%s(%s)", toGoValue(arg), fmt.Sprintf("p%d", n))
				n++
			}
		}
		if result := getReturn(fn.Type); fn.NumOut() == 1 && result != nil {
			if result.Kind() == reflect.Array {
				fmt.Fprintf(f, ")[0])")
			} else {
				fmt.Fprint(f, "))")
			}
		} else if fn.NumOut() > 0 && result != nil {
			fmt.Fprintf(f, ")\n\t\treturn %s(result)\n", toGoValue(result))
		} else {
			fmt.Fprint(f, ")\n")
		}
		fmt.Fprintln(f, "}")
	}

	fmt.Fprintln(f)
	fmt.Fprintln(f, "func init() {")
	for fn := range api.StructureOf(&gdextension.Host).Iter() {
		name := fn.Tags.Get("gd")
		if name == "" {
			continue
		}
		fmt.Fprintf(f, "\tgdextension.Host.%s = func", strings.Join(append(fn.Path, fn.Name), "."))
		writeGoFunctionArguments(f, fn, false, goTypeOf)
		writeGoFunctionResults(f, fn, false, goTypeOf)
		fmt.Fprintf(f, " {\n")
		prepareArguments(f, fn, false)
		if result := getReturn(fn.Type); result != nil {
			switch result.Kind() {
			case reflect.Array:
				fmt.Fprintf(f, "\t\tresult = %s{%s(", goTypeOf(result), goTypeOf(result.Elem()))
			default:
				fmt.Fprintf(f, "\t\tresult = %s(", goTypeOf(result))
			}
		}
		fmt.Fprintf(f, "gd_%s(", name)
		for i := range fn.NumIn() {
			if i > 0 {
				fmt.Fprint(f, ", ")
			}
			arg := fn.Type.In(i)
			switch arg.Kind() {
			case reflect.Array:
				var length = arg.Len()
				for j := range length {
					if j > 0 {
						fmt.Fprint(f, ", ")
					}
					fmt.Fprint(f, toWasiValue(fmt.Sprintf("p%d[%d]", i, j), arg.Elem()))
				}
			case reflect.String:
				fmt.Fprintf(f, "string(p%d), int32(len(p%[1]d))", i)
			case reflect.Slice:
				fmt.Fprintf(f, "uintptr(buf%d), int32(len(p%d))", i, i)
			case reflect.UnsafePointer:
				fmt.Fprintf(f, "uintptr(mem%d)", i)
			default:
				fmt.Fprint(f, toWasiValue(argName(arg, i), arg))
			}
		}
		fmt.Fprint(f, ")")
		if result := getReturn(fn.Type); result != nil {
			switch result.Kind() {
			case reflect.Array:
				fmt.Fprintf(f, ")}")
			default:
				fmt.Fprintf(f, ")")
			}
		}
		fmt.Fprintln(f)
		prepareResults(f, fn)
		fmt.Fprintf(f, "return\n")
		fmt.Fprintln(f, "\t}")
	}
	fmt.Fprintln(f, "}")
	return nil
}

func toWasiValue(value string, rtype reflect.Type) string {
	switch rtype.Kind() {
	case reflect.Array:
		if rtype.Len() == 1 {
			return toWasiValue(value+"[0]", rtype.Elem())
		}
		fallthrough
	default:
		return fmt.Sprintf("%s(%s)", wasiTypeOf(rtype), value)
	}
}

func wasiTypeOf(rtype reflect.Type) string {
	if rtype == reflect.TypeFor[[]byte]() {
		return "uintptr"
	}
	switch rtype.Kind() {
	case reflect.Uintptr, reflect.UnsafePointer, reflect.Pointer:
		return "uintptr"
	case reflect.Uint32, reflect.Uint8, reflect.Uint16:
		return "uint32"
	case reflect.Uint64:
		return "uint64"
	case reflect.Int64:
		return "int64"
	case reflect.Int, reflect.Int32:
		return "int32"
	case reflect.Array:
		if rtype.Len() == 1 {
			return wasiTypeOf(rtype.Elem())
		}
		fallthrough
	default:
		return goTypeOf(rtype)
	}
}
