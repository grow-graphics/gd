package main

import (
	"fmt"
	"os"
	"reflect"

	"graphics.gd/internal/gdextension"
	"runtime.link/api"
)

func generate_gdextension_web_cgo_callbacks() error {
	h, err := os.Create("./internal/gdextension_web_cgo_callbacks.cpp")
	if err != nil {
		return err
	}
	defer h.Close()

	fmt.Fprint(h, "// Code generated by ./internal/cmd/generate; DO NOT EDIT.\n")
	fmt.Fprint(h, "#include <stdlib.h>\n#include <stdbool.h>\n#include <emscripten/bind.h>\n\n")

	fmt.Fprint(h, "emscripten::val Go;\n\n")
	fmt.Fprint(h, "void go_on_init(uint32_t level) {")
	fmt.Fprint(h, "\n\tif (level == GDEXTENSION_INITIALIZATION_CORE) Go = emscripten::val::global(\"Go\");\n")
	fmt.Fprint(h, "\tGo.call<void>(\"on_init\", level);\n")
	fmt.Fprint(h, "}\n\n")

	for fn := range api.StructureOf(&gdextension.On).Iter() {
		name := fn.Tags.Get("gd")
		if name == "on_init" {
			continue
		}
		returns := getReturn(fn.Type)
		if returns != nil {
			if ctype := ctypeOf(returns); ctype != "" {
				fmt.Fprintf(h, "%s go_%s(", ctype, name)
			} else {
				return fmt.Errorf("unsupported return type %s for function %s", returns, name)
			}
		} else {
			fmt.Fprintf(h, "void go_%s(", name)
		}
		for i, arg := range args_flat(fn.Type) {
			if i > 0 {
				fmt.Fprint(h, ", ")
			}
			if ctype := ctypeOf(arg); ctype != "" {
				if ctype == "int64_t" || ctype == "uint64_t" {
					ctype = "double"
				}
				fmt.Fprintf(h, "%s p%d", ctype, i)
			} else {
				panic(fmt.Sprintf("unsupported type %s for parameter %d in function %s", arg, i, fn.Tags.Get("gd")))
			}
		}
		fmt.Fprint(h, ") {\n\t")
		if returns != nil {
			if ctype := ctypeOf(returns); ctype != "" {
				fmt.Fprintf(h, "return Go.call<%s", ctype)
			} else {
				return fmt.Errorf("unsupported return type %s for function %s", returns, name)
			}
		} else {
			fmt.Fprint(h, "Go.call<void")
		}
		fmt.Fprintf(h, ">(\"%s\"", name)
		for i, arg := range args_flat(fn.Type) {
			if arg.Kind() == reflect.UnsafePointer {
				fmt.Fprintf(h, ", uintptr_t(p%d)", i)
			} else {
				fmt.Fprintf(h, ",p%d", i)
			}
		}
		fmt.Fprint(h, ");\n")
		fmt.Fprintf(h, "}\n")
	}

	return nil
}
