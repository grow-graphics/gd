// Code generated by ./internal/cmd/generate; DO NOT EDIT.
#include <stdlib.h>
#include <stdbool.h>
#include <emscripten/bind.h>

emscripten::val Go;

void go_on_init(uint32_t level) {
	if (level == GDEXTENSION_INITIALIZATION_CORE) Go = emscripten::val::global("Go");
	Go.call<void>("on_init", level);
}

void go_on_exit(uint32_t p0) {
	Go.call<void>("on_exit",p0);
}
void go_on_callable_call(uintptr_t p0, void* p1, double p2, void* p3, void* p4) {
	Go.call<void>("on_callable_call",p0, uintptr_t(p1),p2, uintptr_t(p3), uintptr_t(p4));
}
bool go_on_callable_validation(uintptr_t p0) {
	return Go.call<bool>("on_callable_validation",p0);
}
void go_on_callable_free(uintptr_t p0) {
	Go.call<void>("on_callable_free",p0);
}
int64_t go_on_callable_hash(uintptr_t p0) {
	return Go.call<int64_t>("on_callable_hash",p0);
}
bool go_on_callable_compare(uintptr_t p0, uintptr_t p1) {
	return Go.call<bool>("on_callable_compare",p0,p1);
}
bool go_on_callable_less_than(uintptr_t p0, uintptr_t p1) {
	return Go.call<bool>("on_callable_less_than",p0,p1);
}
uintptr_t go_on_callable_stringify(uintptr_t p0, void* p1) {
	return Go.call<uintptr_t>("on_callable_stringify",p0, uintptr_t(p1));
}
int64_t go_on_callable_get_argument_count(uintptr_t p0, void* p1) {
	return Go.call<int64_t>("on_callable_get_argument_count",p0, uintptr_t(p1));
}
void go_on_editor_class_in_use_detection(double p0, double p1, void* p2) {
	Go.call<void>("on_editor_class_in_use_detection",p0,p1, uintptr_t(p2));
}
uintptr_t go_on_extension_binding_created(uintptr_t p0) {
	return Go.call<uintptr_t>("on_extension_binding_created",p0);
}
void go_on_extension_binding_removed(uintptr_t p0, uintptr_t p1) {
	Go.call<void>("on_extension_binding_removed",p0,p1);
}
bool go_on_extension_binding_reference(uintptr_t p0, bool p1) {
	return Go.call<bool>("on_extension_binding_reference",p0,p1);
}
uintptr_t go_on_extension_class_create(uintptr_t p0, bool p1) {
	return Go.call<uintptr_t>("on_extension_class_create",p0,p1);
}
uintptr_t go_on_extension_class_method(uintptr_t p0, uintptr_t p1, uint32_t p2) {
	return Go.call<uintptr_t>("on_extension_class_method",p0,p1,p2);
}
bool go_on_extension_instance_set(uintptr_t p0, uintptr_t p1, double p2, double p3, double p4) {
	return Go.call<bool>("on_extension_instance_set",p0,p1,p2,p3,p4);
}
bool go_on_extension_instance_get(uintptr_t p0, uintptr_t p1, void* p2) {
	return Go.call<bool>("on_extension_instance_get",p0,p1, uintptr_t(p2));
}
uintptr_t go_on_extension_instance_property_list(uintptr_t p0) {
	return Go.call<uintptr_t>("on_extension_instance_property_list",p0);
}
bool go_on_extension_instance_property_has_default(uintptr_t p0, uintptr_t p1) {
	return Go.call<bool>("on_extension_instance_property_has_default",p0,p1);
}
bool go_on_extension_instance_property_get_default(uintptr_t p0, uintptr_t p1, void* p2) {
	return Go.call<bool>("on_extension_instance_property_get_default",p0,p1, uintptr_t(p2));
}
bool go_on_extension_instance_property_validation(uintptr_t p0, uintptr_t p1) {
	return Go.call<bool>("on_extension_instance_property_validation",p0,p1);
}
void go_on_extension_instance_notification(uintptr_t p0, bool p1) {
	Go.call<void>("on_extension_instance_notification",p0,p1);
}
uintptr_t go_on_extension_instance_stringify(uintptr_t p0) {
	return Go.call<uintptr_t>("on_extension_instance_stringify",p0);
}
bool go_on_extension_instance_reference(uintptr_t p0, bool p1) {
	return Go.call<bool>("on_extension_instance_reference",p0,p1);
}
uint64_t go_on_extension_instance_rid(uintptr_t p0) {
	return Go.call<uint64_t>("on_extension_instance_rid",p0);
}
void go_on_extension_instance_call(uintptr_t p0, uintptr_t p1, void* p2, double p3, void* p4, void* p5) {
	Go.call<void>("on_extension_instance_call",p0,p1, uintptr_t(p2),p3, uintptr_t(p4), uintptr_t(p5));
}
void go_on_extension_instance_call_checked(uintptr_t p0, uintptr_t p1, void* p2, void* p3) {
	Go.call<void>("on_extension_instance_call_checked",p0,p1, uintptr_t(p2), uintptr_t(p3));
}
void go_on_extension_instance_free(uintptr_t p0) {
	Go.call<void>("on_extension_instance_free",p0);
}
void go_on_extension_instance_unsafe_call(uintptr_t p0, uintptr_t p1, void* p2, void* p3) {
	Go.call<void>("on_extension_instance_unsafe_call",p0,p1, uintptr_t(p2), uintptr_t(p3));
}
bool go_on_extension_script_categorization(uintptr_t p0, uintptr_t p1) {
	return Go.call<bool>("on_extension_script_categorization",p0,p1);
}
uint32_t go_on_extension_script_get_property_type(uintptr_t p0, void* p1) {
	return Go.call<uint32_t>("on_extension_script_get_property_type",p0, uintptr_t(p1));
}
uintptr_t go_on_extension_script_get_owner(uintptr_t p0) {
	return Go.call<uintptr_t>("on_extension_script_get_owner",p0);
}
void go_on_extension_script_get_property_state(uintptr_t p0, uintptr_t p1, uintptr_t p2) {
	Go.call<void>("on_extension_script_get_property_state",p0,p1,p2);
}
uintptr_t go_on_extension_script_get_methods(uintptr_t p0) {
	return Go.call<uintptr_t>("on_extension_script_get_methods",p0);
}
bool go_on_extension_script_has_method(uintptr_t p0, uintptr_t p1) {
	return Go.call<bool>("on_extension_script_has_method",p0,p1);
}
int64_t go_on_extension_script_get_method_argument_count(uintptr_t p0, uintptr_t p1) {
	return Go.call<int64_t>("on_extension_script_get_method_argument_count",p0,p1);
}
uintptr_t go_on_extension_script_get(uintptr_t p0) {
	return Go.call<uintptr_t>("on_extension_script_get",p0);
}
bool go_on_extension_script_is_placeholder(uintptr_t p0) {
	return Go.call<bool>("on_extension_script_is_placeholder",p0);
}
uintptr_t go_on_extension_script_get_language(uintptr_t p0) {
	return Go.call<uintptr_t>("on_extension_script_get_language",p0);
}
void go_on_first_frame() {
	Go.call<void>("on_first_frame");
}
void go_on_every_frame() {
	Go.call<void>("on_every_frame");
}
void go_on_final_frame() {
	Go.call<void>("on_final_frame");
}
void go_on_worker_thread_pool_task(uintptr_t p0) {
	Go.call<void>("on_worker_thread_pool_task",p0);
}
void go_on_worker_thread_pool_group_task(uintptr_t p0, uint32_t p1) {
	Go.call<void>("on_worker_thread_pool_group_task",p0,p1);
}
