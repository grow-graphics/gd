// Code generated by graphics.gd/startup/internal/cmd/generate; DO NOT EDIT.
//go:build wasip1

package startup

import "graphics.gd/internal/gdextension"

import "graphics.gd/internal/gdmemory"

//go:wasmimport gd array_get
func gd_array_get(p0 uintptr, p1 int32, p2 uintptr)

//go:wasmimport gd array_set
func gd_array_set(p0 uintptr, p1 int32, p2 uint64, p3 uint64, p4 uint64)

//go:wasmimport gd builtin_name
func gd_builtin_name(p0 uintptr, p1 int64) uintptr

//go:wasmimport gd builtin_call
func gd_builtin_call(p0 uintptr, p1 uintptr, p2 uint64, p3 uintptr)

//go:wasmimport gd variant_type_name
func gd_variant_type_name(p0 uint32) uintptr

//go:wasmimport gd variant_type_make
func gd_variant_type_make(p0 uint32, p1 uintptr, p2 int32, p3 uintptr, p4 uintptr)

//go:wasmimport gd variant_type_call
func gd_variant_type_call(p0 uint32, p1 uintptr, p2 uintptr, p3 int32, p4 uintptr, p5 uintptr)

//go:wasmimport gd variant_type_convertable
func gd_variant_type_convertable(p0 uint32, p1 uint32, p2 bool) bool

//go:wasmimport gd variant_type_setup_array
func gd_variant_type_setup_array(p0 uintptr, p1 uint32, p2 uintptr, p3 uint64, p4 uint64, p5 uint64)

//go:wasmimport gd variant_type_setup_dictionary
func gd_variant_type_setup_dictionary(p0 uintptr, p1 uint32, p2 uintptr, p3 uint64, p4 uint64, p5 uint64, p6 uint32, p7 uintptr, p8 uint64, p9 uint64, p10 uint64)

//go:wasmimport gd variant_type_fetch_constant
func gd_variant_type_fetch_constant(p0 uint32, p1 uintptr, p2 uintptr)

//go:wasmimport gd variant_type_unsafe_constructor
func gd_variant_type_unsafe_constructor(p0 uint32, p1 int32) uintptr

//go:wasmimport gd variant_type_evaluator
func gd_variant_type_evaluator(p0 uint32, p1 uint32, p2 uint32) uintptr

//go:wasmimport gd variant_type_setter
func gd_variant_type_setter(p0 uint32, p1 uintptr) uintptr

//go:wasmimport gd variant_type_getter
func gd_variant_type_getter(p0 uint32, p1 uintptr) uintptr

//go:wasmimport gd variant_type_has_property
func gd_variant_type_has_property(p0 uint32, p1 uintptr) bool

//go:wasmimport gd variant_type_builtin_method
func gd_variant_type_builtin_method(p0 uint32, p1 uintptr, p2 int64) uintptr

//go:wasmimport gd variant_type_unsafe_call
func gd_variant_type_unsafe_call(p0 uintptr, p1 uintptr, p2 uintptr, p3 uint64, p4 uintptr)

//go:wasmimport gd variant_type_unsafe_make
func gd_variant_type_unsafe_make(p0 uintptr, p1 uintptr, p2 uint64, p3 uintptr)

//go:wasmimport gd variant_type_unsafe_free
func gd_variant_type_unsafe_free(p0 uint32, p1 uint64, p2 uintptr)

//go:wasmimport gd callable_create
func gd_callable_create(p0 uintptr, p1 uint64, p2 uintptr)

//go:wasmimport gd callable_lookup
func gd_callable_lookup(p0 uint64, p1 uint64) uintptr

//go:wasmimport gd classdb_FileAccess_write
func gd_classdb_FileAccess_write(p0 uintptr, p1 uintptr, p2 int32)

//go:wasmimport gd classdb_FileAccess_read
func gd_classdb_FileAccess_read(p0 uintptr, p1 uintptr, p2 int32) int32

//go:wasmimport gd classdb_Image_unsafe
func gd_classdb_Image_unsafe(p0 uintptr) uintptr

//go:wasmimport gd classdb_Image_access
func gd_classdb_Image_access(p0 uintptr, p1 int32) uint32

//go:wasmimport gd method_list_make
func gd_method_list_make(p0 int32) uintptr

//go:wasmimport gd method_list_push
func gd_method_list_push(p0 uintptr, p1 uintptr, p2 uintptr, p3 uint32, p4 uintptr, p5 uintptr, p6 int32, p7 uintptr)

//go:wasmimport gd method_list_free
func gd_method_list_free(p0 uintptr)

//go:wasmimport gd property_list_make
func gd_property_list_make(p0 int32) uintptr

//go:wasmimport gd property_list_push
func gd_property_list_push(p0 uintptr, p1 uint32, p2 uintptr, p3 uintptr, p4 uint32, p5 uintptr, p6 uint32, p7 uint32)

//go:wasmimport gd property_list_free
func gd_property_list_free(p0 uintptr)

//go:wasmimport gd property_info_type
func gd_property_info_type(p0 uintptr) uint32

//go:wasmimport gd property_info_name
func gd_property_info_name(p0 uintptr) uintptr

//go:wasmimport gd property_info_class_name
func gd_property_info_class_name(p0 uintptr) uintptr

//go:wasmimport gd property_info_hint
func gd_property_info_hint(p0 uintptr) uint32

//go:wasmimport gd property_info_hint_string
func gd_property_info_hint_string(p0 uintptr) uintptr

//go:wasmimport gd property_info_usage
func gd_property_info_usage(p0 uintptr) uint32

//go:wasmimport gd classdb_register
func gd_classdb_register(p0 uintptr, p1 uintptr, p2 uintptr, p3 bool, p4 bool, p5 bool, p6 bool, p7 uintptr)

//go:wasmimport gd classdb_register_methods
func gd_classdb_register_methods(p0 uintptr, p1 uintptr)

//go:wasmimport gd classdb_register_constant
func gd_classdb_register_constant(p0 uintptr, p1 uintptr, p2 uintptr, p3 int64, p4 bool)

//go:wasmimport gd classdb_register_property
func gd_classdb_register_property(p0 uintptr, p1 uintptr, p2 uintptr, p3 uintptr)

//go:wasmimport gd classdb_register_property_indexed
func gd_classdb_register_property_indexed(p0 uintptr, p1 uintptr, p2 uintptr, p3 uintptr, p4 int32)

//go:wasmimport gd classdb_register_property_group
func gd_classdb_register_property_group(p0 uintptr, p1 uintptr, p2 uintptr)

//go:wasmimport gd classdb_register_property_sub_group
func gd_classdb_register_property_sub_group(p0 uintptr, p1 uintptr, p2 uintptr)

//go:wasmimport gd classdb_register_signal
func gd_classdb_register_signal(p0 uintptr, p1 uintptr, p2 uintptr)

//go:wasmimport gd classdb_register_removal
func gd_classdb_register_removal(p0 uintptr)

//go:wasmimport gd classdb_WorkerThreadPool_add_task
func gd_classdb_WorkerThreadPool_add_task(p0 uintptr, p1 uintptr, p2 bool, p3 uintptr)

//go:wasmimport gd classdb_WorkerThreadPool_add_group_task
func gd_classdb_WorkerThreadPool_add_group_task(p0 uintptr, p1 uintptr, p2 int32, p3 int32, p4 bool, p5 uintptr)

//go:wasmimport gd classdb_XMLParser_load
func gd_classdb_XMLParser_load(p0 uintptr, p1 uintptr, p2 int32) int32

//go:wasmimport gd packed_dictionary_access
func gd_packed_dictionary_access(p0 uintptr, p1 uint64, p2 uint64, p3 uint64, p4 uintptr)

//go:wasmimport gd packed_dictionary_modify
func gd_packed_dictionary_modify(p0 uintptr, p1 uint64, p2 uint64, p3 uint64, p4 uint64, p5 uint64, p6 uint64)

//go:wasmimport gd editor_add_documentation
func gd_editor_add_documentation(p0 string, p1 int32)

//go:wasmimport gd editor_add_plugin
func gd_editor_add_plugin(p0 uintptr)

//go:wasmimport gd editor_end_plugin
func gd_editor_end_plugin(p0 uintptr)

//go:wasmimport gd iterator_make
func gd_iterator_make(p0 uint64, p1 uint64, p2 uint64, p3 uintptr, p4 uintptr)

//go:wasmimport gd iterator_next
func gd_iterator_next(p0 uint64, p1 uint64, p2 uint64, p3 uintptr, p4 uintptr) bool

//go:wasmimport gd iterator_load
func gd_iterator_load(p0 uint64, p1 uint64, p2 uint64, p3 uint64, p4 uint64, p5 uint64, p6 uintptr, p7 uintptr)

//go:wasmimport gd library_location
func gd_library_location() uintptr

//go:wasmimport gd log_error
func gd_log_error(p0 string, p1 int32, p2 string, p3 int32, p4 string, p5 int32, p6 string, p7 int32, p8 int32, p9 bool)

//go:wasmimport gd log_warning
func gd_log_warning(p0 string, p1 int32, p2 string, p3 int32, p4 string, p5 int32, p6 string, p7 int32, p8 int32, p9 bool)

//go:wasmimport gd memory_malloc
func gd_memory_malloc(p0 int32) uintptr

//go:wasmimport gd memory_sizeof
func gd_memory_sizeof(p0 uintptr) int32

//go:wasmimport gd memory_resize
func gd_memory_resize(p0 uintptr, p1 int32) uintptr

//go:wasmimport gd memory_clear
func gd_memory_clear(p0 uintptr, p1 int32)

//go:wasmimport gd memory_free
func gd_memory_free(p0 uintptr)

//go:wasmimport gd memory_edit_byte
func gd_memory_edit_byte(p0 uintptr, p1 uint32)

//go:wasmimport gd memory_edit_u16
func gd_memory_edit_u16(p0 uintptr, p1 uint32)

//go:wasmimport gd memory_edit_u32
func gd_memory_edit_u32(p0 uintptr, p1 uint32)

//go:wasmimport gd memory_edit_u64
func gd_memory_edit_u64(p0 uintptr, p1 uint64)

//go:wasmimport gd memory_edit_128
func gd_memory_edit_128(p0 uintptr, p1 uint64, p2 uint64)

//go:wasmimport gd memory_edit_256
func gd_memory_edit_256(p0 uintptr, p1 uint64, p2 uint64, p3 uint64, p4 uint64)

//go:wasmimport gd memory_edit_512
func gd_memory_edit_512(p0 uintptr, p1 uint64, p2 uint64, p3 uint64, p4 uint64, p5 uint64, p6 uint64, p7 uint64, p8 uint64)

//go:wasmimport gd memory_load_byte
func gd_memory_load_byte(p0 uintptr) uint32

//go:wasmimport gd memory_load_u16
func gd_memory_load_u16(p0 uintptr) uint32

//go:wasmimport gd memory_load_u32
func gd_memory_load_u32(p0 uintptr) uint32

//go:wasmimport gd object_make
func gd_object_make(p0 uintptr) uintptr

//go:wasmimport gd object_call
func gd_object_call(p0 uintptr, p1 uintptr, p2 uintptr, p3 int32, p4 uintptr, p5 uintptr)

//go:wasmimport gd object_name
func gd_object_name(p0 uintptr) uintptr

//go:wasmimport gd object_type
func gd_object_type(p0 uintptr) uintptr

//go:wasmimport gd object_cast
func gd_object_cast(p0 uintptr, p1 uintptr) uintptr

//go:wasmimport gd object_lookup
func gd_object_lookup(p0 uint64) uintptr

//go:wasmimport gd object_global
func gd_object_global(p0 uintptr) uintptr

//go:wasmimport gd object_extension_setup
func gd_object_extension_setup(p0 uintptr, p1 uintptr, p2 uintptr)

//go:wasmimport gd object_extension_fetch
func gd_object_extension_fetch(p0 uintptr) uintptr

//go:wasmimport gd object_extension_close
func gd_object_extension_close(p0 uintptr)

//go:wasmimport gd object_id
func gd_object_id(p0 uintptr, p1 uintptr)

//go:wasmimport gd object_id_inside_variant
func gd_object_id_inside_variant(p0 uint64, p1 uint64, p2 uint64, p3 uintptr)

//go:wasmimport gd object_method_lookup
func gd_object_method_lookup(p0 uintptr, p1 uintptr, p2 int64) uintptr

//go:wasmimport gd object_script_make
func gd_object_script_make(p0 uintptr) uintptr

//go:wasmimport gd object_script_call
func gd_object_script_call(p0 uintptr, p1 uintptr, p2 uintptr, p3 int32, p4 uintptr, p5 uintptr)

//go:wasmimport gd object_script_setup
func gd_object_script_setup(p0 uintptr, p1 uintptr)

//go:wasmimport gd object_script_fetch
func gd_object_script_fetch(p0 uintptr, p1 uintptr) uintptr

//go:wasmimport gd object_script_defines_method
func gd_object_script_defines_method(p0 uintptr, p1 uintptr) bool

//go:wasmimport gd object_script_property_state_add
func gd_object_script_property_state_add(p0 uintptr, p1 uintptr, p2 uintptr, p3 uint64, p4 uint64, p5 uint64)

//go:wasmimport gd object_script_placeholder_create
func gd_object_script_placeholder_create(p0 uintptr, p1 uintptr, p2 uintptr) uintptr

//go:wasmimport gd object_script_placeholder_update
func gd_object_script_placeholder_update(p0 uintptr, p1 uintptr, p2 uintptr)

//go:wasmimport gd object_unsafe_call
func gd_object_unsafe_call(p0 uintptr, p1 uintptr, p2 uintptr, p3 uint64, p4 uintptr)

//go:wasmimport gd object_unsafe_free
func gd_object_unsafe_free(p0 uintptr)

//go:wasmimport gd packed_byte_array_unsafe
func gd_packed_byte_array_unsafe(p0 uint64, p1 uint64) uintptr

//go:wasmimport gd packed_byte_array_access
func gd_packed_byte_array_access(p0 uint64, p1 uint64, p2 int32) uint32

//go:wasmimport gd packed_color_array_unsafe
func gd_packed_color_array_unsafe(p0 uint64, p1 uint64) uintptr

//go:wasmimport gd packed_color_array_access
func gd_packed_color_array_access(p0 uint64, p1 uint64, p2 int32, p3 uintptr)

//go:wasmimport gd packed_float32_array_unsafe
func gd_packed_float32_array_unsafe(p0 uint64, p1 uint64) uintptr

//go:wasmimport gd packed_float32_array_access
func gd_packed_float32_array_access(p0 uint64, p1 uint64, p2 int32) float32

//go:wasmimport gd packed_float64_array_unsafe
func gd_packed_float64_array_unsafe(p0 uint64, p1 uint64) uintptr

//go:wasmimport gd packed_float64_array_access
func gd_packed_float64_array_access(p0 uint64, p1 uint64, p2 int32) float64

//go:wasmimport gd packed_int32_array_unsafe
func gd_packed_int32_array_unsafe(p0 uint64, p1 uint64) uintptr

//go:wasmimport gd packed_int32_array_access
func gd_packed_int32_array_access(p0 uint64, p1 uint64, p2 int32) int32

//go:wasmimport gd packed_int64_array_unsafe
func gd_packed_int64_array_unsafe(p0 uint64, p1 uint64) uintptr

//go:wasmimport gd packed_int64_array_access
func gd_packed_int64_array_access(p0 uint64, p1 uint64, p2 int32, p3 uintptr)

//go:wasmimport gd packed_string_array_unsafe
func gd_packed_string_array_unsafe(p0 uint64, p1 uint64) uintptr

//go:wasmimport gd packed_string_array_access
func gd_packed_string_array_access(p0 uint64, p1 uint64, p2 int32) uintptr

//go:wasmimport gd packed_vector2_array_unsafe
func gd_packed_vector2_array_unsafe(p0 uint64, p1 uint64) uintptr

//go:wasmimport gd packed_vector2_array_access
func gd_packed_vector2_array_access(p0 uint64, p1 uint64, p2 int32, p3 uintptr)

//go:wasmimport gd packed_vector3_array_unsafe
func gd_packed_vector3_array_unsafe(p0 uint64, p1 uint64) uintptr

//go:wasmimport gd packed_vector3_array_access
func gd_packed_vector3_array_access(p0 uint64, p1 uint64, p2 int32, p3 uintptr)

//go:wasmimport gd packed_vector4_array_unsafe
func gd_packed_vector4_array_unsafe(p0 uint64, p1 uint64) uintptr

//go:wasmimport gd packed_vector4_array_access
func gd_packed_vector4_array_access(p0 uint64, p1 uint64, p2 int32, p3 uintptr)

//go:wasmimport gd ref_get_object
func gd_ref_get_object(p0 uintptr) uintptr

//go:wasmimport gd ref_set_object
func gd_ref_set_object(p0 uintptr, p1 uintptr)

//go:wasmimport gd string_access
func gd_string_access(p0 uintptr, p1 int32) int32

//go:wasmimport gd string_resize
func gd_string_resize(p0 uintptr, p1 int32) uintptr

//go:wasmimport gd string_unsafe
func gd_string_unsafe(p0 uintptr) uintptr

//go:wasmimport gd string_append
func gd_string_append(p0 uintptr, p1 uintptr) uintptr

//go:wasmimport gd string_append_rune
func gd_string_append_rune(p0 uintptr, p1 int32) uintptr

//go:wasmimport gd string_decode_latin1
func gd_string_decode_latin1(p0 string, p1 int32) uintptr

//go:wasmimport gd string_decode_utf8
func gd_string_decode_utf8(p0 string, p1 int32) uintptr

//go:wasmimport gd string_decode_utf16
func gd_string_decode_utf16(p0 string, p1 int32, p2 bool) uintptr

//go:wasmimport gd string_decode_utf32
func gd_string_decode_utf32(p0 string, p1 int32) uintptr

//go:wasmimport gd string_decode_wide
func gd_string_decode_wide(p0 string, p1 int32) uintptr

//go:wasmimport gd string_encode_latin1
func gd_string_encode_latin1(p0 uintptr, p1 uintptr, p2 int32) int32

//go:wasmimport gd string_encode_utf8
func gd_string_encode_utf8(p0 uintptr, p1 uintptr, p2 int32) int32

//go:wasmimport gd string_encode_utf16
func gd_string_encode_utf16(p0 uintptr, p1 uintptr, p2 int32) int32

//go:wasmimport gd string_encode_utf32
func gd_string_encode_utf32(p0 uintptr, p1 uintptr, p2 int32) int32

//go:wasmimport gd string_encode_wide
func gd_string_encode_wide(p0 uintptr, p1 uintptr, p2 int32) int32

//go:wasmimport gd string_intern_latin1
func gd_string_intern_latin1(p0 string, p1 int32) uintptr

//go:wasmimport gd string_intern_utf8
func gd_string_intern_utf8(p0 string, p1 int32) uintptr

//go:wasmimport gd variant_zero
func gd_variant_zero(p0 uintptr)

//go:wasmimport gd variant_copy
func gd_variant_copy(p0 uint64, p1 uint64, p2 uint64, p3 uintptr)

//go:wasmimport gd variant_call
func gd_variant_call(p0 uint64, p1 uint64, p2 uint64, p3 uintptr, p4 uintptr, p5 int32, p6 uintptr, p7 uintptr)

//go:wasmimport gd variant_eval
func gd_variant_eval(p0 uint32, p1 uint64, p2 uint64, p3 uint64, p4 uint64, p5 uint64, p6 uint64, p7 uintptr) bool

//go:wasmimport gd variant_hash
func gd_variant_hash(p0 uint64, p1 uint64, p2 uint64, p3 uintptr)

//go:wasmimport gd variant_bool
func gd_variant_bool(p0 uint64, p1 uint64, p2 uint64) bool

//go:wasmimport gd variant_text
func gd_variant_text(p0 uint64, p1 uint64, p2 uint64) uintptr

//go:wasmimport gd variant_type
func gd_variant_type(p0 uint64, p1 uint64, p2 uint64) uint32

//go:wasmimport gd variant_deep_copy
func gd_variant_deep_copy(p0 uint64, p1 uint64, p2 uint64, p3 uintptr)

//go:wasmimport gd variant_deep_hash
func gd_variant_deep_hash(p0 uint64, p1 uint64, p2 uint64, p3 int64, p4 uintptr)

//go:wasmimport gd variant_get_index
func gd_variant_get_index(p0 uint64, p1 uint64, p2 uint64, p3 uint64, p4 uint64, p5 uint64, p6 uintptr) bool

//go:wasmimport gd variant_get_array
func gd_variant_get_array(p0 uint64, p1 uint64, p2 uint64, p3 int32, p4 uintptr, p5 uintptr) bool

//go:wasmimport gd variant_get_field
func gd_variant_get_field(p0 uint64, p1 uint64, p2 uint64, p3 uintptr, p4 uintptr) bool

//go:wasmimport gd variant_has_index
func gd_variant_has_index(p0 uint64, p1 uint64, p2 uint64, p3 uint64, p4 uint64, p5 uint64) bool

//go:wasmimport gd variant_has_method
func gd_variant_has_method(p0 uint64, p1 uint64, p2 uint64, p3 uintptr) bool

//go:wasmimport gd variant_set_index
func gd_variant_set_index(p0 uint64, p1 uint64, p2 uint64, p3 uint64, p4 uint64, p5 uint64, p6 uint64, p7 uint64, p8 uint64) bool

//go:wasmimport gd variant_set_array
func gd_variant_set_array(p0 uint64, p1 uint64, p2 uint64, p3 int32, p4 uint64, p5 uint64, p6 uint64, p7 uintptr) bool

//go:wasmimport gd variant_set_field
func gd_variant_set_field(p0 uint64, p1 uint64, p2 uint64, p3 uintptr, p4 uint64, p5 uint64, p6 uint64) bool

//go:wasmimport gd variant_unsafe_call
func gd_variant_unsafe_call(p0 uintptr, p1 uintptr, p2 uint64, p3 uintptr)

//go:wasmimport gd variant_unsafe_eval
func gd_variant_unsafe_eval(p0 uintptr, p1 uintptr, p2 uint64, p3 uintptr)

//go:wasmimport gd variant_unsafe_free
func gd_variant_unsafe_free(p0 uint64, p1 uint64, p2 uint64)

//go:wasmimport gd variant_unsafe_make_native
func gd_variant_unsafe_make_native(p0 uint32, p1 uint64, p2 uint64, p3 uint64, p4 uint64, p5 uintptr)

//go:wasmimport gd variant_unsafe_from_native
func gd_variant_unsafe_from_native(p0 uint32, p1 uintptr, p2 uint64, p3 uintptr)

//go:wasmimport gd variant_unsafe_internal_pointer
func gd_variant_unsafe_internal_pointer(p0 uint32, p1 uint64, p2 uint64, p3 uint64) uintptr

//go:wasmimport gd variant_unsafe_get_field
func gd_variant_unsafe_get_field(p0 uintptr, p1 uintptr, p2 uint64, p3 uintptr)

//go:wasmimport gd variant_unsafe_get_array
func gd_variant_unsafe_get_array(p0 uint32, p1 int32, p2 uintptr, p3 uint64, p4 uintptr)

//go:wasmimport gd variant_unsafe_get_index
func gd_variant_unsafe_get_index(p0 uint32, p1 uintptr, p2 uint64, p3 uintptr)

//go:wasmimport gd variant_unsafe_set_field
func gd_variant_unsafe_set_field(p0 uintptr, p1 uint64, p2 uintptr)

//go:wasmimport gd variant_unsafe_set_array
func gd_variant_unsafe_set_array(p0 uint32, p1 int32, p2 uint64, p3 uintptr)

//go:wasmimport gd variant_unsafe_set_index
func gd_variant_unsafe_set_index(p0 uint32, p1 uint64, p2 uintptr)

//go:wasmimport gd version_major
func gd_version_major() uint32

//go:wasmimport gd version_minor
func gd_version_minor() uint32

//go:wasmimport gd version_patch
func gd_version_patch() uint32

//go:wasmimport gd version_hex
func gd_version_hex() uint32

//go:wasmimport gd version_status
func gd_version_status() uintptr

//go:wasmimport gd version_build
func gd_version_build() uintptr

//go:wasmimport gd version_hash
func gd_version_hash() uintptr

//go:wasmimport gd version_timestamp
func gd_version_timestamp(p0 uintptr)

//go:wasmimport gd version_string
func gd_version_string() uintptr

//go:wasmexport on_callable_call
func on_callable_call(p0 uintptr, p1 uintptr, p2 int32, p3 uintptr, p4 uintptr) {
	gdextension.On.Callables.Call(gdextension.FunctionID(p0), gdextension.Returns[gdextension.Variant](p1), int(p2), gdextension.Accepts[gdextension.Variant](p3), gdextension.Returns[gdextension.CallError](p4))
}

//go:wasmexport on_callable_validation
func on_callable_validation(p0 uintptr) bool {
	return bool(gdextension.On.Callables.Validation(gdextension.FunctionID(p0)))
}

//go:wasmexport on_callable_free
func on_callable_free(p0 uintptr) {
	gdextension.On.Callables.Free(gdextension.FunctionID(p0))
}

//go:wasmexport on_callable_hash
func on_callable_hash(p0 uintptr) uint32 {
	return uint32(gdextension.On.Callables.Hash(gdextension.FunctionID(p0)))
}

//go:wasmexport on_callable_compare
func on_callable_compare(p0 uintptr, p1 uintptr) bool {
	return bool(gdextension.On.Callables.Compare(gdextension.FunctionID(p0), gdextension.FunctionID(p1)))
}

//go:wasmexport on_callable_less_than
func on_callable_less_than(p0 uintptr, p1 uintptr) bool {
	return bool(gdextension.On.Callables.LessThan(gdextension.FunctionID(p0), gdextension.FunctionID(p1)))
}

//go:wasmexport on_callable_stringify
func on_callable_stringify(p0 uintptr, p1 uintptr) uintptr {
	return uintptr(gdextension.On.Callables.Stringify(gdextension.FunctionID(p0), gdextension.Returns[gdextension.CallError](p1))[0])
}

//go:wasmexport on_callable_get_argument_count
func on_callable_get_argument_count(p0 uintptr, p1 uintptr) int32 {
	return int32(gdextension.On.Callables.ArgumentCount(gdextension.FunctionID(p0), gdextension.Returns[gdextension.CallError](p1)))
}

//go:wasmexport on_editor_class_in_use_detection
func on_editor_class_in_use_detection(p0 uint64, p1 uint64, p2 uintptr) {
	gdextension.On.Editor.ClassInUseDetection(gdextension.PackedArray[gdextension.String]{uint64(p0), uint64(p1)}, gdextension.Returns[gdextension.PackedArray[gdextension.String]](p2))
}

//go:wasmexport on_engine_init
func on_engine_init(p0 uint32) {
	gdextension.On.Engine.Init(gdextension.InitializationLevel(p0))
}

//go:wasmexport on_engine_exit
func on_engine_exit(p0 uint32) {
	gdextension.On.Engine.Exit(gdextension.InitializationLevel(p0))
}

//go:wasmexport on_extension_binding_created
func on_extension_binding_created(p0 uintptr) uintptr {
	return uintptr(gdextension.On.Extension.Binding.Created(gdextension.ExtensionInstanceID(p0)))
}

//go:wasmexport on_extension_binding_removed
func on_extension_binding_removed(p0 uintptr, p1 uintptr) {
	gdextension.On.Extension.Binding.Removed(gdextension.ExtensionInstanceID(p0), gdextension.ExtensionBindingID(p1))
}

//go:wasmexport on_extension_binding_reference
func on_extension_binding_reference(p0 uintptr, p1 bool) bool {
	return bool(gdextension.On.Extension.Binding.Reference(gdextension.ExtensionInstanceID(p0), bool(p1)))
}

//go:wasmexport on_extension_class_create
func on_extension_class_create(p0 uintptr, p1 bool) uintptr {
	return uintptr(gdextension.On.Extension.Class.Create(gdextension.ExtensionClassID(p0), bool(p1)))
}

//go:wasmexport on_extension_class_method
func on_extension_class_method(p0 uintptr, p1 uintptr, p2 uint32) uintptr {
	return uintptr(gdextension.On.Extension.Class.Method(gdextension.ExtensionClassID(p0), gdextension.StringName{gdextension.Pointer(p1)}, uint32(p2)))
}

//go:wasmexport on_extension_instance_set
func on_extension_instance_set(p0 uintptr, p1 uintptr, p2 uint64, p3 uint64, p4 uint64) bool {
	return bool(gdextension.On.Extension.Instance.Set(gdextension.ExtensionInstanceID(p0), gdextension.StringName{gdextension.Pointer(p1)}, gdextension.Variant{uint64(p2), uint64(p3), uint64(p4)}))
}

//go:wasmexport on_extension_instance_get
func on_extension_instance_get(p0 uintptr, p1 uintptr, p2 uintptr) bool {
	return bool(gdextension.On.Extension.Instance.Get(gdextension.ExtensionInstanceID(p0), gdextension.StringName{gdextension.Pointer(p1)}, gdextension.Returns[gdextension.Variant](p2)))
}

//go:wasmexport on_extension_instance_property_list
func on_extension_instance_property_list(p0 uintptr) uintptr {
	return uintptr(gdextension.On.Extension.Instance.PropertyList(gdextension.ExtensionInstanceID(p0)))
}

//go:wasmexport on_extension_instance_property_has_default
func on_extension_instance_property_has_default(p0 uintptr, p1 uintptr) bool {
	return bool(gdextension.On.Extension.Instance.PropertyHasDefault(gdextension.ExtensionInstanceID(p0), gdextension.StringName{gdextension.Pointer(p1)}))
}

//go:wasmexport on_extension_instance_property_get_default
func on_extension_instance_property_get_default(p0 uintptr, p1 uintptr, p2 uintptr) bool {
	return bool(gdextension.On.Extension.Instance.PropertyGetDefault(gdextension.ExtensionInstanceID(p0), gdextension.StringName{gdextension.Pointer(p1)}, gdextension.Returns[gdextension.Variant](p2)))
}

//go:wasmexport on_extension_instance_property_validation
func on_extension_instance_property_validation(p0 uintptr, p1 uintptr) bool {
	return bool(gdextension.On.Extension.Instance.PropertyValidation(gdextension.ExtensionInstanceID(p0), gdextension.PropertyList(p1)))
}

//go:wasmexport on_extension_instance_notification
func on_extension_instance_notification(p0 uintptr, p1 int32, p2 bool) {
	gdextension.On.Extension.Instance.Notification(gdextension.ExtensionInstanceID(p0), int32(p1), bool(p2))
}

//go:wasmexport on_extension_instance_stringify
func on_extension_instance_stringify(p0 uintptr) uintptr {
	return uintptr(gdextension.On.Extension.Instance.Stringify(gdextension.ExtensionInstanceID(p0))[0])
}

//go:wasmexport on_extension_instance_reference
func on_extension_instance_reference(p0 uintptr, p1 bool) bool {
	return bool(gdextension.On.Extension.Instance.Reference(gdextension.ExtensionInstanceID(p0), bool(p1)))
}

//go:wasmexport on_extension_instance_rid
func on_extension_instance_rid(p0 uintptr, p1 uintptr) {
	gdextension.On.Extension.Instance.RID(gdextension.ExtensionInstanceID(p0), gdextension.Returns[uint64](p1))
}

//go:wasmexport on_extension_instance_checked_call
func on_extension_instance_checked_call(p0 uintptr, p1 uintptr, p2 uintptr, p3 uintptr) {
	gdextension.On.Extension.Instance.CheckedCall(gdextension.ExtensionInstanceID(p0), gdextension.FunctionID(p1), gdextension.Returns[interface{}](p2), gdextension.Accepts[interface{}](p3))
}

//go:wasmexport on_extension_instance_variant_call
func on_extension_instance_variant_call(p0 uintptr, p1 uintptr, p2 uintptr, p3 uintptr) {
	gdextension.On.Extension.Instance.VariantCall(gdextension.ExtensionInstanceID(p0), gdextension.FunctionID(p1), gdextension.Returns[gdextension.Variant](p2), gdextension.Accepts[gdextension.Variant](p3))
}

//go:wasmexport on_extension_instance_dynamic_call
func on_extension_instance_dynamic_call(p0 uintptr, p1 uintptr, p2 uintptr, p3 int32, p4 uintptr, p5 uintptr) {
	gdextension.On.Extension.Instance.DynamicCall(gdextension.ExtensionInstanceID(p0), gdextension.FunctionID(p1), gdextension.Returns[gdextension.Variant](p2), int(p3), gdextension.Accepts[gdextension.Variant](p4), gdextension.Returns[gdextension.CallError](p5))
}

//go:wasmexport on_extension_instance_free
func on_extension_instance_free(p0 uintptr) {
	gdextension.On.Extension.Instance.Free(gdextension.ExtensionInstanceID(p0))
}

//go:wasmexport on_extension_script_categorization
func on_extension_script_categorization(p0 uintptr, p1 uintptr) bool {
	return bool(gdextension.On.Extension.Script.Categorization(gdextension.ExtensionInstanceID(p0), gdextension.PropertyList(p1)))
}

//go:wasmexport on_extension_script_get_property_type
func on_extension_script_get_property_type(p0 uintptr, p1 uintptr) uint32 {
	return uint32(gdextension.On.Extension.Script.PropertyType(gdextension.StringName{gdextension.Pointer(p0)}, gdextension.Returns[gdextension.CallError](p1)))
}

//go:wasmexport on_extension_script_get_owner
func on_extension_script_get_owner(p0 uintptr) uintptr {
	return uintptr(gdextension.On.Extension.Script.Owner(gdextension.ExtensionInstanceID(p0)))
}

//go:wasmexport on_extension_script_get_property_state
func on_extension_script_get_property_state(p0 uintptr, p1 uintptr, p2 uintptr) {
	gdextension.On.Extension.Script.PropertyState(gdextension.ExtensionInstanceID(p0), gdextension.FunctionID(p1), gdextension.Pointer(p2))
}

//go:wasmexport on_extension_script_get_methods
func on_extension_script_get_methods(p0 uintptr) uintptr {
	return uintptr(gdextension.On.Extension.Script.Methods(gdextension.ExtensionInstanceID(p0)))
}

//go:wasmexport on_extension_script_has_method
func on_extension_script_has_method(p0 uintptr, p1 uintptr) bool {
	return bool(gdextension.On.Extension.Script.HasMethod(gdextension.ExtensionInstanceID(p0), gdextension.StringName{gdextension.Pointer(p1)}))
}

//go:wasmexport on_extension_script_get_method_argument_count
func on_extension_script_get_method_argument_count(p0 uintptr, p1 uintptr) int32 {
	return int32(gdextension.On.Extension.Script.MethodArgumentCount(gdextension.ExtensionInstanceID(p0), gdextension.StringName{gdextension.Pointer(p1)}))
}

//go:wasmexport on_extension_script_get
func on_extension_script_get(p0 uintptr) uintptr {
	return uintptr(gdextension.On.Extension.Script.Get(gdextension.ExtensionInstanceID(p0)))
}

//go:wasmexport on_extension_script_is_placeholder
func on_extension_script_is_placeholder(p0 uintptr) bool {
	return bool(gdextension.On.Extension.Script.IsPlaceholder(gdextension.ExtensionInstanceID(p0)))
}

//go:wasmexport on_extension_script_get_language
func on_extension_script_get_language(p0 uintptr) uintptr {
	return uintptr(gdextension.On.Extension.Script.Language(gdextension.ExtensionInstanceID(p0)))
}

//go:wasmexport on_first_frame
func on_first_frame() {
	gdextension.On.MainLoop.FirstFrame()
}

//go:wasmexport on_every_frame
func on_every_frame() {
	gdextension.On.MainLoop.EveryFrame()
}

//go:wasmexport on_final_frame
func on_final_frame() {
	gdextension.On.MainLoop.FinalFrame()
}

//go:wasmexport on_worker_thread_pool_task
func on_worker_thread_pool_task(p0 uintptr) {
	gdextension.On.Threading.Run(gdextension.TaskID(p0))
}

//go:wasmexport on_worker_thread_pool_group_task
func on_worker_thread_pool_group_task(p0 uintptr, p1 uint32) {
	gdextension.On.Threading.RunInGroup(gdextension.TaskID(p0), uint32(p1))
}

func init() {
	gdextension.Host.Array.Get = func(p0 gdextension.Array, p1 int, p2 gdextension.CallReturns[gdextension.Variant]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeVariant)
		gd_array_get(uintptr(p0[0]), int32(p1), uintptr(mem2))
		gdmemory.LoadResult(gdextension.SizeVariant, p2, mem2)
		return
	}
	gdextension.Host.Array.Set = func(p0 gdextension.Array, p1 int, p2 gdextension.Variant) {
		gd_array_set(uintptr(p0[0]), int32(p1), uint64(p2[0]), uint64(p2[1]), uint64(p2[2]))
		return
	}
	gdextension.Host.Builtin.Functions.Name = func(p0 gdextension.StringName, p1 int64) (result gdextension.FunctionID) {
		result = gdextension.FunctionID(gd_builtin_name(uintptr(p0[0]), int64(p1)))
		return
	}
	gdextension.Host.Builtin.Functions.Call = func(p0 gdextension.FunctionID, p1 gdextension.CallReturns[interface{}], shape gdextension.Shape, p3 gdextension.CallAccepts[interface{}]) {
		mem1 := gdmemory.MakeResult(shape)
		mem3 := gdmemory.CopyArguments(shape, p3)
		gd_builtin_call(uintptr(p0), uintptr(mem1), uint64(shape), uintptr(mem3))
		gdmemory.LoadResult(shape, p1, mem1)
		return
	}
	gdextension.Host.Builtin.Types.Name = func(p0 gdextension.VariantType) (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_variant_type_name(uint32(p0)))}
		return
	}
	gdextension.Host.Builtin.Types.Make = func(p0 gdextension.VariantType, p1 gdextension.CallReturns[gdextension.Variant], p2 int, p3 gdextension.CallAccepts[gdextension.Variant], p4 gdextension.CallReturns[gdextension.CallError]) {
		mem1 := gdmemory.MakeResult(gdextension.SizeVariant)
		mem3 := gdmemory.CopyVariants(p3, p2)
		mem4 := gdmemory.MakeResult(gdextension.SizeVariant)
		gd_variant_type_make(uint32(p0), uintptr(mem1), int32(p2), uintptr(mem3), uintptr(mem4))
		gdmemory.LoadResult(gdextension.SizeVariant, p1, mem1)
		gdmemory.LoadResult(gdextension.SizeVector3, p4, mem4)
		return
	}
	gdextension.Host.Builtin.Types.Call = func(p0 gdextension.VariantType, p1 gdextension.StringName, p2 gdextension.CallReturns[gdextension.Variant], p3 int, p4 gdextension.CallAccepts[gdextension.Variant], p5 gdextension.CallReturns[gdextension.CallError]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeVariant)
		mem4 := gdmemory.CopyVariants(p4, p3)
		mem5 := gdmemory.MakeResult(gdextension.SizeVariant)
		gd_variant_type_call(uint32(p0), uintptr(p1[0]), uintptr(mem2), int32(p3), uintptr(mem4), uintptr(mem5))
		gdmemory.LoadResult(gdextension.SizeVariant, p2, mem2)
		gdmemory.LoadResult(gdextension.SizeVector3, p5, mem5)
		return
	}
	gdextension.Host.Builtin.Types.Convertable = func(p0 gdextension.VariantType, p1 gdextension.VariantType, p2 bool) (result bool) {
		result = bool(gd_variant_type_convertable(uint32(p0), uint32(p1), bool(p2)))
		return
	}
	gdextension.Host.Builtin.Types.SetupArray = func(p0 gdextension.Array, p1 gdextension.VariantType, p2 gdextension.StringName, p3 gdextension.Variant) {
		gd_variant_type_setup_array(uintptr(p0[0]), uint32(p1), uintptr(p2[0]), uint64(p3[0]), uint64(p3[1]), uint64(p3[2]))
		return
	}
	gdextension.Host.Builtin.Types.SetupDictionary = func(p0 gdextension.Dictionary, p1 gdextension.VariantType, p2 gdextension.StringName, p3 gdextension.Variant, p4 gdextension.VariantType, p5 gdextension.StringName, p6 gdextension.Variant) {
		gd_variant_type_setup_dictionary(uintptr(p0[0]), uint32(p1), uintptr(p2[0]), uint64(p3[0]), uint64(p3[1]), uint64(p3[2]), uint32(p4), uintptr(p5[0]), uint64(p6[0]), uint64(p6[1]), uint64(p6[2]))
		return
	}
	gdextension.Host.Builtin.Types.FetchConstant = func(p0 gdextension.VariantType, p1 gdextension.StringName, p2 gdextension.CallReturns[gdextension.Variant]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeVariant)
		gd_variant_type_fetch_constant(uint32(p0), uintptr(p1[0]), uintptr(mem2))
		gdmemory.LoadResult(gdextension.SizeVariant, p2, mem2)
		return
	}
	gdextension.Host.Builtin.Types.Constructor = func(p0 gdextension.VariantType, p1 int) (result gdextension.FunctionID) {
		result = gdextension.FunctionID(gd_variant_type_unsafe_constructor(uint32(p0), int32(p1)))
		return
	}
	gdextension.Host.Builtin.Types.Evaluator = func(p0 gdextension.VariantOperator, p1 gdextension.VariantType, p2 gdextension.VariantType) (result gdextension.FunctionID) {
		result = gdextension.FunctionID(gd_variant_type_evaluator(uint32(p0), uint32(p1), uint32(p2)))
		return
	}
	gdextension.Host.Builtin.Types.Setter = func(p0 gdextension.VariantType, p1 gdextension.StringName) (result gdextension.FunctionID) {
		result = gdextension.FunctionID(gd_variant_type_setter(uint32(p0), uintptr(p1[0])))
		return
	}
	gdextension.Host.Builtin.Types.Getter = func(p0 gdextension.VariantType, p1 gdextension.StringName) (result gdextension.FunctionID) {
		result = gdextension.FunctionID(gd_variant_type_getter(uint32(p0), uintptr(p1[0])))
		return
	}
	gdextension.Host.Builtin.Types.HasProperty = func(p0 gdextension.VariantType, p1 gdextension.StringName) (result bool) {
		result = bool(gd_variant_type_has_property(uint32(p0), uintptr(p1[0])))
		return
	}
	gdextension.Host.Builtin.Types.Method = func(p0 gdextension.VariantType, p1 gdextension.StringName, p2 int64) (result gdextension.MethodForBuiltinType) {
		result = gdextension.MethodForBuiltinType(gd_variant_type_builtin_method(uint32(p0), uintptr(p1[0]), int64(p2)))
		return
	}
	gdextension.Host.Builtin.Types.Unsafe.Call = func(p0 gdextension.CallMutates[interface{}], p1 gdextension.MethodForBuiltinType, p2 gdextension.CallReturns[interface{}], shape gdextension.Shape, p4 gdextension.CallAccepts[interface{}]) {
		mem0 := gdmemory.CopyReceiver(shape, p0)
		mem2 := gdmemory.MakeResult(shape)
		mem4 := gdmemory.CopyArguments(shape, p4)
		gd_variant_type_unsafe_call(uintptr(mem0), uintptr(p1), uintptr(mem2), uint64(shape), uintptr(mem4))
		gdmemory.LoadResult(shape>>4, p0, mem0)
		gdmemory.LoadResult(shape, p2, mem2)
		return
	}
	gdextension.Host.Builtin.Types.Unsafe.Make = func(p0 gdextension.FunctionID, p1 gdextension.CallReturns[interface{}], shape gdextension.Shape, p3 gdextension.CallAccepts[interface{}]) {
		mem1 := gdmemory.MakeResult(shape)
		mem3 := gdmemory.CopyArguments(shape, p3)
		gd_variant_type_unsafe_make(uintptr(p0), uintptr(mem1), uint64(shape), uintptr(mem3))
		gdmemory.LoadResult(shape, p1, mem1)
		return
	}
	gdextension.Host.Builtin.Types.Unsafe.Free = func(p0 gdextension.VariantType, shape gdextension.Shape, p2 gdextension.CallAccepts[interface{}]) {
		mem2 := gdmemory.CopyArguments(shape, p2)
		gd_variant_type_unsafe_free(uint32(p0), uint64(shape), uintptr(mem2))
		return
	}
	gdextension.Host.Callables.Create = func(p0 gdextension.CallableID, p1 gdextension.ObjectID, p2 gdextension.CallReturns[gdextension.Callable]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeCallable)
		gd_callable_create(uintptr(p0), uint64(p1), uintptr(mem2))
		gdmemory.LoadResult(gdextension.SizeCallable, p2, mem2)
		return
	}
	gdextension.Host.Callables.Lookup = func(p0 gdextension.Callable) (result gdextension.CallableID) {
		result = gdextension.CallableID(gd_callable_lookup(uint64(p0[0]), uint64(p0[1])))
		return
	}
	gdextension.Host.ClassDB.FileAccess.Write = func(p0 gdextension.Object, p1 []byte) {
		buf1 := gdmemory.CopyBufferToEngine(p1)
		gd_classdb_FileAccess_write(uintptr(p0), uintptr(buf1), int32(len(p1)))
		gdmemory.CopyBufferToGo(buf1, p1)
		return
	}
	gdextension.Host.ClassDB.FileAccess.Read = func(p0 gdextension.Object, p1 []byte) (result int) {
		buf1 := gdmemory.CopyBufferToEngine(p1)
		result = int(gd_classdb_FileAccess_read(uintptr(p0), uintptr(buf1), int32(len(p1))))
		gdmemory.CopyBufferToGo(buf1, p1)
		return
	}
	gdextension.Host.ClassDB.Image.Unsafe = func(p0 gdextension.Object) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_classdb_Image_unsafe(uintptr(p0)))
		return
	}
	gdextension.Host.ClassDB.Image.Access = func(p0 gdextension.Object, p1 int) (result uint8) {
		result = uint8(gd_classdb_Image_access(uintptr(p0), int32(p1)))
		return
	}
	gdextension.Host.ClassDB.MethodList.Make = func(p0 int) (result gdextension.MethodList) {
		result = gdextension.MethodList(gd_method_list_make(int32(p0)))
		return
	}
	gdextension.Host.ClassDB.MethodList.Push = func(p0 gdextension.MethodList, p1 gdextension.StringName, p2 gdextension.FunctionID, p3 gdextension.MethodFlags, p4 gdextension.PropertyList, p5 gdextension.PropertyList, p6 int, p7 gdextension.CallAccepts[gdextension.Variant]) {
		mem7 := gdmemory.CopyVariants(p7, p6)
		gd_method_list_push(uintptr(p0), uintptr(p1[0]), uintptr(p2), uint32(p3), uintptr(p4), uintptr(p5), int32(p6), uintptr(mem7))
		return
	}
	gdextension.Host.ClassDB.MethodList.Free = func(p0 gdextension.MethodList) {
		gd_method_list_free(uintptr(p0))
		return
	}
	gdextension.Host.ClassDB.PropertyList.Make = func(p0 int) (result gdextension.PropertyList) {
		result = gdextension.PropertyList(gd_property_list_make(int32(p0)))
		return
	}
	gdextension.Host.ClassDB.PropertyList.Push = func(p0 gdextension.PropertyList, p1 gdextension.VariantType, p2 gdextension.StringName, p3 gdextension.StringName, p4 uint32, p5 gdextension.String, p6 uint32, p7 gdextension.ArgumentMetadata) {
		gd_property_list_push(uintptr(p0), uint32(p1), uintptr(p2[0]), uintptr(p3[0]), uint32(p4), uintptr(p5[0]), uint32(p6), uint32(p7))
		return
	}
	gdextension.Host.ClassDB.PropertyList.Free = func(p0 gdextension.PropertyList) {
		gd_property_list_free(uintptr(p0))
		return
	}
	gdextension.Host.ClassDB.PropertyList.Info.Type = func(p0 gdextension.PropertyList) (result gdextension.VariantType) {
		result = gdextension.VariantType(gd_property_info_type(uintptr(p0)))
		return
	}
	gdextension.Host.ClassDB.PropertyList.Info.Name = func(p0 gdextension.PropertyList) (result gdextension.StringName) {
		result = gdextension.StringName{gdextension.Pointer(gd_property_info_name(uintptr(p0)))}
		return
	}
	gdextension.Host.ClassDB.PropertyList.Info.ClassName = func(p0 gdextension.PropertyList) (result gdextension.StringName) {
		result = gdextension.StringName{gdextension.Pointer(gd_property_info_class_name(uintptr(p0)))}
		return
	}
	gdextension.Host.ClassDB.PropertyList.Info.Hint = func(p0 gdextension.PropertyList) (result uint32) {
		result = uint32(gd_property_info_hint(uintptr(p0)))
		return
	}
	gdextension.Host.ClassDB.PropertyList.Info.HinString = func(p0 gdextension.PropertyList) (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_property_info_hint_string(uintptr(p0)))}
		return
	}
	gdextension.Host.ClassDB.PropertyList.Info.Usage = func(p0 gdextension.PropertyList) (result uint32) {
		result = uint32(gd_property_info_usage(uintptr(p0)))
		return
	}
	gdextension.Host.ClassDB.Register.Class = func(p0 gdextension.StringName, p1 gdextension.StringName, p2 gdextension.ExtensionClassID, p3 bool, p4 bool, p5 bool, p6 bool, p7 gdextension.String) {
		gd_classdb_register(uintptr(p0[0]), uintptr(p1[0]), uintptr(p2), bool(p3), bool(p4), bool(p5), bool(p6), uintptr(p7[0]))
		return
	}
	gdextension.Host.ClassDB.Register.Methods = func(p0 gdextension.StringName, p1 gdextension.MethodList) {
		gd_classdb_register_methods(uintptr(p0[0]), uintptr(p1))
		return
	}
	gdextension.Host.ClassDB.Register.Constant = func(p0 gdextension.StringName, p1 gdextension.StringName, p2 gdextension.StringName, p3 int64, p4 bool) {
		gd_classdb_register_constant(uintptr(p0[0]), uintptr(p1[0]), uintptr(p2[0]), int64(p3), bool(p4))
		return
	}
	gdextension.Host.ClassDB.Register.Property = func(p0 gdextension.StringName, p1 gdextension.PropertyList, p2 gdextension.StringName, p3 gdextension.StringName) {
		gd_classdb_register_property(uintptr(p0[0]), uintptr(p1), uintptr(p2[0]), uintptr(p3[0]))
		return
	}
	gdextension.Host.ClassDB.Register.PropertyIndexed = func(p0 gdextension.StringName, p1 gdextension.PropertyList, p2 gdextension.StringName, p3 gdextension.StringName, p4 int) {
		gd_classdb_register_property_indexed(uintptr(p0[0]), uintptr(p1), uintptr(p2[0]), uintptr(p3[0]), int32(p4))
		return
	}
	gdextension.Host.ClassDB.Register.PropertyGroup = func(p0 gdextension.StringName, p1 gdextension.String, p2 gdextension.String) {
		gd_classdb_register_property_group(uintptr(p0[0]), uintptr(p1[0]), uintptr(p2[0]))
		return
	}
	gdextension.Host.ClassDB.Register.PropertySubgroup = func(p0 gdextension.StringName, p1 gdextension.String, p2 gdextension.String) {
		gd_classdb_register_property_sub_group(uintptr(p0[0]), uintptr(p1[0]), uintptr(p2[0]))
		return
	}
	gdextension.Host.ClassDB.Register.Signal = func(p0 gdextension.StringName, p1 gdextension.StringName, p2 gdextension.PropertyList) {
		gd_classdb_register_signal(uintptr(p0[0]), uintptr(p1[0]), uintptr(p2))
		return
	}
	gdextension.Host.ClassDB.Register.Removal = func(p0 gdextension.StringName) {
		gd_classdb_register_removal(uintptr(p0[0]))
		return
	}
	gdextension.Host.ClassDB.WorkerThreadPool.AddTask = func(p0 gdextension.Object, p1 gdextension.TaskID, p2 bool, p3 gdextension.String) {
		gd_classdb_WorkerThreadPool_add_task(uintptr(p0), uintptr(p1), bool(p2), uintptr(p3[0]))
		return
	}
	gdextension.Host.ClassDB.WorkerThreadPool.AddGroupTask = func(p0 gdextension.Object, p1 gdextension.TaskID, p2 int32, p3 int32, p4 bool, p5 gdextension.String) {
		gd_classdb_WorkerThreadPool_add_group_task(uintptr(p0), uintptr(p1), int32(p2), int32(p3), bool(p4), uintptr(p5[0]))
		return
	}
	gdextension.Host.ClassDB.XMLParser.Load = func(p0 gdextension.Object, p1 []byte) (result int) {
		buf1 := gdmemory.CopyBufferToEngine(p1)
		result = int(gd_classdb_XMLParser_load(uintptr(p0), uintptr(buf1), int32(len(p1))))
		gdmemory.CopyBufferToGo(buf1, p1)
		return
	}
	gdextension.Host.Dictionaries.Get = func(p0 gdextension.Dictionary, p1 gdextension.Variant, p2 gdextension.CallReturns[gdextension.Variant]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeVariant)
		gd_packed_dictionary_access(uintptr(p0[0]), uint64(p1[0]), uint64(p1[1]), uint64(p1[2]), uintptr(mem2))
		gdmemory.LoadResult(gdextension.SizeVariant, p2, mem2)
		return
	}
	gdextension.Host.Dictionaries.Set = func(p0 gdextension.Dictionary, p1 gdextension.Variant, p2 gdextension.Variant) {
		gd_packed_dictionary_modify(uintptr(p0[0]), uint64(p1[0]), uint64(p1[1]), uint64(p1[2]), uint64(p2[0]), uint64(p2[1]), uint64(p2[2]))
		return
	}
	gdextension.Host.Editor.AddDocumentation = func(p0 string) {
		gd_editor_add_documentation(string(p0), int32(len(p0)))
		return
	}
	gdextension.Host.Editor.AddPlugin = func(p0 gdextension.StringName) {
		gd_editor_add_plugin(uintptr(p0[0]))
		return
	}
	gdextension.Host.Editor.EndPlugin = func(p0 gdextension.StringName) {
		gd_editor_end_plugin(uintptr(p0[0]))
		return
	}
	gdextension.Host.Iterators.Make = func(p0 gdextension.Variant, p1 gdextension.CallReturns[gdextension.Iterator], p2 gdextension.CallReturns[gdextension.CallError]) {
		mem1 := gdmemory.MakeResult(gdextension.SizeVariant)
		mem2 := gdmemory.MakeResult(gdextension.SizeVariant)
		gd_iterator_make(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), uintptr(mem1), uintptr(mem2))
		gdmemory.LoadResult(gdextension.SizeVariant, p1, mem1)
		gdmemory.LoadResult(gdextension.SizeVector3, p2, mem2)
		return
	}
	gdextension.Host.Iterators.Next = func(p0 gdextension.Variant, p1 gdextension.CallMutates[gdextension.Iterator], p2 gdextension.CallReturns[gdextension.CallError]) (result bool) {
		mem1 := gdmemory.CopyReceiver(gdextension.SizeVariant, p1)
		mem2 := gdmemory.MakeResult(gdextension.SizeVariant)
		result = bool(gd_iterator_next(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), uintptr(mem1), uintptr(mem2)))
		gdmemory.LoadResult(gdextension.SizeVariant, p1, mem1)
		gdmemory.LoadResult(gdextension.SizeVector3, p2, mem2)
		return
	}
	gdextension.Host.Iterators.Load = func(p0 gdextension.Variant, p1 gdextension.Iterator, p2 gdextension.CallReturns[gdextension.Variant], p3 gdextension.CallReturns[gdextension.CallError]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeVariant)
		mem3 := gdmemory.MakeResult(gdextension.SizeVariant)
		gd_iterator_load(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), uint64(p1[0]), uint64(p1[1]), uint64(p1[2]), uintptr(mem2), uintptr(mem3))
		gdmemory.LoadResult(gdextension.SizeVariant, p2, mem2)
		gdmemory.LoadResult(gdextension.SizeVector3, p3, mem3)
		return
	}
	gdextension.Host.Library.Location = func() (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_library_location())}
		return
	}
	gdextension.Host.Log.Error = func(p0 string, p1 string, p2 string, p3 string, p4 int32, p5 bool) {
		gd_log_error(string(p0), int32(len(p0)), string(p1), int32(len(p1)), string(p2), int32(len(p2)), string(p3), int32(len(p3)), int32(p4), bool(p5))
		return
	}
	gdextension.Host.Log.Warning = func(p0 string, p1 string, p2 string, p3 string, p4 int32, p5 bool) {
		gd_log_warning(string(p0), int32(len(p0)), string(p1), int32(len(p1)), string(p2), int32(len(p2)), string(p3), int32(len(p3)), int32(p4), bool(p5))
		return
	}
	gdextension.Host.Memory.Malloc = func(p0 int) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_memory_malloc(int32(p0)))
		return
	}
	gdextension.Host.Memory.Sizeof = func(p0 gdextension.StringName) (result int) {
		result = int(gd_memory_sizeof(uintptr(p0[0])))
		return
	}
	gdextension.Host.Memory.Resize = func(p0 gdextension.Pointer, p1 int) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_memory_resize(uintptr(p0), int32(p1)))
		return
	}
	gdextension.Host.Memory.Clear = func(p0 gdextension.Pointer, p1 int) {
		gd_memory_clear(uintptr(p0), int32(p1))
		return
	}
	gdextension.Host.Memory.Free = func(p0 gdextension.Pointer) {
		gd_memory_free(uintptr(p0))
		return
	}
	gdextension.Host.Memory.Edit.Byte = func(p0 gdextension.Pointer, p1 uint8) {
		gd_memory_edit_byte(uintptr(p0), uint32(p1))
		return
	}
	gdextension.Host.Memory.Edit.Uint16 = func(p0 gdextension.Pointer, p1 uint16) {
		gd_memory_edit_u16(uintptr(p0), uint32(p1))
		return
	}
	gdextension.Host.Memory.Edit.Uint32 = func(p0 gdextension.Pointer, p1 uint32) {
		gd_memory_edit_u32(uintptr(p0), uint32(p1))
		return
	}
	gdextension.Host.Memory.Edit.Uint64 = func(p0 gdextension.Pointer, p1 uint64) {
		gd_memory_edit_u64(uintptr(p0), uint64(p1))
		return
	}
	gdextension.Host.Memory.Edit.Bits128 = func(p0 gdextension.Pointer, p1 [2]uint64) {
		gd_memory_edit_128(uintptr(p0), uint64(p1[0]), uint64(p1[1]))
		return
	}
	gdextension.Host.Memory.Edit.Bits256 = func(p0 gdextension.Pointer, p1 [4]uint64) {
		gd_memory_edit_256(uintptr(p0), uint64(p1[0]), uint64(p1[1]), uint64(p1[2]), uint64(p1[3]))
		return
	}
	gdextension.Host.Memory.Edit.Bits512 = func(p0 gdextension.Pointer, p1 [8]uint64) {
		gd_memory_edit_512(uintptr(p0), uint64(p1[0]), uint64(p1[1]), uint64(p1[2]), uint64(p1[3]), uint64(p1[4]), uint64(p1[5]), uint64(p1[6]), uint64(p1[7]))
		return
	}
	gdextension.Host.Memory.Load.Byte = func(p0 gdextension.Pointer) (result uint8) {
		result = uint8(gd_memory_load_byte(uintptr(p0)))
		return
	}
	gdextension.Host.Memory.Load.Uint16 = func(p0 gdextension.Pointer) (result uint16) {
		result = uint16(gd_memory_load_u16(uintptr(p0)))
		return
	}
	gdextension.Host.Memory.Load.Uint32 = func(p0 gdextension.Pointer) (result uint32) {
		result = uint32(gd_memory_load_u32(uintptr(p0)))
		return
	}
	gdextension.Host.Objects.Make = func(p0 gdextension.StringName) (result gdextension.Object) {
		result = gdextension.Object(gd_object_make(uintptr(p0[0])))
		return
	}
	gdextension.Host.Objects.Call = func(p0 gdextension.Object, p1 gdextension.MethodForClass, p2 gdextension.CallReturns[gdextension.Variant], p3 int, p4 gdextension.CallAccepts[gdextension.Variant], p5 gdextension.CallReturns[gdextension.CallError]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeVariant)
		mem4 := gdmemory.CopyVariants(p4, p3)
		mem5 := gdmemory.MakeResult(gdextension.SizeVariant)
		gd_object_call(uintptr(p0), uintptr(p1), uintptr(mem2), int32(p3), uintptr(mem4), uintptr(mem5))
		gdmemory.LoadResult(gdextension.SizeVariant, p2, mem2)
		gdmemory.LoadResult(gdextension.SizeVector3, p5, mem5)
		return
	}
	gdextension.Host.Objects.Name = func(p0 gdextension.Object) (result gdextension.StringName) {
		result = gdextension.StringName{gdextension.Pointer(gd_object_name(uintptr(p0)))}
		return
	}
	gdextension.Host.Objects.Type = func(p0 gdextension.StringName) (result gdextension.ObjectType) {
		result = gdextension.ObjectType(gd_object_type(uintptr(p0[0])))
		return
	}
	gdextension.Host.Objects.Cast = func(p0 gdextension.Object, p1 gdextension.ObjectType) (result gdextension.Object) {
		result = gdextension.Object(gd_object_cast(uintptr(p0), uintptr(p1)))
		return
	}
	gdextension.Host.Objects.Lookup = func(p0 gdextension.ObjectID) (result gdextension.Object) {
		result = gdextension.Object(gd_object_lookup(uint64(p0)))
		return
	}
	gdextension.Host.Objects.Global = func(p0 gdextension.StringName) (result gdextension.Object) {
		result = gdextension.Object(gd_object_global(uintptr(p0[0])))
		return
	}
	gdextension.Host.Objects.Extension.Setup = func(p0 gdextension.Object, p1 gdextension.StringName, p2 gdextension.ExtensionInstanceID) {
		gd_object_extension_setup(uintptr(p0), uintptr(p1[0]), uintptr(p2))
		return
	}
	gdextension.Host.Objects.Extension.Fetch = func(p0 gdextension.Object) (result gdextension.ExtensionClassID) {
		result = gdextension.ExtensionClassID(gd_object_extension_fetch(uintptr(p0)))
		return
	}
	gdextension.Host.Objects.Extension.Close = func(p0 gdextension.Object) {
		gd_object_extension_close(uintptr(p0))
		return
	}
	gdextension.Host.Objects.ID.Get = func(p0 gdextension.Object, p1 gdextension.CallReturns[gdextension.ObjectID]) {
		mem1 := gdmemory.MakeResult(gdextension.SizeInt)
		gd_object_id(uintptr(p0), uintptr(mem1))
		gdmemory.LoadResult(gdextension.SizeInt, p1, mem1)
		return
	}
	gdextension.Host.Objects.ID.InsideVariant = func(p0 gdextension.Variant, p1 gdextension.CallReturns[gdextension.ObjectID]) {
		mem1 := gdmemory.MakeResult(gdextension.SizeInt)
		gd_object_id_inside_variant(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), uintptr(mem1))
		gdmemory.LoadResult(gdextension.SizeInt, p1, mem1)
		return
	}
	gdextension.Host.Objects.Method.Lookup = func(p0 gdextension.StringName, p1 gdextension.StringName, p2 int64) (result gdextension.MethodForClass) {
		result = gdextension.MethodForClass(gd_object_method_lookup(uintptr(p0[0]), uintptr(p1[0]), int64(p2)))
		return
	}
	gdextension.Host.Objects.Script.Make = func(p0 gdextension.ExtensionInstanceID) (result gdextension.ScriptInstance) {
		result = gdextension.ScriptInstance(gd_object_script_make(uintptr(p0)))
		return
	}
	gdextension.Host.Objects.Script.Call = func(p0 gdextension.Object, p1 gdextension.StringName, p2 gdextension.CallReturns[gdextension.Variant], p3 int, p4 gdextension.CallAccepts[gdextension.Variant], p5 gdextension.CallReturns[gdextension.CallError]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeVariant)
		mem4 := gdmemory.CopyVariants(p4, p3)
		mem5 := gdmemory.MakeResult(gdextension.SizeVariant)
		gd_object_script_call(uintptr(p0), uintptr(p1[0]), uintptr(mem2), int32(p3), uintptr(mem4), uintptr(mem5))
		gdmemory.LoadResult(gdextension.SizeVariant, p2, mem2)
		gdmemory.LoadResult(gdextension.SizeVector3, p5, mem5)
		return
	}
	gdextension.Host.Objects.Script.Setup = func(p0 gdextension.Object, p1 gdextension.ScriptInstance) {
		gd_object_script_setup(uintptr(p0), uintptr(p1))
		return
	}
	gdextension.Host.Objects.Script.Fetch = func(p0 gdextension.Object, p1 gdextension.Object) (result gdextension.ScriptInstance) {
		result = gdextension.ScriptInstance(gd_object_script_fetch(uintptr(p0), uintptr(p1)))
		return
	}
	gdextension.Host.Objects.Script.DefinesMethod = func(p0 gdextension.Object, p1 gdextension.StringName) (result bool) {
		result = bool(gd_object_script_defines_method(uintptr(p0), uintptr(p1[0])))
		return
	}
	gdextension.Host.Objects.Script.AddPropertyState = func(p0 gdextension.FunctionID, p1 gdextension.Pointer, p2 gdextension.StringName, p3 gdextension.Variant) {
		gd_object_script_property_state_add(uintptr(p0), uintptr(p1), uintptr(p2[0]), uint64(p3[0]), uint64(p3[1]), uint64(p3[2]))
		return
	}
	gdextension.Host.Objects.Script.Placeholder.Create = func(p0 gdextension.Object, p1 gdextension.Object, p2 gdextension.Object) (result gdextension.ScriptInstance) {
		result = gdextension.ScriptInstance(gd_object_script_placeholder_create(uintptr(p0), uintptr(p1), uintptr(p2)))
		return
	}
	gdextension.Host.Objects.Script.Placeholder.Update = func(p0 gdextension.ScriptInstance, p1 gdextension.Array, p2 gdextension.Dictionary) {
		gd_object_script_placeholder_update(uintptr(p0), uintptr(p1[0]), uintptr(p2[0]))
		return
	}
	gdextension.Host.Objects.Unsafe.Call = func(p0 gdextension.Object, p1 gdextension.MethodForClass, p2 gdextension.CallReturns[interface{}], shape gdextension.Shape, p4 gdextension.CallAccepts[interface{}]) {
		mem2 := gdmemory.MakeResult(shape)
		mem4 := gdmemory.CopyArguments(shape, p4)
		gd_object_unsafe_call(uintptr(p0), uintptr(p1), uintptr(mem2), uint64(shape), uintptr(mem4))
		gdmemory.LoadResult(shape, p2, mem2)
		return
	}
	gdextension.Host.Objects.Unsafe.Free = func(p0 gdextension.Object) {
		gd_object_unsafe_free(uintptr(p0))
		return
	}
	gdextension.Host.Packed.Bytes.Unsafe = func(p0 gdextension.PackedArray[uint8]) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_packed_byte_array_unsafe(uint64(p0[0]), uint64(p0[1])))
		return
	}
	gdextension.Host.Packed.Bytes.Access = func(p0 gdextension.PackedArray[uint8], p1 int) (result uint8) {
		result = uint8(gd_packed_byte_array_access(uint64(p0[0]), uint64(p0[1]), int32(p1)))
		return
	}
	gdextension.Host.Packed.Colors.Unsafe = func(p0 gdextension.PackedArray[struct {
		R float32
		G float32
		B float32
		A float32
	}]) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_packed_color_array_unsafe(uint64(p0[0]), uint64(p0[1])))
		return
	}
	gdextension.Host.Packed.Colors.Access = func(p0 gdextension.PackedArray[struct {
		R float32
		G float32
		B float32
		A float32
	}], p1 int, p2 gdextension.CallReturns[struct {
		R float32
		G float32
		B float32
		A float32
	}]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeColor)
		gd_packed_color_array_access(uint64(p0[0]), uint64(p0[1]), int32(p1), uintptr(mem2))
		gdmemory.LoadResult(gdextension.SizeColor, p2, mem2)
		return
	}
	gdextension.Host.Packed.Float32s.Unsafe = func(p0 gdextension.PackedArray[float32]) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_packed_float32_array_unsafe(uint64(p0[0]), uint64(p0[1])))
		return
	}
	gdextension.Host.Packed.Float32s.Access = func(p0 gdextension.PackedArray[float32], p1 int) (result float32) {
		result = float32(gd_packed_float32_array_access(uint64(p0[0]), uint64(p0[1]), int32(p1)))
		return
	}
	gdextension.Host.Packed.Float64s.Unsafe = func(p0 gdextension.PackedArray[float64]) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_packed_float64_array_unsafe(uint64(p0[0]), uint64(p0[1])))
		return
	}
	gdextension.Host.Packed.Float64s.Access = func(p0 gdextension.PackedArray[float64], p1 int) (result float64) {
		result = float64(gd_packed_float64_array_access(uint64(p0[0]), uint64(p0[1]), int32(p1)))
		return
	}
	gdextension.Host.Packed.Int32s.Unsafe = func(p0 gdextension.PackedArray[int32]) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_packed_int32_array_unsafe(uint64(p0[0]), uint64(p0[1])))
		return
	}
	gdextension.Host.Packed.Int32s.Access = func(p0 gdextension.PackedArray[int32], p1 int) (result int32) {
		result = int32(gd_packed_int32_array_access(uint64(p0[0]), uint64(p0[1]), int32(p1)))
		return
	}
	gdextension.Host.Packed.Int64s.Unsafe = func(p0 gdextension.PackedArray[int64]) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_packed_int64_array_unsafe(uint64(p0[0]), uint64(p0[1])))
		return
	}
	gdextension.Host.Packed.Int64s.Access = func(p0 gdextension.PackedArray[int64], p1 int, p2 gdextension.CallReturns[int64]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeInt)
		gd_packed_int64_array_access(uint64(p0[0]), uint64(p0[1]), int32(p1), uintptr(mem2))
		gdmemory.LoadResult(gdextension.SizeInt, p2, mem2)
		return
	}
	gdextension.Host.Packed.Strings.Unsafe = func(p0 gdextension.PackedArray[gdextension.String]) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_packed_string_array_unsafe(uint64(p0[0]), uint64(p0[1])))
		return
	}
	gdextension.Host.Packed.Strings.Access = func(p0 gdextension.PackedArray[gdextension.String], p1 int) (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_packed_string_array_access(uint64(p0[0]), uint64(p0[1]), int32(p1)))}
		return
	}
	gdextension.Host.Packed.Vector2s.Unsafe = func(p0 gdextension.PackedArray[struct {
		X float32
		Y float32
	}]) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_packed_vector2_array_unsafe(uint64(p0[0]), uint64(p0[1])))
		return
	}
	gdextension.Host.Packed.Vector2s.Access = func(p0 gdextension.PackedArray[struct {
		X float32
		Y float32
	}], p1 int, p2 gdextension.CallReturns[struct {
		X float32
		Y float32
	}]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeVector2)
		gd_packed_vector2_array_access(uint64(p0[0]), uint64(p0[1]), int32(p1), uintptr(mem2))
		gdmemory.LoadResult(gdextension.SizeVector2, p2, mem2)
		return
	}
	gdextension.Host.Packed.Vector3s.Unsafe = func(p0 gdextension.PackedArray[struct {
		X float32
		Y float32
		Z float32
	}]) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_packed_vector3_array_unsafe(uint64(p0[0]), uint64(p0[1])))
		return
	}
	gdextension.Host.Packed.Vector3s.Access = func(p0 gdextension.PackedArray[struct {
		X float32
		Y float32
		Z float32
	}], p1 int, p2 gdextension.CallReturns[struct {
		X float32
		Y float32
		Z float32
	}]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeVariant)
		gd_packed_vector3_array_access(uint64(p0[0]), uint64(p0[1]), int32(p1), uintptr(mem2))
		gdmemory.LoadResult(gdextension.SizeVector3, p2, mem2)
		return
	}
	gdextension.Host.Packed.Vector4s.Unsafe = func(p0 gdextension.PackedArray[struct {
		X float32
		Y float32
		Z float32
		W float32
	}]) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_packed_vector4_array_unsafe(uint64(p0[0]), uint64(p0[1])))
		return
	}
	gdextension.Host.Packed.Vector4s.Access = func(p0 gdextension.PackedArray[struct {
		X float32
		Y float32
		Z float32
		W float32
	}], p1 int, p2 gdextension.CallReturns[struct {
		X float32
		Y float32
		Z float32
		W float32
	}]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeVector4)
		gd_packed_vector4_array_access(uint64(p0[0]), uint64(p0[1]), int32(p1), uintptr(mem2))
		gdmemory.LoadResult(gdextension.SizeVector4, p2, mem2)
		return
	}
	gdextension.Host.RefCounted.Get = func(p0 gdextension.RefCounted) (result gdextension.Object) {
		result = gdextension.Object(gd_ref_get_object(uintptr(p0)))
		return
	}
	gdextension.Host.RefCounted.Set = func(p0 gdextension.RefCounted, p1 gdextension.Object) {
		gd_ref_set_object(uintptr(p0), uintptr(p1))
		return
	}
	gdextension.Host.Strings.Access = func(p0 gdextension.String, p1 int) (result int32) {
		result = int32(gd_string_access(uintptr(p0[0]), int32(p1)))
		return
	}
	gdextension.Host.Strings.Resize = func(p0 gdextension.String, p1 int) (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_string_resize(uintptr(p0[0]), int32(p1)))}
		return
	}
	gdextension.Host.Strings.Unsafe = func(p0 gdextension.String) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_string_unsafe(uintptr(p0[0])))
		return
	}
	gdextension.Host.Strings.Append.String = func(p0 gdextension.String, p1 gdextension.String) (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_string_append(uintptr(p0[0]), uintptr(p1[0])))}
		return
	}
	gdextension.Host.Strings.Append.Rune = func(p0 gdextension.String, p1 int32) (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_string_append_rune(uintptr(p0[0]), int32(p1)))}
		return
	}
	gdextension.Host.Strings.Decode.Latin1 = func(p0 string) (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_string_decode_latin1(string(p0), int32(len(p0))))}
		return
	}
	gdextension.Host.Strings.Decode.UTF8 = func(p0 string) (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_string_decode_utf8(string(p0), int32(len(p0))))}
		return
	}
	gdextension.Host.Strings.Decode.UTF16 = func(p0 string, p1 bool) (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_string_decode_utf16(string(p0), int32(len(p0)), bool(p1)))}
		return
	}
	gdextension.Host.Strings.Decode.UTF32 = func(p0 string) (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_string_decode_utf32(string(p0), int32(len(p0))))}
		return
	}
	gdextension.Host.Strings.Decode.Wide = func(p0 string) (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_string_decode_wide(string(p0), int32(len(p0))))}
		return
	}
	gdextension.Host.Strings.Encode.Latin1 = func(p0 gdextension.String, p1 []byte) (result int) {
		buf1 := gdmemory.CopyBufferToEngine(p1)
		result = int(gd_string_encode_latin1(uintptr(p0[0]), uintptr(buf1), int32(len(p1))))
		gdmemory.CopyBufferToGo(buf1, p1)
		return
	}
	gdextension.Host.Strings.Encode.UTF8 = func(p0 gdextension.String, p1 []byte) (result int) {
		buf1 := gdmemory.CopyBufferToEngine(p1)
		result = int(gd_string_encode_utf8(uintptr(p0[0]), uintptr(buf1), int32(len(p1))))
		gdmemory.CopyBufferToGo(buf1, p1)
		return
	}
	gdextension.Host.Strings.Encode.UTF16 = func(p0 gdextension.String, p1 []byte) (result int) {
		buf1 := gdmemory.CopyBufferToEngine(p1)
		result = int(gd_string_encode_utf16(uintptr(p0[0]), uintptr(buf1), int32(len(p1))))
		gdmemory.CopyBufferToGo(buf1, p1)
		return
	}
	gdextension.Host.Strings.Encode.UTF32 = func(p0 gdextension.String, p1 []byte) (result int) {
		buf1 := gdmemory.CopyBufferToEngine(p1)
		result = int(gd_string_encode_utf32(uintptr(p0[0]), uintptr(buf1), int32(len(p1))))
		gdmemory.CopyBufferToGo(buf1, p1)
		return
	}
	gdextension.Host.Strings.Encode.Wide = func(p0 gdextension.String, p1 []byte) (result int) {
		buf1 := gdmemory.CopyBufferToEngine(p1)
		result = int(gd_string_encode_wide(uintptr(p0[0]), uintptr(buf1), int32(len(p1))))
		gdmemory.CopyBufferToGo(buf1, p1)
		return
	}
	gdextension.Host.Strings.Intern.Latin1 = func(p0 string) (result gdextension.StringName) {
		result = gdextension.StringName{gdextension.Pointer(gd_string_intern_latin1(string(p0), int32(len(p0))))}
		return
	}
	gdextension.Host.Strings.Intern.UTF8 = func(p0 string) (result gdextension.StringName) {
		result = gdextension.StringName{gdextension.Pointer(gd_string_intern_utf8(string(p0), int32(len(p0))))}
		return
	}
	gdextension.Host.Variants.Zero = func(p0 gdextension.CallReturns[gdextension.Variant]) {
		mem0 := gdmemory.MakeResult(gdextension.SizeVariant)
		gd_variant_zero(uintptr(mem0))
		gdmemory.LoadResult(gdextension.SizeVariant, p0, mem0)
		return
	}
	gdextension.Host.Variants.Copy = func(p0 gdextension.Variant, p1 gdextension.CallReturns[gdextension.Variant]) {
		mem1 := gdmemory.MakeResult(gdextension.SizeVariant)
		gd_variant_copy(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), uintptr(mem1))
		gdmemory.LoadResult(gdextension.SizeVariant, p1, mem1)
		return
	}
	gdextension.Host.Variants.Call = func(p0 gdextension.Variant, p1 gdextension.StringName, p2 gdextension.CallReturns[gdextension.Variant], p3 int, p4 gdextension.CallAccepts[gdextension.Variant], p5 gdextension.CallReturns[gdextension.CallError]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeVariant)
		mem4 := gdmemory.CopyVariants(p4, p3)
		mem5 := gdmemory.MakeResult(gdextension.SizeVariant)
		gd_variant_call(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), uintptr(p1[0]), uintptr(mem2), int32(p3), uintptr(mem4), uintptr(mem5))
		gdmemory.LoadResult(gdextension.SizeVariant, p2, mem2)
		gdmemory.LoadResult(gdextension.SizeVector3, p5, mem5)
		return
	}
	gdextension.Host.Variants.Eval = func(p0 gdextension.VariantOperator, p1 gdextension.Variant, p2 gdextension.Variant, p3 gdextension.CallReturns[gdextension.Variant]) (result bool) {
		mem3 := gdmemory.MakeResult(gdextension.SizeVariant)
		result = bool(gd_variant_eval(uint32(p0), uint64(p1[0]), uint64(p1[1]), uint64(p1[2]), uint64(p2[0]), uint64(p2[1]), uint64(p2[2]), uintptr(mem3)))
		gdmemory.LoadResult(gdextension.SizeVariant, p3, mem3)
		return
	}
	gdextension.Host.Variants.Hash = func(p0 gdextension.Variant, p1 gdextension.CallReturns[int64]) {
		mem1 := gdmemory.MakeResult(gdextension.SizeInt)
		gd_variant_hash(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), uintptr(mem1))
		gdmemory.LoadResult(gdextension.SizeInt, p1, mem1)
		return
	}
	gdextension.Host.Variants.Bool = func(p0 gdextension.Variant) (result bool) {
		result = bool(gd_variant_bool(uint64(p0[0]), uint64(p0[1]), uint64(p0[2])))
		return
	}
	gdextension.Host.Variants.Text = func(p0 gdextension.Variant) (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_variant_text(uint64(p0[0]), uint64(p0[1]), uint64(p0[2])))}
		return
	}
	gdextension.Host.Variants.Type = func(p0 gdextension.Variant) (result gdextension.VariantType) {
		result = gdextension.VariantType(gd_variant_type(uint64(p0[0]), uint64(p0[1]), uint64(p0[2])))
		return
	}
	gdextension.Host.Variants.Deep.Copy = func(p0 gdextension.Variant, p1 gdextension.CallReturns[gdextension.Variant]) {
		mem1 := gdmemory.MakeResult(gdextension.SizeVariant)
		gd_variant_deep_copy(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), uintptr(mem1))
		gdmemory.LoadResult(gdextension.SizeVariant, p1, mem1)
		return
	}
	gdextension.Host.Variants.Deep.Hash = func(p0 gdextension.Variant, p1 int64, p2 gdextension.CallReturns[int64]) {
		mem2 := gdmemory.MakeResult(gdextension.SizeInt)
		gd_variant_deep_hash(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), int64(p1), uintptr(mem2))
		gdmemory.LoadResult(gdextension.SizeInt, p2, mem2)
		return
	}
	gdextension.Host.Variants.Get.Index = func(p0 gdextension.Variant, p1 gdextension.Variant, p2 gdextension.CallReturns[gdextension.Variant]) (result bool) {
		mem2 := gdmemory.MakeResult(gdextension.SizeVariant)
		result = bool(gd_variant_get_index(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), uint64(p1[0]), uint64(p1[1]), uint64(p1[2]), uintptr(mem2)))
		gdmemory.LoadResult(gdextension.SizeVariant, p2, mem2)
		return
	}
	gdextension.Host.Variants.Get.Array = func(p0 gdextension.Variant, p1 int, p2 gdextension.CallReturns[gdextension.Variant], p3 gdextension.CallReturns[gdextension.CallError]) (result bool) {
		mem2 := gdmemory.MakeResult(gdextension.SizeVariant)
		mem3 := gdmemory.MakeResult(gdextension.SizeVariant)
		result = bool(gd_variant_get_array(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), int32(p1), uintptr(mem2), uintptr(mem3)))
		gdmemory.LoadResult(gdextension.SizeVariant, p2, mem2)
		gdmemory.LoadResult(gdextension.SizeVector3, p3, mem3)
		return
	}
	gdextension.Host.Variants.Get.Field = func(p0 gdextension.Variant, p1 gdextension.StringName, p2 gdextension.CallReturns[gdextension.Variant]) (result bool) {
		mem2 := gdmemory.MakeResult(gdextension.SizeVariant)
		result = bool(gd_variant_get_field(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), uintptr(p1[0]), uintptr(mem2)))
		gdmemory.LoadResult(gdextension.SizeVariant, p2, mem2)
		return
	}
	gdextension.Host.Variants.Has.Index = func(p0 gdextension.Variant, p1 gdextension.Variant) (result bool) {
		result = bool(gd_variant_has_index(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), uint64(p1[0]), uint64(p1[1]), uint64(p1[2])))
		return
	}
	gdextension.Host.Variants.Has.Method = func(p0 gdextension.Variant, p1 gdextension.StringName) (result bool) {
		result = bool(gd_variant_has_method(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), uintptr(p1[0])))
		return
	}
	gdextension.Host.Variants.Set.Index = func(p0 gdextension.Variant, p1 gdextension.Variant, p2 gdextension.Variant) (result bool) {
		result = bool(gd_variant_set_index(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), uint64(p1[0]), uint64(p1[1]), uint64(p1[2]), uint64(p2[0]), uint64(p2[1]), uint64(p2[2])))
		return
	}
	gdextension.Host.Variants.Set.Array = func(p0 gdextension.Variant, p1 int, p2 gdextension.Variant, p3 gdextension.CallReturns[gdextension.CallError]) (result bool) {
		mem3 := gdmemory.MakeResult(gdextension.SizeVariant)
		result = bool(gd_variant_set_array(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), int32(p1), uint64(p2[0]), uint64(p2[1]), uint64(p2[2]), uintptr(mem3)))
		gdmemory.LoadResult(gdextension.SizeVector3, p3, mem3)
		return
	}
	gdextension.Host.Variants.Set.Field = func(p0 gdextension.Variant, p1 gdextension.StringName, p2 gdextension.Variant) (result bool) {
		result = bool(gd_variant_set_field(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]), uintptr(p1[0]), uint64(p2[0]), uint64(p2[1]), uint64(p2[2])))
		return
	}
	gdextension.Host.Variants.Unsafe.Call = func(p0 gdextension.FunctionID, p1 gdextension.CallReturns[interface{}], shape gdextension.Shape, p3 gdextension.CallAccepts[interface{}]) {
		mem1 := gdmemory.MakeResult(shape)
		mem3 := gdmemory.CopyArguments(shape, p3)
		gd_variant_unsafe_call(uintptr(p0), uintptr(mem1), uint64(shape), uintptr(mem3))
		gdmemory.LoadResult(shape, p1, mem1)
		return
	}
	gdextension.Host.Variants.Unsafe.Eval = func(p0 gdextension.FunctionID, p1 gdextension.CallReturns[interface{}], shape gdextension.Shape, p3 gdextension.CallAccepts[interface{}]) {
		mem1 := gdmemory.MakeResult(shape)
		mem3 := gdmemory.CopyArguments(shape, p3)
		gd_variant_unsafe_eval(uintptr(p0), uintptr(mem1), uint64(shape), uintptr(mem3))
		gdmemory.LoadResult(shape, p1, mem1)
		return
	}
	gdextension.Host.Variants.Unsafe.Free = func(p0 gdextension.Variant) {
		gd_variant_unsafe_free(uint64(p0[0]), uint64(p0[1]), uint64(p0[2]))
		return
	}
	gdextension.Host.Variants.Unsafe.MakeNative = func(p0 gdextension.VariantType, p1 gdextension.Variant, shape gdextension.Shape, p3 gdextension.CallReturns[interface{}]) {
		mem3 := gdmemory.MakeResult(shape)
		gd_variant_unsafe_make_native(uint32(p0), uint64(p1[0]), uint64(p1[1]), uint64(p1[2]), uint64(shape), uintptr(mem3))
		gdmemory.LoadResult(shape, p3, mem3)
		return
	}
	gdextension.Host.Variants.Unsafe.FromNative = func(p0 gdextension.VariantType, p1 gdextension.CallReturns[gdextension.Variant], shape gdextension.Shape, p3 gdextension.CallAccepts[interface{}]) {
		mem1 := gdmemory.MakeResult(gdextension.SizeVariant)
		mem3 := gdmemory.CopyArguments(shape, p3)
		gd_variant_unsafe_from_native(uint32(p0), uintptr(mem1), uint64(shape), uintptr(mem3))
		gdmemory.LoadResult(gdextension.SizeVariant, p1, mem1)
		return
	}
	gdextension.Host.Variants.Unsafe.InternalPointer = func(p0 gdextension.VariantType, p1 gdextension.Variant) (result gdextension.Pointer) {
		result = gdextension.Pointer(gd_variant_unsafe_internal_pointer(uint32(p0), uint64(p1[0]), uint64(p1[1]), uint64(p1[2])))
		return
	}
	gdextension.Host.Variants.Unsafe.Get.Field = func(p0 gdextension.FunctionID, p1 gdextension.CallReturns[interface{}], shape gdextension.Shape, p3 gdextension.CallAccepts[interface{}]) {
		mem1 := gdmemory.MakeResult(shape)
		mem3 := gdmemory.CopyArguments(shape, p3)
		gd_variant_unsafe_get_field(uintptr(p0), uintptr(mem1), uint64(shape), uintptr(mem3))
		gdmemory.LoadResult(shape, p1, mem1)
		return
	}
	gdextension.Host.Variants.Unsafe.Get.Array = func(p0 gdextension.VariantType, p1 int, p2 gdextension.CallReturns[interface{}], shape gdextension.Shape, p4 gdextension.CallAccepts[interface{}]) {
		mem2 := gdmemory.MakeResult(shape)
		mem4 := gdmemory.CopyArguments(shape, p4)
		gd_variant_unsafe_get_array(uint32(p0), int32(p1), uintptr(mem2), uint64(shape), uintptr(mem4))
		gdmemory.LoadResult(shape, p2, mem2)
		return
	}
	gdextension.Host.Variants.Unsafe.Get.Index = func(p0 gdextension.VariantType, p1 gdextension.CallReturns[interface{}], shape gdextension.Shape, p3 gdextension.CallAccepts[interface{}]) {
		mem1 := gdmemory.MakeResult(shape)
		mem3 := gdmemory.CopyArguments(shape, p3)
		gd_variant_unsafe_get_index(uint32(p0), uintptr(mem1), uint64(shape), uintptr(mem3))
		gdmemory.LoadResult(shape, p1, mem1)
		return
	}
	gdextension.Host.Variants.Unsafe.Set.Field = func(p0 gdextension.FunctionID, shape gdextension.Shape, p2 gdextension.CallAccepts[interface{}]) {
		mem2 := gdmemory.CopyArguments(shape, p2)
		gd_variant_unsafe_set_field(uintptr(p0), uint64(shape), uintptr(mem2))
		return
	}
	gdextension.Host.Variants.Unsafe.Set.Array = func(p0 gdextension.VariantType, p1 int, shape gdextension.Shape, p3 gdextension.CallAccepts[interface{}]) {
		mem3 := gdmemory.CopyArguments(shape, p3)
		gd_variant_unsafe_set_array(uint32(p0), int32(p1), uint64(shape), uintptr(mem3))
		return
	}
	gdextension.Host.Variants.Unsafe.Set.Index = func(p0 gdextension.VariantType, shape gdextension.Shape, p2 gdextension.CallAccepts[interface{}]) {
		mem2 := gdmemory.CopyArguments(shape, p2)
		gd_variant_unsafe_set_index(uint32(p0), uint64(shape), uintptr(mem2))
		return
	}
	gdextension.Host.Version.Major = func() (result uint32) {
		result = uint32(gd_version_major())
		return
	}
	gdextension.Host.Version.Minor = func() (result uint32) {
		result = uint32(gd_version_minor())
		return
	}
	gdextension.Host.Version.Patch = func() (result uint32) {
		result = uint32(gd_version_patch())
		return
	}
	gdextension.Host.Version.Hex = func() (result uint32) {
		result = uint32(gd_version_hex())
		return
	}
	gdextension.Host.Version.Status = func() (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_version_status())}
		return
	}
	gdextension.Host.Version.Build = func() (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_version_build())}
		return
	}
	gdextension.Host.Version.Hash = func() (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_version_hash())}
		return
	}
	gdextension.Host.Version.Timestamp = func(p0 gdextension.CallReturns[uint64]) {
		mem0 := gdmemory.MakeResult(gdextension.SizeRID)
		gd_version_timestamp(uintptr(mem0))
		gdmemory.LoadResult(gdextension.SizeInt, p0, mem0)
		return
	}
	gdextension.Host.Version.String = func() (result gdextension.String) {
		result = gdextension.String{gdextension.Pointer(gd_version_string())}
		return
	}
}
