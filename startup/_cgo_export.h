/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package startup */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "startup_cgo_v2.go"
 #include "gdextension_interface.h"
 #include "startup_cgo_v2.h"
 #include <stdlib.h>
 #include <stdbool.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void go_on_init(uint32_t p0);
extern void go_on_exit(uint32_t p0);
extern void go_on_callable_call(uintptr_t p0, void* p1, int64_t p2, void* p3, void* p4);
extern _Bool go_on_callable_validation(uintptr_t p0);
extern void go_on_callable_free(uintptr_t p0);
extern int64_t go_on_callable_hash(uintptr_t p0);
extern _Bool go_on_callable_compare(uintptr_t p0, uintptr_t p1);
extern _Bool go_on_callable_less_than(uintptr_t p0, uintptr_t p1);
extern uintptr_t go_on_callable_stringify(uintptr_t p0, void* p1);
extern int64_t go_on_callable_get_argument_count(uintptr_t p0, void* p1);
extern void go_on_editor_class_in_use_detection(uintptr_t p0, uintptr_t p1, void* p2);
extern uintptr_t go_on_extension_binding_created(uintptr_t p0);
extern void go_on_extension_binding_removed(uintptr_t p0, uintptr_t p1);
extern _Bool go_on_extension_binding_reference(uintptr_t p0, _Bool p1);
extern uintptr_t go_on_extension_class_create(uintptr_t p0, _Bool p1);
extern uintptr_t go_on_extension_class_method(uintptr_t p0, uintptr_t p1, uint32_t p2);
extern _Bool go_on_extension_instance_set(uintptr_t p0, uintptr_t p1, uint64_t p2, uint64_t p3, uint64_t p4);
extern _Bool go_on_extension_instance_get(uintptr_t p0, uintptr_t p1, void* p2);
extern uintptr_t go_on_extension_instance_property_list(uintptr_t p0);
extern _Bool go_on_extension_instance_property_has_default(uintptr_t p0, uintptr_t p1);
extern _Bool go_on_extension_instance_property_get_default(uintptr_t p0, uintptr_t p1, void* p2);
extern _Bool go_on_extension_instance_property_validation(uintptr_t p0, uintptr_t p1);
extern void go_on_extension_instance_notification(uintptr_t p0, _Bool p1);
extern uintptr_t go_on_extension_instance_stringify(uintptr_t p0);
extern _Bool go_on_extension_instance_reference(uintptr_t p0, _Bool p1);
extern uint64_t go_on_extension_instance_rid(uintptr_t p0);
extern void go_on_extension_instance_call(uintptr_t p0, uintptr_t p1, void* p2, int64_t p3, void* p4, void* p5);
extern void go_on_extension_instance_call_checked(uintptr_t p0, uintptr_t p1, void* p2, void* p3);
extern void go_on_extension_instance_free(uintptr_t p0);
extern void go_on_extension_instance_unsafe_call(uintptr_t p0, uintptr_t p1, void* p2, void* p3);
extern _Bool go_on_extension_script_categorization(uintptr_t p0, uintptr_t p1);
extern uint32_t go_on_extension_script_get_property_type(uintptr_t p0, void* p1);
extern uintptr_t go_on_extension_script_get_owner(uintptr_t p0);
extern void go_on_extension_script_get_property_state(uintptr_t p0, uintptr_t p1, uintptr_t p2);
extern uintptr_t go_on_extension_script_get_methods(uintptr_t p0);
extern _Bool go_on_extension_script_has_method(uintptr_t p0, uintptr_t p1);
extern int64_t go_on_extension_script_get_method_argument_count(uintptr_t p0, uintptr_t p1);
extern uintptr_t go_on_extension_script_get(uintptr_t p0);
extern _Bool go_on_extension_script_is_placeholder(uintptr_t p0);
extern uintptr_t go_on_extension_script_get_language(uintptr_t p0);
extern void go_on_first_frame();
extern void go_on_every_frame();
extern void go_on_final_frame();
extern void go_on_worker_thread_pool_task(uintptr_t p0);
extern void go_on_worker_thread_pool_group_task(uintptr_t p0, uint32_t p1);

#ifdef __cplusplus
}
#endif
