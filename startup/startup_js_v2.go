// Code generated by ./internal/cmd/generate; DO NOT EDIT.
//go:build js

package startup

import "graphics.gd/internal/gdextension"

import "syscall/js"

import "math"
import "unsafe"

func init() {
	js.Global().Set("Go", js.Global().Get("Object").New())
	Go := js.Global().Get("Go")
	Go.Set("on_init", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Init(gdextension.InitializationLevel(args[0].Int()))
		return nil
	}))
	Go.Set("on_exit", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Exit(gdextension.InitializationLevel(args[0].Int()))
		return nil
	}))
	Go.Set("on_callable_call", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Callables.Call(gdextension.FunctionID(args[0].Int()), int64(args[1].Int()), gdextension.CallAccepts[gdextension.Variant](args[2].Int()))
		return nil
	}))
	Go.Set("on_callable_validation", js.FuncOf(func(self js.Value, args []js.Value) any {
		return bool(gdextension.On.Callables.Validation(gdextension.FunctionID(args[0].Int())))
	}))
	Go.Set("on_callable_free", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Callables.Free(gdextension.FunctionID(args[0].Int()))
		return nil
	}))
	Go.Set("on_callable_hash", js.FuncOf(func(self js.Value, args []js.Value) any {
		return int64(gdextension.On.Callables.Hash(gdextension.FunctionID(args[0].Int())))
	}))
	Go.Set("on_callable_compare", js.FuncOf(func(self js.Value, args []js.Value) any {
		return bool(gdextension.On.Callables.Compare(gdextension.FunctionID(args[0].Int()), gdextension.FunctionID(args[1].Int())))
	}))
	Go.Set("on_callable_less_than", js.FuncOf(func(self js.Value, args []js.Value) any {
		return bool(gdextension.On.Callables.LessThan(gdextension.FunctionID(args[0].Int()), gdextension.FunctionID(args[1].Int())))
	}))
	Go.Set("on_callable_stringify", js.FuncOf(func(self js.Value, args []js.Value) any {
		result, _ := gdextension.On.Callables.Stringify(gdextension.FunctionID(args[0].Int()), gdextension.Call(args[1].Int()))
		return gdextension.String(result)
	}))
	Go.Set("on_callable_get_argument_count", js.FuncOf(func(self js.Value, args []js.Value) any {
		result, _ := gdextension.On.Callables.ArgumentCount(gdextension.FunctionID(args[0].Int()), gdextension.Call(args[1].Int()))
		return int64(result)
	}))
	Go.Set("on_editor_class_in_use_detection", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Editor.ClassInUseDetection(gdextension.PackedArray{gdextension.Pointer(args[0].Int()), gdextension.Pointer(args[1].Int())}, gdextension.Call(args[2].Int()))
		return nil
	}))
	Go.Set("on_extension_binding_created", js.FuncOf(func(self js.Value, args []js.Value) any {
		return uint32(gdextension.On.Extension.Binding.Created(gdextension.ExtensionInstanceID(args[0].Int())))
	}))
	Go.Set("on_extension_binding_removed", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Extension.Binding.Removed(gdextension.ExtensionInstanceID(args[0].Int()), gdextension.ExtensionBindingID(args[1].Int()))
		return nil
	}))
	Go.Set("on_extension_binding_reference", js.FuncOf(func(self js.Value, args []js.Value) any {
		return bool(gdextension.On.Extension.Binding.Reference(gdextension.ExtensionInstanceID(args[0].Int()), bool(args[1].Bool())))
	}))
	Go.Set("on_extension_class_create", js.FuncOf(func(self js.Value, args []js.Value) any {
		return uint32(gdextension.On.Extension.Class.Create(gdextension.ExtensionClassID(args[0].Int()), bool(args[1].Bool())))
	}))
	Go.Set("on_extension_class_method", js.FuncOf(func(self js.Value, args []js.Value) any {
		return uint32(gdextension.On.Extension.Class.Method(gdextension.ExtensionClassID(args[0].Int()), gdextension.StringName(args[1].Int()), uint32(args[2].Int())))
	}))
	Go.Set("on_extension_instance_set", js.FuncOf(func(self js.Value, args []js.Value) any {
		return bool(gdextension.On.Extension.Instance.Set(gdextension.ExtensionInstanceID(args[0].Int()), gdextension.StringName(args[1].Int()), gdextension.Variant{uint64(args[2].Int()), uint64(args[3].Int()), uint64(args[4].Int())}))
	}))
	Go.Set("on_extension_instance_get", js.FuncOf(func(self js.Value, args []js.Value) any {
		_, result := gdextension.On.Extension.Instance.Get(gdextension.ExtensionInstanceID(args[0].Int()), gdextension.StringName(args[1].Int()), gdextension.Call(args[2].Int()))
		return bool(result)
	}))
	Go.Set("on_extension_instance_property_list", js.FuncOf(func(self js.Value, args []js.Value) any {
		return uint32(gdextension.On.Extension.Instance.PropertyList(gdextension.ExtensionInstanceID(args[0].Int())))
	}))
	Go.Set("on_extension_instance_property_has_default", js.FuncOf(func(self js.Value, args []js.Value) any {
		return bool(gdextension.On.Extension.Instance.PropertyHasDefault(gdextension.ExtensionInstanceID(args[0].Int()), gdextension.StringName(args[1].Int())))
	}))
	Go.Set("on_extension_instance_property_get_default", js.FuncOf(func(self js.Value, args []js.Value) any {
		_, result := gdextension.On.Extension.Instance.PropertyGetDefault(gdextension.ExtensionInstanceID(args[0].Int()), gdextension.StringName(args[1].Int()), gdextension.Call(args[2].Int()))
		return bool(result)
	}))
	Go.Set("on_extension_instance_property_validation", js.FuncOf(func(self js.Value, args []js.Value) any {
		return bool(gdextension.On.Extension.Instance.PropertyValidation(gdextension.ExtensionInstanceID(args[0].Int()), gdextension.PropertyList(args[1].Int())))
	}))
	Go.Set("on_extension_instance_notification", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Extension.Instance.Notification(gdextension.ExtensionInstanceID(args[0].Int()), bool(args[1].Bool()))
		return nil
	}))
	Go.Set("on_extension_instance_stringify", js.FuncOf(func(self js.Value, args []js.Value) any {
		return uint32(gdextension.On.Extension.Instance.Stringify(gdextension.ExtensionInstanceID(args[0].Int())))
	}))
	Go.Set("on_extension_instance_reference", js.FuncOf(func(self js.Value, args []js.Value) any {
		return bool(gdextension.On.Extension.Instance.Reference(gdextension.ExtensionInstanceID(args[0].Int()), bool(args[1].Bool())))
	}))
	Go.Set("on_extension_instance_rid", js.FuncOf(func(self js.Value, args []js.Value) any {
		return uint64(gdextension.On.Extension.Instance.RID(gdextension.ExtensionInstanceID(args[0].Int())))
	}))
	Go.Set("on_extension_instance_call", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Extension.Instance.Call(gdextension.ExtensionInstanceID(args[0].Int()), gdextension.FunctionID(args[1].Int()), int64(args[2].Int()), gdextension.CallAccepts[gdextension.Variant](args[3].Int()))
		return nil
	}))
	Go.Set("on_extension_instance_call_checked", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Extension.Instance.CallChecked(gdextension.ExtensionInstanceID(args[0].Int()), gdextension.FunctionID(args[1].Int()), gdextension.CallAccepts[gdextension.Variant](args[2].Int()))
		return nil
	}))
	Go.Set("on_extension_instance_free", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Extension.Instance.Free(gdextension.ExtensionInstanceID(args[0].Int()))
		return nil
	}))
	Go.Set("on_extension_instance_unsafe_call", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Extension.Instance.Unsafe.Call(gdextension.ExtensionInstanceID(args[0].Int()), gdextension.FunctionID(args[1].Int()), gdextension.CallAccepts[interface{}](args[2].Int()))
		return nil
	}))
	Go.Set("on_extension_script_categorization", js.FuncOf(func(self js.Value, args []js.Value) any {
		return bool(gdextension.On.Extension.Script.Categorization(gdextension.ExtensionInstanceID(args[0].Int()), gdextension.PropertyList(args[1].Int())))
	}))
	Go.Set("on_extension_script_get_property_type", js.FuncOf(func(self js.Value, args []js.Value) any {
		result, _ := gdextension.On.Extension.Script.PropertyType(gdextension.StringName(args[0].Int()), gdextension.Call(args[1].Int()))
		return gdextension.VariantType(result)
	}))
	Go.Set("on_extension_script_get_owner", js.FuncOf(func(self js.Value, args []js.Value) any {
		return uint32(gdextension.On.Extension.Script.Owner(gdextension.ExtensionInstanceID(args[0].Int())))
	}))
	Go.Set("on_extension_script_get_property_state", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Extension.Script.PropertyState(gdextension.ExtensionInstanceID(args[0].Int()), gdextension.FunctionID(args[1].Int()), uintptr(args[2].Int()))
		return nil
	}))
	Go.Set("on_extension_script_get_methods", js.FuncOf(func(self js.Value, args []js.Value) any {
		return uint32(gdextension.On.Extension.Script.Methods(gdextension.ExtensionInstanceID(args[0].Int())))
	}))
	Go.Set("on_extension_script_has_method", js.FuncOf(func(self js.Value, args []js.Value) any {
		return bool(gdextension.On.Extension.Script.HasMethod(gdextension.ExtensionInstanceID(args[0].Int()), gdextension.StringName(args[1].Int())))
	}))
	Go.Set("on_extension_script_get_method_argument_count", js.FuncOf(func(self js.Value, args []js.Value) any {
		return int64(gdextension.On.Extension.Script.MethodArgumentCount(gdextension.ExtensionInstanceID(args[0].Int()), gdextension.StringName(args[1].Int())))
	}))
	Go.Set("on_extension_script_get", js.FuncOf(func(self js.Value, args []js.Value) any {
		return uint32(gdextension.On.Extension.Script.Get(gdextension.ExtensionInstanceID(args[0].Int())))
	}))
	Go.Set("on_extension_script_is_placeholder", js.FuncOf(func(self js.Value, args []js.Value) any {
		return bool(gdextension.On.Extension.Script.IsPlaceholder(gdextension.ExtensionInstanceID(args[0].Int())))
	}))
	Go.Set("on_extension_script_get_language", js.FuncOf(func(self js.Value, args []js.Value) any {
		return uint32(gdextension.On.Extension.Script.Language(gdextension.ExtensionInstanceID(args[0].Int())))
	}))
	Go.Set("on_first_frame", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Frames.First()
		return nil
	}))
	Go.Set("on_every_frame", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Frames.Every()
		return nil
	}))
	Go.Set("on_final_frame", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Frames.Final()
		return nil
	}))
	Go.Set("on_worker_thread_pool_task", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Tasks.Run(gdextension.TaskID(args[0].Int()))
		return nil
	}))
	Go.Set("on_worker_thread_pool_group_task", js.FuncOf(func(self js.Value, args []js.Value) any {
		gdextension.On.Tasks.RunInGroup(gdextension.TaskID(args[0].Int()), uint32(args[1].Int()))
		return nil
	}))
	gdextension.Host.Builtins.Name = func(p0 gdextension.StringName, p1 int64) (result gdextension.FunctionID) {
		result = gdextension.FunctionID(js.Global().Get("GD").Call("builtin_name", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1)))).Int())
		return
	}
	gdextension.Host.Builtins.Call = func(p0 gdextension.FunctionID, p1 int32, p2 gdextension.CallAccepts[interface{}]) (_ gdextension.CallReturns[gdextension.Variant], _ gdextension.MaybeError) {
		js.Global().Get("GD").Call("builtin_call", uint32(p0), int32(p1), uint32(p2))
		return
	}
	gdextension.Host.Callables.Create = func(p0 gdextension.CallableID, p1 gdextension.ObjectID, p2 gdextension.Call) (_ gdextension.CallReturns[gdextension.Callable]) {
		js.Global().Get("GD").Call("callable_create", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1))), uint32(p2))
		return
	}
	gdextension.Host.Callables.Lookup = func(p0 gdextension.Callable) (result gdextension.CallableID) {
		result = gdextension.CallableID(js.Global().Get("GD").Call("callable_lookup", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1])))).Int())
		return
	}
	gdextension.Host.ClassDB.FileAccess.Write = func(p0 gdextension.Object, p1 []byte) {
		buf1 := js.Global().Get("Uint8Array").New(len(p1))
		js.CopyBytesToJS(buf1, p1)
		js.Global().Get("GD").Call("classdb_FileAccess_write", uint32(p0), buf1, len(p1))
		js.CopyBytesToGo(p1, buf1)
		return
	}
	gdextension.Host.ClassDB.FileAccess.Read = func(p0 gdextension.Object, p1 []byte) (result int64) {
		buf1 := js.Global().Get("Uint8Array").New(len(p1))
		js.CopyBytesToJS(buf1, p1)
		result = int64(js.Global().Get("GD").Call("classdb_FileAccess_read", uint32(p0), buf1, len(p1)).Int())
		js.CopyBytesToGo(p1, buf1)
		return
	}
	gdextension.Host.ClassDB.Image.Unsafe = func(p0 gdextension.Object) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("classdb_Image_unsafe", uint32(p0)).Int())
		return
	}
	gdextension.Host.ClassDB.Image.Access = func(p0 gdextension.Object, p1 int64) (result uint8) {
		result = uint8(js.Global().Get("GD").Call("classdb_Image_access", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1)))).Int())
		return
	}
	gdextension.Host.ClassDB.MethodList.Make = func(p0 int32) (result gdextension.MethodList) {
		result = gdextension.MethodList(js.Global().Get("GD").Call("method_list_make", int32(p0)).Int())
		return
	}
	gdextension.Host.ClassDB.MethodList.Push = func(p0 gdextension.MethodList, p1 gdextension.StringName, p2 gdextension.FunctionID, p3 gdextension.MethodFlags, p4 bool, p5 gdextension.PropertyList, p6 uint32, p7 gdextension.PropertyList, p8 uint32, p9 gdextension.CallAccepts[gdextension.Variant]) {
		js.Global().Get("GD").Call("method_list_push", uint32(p0), uint32(p1), uint32(p2), uint32(p3), p4, uint32(p5), uint32(p6), uint32(p7), uint32(p8), uint32(p9))
		return
	}
	gdextension.Host.ClassDB.MethodList.Free = func(p0 gdextension.MethodList) {
		js.Global().Get("GD").Call("method_list_free", uint32(p0))
		return
	}
	gdextension.Host.ClassDB.PropertyList.Make = func(p0 int32) (result gdextension.PropertyList) {
		result = gdextension.PropertyList(js.Global().Get("GD").Call("property_list_make", int32(p0)).Int())
		return
	}
	gdextension.Host.ClassDB.PropertyList.Push = func(p0 gdextension.PropertyList, p1 gdextension.VariantType, p2 gdextension.StringName, p3 gdextension.StringName, p4 uint32, p5 gdextension.String, p6 uint32, p7 gdextension.ArgumentMetadata) {
		js.Global().Get("GD").Call("property_list_push", uint32(p0), uint32(p1), uint32(p2), uint32(p3), uint32(p4), uint32(p5), uint32(p6), uint32(p7))
		return
	}
	gdextension.Host.ClassDB.PropertyList.Free = func(p0 gdextension.PropertyList) {
		js.Global().Get("GD").Call("property_list_free", uint32(p0))
		return
	}
	gdextension.Host.ClassDB.PropertyList.Info.Type = func(p0 gdextension.PropertyList) (result gdextension.VariantType) {
		result = gdextension.VariantType(js.Global().Get("GD").Call("property_info_type", uint32(p0)).Int())
		return
	}
	gdextension.Host.ClassDB.PropertyList.Info.Name = func(p0 gdextension.PropertyList) (result gdextension.StringName) {
		result = gdextension.StringName(js.Global().Get("GD").Call("property_info_name", uint32(p0)).Int())
		return
	}
	gdextension.Host.ClassDB.PropertyList.Info.ClassName = func(p0 gdextension.PropertyList) (result gdextension.StringName) {
		result = gdextension.StringName(js.Global().Get("GD").Call("property_info_class_name", uint32(p0)).Int())
		return
	}
	gdextension.Host.ClassDB.PropertyList.Info.Hint = func(p0 gdextension.PropertyList) (result uint32) {
		result = uint32(js.Global().Get("GD").Call("property_info_hint", uint32(p0)).Int())
		return
	}
	gdextension.Host.ClassDB.PropertyList.Info.HinString = func(p0 gdextension.PropertyList) (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("property_info_hint_string", uint32(p0)).Int())
		return
	}
	gdextension.Host.ClassDB.PropertyList.Info.Usage = func(p0 gdextension.PropertyList) (result uint32) {
		result = uint32(js.Global().Get("GD").Call("property_info_usage", uint32(p0)).Int())
		return
	}
	gdextension.Host.ClassDB.Register.Class = func(p0 gdextension.StringName, p1 gdextension.StringName, p2 gdextension.ExtensionClassID, p3 bool, p4 bool, p5 bool, p6 bool, p7 gdextension.String) {
		js.Global().Get("GD").Call("classdb_register", uint32(p0), uint32(p1), uint32(p2), p3, p4, p5, p6, uint32(p7))
		return
	}
	gdextension.Host.ClassDB.Register.Methods = func(p0 gdextension.StringName, p1 gdextension.MethodList) {
		js.Global().Get("GD").Call("classdb_register_methods", uint32(p0), uint32(p1))
		return
	}
	gdextension.Host.ClassDB.Register.Constant = func(p0 gdextension.StringName, p1 gdextension.StringName, p2 gdextension.StringName, p3 int64, p4 bool) {
		js.Global().Get("GD").Call("classdb_register_constant", uint32(p0), uint32(p1), uint32(p2), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p3))), p4)
		return
	}
	gdextension.Host.ClassDB.Register.Property = func(p0 gdextension.StringName, p1 gdextension.PropertyList, p2 gdextension.StringName, p3 gdextension.StringName) {
		js.Global().Get("GD").Call("classdb_register_property", uint32(p0), uint32(p1), uint32(p2), uint32(p3))
		return
	}
	gdextension.Host.ClassDB.Register.PropertyIndexed = func(p0 gdextension.StringName, p1 gdextension.PropertyList, p2 gdextension.StringName, p3 gdextension.StringName, p4 int64) {
		js.Global().Get("GD").Call("classdb_register_property_indexed", uint32(p0), uint32(p1), uint32(p2), uint32(p3), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p4))))
		return
	}
	gdextension.Host.ClassDB.Register.PropertyGroup = func(p0 gdextension.StringName, p1 gdextension.String, p2 gdextension.String) {
		js.Global().Get("GD").Call("classdb_register_property_group", uint32(p0), uint32(p1), uint32(p2))
		return
	}
	gdextension.Host.ClassDB.Register.PropertySubgroup = func(p0 gdextension.StringName, p1 gdextension.String, p2 gdextension.String) {
		js.Global().Get("GD").Call("classdb_register_property_sub_group", uint32(p0), uint32(p1), uint32(p2))
		return
	}
	gdextension.Host.ClassDB.Register.Signal = func(p0 gdextension.StringName, p1 gdextension.StringName, p2 gdextension.PropertyList) {
		js.Global().Get("GD").Call("classdb_register_signal", uint32(p0), uint32(p1), uint32(p2))
		return
	}
	gdextension.Host.ClassDB.Register.Removal = func(p0 gdextension.StringName) {
		js.Global().Get("GD").Call("classdb_register_removal", uint32(p0))
		return
	}
	gdextension.Host.ClassDB.WorkerThreadPool.AddTask = func(p0 gdextension.Object, p1 gdextension.TaskID, p2 bool, p3 gdextension.String) {
		js.Global().Get("GD").Call("classdb_WorkerThreadPool_add_task", uint32(p0), uint32(p1), p2, uint32(p3))
		return
	}
	gdextension.Host.ClassDB.WorkerThreadPool.AddGroupTask = func(p0 gdextension.Object, p1 gdextension.TaskID, p2 int32, p3 int32, p4 bool, p5 gdextension.String) {
		js.Global().Get("GD").Call("classdb_WorkerThreadPool_add_group_task", uint32(p0), uint32(p1), int32(p2), int32(p3), p4, uint32(p5))
		return
	}
	gdextension.Host.ClassDB.XMLParser.Load = func(p0 gdextension.Object, p1 []byte) (result int64) {
		buf1 := js.Global().Get("Uint8Array").New(len(p1))
		js.CopyBytesToJS(buf1, p1)
		result = int64(js.Global().Get("GD").Call("classdb_XMLParser_load", uint32(p0), buf1, len(p1)).Int())
		js.CopyBytesToGo(p1, buf1)
		return
	}
	gdextension.Host.Dictionaries.Access = func(p0 gdextension.Dictionary, p1 gdextension.Variant, p2 gdextension.Call) (_ gdextension.CallReturns[gdextension.Variant]) {
		js.Global().Get("GD").Call("packed_dictionary_access", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[2]))), uint32(p2))
		return
	}
	gdextension.Host.Dictionaries.Modify = func(p0 gdextension.Dictionary, p1 gdextension.Variant, p2 gdextension.Variant) {
		js.Global().Get("GD").Call("packed_dictionary_modify", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[2]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[2]))))
		return
	}
	gdextension.Host.Editor.AddDocumentation = func(p0 string) {
		js.Global().Get("GD").Call("editor_add_documentation", string(p0), len(p0))
		return
	}
	gdextension.Host.Editor.AddPlugin = func(p0 gdextension.StringName) {
		js.Global().Get("GD").Call("editor_add_plugin", uint32(p0))
		return
	}
	gdextension.Host.Editor.EndPlugin = func(p0 gdextension.StringName) {
		js.Global().Get("GD").Call("editor_end_plugin", uint32(p0))
		return
	}
	gdextension.Host.Iterators.Make = func(p0 gdextension.Variant, p1 gdextension.Call) (_ gdextension.CallReturns[gdextension.Iterator], result bool, _ gdextension.MaybeError) {
		result = bool(js.Global().Get("GD").Call("iterator_make", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), uint32(p1)).Bool())
		return
	}
	gdextension.Host.Iterators.Next = func(p0 gdextension.Variant, p1 gdextension.Call, p2 gdextension.Iterator) (_ gdextension.CallReturns[gdextension.Iterator], result bool, _ gdextension.MaybeError) {
		result = bool(js.Global().Get("GD").Call("iterator_next", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), uint32(p1), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[2])))).Bool())
		return
	}
	gdextension.Host.Iterators.Load = func(p0 gdextension.Variant, p1 gdextension.Call, p2 gdextension.Iterator) (_ gdextension.CallReturns[gdextension.Variant], result bool, _ gdextension.MaybeError) {
		result = bool(js.Global().Get("GD").Call("iterator_load", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), uint32(p1), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[2])))).Bool())
		return
	}
	gdextension.Host.Log.Error = func(p0 string, p1 string, p2 string, p3 string, p4 int32, p5 bool) {
		js.Global().Get("GD").Call("log_error", string(p0), len(p0), string(p1), len(p1), string(p2), len(p2), string(p3), len(p3), int32(p4), p5)
		return
	}
	gdextension.Host.Log.Warning = func(p0 string, p1 string, p2 string, p3 string, p4 int32, p5 bool) {
		js.Global().Get("GD").Call("log_warning", string(p0), len(p0), string(p1), len(p1), string(p2), len(p2), string(p3), len(p3), int32(p4), p5)
		return
	}
	gdextension.Host.Memory.Malloc = func(p0 uintptr) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("memory_malloc", uint32(p0)).Int())
		return
	}
	gdextension.Host.Memory.Sizeof = func(p0 gdextension.StringName) (result uint64) {
		result = uint64(js.Global().Get("GD").Call("memory_sizeof", uint32(p0)).Int())
		return
	}
	gdextension.Host.Memory.Resize = func(p0 gdextension.Pointer, p1 uintptr) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("memory_resize", uint32(p0), uint32(p1)).Int())
		return
	}
	gdextension.Host.Memory.Free = func(p0 gdextension.Pointer) {
		js.Global().Get("GD").Call("memory_free", uint32(p0))
		return
	}
	gdextension.Host.Memory.Edit.Byte = func(p0 gdextension.Pointer, p1 uint8) {
		js.Global().Get("GD").Call("memory_edit_byte", uint32(p0), p1)
		return
	}
	gdextension.Host.Memory.Edit.Uint16 = func(p0 gdextension.Pointer, p1 uint16) {
		js.Global().Get("GD").Call("memory_edit_u16", uint32(p0), p1)
		return
	}
	gdextension.Host.Memory.Edit.Uint32 = func(p0 gdextension.Pointer, p1 uint32) {
		js.Global().Get("GD").Call("memory_edit_u32", uint32(p0), uint32(p1))
		return
	}
	gdextension.Host.Memory.Edit.Uint64 = func(p0 gdextension.Pointer, p1 uint64) {
		js.Global().Get("GD").Call("memory_edit_u64", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1))))
		return
	}
	gdextension.Host.Memory.Edit.Bits256 = func(p0 gdextension.Pointer, p1 [4]uint64) {
		js.Global().Get("GD").Call("memory_edit_256", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[2]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[3]))))
		return
	}
	gdextension.Host.Memory.Edit.Bits512 = func(p0 gdextension.Pointer, p1 [8]uint64) {
		js.Global().Get("GD").Call("memory_edit_512", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[2]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[3]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[4]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[5]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[6]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[7]))))
		return
	}
	gdextension.Host.Memory.Load.Byte = func(p0 gdextension.Pointer) (result uint8) {
		result = uint8(js.Global().Get("GD").Call("memory_load_byte", uint32(p0)).Int())
		return
	}
	gdextension.Host.Memory.Load.Uint16 = func(p0 gdextension.Pointer) (result uint16) {
		result = uint16(js.Global().Get("GD").Call("memory_load_u16", uint32(p0)).Int())
		return
	}
	gdextension.Host.Memory.Load.Uint32 = func(p0 gdextension.Pointer) (result uint32) {
		result = uint32(js.Global().Get("GD").Call("memory_load_u32", uint32(p0)).Int())
		return
	}
	gdextension.Host.Memory.Load.Uint64 = func(p0 gdextension.Pointer) (result uint64) {
		result = uint64(js.Global().Get("GD").Call("memory_load_u64", uint32(p0)).Int())
		return
	}
	gdextension.Host.Objects.Make = func(p0 gdextension.StringName) (result gdextension.Object) {
		result = gdextension.Object(js.Global().Get("GD").Call("object_make", uint32(p0)).Int())
		return
	}
	gdextension.Host.Objects.Call = func(p0 gdextension.Object, p1 gdextension.FunctionID, p2 int64, p3 gdextension.CallAccepts[gdextension.Variant]) (_ gdextension.CallReturns[gdextension.Variant], _ gdextension.MaybeError) {
		js.Global().Get("GD").Call("object_call", uint32(p0), uint32(p1), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2))), uint32(p3))
		return
	}
	gdextension.Host.Objects.Name = func(p0 gdextension.Object) (result gdextension.StringName) {
		result = gdextension.StringName(js.Global().Get("GD").Call("object_name", uint32(p0)).Int())
		return
	}
	gdextension.Host.Objects.Type = func(p0 gdextension.StringName) (result gdextension.ObjectType) {
		result = gdextension.ObjectType(js.Global().Get("GD").Call("object_type", uint32(p0)).Int())
		return
	}
	gdextension.Host.Objects.Cast = func(p0 gdextension.Object, p1 gdextension.ObjectType) (result gdextension.Object) {
		result = gdextension.Object(js.Global().Get("GD").Call("object_cast", uint32(p0), uint32(p1)).Int())
		return
	}
	gdextension.Host.Objects.Lookup = func(p0 gdextension.ObjectID) (result gdextension.Object) {
		result = gdextension.Object(js.Global().Get("GD").Call("object_lookup", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0)))).Int())
		return
	}
	gdextension.Host.Objects.Global = func(p0 gdextension.StringName) (result gdextension.Object) {
		result = gdextension.Object(js.Global().Get("GD").Call("object_global", uint32(p0)).Int())
		return
	}
	gdextension.Host.Objects.Extension.Setup = func(p0 gdextension.Object, p1 gdextension.StringName, p2 gdextension.ExtensionInstanceID) {
		js.Global().Get("GD").Call("object_extension_setup", uint32(p0), uint32(p1), uint32(p2))
		return
	}
	gdextension.Host.Objects.Extension.Fetch = func(p0 gdextension.Object) (result gdextension.ExtensionClassID) {
		result = gdextension.ExtensionClassID(js.Global().Get("GD").Call("object_extension_fetch", uint32(p0)).Int())
		return
	}
	gdextension.Host.Objects.Extension.Close = func(p0 gdextension.Object) {
		js.Global().Get("GD").Call("object_extension_close", uint32(p0))
		return
	}
	gdextension.Host.Objects.ID.Get = func(p0 gdextension.Object) (result gdextension.ObjectID) {
		result = gdextension.ObjectID(js.Global().Get("GD").Call("object_id", uint32(p0)).Int())
		return
	}
	gdextension.Host.Objects.ID.InsideVariant = func(p0 gdextension.Variant) (result gdextension.ObjectID) {
		result = gdextension.ObjectID(js.Global().Get("GD").Call("object_id_inside_variant", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2])))).Int())
		return
	}
	gdextension.Host.Objects.Method.Lookup = func(p0 gdextension.Object, p1 gdextension.StringName, p2 int64) (result gdextension.FunctionID) {
		result = gdextension.FunctionID(js.Global().Get("GD").Call("object_method_lookup", uint32(p0), uint32(p1), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2)))).Int())
		return
	}
	gdextension.Host.Objects.Script.Make = func(p0 gdextension.ExtensionInstanceID) (result gdextension.ScriptInstance) {
		result = gdextension.ScriptInstance(js.Global().Get("GD").Call("object_script_make", uint32(p0)).Int())
		return
	}
	gdextension.Host.Objects.Script.Call = func(p0 gdextension.Object, p1 gdextension.StringName, p2 int64, p3 gdextension.CallAccepts[gdextension.Variant]) (_ gdextension.CallReturns[gdextension.Variant], _ gdextension.MaybeError) {
		js.Global().Get("GD").Call("object_script_call", uint32(p0), uint32(p1), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2))), uint32(p3))
		return
	}
	gdextension.Host.Objects.Script.Setup = func(p0 gdextension.Object, p1 gdextension.ScriptInstance) {
		js.Global().Get("GD").Call("object_script_setup", uint32(p0), uint32(p1))
		return
	}
	gdextension.Host.Objects.Script.Fetch = func(p0 gdextension.Object, p1 gdextension.Object) (result gdextension.ScriptInstance) {
		result = gdextension.ScriptInstance(js.Global().Get("GD").Call("object_script_fetch", uint32(p0), uint32(p1)).Int())
		return
	}
	gdextension.Host.Objects.Script.DefinesMethod = func(p0 gdextension.Object, p1 gdextension.StringName) (result bool) {
		result = bool(js.Global().Get("GD").Call("object_script_defines_method", uint32(p0), uint32(p1)).Bool())
		return
	}
	gdextension.Host.Objects.Script.AddPropertyState = func(p0 gdextension.FunctionID, p1 uintptr, p2 gdextension.StringName, p3 gdextension.Variant) {
		js.Global().Get("GD").Call("object_script_property_state_add", uint32(p0), uint32(p1), uint32(p2), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p3[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p3[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p3[2]))))
		return
	}
	gdextension.Host.Objects.Script.Placeholder.Create = func(p0 gdextension.Object, p1 gdextension.Object, p2 gdextension.Object) (result gdextension.ScriptInstance) {
		result = gdextension.ScriptInstance(js.Global().Get("GD").Call("object_script_placeholder_create", uint32(p0), uint32(p1), uint32(p2)).Int())
		return
	}
	gdextension.Host.Objects.Script.Placeholder.Update = func(p0 gdextension.ScriptInstance, p1 gdextension.Array, p2 gdextension.Dictionary) {
		js.Global().Get("GD").Call("object_script_placeholder_update", uint32(p0), uint32(p1), uint32(p2))
		return
	}
	gdextension.Host.Objects.Unsafe.Call = func(p0 gdextension.Object, p1 gdextension.FunctionID, p2 gdextension.CallAccepts[interface{}]) (_ gdextension.CallReturns[interface{}]) {
		js.Global().Get("GD").Call("object_unsafe_call", uint32(p0), uint32(p1), uint32(p2))
		return
	}
	gdextension.Host.Objects.Unsafe.Free = func(p0 gdextension.Object) {
		js.Global().Get("GD").Call("object_unsafe_free", uint32(p0))
		return
	}
	gdextension.Host.Packed.Bytes.Unsafe = func(p0 gdextension.PackedArray) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("packed_byte_array_unsafe", uint32(p0[0]), uint32(p0[1])).Int())
		return
	}
	gdextension.Host.Packed.Bytes.Access = func(p0 gdextension.PackedArray, p1 int64) (result uint8) {
		result = uint8(js.Global().Get("GD").Call("packed_byte_array_access", uint32(p0[0]), uint32(p0[1]), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1)))).Int())
		return
	}
	gdextension.Host.Packed.Colors.Unsafe = func(p0 gdextension.PackedArray) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("packed_color_array_unsafe", uint32(p0[0]), uint32(p0[1])).Int())
		return
	}
	gdextension.Host.Packed.Colors.Access = func(p0 gdextension.PackedArray, p1 int64, p2 gdextension.Call) (_ gdextension.CallReturns[struct {
		R float32
		G float32
		B float32
		A float32
	}]) { js.Global().Get("GD").Call("packed_color_array_access", uint32(p0[0]), uint32(p0[1]), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1))), uint32(p2)); return }
	gdextension.Host.Packed.Float32s.Unsafe = func(p0 gdextension.PackedArray) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("packed_float32_array_unsafe", uint32(p0[0]), uint32(p0[1])).Int())
		return
	}
	gdextension.Host.Packed.Float32s.Access = func(p0 gdextension.PackedArray, p1 int64) (result float32) {
		result = float32(js.Global().Get("GD").Call("packed_float32_array_access", uint32(p0[0]), uint32(p0[1]), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1)))).Float())
		return
	}
	gdextension.Host.Packed.Float64s.Unsafe = func(p0 gdextension.PackedArray) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("packed_float64_array_unsafe", uint32(p0[0]), uint32(p0[1])).Int())
		return
	}
	gdextension.Host.Packed.Float64s.Access = func(p0 gdextension.PackedArray, p1 int64) (result float64) {
		result = float64(js.Global().Get("GD").Call("packed_float64_array_access", uint32(p0[0]), uint32(p0[1]), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1)))).Float())
		return
	}
	gdextension.Host.Packed.Int32s.Unsafe = func(p0 gdextension.PackedArray) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("packed_int32_array_unsafe", uint32(p0[0]), uint32(p0[1])).Int())
		return
	}
	gdextension.Host.Packed.Int32s.Access = func(p0 gdextension.PackedArray, p1 int64) (result int32) {
		result = int32(js.Global().Get("GD").Call("packed_int32_array_access", uint32(p0[0]), uint32(p0[1]), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1)))).Int())
		return
	}
	gdextension.Host.Packed.Int64s.Unsafe = func(p0 gdextension.PackedArray) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("packed_int64_array_unsafe", uint32(p0[0]), uint32(p0[1])).Int())
		return
	}
	gdextension.Host.Packed.Int64s.Access = func(p0 gdextension.PackedArray, p1 int64) (result int64) {
		result = int64(js.Global().Get("GD").Call("packed_int64_array_access", uint32(p0[0]), uint32(p0[1]), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1)))).Int())
		return
	}
	gdextension.Host.Packed.Strings.Unsafe = func(p0 gdextension.PackedArray) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("packed_string_array_unsafe", uint32(p0[0]), uint32(p0[1])).Int())
		return
	}
	gdextension.Host.Packed.Strings.Access = func(p0 gdextension.PackedArray, p1 int64) (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("packed_string_array_access", uint32(p0[0]), uint32(p0[1]), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1)))).Int())
		return
	}
	gdextension.Host.Packed.Variants.Unsafe = func(p0 gdextension.PackedArray) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("packed_variant_array_unsafe", uint32(p0[0]), uint32(p0[1])).Int())
		return
	}
	gdextension.Host.Packed.Variants.Access = func(p0 gdextension.PackedArray, p1 int64, p2 gdextension.Call) (_ gdextension.CallReturns[gdextension.Variant]) {
		js.Global().Get("GD").Call("packed_variant_array_access", uint32(p0[0]), uint32(p0[1]), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1))), uint32(p2))
		return
	}
	gdextension.Host.Packed.Vector2s.Unsafe = func(p0 gdextension.PackedArray) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("packed_vector2_array_unsafe", uint32(p0[0]), uint32(p0[1])).Int())
		return
	}
	gdextension.Host.Packed.Vector2s.Access = func(p0 gdextension.PackedArray, p1 int64, p2 gdextension.Call) (_ gdextension.CallReturns[struct {
		X float32
		Y float32
	}]) { js.Global().Get("GD").Call("packed_vector2_array_access", uint32(p0[0]), uint32(p0[1]), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1))), uint32(p2)); return }
	gdextension.Host.Packed.Vector3s.Unsafe = func(p0 gdextension.PackedArray) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("packed_vector3_array_unsafe", uint32(p0[0]), uint32(p0[1])).Int())
		return
	}
	gdextension.Host.Packed.Vector3s.Access = func(p0 gdextension.PackedArray, p1 int64, p2 gdextension.Call) (_ gdextension.CallReturns[struct {
		X float32
		Y float32
		Z float32
	}]) { js.Global().Get("GD").Call("packed_vector3_array_access", uint32(p0[0]), uint32(p0[1]), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1))), uint32(p2)); return }
	gdextension.Host.Packed.Vector4s.Unsafe = func(p0 gdextension.PackedArray) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("packed_vector4_array_unsafe", uint32(p0[0]), uint32(p0[1])).Int())
		return
	}
	gdextension.Host.Packed.Vector4s.Access = func(p0 gdextension.PackedArray, p1 int64, p2 gdextension.Call) (_ gdextension.CallReturns[struct {
		X float32
		Y float32
		Z float32
		W float32
	}]) { js.Global().Get("GD").Call("packed_vector4_array_access", uint32(p0[0]), uint32(p0[1]), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1))), uint32(p2)); return }
	gdextension.Host.RefCounted.Get = func(p0 gdextension.RefCounted) (result gdextension.Object) {
		result = gdextension.Object(js.Global().Get("GD").Call("ref_get_object", uint32(p0)).Int())
		return
	}
	gdextension.Host.RefCounted.Set = func(p0 gdextension.RefCounted, p1 gdextension.Object) {
		js.Global().Get("GD").Call("ref_set_object", uint32(p0), uint32(p1))
		return
	}
	gdextension.Host.Strings.Access = func(p0 gdextension.String, p1 int64) (result int32) {
		result = int32(js.Global().Get("GD").Call("string_access", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1)))).Int())
		return
	}
	gdextension.Host.Strings.Resize = func(p0 gdextension.String, p1 int64) (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("string_resize", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1)))).Int())
		return
	}
	gdextension.Host.Strings.Unsafe = func(p0 gdextension.String) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("string_unsafe", uint32(p0)).Int())
		return
	}
	gdextension.Host.Strings.Append.String = func(p0 gdextension.String, p1 gdextension.String) (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("string_append", uint32(p0), uint32(p1)).Int())
		return
	}
	gdextension.Host.Strings.Append.Rune = func(p0 gdextension.String, p1 int32) (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("string_append_rune", uint32(p0), int32(p1)).Int())
		return
	}
	gdextension.Host.Strings.Decode.Latin1 = func(p0 string) (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("string_decode_latin1", string(p0), len(p0)).Int())
		return
	}
	gdextension.Host.Strings.Decode.UTF8 = func(p0 string) (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("string_decode_utf8", string(p0), len(p0)).Int())
		return
	}
	gdextension.Host.Strings.Decode.UTF16 = func(p0 string, p1 bool) (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("string_decode_utf16", string(p0), len(p0), p1).Int())
		return
	}
	gdextension.Host.Strings.Decode.UTF32 = func(p0 string) (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("string_decode_utf32", string(p0), len(p0)).Int())
		return
	}
	gdextension.Host.Strings.Decode.Wide = func(p0 string) (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("string_decode_wide", string(p0), len(p0)).Int())
		return
	}
	gdextension.Host.Strings.Encode.Latin1 = func(p0 gdextension.String, p1 []byte) (result int64) {
		buf1 := js.Global().Get("Uint8Array").New(len(p1))
		js.CopyBytesToJS(buf1, p1)
		result = int64(js.Global().Get("GD").Call("string_encode_latin1", uint32(p0), buf1, len(p1)).Int())
		js.CopyBytesToGo(p1, buf1)
		return
	}
	gdextension.Host.Strings.Encode.UTF8 = func(p0 gdextension.String, p1 []byte) (result int64) {
		buf1 := js.Global().Get("Uint8Array").New(len(p1))
		js.CopyBytesToJS(buf1, p1)
		result = int64(js.Global().Get("GD").Call("string_encode_utf8", uint32(p0), buf1, len(p1)).Int())
		js.CopyBytesToGo(p1, buf1)
		return
	}
	gdextension.Host.Strings.Encode.UTF16 = func(p0 gdextension.String, p1 []byte) (result int64) {
		buf1 := js.Global().Get("Uint8Array").New(len(p1))
		js.CopyBytesToJS(buf1, p1)
		result = int64(js.Global().Get("GD").Call("string_encode_utf16", uint32(p0), buf1, len(p1)).Int())
		js.CopyBytesToGo(p1, buf1)
		return
	}
	gdextension.Host.Strings.Encode.UTF32 = func(p0 gdextension.String, p1 []byte) (result int64) {
		buf1 := js.Global().Get("Uint8Array").New(len(p1))
		js.CopyBytesToJS(buf1, p1)
		result = int64(js.Global().Get("GD").Call("string_encode_utf32", uint32(p0), buf1, len(p1)).Int())
		js.CopyBytesToGo(p1, buf1)
		return
	}
	gdextension.Host.Strings.Encode.Wide = func(p0 gdextension.String, p1 []byte) (result int64) {
		buf1 := js.Global().Get("Uint8Array").New(len(p1))
		js.CopyBytesToJS(buf1, p1)
		result = int64(js.Global().Get("GD").Call("string_encode_wide", uint32(p0), buf1, len(p1)).Int())
		js.CopyBytesToGo(p1, buf1)
		return
	}
	gdextension.Host.Strings.Intern.Latin1 = func(p0 string) (result gdextension.StringName) {
		result = gdextension.StringName(js.Global().Get("GD").Call("string_intern_latin1", string(p0), len(p0)).Int())
		return
	}
	gdextension.Host.Strings.Intern.UTF8 = func(p0 string) (result gdextension.StringName) {
		result = gdextension.StringName(js.Global().Get("GD").Call("string_intern_utf8", string(p0), len(p0)).Int())
		return
	}
	gdextension.Host.VariantTypes.Name = func(p0 gdextension.VariantType) (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("variant_type_name", uint32(p0)).Int())
		return
	}
	gdextension.Host.VariantTypes.Make = func(p0 gdextension.VariantType, p1 int32, p2 gdextension.CallAccepts[gdextension.Variant]) (_ gdextension.CallReturns[gdextension.Variant], _ gdextension.MaybeError) {
		js.Global().Get("GD").Call("variant_type_make", uint32(p0), int32(p1), uint32(p2))
		return
	}
	gdextension.Host.VariantTypes.Call = func(p0 gdextension.VariantType, p1 gdextension.StringName, p2 int64, p3 gdextension.CallAccepts[gdextension.Variant]) (_ gdextension.CallReturns[gdextension.Variant], _ gdextension.MaybeError) {
		js.Global().Get("GD").Call("variant_type_call", uint32(p0), uint32(p1), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2))), uint32(p3))
		return
	}
	gdextension.Host.VariantTypes.Convertable = func(p0 gdextension.VariantType, p1 gdextension.VariantType, p2 bool) (result bool) {
		result = bool(js.Global().Get("GD").Call("variant_type_convertable", uint32(p0), uint32(p1), p2).Bool())
		return
	}
	gdextension.Host.VariantTypes.SetupArray = func(p0 gdextension.Array, p1 gdextension.VariantType, p2 gdextension.StringName, p3 gdextension.Variant) {
		js.Global().Get("GD").Call("variant_type_setup_array", uint32(p0), uint32(p1), uint32(p2), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p3[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p3[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p3[2]))))
		return
	}
	gdextension.Host.VariantTypes.SetupDictionary = func(p0 gdextension.Dictionary, p1 gdextension.VariantType, p2 gdextension.StringName, p3 gdextension.Variant, p4 gdextension.VariantType, p5 gdextension.StringName, p6 gdextension.Variant) {
		js.Global().Get("GD").Call("variant_type_setup_dictionary", uint32(p0), uint32(p1), uint32(p2), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p3[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p3[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p3[2]))), uint32(p4), uint32(p5), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p6[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p6[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p6[2]))))
		return
	}
	gdextension.Host.VariantTypes.FetchConstant = func(p0 gdextension.VariantType, p1 gdextension.StringName, p2 gdextension.Call) (_ gdextension.CallReturns[gdextension.Variant]) {
		js.Global().Get("GD").Call("variant_type_fetch_constant", uint32(p0), uint32(p1), uint32(p2))
		return
	}
	gdextension.Host.VariantTypes.BuiltinMethod = func(p0 gdextension.VariantType, p1 gdextension.StringName, p2 int64) (result gdextension.FunctionID) {
		result = gdextension.FunctionID(js.Global().Get("GD").Call("variant_type_builtin_method", uint32(p0), uint32(p1), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2)))).Int())
		return
	}
	gdextension.Host.VariantTypes.Constructor = func(p0 gdextension.VariantType, p1 int32) (result gdextension.FunctionID) {
		result = gdextension.FunctionID(js.Global().Get("GD").Call("variant_type_unsafe_constructor", uint32(p0), int32(p1)).Int())
		return
	}
	gdextension.Host.VariantTypes.Evaluator = func(p0 gdextension.VariantOperator, p1 gdextension.VariantType, p2 gdextension.VariantType) (result gdextension.FunctionID) {
		result = gdextension.FunctionID(js.Global().Get("GD").Call("variant_type_evaluator", uint32(p0), uint32(p1), uint32(p2)).Int())
		return
	}
	gdextension.Host.VariantTypes.Setter = func(p0 gdextension.VariantType, p1 gdextension.StringName) (result gdextension.FunctionID) {
		result = gdextension.FunctionID(js.Global().Get("GD").Call("variant_type_setter", uint32(p0), uint32(p1)).Int())
		return
	}
	gdextension.Host.VariantTypes.Getter = func(p0 gdextension.VariantType, p1 gdextension.StringName) (result gdextension.FunctionID) {
		result = gdextension.FunctionID(js.Global().Get("GD").Call("variant_type_getter", uint32(p0), uint32(p1)).Int())
		return
	}
	gdextension.Host.VariantTypes.HasProperty = func(p0 gdextension.VariantType, p1 gdextension.StringName) (result bool) {
		result = bool(js.Global().Get("GD").Call("variant_type_has_property", uint32(p0), uint32(p1)).Bool())
		return
	}
	gdextension.Host.VariantTypes.Unsafe.Call = func(p0 gdextension.FunctionID, p1 int64, p2 gdextension.CallAccepts[interface{}]) (_ gdextension.CallReturns[interface{}]) {
		js.Global().Get("GD").Call("variant_type_unsafe_call", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1))), uint32(p2))
		return
	}
	gdextension.Host.VariantTypes.Unsafe.Make = func(p0 gdextension.FunctionID, p1 gdextension.CallAccepts[interface{}]) (_ gdextension.CallReturns[interface{}]) {
		js.Global().Get("GD").Call("variant_type_unsafe_make", uint32(p0), uint32(p1))
		return
	}
	gdextension.Host.VariantTypes.Unsafe.Free = func(p0 gdextension.VariantType, p1 gdextension.CallAccepts[interface{}]) (_ gdextension.CallReturns[interface{}]) {
		js.Global().Get("GD").Call("variant_type_unsafe_free", uint32(p0), uint32(p1))
		return
	}
	gdextension.Host.Variants.Zero = func(p0 gdextension.Call) (_ gdextension.CallReturns[gdextension.Variant]) {
		js.Global().Get("GD").Call("variant_zero", uint32(p0))
		return
	}
	gdextension.Host.Variants.Copy = func(p0 gdextension.Variant, p1 gdextension.Call) (_ gdextension.CallReturns[gdextension.Variant]) {
		js.Global().Get("GD").Call("variant_copy", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), uint32(p1))
		return
	}
	gdextension.Host.Variants.Call = func(p0 gdextension.Variant, p1 gdextension.StringName, p2 int64, p3 gdextension.CallAccepts[gdextension.Variant]) (_ gdextension.CallReturns[gdextension.Variant], _ gdextension.MaybeError) {
		js.Global().Get("GD").Call("variant_call", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), uint32(p1), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2))), uint32(p3))
		return
	}
	gdextension.Host.Variants.Eval = func(p0 gdextension.VariantOperator, p1 gdextension.Variant, p2 gdextension.Variant, p3 gdextension.Call) (_ gdextension.CallReturns[gdextension.Variant], result bool) {
		result = bool(js.Global().Get("GD").Call("variant_eval", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[2]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[2]))), uint32(p3)).Bool())
		return
	}
	gdextension.Host.Variants.Hash = func(p0 gdextension.Variant) (result int64) {
		result = int64(js.Global().Get("GD").Call("variant_hash", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2])))).Int())
		return
	}
	gdextension.Host.Variants.Bool = func(p0 gdextension.Variant) (result bool) {
		result = bool(js.Global().Get("GD").Call("variant_bool", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2])))).Bool())
		return
	}
	gdextension.Host.Variants.Text = func(p0 gdextension.Variant) (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("variant_text", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2])))).Int())
		return
	}
	gdextension.Host.Variants.Type = func(p0 gdextension.Variant) (result gdextension.VariantType) {
		result = gdextension.VariantType(js.Global().Get("GD").Call("variant_type", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2])))).Int())
		return
	}
	gdextension.Host.Variants.Deep.Copy = func(p0 gdextension.Variant, p1 gdextension.Call) (_ gdextension.CallReturns[gdextension.Variant]) {
		js.Global().Get("GD").Call("variant_deep_copy", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), uint32(p1))
		return
	}
	gdextension.Host.Variants.Deep.Hash = func(p0 gdextension.Variant, p1 int64) (result int64) {
		result = int64(js.Global().Get("GD").Call("variant_deep_hash", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1)))).Int())
		return
	}
	gdextension.Host.Variants.Get.Index = func(p0 gdextension.Variant, p1 gdextension.Variant, p2 gdextension.Call) (_ gdextension.CallReturns[gdextension.Variant], result bool) {
		result = bool(js.Global().Get("GD").Call("variant_get_index", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[2]))), uint32(p2)).Bool())
		return
	}
	gdextension.Host.Variants.Get.Array = func(p0 gdextension.Variant, p1 int64, p2 gdextension.Call) (_ gdextension.CallReturns[gdextension.Variant], result bool, _ gdextension.MaybeError) {
		result = bool(js.Global().Get("GD").Call("variant_get_array", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1))), uint32(p2)).Bool())
		return
	}
	gdextension.Host.Variants.Get.Field = func(p0 gdextension.Variant, p1 gdextension.StringName, p2 gdextension.Call) (_ gdextension.CallReturns[gdextension.Variant], result bool) {
		result = bool(js.Global().Get("GD").Call("variant_get_field", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), uint32(p1), uint32(p2)).Bool())
		return
	}
	gdextension.Host.Variants.Has.Index = func(p0 gdextension.Variant, p1 gdextension.Variant) (result bool) {
		result = bool(js.Global().Get("GD").Call("variant_has_index", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[2])))).Bool())
		return
	}
	gdextension.Host.Variants.Has.Method = func(p0 gdextension.Variant, p1 gdextension.StringName) (result bool) {
		result = bool(js.Global().Get("GD").Call("variant_has_method", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), uint32(p1)).Bool())
		return
	}
	gdextension.Host.Variants.Set.Index = func(p0 gdextension.Variant, p1 gdextension.Variant, p2 gdextension.Variant) (result bool) {
		result = bool(js.Global().Get("GD").Call("variant_set_index", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[2]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[2])))).Bool())
		return
	}
	gdextension.Host.Variants.Set.Array = func(p0 gdextension.Variant, p1 int64, p2 gdextension.Variant, p3 gdextension.Call) (result bool, _ gdextension.MaybeError) {
		result = bool(js.Global().Get("GD").Call("variant_set_array", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[2]))), uint32(p3)).Bool())
		return
	}
	gdextension.Host.Variants.Set.Field = func(p0 gdextension.Variant, p1 gdextension.StringName, p2 gdextension.Variant) (result bool) {
		result = bool(js.Global().Get("GD").Call("variant_set_field", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))), uint32(p1), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p2[2])))).Bool())
		return
	}
	gdextension.Host.Variants.Unsafe.Call = func(p0 gdextension.FunctionID, p1 int32, p2 gdextension.CallAccepts[interface{}]) (_ gdextension.CallReturns[interface{}]) {
		js.Global().Get("GD").Call("variant_unsafe_call", uint32(p0), int32(p1), uint32(p2))
		return
	}
	gdextension.Host.Variants.Unsafe.Eval = func(p0 gdextension.FunctionID, p1 gdextension.CallAccepts[interface{}]) (_ gdextension.CallReturns[interface{}]) {
		js.Global().Get("GD").Call("variant_unsafe_eval", uint32(p0), uint32(p1))
		return
	}
	gdextension.Host.Variants.Unsafe.Free = func(p0 gdextension.Variant) {
		js.Global().Get("GD").Call("variant_unsafe_free", math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p0[2]))))
		return
	}
	gdextension.Host.Variants.Unsafe.MakeNative = func(p0 gdextension.VariantType, p1 gdextension.Variant, p2 gdextension.Call) (_ gdextension.CallReturns[interface{}]) {
		js.Global().Get("GD").Call("variant_unsafe_make_native", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[2]))), uint32(p2))
		return
	}
	gdextension.Host.Variants.Unsafe.FromNative = func(p0 gdextension.VariantType, p1 gdextension.CallAccepts[interface{}]) (_ gdextension.CallReturns[gdextension.Variant]) {
		js.Global().Get("GD").Call("variant_unsafe_from_native", uint32(p0), uint32(p1))
		return
	}
	gdextension.Host.Variants.Unsafe.InternalPointer = func(p0 gdextension.VariantType, p1 gdextension.Variant) (result gdextension.Pointer) {
		result = gdextension.Pointer(js.Global().Get("GD").Call("variant_unsafe_internal_pointer", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[0]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[1]))), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1[2])))).Int())
		return
	}
	gdextension.Host.Variants.Unsafe.Get.Field = func(p0 gdextension.FunctionID, p1 gdextension.CallAccepts[interface{}]) (_ gdextension.CallReturns[interface{}]) {
		js.Global().Get("GD").Call("variant_unsafe_get_field", uint32(p0), uint32(p1))
		return
	}
	gdextension.Host.Variants.Unsafe.Get.Array = func(p0 gdextension.VariantType, p1 int64, p2 gdextension.CallAccepts[interface{}]) (_ gdextension.CallReturns[interface{}]) {
		js.Global().Get("GD").Call("variant_unsafe_get_array", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1))), uint32(p2))
		return
	}
	gdextension.Host.Variants.Unsafe.Get.Index = func(p0 gdextension.VariantType, p1 gdextension.CallAccepts[interface{}]) (_ gdextension.CallReturns[interface{}]) {
		js.Global().Get("GD").Call("variant_unsafe_get_index", uint32(p0), uint32(p1))
		return
	}
	gdextension.Host.Variants.Unsafe.Set.Field = func(p0 gdextension.FunctionID, p1 gdextension.CallAccepts[interface{}]) {
		js.Global().Get("GD").Call("variant_unsafe_set_field", uint32(p0), uint32(p1))
		return
	}
	gdextension.Host.Variants.Unsafe.Set.Array = func(p0 gdextension.VariantType, p1 int64, p2 gdextension.CallAccepts[interface{}]) {
		js.Global().Get("GD").Call("variant_unsafe_set_array", uint32(p0), math.Float64frombits(*(*uint64)(unsafe.Pointer(&p1))), uint32(p2))
		return
	}
	gdextension.Host.Variants.Unsafe.Set.Index = func(p0 gdextension.VariantType, p1 gdextension.CallAccepts[interface{}]) {
		js.Global().Get("GD").Call("variant_unsafe_set_index", uint32(p0), uint32(p1))
		return
	}
	gdextension.Host.Version.Major = func() (result uint32) {
		result = uint32(js.Global().Get("GD").Call("version_major").Int())
		return
	}
	gdextension.Host.Version.Minor = func() (result uint32) {
		result = uint32(js.Global().Get("GD").Call("version_minor").Int())
		return
	}
	gdextension.Host.Version.Patch = func() (result uint32) {
		result = uint32(js.Global().Get("GD").Call("version_patch").Int())
		return
	}
	gdextension.Host.Version.Hex = func() (result uint32) {
		result = uint32(js.Global().Get("GD").Call("version_hex").Int())
		return
	}
	gdextension.Host.Version.Status = func() (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("version_status").Int())
		return
	}
	gdextension.Host.Version.Build = func() (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("version_build").Int())
		return
	}
	gdextension.Host.Version.Hash = func() (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("version_hash").Int())
		return
	}
	gdextension.Host.Version.Timestamp = func() (result uint64) {
		result = uint64(js.Global().Get("GD").Call("version_timestamp").Int())
		return
	}
	gdextension.Host.Version.String = func() (result gdextension.String) {
		result = gdextension.String(js.Global().Get("GD").Call("version_string").Int())
		return
	}
}
